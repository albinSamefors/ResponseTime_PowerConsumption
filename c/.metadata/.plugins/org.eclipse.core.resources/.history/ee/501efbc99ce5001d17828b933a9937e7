/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stm32wbxx_hal.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include <time.h>
#include <stdlib.h>
#include <math.h>
#include "stm32wbxx_hal_rtc.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//----------------------------------

#define GREEN_LED GPIO_PIN_0

uint8_t SLEEP_TIME_ADDR =  1;
uint8_t RUN_AMOUNT_ADDR = 2;
uint8_t TEST_MODE_ADDR	= 3;

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
RTC_HandleTypeDef hrtc;

SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */

int test = 0;
_Bool finished = false;
uint32_t runAmount = 0;
uint32_t maxRuns = 0;
uint32_t startSignalsSent = 0;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void load_and_print_data(char *file_name){
	// Open file for reading
	FILE *file = fopen(file_name, "r");

	// Read results from file and store in array
	float results[50];
	uint32_t i = 0;
	char line[20];
	while (fgets(line, 20, file)){
		results[i++] = strtof(line, NULL);
	}

	// Close file and calculate test statistics
	fclose(file);
	uint32_t len = i;
	float sum = 0.0, min = results[0], max = results[0];
	for (i = 0; i < len; i++){
		sum += results[i];
		if (results[i] < i){
			min = results[i];
		}
		if (results[i] > max){
			max = results[i];
		}
	}

	// Print test statistics
    printf("-----------------------TEST STATS-----------------------\n");
    printf("Amount of collected data:       %d\n", len);
    printf("Average response time us:       %f\n", sum / len);
    printf("Fastest response time us:       %f\n", min);
    printf("Slowest response time us:       %f\n", max);
    printf("--------------------------------------------------------\n");
}

void send_start_signal(){
	startSignalsSent++;
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_RESET);
}
void send_stop_signal(){
	HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_RESET);
}

void lightsleep_test_interval(uint32_t wakeup_interval_ms, uint32_t wakeup_count)
{
    uint32_t run_counter = 0;
    double period = (16.0/32768.0);
    double wakeup_in_ms = (double)wakeup_interval_ms / 1000.0;
    double msMultiplier = (wakeup_in_ms/period);
    uint32_t interval = (uint32_t)round(msMultiplier);

    while (run_counter < wakeup_count)
    {
        send_start_signal();

        // Enter Stop mode
        HAL_SuspendTick();
        // Configure the RTC Wake-up timer
        HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, interval, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
        // HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
        HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);

        // Disable the RTC Wake-up timer
        HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
        send_stop_signal();
        SystemClock_Config(); // Reconfigure the system clock after waking up

        // Wake up from Stop mode
        HAL_ResumeTick();

        HAL_Delay(10);

        run_counter++;
    }
}

void lightsleep_test_interrupt(){
	while(runAmount < maxRuns){
        send_start_signal();

        // Enter Stop mode
        HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
        //HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
        //send_stop_signal();
	}
}

void deepsleep_test_interval(uint32_t wakeup_interval, uint32_t wakeup_count){
    uint32_t run_counter = 0;
    double period = (16.0/32768.0);
    double wakeup_in_ms = (double)wakeup_interval / 1000.0;
    double msMultiplier = (wakeup_in_ms/period);
    uint32_t interval = (uint32_t)round(msMultiplier);
    while (run_counter < wakeup_count){
    	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
    	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
    	send_start_signal();
    	if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, interval, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK){
    		Error_Handler();
    	}
    	HAL_PWR_EnterSTANDBYMode();
    	//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
    	send_stop_signal();
    }

}

void deepsleep_test_interrupt(){
	while(runAmount < maxRuns){
        send_start_signal();

        // Enter Stop mode
        HAL_PWR_EnterSTANDBYMode();
	}
}


_Bool send16Bit(uint16_t *send){
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2, 10) == HAL_OK){
		return true;
	}
	return false;

}
_Bool recieve16Bit(uint16_t *readInto){
	if(HAL_SPI_Receive(&hspi1, (uint8_t*)readInto, 2, 10) == HAL_OK){
		return true;
	}
	return false;
}
void send_settings_spi(uint16_t sleep_time, uint16_t run_amount, uint16_t run_type){
	HAL_StatusTypeDef sendSleepTimeReady = HAL_SPI_Transmit(&hspi1, &SLEEP_TIME_ADDR, 1, 10);
	if(sendSleepTimeReady == HAL_OK){
		if(!send16Bit(&sleep_time)){
			printf("COULD NOT SEND SLEEP TIME");
		}
	}
	else{
		//
	}
	HAL_StatusTypeDef sendRunAmountReady = HAL_SPI_Transmit(&hspi1, &RUN_AMOUNT_ADDR, 1, 10);
	if(sendRunAmountReady == HAL_OK){
		if(!send16Bit(&run_amount)){
			printf("COULD NOT SEND RUN AMOUNT");
		}
	}
	HAL_StatusTypeDef sendRunTypeReady = HAL_SPI_Transmit(&hspi1, &TEST_MODE_ADDR, 1, 10);
	if(sendRunTypeReady == HAL_OK){
		if(!send16Bit(&run_type)){
			printf("COULD NOT SEND RUN TYPE");
		}
	}

}

uint16_t* receive_data_SPI(uint16_t run_amount){
	uint8_t bytesread[run_amount * 2];
	uint16_t *received_data = malloc(run_amount * sizeof(uint16_t));
	if (received_data == NULL){
		// Handle error
	}

	// Wait for the RECEIVE_READY_Pin to go high before proceeding
	while (HAL_GPIO_ReadPin(RECEIVE_READY_GPIO_Port, RECEIVE_READY_Pin) == GPIO_PIN_RESET)
	{
		// add timeout or yield to other tasks here if necessary
	}

	for (int i = 0; i < run_amount * 2; i += 2){
		HAL_SPI_Receive(&hspi1, &bytesread[i], 2, HAL_MAX_DELAY); // Receive two bytes of data over SPI
	}

	// Process the received data and store it in received_data
	for (int i = 0; i < run_amount; i++){
		uint16_t data = bytesread[i * 2 + 1] << 8 | bytesread[i * 2];
		received_data[i] = data;
	}

	printf("%d\n", run_amount); // Print the number of SPI transfers made
	return received_data;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_RTC_Init();
  /* USER CODE BEGIN 2 */

//  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
//  HAL_NVIC_EnableIRQ(TIM2_IRQn);
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET){
  		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);

  		  //send_stop_signal();
  		  for(int i = 0; i < 10; i++){
  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
  			  HAL_Delay(250);
  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
  			  HAL_Delay(250);
  		  }
  		  HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
  		  HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
  		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);

  		}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		 while(!finished)
		 {
			 uint16_t sleeptime = 50;
			 uint16_t runs = 100;
			 maxRuns = runs;
			 send_settings_spi(sleeptime, runs, 1);
			 HAL_Delay(10);
			 HAL_SuspendTick();
			 //lightsleep_test_interrupt();
			 deepsleep_test_interrupt();
			 //deepsleep_test_interval(sleeptime, runs);
			 //lightsleep_test_interval(sleeptime, runs);
			 uint16_t *data = receive_data_SPI(10);
			 // Free the allocated memory for received_data
			 free(data);
			 finished = true;
		 }

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIMER_PIN_Pin|RESPONSE_PIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIMER_PIN_Pin RESPONSE_PIN_Pin */
  GPIO_InitStruct.Pin = TIMER_PIN_Pin|RESPONSE_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : IRQ_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IRQ_PIN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin LD3_Pin CHIP_SELECT_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 B3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : RECEIVE_READY_Pin */
  GPIO_InitStruct.Pin = RECEIVE_READY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RECEIVE_READY_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == IRQ_PIN_Pin) {
	  //HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_RESET);
	  runAmount++;
	  // HAL_ResumeTick();
	  // HAL_Delay(10);
	  HAL_PWR_DisableSleepOnExit();
  } else {
      __NOP();
  }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
