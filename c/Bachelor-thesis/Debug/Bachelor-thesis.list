
Bachelor-thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  080035d4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000098  20000014  080035e0  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000ac  080035e0  000200ac  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   000102da  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002315  00000000  00000000  0003031e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013d0  00000000  00000000  00032638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000012d8  00000000  00000000  00033a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00021028  00000000  00000000  00034ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000102dd  00000000  00000000  00055d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d627c  00000000  00000000  00065fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0013c261  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000528c  00000000  00000000  0013c2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08003508 	.word	0x08003508

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08003508 	.word	0x08003508

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f000 fb5a 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f81e 	bl	80001f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001bc:	f000 f874 	bl	80002a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f940 	bl	8000444 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c4:	f000 f88e 	bl	80002e4 <MX_I2C1_Init>
  MX_RTC_Init();
 80001c8:	f000 f8cc 	bl	8000364 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Set up NVIC to receive interrupts from the I2C peripheral
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2100      	movs	r1, #0
 80001d0:	201e      	movs	r0, #30
 80001d2:	f000 fcac 	bl	8000b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80001d6:	201e      	movs	r0, #30
 80001d8:	f000 fcc3 	bl	8000b62 <HAL_NVIC_EnableIRQ>

  // Set up the STM32WB55RG to enter sleep mode
  // Enter Stop mode
  // Enable the low-power regulator
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 80001dc:	2102      	movs	r1, #2
 80001de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80001e2:	f000 ffb1 	bl	8001148 <HAL_PWR_EnterSTOPMode>
  // Set the RTC to wake up the device at the appropriate time
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2100      	movs	r1, #0
 80001ea:	4802      	ldr	r0, [pc, #8]	; (80001f4 <main+0x44>)
 80001ec:	f003 f824 	bl	8003238 <HAL_RTCEx_SetWakeUpTimer_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <main+0x40>
 80001f2:	bf00      	nop
 80001f4:	20000084 	.word	0x20000084

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b09a      	sub	sp, #104	; 0x68
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0320 	add.w	r3, r7, #32
 8000202:	2248      	movs	r2, #72	; 0x48
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f003 f976 	bl	80034f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]
 800021a:	615a      	str	r2, [r3, #20]
 800021c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800021e:	4b21      	ldr	r3, [pc, #132]	; (80002a4 <SystemClock_Config+0xac>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000226:	4a1f      	ldr	r2, [pc, #124]	; (80002a4 <SystemClock_Config+0xac>)
 8000228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800022c:	6013      	str	r3, [r2, #0]
 800022e:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <SystemClock_Config+0xac>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800023a:	230b      	movs	r3, #11
 800023c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000248:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2340      	movs	r3, #64	; 0x40
 800024c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800024e:	2305      	movs	r3, #5
 8000250:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0320 	add.w	r3, r7, #32
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fb4e 	bl	80018fc <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000266:	f000 f947 	bl	80004f8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800026a:	236f      	movs	r3, #111	; 0x6f
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800026e:	2302      	movs	r3, #2
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2101      	movs	r1, #1
 800028a:	4618      	mov	r0, r3
 800028c:	f001 feaa 	bl	8001fe4 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000296:	f000 f92f 	bl	80004f8 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3768      	adds	r7, #104	; 0x68
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	58000400 	.word	0x58000400

080002a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b094      	sub	sp, #80	; 0x50
 80002ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2250      	movs	r2, #80	; 0x50
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f003 f91f 	bl	80034f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002c0:	2300      	movs	r3, #0
 80002c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002c8:	463b      	mov	r3, r7
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fa9b 	bl	8002806 <HAL_RCCEx_PeriphCLKConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80002d6:	f000 f90f 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80002da:	bf00      	nop
 80002dc:	3750      	adds	r7, #80	; 0x50
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_I2C1_Init+0x74>)
 80002ea:	4a1c      	ldr	r2, [pc, #112]	; (800035c <MX_I2C1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_I2C1_Init+0x74>)
 80002f0:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <MX_I2C1_Init+0x7c>)
 80002f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = I2C_ADDRESS;
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_I2C1_Init+0x74>)
 80002f6:	2220      	movs	r2, #32
 80002f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_I2C1_Init+0x74>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031e:	480e      	ldr	r0, [pc, #56]	; (8000358 <MX_I2C1_Init+0x74>)
 8000320:	f000 fdc2 	bl	8000ea8 <HAL_I2C_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800032a:	f000 f8e5 	bl	80004f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800032e:	2100      	movs	r1, #0
 8000330:	4809      	ldr	r0, [pc, #36]	; (8000358 <MX_I2C1_Init+0x74>)
 8000332:	f000 fe62 	bl	8000ffa <HAL_I2CEx_ConfigAnalogFilter>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800033c:	f000 f8dc 	bl	80004f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000340:	2100      	movs	r1, #0
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_I2C1_Init+0x74>)
 8000344:	f000 fea4 	bl	8001090 <HAL_I2CEx_ConfigDigitalFilter>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800034e:	f000 f8d3 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000030 	.word	0x20000030
 800035c:	40005400 	.word	0x40005400
 8000360:	00707cbb 	.word	0x00707cbb

08000364 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000378:	2300      	movs	r3, #0
 800037a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800037c:	4b2f      	ldr	r3, [pc, #188]	; (800043c <MX_RTC_Init+0xd8>)
 800037e:	4a30      	ldr	r2, [pc, #192]	; (8000440 <MX_RTC_Init+0xdc>)
 8000380:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000382:	4b2e      	ldr	r3, [pc, #184]	; (800043c <MX_RTC_Init+0xd8>)
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000388:	4b2c      	ldr	r3, [pc, #176]	; (800043c <MX_RTC_Init+0xd8>)
 800038a:	227f      	movs	r2, #127	; 0x7f
 800038c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800038e:	4b2b      	ldr	r3, [pc, #172]	; (800043c <MX_RTC_Init+0xd8>)
 8000390:	22ff      	movs	r2, #255	; 0xff
 8000392:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000394:	4b29      	ldr	r3, [pc, #164]	; (800043c <MX_RTC_Init+0xd8>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <MX_RTC_Init+0xd8>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003a0:	4b26      	ldr	r3, [pc, #152]	; (800043c <MX_RTC_Init+0xd8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003a6:	4b25      	ldr	r3, [pc, #148]	; (800043c <MX_RTC_Init+0xd8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ac:	4823      	ldr	r0, [pc, #140]	; (800043c <MX_RTC_Init+0xd8>)
 80003ae:	f002 fcb1 	bl	8002d14 <HAL_RTC_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80003b8:	f000 f89e 	bl	80004f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80003bc:	2312      	movs	r3, #18
 80003be:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2201      	movs	r2, #1
 80003d8:	4619      	mov	r1, r3
 80003da:	4818      	ldr	r0, [pc, #96]	; (800043c <MX_RTC_Init+0xd8>)
 80003dc:	f002 fd4a 	bl	8002e74 <HAL_RTC_SetTime>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80003e6:	f000 f887 	bl	80004f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80003ea:	2304      	movs	r3, #4
 80003ec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 80003ee:	2303      	movs	r3, #3
 80003f0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 80003f2:	2316      	movs	r3, #22
 80003f4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80003f6:	2323      	movs	r3, #35	; 0x23
 80003f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003fa:	463b      	mov	r3, r7
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	480e      	ldr	r0, [pc, #56]	; (800043c <MX_RTC_Init+0xd8>)
 8000402:	f002 fdfb 	bl	8002ffc <HAL_RTC_SetDate>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 800040c:	f000 f874 	bl	80004f8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000410:	2200      	movs	r2, #0
 8000412:	2100      	movs	r1, #0
 8000414:	4809      	ldr	r0, [pc, #36]	; (800043c <MX_RTC_Init+0xd8>)
 8000416:	f002 ff0f 	bl	8003238 <HAL_RTCEx_SetWakeUpTimer_IT>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8000420:	f000 f86a 	bl	80004f8 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_RTC_Init+0xd8>)
 8000426:	f002 fff3 	bl	8003410 <HAL_RTCEx_SetRefClock>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000430:	f000 f862 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000084 	.word	0x20000084
 8000440:	40002800 	.word	0x40002800

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000458:	2004      	movs	r0, #4
 800045a:	f7ff fe8f 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	2002      	movs	r0, #2
 8000460:	f7ff fe8c 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	2001      	movs	r0, #1
 8000466:	f7ff fe89 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046a:	2008      	movs	r0, #8
 800046c:	f7ff fe86 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2123      	movs	r1, #35	; 0x23
 8000474:	481d      	ldr	r0, [pc, #116]	; (80004ec <MX_GPIO_Init+0xa8>)
 8000476:	f000 fcff 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800047a:	2310      	movs	r3, #16
 800047c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047e:	2300      	movs	r3, #0
 8000480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	4619      	mov	r1, r3
 800048a:	4819      	ldr	r0, [pc, #100]	; (80004f0 <MX_GPIO_Init+0xac>)
 800048c:	f000 fb84 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000490:	2323      	movs	r3, #35	; 0x23
 8000492:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	2301      	movs	r3, #1
 8000496:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4619      	mov	r1, r3
 80004a4:	4811      	ldr	r0, [pc, #68]	; (80004ec <MX_GPIO_Init+0xa8>)
 80004a6:	f000 fb77 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80004bc:	230a      	movs	r3, #10
 80004be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c8:	f000 fb66 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 B3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 80004cc:	2303      	movs	r3, #3
 80004ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_GPIO_Init+0xb0>)
 80004de:	f000 fb5b 	bl	8000b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e2:	bf00      	nop
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	48000400 	.word	0x48000400
 80004f0:	48000800 	.word	0x48000800
 80004f4:	48000c00 	.word	0x48000c00

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	e7fe      	b.n	8000500 <Error_Handler+0x8>

08000502 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800050a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800050e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <LL_AHB2_GRP1_EnableClock>:
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800055e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000562:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4313      	orrs	r3, r2
 800056c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800056e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000572:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4013      	ands	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09c      	sub	sp, #112	; 0x70
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2250      	movs	r2, #80	; 0x50
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 ff9d 	bl	80034f8 <memset>
  if(hi2c->Instance==I2C1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a1a      	ldr	r2, [pc, #104]	; (800062c <HAL_I2C_MspInit+0x94>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d12d      	bne.n	8000624 <HAL_I2C_MspInit+0x8c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005c8:	2304      	movs	r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80005d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f915 	bl	8002806 <HAL_RCCEx_PeriphCLKConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80005e2:	f7ff ff89 	bl	80004f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff ff9c 	bl	8000524 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005ec:	23c0      	movs	r3, #192	; 0xc0
 80005ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f0:	2312      	movs	r3, #18
 80005f2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005fc:	2304      	movs	r3, #4
 80005fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000604:	4619      	mov	r1, r3
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <HAL_I2C_MspInit+0x98>)
 8000608:	f000 fac6 	bl	8000b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800060c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000610:	f7ff ffa1 	bl	8000556 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	201e      	movs	r0, #30
 800061a:	f000 fa88 	bl	8000b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800061e:	201e      	movs	r0, #30
 8000620:	f000 fa9f 	bl	8000b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000624:	bf00      	nop
 8000626:	3770      	adds	r7, #112	; 0x70
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40005400 	.word	0x40005400
 8000630:	48000400 	.word	0x48000400

08000634 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	; 0x70
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2250      	movs	r2, #80	; 0x50
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f002 ff4f 	bl	80034f8 <memset>
  if(hrtc->Instance==RTC)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <HAL_RTC_MspInit+0x9c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d131      	bne.n	80006c8 <HAL_RTC_MspInit+0x94>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000668:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800066a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4618      	mov	r0, r3
 8000676:	f002 f8c6 	bl	8002806 <HAL_RCCEx_PeriphCLKConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8000680:	f7ff ff3a 	bl	80004f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000684:	f7ff ff3d 	bl	8000502 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000688:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800068c:	f7ff ff63 	bl	8000556 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	2002      	movs	r0, #2
 8000692:	f7ff ff47 	bl	8000524 <LL_AHB2_GRP1_EnableClock>
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800069a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_OUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b0:	4619      	mov	r1, r3
 80006b2:	4808      	ldr	r0, [pc, #32]	; (80006d4 <HAL_RTC_MspInit+0xa0>)
 80006b4:	f000 fa70 	bl	8000b98 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 fa36 	bl	8000b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80006c2:	2003      	movs	r0, #3
 80006c4:	f000 fa4d 	bl	8000b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	; 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40002800 	.word	0x40002800
 80006d4:	48000400 	.word	0x48000400

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 f8fc 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <RTC_WKUP_IRQHandler+0x10>)
 8000732:	f002 fe3d 	bl	80033b0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000084 	.word	0x20000084

08000740 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <I2C1_EV_IRQHandler+0x10>)
 8000746:	f000 fc3e 	bl	8000fc6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000030 	.word	0x20000030

08000754 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <SystemInit+0x98>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075e:	4a23      	ldr	r2, [pc, #140]	; (80007ec <SystemInit+0x98>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800077c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000780:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <SystemInit+0x9c>)
 800078e:	4013      	ands	r3, r2
 8000790:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800079a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800079e:	f023 0305 	bic.w	r3, r3, #5
 80007a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80007a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80007ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007be:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <SystemInit+0xa0>)
 80007c0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <SystemInit+0xa0>)
 80007c8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	faf6fefb 	.word	0xfaf6fefb
 80007f4:	22041000 	.word	0x22041000

080007f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80007f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fc:	3304      	adds	r3, #4

080007fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000800:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000802:	d3f9      	bcc.n	80007f8 <CopyDataInit>
  bx lr
 8000804:	4770      	bx	lr

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000806:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000808:	3004      	adds	r0, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800080a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>
  bx lr
 800080e:	4770      	bx	lr

08000810 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000812:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000814:	f7ff ff9e 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <LoopForever+0x6>)
 800081a:	490c      	ldr	r1, [pc, #48]	; (800084c <LoopForever+0xa>)
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <LoopForever+0xe>)
 800081e:	2300      	movs	r3, #0
 8000820:	f7ff ffed 	bl	80007fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopForever+0x12>)
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <LoopForever+0x16>)
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <LoopForever+0x1a>)
 800082a:	2300      	movs	r3, #0
 800082c:	f7ff ffe7 	bl	80007fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <LoopForever+0x1e>)
 8000832:	490c      	ldr	r1, [pc, #48]	; (8000864 <LoopForever+0x22>)
 8000834:	2300      	movs	r3, #0
 8000836:	f7ff ffe8 	bl	800080a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800083a:	f002 fe39 	bl	80034b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800083e:	f7ff fcb7 	bl	80001b0 <main>

08000842 <LoopForever>:

LoopForever:
  b LoopForever
 8000842:	e7fe      	b.n	8000842 <LoopForever>
  ldr   r0, =_estack
 8000844:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000848:	20000008 	.word	0x20000008
 800084c:	20000014 	.word	0x20000014
 8000850:	080035d4 	.word	0x080035d4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000854:	20030000 	.word	0x20030000
 8000858:	20030000 	.word	0x20030000
 800085c:	080035e0 	.word	0x080035e0
  INIT_BSS _sbss, _ebss
 8000860:	20000014 	.word	0x20000014
 8000864:	200000ac 	.word	0x200000ac

08000868 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_Init+0x3c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <HAL_Init+0x3c>)
 800087c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000880:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000882:	2003      	movs	r0, #3
 8000884:	f000 f948 	bl	8000b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000888:	2000      	movs	r0, #0
 800088a:	f000 f80f 	bl	80008ac <HAL_InitTick>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	e001      	b.n	800089e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800089a:	f7ff fe75 	bl	8000588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800089e:	79fb      	ldrb	r3, [r7, #7]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	58004000 	.word	0x58004000

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_InitTick+0x6c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d024      	beq.n	800090a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008c0:	f001 fd3c 	bl	800233c <HAL_RCC_GetHCLKFreq>
 80008c4:	4602      	mov	r2, r0
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_InitTick+0x6c>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f950 	bl	8000b7e <HAL_SYSTICK_Config>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d10f      	bne.n	8000904 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b0f      	cmp	r3, #15
 80008e8:	d809      	bhi.n	80008fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ea:	2200      	movs	r2, #0
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f2:	f000 f91c 	bl	8000b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <HAL_InitTick+0x70>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	e007      	b.n	800090e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]
 8000902:	e004      	b.n	800090e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	e001      	b.n	800090e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000010 	.word	0x20000010
 800091c:	2000000c 	.word	0x2000000c

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000010 	.word	0x20000010
 8000944:	200000a8 	.word	0x200000a8

08000948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	200000a8 	.word	0x200000a8

08000960 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <HAL_GetTickPrio+0x14>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	2000000c 	.word	0x2000000c

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4907      	ldr	r1, [pc, #28]	; (8000a14 <__NVIC_EnableIRQ+0x38>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae4:	d301      	bcc.n	8000aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00f      	b.n	8000b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <SysTick_Config+0x40>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af2:	210f      	movs	r1, #15
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af8:	f7ff ff8e 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <SysTick_Config+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SysTick_Config+0x40>)
 8000b04:	2207      	movs	r2, #7
 8000b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	e000e010 	.word	0xe000e010

08000b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ff29 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff40 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff33 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffa4 	bl	8000ad4 <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e14c      	b.n	8000e42 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 813e 	beq.w	8000e3c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x40>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	f003 0201 	and.w	r2, r3, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d017      	beq.n	8000c76 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d123      	bne.n	8000cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691a      	ldr	r2, [r3, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	6939      	ldr	r1, [r7, #16]
 8000cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0203 	and.w	r2, r3, #3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 8098 	beq.w	8000e3c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d0c:	4a54      	ldr	r2, [pc, #336]	; (8000e60 <HAL_GPIO_Init+0x2c8>)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3302      	adds	r3, #2
 8000d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	220f      	movs	r2, #15
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d36:	d019      	beq.n	8000d6c <HAL_GPIO_Init+0x1d4>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a4a      	ldr	r2, [pc, #296]	; (8000e64 <HAL_GPIO_Init+0x2cc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d013      	beq.n	8000d68 <HAL_GPIO_Init+0x1d0>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d00d      	beq.n	8000d64 <HAL_GPIO_Init+0x1cc>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_GPIO_Init+0x2d4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d007      	beq.n	8000d60 <HAL_GPIO_Init+0x1c8>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a47      	ldr	r2, [pc, #284]	; (8000e70 <HAL_GPIO_Init+0x2d8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d101      	bne.n	8000d5c <HAL_GPIO_Init+0x1c4>
 8000d58:	2304      	movs	r3, #4
 8000d5a:	e008      	b.n	8000d6e <HAL_GPIO_Init+0x1d6>
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	e006      	b.n	8000d6e <HAL_GPIO_Init+0x1d6>
 8000d60:	2303      	movs	r3, #3
 8000d62:	e004      	b.n	8000d6e <HAL_GPIO_Init+0x1d6>
 8000d64:	2302      	movs	r3, #2
 8000d66:	e002      	b.n	8000d6e <HAL_GPIO_Init+0x1d6>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <HAL_GPIO_Init+0x1d6>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	f002 0203 	and.w	r2, r2, #3
 8000d74:	0092      	lsls	r2, r2, #2
 8000d76:	4093      	lsls	r3, r2
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d7e:	4938      	ldr	r1, [pc, #224]	; (8000e60 <HAL_GPIO_Init+0x2c8>)
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3302      	adds	r3, #2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000db0:	4a30      	ldr	r2, [pc, #192]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000db6:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dda:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e06:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f47f aeab 	bne.w	8000ba8 <HAL_GPIO_Init+0x10>
  }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40010000 	.word	0x40010000
 8000e64:	48000400 	.word	0x48000400
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	48000c00 	.word	0x48000c00
 8000e70:	48001000 	.word	0x48001000
 8000e74:	58000800 	.word	0x58000800

08000e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e88:	787b      	ldrb	r3, [r7, #1]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e081      	b.n	8000fbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff fb62 	bl	8000598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2224      	movs	r2, #36	; 0x24
 8000ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0201 	bic.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ef8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d107      	bne.n	8000f22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	e006      	b.n	8000f30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d104      	bne.n	8000f42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69d9      	ldr	r1, [r3, #28]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1a      	ldr	r2, [r3, #32]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	68f9      	ldr	r1, [r7, #12]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b20      	cmp	r3, #32
 800100e:	d138      	bne.n	8001082 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800101a:	2302      	movs	r3, #2
 800101c:	e032      	b.n	8001084 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2224      	movs	r2, #36	; 0x24
 800102a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800104c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0201 	orr.w	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2220      	movs	r2, #32
 8001072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001082:	2302      	movs	r3, #2
  }
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b20      	cmp	r3, #32
 80010a4:	d139      	bne.n	800111a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e033      	b.n	800111c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2224      	movs	r2, #36	; 0x24
 80010c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 0201 	orr.w	r2, r2, #1
 8001104:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2220      	movs	r2, #32
 800110a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800111a:	2302      	movs	r3, #2
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	58000400 	.word	0x58000400

08001148 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800115a:	d104      	bne.n	8001166 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f842 	bl	80011e8 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8001164:	e003      	b.n	800116e <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f813 	bl	8001194 <HAL_PWREx_EnterSTOP0Mode>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_PWREx_GetVoltageRange+0x18>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	58000400 	.word	0x58000400

08001194 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80011a4:	f023 0307 	bic.w	r3, r3, #7
 80011a8:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80011bc:	bf30      	wfi
 80011be:	e002      	b.n	80011c6 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80011c0:	bf40      	sev
    __WFE();
 80011c2:	bf20      	wfe
    __WFE();
 80011c4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80011cc:	f023 0304 	bic.w	r3, r3, #4
 80011d0:	6113      	str	r3, [r2, #16]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	58000400 	.word	0x58000400
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 0307 	bic.w	r3, r3, #7
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001214:	bf30      	wfi
 8001216:	e002      	b.n	800121e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001218:	bf40      	sev
    __WFE();
 800121a:	bf20      	wfe
    __WFE();
 800121c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	4a06      	ldr	r2, [pc, #24]	; (800123c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6113      	str	r3, [r2, #16]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	58000400 	.word	0x58000400
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001252:	d101      	bne.n	8001258 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_RCC_HSE_Enable>:
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_RCC_HSE_Disable>:
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_RCC_HSE_IsReady>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012b2:	d101      	bne.n	80012b8 <LL_RCC_HSE_IsReady+0x18>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <LL_RCC_HSE_IsReady+0x1a>
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_RCC_HSI_Enable>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_RCC_HSI_Disable>:
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80012e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f4:	6013      	str	r3, [r2, #0]
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_RCC_HSI_IsReady>:
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001312:	d101      	bne.n	8001318 <LL_RCC_HSI_IsReady+0x18>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_RCC_HSI_IsReady+0x1a>
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800132c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	061b      	lsls	r3, r3, #24
 800133a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_RCC_HSI48_Enable>:
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800135a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_RCC_HSI48_Disable>:
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800137c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_RCC_HSI48_IsReady>:
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d101      	bne.n	80013aa <LL_RCC_HSI48_IsReady+0x18>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <LL_RCC_HSI48_IsReady+0x1a>
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_RCC_LSE_Enable>:
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_RCC_LSE_Disable>:
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_RCC_LSE_EnableBypass>:
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80013fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_RCC_LSE_DisableBypass>:
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142c:	f023 0304 	bic.w	r3, r3, #4
 8001430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_RCC_LSE_IsReady>:
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b02      	cmp	r3, #2
 8001450:	d101      	bne.n	8001456 <LL_RCC_LSE_IsReady+0x18>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <LL_RCC_LSE_IsReady+0x1a>
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_RCC_LSI1_Enable>:
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_RCC_LSI1_Disable>:
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_RCC_LSI1_IsReady>:
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d101      	bne.n	80014be <LL_RCC_LSI1_IsReady+0x18>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_RCC_LSI1_IsReady+0x1a>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_RCC_LSI2_Enable>:
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_RCC_LSI2_Disable>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80014f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_RCC_LSI2_IsReady>:
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b08      	cmp	r3, #8
 8001520:	d101      	bne.n	8001526 <LL_RCC_LSI2_IsReady+0x18>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_RCC_LSI2_IsReady+0x1a>
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_RCC_LSI2_SetTrimming>:
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800153a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001542:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154e:	4313      	orrs	r3, r2
 8001550:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_RCC_MSI_Enable>:
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <LL_RCC_MSI_Disable>:
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	6013      	str	r3, [r2, #0]
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_RCC_MSI_IsReady>:
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d101      	bne.n	80015b2 <LL_RCC_MSI_IsReady+0x16>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <LL_RCC_MSI_IsReady+0x18>
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_RCC_MSI_SetRange>:
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80015c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_RCC_MSI_GetRange>:
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80015ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2bb0      	cmp	r3, #176	; 0xb0
 80015fc:	d901      	bls.n	8001602 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80015fe:	23b0      	movs	r3, #176	; 0xb0
 8001600:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001602:	687b      	ldr	r3, [r7, #4]
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_RCC_SetSysClkSource>:
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f023 0203 	bic.w	r2, r3, #3
 800164c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_RCC_GetSysClkSource>:
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_RCC_SetAHBPrescaler>:
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800168c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80016aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_RCC_SetAHB4Prescaler>:
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016de:	f023 020f 	bic.w	r2, r3, #15
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ea:	4313      	orrs	r3, r2
 80016ec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_RCC_SetAPB1Prescaler>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800170e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_RCC_SetAPB2Prescaler>:
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_RCC_GetAHBPrescaler>:
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_RCC_GetAHB4Prescaler>:
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017ce:	d101      	bne.n	80017d4 <LL_RCC_PLL_IsReady+0x18>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <LL_RCC_PLL_IsReady+0x1a>
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800182e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 0303 	and.w	r3, r3, #3
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d101      	bne.n	800185a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800186a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800187a:	d101      	bne.n	8001880 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a0:	d101      	bne.n	80018a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80018b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018c4:	d101      	bne.n	80018ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018e8:	d101      	bne.n	80018ee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b08d      	sub	sp, #52	; 0x34
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e363      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 808d 	beq.w	8001a36 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191c:	f7ff fea1 	bl	8001662 <LL_RCC_GetSysClkSource>
 8001920:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001922:	f7ff ff82 	bl	800182a <LL_RCC_PLL_GetMainSource>
 8001926:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x3e>
 800192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001930:	2b0c      	cmp	r3, #12
 8001932:	d147      	bne.n	80019c4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	2b01      	cmp	r3, #1
 8001938:	d144      	bne.n	80019c4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e347      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800194a:	f7ff fe4c 	bl	80015e6 <LL_RCC_MSI_GetRange>
 800194e:	4603      	mov	r3, r0
 8001950:	429c      	cmp	r4, r3
 8001952:	d914      	bls.n	800197e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fd03 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e336      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe26 	bl	80015be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fe4a 	bl	8001610 <LL_RCC_MSI_SetCalibTrimming>
 800197c:	e013      	b.n	80019a6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fe1b 	bl	80015be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe3f 	bl	8001610 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fce4 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e317      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80019a6:	f000 fcc9 	bl	800233c <HAL_RCC_GetHCLKFreq>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4aa4      	ldr	r2, [pc, #656]	; (8001c40 <HAL_RCC_OscConfig+0x344>)
 80019ae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019b0:	4ba4      	ldr	r3, [pc, #656]	; (8001c44 <HAL_RCC_OscConfig+0x348>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe ff79 	bl	80008ac <HAL_InitTick>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d039      	beq.n	8001a34 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e308      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01e      	beq.n	8001a0a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019cc:	f7ff fdc8 	bl	8001560 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d0:	f7fe ffba 	bl	8000948 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d8:	f7fe ffb6 	bl	8000948 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e2f5      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80019ea:	f7ff fdd7 	bl	800159c <LL_RCC_MSI_IsReady>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f1      	beq.n	80019d8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fde0 	bl	80015be <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fe04 	bl	8001610 <LL_RCC_MSI_SetCalibTrimming>
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a0a:	f7ff fdb8 	bl	800157e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a0e:	f7fe ff9b 	bl	8000948 <HAL_GetTick>
 8001a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a16:	f7fe ff97 	bl	8000948 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e2d6      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001a28:	f7ff fdb8 	bl	800159c <LL_RCC_MSI_IsReady>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f1      	bne.n	8001a16 <HAL_RCC_OscConfig+0x11a>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a34:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d047      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a42:	f7ff fe0e 	bl	8001662 <LL_RCC_GetSysClkSource>
 8001a46:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a48:	f7ff feef 	bl	800182a <LL_RCC_PLL_GetMainSource>
 8001a4c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_OscConfig+0x164>
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d108      	bne.n	8001a6c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d134      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e2b4      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d102      	bne.n	8001a7c <HAL_RCC_OscConfig+0x180>
 8001a76:	f7ff fbf5 	bl	8001264 <LL_RCC_HSE_Enable>
 8001a7a:	e001      	b.n	8001a80 <HAL_RCC_OscConfig+0x184>
 8001a7c:	f7ff fc01 	bl	8001282 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d012      	beq.n	8001aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7fe ff5e 	bl	8000948 <HAL_GetTick>
 8001a8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7fe ff5a 	bl	8000948 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e299      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001aa2:	f7ff fbfd 	bl	80012a0 <LL_RCC_HSE_IsReady>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f1      	beq.n	8001a90 <HAL_RCC_OscConfig+0x194>
 8001aac:	e011      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7fe ff4b 	bl	8000948 <HAL_GetTick>
 8001ab2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab6:	f7fe ff47 	bl	8000948 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b64      	cmp	r3, #100	; 0x64
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e286      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ac8:	f7ff fbea 	bl	80012a0 <LL_RCC_HSE_IsReady>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f1      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d04c      	beq.n	8001b78 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ade:	f7ff fdc0 	bl	8001662 <LL_RCC_GetSysClkSource>
 8001ae2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae4:	f7ff fea1 	bl	800182a <LL_RCC_PLL_GetMainSource>
 8001ae8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_OscConfig+0x200>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d10e      	bne.n	8001b14 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d10b      	bne.n	8001b14 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e266      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fc09 	bl	8001324 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b12:	e031      	b.n	8001b78 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d019      	beq.n	8001b50 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	f7ff fbd2 	bl	80012c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7fe ff12 	bl	8000948 <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7fe ff0e 	bl	8000948 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e24d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001b3a:	f7ff fbe1 	bl	8001300 <LL_RCC_HSI_IsReady>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f1      	beq.n	8001b28 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fbeb 	bl	8001324 <LL_RCC_HSI_SetCalibTrimming>
 8001b4e:	e013      	b.n	8001b78 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b50:	f7ff fbc7 	bl	80012e2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7fe fef8 	bl	8000948 <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7fe fef4 	bl	8000948 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e233      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b6e:	f7ff fbc7 	bl	8001300 <LL_RCC_HSI_IsReady>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f1      	bne.n	8001b5c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80a3 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d076      	beq.n	8001c88 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d046      	beq.n	8001c34 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001ba6:	f7ff fc7e 	bl	80014a6 <LL_RCC_LSI1_IsReady>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d113      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001bb0:	f7ff fc57 	bl	8001462 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bb4:	f7fe fec8 	bl	8000948 <HAL_GetTick>
 8001bb8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001bbc:	f7fe fec4 	bl	8000948 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e203      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001bce:	f7ff fc6a 	bl	80014a6 <LL_RCC_LSI1_IsReady>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f1      	beq.n	8001bbc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001bd8:	f7ff fc77 	bl	80014ca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7fe feb4 	bl	8000948 <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001be4:	f7fe feb0 	bl	8000948 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1ef      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001bf6:	f7ff fc8a 	bl	800150e <LL_RCC_LSI2_IsReady>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f1      	beq.n	8001be4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fc94 	bl	8001532 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001c0a:	f7ff fc3b 	bl	8001484 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7fe fe9b 	bl	8000948 <HAL_GetTick>
 8001c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c16:	f7fe fe97 	bl	8000948 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e1d6      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001c28:	f7ff fc3d 	bl	80014a6 <LL_RCC_LSI1_IsReady>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f1      	bne.n	8001c16 <HAL_RCC_OscConfig+0x31a>
 8001c32:	e051      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001c34:	f7ff fc15 	bl	8001462 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7fe fe86 	bl	8000948 <HAL_GetTick>
 8001c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001c3e:	e00c      	b.n	8001c5a <HAL_RCC_OscConfig+0x35e>
 8001c40:	20000008 	.word	0x20000008
 8001c44:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c48:	f7fe fe7e 	bl	8000948 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1bd      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001c5a:	f7ff fc24 	bl	80014a6 <LL_RCC_LSI1_IsReady>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f1      	beq.n	8001c48 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001c64:	f7ff fc42 	bl	80014ec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001c6a:	f7fe fe6d 	bl	8000948 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1ac      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001c7c:	f7ff fc47 	bl	800150e <LL_RCC_LSI2_IsReady>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f1      	bne.n	8001c6a <HAL_RCC_OscConfig+0x36e>
 8001c86:	e027      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001c88:	f7ff fc30 	bl	80014ec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7fe fe5c 	bl	8000948 <HAL_GetTick>
 8001c90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001c94:	f7fe fe58 	bl	8000948 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e197      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ca6:	f7ff fc32 	bl	800150e <LL_RCC_LSI2_IsReady>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f1      	bne.n	8001c94 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001cb0:	f7ff fbe8 	bl	8001484 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7fe fe48 	bl	8000948 <HAL_GetTick>
 8001cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001cbc:	f7fe fe44 	bl	8000948 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e183      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001cce:	f7ff fbea 	bl	80014a6 <LL_RCC_LSI1_IsReady>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f1      	bne.n	8001cbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d05b      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce4:	4ba7      	ldr	r3, [pc, #668]	; (8001f84 <HAL_RCC_OscConfig+0x688>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d114      	bne.n	8001d1a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001cf0:	f7ff fa1a 	bl	8001128 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf4:	f7fe fe28 	bl	8000948 <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfc:	f7fe fe24 	bl	8000948 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e163      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0e:	4b9d      	ldr	r3, [pc, #628]	; (8001f84 <HAL_RCC_OscConfig+0x688>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d102      	bne.n	8001d28 <HAL_RCC_OscConfig+0x42c>
 8001d22:	f7ff fb48 	bl	80013b6 <LL_RCC_LSE_Enable>
 8001d26:	e00c      	b.n	8001d42 <HAL_RCC_OscConfig+0x446>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d104      	bne.n	8001d3a <HAL_RCC_OscConfig+0x43e>
 8001d30:	f7ff fb63 	bl	80013fa <LL_RCC_LSE_EnableBypass>
 8001d34:	f7ff fb3f 	bl	80013b6 <LL_RCC_LSE_Enable>
 8001d38:	e003      	b.n	8001d42 <HAL_RCC_OscConfig+0x446>
 8001d3a:	f7ff fb4d 	bl	80013d8 <LL_RCC_LSE_Disable>
 8001d3e:	f7ff fb6d 	bl	800141c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d014      	beq.n	8001d74 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7fe fdfd 	bl	8000948 <HAL_GetTick>
 8001d4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7fe fdf9 	bl	8000948 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e136      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001d68:	f7ff fb69 	bl	800143e <LL_RCC_LSE_IsReady>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ef      	beq.n	8001d52 <HAL_RCC_OscConfig+0x456>
 8001d72:	e013      	b.n	8001d9c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7fe fde8 	bl	8000948 <HAL_GetTick>
 8001d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7fe fde4 	bl	8000948 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e121      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d92:	f7ff fb54 	bl	800143e <LL_RCC_LSE_IsReady>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ef      	bne.n	8001d7c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d02c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d014      	beq.n	8001dda <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001db0:	f7ff facd 	bl	800134e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7fe fdc8 	bl	8000948 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dbc:	f7fe fdc4 	bl	8000948 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e103      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001dce:	f7ff fae0 	bl	8001392 <LL_RCC_HSI48_IsReady>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f1      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4c0>
 8001dd8:	e013      	b.n	8001e02 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dda:	f7ff fac9 	bl	8001370 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7fe fdb3 	bl	8000948 <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de6:	f7fe fdaf 	bl	8000948 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0ee      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001df8:	f7ff facb 	bl	8001392 <LL_RCC_HSI48_IsReady>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f1      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80e4 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0c:	f7ff fc29 	bl	8001662 <LL_RCC_GetSysClkSource>
 8001e10:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	f040 80b4 	bne.w	8001f8c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0203 	and.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d123      	bne.n	8001e7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d11c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d114      	bne.n	8001e7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d10d      	bne.n	8001e7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d05d      	beq.n	8001f36 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d058      	beq.n	8001f32 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0a1      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e92:	f7ff fc84 	bl	800179e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e96:	f7fe fd57 	bl	8000948 <HAL_GetTick>
 8001e9a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe fd53 	bl	8000948 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e092      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <HAL_RCC_OscConfig+0x68c>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ed0:	4311      	orrs	r1, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ed6:	0212      	lsls	r2, r2, #8
 8001ed8:	4311      	orrs	r1, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ede:	4311      	orrs	r1, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ee4:	4311      	orrs	r1, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001eea:	430a      	orrs	r2, r1
 8001eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ef4:	f7ff fc44 	bl	8001780 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f08:	f7fe fd1e 	bl	8000948 <HAL_GetTick>
 8001f0c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7fe fd1a 	bl	8000948 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e059      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ef      	beq.n	8001f10 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f30:	e050      	b.n	8001fd4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e04f      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d147      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f44:	f7ff fc1c 	bl	8001780 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f58:	f7fe fcf6 	bl	8000948 <HAL_GetTick>
 8001f5c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fcf2 	bl	8000948 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e031      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ef      	beq.n	8001f60 <HAL_RCC_OscConfig+0x664>
 8001f80:	e028      	b.n	8001fd4 <HAL_RCC_OscConfig+0x6d8>
 8001f82:	bf00      	nop
 8001f84:	58000400 	.word	0x58000400
 8001f88:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d01e      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	f7ff fc04 	bl	800179e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7fe fcd7 	bl	8000948 <HAL_GetTick>
 8001f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe fcd3 	bl	8000948 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e012      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ef      	bne.n	8001f9e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_OscConfig+0x6e4>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	60cb      	str	r3, [r1, #12]
 8001fce:	e001      	b.n	8001fd4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3734      	adds	r7, #52	; 0x34
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	eefefffc 	.word	0xeefefffc

08001fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e12d      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b98      	ldr	r3, [pc, #608]	; (800225c <HAL_RCC_ClockConfig+0x278>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d91b      	bls.n	800203e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b95      	ldr	r3, [pc, #596]	; (800225c <HAL_RCC_ClockConfig+0x278>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	4993      	ldr	r1, [pc, #588]	; (800225c <HAL_RCC_ClockConfig+0x278>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002016:	f7fe fc97 	bl	8000948 <HAL_GetTick>
 800201a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201c:	e008      	b.n	8002030 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800201e:	f7fe fc93 	bl	8000948 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e111      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002030:	4b8a      	ldr	r3, [pc, #552]	; (800225c <HAL_RCC_ClockConfig+0x278>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d1ef      	bne.n	800201e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fb13 	bl	800167a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002054:	f7fe fc78 	bl	8000948 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800205c:	f7fe fc74 	bl	8000948 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0f2      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800206e:	f7ff fbe8 	bl	8001842 <LL_RCC_IsActiveFlag_HPRE>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f1      	beq.n	800205c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d016      	beq.n	80020b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fb0a 	bl	80016a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800208e:	f7fe fc5b 	bl	8000948 <HAL_GetTick>
 8002092:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002096:	f7fe fc57 	bl	8000948 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0d5      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80020a8:	f7ff fbdd 	bl	8001866 <LL_RCC_IsActiveFlag_C2HPRE>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f1      	beq.n	8002096 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fb03 	bl	80016ce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020c8:	f7fe fc3e 	bl	8000948 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020d0:	f7fe fc3a 	bl	8000948 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0b8      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80020e2:	f7ff fbd3 	bl	800188c <LL_RCC_IsActiveFlag_SHDHPRE>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f1      	beq.n	80020d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d016      	beq.n	8002126 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fafd 	bl	80016fc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002102:	f7fe fc21 	bl	8000948 <HAL_GetTick>
 8002106:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800210a:	f7fe fc1d 	bl	8000948 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e09b      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800211c:	f7ff fbc9 	bl	80018b2 <LL_RCC_IsActiveFlag_PPRE1>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f1      	beq.n	800210a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d017      	beq.n	8002162 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff faf3 	bl	8001724 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800213e:	f7fe fc03 	bl	8000948 <HAL_GetTick>
 8002142:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002146:	f7fe fbff 	bl	8000948 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e07d      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002158:	f7ff fbbd 	bl	80018d6 <LL_RCC_IsActiveFlag_PPRE2>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f1      	beq.n	8002146 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d043      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d106      	bne.n	8002184 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002176:	f7ff f893 	bl	80012a0 <LL_RCC_HSE_IsReady>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d11e      	bne.n	80021be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e067      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d106      	bne.n	800219a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800218c:	f7ff fb16 	bl	80017bc <LL_RCC_PLL_IsReady>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e05c      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80021a2:	f7ff f9fb 	bl	800159c <LL_RCC_MSI_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d108      	bne.n	80021be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e051      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80021b0:	f7ff f8a6 	bl	8001300 <LL_RCC_HSI_IsReady>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e04a      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fa39 	bl	800163a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c8:	f7fe fbbe 	bl	8000948 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fbba 	bl	8000948 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e036      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	f7ff fa3c 	bl	8001662 <LL_RCC_GetSysClkSource>
 80021ea:	4602      	mov	r2, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d1ec      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_ClockConfig+0x278>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d21b      	bcs.n	800223c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_RCC_ClockConfig+0x278>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 0207 	bic.w	r2, r3, #7
 800220c:	4913      	ldr	r1, [pc, #76]	; (800225c <HAL_RCC_ClockConfig+0x278>)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002214:	f7fe fb98 	bl	8000948 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	e008      	b.n	800222e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800221c:	f7fe fb94 	bl	8000948 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e012      	b.n	8002254 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x278>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d1ef      	bne.n	800221c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800223c:	f000 f87e 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002240:	4603      	mov	r3, r0
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_RCC_ClockConfig+0x27c>)
 8002244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002246:	f7fe fb8b 	bl	8000960 <HAL_GetTickPrio>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fb2d 	bl	80008ac <HAL_InitTick>
 8002252:	4603      	mov	r3, r0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	58004000 	.word	0x58004000
 8002260:	20000008 	.word	0x20000008

08002264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226a:	f7ff f9fa 	bl	8001662 <LL_RCC_GetSysClkSource>
 800226e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10a      	bne.n	800228c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002276:	f7ff f9b6 	bl	80015e6 <LL_RCC_MSI_GetRange>
 800227a:	4603      	mov	r3, r0
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a2b      	ldr	r2, [pc, #172]	; (8002330 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e04b      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b04      	cmp	r3, #4
 8002290:	d102      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	e045      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b08      	cmp	r3, #8
 800229c:	d10a      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800229e:	f7fe ffcf 	bl	8001240 <LL_RCC_HSE_IsEnabledDiv2>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e03a      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e037      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80022b4:	f7ff fab9 	bl	800182a <LL_RCC_PLL_GetMainSource>
 80022b8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d003      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x64>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0x6a>
 80022c6:	e00d      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ca:	60bb      	str	r3, [r7, #8]
        break;
 80022cc:	e015      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80022ce:	f7fe ffb7 	bl	8001240 <LL_RCC_HSE_IsEnabledDiv2>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022da:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80022dc:	e00d      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022e0:	60bb      	str	r3, [r7, #8]
        break;
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80022e4:	f7ff f97f 	bl	80015e6 <LL_RCC_MSI_GetRange>
 80022e8:	4603      	mov	r3, r0
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	60bb      	str	r3, [r7, #8]
        break;
 80022f8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80022fa:	f7ff fa71 	bl	80017e0 <LL_RCC_PLL_GetN>
 80022fe:	4602      	mov	r2, r0
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	fb03 f402 	mul.w	r4, r3, r2
 8002306:	f7ff fa84 	bl	8001812 <LL_RCC_PLL_GetDivider>
 800230a:	4603      	mov	r3, r0
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	3301      	adds	r3, #1
 8002310:	fbb4 f4f3 	udiv	r4, r4, r3
 8002314:	f7ff fa71 	bl	80017fa <LL_RCC_PLL_GetR>
 8002318:	4603      	mov	r3, r0
 800231a:	0f5b      	lsrs	r3, r3, #29
 800231c:	3301      	adds	r3, #1
 800231e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002322:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002324:	68fb      	ldr	r3, [r7, #12]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
 800232e:	bf00      	nop
 8002330:	0800358c 	.word	0x0800358c
 8002334:	00f42400 	.word	0x00f42400
 8002338:	01e84800 	.word	0x01e84800

0800233c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b598      	push	{r3, r4, r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002340:	f7ff ff90 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8002344:	4604      	mov	r4, r0
 8002346:	f7ff fa01 	bl	800174c <LL_RCC_GetAHBPrescaler>
 800234a:	4603      	mov	r3, r0
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	4a03      	ldr	r2, [pc, #12]	; (8002360 <HAL_RCC_GetHCLKFreq+0x24>)
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd98      	pop	{r3, r4, r7, pc}
 8002360:	0800354c 	.word	0x0800354c

08002364 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2bb0      	cmp	r3, #176	; 0xb0
 8002370:	d903      	bls.n	800237a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e007      	b.n	800238a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002388:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800238a:	f7ff f9eb 	bl	8001764 <LL_RCC_GetAHB4Prescaler>
 800238e:	4603      	mov	r3, r0
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	0c9c      	lsrs	r4, r3, #18
 80023ae:	f7fe fee3 	bl	8001178 <HAL_PWREx_GetVoltageRange>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4619      	mov	r1, r3
 80023b6:	4620      	mov	r0, r4
 80023b8:	f000 f80c 	bl	80023d4 <RCC_SetFlashLatency>
 80023bc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	0800358c 	.word	0x0800358c
 80023cc:	0800354c 	.word	0x0800354c
 80023d0:	431bde83 	.word	0x431bde83

080023d4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b093      	sub	sp, #76	; 0x4c
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <RCC_SetFlashLatency+0xe8>)
 80023e0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80023e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80023ea:	4a35      	ldr	r2, [pc, #212]	; (80024c0 <RCC_SetFlashLatency+0xec>)
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80023f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80023f6:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <RCC_SetFlashLatency+0xf0>)
 80023f8:	f107 040c 	add.w	r4, r7, #12
 80023fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002402:	2300      	movs	r3, #0
 8002404:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d11a      	bne.n	8002444 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800240e:	2300      	movs	r3, #0
 8002410:	643b      	str	r3, [r7, #64]	; 0x40
 8002412:	e013      	b.n	800243c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	3348      	adds	r3, #72	; 0x48
 800241a:	443b      	add	r3, r7
 800241c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	d807      	bhi.n	8002436 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3348      	adds	r3, #72	; 0x48
 800242c:	443b      	add	r3, r7
 800242e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002432:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002434:	e020      	b.n	8002478 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002438:	3301      	adds	r3, #1
 800243a:	643b      	str	r3, [r7, #64]	; 0x40
 800243c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800243e:	2b03      	cmp	r3, #3
 8002440:	d9e8      	bls.n	8002414 <RCC_SetFlashLatency+0x40>
 8002442:	e019      	b.n	8002478 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002444:	2300      	movs	r3, #0
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002448:	e013      	b.n	8002472 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800244a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	3348      	adds	r3, #72	; 0x48
 8002450:	443b      	add	r3, r7
 8002452:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	d807      	bhi.n	800246c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800245c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	3348      	adds	r3, #72	; 0x48
 8002462:	443b      	add	r3, r7
 8002464:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002468:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800246a:	e005      	b.n	8002478 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246e:	3301      	adds	r3, #1
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	2b02      	cmp	r3, #2
 8002476:	d9e8      	bls.n	800244a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <RCC_SetFlashLatency+0xf4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 0207 	bic.w	r2, r3, #7
 8002480:	4911      	ldr	r1, [pc, #68]	; (80024c8 <RCC_SetFlashLatency+0xf4>)
 8002482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002488:	f7fe fa5e 	bl	8000948 <HAL_GetTick>
 800248c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800248e:	e008      	b.n	80024a2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002490:	f7fe fa5a 	bl	8000948 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e007      	b.n	80024b2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <RCC_SetFlashLatency+0xf4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1ef      	bne.n	8002490 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	374c      	adds	r7, #76	; 0x4c
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	bf00      	nop
 80024bc:	08003520 	.word	0x08003520
 80024c0:	08003530 	.word	0x08003530
 80024c4:	0800353c 	.word	0x0800353c
 80024c8:	58004000 	.word	0x58004000

080024cc <LL_RCC_LSE_IsEnabled>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <LL_RCC_LSE_IsEnabled+0x18>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <LL_RCC_LSE_IsEnabled+0x1a>
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_RCC_LSE_IsReady>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d101      	bne.n	8002508 <LL_RCC_LSE_IsReady+0x18>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <LL_RCC_LSE_IsReady+0x1a>
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_RCC_SetRFWKPClockSource>:
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800251c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002524:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_RCC_SetSMPSClockSource>:
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4313      	orrs	r3, r2
 800255a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_RCC_SetSMPSPrescaler>:
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800257a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4313      	orrs	r3, r2
 8002582:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_RCC_SetUSARTClockSource>:
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f023 0203 	bic.w	r2, r3, #3
 80025a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_RCC_SetLPUARTClockSource>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_RCC_SetI2CClockSource>:
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002600:	43db      	mvns	r3, r3
 8002602:	401a      	ands	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800260c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_RCC_SetLPTIMClockSource>:
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800262a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	041b      	lsls	r3, r3, #16
 8002640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_RCC_SetSAIClockSource>:
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800266a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_RCC_SetRNGClockSource>:
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_RCC_SetCLK48ClockSource>:
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_RCC_SetUSBClockSource>:
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ffe3 	bl	80026ae <LL_RCC_SetCLK48ClockSource>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <LL_RCC_SetADCClockSource>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_RCC_SetRTCClockSource>:
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_RCC_GetRTCClockSource>:
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800274c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_RCC_ForceBackupDomainReset>:
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_RCC_PLLSAI1_Enable>:
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80027aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027b8:	6013      	str	r3, [r2, #0]
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_RCC_PLLSAI1_Disable>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_RCC_PLLSAI1_IsReady>:
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f4:	d101      	bne.n	80027fa <LL_RCC_PLLSAI1_IsReady+0x18>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b088      	sub	sp, #32
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800280e:	2300      	movs	r3, #0
 8002810:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002812:	2300      	movs	r3, #0
 8002814:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d034      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800282a:	d021      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800282c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002830:	d81b      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002836:	d01d      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800283c:	d815      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002846:	d110      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002858:	e00d      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f947 	bl	8002af2 <RCCEx_PLLSAI1_ConfigNP>
 8002864:	4603      	mov	r3, r0
 8002866:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002868:	e005      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	77fb      	strb	r3, [r7, #31]
        break;
 800286e:	e002      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002870:	bf00      	nop
 8002872:	e000      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002876:	7ffb      	ldrb	r3, [r7, #31]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fee8 	bl	8002656 <LL_RCC_SetSAIClockSource>
 8002886:	e001      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002888:	7ffb      	ldrb	r3, [r7, #31]
 800288a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002894:	2b00      	cmp	r3, #0
 8002896:	d046      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002898:	f7ff ff56 	bl	8002748 <LL_RCC_GetRTCClockSource>
 800289c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d03c      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80028a8:	f7fe fc3e 	bl	8001128 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff30 	bl	800271c <LL_RCC_SetRTCClockSource>
 80028bc:	e02e      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80028c8:	f7ff ff4b 	bl	8002762 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80028cc:	f7ff ff5a 	bl	8002784 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80028de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80028e8:	f7ff fdf0 	bl	80024cc <LL_RCC_LSE_IsEnabled>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d114      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f2:	f7fe f829 	bl	8000948 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80028f8:	e00b      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7fe f825 	bl	8000948 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f241 3288 	movw	r2, #5000	; 0x1388
 8002908:	4293      	cmp	r3, r2
 800290a:	d902      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	77fb      	strb	r3, [r7, #31]
              break;
 8002910:	e004      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002912:	f7ff fded 	bl	80024f0 <LL_RCC_LSE_IsReady>
 8002916:	4603      	mov	r3, r0
 8002918:	2b01      	cmp	r3, #1
 800291a:	d1ee      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800291c:	7ffb      	ldrb	r3, [r7, #31]
 800291e:	77bb      	strb	r3, [r7, #30]
 8002920:	e001      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002922:	7ffb      	ldrb	r3, [r7, #31]
 8002924:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d004      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fe2a 	bl	8002590 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fe35 	bl	80025bc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d004      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fe5d 	bl	8002622 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fe52 	bl	8002622 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fe2a 	bl	80025e8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fe1f 	bl	80025e8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d022      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fe8d 	bl	80026da <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c8:	d107      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e2:	d10b      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f8dd 	bl	8002ba8 <RCCEx_PLLSAI1_ConfigNQ>
 80029ee:	4603      	mov	r3, r0
 80029f0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80029f2:	7ffb      	ldrb	r3, [r7, #31]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80029f8:	7ffb      	ldrb	r3, [r7, #31]
 80029fa:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02b      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d008      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a1a:	d003      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fe2a 	bl	8002682 <LL_RCC_SetRNGClockSource>
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7ff fe21 	bl	8002682 <LL_RCC_SetRNGClockSource>
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff fe34 	bl	80026ae <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d022      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fe3d 	bl	80026f0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a98:	d10b      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f8dd 	bl	8002c5e <RCCEx_PLLSAI1_ConfigNR>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002aa8:	7ffb      	ldrb	r3, [r7, #31]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002aae:	7ffb      	ldrb	r3, [r7, #31]
 8002ab0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fd26 	bl	8002514 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fd45 	bl	8002568 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fd2c 	bl	8002540 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002ae8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002afe:	f7ff fe61 	bl	80027c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b02:	f7fd ff21 	bl	8000948 <HAL_GetTick>
 8002b06:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002b08:	e009      	b.n	8002b1e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b0a:	f7fd ff1d 	bl	8000948 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d902      	bls.n	8002b1e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e004      	b.n	8002b28 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002b1e:	f7ff fe60 	bl	80027e2 <LL_RCC_PLLSAI1_IsReady>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d137      	bne.n	8002b9e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b42:	4313      	orrs	r3, r2
 8002b44:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002b5c:	f7ff fe23 	bl	80027a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b60:	f7fd fef2 	bl	8000948 <HAL_GetTick>
 8002b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b66:	e009      	b.n	8002b7c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b68:	f7fd feee 	bl	8000948 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d902      	bls.n	8002b7c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	73fb      	strb	r3, [r7, #15]
        break;
 8002b7a:	e004      	b.n	8002b86 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b7c:	f7ff fe31 	bl	80027e2 <LL_RCC_PLLSAI1_IsReady>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d1f0      	bne.n	8002b68 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002bb4:	f7ff fe06 	bl	80027c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bb8:	f7fd fec6 	bl	8000948 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bbe:	e009      	b.n	8002bd4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bc0:	f7fd fec2 	bl	8000948 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d902      	bls.n	8002bd4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd2:	e004      	b.n	8002bde <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bd4:	f7ff fe05 	bl	80027e2 <LL_RCC_PLLSAI1_IsReady>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d137      	bne.n	8002c54 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002c12:	f7ff fdc8 	bl	80027a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c16:	f7fd fe97 	bl	8000948 <HAL_GetTick>
 8002c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c1c:	e009      	b.n	8002c32 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c1e:	f7fd fe93 	bl	8000948 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d902      	bls.n	8002c32 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	73fb      	strb	r3, [r7, #15]
        break;
 8002c30:	e004      	b.n	8002c3c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c32:	f7ff fdd6 	bl	80027e2 <LL_RCC_PLLSAI1_IsReady>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d1f0      	bne.n	8002c1e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c50:	4313      	orrs	r3, r2
 8002c52:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002c6a:	f7ff fdab 	bl	80027c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c6e:	f7fd fe6b 	bl	8000948 <HAL_GetTick>
 8002c72:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c74:	e009      	b.n	8002c8a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c76:	f7fd fe67 	bl	8000948 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d902      	bls.n	8002c8a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	73fb      	strb	r3, [r7, #15]
      break;
 8002c88:	e004      	b.n	8002c94 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c8a:	f7ff fdaa 	bl	80027e2 <LL_RCC_PLLSAI1_IsReady>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d137      	bne.n	8002d0a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002cc8:	f7ff fd6d 	bl	80027a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ccc:	f7fd fe3c 	bl	8000948 <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002cd2:	e009      	b.n	8002ce8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd4:	f7fd fe38 	bl	8000948 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ce6:	e004      	b.n	8002cf2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ce8:	f7ff fd7b 	bl	80027e2 <LL_RCC_PLLSAI1_IsReady>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d1f0      	bne.n	8002cd4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d108      	bne.n	8002d0a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d06:	4313      	orrs	r3, r2
 8002d08:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e09f      	b.n	8002e66 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fc7a 	bl	8000634 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d48:	4b49      	ldr	r3, [pc, #292]	; (8002e70 <HAL_RTC_Init+0x15c>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d07e      	beq.n	8002e52 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	22ca      	movs	r2, #202	; 0xca
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2253      	movs	r2, #83	; 0x53
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa1d 	bl	80031a4 <RTC_EnterInitMode>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	22ff      	movs	r2, #255	; 0xff
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e067      	b.n	8002e56 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d98:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	68d2      	ldr	r2, [r2, #12]
 8002dc0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6919      	ldr	r1, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	041a      	lsls	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0203 	bic.w	r2, r2, #3
 8002df4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d113      	bne.n	8002e44 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f99b 	bl	8003158 <HAL_RTC_WaitForSynchro>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00d      	beq.n	8002e44 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e010      	b.n	8002e66 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e001      	b.n	8002e56 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d103      	bne.n	8002e64 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40002800 	.word	0x40002800

08002e74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_RTC_SetTime+0x1a>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e0b2      	b.n	8002ff4 <HAL_RTC_SetTime+0x180>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d126      	bne.n	8002ef2 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f99b 	bl	80031f8 <RTC_ByteToBcd2>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f994 	bl	80031f8 <RTC_ByteToBcd2>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ed4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	789b      	ldrb	r3, [r3, #2]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f98c 	bl	80031f8 <RTC_ByteToBcd2>
 8002ee0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ee2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	78db      	ldrb	r3, [r3, #3]
 8002eea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	e018      	b.n	8002f24 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2200      	movs	r2, #0
 8002f04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f12:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002f18:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	78db      	ldrb	r3, [r3, #3]
 8002f1e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	22ca      	movs	r2, #202	; 0xca
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2253      	movs	r2, #83	; 0x53
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f935 	bl	80031a4 <RTC_EnterInitMode>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	22ff      	movs	r2, #255	; 0xff
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e04b      	b.n	8002ff4 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f6a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f7a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d113      	bne.n	8002fda <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f8d0 	bl	8003158 <HAL_RTC_WaitForSynchro>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	22ff      	movs	r2, #255	; 0xff
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00c      	b.n	8002ff4 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	22ff      	movs	r2, #255	; 0xff
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}

08002ffc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_RTC_SetDate+0x1a>
 8003012:	2302      	movs	r3, #2
 8003014:	e09c      	b.n	8003150 <HAL_RTC_SetDate+0x154>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10e      	bne.n	800304a <HAL_RTC_SetDate+0x4e>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	f023 0310 	bic.w	r3, r3, #16
 8003040:	b2db      	uxtb	r3, r3
 8003042:	330a      	adds	r3, #10
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11c      	bne.n	800308a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	78db      	ldrb	r3, [r3, #3]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f8cf 	bl	80031f8 <RTC_ByteToBcd2>
 800305a:	4603      	mov	r3, r0
 800305c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f8c8 	bl	80031f8 <RTC_ByteToBcd2>
 8003068:	4603      	mov	r3, r0
 800306a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800306c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	789b      	ldrb	r3, [r3, #2]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f8c0 	bl	80031f8 <RTC_ByteToBcd2>
 8003078:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800307a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	e00e      	b.n	80030a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	78db      	ldrb	r3, [r3, #3]
 800308e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	785b      	ldrb	r3, [r3, #1]
 8003094:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003096:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800309c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	22ca      	movs	r2, #202	; 0xca
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2253      	movs	r2, #83	; 0x53
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f873 	bl	80031a4 <RTC_EnterInitMode>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	22ff      	movs	r2, #255	; 0xff
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2204      	movs	r2, #4
 80030d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e037      	b.n	8003150 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030ee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d113      	bne.n	8003136 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f822 	bl	8003158 <HAL_RTC_WaitForSynchro>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	22ff      	movs	r2, #255	; 0xff
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2204      	movs	r2, #4
 8003126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e00c      	b.n	8003150 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	22ff      	movs	r2, #255	; 0xff
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800314e:	2300      	movs	r3, #0
  }
}
 8003150:	4618      	mov	r0, r3
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	bd90      	pop	{r4, r7, pc}

08003158 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800316e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003170:	f7fd fbea 	bl	8000948 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003176:	e009      	b.n	800318c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003178:	f7fd fbe6 	bl	8000948 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003186:	d901      	bls.n	800318c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e007      	b.n	800319c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0ee      	beq.n	8003178 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d119      	bne.n	80031ee <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80031c4:	f7fd fbc0 	bl	8000948 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80031ca:	e009      	b.n	80031e0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80031cc:	f7fd fbbc 	bl	8000948 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031da:	d901      	bls.n	80031e0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e007      	b.n	80031f0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ee      	beq.n	80031cc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800320a:	e005      	b.n	8003218 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003212:	7afb      	ldrb	r3, [r7, #11]
 8003214:	3b0a      	subs	r3, #10
 8003216:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003218:	7afb      	ldrb	r3, [r7, #11]
 800321a:	2b09      	cmp	r3, #9
 800321c:	d8f6      	bhi.n	800320c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	b2da      	uxtb	r2, r3
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	4313      	orrs	r3, r2
 800322a:	b2db      	uxtb	r3, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800324e:	2302      	movs	r3, #2
 8003250:	e0a8      	b.n	80033a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	22ca      	movs	r2, #202	; 0xca
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2253      	movs	r2, #83	; 0x53
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003280:	f7fd fb62 	bl	8000948 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003286:	e015      	b.n	80032b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003288:	f7fd fb5e 	bl	8000948 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003296:	d90d      	bls.n	80032b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	22ff      	movs	r2, #255	; 0xff
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2203      	movs	r2, #3
 80032a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e077      	b.n	80033a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e2      	bne.n	8003288 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80032e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80032e4:	f7fd fb30 	bl	8000948 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80032ea:	e015      	b.n	8003318 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032ec:	f7fd fb2c 	bl	8000948 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032fa:	d90d      	bls.n	8003318 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	22ff      	movs	r2, #255	; 0xff
 8003302:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2203      	movs	r2, #3
 8003308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e045      	b.n	80033a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0e2      	beq.n	80032ec <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0207 	bic.w	r2, r2, #7
 800333c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800334e:	4b17      	ldr	r3, [pc, #92]	; (80033ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800335a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003378:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003388:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	22ff      	movs	r2, #255	; 0xff
 8003390:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	58000800 	.word	0x58000800

080033b0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f818 	bl	80033fc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033dc:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80033e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033e4:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	58000800 	.word	0x58000800

080033fc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_RTCEx_SetRefClock+0x16>
 8003422:	2302      	movs	r3, #2
 8003424:	e040      	b.n	80034a8 <HAL_RTCEx_SetRefClock+0x98>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	22ca      	movs	r2, #202	; 0xca
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2253      	movs	r2, #83	; 0x53
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff feac 	bl	80031a4 <RTC_EnterInitMode>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <HAL_RTCEx_SetRefClock+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	22ff      	movs	r2, #255	; 0xff
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2204      	movs	r2, #4
 800345e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e01c      	b.n	80034a8 <HAL_RTCEx_SetRefClock+0x98>
  }
  else
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0210 	orr.w	r2, r2, #16
 800347c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	22ff      	movs	r2, #255	; 0xff
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <__libc_init_array>:
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	4d0d      	ldr	r5, [pc, #52]	; (80034e8 <__libc_init_array+0x38>)
 80034b4:	4c0d      	ldr	r4, [pc, #52]	; (80034ec <__libc_init_array+0x3c>)
 80034b6:	1b64      	subs	r4, r4, r5
 80034b8:	10a4      	asrs	r4, r4, #2
 80034ba:	2600      	movs	r6, #0
 80034bc:	42a6      	cmp	r6, r4
 80034be:	d109      	bne.n	80034d4 <__libc_init_array+0x24>
 80034c0:	4d0b      	ldr	r5, [pc, #44]	; (80034f0 <__libc_init_array+0x40>)
 80034c2:	4c0c      	ldr	r4, [pc, #48]	; (80034f4 <__libc_init_array+0x44>)
 80034c4:	f000 f820 	bl	8003508 <_init>
 80034c8:	1b64      	subs	r4, r4, r5
 80034ca:	10a4      	asrs	r4, r4, #2
 80034cc:	2600      	movs	r6, #0
 80034ce:	42a6      	cmp	r6, r4
 80034d0:	d105      	bne.n	80034de <__libc_init_array+0x2e>
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d8:	4798      	blx	r3
 80034da:	3601      	adds	r6, #1
 80034dc:	e7ee      	b.n	80034bc <__libc_init_array+0xc>
 80034de:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e2:	4798      	blx	r3
 80034e4:	3601      	adds	r6, #1
 80034e6:	e7f2      	b.n	80034ce <__libc_init_array+0x1e>
 80034e8:	080035cc 	.word	0x080035cc
 80034ec:	080035cc 	.word	0x080035cc
 80034f0:	080035cc 	.word	0x080035cc
 80034f4:	080035d0 	.word	0x080035d0

080034f8 <memset>:
 80034f8:	4402      	add	r2, r0
 80034fa:	4603      	mov	r3, r0
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d100      	bne.n	8003502 <memset+0xa>
 8003500:	4770      	bx	lr
 8003502:	f803 1b01 	strb.w	r1, [r3], #1
 8003506:	e7f9      	b.n	80034fc <memset+0x4>

08003508 <_init>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	bf00      	nop
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr

08003514 <_fini>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	bf00      	nop
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr
