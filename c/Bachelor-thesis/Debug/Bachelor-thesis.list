
Bachelor-thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000298c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002ac8  08002ac8  00012ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  08002b7c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000314  20000014  08002b88  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000328  08002b88  00020328  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d32d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002124  00000000  00000000  0002d371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000010e0  00000000  00000000  0002f498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ff8  00000000  00000000  00030578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000202c7  00000000  00000000  00031570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c378  00000000  00000000  00051837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cec8d  00000000  00000000  0005dbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0012c83c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000452c  00000000  00000000  0012c88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08002ab0 	.word	0x08002ab0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08002ab0 	.word	0x08002ab0

0800017c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800018c:	f023 0218 	bic.w	r2, r3, #24
 8000190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	4313      	orrs	r3, r2
 8000198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001a6:	4770      	bx	lr

080001a8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4313      	orrs	r3, r2
 80001be:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4013      	ands	r3, r2
 80001ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001cc:	68fb      	ldr	r3, [r7, #12]
}
 80001ce:	bf00      	nop
 80001d0:	3714      	adds	r7, #20
 80001d2:	46bd      	mov	sp, r7
 80001d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d8:	4770      	bx	lr

080001da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 fa6b 	bl	80006b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e2:	f000 f807 	bl	80001f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001e6:	f000 f87b 	bl	80002e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f8bf 	bl	800036c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80001ee:	f000 f895 	bl	800031c <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <main+0x18>

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b09a      	sub	sp, #104	; 0x68
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0320 	add.w	r3, r7, #32
 80001fe:	2248      	movs	r2, #72	; 0x48
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fc4c 	bl	8002aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]
 8000216:	615a      	str	r2, [r3, #20]
 8000218:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800021a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000228:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	f023 0303 	bic.w	r3, r3, #3
 8000234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000238:	f043 0301 	orr.w	r3, r3, #1
 800023c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800023e:	f000 fe31 	bl	8000ea4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000242:	2000      	movs	r0, #0
 8000244:	f7ff ff9a 	bl	800017c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000248:	4b24      	ldr	r3, [pc, #144]	; (80002dc <SystemClock_Config+0xe8>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000250:	4a22      	ldr	r2, [pc, #136]	; (80002dc <SystemClock_Config+0xe8>)
 8000252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000256:	6013      	str	r3, [r2, #0]
 8000258:	4b20      	ldr	r3, [pc, #128]	; (80002dc <SystemClock_Config+0xe8>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000260:	603b      	str	r3, [r7, #0]
 8000262:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000264:	2327      	movs	r3, #39	; 0x27
 8000266:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000276:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2340      	movs	r3, #64	; 0x40
 800027e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000280:	2300      	movs	r3, #0
 8000282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000284:	2360      	movs	r3, #96	; 0x60
 8000286:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0320 	add.w	r3, r7, #32
 8000290:	4618      	mov	r0, r3
 8000292:	f001 f983 	bl	800159c <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800029c:	f000 f8c2 	bl	8000424 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002a0:	236f      	movs	r3, #111	; 0x6f
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002a4:	2302      	movs	r3, #2
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2101      	movs	r1, #1
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fcdf 	bl	8001c84 <HAL_RCC_ClockConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80002cc:	f000 f8aa 	bl	8000424 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002d0:	f002 fa6e 	bl	80027b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002d4:	bf00      	nop
 80002d6:	3768      	adds	r7, #104	; 0x68
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	58000400 	.word	0x58000400

080002e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b094      	sub	sp, #80	; 0x50
 80002e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002e6:	463b      	mov	r3, r7
 80002e8:	2250      	movs	r2, #80	; 0x50
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 fbd7 	bl	8002aa0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002f6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002f8:	2300      	movs	r3, #0
 80002fa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000300:	463b      	mov	r3, r7
 8000302:	4618      	mov	r0, r3
 8000304:	f002 f8de 	bl	80024c4 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800030e:	f000 f889 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000312:	bf00      	nop
 8000314:	3750      	adds	r7, #80	; 0x50
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000320:	4b10      	ldr	r3, [pc, #64]	; (8000364 <MX_USB_PCD_Init+0x48>)
 8000322:	4a11      	ldr	r2, [pc, #68]	; (8000368 <MX_USB_PCD_Init+0x4c>)
 8000324:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_USB_PCD_Init+0x48>)
 8000328:	2208      	movs	r2, #8
 800032a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <MX_USB_PCD_Init+0x48>)
 800032e:	2202      	movs	r2, #2
 8000330:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USB_PCD_Init+0x48>)
 8000334:	2202      	movs	r2, #2
 8000336:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <MX_USB_PCD_Init+0x48>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USB_PCD_Init+0x48>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <MX_USB_PCD_Init+0x48>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USB_PCD_Init+0x48>)
 800034c:	2200      	movs	r2, #0
 800034e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000350:	4804      	ldr	r0, [pc, #16]	; (8000364 <MX_USB_PCD_Init+0x48>)
 8000352:	f000 fca3 	bl	8000c9c <HAL_PCD_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800035c:	f000 f862 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000030 	.word	0x20000030
 8000368:	40006800 	.word	0x40006800

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000380:	2004      	movs	r0, #4
 8000382:	f7ff ff11 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	2002      	movs	r0, #2
 8000388:	f7ff ff0e 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	2001      	movs	r0, #1
 800038e:	f7ff ff0b 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000392:	2008      	movs	r0, #8
 8000394:	f7ff ff08 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	2101      	movs	r1, #1
 800039c:	481e      	ldr	r0, [pc, #120]	; (8000418 <MX_GPIO_Init+0xac>)
 800039e:	f000 fc65 	bl	8000c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2122      	movs	r1, #34	; 0x22
 80003a6:	481c      	ldr	r0, [pc, #112]	; (8000418 <MX_GPIO_Init+0xac>)
 80003a8:	f000 fc60 	bl	8000c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ac:	2310      	movs	r3, #16
 80003ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4619      	mov	r1, r3
 80003bc:	4817      	ldr	r0, [pc, #92]	; (800041c <MX_GPIO_Init+0xb0>)
 80003be:	f000 fae5 	bl	800098c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80003c2:	2323      	movs	r3, #35	; 0x23
 80003c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4619      	mov	r1, r3
 80003d6:	4810      	ldr	r0, [pc, #64]	; (8000418 <MX_GPIO_Init+0xac>)
 80003d8:	f000 fad8 	bl	800098c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80003dc:	2303      	movs	r3, #3
 80003de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	480c      	ldr	r0, [pc, #48]	; (8000420 <MX_GPIO_Init+0xb4>)
 80003ee:	f000 facd 	bl	800098c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003f2:	23c0      	movs	r3, #192	; 0xc0
 80003f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003f6:	2312      	movs	r3, #18
 80003f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000402:	2304      	movs	r3, #4
 8000404:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4803      	ldr	r0, [pc, #12]	; (8000418 <MX_GPIO_Init+0xac>)
 800040c:	f000 fabe 	bl	800098c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000410:	bf00      	nop
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	48000400 	.word	0x48000400
 800041c:	48000800 	.word	0x48000800
 8000420:	48000c00 	.word	0x48000c00

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>

0800042e <LL_AHB2_GRP1_EnableClock>:
{
 800042e:	b480      	push	{r7}
 8000430:	b085      	sub	sp, #20
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800043a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800043c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4313      	orrs	r3, r2
 8000444:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4013      	ands	r3, r2
 8000450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000452:	68fb      	ldr	r3, [r7, #12]
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800046c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800046e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800047c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4013      	ands	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000484:	68fb      	ldr	r3, [r7, #12]
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b09c      	sub	sp, #112	; 0x70
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	2250      	movs	r2, #80	; 0x50
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f002 faed 	bl	8002aa0 <memset>
  if(hpcd->Instance==USB)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1f      	ldr	r2, [pc, #124]	; (8000548 <HAL_PCD_MspInit+0xa8>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d136      	bne.n	800053e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80004d6:	2318      	movs	r3, #24
 80004d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80004da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004de:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80004e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80004e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80004ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80004ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80004f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80004f6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	4618      	mov	r0, r3
 80004fe:	f001 ffe1 	bl	80024c4 <HAL_RCCEx_PeriphCLKConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000508:	f7ff ff8c 	bl	8000424 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff ff8e 	bl	800042e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000512:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000516:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000518:	2302      	movs	r3, #2
 800051a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2300      	movs	r3, #0
 8000522:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000524:	230a      	movs	r3, #10
 8000526:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800052c:	4619      	mov	r1, r3
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 fa2b 	bl	800098c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000536:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800053a:	f7ff ff91 	bl	8000460 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800053e:	bf00      	nop
 8000540:	3770      	adds	r7, #112	; 0x70
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40006800 	.word	0x40006800

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 f8e8 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemInit+0x98>)
 80005a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005aa:	4a23      	ldr	r2, [pc, #140]	; (8000638 <SystemInit+0x98>)
 80005ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80005c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80005cc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80005ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <SystemInit+0x9c>)
 80005da:	4013      	ands	r3, r2
 80005dc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80005de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005ea:	f023 0305 	bic.w	r3, r3, #5
 80005ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80005f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005fe:	f023 0301 	bic.w	r3, r3, #1
 8000602:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800060a:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <SystemInit+0xa0>)
 800060c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800060e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <SystemInit+0xa0>)
 8000614:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000624:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00
 800063c:	faf6fefb 	.word	0xfaf6fefb
 8000640:	22041000 	.word	0x22041000

08000644 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000644:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000646:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000648:	3304      	adds	r3, #4

0800064a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800064e:	d3f9      	bcc.n	8000644 <CopyDataInit>
  bx lr
 8000650:	4770      	bx	lr

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000652:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000654:	3004      	adds	r0, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000656:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>
  bx lr
 800065a:	4770      	bx	lr

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f7ff ff9e 	bl	80005a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <LoopForever+0x6>)
 8000666:	490c      	ldr	r1, [pc, #48]	; (8000698 <LoopForever+0xa>)
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <LoopForever+0xe>)
 800066a:	2300      	movs	r3, #0
 800066c:	f7ff ffed 	bl	800064a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <LoopForever+0x12>)
 8000672:	490c      	ldr	r1, [pc, #48]	; (80006a4 <LoopForever+0x16>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <LoopForever+0x1a>)
 8000676:	2300      	movs	r3, #0
 8000678:	f7ff ffe7 	bl	800064a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <LoopForever+0x1e>)
 800067e:	490c      	ldr	r1, [pc, #48]	; (80006b0 <LoopForever+0x22>)
 8000680:	2300      	movs	r3, #0
 8000682:	f7ff ffe8 	bl	8000656 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000686:	f002 f9e7 	bl	8002a58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800068a:	f7ff fda6 	bl	80001da <main>

0800068e <LoopForever>:

LoopForever:
  b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   r0, =_estack
 8000690:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000694:	20000008 	.word	0x20000008
 8000698:	20000014 	.word	0x20000014
 800069c:	08002b7c 	.word	0x08002b7c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80006a0:	20030000 	.word	0x20030000
 80006a4:	20030000 	.word	0x20030000
 80006a8:	08002b88 	.word	0x08002b88
  INIT_BSS _sbss, _ebss
 80006ac:	20000014 	.word	0x20000014
 80006b0:	20000328 	.word	0x20000328

080006b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_IRQHandler>
	...

080006b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_Init+0x3c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <HAL_Init+0x3c>)
 80006c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ce:	2003      	movs	r0, #3
 80006d0:	f000 f92a 	bl	8000928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 f80f 	bl	80006f8 <HAL_InitTick>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006e0:	2301      	movs	r3, #1
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	e001      	b.n	80006ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006e6:	f7ff fed4 	bl	8000492 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58004000 	.word	0x58004000

080006f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_InitTick+0x6c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d024      	beq.n	8000756 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800070c:	f001 fc66 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8000710:	4602      	mov	r2, r0
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_InitTick+0x6c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000720:	fbb2 f3f3 	udiv	r3, r2, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f924 	bl	8000972 <HAL_SYSTICK_Config>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10f      	bne.n	8000750 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b0f      	cmp	r3, #15
 8000734:	d809      	bhi.n	800074a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000736:	2200      	movs	r2, #0
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800073e:	f000 f8fe 	bl	800093e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000742:	4a09      	ldr	r2, [pc, #36]	; (8000768 <HAL_InitTick+0x70>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	e007      	b.n	800075a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e004      	b.n	800075a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
 8000754:	e001      	b.n	800075a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000010 	.word	0x20000010
 8000768:	2000000c 	.word	0x2000000c

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000010 	.word	0x20000010
 8000790:	20000324 	.word	0x20000324

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000324 	.word	0x20000324

080007ac <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <HAL_GetTickPrio+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	2000000c 	.word	0x2000000c

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f1c3 0307 	rsb	r3, r3, #7
 8000896:	2b04      	cmp	r3, #4
 8000898:	bf28      	it	cs
 800089a:	2304      	movcs	r3, #4
 800089c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3304      	adds	r3, #4
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	d902      	bls.n	80008ac <NVIC_EncodePriority+0x30>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3b03      	subs	r3, #3
 80008aa:	e000      	b.n	80008ae <NVIC_EncodePriority+0x32>
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43da      	mvns	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	401a      	ands	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43d9      	mvns	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	4313      	orrs	r3, r2
         );
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f4:	d301      	bcc.n	80008fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00f      	b.n	800091a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <SysTick_Config+0x40>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000902:	210f      	movs	r1, #15
 8000904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000908:	f7ff ff8e 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <SysTick_Config+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <SysTick_Config+0x40>)
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010

08000928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff47 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff5e 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff90 	bl	800087c <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5f 	bl	8000828 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffb2 	bl	80008e4 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099a:	e14c      	b.n	8000c36 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	2101      	movs	r1, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 813e 	beq.w	8000c30 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d005      	beq.n	80009cc <HAL_GPIO_Init+0x40>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d130      	bne.n	8000a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a02:	2201      	movs	r2, #1
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	f003 0201 	and.w	r2, r3, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d017      	beq.n	8000a6a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2203      	movs	r2, #3
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d123      	bne.n	8000abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	691a      	ldr	r2, [r3, #16]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	08da      	lsrs	r2, r3, #3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3208      	adds	r2, #8
 8000ab8:	6939      	ldr	r1, [r7, #16]
 8000aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0203 	and.w	r2, r3, #3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8098 	beq.w	8000c30 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b00:	4a54      	ldr	r2, [pc, #336]	; (8000c54 <HAL_GPIO_Init+0x2c8>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b2a:	d019      	beq.n	8000b60 <HAL_GPIO_Init+0x1d4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a4a      	ldr	r2, [pc, #296]	; (8000c58 <HAL_GPIO_Init+0x2cc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d013      	beq.n	8000b5c <HAL_GPIO_Init+0x1d0>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a49      	ldr	r2, [pc, #292]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d00d      	beq.n	8000b58 <HAL_GPIO_Init+0x1cc>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a48      	ldr	r2, [pc, #288]	; (8000c60 <HAL_GPIO_Init+0x2d4>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x1c8>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a47      	ldr	r2, [pc, #284]	; (8000c64 <HAL_GPIO_Init+0x2d8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_GPIO_Init+0x1c4>
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e008      	b.n	8000b62 <HAL_GPIO_Init+0x1d6>
 8000b50:	2307      	movs	r3, #7
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x1d6>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e004      	b.n	8000b62 <HAL_GPIO_Init+0x1d6>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0x1d6>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <HAL_GPIO_Init+0x1d6>
 8000b60:	2300      	movs	r3, #0
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	f002 0203 	and.w	r2, r2, #3
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	4093      	lsls	r3, r2
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b72:	4938      	ldr	r1, [pc, #224]	; (8000c54 <HAL_GPIO_Init+0x2c8>)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b80:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba4:	4a30      	ldr	r2, [pc, #192]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000baa:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bce:	4a26      	ldr	r2, [pc, #152]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c28:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f47f aeab 	bne.w	800099c <HAL_GPIO_Init+0x10>
  }
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	40010000 	.word	0x40010000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	48000800 	.word	0x48000800
 8000c60:	48000c00 	.word	0x48000c00
 8000c64:	48001000 	.word	0x48001000
 8000c68:	58000800 	.word	0x58000800

08000c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c7c:	787b      	ldrb	r3, [r7, #1]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9e:	b08b      	sub	sp, #44	; 0x2c
 8000ca0:	af06      	add	r7, sp, #24
 8000ca2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d101      	bne.n	8000cae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e0cb      	b.n	8000e46 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d106      	bne.n	8000cc8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fbec 	bl	80004a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2203      	movs	r2, #3
 8000ccc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fe82 	bl	80029de <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	e040      	b.n	8000d62 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	7bfa      	ldrb	r2, [r7, #15]
 8000d08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	3303      	adds	r3, #3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d20:	7bfa      	ldrb	r2, [r7, #15]
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3338      	adds	r3, #56	; 0x38
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	440b      	add	r3, r1
 8000d42:	333c      	adds	r3, #60	; 0x3c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	440b      	add	r3, r1
 8000d56:	3340      	adds	r3, #64	; 0x40
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3b9      	bcc.n	8000ce0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e044      	b.n	8000dfc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d88:	7bfa      	ldrb	r2, [r7, #15]
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	440b      	add	r3, r1
 8000dac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000db4:	7bfa      	ldrb	r2, [r7, #15]
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	440b      	add	r3, r1
 8000dc2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dca:	7bfa      	ldrb	r2, [r7, #15]
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	440b      	add	r3, r1
 8000dee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d3b5      	bcc.n	8000d72 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	687e      	ldr	r6, [r7, #4]
 8000e0e:	466d      	mov	r5, sp
 8000e10:	f106 0410 	add.w	r4, r6, #16
 8000e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	602b      	str	r3, [r5, #0]
 8000e1c:	1d33      	adds	r3, r6, #4
 8000e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e20:	6838      	ldr	r0, [r7, #0]
 8000e22:	f001 fdf7 	bl	8002a14 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d102      	bne.n	8000e44 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 f805 	bl	8000e4e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e4e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b085      	sub	sp, #20
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	58000400 	.word	0x58000400

08000ec4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_PWREx_GetVoltageRange+0x18>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	58000400 	.word	0x58000400

08000ee0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ef2:	d101      	bne.n	8000ef8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_RCC_HSE_Enable>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_RCC_HSE_Disable>:
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_RCC_HSE_IsReady>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f52:	d101      	bne.n	8000f58 <LL_RCC_HSE_IsReady+0x18>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <LL_RCC_HSE_IsReady+0x1a>
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_RCC_HSI_Enable>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_RCC_HSI_Disable>:
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_RCC_HSI_IsReady>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb2:	d101      	bne.n	8000fb8 <LL_RCC_HSI_IsReady+0x18>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <LL_RCC_HSI_IsReady+0x1a>
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	604b      	str	r3, [r1, #4]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <LL_RCC_HSI48_Enable>:
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_RCC_HSI48_Disable>:
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800101c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_RCC_HSI48_IsReady>:
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b02      	cmp	r3, #2
 8001044:	d101      	bne.n	800104a <LL_RCC_HSI48_IsReady+0x18>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_RCC_HSI48_IsReady+0x1a>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <LL_RCC_LSE_Enable>:
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800105a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_RCC_LSE_Disable>:
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800107c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_RCC_LSE_EnableBypass>:
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800109e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_RCC_LSE_DisableBypass>:
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d101      	bne.n	80010f6 <LL_RCC_LSE_IsReady+0x18>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <LL_RCC_LSE_IsReady+0x1a>
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b02      	cmp	r3, #2
 8001158:	d101      	bne.n	800115e <LL_RCC_LSI1_IsReady+0x18>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <LL_RCC_LSI1_IsReady+0x1a>
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800116e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d101      	bne.n	80011c6 <LL_RCC_LSI2_IsReady+0x18>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <LL_RCC_LSI2_IsReady+0x1a>
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ee:	4313      	orrs	r3, r2
 80011f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	6013      	str	r3, [r2, #0]
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b02      	cmp	r3, #2
 800124c:	d101      	bne.n	8001252 <LL_RCC_MSI_IsReady+0x16>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_RCC_MSI_IsReady+0x18>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800128c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001296:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2bb0      	cmp	r3, #176	; 0xb0
 800129c:	d901      	bls.n	80012a2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800129e:	23b0      	movs	r3, #176	; 0xb0
 80012a0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80012a2:	687b      	ldr	r3, [r7, #4]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f023 0203 	bic.w	r2, r3, #3
 80012ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	608b      	str	r3, [r1, #8]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 030c 	and.w	r3, r3, #12
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4313      	orrs	r3, r2
 800135e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800137e:	f023 020f 	bic.w	r2, r3, #15
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800138a:	4313      	orrs	r3, r2
 800138c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	608b      	str	r3, [r1, #8]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800144c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001450:	6013      	str	r3, [r2, #0]
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800146e:	d101      	bne.n	8001474 <LL_RCC_PLL_IsReady+0x18>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <LL_RCC_PLL_IsReady+0x1a>
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0303 	and.w	r3, r3, #3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80014e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d101      	bne.n	80014fa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800151a:	d101      	bne.n	8001520 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001540:	d101      	bne.n	8001546 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001564:	d101      	bne.n	800156a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001588:	d101      	bne.n	800158e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b08d      	sub	sp, #52	; 0x34
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e363      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 808d 	beq.w	80016d6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	f7ff fea1 	bl	8001302 <LL_RCC_GetSysClkSource>
 80015c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c2:	f7ff ff82 	bl	80014ca <LL_RCC_PLL_GetMainSource>
 80015c6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_RCC_OscConfig+0x3e>
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	2b0c      	cmp	r3, #12
 80015d2:	d147      	bne.n	8001664 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d144      	bne.n	8001664 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e347      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80015ea:	f7ff fe4c 	bl	8001286 <LL_RCC_MSI_GetRange>
 80015ee:	4603      	mov	r3, r0
 80015f0:	429c      	cmp	r4, r3
 80015f2:	d914      	bls.n	800161e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fd03 	bl	8002004 <RCC_SetFlashLatencyFromMSIRange>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e336      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe26 	bl	800125e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fe4a 	bl	80012b0 <LL_RCC_MSI_SetCalibTrimming>
 800161c:	e013      	b.n	8001646 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fe1b 	bl	800125e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fe3f 	bl	80012b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fce4 	bl	8002004 <RCC_SetFlashLatencyFromMSIRange>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e317      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001646:	f000 fcc9 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 800164a:	4603      	mov	r3, r0
 800164c:	4aa4      	ldr	r2, [pc, #656]	; (80018e0 <HAL_RCC_OscConfig+0x344>)
 800164e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001650:	4ba4      	ldr	r3, [pc, #656]	; (80018e4 <HAL_RCC_OscConfig+0x348>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f84f 	bl	80006f8 <HAL_InitTick>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d039      	beq.n	80016d4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e308      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01e      	beq.n	80016aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800166c:	f7ff fdc8 	bl	8001200 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001670:	f7ff f890 	bl	8000794 <HAL_GetTick>
 8001674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001678:	f7ff f88c 	bl	8000794 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e2f5      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800168a:	f7ff fdd7 	bl	800123c <LL_RCC_MSI_IsReady>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f1      	beq.n	8001678 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fde0 	bl	800125e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fe04 	bl	80012b0 <LL_RCC_MSI_SetCalibTrimming>
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016aa:	f7ff fdb8 	bl	800121e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ae:	f7ff f871 	bl	8000794 <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b6:	f7ff f86d 	bl	8000794 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e2d6      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80016c8:	f7ff fdb8 	bl	800123c <LL_RCC_MSI_IsReady>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f1      	bne.n	80016b6 <HAL_RCC_OscConfig+0x11a>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80016d4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d047      	beq.n	8001772 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e2:	f7ff fe0e 	bl	8001302 <LL_RCC_GetSysClkSource>
 80016e6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e8:	f7ff feef 	bl	80014ca <LL_RCC_PLL_GetMainSource>
 80016ec:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_OscConfig+0x164>
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d108      	bne.n	800170c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d105      	bne.n	800170c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d134      	bne.n	8001772 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e2b4      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001714:	d102      	bne.n	800171c <HAL_RCC_OscConfig+0x180>
 8001716:	f7ff fbf5 	bl	8000f04 <LL_RCC_HSE_Enable>
 800171a:	e001      	b.n	8001720 <HAL_RCC_OscConfig+0x184>
 800171c:	f7ff fc01 	bl	8000f22 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d012      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff f834 	bl	8000794 <HAL_GetTick>
 800172c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff f830 	bl	8000794 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e299      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001742:	f7ff fbfd 	bl	8000f40 <LL_RCC_HSE_IsReady>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f1      	beq.n	8001730 <HAL_RCC_OscConfig+0x194>
 800174c:	e011      	b.n	8001772 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff f821 	bl	8000794 <HAL_GetTick>
 8001752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001756:	f7ff f81d 	bl	8000794 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b64      	cmp	r3, #100	; 0x64
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e286      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001768:	f7ff fbea 	bl	8000f40 <LL_RCC_HSE_IsReady>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f1      	bne.n	8001756 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d04c      	beq.n	8001818 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177e:	f7ff fdc0 	bl	8001302 <LL_RCC_GetSysClkSource>
 8001782:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001784:	f7ff fea1 	bl	80014ca <LL_RCC_PLL_GetMainSource>
 8001788:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d005      	beq.n	800179c <HAL_RCC_OscConfig+0x200>
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d10e      	bne.n	80017b4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d10b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e266      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc09 	bl	8000fc4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80017b2:	e031      	b.n	8001818 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d019      	beq.n	80017f0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017bc:	f7ff fbd2 	bl	8000f64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7fe ffe8 	bl	8000794 <HAL_GetTick>
 80017c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c8:	f7fe ffe4 	bl	8000794 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e24d      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80017da:	f7ff fbe1 	bl	8000fa0 <LL_RCC_HSI_IsReady>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f1      	beq.n	80017c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fbeb 	bl	8000fc4 <LL_RCC_HSI_SetCalibTrimming>
 80017ee:	e013      	b.n	8001818 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f0:	f7ff fbc7 	bl	8000f82 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7fe ffce 	bl	8000794 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fc:	f7fe ffca 	bl	8000794 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e233      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800180e:	f7ff fbc7 	bl	8000fa0 <LL_RCC_HSI_IsReady>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f1      	bne.n	80017fc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a3 	beq.w	8001978 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d076      	beq.n	8001928 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d046      	beq.n	80018d4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001846:	f7ff fc7e 	bl	8001146 <LL_RCC_LSI1_IsReady>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d113      	bne.n	8001878 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001850:	f7ff fc57 	bl	8001102 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001854:	f7fe ff9e 	bl	8000794 <HAL_GetTick>
 8001858:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800185c:	f7fe ff9a 	bl	8000794 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e203      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800186e:	f7ff fc6a 	bl	8001146 <LL_RCC_LSI1_IsReady>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f1      	beq.n	800185c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001878:	f7ff fc77 	bl	800116a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7fe ff8a 	bl	8000794 <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001884:	f7fe ff86 	bl	8000794 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b03      	cmp	r3, #3
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1ef      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001896:	f7ff fc8a 	bl	80011ae <LL_RCC_LSI2_IsReady>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f1      	beq.n	8001884 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc94 	bl	80011d2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80018aa:	f7ff fc3b 	bl	8001124 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7fe ff71 	bl	8000794 <HAL_GetTick>
 80018b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80018b6:	f7fe ff6d 	bl	8000794 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1d6      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80018c8:	f7ff fc3d 	bl	8001146 <LL_RCC_LSI1_IsReady>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f1      	bne.n	80018b6 <HAL_RCC_OscConfig+0x31a>
 80018d2:	e051      	b.n	8001978 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80018d4:	f7ff fc15 	bl	8001102 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7fe ff5c 	bl	8000794 <HAL_GetTick>
 80018dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80018de:	e00c      	b.n	80018fa <HAL_RCC_OscConfig+0x35e>
 80018e0:	20000008 	.word	0x20000008
 80018e4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80018e8:	f7fe ff54 	bl	8000794 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1bd      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80018fa:	f7ff fc24 	bl	8001146 <LL_RCC_LSI1_IsReady>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f1      	beq.n	80018e8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001904:	f7ff fc42 	bl	800118c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800190a:	f7fe ff43 	bl	8000794 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1ac      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800191c:	f7ff fc47 	bl	80011ae <LL_RCC_LSI2_IsReady>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f1      	bne.n	800190a <HAL_RCC_OscConfig+0x36e>
 8001926:	e027      	b.n	8001978 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001928:	f7ff fc30 	bl	800118c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7fe ff32 	bl	8000794 <HAL_GetTick>
 8001930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001934:	f7fe ff2e 	bl	8000794 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e197      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001946:	f7ff fc32 	bl	80011ae <LL_RCC_LSI2_IsReady>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f1      	bne.n	8001934 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001950:	f7ff fbe8 	bl	8001124 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7fe ff1e 	bl	8000794 <HAL_GetTick>
 8001958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800195c:	f7fe ff1a 	bl	8000794 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e183      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800196e:	f7ff fbea 	bl	8001146 <LL_RCC_LSI1_IsReady>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f1      	bne.n	800195c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d05b      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001984:	4ba7      	ldr	r3, [pc, #668]	; (8001c24 <HAL_RCC_OscConfig+0x688>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d114      	bne.n	80019ba <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001990:	f7ff fa88 	bl	8000ea4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001994:	f7fe fefe 	bl	8000794 <HAL_GetTick>
 8001998:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199c:	f7fe fefa 	bl	8000794 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e163      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ae:	4b9d      	ldr	r3, [pc, #628]	; (8001c24 <HAL_RCC_OscConfig+0x688>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0x42c>
 80019c2:	f7ff fb48 	bl	8001056 <LL_RCC_LSE_Enable>
 80019c6:	e00c      	b.n	80019e2 <HAL_RCC_OscConfig+0x446>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d104      	bne.n	80019da <HAL_RCC_OscConfig+0x43e>
 80019d0:	f7ff fb63 	bl	800109a <LL_RCC_LSE_EnableBypass>
 80019d4:	f7ff fb3f 	bl	8001056 <LL_RCC_LSE_Enable>
 80019d8:	e003      	b.n	80019e2 <HAL_RCC_OscConfig+0x446>
 80019da:	f7ff fb4d 	bl	8001078 <LL_RCC_LSE_Disable>
 80019de:	f7ff fb6d 	bl	80010bc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d014      	beq.n	8001a14 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7fe fed3 	bl	8000794 <HAL_GetTick>
 80019ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7fe fecf 	bl	8000794 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e136      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a08:	f7ff fb69 	bl	80010de <LL_RCC_LSE_IsReady>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0ef      	beq.n	80019f2 <HAL_RCC_OscConfig+0x456>
 8001a12:	e013      	b.n	8001a3c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7fe febe 	bl	8000794 <HAL_GetTick>
 8001a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7fe feba 	bl	8000794 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e121      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a32:	f7ff fb54 	bl	80010de <LL_RCC_LSE_IsReady>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ef      	bne.n	8001a1c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d02c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d014      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a50:	f7ff facd 	bl	8000fee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7fe fe9e 	bl	8000794 <HAL_GetTick>
 8001a58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5c:	f7fe fe9a 	bl	8000794 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e103      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001a6e:	f7ff fae0 	bl	8001032 <LL_RCC_HSI48_IsReady>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f1      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4c0>
 8001a78:	e013      	b.n	8001aa2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a7a:	f7ff fac9 	bl	8001010 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7fe fe89 	bl	8000794 <HAL_GetTick>
 8001a82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a86:	f7fe fe85 	bl	8000794 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0ee      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001a98:	f7ff facb 	bl	8001032 <LL_RCC_HSI48_IsReady>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f1      	bne.n	8001a86 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80e4 	beq.w	8001c74 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aac:	f7ff fc29 	bl	8001302 <LL_RCC_GetSysClkSource>
 8001ab0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	f040 80b4 	bne.w	8001c2c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0203 	and.w	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d123      	bne.n	8001b1a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d11c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d114      	bne.n	8001b1a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d10d      	bne.n	8001b1a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d05d      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	d058      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0a1      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b32:	f7ff fc84 	bl	800143e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b36:	f7fe fe2d 	bl	8000794 <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe fe29 	bl	8000794 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e092      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ef      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_RCC_OscConfig+0x68c>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b70:	4311      	orrs	r1, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b76:	0212      	lsls	r2, r2, #8
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b94:	f7ff fc44 	bl	8001420 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba8:	f7fe fdf4 	bl	8000794 <HAL_GetTick>
 8001bac:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7fe fdf0 	bl	8000794 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e059      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ef      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd0:	e050      	b.n	8001c74 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e04f      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d147      	bne.n	8001c74 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001be4:	f7ff fc1c 	bl	8001420 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bf8:	f7fe fdcc 	bl	8000794 <HAL_GetTick>
 8001bfc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7fe fdc8 	bl	8000794 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e031      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ef      	beq.n	8001c00 <HAL_RCC_OscConfig+0x664>
 8001c20:	e028      	b.n	8001c74 <HAL_RCC_OscConfig+0x6d8>
 8001c22:	bf00      	nop
 8001c24:	58000400 	.word	0x58000400
 8001c28:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d01e      	beq.n	8001c70 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	f7ff fc04 	bl	800143e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7fe fdad 	bl	8000794 <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe fda9 	bl	8000794 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e012      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ef      	bne.n	8001c3e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_OscConfig+0x6e4>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60cb      	str	r3, [r1, #12]
 8001c6e:	e001      	b.n	8001c74 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3734      	adds	r7, #52	; 0x34
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	eefefffc 	.word	0xeefefffc

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e12d      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b98      	ldr	r3, [pc, #608]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d91b      	bls.n	8001cde <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b95      	ldr	r3, [pc, #596]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 0207 	bic.w	r2, r3, #7
 8001cae:	4993      	ldr	r1, [pc, #588]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb6:	f7fe fd6d 	bl	8000794 <HAL_GetTick>
 8001cba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001cbe:	f7fe fd69 	bl	8000794 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e111      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd0:	4b8a      	ldr	r3, [pc, #552]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d1ef      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d016      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fb13 	bl	800131a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cf4:	f7fe fd4e 	bl	8000794 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cfc:	f7fe fd4a 	bl	8000794 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0f2      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d0e:	f7ff fbe8 	bl	80014e2 <LL_RCC_IsActiveFlag_HPRE>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f1      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d016      	beq.n	8001d52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fb0a 	bl	8001342 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d2e:	f7fe fd31 	bl	8000794 <HAL_GetTick>
 8001d32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d36:	f7fe fd2d 	bl	8000794 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0d5      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d48:	f7ff fbdd 	bl	8001506 <LL_RCC_IsActiveFlag_C2HPRE>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f1      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d016      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fb03 	bl	800136e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d68:	f7fe fd14 	bl	8000794 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d70:	f7fe fd10 	bl	8000794 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0b8      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d82:	f7ff fbd3 	bl	800152c <LL_RCC_IsActiveFlag_SHDHPRE>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f1      	beq.n	8001d70 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d016      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fafd 	bl	800139c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001da2:	f7fe fcf7 	bl	8000794 <HAL_GetTick>
 8001da6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001daa:	f7fe fcf3 	bl	8000794 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e09b      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001dbc:	f7ff fbc9 	bl	8001552 <LL_RCC_IsActiveFlag_PPRE1>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f1      	beq.n	8001daa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d017      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff faf3 	bl	80013c4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001dde:	f7fe fcd9 	bl	8000794 <HAL_GetTick>
 8001de2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001de6:	f7fe fcd5 	bl	8000794 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e07d      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001df8:	f7ff fbbd 	bl	8001576 <LL_RCC_IsActiveFlag_PPRE2>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f1      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d043      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d106      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001e16:	f7ff f893 	bl	8000f40 <LL_RCC_HSE_IsReady>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11e      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e067      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001e2c:	f7ff fb16 	bl	800145c <LL_RCC_PLL_IsReady>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d113      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e05c      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001e42:	f7ff f9fb 	bl	800123c <LL_RCC_MSI_IsReady>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d108      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e051      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001e50:	f7ff f8a6 	bl	8000fa0 <LL_RCC_HSI_IsReady>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e04a      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fa39 	bl	80012da <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e68:	f7fe fc94 	bl	8000794 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f7fe fc90 	bl	8000794 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e036      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	f7ff fa3c 	bl	8001302 <LL_RCC_GetSysClkSource>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d1ec      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d21b      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 0207 	bic.w	r2, r3, #7
 8001eac:	4913      	ldr	r1, [pc, #76]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb4:	f7fe fc6e 	bl	8000794 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ebc:	f7fe fc6a 	bl	8000794 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e012      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x278>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1ef      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001edc:	f000 f87e 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_RCC_ClockConfig+0x27c>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001ee6:	f7fe fc61 	bl	80007ac <HAL_GetTickPrio>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fc03 	bl	80006f8 <HAL_InitTick>
 8001ef2:	4603      	mov	r3, r0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	58004000 	.word	0x58004000
 8001f00:	20000008 	.word	0x20000008

08001f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0a:	f7ff f9fa 	bl	8001302 <LL_RCC_GetSysClkSource>
 8001f0e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f16:	f7ff f9b6 	bl	8001286 <LL_RCC_MSI_GetRange>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e04b      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e045      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d10a      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f3e:	f7fe ffcf 	bl	8000ee0 <LL_RCC_HSE_IsEnabledDiv2>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e03a      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e037      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001f54:	f7ff fab9 	bl	80014ca <LL_RCC_PLL_GetMainSource>
 8001f58:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d003      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x64>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x6a>
 8001f66:	e00d      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f6a:	60bb      	str	r3, [r7, #8]
        break;
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f6e:	f7fe ffb7 	bl	8000ee0 <LL_RCC_HSE_IsEnabledDiv2>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f7a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001f7c:	e00d      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f80:	60bb      	str	r3, [r7, #8]
        break;
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f84:	f7ff f97f 	bl	8001286 <LL_RCC_MSI_GetRange>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	60bb      	str	r3, [r7, #8]
        break;
 8001f98:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001f9a:	f7ff fa71 	bl	8001480 <LL_RCC_PLL_GetN>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	fb03 f402 	mul.w	r4, r3, r2
 8001fa6:	f7ff fa84 	bl	80014b2 <LL_RCC_PLL_GetDivider>
 8001faa:	4603      	mov	r3, r0
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	3301      	adds	r3, #1
 8001fb0:	fbb4 f4f3 	udiv	r4, r4, r3
 8001fb4:	f7ff fa71 	bl	800149a <LL_RCC_PLL_GetR>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	0f5b      	lsrs	r3, r3, #29
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	fbb4 f3f3 	udiv	r3, r4, r3
 8001fc2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	08002b34 	.word	0x08002b34
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	01e84800 	.word	0x01e84800

08001fdc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b598      	push	{r3, r4, r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001fe0:	f7ff ff90 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	f7ff fa01 	bl	80013ec <LL_RCC_GetAHBPrescaler>
 8001fea:	4603      	mov	r3, r0
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	4a03      	ldr	r2, [pc, #12]	; (8002000 <HAL_RCC_GetHCLKFreq+0x24>)
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd98      	pop	{r3, r4, r7, pc}
 8002000:	08002af4 	.word	0x08002af4

08002004 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2bb0      	cmp	r3, #176	; 0xb0
 8002010:	d903      	bls.n	800201a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e007      	b.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	4a11      	ldr	r2, [pc, #68]	; (8002068 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800202a:	f7ff f9eb 	bl	8001404 <LL_RCC_GetAHB4Prescaler>
 800202e:	4603      	mov	r3, r0
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	4a0d      	ldr	r2, [pc, #52]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9c      	lsrs	r4, r3, #18
 800204e:	f7fe ff39 	bl	8000ec4 <HAL_PWREx_GetVoltageRange>
 8002052:	4603      	mov	r3, r0
 8002054:	4619      	mov	r1, r3
 8002056:	4620      	mov	r0, r4
 8002058:	f000 f80c 	bl	8002074 <RCC_SetFlashLatency>
 800205c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	bf00      	nop
 8002068:	08002b34 	.word	0x08002b34
 800206c:	08002af4 	.word	0x08002af4
 8002070:	431bde83 	.word	0x431bde83

08002074 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b093      	sub	sp, #76	; 0x4c
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <RCC_SetFlashLatency+0xe8>)
 8002080:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800208a:	4a35      	ldr	r2, [pc, #212]	; (8002160 <RCC_SetFlashLatency+0xec>)
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	ca07      	ldmia	r2, {r0, r1, r2}
 8002092:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <RCC_SetFlashLatency+0xf0>)
 8002098:	f107 040c 	add.w	r4, r7, #12
 800209c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800209e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80020a2:	2300      	movs	r3, #0
 80020a4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ac:	d11a      	bne.n	80020e4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	643b      	str	r3, [r7, #64]	; 0x40
 80020b2:	e013      	b.n	80020dc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80020b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	3348      	adds	r3, #72	; 0x48
 80020ba:	443b      	add	r3, r7
 80020bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d807      	bhi.n	80020d6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	3348      	adds	r3, #72	; 0x48
 80020cc:	443b      	add	r3, r7
 80020ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80020d4:	e020      	b.n	8002118 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d8:	3301      	adds	r3, #1
 80020da:	643b      	str	r3, [r7, #64]	; 0x40
 80020dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d9e8      	bls.n	80020b4 <RCC_SetFlashLatency+0x40>
 80020e2:	e019      	b.n	8002118 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e8:	e013      	b.n	8002112 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80020ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	3348      	adds	r3, #72	; 0x48
 80020f0:	443b      	add	r3, r7
 80020f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d807      	bhi.n	800210c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80020fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3348      	adds	r3, #72	; 0x48
 8002102:	443b      	add	r3, r7
 8002104:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800210a:	e005      	b.n	8002118 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	3301      	adds	r3, #1
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002114:	2b02      	cmp	r3, #2
 8002116:	d9e8      	bls.n	80020ea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <RCC_SetFlashLatency+0xf4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 0207 	bic.w	r2, r3, #7
 8002120:	4911      	ldr	r1, [pc, #68]	; (8002168 <RCC_SetFlashLatency+0xf4>)
 8002122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002128:	f7fe fb34 	bl	8000794 <HAL_GetTick>
 800212c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800212e:	e008      	b.n	8002142 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002130:	f7fe fb30 	bl	8000794 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e007      	b.n	8002152 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <RCC_SetFlashLatency+0xf4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800214c:	429a      	cmp	r2, r3
 800214e:	d1ef      	bne.n	8002130 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	374c      	adds	r7, #76	; 0x4c
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	bf00      	nop
 800215c:	08002ac8 	.word	0x08002ac8
 8002160:	08002ad8 	.word	0x08002ad8
 8002164:	08002ae4 	.word	0x08002ae4
 8002168:	58004000 	.word	0x58004000

0800216c <LL_RCC_LSE_IsEnabled>:
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <LL_RCC_LSE_IsEnabled+0x18>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <LL_RCC_LSE_IsEnabled+0x1a>
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_RCC_LSE_IsReady>:
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d101      	bne.n	80021a8 <LL_RCC_LSE_IsReady+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_RCC_LSE_IsReady+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_RCC_MSI_EnablePLLMode>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_RCC_SetRFWKPClockSource>:
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_RCC_SetSMPSClockSource>:
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	f023 0203 	bic.w	r2, r3, #3
 8002210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4313      	orrs	r3, r2
 8002218:	624b      	str	r3, [r1, #36]	; 0x24
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_RCC_SetSMPSPrescaler>:
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4313      	orrs	r3, r2
 8002240:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_RCC_SetUSARTClockSource>:
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_RCC_SetLPUARTClockSource>:
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800228e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_RCC_SetI2CClockSource>:
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80022be:	43db      	mvns	r3, r3
 80022c0:	401a      	ands	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80022ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_SetLPTIMClockSource>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_RCC_SetSAIClockSource>:
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_RCC_SetRNGClockSource>:
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002350:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_RCC_SetCLK48ClockSource>:
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_RCC_SetUSBClockSource>:
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffe3 	bl	800236c <LL_RCC_SetCLK48ClockSource>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <LL_RCC_SetADCClockSource>:
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80023b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_RCC_SetRTCClockSource>:
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_RCC_GetRTCClockSource>:
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_RCC_ForceBackupDomainReset>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_RCC_PLLSAI1_Enable>:
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_RCC_PLLSAI1_Disable>:
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002490:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002494:	6013      	str	r3, [r2, #0]
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_RCC_PLLSAI1_IsReady>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b2:	d101      	bne.n	80024b8 <LL_RCC_PLLSAI1_IsReady+0x18>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <LL_RCC_PLLSAI1_IsReady+0x1a>
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80024cc:	2300      	movs	r3, #0
 80024ce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80024d0:	2300      	movs	r3, #0
 80024d2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d034      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024e8:	d021      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80024ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ee:	d81b      	bhi.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f4:	d01d      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80024f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024fa:	d815      	bhi.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d110      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002516:	e00d      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f94d 	bl	80027bc <RCCEx_PLLSAI1_ConfigNP>
 8002522:	4603      	mov	r3, r0
 8002524:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002526:	e005      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	77fb      	strb	r3, [r7, #31]
        break;
 800252c:	e002      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002534:	7ffb      	ldrb	r3, [r7, #31]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fee8 	bl	8002314 <LL_RCC_SetSAIClockSource>
 8002544:	e001      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002546:	7ffb      	ldrb	r3, [r7, #31]
 8002548:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002552:	2b00      	cmp	r3, #0
 8002554:	d046      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002556:	f7ff ff56 	bl	8002406 <LL_RCC_GetRTCClockSource>
 800255a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	429a      	cmp	r2, r3
 8002564:	d03c      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002566:	f7fe fc9d 	bl	8000ea4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff30 	bl	80023da <LL_RCC_SetRTCClockSource>
 800257a:	e02e      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002586:	f7ff ff4b 	bl	8002420 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800258a:	f7ff ff5a 	bl	8002442 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800259c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80025a6:	f7ff fde1 	bl	800216c <LL_RCC_LSE_IsEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d114      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025b0:	f7fe f8f0 	bl	8000794 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80025b6:	e00b      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe f8ec 	bl	8000794 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d902      	bls.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	77fb      	strb	r3, [r7, #31]
              break;
 80025ce:	e004      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80025d0:	f7ff fdde 	bl	8002190 <LL_RCC_LSE_IsReady>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d1ee      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	77bb      	strb	r3, [r7, #30]
 80025de:	e001      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
 80025e2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fe2a 	bl	800224e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fe35 	bl	800227a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fe5d 	bl	80022e0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fe52 	bl	80022e0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fe2a 	bl	80022a6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fe1f 	bl	80022a6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d022      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fe8d 	bl	8002398 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002686:	d107      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002696:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a0:	d10b      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f8e3 	bl	8002872 <RCCEx_PLLSAI1_ConfigNQ>
 80026ac:	4603      	mov	r3, r0
 80026ae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80026b0:	7ffb      	ldrb	r3, [r7, #31]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
 80026b8:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02b      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ce:	d008      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026d8:	d003      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fe2a 	bl	8002340 <LL_RCC_SetRNGClockSource>
 80026ec:	e00a      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7ff fe21 	bl	8002340 <LL_RCC_SetRNGClockSource>
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff fe34 	bl	800236c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800270c:	d107      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	2b00      	cmp	r3, #0
 8002728:	d022      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fe3d 	bl	80023ae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800273c:	d107      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800273e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002756:	d10b      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f8e3 	bl	8002928 <RCCEx_PLLSAI1_ConfigNR>
 8002762:	4603      	mov	r3, r0
 8002764:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002766:	7ffb      	ldrb	r3, [r7, #31]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800276c:	7ffb      	ldrb	r3, [r7, #31]
 800276e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fd26 	bl	80021d2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fd45 	bl	8002226 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fd2c 	bl	80021fe <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80027a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80027b4:	f7ff fcfe 	bl	80021b4 <LL_RCC_MSI_EnablePLLMode>
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}

080027bc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80027c8:	f7ff fe5b 	bl	8002482 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027cc:	f7fd ffe2 	bl	8000794 <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80027d2:	e009      	b.n	80027e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027d4:	f7fd ffde 	bl	8000794 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d902      	bls.n	80027e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	73fb      	strb	r3, [r7, #15]
      break;
 80027e6:	e004      	b.n	80027f2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80027e8:	f7ff fe5a 	bl	80024a0 <LL_RCC_PLLSAI1_IsReady>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d137      	bne.n	8002868 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800280c:	4313      	orrs	r3, r2
 800280e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002822:	4313      	orrs	r3, r2
 8002824:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002826:	f7ff fe1d 	bl	8002464 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282a:	f7fd ffb3 	bl	8000794 <HAL_GetTick>
 800282e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002830:	e009      	b.n	8002846 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002832:	f7fd ffaf 	bl	8000794 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d902      	bls.n	8002846 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	73fb      	strb	r3, [r7, #15]
        break;
 8002844:	e004      	b.n	8002850 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002846:	f7ff fe2b 	bl	80024a0 <LL_RCC_PLLSAI1_IsReady>
 800284a:	4603      	mov	r3, r0
 800284c:	2b01      	cmp	r3, #1
 800284e:	d1f0      	bne.n	8002832 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d108      	bne.n	8002868 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002864:	4313      	orrs	r3, r2
 8002866:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800287e:	f7ff fe00 	bl	8002482 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002882:	f7fd ff87 	bl	8000794 <HAL_GetTick>
 8002886:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002888:	e009      	b.n	800289e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800288a:	f7fd ff83 	bl	8000794 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d902      	bls.n	800289e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	73fb      	strb	r3, [r7, #15]
      break;
 800289c:	e004      	b.n	80028a8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800289e:	f7ff fdff 	bl	80024a0 <LL_RCC_PLLSAI1_IsReady>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d137      	bne.n	800291e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80028ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c2:	4313      	orrs	r3, r2
 80028c4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d8:	4313      	orrs	r3, r2
 80028da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80028dc:	f7ff fdc2 	bl	8002464 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e0:	f7fd ff58 	bl	8000794 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80028e6:	e009      	b.n	80028fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028e8:	f7fd ff54 	bl	8000794 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d902      	bls.n	80028fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	73fb      	strb	r3, [r7, #15]
        break;
 80028fa:	e004      	b.n	8002906 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80028fc:	f7ff fdd0 	bl	80024a0 <LL_RCC_PLLSAI1_IsReady>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d1f0      	bne.n	80028e8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291a:	4313      	orrs	r3, r2
 800291c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002934:	f7ff fda5 	bl	8002482 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002938:	f7fd ff2c 	bl	8000794 <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800293e:	e009      	b.n	8002954 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002940:	f7fd ff28 	bl	8000794 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d902      	bls.n	8002954 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	73fb      	strb	r3, [r7, #15]
      break;
 8002952:	e004      	b.n	800295e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002954:	f7ff fda4 	bl	80024a0 <LL_RCC_PLLSAI1_IsReady>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d137      	bne.n	80029d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002978:	4313      	orrs	r3, r2
 800297a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800297c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298e:	4313      	orrs	r3, r2
 8002990:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002992:	f7ff fd67 	bl	8002464 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002996:	f7fd fefd 	bl	8000794 <HAL_GetTick>
 800299a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800299c:	e009      	b.n	80029b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800299e:	f7fd fef9 	bl	8000794 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d902      	bls.n	80029b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	73fb      	strb	r3, [r7, #15]
        break;
 80029b0:	e004      	b.n	80029bc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80029b2:	f7ff fd75 	bl	80024a0 <LL_RCC_PLLSAI1_IsReady>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d1f0      	bne.n	800299e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d108      	bne.n	80029d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d0:	4313      	orrs	r3, r2
 80029d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029e6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80029ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4013      	ands	r3, r2
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a14:	b084      	sub	sp, #16
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	f107 0014 	add.w	r0, r7, #20
 8002a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	b004      	add	sp, #16
 8002a54:	4770      	bx	lr
	...

08002a58 <__libc_init_array>:
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	4d0d      	ldr	r5, [pc, #52]	; (8002a90 <__libc_init_array+0x38>)
 8002a5c:	4c0d      	ldr	r4, [pc, #52]	; (8002a94 <__libc_init_array+0x3c>)
 8002a5e:	1b64      	subs	r4, r4, r5
 8002a60:	10a4      	asrs	r4, r4, #2
 8002a62:	2600      	movs	r6, #0
 8002a64:	42a6      	cmp	r6, r4
 8002a66:	d109      	bne.n	8002a7c <__libc_init_array+0x24>
 8002a68:	4d0b      	ldr	r5, [pc, #44]	; (8002a98 <__libc_init_array+0x40>)
 8002a6a:	4c0c      	ldr	r4, [pc, #48]	; (8002a9c <__libc_init_array+0x44>)
 8002a6c:	f000 f820 	bl	8002ab0 <_init>
 8002a70:	1b64      	subs	r4, r4, r5
 8002a72:	10a4      	asrs	r4, r4, #2
 8002a74:	2600      	movs	r6, #0
 8002a76:	42a6      	cmp	r6, r4
 8002a78:	d105      	bne.n	8002a86 <__libc_init_array+0x2e>
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a80:	4798      	blx	r3
 8002a82:	3601      	adds	r6, #1
 8002a84:	e7ee      	b.n	8002a64 <__libc_init_array+0xc>
 8002a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8a:	4798      	blx	r3
 8002a8c:	3601      	adds	r6, #1
 8002a8e:	e7f2      	b.n	8002a76 <__libc_init_array+0x1e>
 8002a90:	08002b74 	.word	0x08002b74
 8002a94:	08002b74 	.word	0x08002b74
 8002a98:	08002b74 	.word	0x08002b74
 8002a9c:	08002b78 	.word	0x08002b78

08002aa0 <memset>:
 8002aa0:	4402      	add	r2, r0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <memset+0xa>
 8002aa8:	4770      	bx	lr
 8002aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002aae:	e7f9      	b.n	8002aa4 <memset+0x4>

08002ab0 <_init>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	bf00      	nop
 8002ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab6:	bc08      	pop	{r3}
 8002ab8:	469e      	mov	lr, r3
 8002aba:	4770      	bx	lr

08002abc <_fini>:
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abe:	bf00      	nop
 8002ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac2:	bc08      	pop	{r3}
 8002ac4:	469e      	mov	lr, r3
 8002ac6:	4770      	bx	lr
