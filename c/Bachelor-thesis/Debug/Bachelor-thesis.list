
Bachelor-thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ed8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08008018  08008018  00018018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000008  08008790  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000010c  200001e4  0800896c  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002f0  0800896c  000202f0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015251  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a40  00000000  00000000  00035465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001998  00000000  00000000  00037ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001870  00000000  00000000  00039840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00023957  00000000  00000000  0003b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014f39  00000000  00000000  0005ea07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e60c0  00000000  00000000  00073940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00159a00  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007d98  00000000  00000000  00159a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stabstr      0000004e  00000000  00000000  001617e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08008000 	.word	0x08008000

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08008000 	.word	0x08008000

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5c:	f3bf 8f4f 	dsb	sy
}
 8000b60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <__NVIC_SystemReset+0x24>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b6a:	4904      	ldr	r1, [pc, #16]	; (8000b7c <__NVIC_SystemReset+0x24>)
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_SystemReset+0x28>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b72:	f3bf 8f4f 	dsb	sy
}
 8000b76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <__NVIC_SystemReset+0x20>
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	05fa0004 	.word	0x05fa0004

08000b84 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <lightsleep_test>:
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_RESET);
}

void lightsleep_test(uint32_t interval_in_ms, uint32_t amount_of_loops)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
    uint32_t run_counter = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]

    while (run_counter < amount_of_loops)
 8000bc6:	e019      	b.n	8000bfc <lightsleep_test+0x44>
    {
        // Assuming you have initialized TIMER_PIN, change the pin name accordingly
        HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4810      	ldr	r0, [pc, #64]	; (8000c10 <lightsleep_test+0x58>)
 8000bce:	f001 f925 	bl	8001e1c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <lightsleep_test+0x58>)
 8000bd8:	f001 f920 	bl	8001e1c <HAL_GPIO_WritePin>

        // Delay using HAL_Delay which puts the CPU in sleep mode while waiting
        HAL_Delay(interval_in_ms);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fe61 	bl	80018a4 <HAL_Delay>


        HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2104      	movs	r1, #4
 8000be6:	480a      	ldr	r0, [pc, #40]	; (8000c10 <lightsleep_test+0x58>)
 8000be8:	f001 f918 	bl	8001e1c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2104      	movs	r1, #4
 8000bf0:	4807      	ldr	r0, [pc, #28]	; (8000c10 <lightsleep_test+0x58>)
 8000bf2:	f001 f913 	bl	8001e1c <HAL_GPIO_WritePin>

        run_counter++;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
    while (run_counter < amount_of_loops)
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d3e1      	bcc.n	8000bc8 <lightsleep_test+0x10>
    }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	48000800 	.word	0x48000800

08000c14 <send16Bit>:
        printf("DEATH\n");
    }
}


_Bool send16Bit(uint16_t *send){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2, 10) == HAL_OK){
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	2202      	movs	r2, #2
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <send16Bit+0x28>)
 8000c24:	f003 fb23 	bl	800426e <HAL_SPI_Transmit>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <send16Bit+0x1e>
		return true;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <send16Bit+0x20>
	}
	return false;
 8000c32:	2300      	movs	r3, #0

}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000224 	.word	0x20000224

08000c40 <send_settings_spi>:
	if(HAL_SPI_Receive(&hspi1, (uint8_t*)readInto, 2, 10) == HAL_OK){
		return true;
	}
	return false;
}
void send_settings_spi(uint16_t sleep_time, uint16_t run_amount, uint16_t run_type){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	80bb      	strh	r3, [r7, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	807b      	strh	r3, [r7, #2]

	HAL_StatusTypeDef sendSleepTimeReady = HAL_SPI_Transmit(&hspi1, (uint8_t*)SLEEP_TIME_ADDR, 1, 10);
 8000c52:	230a      	movs	r3, #10
 8000c54:	2201      	movs	r2, #1
 8000c56:	2101      	movs	r1, #1
 8000c58:	4824      	ldr	r0, [pc, #144]	; (8000cec <send_settings_spi+0xac>)
 8000c5a:	f003 fb08 	bl	800426e <HAL_SPI_Transmit>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
	if(sendSleepTimeReady == HAL_OK){
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10c      	bne.n	8000c82 <send_settings_spi+0x42>
		if(!send16Bit(&sleep_time)){
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffd2 	bl	8000c14 <send16Bit>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f083 0301 	eor.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <send_settings_spi+0x42>
			printf("COULD NOT SEND SLEEP TIME");
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <send_settings_spi+0xb0>)
 8000c7e:	f005 fb9d 	bl	80063bc <iprintf>
		}
	}
	HAL_StatusTypeDef sendRunAmountReady = HAL_SPI_Transmit(&hspi1, (uint8_t*)RUN_AMOUNT_ADDR, 1, 10);
 8000c82:	230a      	movs	r3, #10
 8000c84:	2201      	movs	r2, #1
 8000c86:	2102      	movs	r1, #2
 8000c88:	4818      	ldr	r0, [pc, #96]	; (8000cec <send_settings_spi+0xac>)
 8000c8a:	f003 faf0 	bl	800426e <HAL_SPI_Transmit>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	73bb      	strb	r3, [r7, #14]
	if(sendRunAmountReady == HAL_OK){
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10c      	bne.n	8000cb2 <send_settings_spi+0x72>
		if(!send16Bit(&run_amount)){
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffba 	bl	8000c14 <send16Bit>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <send_settings_spi+0x72>
			printf("COULD NOT SEND RUN AMOUNT");
 8000cac:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <send_settings_spi+0xb4>)
 8000cae:	f005 fb85 	bl	80063bc <iprintf>
		}
	}
	HAL_StatusTypeDef sendRunTypeReady = HAL_SPI_Transmit(&hspi1, (uint8_t*)TEST_MODE_ADDR, 1, 10);
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <send_settings_spi+0xac>)
 8000cba:	f003 fad8 	bl	800426e <HAL_SPI_Transmit>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	737b      	strb	r3, [r7, #13]
	if(sendRunTypeReady == HAL_OK){
 8000cc2:	7b7b      	ldrb	r3, [r7, #13]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10c      	bne.n	8000ce2 <send_settings_spi+0xa2>
		if(!send16Bit(&run_type)){
 8000cc8:	1cbb      	adds	r3, r7, #2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ffa2 	bl	8000c14 <send16Bit>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f083 0301 	eor.w	r3, r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <send_settings_spi+0xa2>
			printf("COULD NOT SEND RUN TYPE");
 8000cdc:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <send_settings_spi+0xb8>)
 8000cde:	f005 fb6d 	bl	80063bc <iprintf>
		}
	}

}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000224 	.word	0x20000224
 8000cf0:	08008248 	.word	0x08008248
 8000cf4:	08008264 	.word	0x08008264
 8000cf8:	08008280 	.word	0x08008280

08000cfc <receive_data_SPI>:

uint16_t* receive_data_SPI(uint16_t run_amount){
 8000cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d00:	b089      	sub	sp, #36	; 0x24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	80fb      	strh	r3, [r7, #6]
 8000d08:	466b      	mov	r3, sp
 8000d0a:	461e      	mov	r6, r3
	uint8_t bytesread[run_amount * 2];
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	0059      	lsls	r1, r3, #1
 8000d10:	1e4b      	subs	r3, r1, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	460a      	mov	r2, r1
 8000d16:	2300      	movs	r3, #0
 8000d18:	4690      	mov	r8, r2
 8000d1a:	4699      	mov	r9, r3
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d30:	460a      	mov	r2, r1
 8000d32:	2300      	movs	r3, #0
 8000d34:	4614      	mov	r4, r2
 8000d36:	461d      	mov	r5, r3
 8000d38:	f04f 0200 	mov.w	r2, #0
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	00eb      	lsls	r3, r5, #3
 8000d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d46:	00e2      	lsls	r2, r4, #3
 8000d48:	460b      	mov	r3, r1
 8000d4a:	3307      	adds	r3, #7
 8000d4c:	08db      	lsrs	r3, r3, #3
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	ebad 0d03 	sub.w	sp, sp, r3
 8000d54:	466b      	mov	r3, sp
 8000d56:	3300      	adds	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
	uint16_t *received_data = malloc(run_amount * sizeof(uint16_t));
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fdbc 	bl	80058dc <malloc>
 8000d64:	4603      	mov	r3, r0
 8000d66:	60fb      	str	r3, [r7, #12]
	if (received_data == NULL){
		// Handle error
	}

	// Wait for the RECEIVE_READY_Pin to go high before proceeding
	while (HAL_GPIO_ReadPin(RECEIVE_READY_GPIO_Port, RECEIVE_READY_Pin) == GPIO_PIN_RESET)
 8000d68:	bf00      	nop
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	4822      	ldr	r0, [pc, #136]	; (8000df8 <receive_data_SPI+0xfc>)
 8000d6e:	f001 f83d 	bl	8001dec <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f8      	beq.n	8000d6a <receive_data_SPI+0x6e>
	{
		// add timeout or yield to other tasks here if necessary
	}

	for (int i = 0; i < run_amount * 2; i += 2){
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	e00b      	b.n	8000d96 <receive_data_SPI+0x9a>
		HAL_SPI_Receive(&hspi1, &bytesread[i], 2, HAL_MAX_DELAY); // Receive two bytes of data over SPI
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	18d1      	adds	r1, r2, r3
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d88:	2202      	movs	r2, #2
 8000d8a:	481c      	ldr	r0, [pc, #112]	; (8000dfc <receive_data_SPI+0x100>)
 8000d8c:	f003 fbdd 	bl	800454a <HAL_SPI_Receive>
	for (int i = 0; i < run_amount * 2; i += 2){
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	3302      	adds	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbee      	blt.n	8000d7e <receive_data_SPI+0x82>
	}

	// Process the received data and store it in received_data
	for (int i = 0; i < run_amount; i++){
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	e017      	b.n	8000dd6 <receive_data_SPI+0xda>
		uint16_t data = bytesread[i * 2 + 1] << 8 | bytesread[i * 2];
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	3301      	adds	r3, #1
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	6939      	ldr	r1, [r7, #16]
 8000dba:	5ccb      	ldrb	r3, [r1, r3]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	817b      	strh	r3, [r7, #10]
		received_data[i] = data;
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	897a      	ldrh	r2, [r7, #10]
 8000dce:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < run_amount; i++){
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbe3      	blt.n	8000da6 <receive_data_SPI+0xaa>
	}

	printf("%d\n", run_amount); // Print the number of SPI transfers made
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <receive_data_SPI+0x104>)
 8000de4:	f005 faea 	bl	80063bc <iprintf>
	return received_data;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	46b5      	mov	sp, r6
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3724      	adds	r7, #36	; 0x24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df6:	bf00      	nop
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	20000224 	.word	0x20000224
 8000e00:	08008298 	.word	0x08008298

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f000 fcc5 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 f833 	bl	8000e78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e12:	f000 f889 	bl	8000f28 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 f99f 	bl	8001158 <MX_GPIO_Init>
  MX_RTC_Init();
 8000e1a:	f000 f8a3 	bl	8000f64 <MX_RTC_Init>
  MX_SPI1_Init();
 8000e1e:	f000 f911 	bl	8001044 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e22:	f000 f94b 	bl	80010bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
   printf("SENDING SETTINGS\n");
 8000e26:	4810      	ldr	r0, [pc, #64]	; (8000e68 <main+0x64>)
 8000e28:	f005 fb4e 	bl	80064c8 <puts>
   send_settings_spi(1000, 10, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	210a      	movs	r1, #10
 8000e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e34:	f7ff ff04 	bl	8000c40 <send_settings_spi>
   printf("SETTINGS SENT, STARTING TESTS\n");
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <main+0x68>)
 8000e3a:	f005 fb45 	bl	80064c8 <puts>
   lightsleep_test(1000, 10);
 8000e3e:	210a      	movs	r1, #10
 8000e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e44:	f7ff feb8 	bl	8000bb8 <lightsleep_test>
   printf("TESTS FINISHED, FETCHING DATA\n");
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <main+0x6c>)
 8000e4a:	f005 fb3d 	bl	80064c8 <puts>

   uint16_t *data = receive_data_SPI(10);
 8000e4e:	200a      	movs	r0, #10
 8000e50:	f7ff ff54 	bl	8000cfc <receive_data_SPI>
 8000e54:	6078      	str	r0, [r7, #4]
   printf("DATA FETCHED!\n");
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <main+0x70>)
 8000e58:	f005 fb36 	bl	80064c8 <puts>

   // Free the allocated memory for received_data
   free(data);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f004 fd45 	bl	80058ec <free>



  // Reset the MCU to simulate sys.exit() behavior
  NVIC_SystemReset();
 8000e62:	f7ff fe79 	bl	8000b58 <__NVIC_SystemReset>
 8000e66:	bf00      	nop
 8000e68:	0800829c 	.word	0x0800829c
 8000e6c:	080082b0 	.word	0x080082b0
 8000e70:	080082d0 	.word	0x080082d0
 8000e74:	080082f0 	.word	0x080082f0

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b09a      	sub	sp, #104	; 0x68
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	2248      	movs	r2, #72	; 0x48
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f004 fd46 	bl	8005918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <SystemClock_Config+0xac>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ea6:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <SystemClock_Config+0xac>)
 8000ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <SystemClock_Config+0xac>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000eba:	230b      	movs	r3, #11
 8000ebc:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eca:	2340      	movs	r3, #64	; 0x40
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fb4a 	bl	8002574 <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ee6:	f000 f9d1 	bl	800128c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000eea:	236f      	movs	r3, #111	; 0x6f
 8000eec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fea6 	bl	8002c5c <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f16:	f000 f9b9 	bl	800128c <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3768      	adds	r7, #104	; 0x68
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	58000400 	.word	0x58000400

08000f28 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2250      	movs	r2, #80	; 0x50
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 fcef 	bl	8005918 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f40:	2300      	movs	r3, #0
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fa97 	bl	800347e <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000f56:	f000 f999 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	; 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f78:	2300      	movs	r3, #0
 8000f7a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <MX_RTC_Init+0xd8>)
 8000f7e:	4a30      	ldr	r2, [pc, #192]	; (8001040 <MX_RTC_Init+0xdc>)
 8000f80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <MX_RTC_Init+0xd8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f88:	4b2c      	ldr	r3, [pc, #176]	; (800103c <MX_RTC_Init+0xd8>)
 8000f8a:	227f      	movs	r2, #127	; 0x7f
 8000f8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	; (800103c <MX_RTC_Init+0xd8>)
 8000f90:	22ff      	movs	r2, #255	; 0xff
 8000f92:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <MX_RTC_Init+0xd8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_RTC_Init+0xd8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <MX_RTC_Init+0xd8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_RTC_Init+0xd8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fac:	4823      	ldr	r0, [pc, #140]	; (800103c <MX_RTC_Init+0xd8>)
 8000fae:	f002 fced 	bl	800398c <HAL_RTC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000fb8:	f000 f968 	bl	800128c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4818      	ldr	r0, [pc, #96]	; (800103c <MX_RTC_Init+0xd8>)
 8000fdc:	f002 fd86 	bl	8003aec <HAL_RTC_SetTime>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000fe6:	f000 f951 	bl	800128c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000fea:	2304      	movs	r3, #4
 8000fec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000ff2:	2316      	movs	r3, #22
 8000ff4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000ff6:	2323      	movs	r3, #35	; 0x23
 8000ff8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	480e      	ldr	r0, [pc, #56]	; (800103c <MX_RTC_Init+0xd8>)
 8001002:	f002 fe37 	bl	8003c74 <HAL_RTC_SetDate>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 800100c:	f000 f93e 	bl	800128c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <MX_RTC_Init+0xd8>)
 8001016:	f002 ff4b 	bl	8003eb0 <HAL_RTCEx_SetWakeUpTimer_IT>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8001020:	f000 f934 	bl	800128c <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_RTC_Init+0xd8>)
 8001026:	f003 f82f 	bl	8004088 <HAL_RTCEx_SetRefClock>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8001030:	f000 f92c 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000200 	.word	0x20000200
 8001040:	40002800 	.word	0x40002800

08001044 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_SPI1_Init+0x70>)
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <MX_SPI1_Init+0x74>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_SPI1_Init+0x70>)
 8001050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_SPI1_Init+0x70>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_SPI1_Init+0x70>)
 800105e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001062:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_SPI1_Init+0x70>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_SPI1_Init+0x70>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_SPI1_Init+0x70>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_SPI1_Init+0x70>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <MX_SPI1_Init+0x70>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_SPI1_Init+0x70>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_SPI1_Init+0x70>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_SPI1_Init+0x70>)
 8001090:	2207      	movs	r2, #7
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_SPI1_Init+0x70>)
 8001096:	2200      	movs	r2, #0
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_SPI1_Init+0x70>)
 800109c:	2208      	movs	r2, #8
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_SPI1_Init+0x70>)
 80010a2:	f003 f841 	bl	8004128 <HAL_SPI_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 80010ac:	f000 f8ee 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000224 	.word	0x20000224
 80010b8:	40013000 	.word	0x40013000

080010bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_TIM2_Init+0x98>)
 80010dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_TIM2_Init+0x98>)
 80010e4:	221f      	movs	r2, #31
 80010e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_TIM2_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_TIM2_Init+0x98>)
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_TIM2_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_TIM2_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_TIM2_Init+0x98>)
 8001104:	f003 ff20 	bl	8004f48 <HAL_TIM_Base_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800110e:	f000 f8bd 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_TIM2_Init+0x98>)
 8001120:	f003 ff69 	bl	8004ff6 <HAL_TIM_ConfigClockSource>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800112a:	f000 f8af 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_TIM2_Init+0x98>)
 800113c:	f004 f924 	bl	8005388 <HAL_TIMEx_MasterConfigSynchronization>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001146:	f000 f8a1 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000288 	.word	0x20000288

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	2004      	movs	r0, #4
 800116e:	f7ff fd09 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2001      	movs	r0, #1
 8001174:	f7ff fd06 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	2002      	movs	r0, #2
 800117a:	f7ff fd03 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	2008      	movs	r0, #8
 8001180:	f7ff fd00 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIMER_PIN_Pin|RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2105      	movs	r1, #5
 8001188:	482d      	ldr	r0, [pc, #180]	; (8001240 <MX_GPIO_Init+0xe8>)
 800118a:	f000 fe47 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2133      	movs	r1, #51	; 0x33
 8001192:	482c      	ldr	r0, [pc, #176]	; (8001244 <MX_GPIO_Init+0xec>)
 8001194:	f000 fe42 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TIMER_PIN_Pin RESPONSE_PIN_Pin */
  GPIO_InitStruct.Pin = TIMER_PIN_Pin|RESPONSE_PIN_Pin;
 8001198:	2305      	movs	r3, #5
 800119a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a0:	2302      	movs	r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4824      	ldr	r0, [pc, #144]	; (8001240 <MX_GPIO_Init+0xe8>)
 80011ae:	f000 fcad 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_PIN_Pin;
 80011b2:	2302      	movs	r3, #2
 80011b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011bc:	2302      	movs	r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IRQ_PIN_GPIO_Port, &GPIO_InitStruct);
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	481e      	ldr	r0, [pc, #120]	; (8001240 <MX_GPIO_Init+0xe8>)
 80011c6:	f000 fca1 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ca:	2310      	movs	r3, #16
 80011cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4819      	ldr	r0, [pc, #100]	; (8001240 <MX_GPIO_Init+0xe8>)
 80011dc:	f000 fc96 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin CHIP_SELECT_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin;
 80011e0:	2333      	movs	r3, #51	; 0x33
 80011e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <MX_GPIO_Init+0xec>)
 80011f6:	f000 fc89 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 B3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 80011fa:	2303      	movs	r3, #3
 80011fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <MX_GPIO_Init+0xf0>)
 800120c:	f000 fc7e 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : RECEIVE_READY_Pin */
  GPIO_InitStruct.Pin = RECEIVE_READY_Pin;
 8001210:	2340      	movs	r3, #64	; 0x40
 8001212:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(RECEIVE_READY_GPIO_Port, &GPIO_InitStruct);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <MX_GPIO_Init+0xec>)
 8001222:	f000 fc73 	bl	8001b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2007      	movs	r0, #7
 800122c:	f000 fc39 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001230:	2007      	movs	r0, #7
 8001232:	f000 fc50 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	48000800 	.word	0x48000800
 8001244:	48000400 	.word	0x48000400
 8001248:	48000c00 	.word	0x48000c00

0800124c <HAL_GPIO_EXTI_Callback>:
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_RESET);
	HAL_PWR_EnterSTANDBYMode();
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == RESPONSE_PIN_Pin){
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	2b04      	cmp	r3, #4
 800125a:	d10e      	bne.n	800127a <HAL_GPIO_EXTI_Callback+0x2e>
		 HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2104      	movs	r1, #4
 8001260:	4808      	ldr	r0, [pc, #32]	; (8001284 <HAL_GPIO_EXTI_Callback+0x38>)
 8001262:	f000 fddb 	bl	8001e1c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <HAL_GPIO_EXTI_Callback+0x38>)
 800126c:	f000 fdd6 	bl	8001e1c <HAL_GPIO_WritePin>
		 captures += 1;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001278:	6013      	str	r3, [r2, #0]
	}
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	48000800 	.word	0x48000800
 8001288:	200002d4 	.word	0x200002d4

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>

08001296 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_AHB2_GRP1_EnableClock>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012dc:	68fb      	ldr	r3, [r7, #12]
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4313      	orrs	r3, r2
 8001300:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001306:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001328:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800132a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4313      	orrs	r3, r2
 8001332:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001338:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4013      	ands	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001340:	68fb      	ldr	r3, [r7, #12]
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09c      	sub	sp, #112	; 0x70
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2250      	movs	r2, #80	; 0x50
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f004 facb 	bl	8005918 <memset>
  if(hrtc->Instance==RTC)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <HAL_RTC_MspInit+0x9c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d131      	bne.n	80013f0 <HAL_RTC_MspInit+0x94>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800138c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001390:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001396:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4618      	mov	r0, r3
 800139e:	f002 f86e 	bl	800347e <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 80013a8:	f7ff ff70 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ac:	f7ff ff73 	bl	8001296 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80013b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013b4:	f7ff ff99 	bl	80012ea <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	2002      	movs	r0, #2
 80013ba:	f7ff ff7d 	bl	80012b8 <LL_AHB2_GRP1_EnableClock>
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_OUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013d8:	4619      	mov	r1, r3
 80013da:	4808      	ldr	r0, [pc, #32]	; (80013fc <HAL_RTC_MspInit+0xa0>)
 80013dc:	f000 fb96 	bl	8001b0c <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 fb5c 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80013ea:	2003      	movs	r0, #3
 80013ec:	f000 fb73 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3770      	adds	r7, #112	; 0x70
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40002800 	.word	0x40002800
 80013fc:	48000400 	.word	0x48000400

08001400 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_SPI_MspInit+0x5c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d117      	bne.n	8001452 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001422:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001426:	f7ff ff79 	bl	800131c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff ff44 	bl	80012b8 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001430:	23f0      	movs	r3, #240	; 0xf0
 8001432:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001440:	2305      	movs	r3, #5
 8001442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f000 fb5d 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40013000 	.word	0x40013000

08001460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001470:	d102      	bne.n	8001478 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff ff39 	bl	80012ea <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f9be 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <RTC_WKUP_IRQHandler+0x10>)
 80014da:	f002 fda5 	bl	8004028 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000200 	.word	0x20000200

080014e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_PIN_Pin);
 80014ec:	2002      	movs	r0, #2
 80014ee:	f000 fcad 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_getpid>:
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	2301      	movs	r3, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_kill>:
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
 8001510:	f003 ff9a 	bl	8005448 <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	2216      	movs	r2, #22
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_exit>:
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffe7 	bl	8001506 <_kill>
 8001538:	e7fe      	b.n	8001538 <_exit+0x12>

0800153a <_read>:
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e00a      	b.n	8001562 <_read+0x28>
 800154c:	f3af 8000 	nop.w
 8001550:	4601      	mov	r1, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	b2ca      	uxtb	r2, r1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3301      	adds	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	dbf0      	blt.n	800154c <_read+0x12>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_write>:
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e009      	b.n	800159a <_write+0x26>
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	60ba      	str	r2, [r7, #8]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f3af 8000 	nop.w
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbf1      	blt.n	8001586 <_write+0x12>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_close>:
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_fstat>:
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	2300      	movs	r3, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_isatty>:
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	2301      	movs	r3, #1
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_lseek>:
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	2300      	movs	r3, #0
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_sbrk>:
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d207      	bcs.n	8001654 <_sbrk+0x40>
 8001644:	f003 ff00 	bl	8005448 <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001652:	e009      	b.n	8001668 <_sbrk+0x54>
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20030000 	.word	0x20030000
 8001674:	00000400 	.word	0x00000400
 8001678:	200002d8 	.word	0x200002d8
 800167c:	200002f0 	.word	0x200002f0

08001680 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <SystemInit+0x98>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168a:	4a23      	ldr	r2, [pc, #140]	; (8001718 <SystemInit+0x98>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80016ac:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <SystemInit+0x9c>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ca:	f023 0305 	bic.w	r3, r3, #5
 80016ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ea:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <SystemInit+0xa0>)
 80016ec:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80016ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <SystemInit+0xa0>)
 80016f4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001704:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	faf6fefb 	.word	0xfaf6fefb
 8001720:	22041000 	.word	0x22041000

08001724 <CopyDataInit>:
 8001724:	58d4      	ldr	r4, [r2, r3]
 8001726:	50c4      	str	r4, [r0, r3]
 8001728:	3304      	adds	r3, #4

0800172a <LoopCopyDataInit>:
 800172a:	18c4      	adds	r4, r0, r3
 800172c:	428c      	cmp	r4, r1
 800172e:	d3f9      	bcc.n	8001724 <CopyDataInit>
 8001730:	4770      	bx	lr

08001732 <FillZerobss>:
 8001732:	6003      	str	r3, [r0, #0]
 8001734:	3004      	adds	r0, #4

08001736 <LoopFillZerobss>:
 8001736:	4288      	cmp	r0, r1
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>
 800173a:	4770      	bx	lr

0800173c <Reset_Handler>:
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <LoopForever+0x2>)
 800173e:	4685      	mov	sp, r0
 8001740:	f7ff ff9e 	bl	8001680 <SystemInit>
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <LoopForever+0x6>)
 8001746:	490c      	ldr	r1, [pc, #48]	; (8001778 <LoopForever+0xa>)
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <LoopForever+0xe>)
 800174a:	2300      	movs	r3, #0
 800174c:	f7ff ffed 	bl	800172a <LoopCopyDataInit>
 8001750:	480b      	ldr	r0, [pc, #44]	; (8001780 <LoopForever+0x12>)
 8001752:	490c      	ldr	r1, [pc, #48]	; (8001784 <LoopForever+0x16>)
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <LoopForever+0x1a>)
 8001756:	2300      	movs	r3, #0
 8001758:	f7ff ffe7 	bl	800172a <LoopCopyDataInit>
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <LoopForever+0x1e>)
 800175e:	490c      	ldr	r1, [pc, #48]	; (8001790 <LoopForever+0x22>)
 8001760:	2300      	movs	r3, #0
 8001762:	f7ff ffe8 	bl	8001736 <LoopFillZerobss>
 8001766:	f004 f82d 	bl	80057c4 <__libc_init_array>
 800176a:	f7ff fb4b 	bl	8000e04 <main>

0800176e <LoopForever>:
 800176e:	e7fe      	b.n	800176e <LoopForever>
 8001770:	20030000 	.word	0x20030000
 8001774:	20000008 	.word	0x20000008
 8001778:	200001e4 	.word	0x200001e4
 800177c:	08008790 	.word	0x08008790
 8001780:	20030000 	.word	0x20030000
 8001784:	20030000 	.word	0x20030000
 8001788:	0800896c 	.word	0x0800896c
 800178c:	200001e4 	.word	0x200001e4
 8001790:	200002f0 	.word	0x200002f0

08001794 <ADC1_IRQHandler>:
 8001794:	e7fe      	b.n	8001794 <ADC1_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_Init+0x3c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_Init+0x3c>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f000 f96c 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 f80f 	bl	80017d8 <HAL_InitTick>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	e001      	b.n	80017ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c6:	f7ff fdc2 	bl	800134e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	58004000 	.word	0x58004000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_InitTick+0x6c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d024      	beq.n	8001836 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017ec:	f001 fbe2 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_InitTick+0x6c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4619      	mov	r1, r3
 80017f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f974 	bl	8001af2 <HAL_SYSTICK_Config>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10f      	bne.n	8001830 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b0f      	cmp	r3, #15
 8001814:	d809      	bhi.n	800182a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001816:	2200      	movs	r2, #0
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181e:	f000 f940 	bl	8001aa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_InitTick+0x70>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e007      	b.n	800183a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e004      	b.n	800183a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e001      	b.n	800183a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000010 	.word	0x20000010
 8001848:	2000000c 	.word	0x2000000c

0800184c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000010 	.word	0x20000010
 8001870:	200002dc 	.word	0x200002dc

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200002dc 	.word	0x200002dc

0800188c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_GetTickPrio+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000000c 	.word	0x2000000c

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffe2 	bl	8001874 <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffd2 	bl	8001874 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000010 	.word	0x20000010

080018ec <__NVIC_SetPriorityGrouping>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff29 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff40 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff90 	bl	80019e0 <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5f 	bl	800198c <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff33 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa4 	bl	8001a48 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	e14c      	b.n	8001db6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 813e 	beq.w	8001db0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d005      	beq.n	8001b4c <HAL_GPIO_Init+0x40>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d130      	bne.n	8001bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b82:	2201      	movs	r2, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f003 0201 	and.w	r2, r3, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d017      	beq.n	8001bea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d123      	bne.n	8001c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	6939      	ldr	r1, [r7, #16]
 8001c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0203 	and.w	r2, r3, #3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8098 	beq.w	8001db0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c80:	4a54      	ldr	r2, [pc, #336]	; (8001dd4 <HAL_GPIO_Init+0x2c8>)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001caa:	d019      	beq.n	8001ce0 <HAL_GPIO_Init+0x1d4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a4a      	ldr	r2, [pc, #296]	; (8001dd8 <HAL_GPIO_Init+0x2cc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d013      	beq.n	8001cdc <HAL_GPIO_Init+0x1d0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a49      	ldr	r2, [pc, #292]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00d      	beq.n	8001cd8 <HAL_GPIO_Init+0x1cc>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a48      	ldr	r2, [pc, #288]	; (8001de0 <HAL_GPIO_Init+0x2d4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d007      	beq.n	8001cd4 <HAL_GPIO_Init+0x1c8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <HAL_GPIO_Init+0x2d8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_GPIO_Init+0x1c4>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e008      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	e006      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e004      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	f002 0203 	and.w	r2, r2, #3
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	4093      	lsls	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf2:	4938      	ldr	r1, [pc, #224]	; (8001dd4 <HAL_GPIO_Init+0x2c8>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d00:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d24:	4a30      	ldr	r2, [pc, #192]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d4e:	4a26      	ldr	r2, [pc, #152]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001da8:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f47f aeab 	bne.w	8001b1c <HAL_GPIO_Init+0x10>
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	58000800 	.word	0x58000800

08001dec <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e001      	b.n	8001e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f9ee 	bl	800124c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58000800 	.word	0x58000800

08001e7c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	58000400 	.word	0x58000400

08001e9c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	58000400 	.word	0x58000400

08001eb8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eca:	d101      	bne.n	8001ed0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_RCC_HSE_Enable>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_RCC_HSE_Disable>:
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_HSE_IsReady>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f2a:	d101      	bne.n	8001f30 <LL_RCC_HSE_IsReady+0x18>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <LL_RCC_HSE_IsReady+0x1a>
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_RCC_HSI_Enable>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_HSI_Disable>:
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f6c:	6013      	str	r3, [r2, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_RCC_HSI_IsReady>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8a:	d101      	bne.n	8001f90 <LL_RCC_HSI_IsReady+0x18>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <LL_RCC_HSI_IsReady+0x1a>
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_RCC_HSI_SetCalibTrimming>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	061b      	lsls	r3, r3, #24
 8001fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RCC_HSI48_Enable>:
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_RCC_HSI48_Disable>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_RCC_HSI48_IsReady>:
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d101      	bne.n	8002022 <LL_RCC_HSI48_IsReady+0x18>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <LL_RCC_HSI48_IsReady+0x1a>
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_RCC_LSE_Enable>:
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_RCC_LSE_Disable>:
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_RCC_LSE_EnableBypass>:
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_RCC_LSE_DisableBypass>:
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_RCC_LSE_IsReady>:
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d101      	bne.n	80020ce <LL_RCC_LSE_IsReady+0x18>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_RCC_LSE_IsReady+0x1a>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_RCC_LSI1_Enable>:
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_RCC_LSI1_Disable>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_RCC_LSI1_IsReady>:
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b02      	cmp	r3, #2
 8002130:	d101      	bne.n	8002136 <LL_RCC_LSI1_IsReady+0x18>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <LL_RCC_LSI1_IsReady+0x1a>
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_LSI2_Enable>:
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_RCC_LSI2_Disable>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_LSI2_IsReady>:
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d101      	bne.n	800219e <LL_RCC_LSI2_IsReady+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_RCC_LSI2_IsReady+0x1a>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_RCC_LSI2_SetTrimming>:
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_RCC_MSI_Enable>:
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_RCC_MSI_Disable>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6013      	str	r3, [r2, #0]
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_RCC_MSI_IsReady>:
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b02      	cmp	r3, #2
 8002224:	d101      	bne.n	800222a <LL_RCC_MSI_IsReady+0x16>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_RCC_MSI_IsReady+0x18>
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_RCC_MSI_SetRange>:
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_RCC_MSI_GetRange>:
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800226e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2bb0      	cmp	r3, #176	; 0xb0
 8002274:	d901      	bls.n	800227a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002276:	23b0      	movs	r3, #176	; 0xb0
 8002278:	607b      	str	r3, [r7, #4]
  return msiRange;
 800227a:	687b      	ldr	r3, [r7, #4]
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_RCC_SetSysClkSource>:
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 0203 	bic.w	r2, r3, #3
 80022c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_RCC_GetSysClkSource>:
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 030c 	and.w	r3, r3, #12
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_RCC_SetAHBPrescaler>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_C2_RCC_SetAHBPrescaler>:
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002326:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800232a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_RCC_SetAHB4Prescaler>:
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002356:	f023 020f 	bic.w	r2, r3, #15
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_RCC_SetAPB1Prescaler>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4313      	orrs	r3, r2
 800238e:	608b      	str	r3, [r1, #8]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_SetAPB2Prescaler>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_RCC_GetAHBPrescaler>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_RCC_GetAHB4Prescaler>:
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002428:	6013      	str	r3, [r2, #0]
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002446:	d101      	bne.n	800244c <LL_RCC_PLL_IsReady+0x18>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <LL_RCC_PLL_IsReady+0x1a>
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0303 	and.w	r3, r3, #3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d101      	bne.n	80024d2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024f2:	d101      	bne.n	80024f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d101      	bne.n	800251e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800253c:	d101      	bne.n	8002542 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002560:	d101      	bne.n	8002566 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b08d      	sub	sp, #52	; 0x34
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e363      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 808d 	beq.w	80026ae <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002594:	f7ff fea1 	bl	80022da <LL_RCC_GetSysClkSource>
 8002598:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800259a:	f7ff ff82 	bl	80024a2 <LL_RCC_PLL_GetMainSource>
 800259e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3e>
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d147      	bne.n	800263c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d144      	bne.n	800263c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e347      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80025c2:	f7ff fe4c 	bl	800225e <LL_RCC_MSI_GetRange>
 80025c6:	4603      	mov	r3, r0
 80025c8:	429c      	cmp	r4, r3
 80025ca:	d914      	bls.n	80025f6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fd03 	bl	8002fdc <RCC_SetFlashLatencyFromMSIRange>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e336      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fe26 	bl	8002236 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fe4a 	bl	8002288 <LL_RCC_MSI_SetCalibTrimming>
 80025f4:	e013      	b.n	800261e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fe1b 	bl	8002236 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fe3f 	bl	8002288 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fce4 	bl	8002fdc <RCC_SetFlashLatencyFromMSIRange>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e317      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800261e:	f000 fcc9 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002622:	4603      	mov	r3, r0
 8002624:	4aa4      	ldr	r2, [pc, #656]	; (80028b8 <HAL_RCC_OscConfig+0x344>)
 8002626:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002628:	4ba4      	ldr	r3, [pc, #656]	; (80028bc <HAL_RCC_OscConfig+0x348>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f8d3 	bl	80017d8 <HAL_InitTick>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d039      	beq.n	80026ac <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e308      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01e      	beq.n	8002682 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002644:	f7ff fdc8 	bl	80021d8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002648:	f7ff f914 	bl	8001874 <HAL_GetTick>
 800264c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002650:	f7ff f910 	bl	8001874 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e2f5      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002662:	f7ff fdd7 	bl	8002214 <LL_RCC_MSI_IsReady>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f1      	beq.n	8002650 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fde0 	bl	8002236 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fe04 	bl	8002288 <LL_RCC_MSI_SetCalibTrimming>
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002682:	f7ff fdb8 	bl	80021f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002686:	f7ff f8f5 	bl	8001874 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800268e:	f7ff f8f1 	bl	8001874 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e2d6      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80026a0:	f7ff fdb8 	bl	8002214 <LL_RCC_MSI_IsReady>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f1      	bne.n	800268e <HAL_RCC_OscConfig+0x11a>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80026ac:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d047      	beq.n	800274a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ba:	f7ff fe0e 	bl	80022da <LL_RCC_GetSysClkSource>
 80026be:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c0:	f7ff feef 	bl	80024a2 <LL_RCC_PLL_GetMainSource>
 80026c4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x164>
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d105      	bne.n	80026e4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d134      	bne.n	800274a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e2b4      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ec:	d102      	bne.n	80026f4 <HAL_RCC_OscConfig+0x180>
 80026ee:	f7ff fbf5 	bl	8001edc <LL_RCC_HSE_Enable>
 80026f2:	e001      	b.n	80026f8 <HAL_RCC_OscConfig+0x184>
 80026f4:	f7ff fc01 	bl	8001efa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d012      	beq.n	8002726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7ff f8b8 	bl	8001874 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff f8b4 	bl	8001874 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e299      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800271a:	f7ff fbfd 	bl	8001f18 <LL_RCC_HSE_IsReady>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f1      	beq.n	8002708 <HAL_RCC_OscConfig+0x194>
 8002724:	e011      	b.n	800274a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7ff f8a5 	bl	8001874 <HAL_GetTick>
 800272a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272e:	f7ff f8a1 	bl	8001874 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e286      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002740:	f7ff fbea 	bl	8001f18 <LL_RCC_HSE_IsReady>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f1      	bne.n	800272e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d04c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	f7ff fdc0 	bl	80022da <LL_RCC_GetSysClkSource>
 800275a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800275c:	f7ff fea1 	bl	80024a2 <LL_RCC_PLL_GetMainSource>
 8002760:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d005      	beq.n	8002774 <HAL_RCC_OscConfig+0x200>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d10e      	bne.n	800278c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d10b      	bne.n	800278c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e266      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fc09 	bl	8001f9c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800278a:	e031      	b.n	80027f0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d019      	beq.n	80027c8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002794:	f7ff fbd2 	bl	8001f3c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7ff f86c 	bl	8001874 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a0:	f7ff f868 	bl	8001874 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e24d      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80027b2:	f7ff fbe1 	bl	8001f78 <LL_RCC_HSI_IsReady>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f1      	beq.n	80027a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fbeb 	bl	8001f9c <LL_RCC_HSI_SetCalibTrimming>
 80027c6:	e013      	b.n	80027f0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c8:	f7ff fbc7 	bl	8001f5a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff f852 	bl	8001874 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7ff f84e 	bl	8001874 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e233      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80027e6:	f7ff fbc7 	bl	8001f78 <LL_RCC_HSI_IsReady>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f1      	bne.n	80027d4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80a3 	beq.w	8002950 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d076      	beq.n	8002900 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	d046      	beq.n	80028ac <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800281e:	f7ff fc7e 	bl	800211e <LL_RCC_LSI1_IsReady>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d113      	bne.n	8002850 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002828:	f7ff fc57 	bl	80020da <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800282c:	f7ff f822 	bl	8001874 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002834:	f7ff f81e 	bl	8001874 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e203      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002846:	f7ff fc6a 	bl	800211e <LL_RCC_LSI1_IsReady>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f1      	beq.n	8002834 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002850:	f7ff fc77 	bl	8002142 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7ff f80e 	bl	8001874 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800285c:	f7ff f80a 	bl	8001874 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b03      	cmp	r3, #3
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1ef      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800286e:	f7ff fc8a 	bl	8002186 <LL_RCC_LSI2_IsReady>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f1      	beq.n	800285c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fc94 	bl	80021aa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002882:	f7ff fc3b 	bl	80020fc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fff5 	bl	8001874 <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800288e:	f7fe fff1 	bl	8001874 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1d6      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80028a0:	f7ff fc3d 	bl	800211e <LL_RCC_LSI1_IsReady>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f1      	bne.n	800288e <HAL_RCC_OscConfig+0x31a>
 80028aa:	e051      	b.n	8002950 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80028ac:	f7ff fc15 	bl	80020da <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe ffe0 	bl	8001874 <HAL_GetTick>
 80028b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80028b6:	e00c      	b.n	80028d2 <HAL_RCC_OscConfig+0x35e>
 80028b8:	20000008 	.word	0x20000008
 80028bc:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028c0:	f7fe ffd8 	bl	8001874 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1bd      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80028d2:	f7ff fc24 	bl	800211e <LL_RCC_LSI1_IsReady>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f1      	beq.n	80028c0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80028dc:	f7ff fc42 	bl	8002164 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028e2:	f7fe ffc7 	bl	8001874 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1ac      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80028f4:	f7ff fc47 	bl	8002186 <LL_RCC_LSI2_IsReady>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f1      	bne.n	80028e2 <HAL_RCC_OscConfig+0x36e>
 80028fe:	e027      	b.n	8002950 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002900:	f7ff fc30 	bl	8002164 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe ffb6 	bl	8001874 <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800290c:	f7fe ffb2 	bl	8001874 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b03      	cmp	r3, #3
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e197      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800291e:	f7ff fc32 	bl	8002186 <LL_RCC_LSI2_IsReady>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f1      	bne.n	800290c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002928:	f7ff fbe8 	bl	80020fc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe ffa2 	bl	8001874 <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002934:	f7fe ff9e 	bl	8001874 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e183      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002946:	f7ff fbea 	bl	800211e <LL_RCC_LSI1_IsReady>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f1      	bne.n	8002934 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d05b      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	4ba7      	ldr	r3, [pc, #668]	; (8002bfc <HAL_RCC_OscConfig+0x688>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d114      	bne.n	8002992 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002968:	f7ff fa88 	bl	8001e7c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296c:	f7fe ff82 	bl	8001874 <HAL_GetTick>
 8002970:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe ff7e 	bl	8001874 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e163      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	4b9d      	ldr	r3, [pc, #628]	; (8002bfc <HAL_RCC_OscConfig+0x688>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_OscConfig+0x42c>
 800299a:	f7ff fb48 	bl	800202e <LL_RCC_LSE_Enable>
 800299e:	e00c      	b.n	80029ba <HAL_RCC_OscConfig+0x446>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d104      	bne.n	80029b2 <HAL_RCC_OscConfig+0x43e>
 80029a8:	f7ff fb63 	bl	8002072 <LL_RCC_LSE_EnableBypass>
 80029ac:	f7ff fb3f 	bl	800202e <LL_RCC_LSE_Enable>
 80029b0:	e003      	b.n	80029ba <HAL_RCC_OscConfig+0x446>
 80029b2:	f7ff fb4d 	bl	8002050 <LL_RCC_LSE_Disable>
 80029b6:	f7ff fb6d 	bl	8002094 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d014      	beq.n	80029ec <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe ff57 	bl	8001874 <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe ff53 	bl	8001874 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e136      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80029e0:	f7ff fb69 	bl	80020b6 <LL_RCC_LSE_IsReady>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0ef      	beq.n	80029ca <HAL_RCC_OscConfig+0x456>
 80029ea:	e013      	b.n	8002a14 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7fe ff42 	bl	8001874 <HAL_GetTick>
 80029f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7fe ff3e 	bl	8001874 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e121      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a0a:	f7ff fb54 	bl	80020b6 <LL_RCC_LSE_IsReady>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ef      	bne.n	80029f4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d014      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a28:	f7ff facd 	bl	8001fc6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe ff22 	bl	8001874 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a34:	f7fe ff1e 	bl	8001874 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e103      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a46:	f7ff fae0 	bl	800200a <LL_RCC_HSI48_IsReady>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f1      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4c0>
 8002a50:	e013      	b.n	8002a7a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a52:	f7ff fac9 	bl	8001fe8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe ff0d 	bl	8001874 <HAL_GetTick>
 8002a5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a5e:	f7fe ff09 	bl	8001874 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0ee      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a70:	f7ff facb 	bl	800200a <LL_RCC_HSI48_IsReady>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f1      	bne.n	8002a5e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80e4 	beq.w	8002c4c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a84:	f7ff fc29 	bl	80022da <LL_RCC_GetSysClkSource>
 8002a88:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	f040 80b4 	bne.w	8002c04 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0203 	and.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d123      	bne.n	8002af2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d11c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d114      	bne.n	8002af2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d10d      	bne.n	8002af2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d05d      	beq.n	8002bae <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b0c      	cmp	r3, #12
 8002af6:	d058      	beq.n	8002baa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0a1      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b0a:	f7ff fc84 	bl	8002416 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b0e:	f7fe feb1 	bl	8001874 <HAL_GetTick>
 8002b12:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe fead 	bl	8001874 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e092      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ef      	bne.n	8002b16 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <HAL_RCC_OscConfig+0x68c>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b4e:	0212      	lsls	r2, r2, #8
 8002b50:	4311      	orrs	r1, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b56:	4311      	orrs	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b62:	430a      	orrs	r2, r1
 8002b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b6c:	f7ff fc44 	bl	80023f8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b80:	f7fe fe78 	bl	8001874 <HAL_GetTick>
 8002b84:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe fe74 	bl	8001874 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e059      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba8:	e050      	b.n	8002c4c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e04f      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d147      	bne.n	8002c4c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bbc:	f7ff fc1c 	bl	80023f8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bd0:	f7fe fe50 	bl	8001874 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fe4c 	bl	8001874 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e031      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ef      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x664>
 8002bf8:	e028      	b.n	8002c4c <HAL_RCC_OscConfig+0x6d8>
 8002bfa:	bf00      	nop
 8002bfc:	58000400 	.word	0x58000400
 8002c00:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d01e      	beq.n	8002c48 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	f7ff fc04 	bl	8002416 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fe31 	bl	8001874 <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe fe2d 	bl	8001874 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e012      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1ef      	bne.n	8002c16 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_OscConfig+0x6e4>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	60cb      	str	r3, [r1, #12]
 8002c46:	e001      	b.n	8002c4c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3734      	adds	r7, #52	; 0x34
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}
 8002c56:	bf00      	nop
 8002c58:	eefefffc 	.word	0xeefefffc

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e12d      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b98      	ldr	r3, [pc, #608]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d91b      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b95      	ldr	r3, [pc, #596]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 0207 	bic.w	r2, r3, #7
 8002c86:	4993      	ldr	r1, [pc, #588]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8e:	f7fe fdf1 	bl	8001874 <HAL_GetTick>
 8002c92:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c96:	f7fe fded 	bl	8001874 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e111      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca8:	4b8a      	ldr	r3, [pc, #552]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d1ef      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fb13 	bl	80022f2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fdd2 	bl	8001874 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cd4:	f7fe fdce 	bl	8001874 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0f2      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ce6:	f7ff fbe8 	bl	80024ba <LL_RCC_IsActiveFlag_HPRE>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f1      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d016      	beq.n	8002d2a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fb0a 	bl	800231a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d06:	f7fe fdb5 	bl	8001874 <HAL_GetTick>
 8002d0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d0e:	f7fe fdb1 	bl	8001874 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0d5      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d20:	f7ff fbdd 	bl	80024de <LL_RCC_IsActiveFlag_C2HPRE>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f1      	beq.n	8002d0e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fb03 	bl	8002346 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fd98 	bl	8001874 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d48:	f7fe fd94 	bl	8001874 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0b8      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d5a:	f7ff fbd3 	bl	8002504 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f1      	beq.n	8002d48 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d016      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fafd 	bl	8002374 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d7a:	f7fe fd7b 	bl	8001874 <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d82:	f7fe fd77 	bl	8001874 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e09b      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d94:	f7ff fbc9 	bl	800252a <LL_RCC_IsActiveFlag_PPRE1>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f1      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d017      	beq.n	8002dda <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff faf3 	bl	800239c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002db6:	f7fe fd5d 	bl	8001874 <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dbe:	f7fe fd59 	bl	8001874 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e07d      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002dd0:	f7ff fbbd 	bl	800254e <LL_RCC_IsActiveFlag_PPRE2>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f1      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d043      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002dee:	f7ff f893 	bl	8001f18 <LL_RCC_HSE_IsReady>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11e      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e067      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e04:	f7ff fb16 	bl	8002434 <LL_RCC_PLL_IsReady>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d113      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e05c      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002e1a:	f7ff f9fb 	bl	8002214 <LL_RCC_MSI_IsReady>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d108      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e051      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002e28:	f7ff f8a6 	bl	8001f78 <LL_RCC_HSI_IsReady>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e04a      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fa39 	bl	80022b2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe fd18 	bl	8001874 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7fe fd14 	bl	8001874 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e036      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	f7ff fa3c 	bl	80022da <LL_RCC_GetSysClkSource>
 8002e62:	4602      	mov	r2, r0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d1ec      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d21b      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 0207 	bic.w	r2, r3, #7
 8002e84:	4913      	ldr	r1, [pc, #76]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fcf2 	bl	8001874 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e94:	f7fe fcee 	bl	8001874 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e012      	b.n	8002ecc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_ClockConfig+0x278>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1ef      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002eb4:	f000 f87e 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <HAL_RCC_ClockConfig+0x27c>)
 8002ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002ebe:	f7fe fce5 	bl	800188c <HAL_GetTickPrio>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe fc87 	bl	80017d8 <HAL_InitTick>
 8002eca:	4603      	mov	r3, r0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	58004000 	.word	0x58004000
 8002ed8:	20000008 	.word	0x20000008

08002edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee2:	f7ff f9fa 	bl	80022da <LL_RCC_GetSysClkSource>
 8002ee6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002eee:	f7ff f9b6 	bl	800225e <LL_RCC_MSI_GetRange>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e04b      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d102      	bne.n	8002f10 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f0a:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	e045      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d10a      	bne.n	8002f2c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f16:	f7fe ffcf 	bl	8001eb8 <LL_RCC_HSE_IsEnabledDiv2>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d102      	bne.n	8002f26 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	e03a      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e037      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f2c:	f7ff fab9 	bl	80024a2 <LL_RCC_PLL_GetMainSource>
 8002f30:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d003      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x64>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x6a>
 8002f3e:	e00d      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f42:	60bb      	str	r3, [r7, #8]
        break;
 8002f44:	e015      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f46:	f7fe ffb7 	bl	8001eb8 <LL_RCC_HSE_IsEnabledDiv2>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d102      	bne.n	8002f56 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f52:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f54:	e00d      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f58:	60bb      	str	r3, [r7, #8]
        break;
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f5c:	f7ff f97f 	bl	800225e <LL_RCC_MSI_GetRange>
 8002f60:	4603      	mov	r3, r0
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	60bb      	str	r3, [r7, #8]
        break;
 8002f70:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002f72:	f7ff fa71 	bl	8002458 <LL_RCC_PLL_GetN>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	fb03 f402 	mul.w	r4, r3, r2
 8002f7e:	f7ff fa84 	bl	800248a <LL_RCC_PLL_GetDivider>
 8002f82:	4603      	mov	r3, r0
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	3301      	adds	r3, #1
 8002f88:	fbb4 f4f3 	udiv	r4, r4, r3
 8002f8c:	f7ff fa71 	bl	8002472 <LL_RCC_PLL_GetR>
 8002f90:	4603      	mov	r3, r0
 8002f92:	0f5b      	lsrs	r3, r3, #29
 8002f94:	3301      	adds	r3, #1
 8002f96:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f9a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	0800836c 	.word	0x0800836c
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	01e84800 	.word	0x01e84800

08002fb4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b598      	push	{r3, r4, r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002fb8:	f7ff ff90 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	f7ff fa01 	bl	80023c4 <LL_RCC_GetAHBPrescaler>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd98      	pop	{r3, r4, r7, pc}
 8002fd8:	0800832c 	.word	0x0800832c

08002fdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2bb0      	cmp	r3, #176	; 0xb0
 8002fe8:	d903      	bls.n	8002ff2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	e007      	b.n	8003002 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	4a11      	ldr	r2, [pc, #68]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003000:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003002:	f7ff f9eb 	bl	80023dc <LL_RCC_GetAHB4Prescaler>
 8003006:	4603      	mov	r3, r0
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	0c9c      	lsrs	r4, r3, #18
 8003026:	f7fe ff39 	bl	8001e9c <HAL_PWREx_GetVoltageRange>
 800302a:	4603      	mov	r3, r0
 800302c:	4619      	mov	r1, r3
 800302e:	4620      	mov	r0, r4
 8003030:	f000 f80c 	bl	800304c <RCC_SetFlashLatency>
 8003034:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}
 800303e:	bf00      	nop
 8003040:	0800836c 	.word	0x0800836c
 8003044:	0800832c 	.word	0x0800832c
 8003048:	431bde83 	.word	0x431bde83

0800304c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b093      	sub	sp, #76	; 0x4c
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003056:	4b37      	ldr	r3, [pc, #220]	; (8003134 <RCC_SetFlashLatency+0xe8>)
 8003058:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800305c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800305e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003062:	4a35      	ldr	r2, [pc, #212]	; (8003138 <RCC_SetFlashLatency+0xec>)
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	ca07      	ldmia	r2, {r0, r1, r2}
 800306a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <RCC_SetFlashLatency+0xf0>)
 8003070:	f107 040c 	add.w	r4, r7, #12
 8003074:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003076:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800307a:	2300      	movs	r3, #0
 800307c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d11a      	bne.n	80030bc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003086:	2300      	movs	r3, #0
 8003088:	643b      	str	r3, [r7, #64]	; 0x40
 800308a:	e013      	b.n	80030b4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	3348      	adds	r3, #72	; 0x48
 8003092:	443b      	add	r3, r7
 8003094:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d807      	bhi.n	80030ae <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3348      	adds	r3, #72	; 0x48
 80030a4:	443b      	add	r3, r7
 80030a6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80030aa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80030ac:	e020      	b.n	80030f0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b0:	3301      	adds	r3, #1
 80030b2:	643b      	str	r3, [r7, #64]	; 0x40
 80030b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d9e8      	bls.n	800308c <RCC_SetFlashLatency+0x40>
 80030ba:	e019      	b.n	80030f0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030bc:	2300      	movs	r3, #0
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c0:	e013      	b.n	80030ea <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80030c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3348      	adds	r3, #72	; 0x48
 80030c8:	443b      	add	r3, r7
 80030ca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d807      	bhi.n	80030e4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80030d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	3348      	adds	r3, #72	; 0x48
 80030da:	443b      	add	r3, r7
 80030dc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80030e0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80030e2:	e005      	b.n	80030f0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e6:	3301      	adds	r3, #1
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d9e8      	bls.n	80030c2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <RCC_SetFlashLatency+0xf4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 0207 	bic.w	r2, r3, #7
 80030f8:	4911      	ldr	r1, [pc, #68]	; (8003140 <RCC_SetFlashLatency+0xf4>)
 80030fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003100:	f7fe fbb8 	bl	8001874 <HAL_GetTick>
 8003104:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003106:	e008      	b.n	800311a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003108:	f7fe fbb4 	bl	8001874 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e007      	b.n	800312a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <RCC_SetFlashLatency+0xf4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003124:	429a      	cmp	r2, r3
 8003126:	d1ef      	bne.n	8003108 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	374c      	adds	r7, #76	; 0x4c
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}
 8003132:	bf00      	nop
 8003134:	08008300 	.word	0x08008300
 8003138:	08008310 	.word	0x08008310
 800313c:	0800831c 	.word	0x0800831c
 8003140:	58004000 	.word	0x58004000

08003144 <LL_RCC_LSE_IsEnabled>:
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <LL_RCC_LSE_IsEnabled+0x18>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <LL_RCC_LSE_IsEnabled+0x1a>
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_RCC_LSE_IsReady>:
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800316c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d101      	bne.n	8003180 <LL_RCC_LSE_IsReady+0x18>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <LL_RCC_LSE_IsReady+0x1a>
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_RCC_SetRFWKPClockSource>:
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_SetSMPSClockSource>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_RCC_SetSMPSPrescaler>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_RCC_SetUSARTClockSource>:
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f023 0203 	bic.w	r2, r3, #3
 800321c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_RCC_SetLPUARTClockSource>:
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_RCC_SetI2CClockSource>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003278:	43db      	mvns	r3, r3
 800327a:	401a      	ands	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_RCC_SetLPTIMClockSource>:
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	43db      	mvns	r3, r3
 80032b2:	401a      	ands	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <LL_RCC_SetSAIClockSource>:
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80032d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_RCC_SetRNGClockSource>:
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800330e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <LL_RCC_SetCLK48ClockSource>:
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800332e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800333a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_RCC_SetUSBClockSource>:
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ffe3 	bl	8003326 <LL_RCC_SetCLK48ClockSource>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <LL_RCC_SetADCClockSource>:
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800337c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_RCC_SetRTCClockSource>:
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_RCC_GetRTCClockSource>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <LL_RCC_ForceBackupDomainReset>:
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_RCC_ReleaseBackupDomainReset>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800340c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <LL_RCC_PLLSAI1_Enable>:
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800342c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003430:	6013      	str	r3, [r2, #0]
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_RCC_PLLSAI1_Disable>:
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800344a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <LL_RCC_PLLSAI1_IsReady>:
{
 800345a:	b480      	push	{r7}
 800345c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800345e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800346c:	d101      	bne.n	8003472 <LL_RCC_PLLSAI1_IsReady+0x18>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b088      	sub	sp, #32
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003486:	2300      	movs	r3, #0
 8003488:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800348a:	2300      	movs	r3, #0
 800348c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d034      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034a2:	d021      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80034a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034a8:	d81b      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ae:	d01d      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80034b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034b4:	d815      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80034ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034be:	d110      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80034d0:	e00d      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f947 	bl	800376a <RCCEx_PLLSAI1_ConfigNP>
 80034dc:	4603      	mov	r3, r0
 80034de:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80034e0:	e005      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	77fb      	strb	r3, [r7, #31]
        break;
 80034e6:	e002      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80034ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ee:	7ffb      	ldrb	r3, [r7, #31]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fee8 	bl	80032ce <LL_RCC_SetSAIClockSource>
 80034fe:	e001      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	7ffb      	ldrb	r3, [r7, #31]
 8003502:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350c:	2b00      	cmp	r3, #0
 800350e:	d046      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003510:	f7ff ff56 	bl	80033c0 <LL_RCC_GetRTCClockSource>
 8003514:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	429a      	cmp	r2, r3
 800351e:	d03c      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003520:	f7fe fcac 	bl	8001e7c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff30 	bl	8003394 <LL_RCC_SetRTCClockSource>
 8003534:	e02e      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003540:	f7ff ff4b 	bl	80033da <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003544:	f7ff ff5a 	bl	80033fc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003560:	f7ff fdf0 	bl	8003144 <LL_RCC_LSE_IsEnabled>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d114      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800356a:	f7fe f983 	bl	8001874 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003570:	e00b      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fe f97f 	bl	8001874 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d902      	bls.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	77fb      	strb	r3, [r7, #31]
              break;
 8003588:	e004      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800358a:	f7ff fded 	bl	8003168 <LL_RCC_LSE_IsReady>
 800358e:	4603      	mov	r3, r0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d1ee      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003594:	7ffb      	ldrb	r3, [r7, #31]
 8003596:	77bb      	strb	r3, [r7, #30]
 8003598:	e001      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	7ffb      	ldrb	r3, [r7, #31]
 800359c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fe2a 	bl	8003208 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d004      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fe35 	bl	8003234 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fe5d 	bl	800329a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fe52 	bl	800329a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fe2a 	bl	8003260 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fe1f 	bl	8003260 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d022      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fe8d 	bl	8003352 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003640:	d107      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800364c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003650:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800365a:	d10b      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f8dd 	bl	8003820 <RCCEx_PLLSAI1_ConfigNQ>
 8003666:	4603      	mov	r3, r0
 8003668:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800366a:	7ffb      	ldrb	r3, [r7, #31]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003670:	7ffb      	ldrb	r3, [r7, #31]
 8003672:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367c:	2b00      	cmp	r3, #0
 800367e:	d02b      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d008      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003692:	d003      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fe2a 	bl	80032fa <LL_RCC_SetRNGClockSource>
 80036a6:	e00a      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x240>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	2000      	movs	r0, #0
 80036b4:	f7ff fe21 	bl	80032fa <LL_RCC_SetRNGClockSource>
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f7ff fe34 	bl	8003326 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80036c6:	d107      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80036c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d022      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fe3d 	bl	8003368 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f6:	d107      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003710:	d10b      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f8dd 	bl	80038d6 <RCCEx_PLLSAI1_ConfigNR>
 800371c:	4603      	mov	r3, r0
 800371e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003720:	7ffb      	ldrb	r3, [r7, #31]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003726:	7ffb      	ldrb	r3, [r7, #31]
 8003728:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fd26 	bl	800318c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d009      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fd45 	bl	80031e0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fd2c 	bl	80031b8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003760:	7fbb      	ldrb	r3, [r7, #30]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003776:	f7ff fe61 	bl	800343c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800377a:	f7fe f87b 	bl	8001874 <HAL_GetTick>
 800377e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003780:	e009      	b.n	8003796 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003782:	f7fe f877 	bl	8001874 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d902      	bls.n	8003796 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e004      	b.n	80037a0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003796:	f7ff fe60 	bl	800345a <LL_RCC_PLLSAI1_IsReady>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d137      	bne.n	8003816 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ba:	4313      	orrs	r3, r2
 80037bc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80037be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d0:	4313      	orrs	r3, r2
 80037d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80037d4:	f7ff fe23 	bl	800341e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d8:	f7fe f84c 	bl	8001874 <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037de:	e009      	b.n	80037f4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037e0:	f7fe f848 	bl	8001874 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d902      	bls.n	80037f4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	73fb      	strb	r3, [r7, #15]
        break;
 80037f2:	e004      	b.n	80037fe <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037f4:	f7ff fe31 	bl	800345a <LL_RCC_PLLSAI1_IsReady>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d1f0      	bne.n	80037e0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d108      	bne.n	8003816 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003812:	4313      	orrs	r3, r2
 8003814:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003816:	7bfb      	ldrb	r3, [r7, #15]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800382c:	f7ff fe06 	bl	800343c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003830:	f7fe f820 	bl	8001874 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003836:	e009      	b.n	800384c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003838:	f7fe f81c 	bl	8001874 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	73fb      	strb	r3, [r7, #15]
      break;
 800384a:	e004      	b.n	8003856 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800384c:	f7ff fe05 	bl	800345a <LL_RCC_PLLSAI1_IsReady>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d137      	bne.n	80038cc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003870:	4313      	orrs	r3, r2
 8003872:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003886:	4313      	orrs	r3, r2
 8003888:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800388a:	f7ff fdc8 	bl	800341e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388e:	f7fd fff1 	bl	8001874 <HAL_GetTick>
 8003892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003894:	e009      	b.n	80038aa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003896:	f7fd ffed 	bl	8001874 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d902      	bls.n	80038aa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	73fb      	strb	r3, [r7, #15]
        break;
 80038a8:	e004      	b.n	80038b4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038aa:	f7ff fdd6 	bl	800345a <LL_RCC_PLLSAI1_IsReady>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d1f0      	bne.n	8003896 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c8:	4313      	orrs	r3, r2
 80038ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80038e2:	f7ff fdab 	bl	800343c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038e6:	f7fd ffc5 	bl	8001874 <HAL_GetTick>
 80038ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038ec:	e009      	b.n	8003902 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ee:	f7fd ffc1 	bl	8001874 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d902      	bls.n	8003902 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e004      	b.n	800390c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003902:	f7ff fdaa 	bl	800345a <LL_RCC_PLLSAI1_IsReady>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d137      	bne.n	8003982 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800392a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393c:	4313      	orrs	r3, r2
 800393e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003940:	f7ff fd6d 	bl	800341e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003944:	f7fd ff96 	bl	8001874 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800394a:	e009      	b.n	8003960 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800394c:	f7fd ff92 	bl	8001874 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d902      	bls.n	8003960 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	73fb      	strb	r3, [r7, #15]
        break;
 800395e:	e004      	b.n	800396a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003960:	f7ff fd7b 	bl	800345a <LL_RCC_PLLSAI1_IsReady>
 8003964:	4603      	mov	r3, r0
 8003966:	2b01      	cmp	r3, #1
 8003968:	d1f0      	bne.n	800394c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800397e:	4313      	orrs	r3, r2
 8003980:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e09f      	b.n	8003ade <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fcd2 	bl	800135c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80039c0:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <HAL_RTC_Init+0x15c>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d07e      	beq.n	8003aca <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	22ca      	movs	r2, #202	; 0xca
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2253      	movs	r2, #83	; 0x53
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fa1d 	bl	8003e1c <RTC_EnterInitMode>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	22ff      	movs	r2, #255	; 0xff
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2204      	movs	r2, #4
 80039f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e067      	b.n	8003ace <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a10:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68d2      	ldr	r2, [r2, #12]
 8003a38:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6919      	ldr	r1, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	041a      	lsls	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a5c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0203 	bic.w	r2, r2, #3
 8003a6c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d113      	bne.n	8003abc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f99b 	bl	8003dd0 <HAL_RTC_WaitForSynchro>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	22ff      	movs	r2, #255	; 0xff
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e010      	b.n	8003ade <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
 8003ac8:	e001      	b.n	8003ace <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d103      	bne.n	8003adc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40002800 	.word	0x40002800

08003aec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_RTC_SetTime+0x1a>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e0b2      	b.n	8003c6c <HAL_RTC_SetTime+0x180>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d126      	bne.n	8003b6a <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f99b 	bl	8003e70 <RTC_ByteToBcd2>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f994 	bl	8003e70 <RTC_ByteToBcd2>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b4c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	789b      	ldrb	r3, [r3, #2]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f98c 	bl	8003e70 <RTC_ByteToBcd2>
 8003b58:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003b5a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	78db      	ldrb	r3, [r3, #3]
 8003b62:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	e018      	b.n	8003b9c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b8a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003b90:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	78db      	ldrb	r3, [r3, #3]
 8003b96:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	22ca      	movs	r2, #202	; 0xca
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2253      	movs	r2, #83	; 0x53
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f935 	bl	8003e1c <RTC_EnterInitMode>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e04b      	b.n	8003c6c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003bde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003be2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bf2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6899      	ldr	r1, [r3, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d113      	bne.n	8003c52 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f8d0 	bl	8003dd0 <HAL_RTC_WaitForSynchro>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2204      	movs	r2, #4
 8003c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00c      	b.n	8003c6c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	22ff      	movs	r2, #255	; 0xff
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
  }
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd90      	pop	{r4, r7, pc}

08003c74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_RTC_SetDate+0x1a>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e09c      	b.n	8003dc8 <HAL_RTC_SetDate+0x154>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_RTC_SetDate+0x4e>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	785b      	ldrb	r3, [r3, #1]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	785b      	ldrb	r3, [r3, #1]
 8003cb4:	f023 0310 	bic.w	r3, r3, #16
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	330a      	adds	r3, #10
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11c      	bne.n	8003d02 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	78db      	ldrb	r3, [r3, #3]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f8cf 	bl	8003e70 <RTC_ByteToBcd2>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f8c8 	bl	8003e70 <RTC_ByteToBcd2>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003ce4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	789b      	ldrb	r3, [r3, #2]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f8c0 	bl	8003e70 <RTC_ByteToBcd2>
 8003cf0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003cf2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e00e      	b.n	8003d20 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	78db      	ldrb	r3, [r3, #3]
 8003d06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d0e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003d14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	22ca      	movs	r2, #202	; 0xca
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2253      	movs	r2, #83	; 0x53
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f873 	bl	8003e1c <RTC_EnterInitMode>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00d      	beq.n	8003d58 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	22ff      	movs	r2, #255	; 0xff
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2204      	movs	r2, #4
 8003d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e037      	b.n	8003dc8 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d66:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d113      	bne.n	8003dae <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f822 	bl	8003dd0 <HAL_RTC_WaitForSynchro>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	22ff      	movs	r2, #255	; 0xff
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e00c      	b.n	8003dc8 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	22ff      	movs	r2, #255	; 0xff
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd90      	pop	{r4, r7, pc}

08003dd0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003de6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003de8:	f7fd fd44 	bl	8001874 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dee:	e009      	b.n	8003e04 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003df0:	f7fd fd40 	bl	8001874 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dfe:	d901      	bls.n	8003e04 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e007      	b.n	8003e14 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ee      	beq.n	8003df0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d119      	bne.n	8003e66 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e3a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e3c:	f7fd fd1a 	bl	8001874 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e42:	e009      	b.n	8003e58 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e44:	f7fd fd16 	bl	8001874 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e52:	d901      	bls.n	8003e58 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e007      	b.n	8003e68 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ee      	beq.n	8003e44 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003e82:	e005      	b.n	8003e90 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003e8a:	7afb      	ldrb	r3, [r7, #11]
 8003e8c:	3b0a      	subs	r3, #10
 8003e8e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	2b09      	cmp	r3, #9
 8003e94:	d8f6      	bhi.n	8003e84 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	b2db      	uxtb	r3, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e0a8      	b.n	800401c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	22ca      	movs	r2, #202	; 0xca
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2253      	movs	r2, #83	; 0x53
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003ef8:	f7fd fcbc 	bl	8001874 <HAL_GetTick>
 8003efc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003efe:	e015      	b.n	8003f2c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f00:	f7fd fcb8 	bl	8001874 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f0e:	d90d      	bls.n	8003f2c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	22ff      	movs	r2, #255	; 0xff
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e077      	b.n	800401c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e2      	bne.n	8003f00 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f48:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003f5a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003f5c:	f7fd fc8a 	bl	8001874 <HAL_GetTick>
 8003f60:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003f62:	e015      	b.n	8003f90 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f64:	f7fd fc86 	bl	8001874 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f72:	d90d      	bls.n	8003f90 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	22ff      	movs	r2, #255	; 0xff
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e045      	b.n	800401c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0e2      	beq.n	8003f64 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0207 	bic.w	r2, r2, #7
 8003fb4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6899      	ldr	r1, [r3, #8]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003fc6:	4b17      	ldr	r3, [pc, #92]	; (8004024 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fcc:	4a15      	ldr	r2, [pc, #84]	; (8004024 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003fce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003fd6:	4b13      	ldr	r3, [pc, #76]	; (8004024 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fe0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004000:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	22ff      	movs	r2, #255	; 0xff
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	58000800 	.word	0x58000800

08004028 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f818 	bl	8004074 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004054:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004058:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800405c:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	58000800 	.word	0x58000800

08004074 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_RTCEx_SetRefClock+0x16>
 800409a:	2302      	movs	r3, #2
 800409c:	e040      	b.n	8004120 <HAL_RTCEx_SetRefClock+0x98>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	22ca      	movs	r2, #202	; 0xca
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2253      	movs	r2, #83	; 0x53
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff feac 	bl	8003e1c <RTC_EnterInitMode>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <HAL_RTCEx_SetRefClock+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	22ff      	movs	r2, #255	; 0xff
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2204      	movs	r2, #4
 80040d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e01c      	b.n	8004120 <HAL_RTCEx_SetRefClock+0x98>
  }
  else
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0210 	orr.w	r2, r2, #16
 80040f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004104:	60da      	str	r2, [r3, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	22ff      	movs	r2, #255	; 0xff
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e095      	b.n	8004266 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d108      	bne.n	8004154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414a:	d009      	beq.n	8004160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	e005      	b.n	8004160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd f940 	bl	8001400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004196:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a0:	d902      	bls.n	80041a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e002      	b.n	80041ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041b6:	d007      	beq.n	80041c8 <HAL_SPI_Init+0xa0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	ea42 0103 	orr.w	r1, r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	f003 0204 	and.w	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b088      	sub	sp, #32
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_SPI_Transmit+0x22>
 800428c:	2302      	movs	r3, #2
 800428e:	e158      	b.n	8004542 <HAL_SPI_Transmit+0x2d4>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004298:	f7fd faec 	bl	8001874 <HAL_GetTick>
 800429c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d002      	beq.n	80042b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b2:	e13d      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_SPI_Transmit+0x52>
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c4:	e134      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004310:	d10f      	bne.n	8004332 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d007      	beq.n	8004350 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004358:	d94b      	bls.n	80043f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Transmit+0xfa>
 8004362:	8afb      	ldrh	r3, [r7, #22]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d13e      	bne.n	80043e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	881a      	ldrh	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	1c9a      	adds	r2, r3, #2
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800438c:	e02b      	b.n	80043e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b02      	cmp	r3, #2
 800439a:	d112      	bne.n	80043c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	881a      	ldrh	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	1c9a      	adds	r2, r3, #2
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043c0:	e011      	b.n	80043e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c2:	f7fd fa57 	bl	8001874 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d803      	bhi.n	80043da <HAL_SPI_Transmit+0x16c>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d8:	d102      	bne.n	80043e0 <HAL_SPI_Transmit+0x172>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043e4:	e0a4      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ce      	bne.n	800438e <HAL_SPI_Transmit+0x120>
 80043f0:	e07c      	b.n	80044ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_Transmit+0x192>
 80043fa:	8afb      	ldrh	r3, [r7, #22]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d170      	bne.n	80044e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d912      	bls.n	8004430 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	881a      	ldrh	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	1c9a      	adds	r2, r3, #2
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b02      	subs	r3, #2
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800442e:	e058      	b.n	80044e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	7812      	ldrb	r2, [r2, #0]
 800443c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004456:	e044      	b.n	80044e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d12b      	bne.n	80044be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d912      	bls.n	8004496 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	881a      	ldrh	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	1c9a      	adds	r2, r3, #2
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b02      	subs	r3, #2
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004494:	e025      	b.n	80044e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044bc:	e011      	b.n	80044e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044be:	f7fd f9d9 	bl	8001874 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d803      	bhi.n	80044d6 <HAL_SPI_Transmit+0x268>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044d4:	d102      	bne.n	80044dc <HAL_SPI_Transmit+0x26e>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044e0:	e026      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1b5      	bne.n	8004458 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fce3 	bl	8004ebc <SPI_EndRxTxTransaction>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e000      	b.n	8004530 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800452e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004540:	7ffb      	ldrb	r3, [r7, #31]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b088      	sub	sp, #32
 800454e:	af02      	add	r7, sp, #8
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004566:	d112      	bne.n	800458e <HAL_SPI_Receive+0x44>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10e      	bne.n	800458e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2204      	movs	r2, #4
 8004574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	4613      	mov	r3, r2
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f910 	bl	80047aa <HAL_SPI_TransmitReceive>
 800458a:	4603      	mov	r3, r0
 800458c:	e109      	b.n	80047a2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_SPI_Receive+0x52>
 8004598:	2302      	movs	r3, #2
 800459a:	e102      	b.n	80047a2 <HAL_SPI_Receive+0x258>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a4:	f7fd f966 	bl	8001874 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d002      	beq.n	80045bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
 80045b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045ba:	e0e9      	b.n	8004790 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Receive+0x7e>
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045cc:	e0e0      	b.n	8004790 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2204      	movs	r2, #4
 80045d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	88fa      	ldrh	r2, [r7, #6]
 80045ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004618:	d908      	bls.n	800462c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	e007      	b.n	800463c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004644:	d10f      	bne.n	8004666 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004664:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d007      	beq.n	8004684 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004682:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800468c:	d867      	bhi.n	800475e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800468e:	e030      	b.n	80046f2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d117      	bne.n	80046ce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f103 020c 	add.w	r2, r3, #12
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80046cc:	e011      	b.n	80046f2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ce:	f7fd f8d1 	bl	8001874 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d803      	bhi.n	80046e6 <HAL_SPI_Receive+0x19c>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e4:	d102      	bne.n	80046ec <HAL_SPI_Receive+0x1a2>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d102      	bne.n	80046f2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046f0:	e04e      	b.n	8004790 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1c8      	bne.n	8004690 <HAL_SPI_Receive+0x146>
 80046fe:	e034      	b.n	800476a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	d115      	bne.n	800473a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	b292      	uxth	r2, r2
 800471a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	1c9a      	adds	r2, r3, #2
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004738:	e011      	b.n	800475e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800473a:	f7fd f89b 	bl	8001874 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d803      	bhi.n	8004752 <HAL_SPI_Receive+0x208>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004750:	d102      	bne.n	8004758 <HAL_SPI_Receive+0x20e>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800475c:	e018      	b.n	8004790 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1ca      	bne.n	8004700 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fb4c 	bl	8004e0c <SPI_EndRxTransaction>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
 800478c:	e000      	b.n	8004790 <HAL_SPI_Receive+0x246>
  }

error :
 800478e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b08a      	sub	sp, #40	; 0x28
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047b8:	2301      	movs	r3, #1
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x26>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e1fb      	b.n	8004bc8 <HAL_SPI_TransmitReceive+0x41e>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047d8:	f7fd f84c 	bl	8001874 <HAL_GetTick>
 80047dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047f0:	887b      	ldrh	r3, [r7, #2]
 80047f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047f4:	7efb      	ldrb	r3, [r7, #27]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d00e      	beq.n	8004818 <HAL_SPI_TransmitReceive+0x6e>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004800:	d106      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x66>
 800480a:	7efb      	ldrb	r3, [r7, #27]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d003      	beq.n	8004818 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004810:	2302      	movs	r3, #2
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004816:	e1cd      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_SPI_TransmitReceive+0x80>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_SPI_TransmitReceive+0x80>
 8004824:	887b      	ldrh	r3, [r7, #2]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004830:	e1c0      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b04      	cmp	r3, #4
 800483c:	d003      	beq.n	8004846 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2205      	movs	r2, #5
 8004842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	887a      	ldrh	r2, [r7, #2]
 8004856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	887a      	ldrh	r2, [r7, #2]
 800485e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	887a      	ldrh	r2, [r7, #2]
 800486c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	887a      	ldrh	r2, [r7, #2]
 8004872:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004888:	d802      	bhi.n	8004890 <HAL_SPI_TransmitReceive+0xe6>
 800488a:	8a3b      	ldrh	r3, [r7, #16]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d908      	bls.n	80048a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800489e:	605a      	str	r2, [r3, #4]
 80048a0:	e007      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d007      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048d8:	d97c      	bls.n	80049d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x13e>
 80048e2:	8a7b      	ldrh	r3, [r7, #18]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d169      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	881a      	ldrh	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	1c9a      	adds	r2, r3, #2
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800490c:	e056      	b.n	80049bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b02      	cmp	r3, #2
 800491a:	d11b      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x1aa>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d016      	beq.n	8004954 <HAL_SPI_TransmitReceive+0x1aa>
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2b01      	cmp	r3, #1
 800492a:	d113      	bne.n	8004954 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	881a      	ldrh	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	1c9a      	adds	r2, r3, #2
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b01      	cmp	r3, #1
 8004960:	d11c      	bne.n	800499c <HAL_SPI_TransmitReceive+0x1f2>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d016      	beq.n	800499c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	b292      	uxth	r2, r2
 800497a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	1c9a      	adds	r2, r3, #2
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004998:	2301      	movs	r3, #1
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800499c:	f7fc ff6a 	bl	8001874 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d807      	bhi.n	80049bc <HAL_SPI_TransmitReceive+0x212>
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b2:	d003      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80049ba:	e0fb      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1a3      	bne.n	800490e <HAL_SPI_TransmitReceive+0x164>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d19d      	bne.n	800490e <HAL_SPI_TransmitReceive+0x164>
 80049d2:	e0df      	b.n	8004b94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x23a>
 80049dc:	8a7b      	ldrh	r3, [r7, #18]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	f040 80cb 	bne.w	8004b7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d912      	bls.n	8004a14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	881a      	ldrh	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	1c9a      	adds	r2, r3, #2
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b02      	subs	r3, #2
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a12:	e0b2      	b.n	8004b7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a3a:	e09e      	b.n	8004b7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d134      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x30a>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d02f      	beq.n	8004ab4 <HAL_SPI_TransmitReceive+0x30a>
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d12c      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d912      	bls.n	8004a8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	1c9a      	adds	r2, r3, #2
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b02      	subs	r3, #2
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a88:	e012      	b.n	8004ab0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d148      	bne.n	8004b54 <HAL_SPI_TransmitReceive+0x3aa>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d042      	beq.n	8004b54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d923      	bls.n	8004b22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b02      	subs	r3, #2
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d81f      	bhi.n	8004b50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b1e:	605a      	str	r2, [r3, #4]
 8004b20:	e016      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f103 020c 	add.w	r2, r3, #12
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b50:	2301      	movs	r3, #1
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b54:	f7fc fe8e 	bl	8001874 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d803      	bhi.n	8004b6c <HAL_SPI_TransmitReceive+0x3c2>
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b6a:	d102      	bne.n	8004b72 <HAL_SPI_TransmitReceive+0x3c8>
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b78:	e01c      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f af5b 	bne.w	8004a3c <HAL_SPI_TransmitReceive+0x292>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f47f af54 	bne.w	8004a3c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f98f 	bl	8004ebc <SPI_EndRxTxTransaction>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d006      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	661a      	str	r2, [r3, #96]	; 0x60
 8004bb0:	e000      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3728      	adds	r7, #40	; 0x28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004be0:	f7fc fe48 	bl	8001874 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	4413      	add	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bf0:	f7fc fe40 	bl	8001874 <HAL_GetTick>
 8004bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bf6:	4b39      	ldr	r3, [pc, #228]	; (8004cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	015b      	lsls	r3, r3, #5
 8004bfc:	0d1b      	lsrs	r3, r3, #20
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c06:	e054      	b.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c0e:	d050      	beq.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c10:	f7fc fe30 	bl	8001874 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d902      	bls.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d13d      	bne.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3e:	d111      	bne.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c48:	d004      	beq.n	8004c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c52:	d107      	bne.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6c:	d10f      	bne.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e017      	b.n	8004cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d19b      	bne.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000008 	.word	0x20000008

08004ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	; 0x28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cf2:	f7fc fdbf 	bl	8001874 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	4413      	add	r3, r2
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004d02:	f7fc fdb7 	bl	8001874 <HAL_GetTick>
 8004d06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d10:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	00da      	lsls	r2, r3, #3
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	0d1b      	lsrs	r3, r3, #20
 8004d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d28:	e060      	b.n	8004dec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d30:	d107      	bne.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d48:	d050      	beq.n	8004dec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d4a:	f7fc fd93 	bl	8001874 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d902      	bls.n	8004d60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d13d      	bne.n	8004ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d78:	d111      	bne.n	8004d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d82:	d004      	beq.n	8004d8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d107      	bne.n	8004d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da6:	d10f      	bne.n	8004dc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e010      	b.n	8004dfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d196      	bne.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3728      	adds	r7, #40	; 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000008 	.word	0x20000008

08004e0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e20:	d111      	bne.n	8004e46 <SPI_EndRxTransaction+0x3a>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2a:	d004      	beq.n	8004e36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e34:	d107      	bne.n	8004e46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2180      	movs	r1, #128	; 0x80
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff febd 	bl	8004bd0 <SPI_WaitFlagStateUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e023      	b.n	8004eb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e74:	d11d      	bne.n	8004eb2 <SPI_EndRxTransaction+0xa6>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7e:	d004      	beq.n	8004e8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e88:	d113      	bne.n	8004eb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7ff ff22 	bl	8004ce0 <SPI_WaitFifoStateUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea6:	f043 0220 	orr.w	r2, r3, #32
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e000      	b.n	8004eb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff ff03 	bl	8004ce0 <SPI_WaitFifoStateUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e027      	b.n	8004f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff fe68 	bl	8004bd0 <SPI_WaitFlagStateUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e014      	b.n	8004f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fedc 	bl	8004ce0 <SPI_WaitFifoStateUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e000      	b.n	8004f40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e049      	b.n	8004fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fa76 	bl	8001460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 f8fe 	bl	8005188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_TIM_ConfigClockSource+0x1c>
 800500e:	2302      	movs	r3, #2
 8005010:	e0b6      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x18a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005030:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005034:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800503c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504e:	d03e      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0xd8>
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005054:	f200 8087 	bhi.w	8005166 <HAL_TIM_ConfigClockSource+0x170>
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505c:	f000 8086 	beq.w	800516c <HAL_TIM_ConfigClockSource+0x176>
 8005060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005064:	d87f      	bhi.n	8005166 <HAL_TIM_ConfigClockSource+0x170>
 8005066:	2b70      	cmp	r3, #112	; 0x70
 8005068:	d01a      	beq.n	80050a0 <HAL_TIM_ConfigClockSource+0xaa>
 800506a:	2b70      	cmp	r3, #112	; 0x70
 800506c:	d87b      	bhi.n	8005166 <HAL_TIM_ConfigClockSource+0x170>
 800506e:	2b60      	cmp	r3, #96	; 0x60
 8005070:	d050      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0x11e>
 8005072:	2b60      	cmp	r3, #96	; 0x60
 8005074:	d877      	bhi.n	8005166 <HAL_TIM_ConfigClockSource+0x170>
 8005076:	2b50      	cmp	r3, #80	; 0x50
 8005078:	d03c      	beq.n	80050f4 <HAL_TIM_ConfigClockSource+0xfe>
 800507a:	2b50      	cmp	r3, #80	; 0x50
 800507c:	d873      	bhi.n	8005166 <HAL_TIM_ConfigClockSource+0x170>
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d058      	beq.n	8005134 <HAL_TIM_ConfigClockSource+0x13e>
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d86f      	bhi.n	8005166 <HAL_TIM_ConfigClockSource+0x170>
 8005086:	2b30      	cmp	r3, #48	; 0x30
 8005088:	d064      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x15e>
 800508a:	2b30      	cmp	r3, #48	; 0x30
 800508c:	d86b      	bhi.n	8005166 <HAL_TIM_ConfigClockSource+0x170>
 800508e:	2b20      	cmp	r3, #32
 8005090:	d060      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x15e>
 8005092:	2b20      	cmp	r3, #32
 8005094:	d867      	bhi.n	8005166 <HAL_TIM_ConfigClockSource+0x170>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d05c      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x15e>
 800509a:	2b10      	cmp	r3, #16
 800509c:	d05a      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0x15e>
 800509e:	e062      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6899      	ldr	r1, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f000 f94a 	bl	8005348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]
      break;
 80050cc:	e04f      	b.n	800516e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6899      	ldr	r1, [r3, #8]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f000 f933 	bl	8005348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f0:	609a      	str	r2, [r3, #8]
      break;
 80050f2:	e03c      	b.n	800516e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6859      	ldr	r1, [r3, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	461a      	mov	r2, r3
 8005102:	f000 f8a5 	bl	8005250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2150      	movs	r1, #80	; 0x50
 800510c:	4618      	mov	r0, r3
 800510e:	f000 f8fe 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8005112:	e02c      	b.n	800516e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6859      	ldr	r1, [r3, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	461a      	mov	r2, r3
 8005122:	f000 f8c4 	bl	80052ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2160      	movs	r1, #96	; 0x60
 800512c:	4618      	mov	r0, r3
 800512e:	f000 f8ee 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8005132:	e01c      	b.n	800516e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	461a      	mov	r2, r3
 8005142:	f000 f885 	bl	8005250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2140      	movs	r1, #64	; 0x40
 800514c:	4618      	mov	r0, r3
 800514e:	f000 f8de 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8005152:	e00c      	b.n	800516e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 f8d5 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8005164:	e003      	b.n	800516e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	73fb      	strb	r3, [r7, #15]
      break;
 800516a:	e000      	b.n	800516e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800516c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <TIM_Base_SetConfig+0xbc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_Base_SetConfig+0x20>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a6:	d108      	bne.n	80051ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a21      	ldr	r2, [pc, #132]	; (8005244 <TIM_Base_SetConfig+0xbc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00b      	beq.n	80051da <TIM_Base_SetConfig+0x52>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d007      	beq.n	80051da <TIM_Base_SetConfig+0x52>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <TIM_Base_SetConfig+0xc0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d003      	beq.n	80051da <TIM_Base_SetConfig+0x52>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1d      	ldr	r2, [pc, #116]	; (800524c <TIM_Base_SetConfig+0xc4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d108      	bne.n	80051ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <TIM_Base_SetConfig+0xbc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d007      	beq.n	8005228 <TIM_Base_SetConfig+0xa0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a0b      	ldr	r2, [pc, #44]	; (8005248 <TIM_Base_SetConfig+0xc0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <TIM_Base_SetConfig+0xa0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a0a      	ldr	r2, [pc, #40]	; (800524c <TIM_Base_SetConfig+0xc4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d103      	bne.n	8005230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	615a      	str	r2, [r3, #20]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800

08005250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 030a 	bic.w	r3, r3, #10
 800528c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0210 	bic.w	r2, r3, #16
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	f043 0307 	orr.w	r3, r3, #7
 8005334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	021a      	lsls	r2, r3, #8
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	431a      	orrs	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4313      	orrs	r3, r2
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	609a      	str	r2, [r3, #8]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800539c:	2302      	movs	r3, #2
 800539e:	e04a      	b.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a12      	ldr	r2, [pc, #72]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005408:	d10c      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4313      	orrs	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40012c00 	.word	0x40012c00

08005448 <__errno>:
 8005448:	4b01      	ldr	r3, [pc, #4]	; (8005450 <__errno+0x8>)
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20000014 	.word	0x20000014

08005454 <__sflush_r>:
 8005454:	898a      	ldrh	r2, [r1, #12]
 8005456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545a:	4605      	mov	r5, r0
 800545c:	0710      	lsls	r0, r2, #28
 800545e:	460c      	mov	r4, r1
 8005460:	d458      	bmi.n	8005514 <__sflush_r+0xc0>
 8005462:	684b      	ldr	r3, [r1, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	dc05      	bgt.n	8005474 <__sflush_r+0x20>
 8005468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	dc02      	bgt.n	8005474 <__sflush_r+0x20>
 800546e:	2000      	movs	r0, #0
 8005470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005476:	2e00      	cmp	r6, #0
 8005478:	d0f9      	beq.n	800546e <__sflush_r+0x1a>
 800547a:	2300      	movs	r3, #0
 800547c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005480:	682f      	ldr	r7, [r5, #0]
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	d032      	beq.n	80054ec <__sflush_r+0x98>
 8005486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	075a      	lsls	r2, r3, #29
 800548c:	d505      	bpl.n	800549a <__sflush_r+0x46>
 800548e:	6863      	ldr	r3, [r4, #4]
 8005490:	1ac0      	subs	r0, r0, r3
 8005492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005494:	b10b      	cbz	r3, 800549a <__sflush_r+0x46>
 8005496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005498:	1ac0      	subs	r0, r0, r3
 800549a:	2300      	movs	r3, #0
 800549c:	4602      	mov	r2, r0
 800549e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054a0:	6a21      	ldr	r1, [r4, #32]
 80054a2:	4628      	mov	r0, r5
 80054a4:	47b0      	blx	r6
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	d106      	bne.n	80054ba <__sflush_r+0x66>
 80054ac:	6829      	ldr	r1, [r5, #0]
 80054ae:	291d      	cmp	r1, #29
 80054b0:	d82c      	bhi.n	800550c <__sflush_r+0xb8>
 80054b2:	4a2a      	ldr	r2, [pc, #168]	; (800555c <__sflush_r+0x108>)
 80054b4:	40ca      	lsrs	r2, r1
 80054b6:	07d6      	lsls	r6, r2, #31
 80054b8:	d528      	bpl.n	800550c <__sflush_r+0xb8>
 80054ba:	2200      	movs	r2, #0
 80054bc:	6062      	str	r2, [r4, #4]
 80054be:	04d9      	lsls	r1, r3, #19
 80054c0:	6922      	ldr	r2, [r4, #16]
 80054c2:	6022      	str	r2, [r4, #0]
 80054c4:	d504      	bpl.n	80054d0 <__sflush_r+0x7c>
 80054c6:	1c42      	adds	r2, r0, #1
 80054c8:	d101      	bne.n	80054ce <__sflush_r+0x7a>
 80054ca:	682b      	ldr	r3, [r5, #0]
 80054cc:	b903      	cbnz	r3, 80054d0 <__sflush_r+0x7c>
 80054ce:	6560      	str	r0, [r4, #84]	; 0x54
 80054d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d2:	602f      	str	r7, [r5, #0]
 80054d4:	2900      	cmp	r1, #0
 80054d6:	d0ca      	beq.n	800546e <__sflush_r+0x1a>
 80054d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054dc:	4299      	cmp	r1, r3
 80054de:	d002      	beq.n	80054e6 <__sflush_r+0x92>
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 fa21 	bl	8005928 <_free_r>
 80054e6:	2000      	movs	r0, #0
 80054e8:	6360      	str	r0, [r4, #52]	; 0x34
 80054ea:	e7c1      	b.n	8005470 <__sflush_r+0x1c>
 80054ec:	6a21      	ldr	r1, [r4, #32]
 80054ee:	2301      	movs	r3, #1
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b0      	blx	r6
 80054f4:	1c41      	adds	r1, r0, #1
 80054f6:	d1c7      	bne.n	8005488 <__sflush_r+0x34>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0c4      	beq.n	8005488 <__sflush_r+0x34>
 80054fe:	2b1d      	cmp	r3, #29
 8005500:	d001      	beq.n	8005506 <__sflush_r+0xb2>
 8005502:	2b16      	cmp	r3, #22
 8005504:	d101      	bne.n	800550a <__sflush_r+0xb6>
 8005506:	602f      	str	r7, [r5, #0]
 8005508:	e7b1      	b.n	800546e <__sflush_r+0x1a>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	e7ad      	b.n	8005470 <__sflush_r+0x1c>
 8005514:	690f      	ldr	r7, [r1, #16]
 8005516:	2f00      	cmp	r7, #0
 8005518:	d0a9      	beq.n	800546e <__sflush_r+0x1a>
 800551a:	0793      	lsls	r3, r2, #30
 800551c:	680e      	ldr	r6, [r1, #0]
 800551e:	bf08      	it	eq
 8005520:	694b      	ldreq	r3, [r1, #20]
 8005522:	600f      	str	r7, [r1, #0]
 8005524:	bf18      	it	ne
 8005526:	2300      	movne	r3, #0
 8005528:	eba6 0807 	sub.w	r8, r6, r7
 800552c:	608b      	str	r3, [r1, #8]
 800552e:	f1b8 0f00 	cmp.w	r8, #0
 8005532:	dd9c      	ble.n	800546e <__sflush_r+0x1a>
 8005534:	6a21      	ldr	r1, [r4, #32]
 8005536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005538:	4643      	mov	r3, r8
 800553a:	463a      	mov	r2, r7
 800553c:	4628      	mov	r0, r5
 800553e:	47b0      	blx	r6
 8005540:	2800      	cmp	r0, #0
 8005542:	dc06      	bgt.n	8005552 <__sflush_r+0xfe>
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800554a:	81a3      	strh	r3, [r4, #12]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005550:	e78e      	b.n	8005470 <__sflush_r+0x1c>
 8005552:	4407      	add	r7, r0
 8005554:	eba8 0800 	sub.w	r8, r8, r0
 8005558:	e7e9      	b.n	800552e <__sflush_r+0xda>
 800555a:	bf00      	nop
 800555c:	20400001 	.word	0x20400001

08005560 <_fflush_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	690b      	ldr	r3, [r1, #16]
 8005564:	4605      	mov	r5, r0
 8005566:	460c      	mov	r4, r1
 8005568:	b913      	cbnz	r3, 8005570 <_fflush_r+0x10>
 800556a:	2500      	movs	r5, #0
 800556c:	4628      	mov	r0, r5
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	b118      	cbz	r0, 800557a <_fflush_r+0x1a>
 8005572:	6983      	ldr	r3, [r0, #24]
 8005574:	b90b      	cbnz	r3, 800557a <_fflush_r+0x1a>
 8005576:	f000 f887 	bl	8005688 <__sinit>
 800557a:	4b14      	ldr	r3, [pc, #80]	; (80055cc <_fflush_r+0x6c>)
 800557c:	429c      	cmp	r4, r3
 800557e:	d11b      	bne.n	80055b8 <_fflush_r+0x58>
 8005580:	686c      	ldr	r4, [r5, #4]
 8005582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0ef      	beq.n	800556a <_fflush_r+0xa>
 800558a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800558c:	07d0      	lsls	r0, r2, #31
 800558e:	d404      	bmi.n	800559a <_fflush_r+0x3a>
 8005590:	0599      	lsls	r1, r3, #22
 8005592:	d402      	bmi.n	800559a <_fflush_r+0x3a>
 8005594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005596:	f000 f93a 	bl	800580e <__retarget_lock_acquire_recursive>
 800559a:	4628      	mov	r0, r5
 800559c:	4621      	mov	r1, r4
 800559e:	f7ff ff59 	bl	8005454 <__sflush_r>
 80055a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055a4:	07da      	lsls	r2, r3, #31
 80055a6:	4605      	mov	r5, r0
 80055a8:	d4e0      	bmi.n	800556c <_fflush_r+0xc>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	059b      	lsls	r3, r3, #22
 80055ae:	d4dd      	bmi.n	800556c <_fflush_r+0xc>
 80055b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b2:	f000 f92d 	bl	8005810 <__retarget_lock_release_recursive>
 80055b6:	e7d9      	b.n	800556c <_fflush_r+0xc>
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <_fflush_r+0x70>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d101      	bne.n	80055c2 <_fflush_r+0x62>
 80055be:	68ac      	ldr	r4, [r5, #8]
 80055c0:	e7df      	b.n	8005582 <_fflush_r+0x22>
 80055c2:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <_fflush_r+0x74>)
 80055c4:	429c      	cmp	r4, r3
 80055c6:	bf08      	it	eq
 80055c8:	68ec      	ldreq	r4, [r5, #12]
 80055ca:	e7da      	b.n	8005582 <_fflush_r+0x22>
 80055cc:	080083cc 	.word	0x080083cc
 80055d0:	080083ec 	.word	0x080083ec
 80055d4:	080083ac 	.word	0x080083ac

080055d8 <std>:
 80055d8:	2300      	movs	r3, #0
 80055da:	b510      	push	{r4, lr}
 80055dc:	4604      	mov	r4, r0
 80055de:	e9c0 3300 	strd	r3, r3, [r0]
 80055e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055e6:	6083      	str	r3, [r0, #8]
 80055e8:	8181      	strh	r1, [r0, #12]
 80055ea:	6643      	str	r3, [r0, #100]	; 0x64
 80055ec:	81c2      	strh	r2, [r0, #14]
 80055ee:	6183      	str	r3, [r0, #24]
 80055f0:	4619      	mov	r1, r3
 80055f2:	2208      	movs	r2, #8
 80055f4:	305c      	adds	r0, #92	; 0x5c
 80055f6:	f000 f98f 	bl	8005918 <memset>
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <std+0x38>)
 80055fc:	6263      	str	r3, [r4, #36]	; 0x24
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <std+0x3c>)
 8005600:	62a3      	str	r3, [r4, #40]	; 0x28
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <std+0x40>)
 8005604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <std+0x44>)
 8005608:	6224      	str	r4, [r4, #32]
 800560a:	6323      	str	r3, [r4, #48]	; 0x30
 800560c:	bd10      	pop	{r4, pc}
 800560e:	bf00      	nop
 8005610:	080064f9 	.word	0x080064f9
 8005614:	0800651b 	.word	0x0800651b
 8005618:	08006553 	.word	0x08006553
 800561c:	08006577 	.word	0x08006577

08005620 <_cleanup_r>:
 8005620:	4901      	ldr	r1, [pc, #4]	; (8005628 <_cleanup_r+0x8>)
 8005622:	f000 b8af 	b.w	8005784 <_fwalk_reent>
 8005626:	bf00      	nop
 8005628:	08005561 	.word	0x08005561

0800562c <__sfmoreglue>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	2268      	movs	r2, #104	; 0x68
 8005630:	1e4d      	subs	r5, r1, #1
 8005632:	4355      	muls	r5, r2
 8005634:	460e      	mov	r6, r1
 8005636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800563a:	f000 f9e1 	bl	8005a00 <_malloc_r>
 800563e:	4604      	mov	r4, r0
 8005640:	b140      	cbz	r0, 8005654 <__sfmoreglue+0x28>
 8005642:	2100      	movs	r1, #0
 8005644:	e9c0 1600 	strd	r1, r6, [r0]
 8005648:	300c      	adds	r0, #12
 800564a:	60a0      	str	r0, [r4, #8]
 800564c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005650:	f000 f962 	bl	8005918 <memset>
 8005654:	4620      	mov	r0, r4
 8005656:	bd70      	pop	{r4, r5, r6, pc}

08005658 <__sfp_lock_acquire>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__sfp_lock_acquire+0x8>)
 800565a:	f000 b8d8 	b.w	800580e <__retarget_lock_acquire_recursive>
 800565e:	bf00      	nop
 8005660:	200002e1 	.word	0x200002e1

08005664 <__sfp_lock_release>:
 8005664:	4801      	ldr	r0, [pc, #4]	; (800566c <__sfp_lock_release+0x8>)
 8005666:	f000 b8d3 	b.w	8005810 <__retarget_lock_release_recursive>
 800566a:	bf00      	nop
 800566c:	200002e1 	.word	0x200002e1

08005670 <__sinit_lock_acquire>:
 8005670:	4801      	ldr	r0, [pc, #4]	; (8005678 <__sinit_lock_acquire+0x8>)
 8005672:	f000 b8cc 	b.w	800580e <__retarget_lock_acquire_recursive>
 8005676:	bf00      	nop
 8005678:	200002e2 	.word	0x200002e2

0800567c <__sinit_lock_release>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__sinit_lock_release+0x8>)
 800567e:	f000 b8c7 	b.w	8005810 <__retarget_lock_release_recursive>
 8005682:	bf00      	nop
 8005684:	200002e2 	.word	0x200002e2

08005688 <__sinit>:
 8005688:	b510      	push	{r4, lr}
 800568a:	4604      	mov	r4, r0
 800568c:	f7ff fff0 	bl	8005670 <__sinit_lock_acquire>
 8005690:	69a3      	ldr	r3, [r4, #24]
 8005692:	b11b      	cbz	r3, 800569c <__sinit+0x14>
 8005694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005698:	f7ff bff0 	b.w	800567c <__sinit_lock_release>
 800569c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056a0:	6523      	str	r3, [r4, #80]	; 0x50
 80056a2:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <__sinit+0x68>)
 80056a4:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <__sinit+0x6c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80056aa:	42a3      	cmp	r3, r4
 80056ac:	bf04      	itt	eq
 80056ae:	2301      	moveq	r3, #1
 80056b0:	61a3      	streq	r3, [r4, #24]
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f820 	bl	80056f8 <__sfp>
 80056b8:	6060      	str	r0, [r4, #4]
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 f81c 	bl	80056f8 <__sfp>
 80056c0:	60a0      	str	r0, [r4, #8]
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 f818 	bl	80056f8 <__sfp>
 80056c8:	2200      	movs	r2, #0
 80056ca:	60e0      	str	r0, [r4, #12]
 80056cc:	2104      	movs	r1, #4
 80056ce:	6860      	ldr	r0, [r4, #4]
 80056d0:	f7ff ff82 	bl	80055d8 <std>
 80056d4:	68a0      	ldr	r0, [r4, #8]
 80056d6:	2201      	movs	r2, #1
 80056d8:	2109      	movs	r1, #9
 80056da:	f7ff ff7d 	bl	80055d8 <std>
 80056de:	68e0      	ldr	r0, [r4, #12]
 80056e0:	2202      	movs	r2, #2
 80056e2:	2112      	movs	r1, #18
 80056e4:	f7ff ff78 	bl	80055d8 <std>
 80056e8:	2301      	movs	r3, #1
 80056ea:	61a3      	str	r3, [r4, #24]
 80056ec:	e7d2      	b.n	8005694 <__sinit+0xc>
 80056ee:	bf00      	nop
 80056f0:	0800840c 	.word	0x0800840c
 80056f4:	08005621 	.word	0x08005621

080056f8 <__sfp>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	4607      	mov	r7, r0
 80056fc:	f7ff ffac 	bl	8005658 <__sfp_lock_acquire>
 8005700:	4b1e      	ldr	r3, [pc, #120]	; (800577c <__sfp+0x84>)
 8005702:	681e      	ldr	r6, [r3, #0]
 8005704:	69b3      	ldr	r3, [r6, #24]
 8005706:	b913      	cbnz	r3, 800570e <__sfp+0x16>
 8005708:	4630      	mov	r0, r6
 800570a:	f7ff ffbd 	bl	8005688 <__sinit>
 800570e:	3648      	adds	r6, #72	; 0x48
 8005710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005714:	3b01      	subs	r3, #1
 8005716:	d503      	bpl.n	8005720 <__sfp+0x28>
 8005718:	6833      	ldr	r3, [r6, #0]
 800571a:	b30b      	cbz	r3, 8005760 <__sfp+0x68>
 800571c:	6836      	ldr	r6, [r6, #0]
 800571e:	e7f7      	b.n	8005710 <__sfp+0x18>
 8005720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005724:	b9d5      	cbnz	r5, 800575c <__sfp+0x64>
 8005726:	4b16      	ldr	r3, [pc, #88]	; (8005780 <__sfp+0x88>)
 8005728:	60e3      	str	r3, [r4, #12]
 800572a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800572e:	6665      	str	r5, [r4, #100]	; 0x64
 8005730:	f000 f86c 	bl	800580c <__retarget_lock_init_recursive>
 8005734:	f7ff ff96 	bl	8005664 <__sfp_lock_release>
 8005738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800573c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005740:	6025      	str	r5, [r4, #0]
 8005742:	61a5      	str	r5, [r4, #24]
 8005744:	2208      	movs	r2, #8
 8005746:	4629      	mov	r1, r5
 8005748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800574c:	f000 f8e4 	bl	8005918 <memset>
 8005750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005758:	4620      	mov	r0, r4
 800575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800575c:	3468      	adds	r4, #104	; 0x68
 800575e:	e7d9      	b.n	8005714 <__sfp+0x1c>
 8005760:	2104      	movs	r1, #4
 8005762:	4638      	mov	r0, r7
 8005764:	f7ff ff62 	bl	800562c <__sfmoreglue>
 8005768:	4604      	mov	r4, r0
 800576a:	6030      	str	r0, [r6, #0]
 800576c:	2800      	cmp	r0, #0
 800576e:	d1d5      	bne.n	800571c <__sfp+0x24>
 8005770:	f7ff ff78 	bl	8005664 <__sfp_lock_release>
 8005774:	230c      	movs	r3, #12
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	e7ee      	b.n	8005758 <__sfp+0x60>
 800577a:	bf00      	nop
 800577c:	0800840c 	.word	0x0800840c
 8005780:	ffff0001 	.word	0xffff0001

08005784 <_fwalk_reent>:
 8005784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005788:	4606      	mov	r6, r0
 800578a:	4688      	mov	r8, r1
 800578c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005790:	2700      	movs	r7, #0
 8005792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005796:	f1b9 0901 	subs.w	r9, r9, #1
 800579a:	d505      	bpl.n	80057a8 <_fwalk_reent+0x24>
 800579c:	6824      	ldr	r4, [r4, #0]
 800579e:	2c00      	cmp	r4, #0
 80057a0:	d1f7      	bne.n	8005792 <_fwalk_reent+0xe>
 80057a2:	4638      	mov	r0, r7
 80057a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a8:	89ab      	ldrh	r3, [r5, #12]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d907      	bls.n	80057be <_fwalk_reent+0x3a>
 80057ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057b2:	3301      	adds	r3, #1
 80057b4:	d003      	beq.n	80057be <_fwalk_reent+0x3a>
 80057b6:	4629      	mov	r1, r5
 80057b8:	4630      	mov	r0, r6
 80057ba:	47c0      	blx	r8
 80057bc:	4307      	orrs	r7, r0
 80057be:	3568      	adds	r5, #104	; 0x68
 80057c0:	e7e9      	b.n	8005796 <_fwalk_reent+0x12>
	...

080057c4 <__libc_init_array>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	4d0d      	ldr	r5, [pc, #52]	; (80057fc <__libc_init_array+0x38>)
 80057c8:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <__libc_init_array+0x3c>)
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	2600      	movs	r6, #0
 80057d0:	42a6      	cmp	r6, r4
 80057d2:	d109      	bne.n	80057e8 <__libc_init_array+0x24>
 80057d4:	4d0b      	ldr	r5, [pc, #44]	; (8005804 <__libc_init_array+0x40>)
 80057d6:	4c0c      	ldr	r4, [pc, #48]	; (8005808 <__libc_init_array+0x44>)
 80057d8:	f002 fc12 	bl	8008000 <_init>
 80057dc:	1b64      	subs	r4, r4, r5
 80057de:	10a4      	asrs	r4, r4, #2
 80057e0:	2600      	movs	r6, #0
 80057e2:	42a6      	cmp	r6, r4
 80057e4:	d105      	bne.n	80057f2 <__libc_init_array+0x2e>
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ec:	4798      	blx	r3
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7ee      	b.n	80057d0 <__libc_init_array+0xc>
 80057f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f6:	4798      	blx	r3
 80057f8:	3601      	adds	r6, #1
 80057fa:	e7f2      	b.n	80057e2 <__libc_init_array+0x1e>
 80057fc:	08008788 	.word	0x08008788
 8005800:	08008788 	.word	0x08008788
 8005804:	08008788 	.word	0x08008788
 8005808:	0800878c 	.word	0x0800878c

0800580c <__retarget_lock_init_recursive>:
 800580c:	4770      	bx	lr

0800580e <__retarget_lock_acquire_recursive>:
 800580e:	4770      	bx	lr

08005810 <__retarget_lock_release_recursive>:
 8005810:	4770      	bx	lr

08005812 <__swhatbuf_r>:
 8005812:	b570      	push	{r4, r5, r6, lr}
 8005814:	460e      	mov	r6, r1
 8005816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581a:	2900      	cmp	r1, #0
 800581c:	b096      	sub	sp, #88	; 0x58
 800581e:	4614      	mov	r4, r2
 8005820:	461d      	mov	r5, r3
 8005822:	da08      	bge.n	8005836 <__swhatbuf_r+0x24>
 8005824:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	602a      	str	r2, [r5, #0]
 800582c:	061a      	lsls	r2, r3, #24
 800582e:	d410      	bmi.n	8005852 <__swhatbuf_r+0x40>
 8005830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005834:	e00e      	b.n	8005854 <__swhatbuf_r+0x42>
 8005836:	466a      	mov	r2, sp
 8005838:	f001 fe2e 	bl	8007498 <_fstat_r>
 800583c:	2800      	cmp	r0, #0
 800583e:	dbf1      	blt.n	8005824 <__swhatbuf_r+0x12>
 8005840:	9a01      	ldr	r2, [sp, #4]
 8005842:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005846:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800584a:	425a      	negs	r2, r3
 800584c:	415a      	adcs	r2, r3
 800584e:	602a      	str	r2, [r5, #0]
 8005850:	e7ee      	b.n	8005830 <__swhatbuf_r+0x1e>
 8005852:	2340      	movs	r3, #64	; 0x40
 8005854:	2000      	movs	r0, #0
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	b016      	add	sp, #88	; 0x58
 800585a:	bd70      	pop	{r4, r5, r6, pc}

0800585c <__smakebuf_r>:
 800585c:	898b      	ldrh	r3, [r1, #12]
 800585e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005860:	079d      	lsls	r5, r3, #30
 8005862:	4606      	mov	r6, r0
 8005864:	460c      	mov	r4, r1
 8005866:	d507      	bpl.n	8005878 <__smakebuf_r+0x1c>
 8005868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	6123      	str	r3, [r4, #16]
 8005870:	2301      	movs	r3, #1
 8005872:	6163      	str	r3, [r4, #20]
 8005874:	b002      	add	sp, #8
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	ab01      	add	r3, sp, #4
 800587a:	466a      	mov	r2, sp
 800587c:	f7ff ffc9 	bl	8005812 <__swhatbuf_r>
 8005880:	9900      	ldr	r1, [sp, #0]
 8005882:	4605      	mov	r5, r0
 8005884:	4630      	mov	r0, r6
 8005886:	f000 f8bb 	bl	8005a00 <_malloc_r>
 800588a:	b948      	cbnz	r0, 80058a0 <__smakebuf_r+0x44>
 800588c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005890:	059a      	lsls	r2, r3, #22
 8005892:	d4ef      	bmi.n	8005874 <__smakebuf_r+0x18>
 8005894:	f023 0303 	bic.w	r3, r3, #3
 8005898:	f043 0302 	orr.w	r3, r3, #2
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	e7e3      	b.n	8005868 <__smakebuf_r+0xc>
 80058a0:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <__smakebuf_r+0x7c>)
 80058a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	6020      	str	r0, [r4, #0]
 80058a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	6163      	str	r3, [r4, #20]
 80058b2:	9b01      	ldr	r3, [sp, #4]
 80058b4:	6120      	str	r0, [r4, #16]
 80058b6:	b15b      	cbz	r3, 80058d0 <__smakebuf_r+0x74>
 80058b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058bc:	4630      	mov	r0, r6
 80058be:	f001 fdfd 	bl	80074bc <_isatty_r>
 80058c2:	b128      	cbz	r0, 80058d0 <__smakebuf_r+0x74>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	89a0      	ldrh	r0, [r4, #12]
 80058d2:	4305      	orrs	r5, r0
 80058d4:	81a5      	strh	r5, [r4, #12]
 80058d6:	e7cd      	b.n	8005874 <__smakebuf_r+0x18>
 80058d8:	08005621 	.word	0x08005621

080058dc <malloc>:
 80058dc:	4b02      	ldr	r3, [pc, #8]	; (80058e8 <malloc+0xc>)
 80058de:	4601      	mov	r1, r0
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	f000 b88d 	b.w	8005a00 <_malloc_r>
 80058e6:	bf00      	nop
 80058e8:	20000014 	.word	0x20000014

080058ec <free>:
 80058ec:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <free+0xc>)
 80058ee:	4601      	mov	r1, r0
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	f000 b819 	b.w	8005928 <_free_r>
 80058f6:	bf00      	nop
 80058f8:	20000014 	.word	0x20000014

080058fc <memcpy>:
 80058fc:	440a      	add	r2, r1
 80058fe:	4291      	cmp	r1, r2
 8005900:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005904:	d100      	bne.n	8005908 <memcpy+0xc>
 8005906:	4770      	bx	lr
 8005908:	b510      	push	{r4, lr}
 800590a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800590e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005912:	4291      	cmp	r1, r2
 8005914:	d1f9      	bne.n	800590a <memcpy+0xe>
 8005916:	bd10      	pop	{r4, pc}

08005918 <memset>:
 8005918:	4402      	add	r2, r0
 800591a:	4603      	mov	r3, r0
 800591c:	4293      	cmp	r3, r2
 800591e:	d100      	bne.n	8005922 <memset+0xa>
 8005920:	4770      	bx	lr
 8005922:	f803 1b01 	strb.w	r1, [r3], #1
 8005926:	e7f9      	b.n	800591c <memset+0x4>

08005928 <_free_r>:
 8005928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800592a:	2900      	cmp	r1, #0
 800592c:	d044      	beq.n	80059b8 <_free_r+0x90>
 800592e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005932:	9001      	str	r0, [sp, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f1a1 0404 	sub.w	r4, r1, #4
 800593a:	bfb8      	it	lt
 800593c:	18e4      	addlt	r4, r4, r3
 800593e:	f001 fdf5 	bl	800752c <__malloc_lock>
 8005942:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <_free_r+0x94>)
 8005944:	9801      	ldr	r0, [sp, #4]
 8005946:	6813      	ldr	r3, [r2, #0]
 8005948:	b933      	cbnz	r3, 8005958 <_free_r+0x30>
 800594a:	6063      	str	r3, [r4, #4]
 800594c:	6014      	str	r4, [r2, #0]
 800594e:	b003      	add	sp, #12
 8005950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005954:	f001 bdf0 	b.w	8007538 <__malloc_unlock>
 8005958:	42a3      	cmp	r3, r4
 800595a:	d908      	bls.n	800596e <_free_r+0x46>
 800595c:	6825      	ldr	r5, [r4, #0]
 800595e:	1961      	adds	r1, r4, r5
 8005960:	428b      	cmp	r3, r1
 8005962:	bf01      	itttt	eq
 8005964:	6819      	ldreq	r1, [r3, #0]
 8005966:	685b      	ldreq	r3, [r3, #4]
 8005968:	1949      	addeq	r1, r1, r5
 800596a:	6021      	streq	r1, [r4, #0]
 800596c:	e7ed      	b.n	800594a <_free_r+0x22>
 800596e:	461a      	mov	r2, r3
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	b10b      	cbz	r3, 8005978 <_free_r+0x50>
 8005974:	42a3      	cmp	r3, r4
 8005976:	d9fa      	bls.n	800596e <_free_r+0x46>
 8005978:	6811      	ldr	r1, [r2, #0]
 800597a:	1855      	adds	r5, r2, r1
 800597c:	42a5      	cmp	r5, r4
 800597e:	d10b      	bne.n	8005998 <_free_r+0x70>
 8005980:	6824      	ldr	r4, [r4, #0]
 8005982:	4421      	add	r1, r4
 8005984:	1854      	adds	r4, r2, r1
 8005986:	42a3      	cmp	r3, r4
 8005988:	6011      	str	r1, [r2, #0]
 800598a:	d1e0      	bne.n	800594e <_free_r+0x26>
 800598c:	681c      	ldr	r4, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	6053      	str	r3, [r2, #4]
 8005992:	4421      	add	r1, r4
 8005994:	6011      	str	r1, [r2, #0]
 8005996:	e7da      	b.n	800594e <_free_r+0x26>
 8005998:	d902      	bls.n	80059a0 <_free_r+0x78>
 800599a:	230c      	movs	r3, #12
 800599c:	6003      	str	r3, [r0, #0]
 800599e:	e7d6      	b.n	800594e <_free_r+0x26>
 80059a0:	6825      	ldr	r5, [r4, #0]
 80059a2:	1961      	adds	r1, r4, r5
 80059a4:	428b      	cmp	r3, r1
 80059a6:	bf04      	itt	eq
 80059a8:	6819      	ldreq	r1, [r3, #0]
 80059aa:	685b      	ldreq	r3, [r3, #4]
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	bf04      	itt	eq
 80059b0:	1949      	addeq	r1, r1, r5
 80059b2:	6021      	streq	r1, [r4, #0]
 80059b4:	6054      	str	r4, [r2, #4]
 80059b6:	e7ca      	b.n	800594e <_free_r+0x26>
 80059b8:	b003      	add	sp, #12
 80059ba:	bd30      	pop	{r4, r5, pc}
 80059bc:	200002e4 	.word	0x200002e4

080059c0 <sbrk_aligned>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	4e0e      	ldr	r6, [pc, #56]	; (80059fc <sbrk_aligned+0x3c>)
 80059c4:	460c      	mov	r4, r1
 80059c6:	6831      	ldr	r1, [r6, #0]
 80059c8:	4605      	mov	r5, r0
 80059ca:	b911      	cbnz	r1, 80059d2 <sbrk_aligned+0x12>
 80059cc:	f000 fd84 	bl	80064d8 <_sbrk_r>
 80059d0:	6030      	str	r0, [r6, #0]
 80059d2:	4621      	mov	r1, r4
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 fd7f 	bl	80064d8 <_sbrk_r>
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	d00a      	beq.n	80059f4 <sbrk_aligned+0x34>
 80059de:	1cc4      	adds	r4, r0, #3
 80059e0:	f024 0403 	bic.w	r4, r4, #3
 80059e4:	42a0      	cmp	r0, r4
 80059e6:	d007      	beq.n	80059f8 <sbrk_aligned+0x38>
 80059e8:	1a21      	subs	r1, r4, r0
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 fd74 	bl	80064d8 <_sbrk_r>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d101      	bne.n	80059f8 <sbrk_aligned+0x38>
 80059f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059f8:	4620      	mov	r0, r4
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	200002e8 	.word	0x200002e8

08005a00 <_malloc_r>:
 8005a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	1ccd      	adds	r5, r1, #3
 8005a06:	f025 0503 	bic.w	r5, r5, #3
 8005a0a:	3508      	adds	r5, #8
 8005a0c:	2d0c      	cmp	r5, #12
 8005a0e:	bf38      	it	cc
 8005a10:	250c      	movcc	r5, #12
 8005a12:	2d00      	cmp	r5, #0
 8005a14:	4607      	mov	r7, r0
 8005a16:	db01      	blt.n	8005a1c <_malloc_r+0x1c>
 8005a18:	42a9      	cmp	r1, r5
 8005a1a:	d905      	bls.n	8005a28 <_malloc_r+0x28>
 8005a1c:	230c      	movs	r3, #12
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	2600      	movs	r6, #0
 8005a22:	4630      	mov	r0, r6
 8005a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a28:	4e2e      	ldr	r6, [pc, #184]	; (8005ae4 <_malloc_r+0xe4>)
 8005a2a:	f001 fd7f 	bl	800752c <__malloc_lock>
 8005a2e:	6833      	ldr	r3, [r6, #0]
 8005a30:	461c      	mov	r4, r3
 8005a32:	bb34      	cbnz	r4, 8005a82 <_malloc_r+0x82>
 8005a34:	4629      	mov	r1, r5
 8005a36:	4638      	mov	r0, r7
 8005a38:	f7ff ffc2 	bl	80059c0 <sbrk_aligned>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	4604      	mov	r4, r0
 8005a40:	d14d      	bne.n	8005ade <_malloc_r+0xde>
 8005a42:	6834      	ldr	r4, [r6, #0]
 8005a44:	4626      	mov	r6, r4
 8005a46:	2e00      	cmp	r6, #0
 8005a48:	d140      	bne.n	8005acc <_malloc_r+0xcc>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4638      	mov	r0, r7
 8005a50:	eb04 0803 	add.w	r8, r4, r3
 8005a54:	f000 fd40 	bl	80064d8 <_sbrk_r>
 8005a58:	4580      	cmp	r8, r0
 8005a5a:	d13a      	bne.n	8005ad2 <_malloc_r+0xd2>
 8005a5c:	6821      	ldr	r1, [r4, #0]
 8005a5e:	3503      	adds	r5, #3
 8005a60:	1a6d      	subs	r5, r5, r1
 8005a62:	f025 0503 	bic.w	r5, r5, #3
 8005a66:	3508      	adds	r5, #8
 8005a68:	2d0c      	cmp	r5, #12
 8005a6a:	bf38      	it	cc
 8005a6c:	250c      	movcc	r5, #12
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4638      	mov	r0, r7
 8005a72:	f7ff ffa5 	bl	80059c0 <sbrk_aligned>
 8005a76:	3001      	adds	r0, #1
 8005a78:	d02b      	beq.n	8005ad2 <_malloc_r+0xd2>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	442b      	add	r3, r5
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	e00e      	b.n	8005aa0 <_malloc_r+0xa0>
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	1b52      	subs	r2, r2, r5
 8005a86:	d41e      	bmi.n	8005ac6 <_malloc_r+0xc6>
 8005a88:	2a0b      	cmp	r2, #11
 8005a8a:	d916      	bls.n	8005aba <_malloc_r+0xba>
 8005a8c:	1961      	adds	r1, r4, r5
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	6025      	str	r5, [r4, #0]
 8005a92:	bf18      	it	ne
 8005a94:	6059      	strne	r1, [r3, #4]
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	bf08      	it	eq
 8005a9a:	6031      	streq	r1, [r6, #0]
 8005a9c:	5162      	str	r2, [r4, r5]
 8005a9e:	604b      	str	r3, [r1, #4]
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f104 060b 	add.w	r6, r4, #11
 8005aa6:	f001 fd47 	bl	8007538 <__malloc_unlock>
 8005aaa:	f026 0607 	bic.w	r6, r6, #7
 8005aae:	1d23      	adds	r3, r4, #4
 8005ab0:	1af2      	subs	r2, r6, r3
 8005ab2:	d0b6      	beq.n	8005a22 <_malloc_r+0x22>
 8005ab4:	1b9b      	subs	r3, r3, r6
 8005ab6:	50a3      	str	r3, [r4, r2]
 8005ab8:	e7b3      	b.n	8005a22 <_malloc_r+0x22>
 8005aba:	6862      	ldr	r2, [r4, #4]
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	bf0c      	ite	eq
 8005ac0:	6032      	streq	r2, [r6, #0]
 8005ac2:	605a      	strne	r2, [r3, #4]
 8005ac4:	e7ec      	b.n	8005aa0 <_malloc_r+0xa0>
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	6864      	ldr	r4, [r4, #4]
 8005aca:	e7b2      	b.n	8005a32 <_malloc_r+0x32>
 8005acc:	4634      	mov	r4, r6
 8005ace:	6876      	ldr	r6, [r6, #4]
 8005ad0:	e7b9      	b.n	8005a46 <_malloc_r+0x46>
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	603b      	str	r3, [r7, #0]
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	f001 fd2e 	bl	8007538 <__malloc_unlock>
 8005adc:	e7a1      	b.n	8005a22 <_malloc_r+0x22>
 8005ade:	6025      	str	r5, [r4, #0]
 8005ae0:	e7de      	b.n	8005aa0 <_malloc_r+0xa0>
 8005ae2:	bf00      	nop
 8005ae4:	200002e4 	.word	0x200002e4

08005ae8 <__cvt>:
 8005ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aec:	ec55 4b10 	vmov	r4, r5, d0
 8005af0:	2d00      	cmp	r5, #0
 8005af2:	460e      	mov	r6, r1
 8005af4:	4619      	mov	r1, r3
 8005af6:	462b      	mov	r3, r5
 8005af8:	bfbb      	ittet	lt
 8005afa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005afe:	461d      	movlt	r5, r3
 8005b00:	2300      	movge	r3, #0
 8005b02:	232d      	movlt	r3, #45	; 0x2d
 8005b04:	700b      	strb	r3, [r1, #0]
 8005b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b0c:	4691      	mov	r9, r2
 8005b0e:	f023 0820 	bic.w	r8, r3, #32
 8005b12:	bfbc      	itt	lt
 8005b14:	4622      	movlt	r2, r4
 8005b16:	4614      	movlt	r4, r2
 8005b18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b1c:	d005      	beq.n	8005b2a <__cvt+0x42>
 8005b1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b22:	d100      	bne.n	8005b26 <__cvt+0x3e>
 8005b24:	3601      	adds	r6, #1
 8005b26:	2102      	movs	r1, #2
 8005b28:	e000      	b.n	8005b2c <__cvt+0x44>
 8005b2a:	2103      	movs	r1, #3
 8005b2c:	ab03      	add	r3, sp, #12
 8005b2e:	9301      	str	r3, [sp, #4]
 8005b30:	ab02      	add	r3, sp, #8
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	ec45 4b10 	vmov	d0, r4, r5
 8005b38:	4653      	mov	r3, sl
 8005b3a:	4632      	mov	r2, r6
 8005b3c:	f000 feac 	bl	8006898 <_dtoa_r>
 8005b40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b44:	4607      	mov	r7, r0
 8005b46:	d102      	bne.n	8005b4e <__cvt+0x66>
 8005b48:	f019 0f01 	tst.w	r9, #1
 8005b4c:	d022      	beq.n	8005b94 <__cvt+0xac>
 8005b4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b52:	eb07 0906 	add.w	r9, r7, r6
 8005b56:	d110      	bne.n	8005b7a <__cvt+0x92>
 8005b58:	783b      	ldrb	r3, [r7, #0]
 8005b5a:	2b30      	cmp	r3, #48	; 0x30
 8005b5c:	d10a      	bne.n	8005b74 <__cvt+0x8c>
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2300      	movs	r3, #0
 8005b62:	4620      	mov	r0, r4
 8005b64:	4629      	mov	r1, r5
 8005b66:	f7fa ff87 	bl	8000a78 <__aeabi_dcmpeq>
 8005b6a:	b918      	cbnz	r0, 8005b74 <__cvt+0x8c>
 8005b6c:	f1c6 0601 	rsb	r6, r6, #1
 8005b70:	f8ca 6000 	str.w	r6, [sl]
 8005b74:	f8da 3000 	ldr.w	r3, [sl]
 8005b78:	4499      	add	r9, r3
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7fa ff79 	bl	8000a78 <__aeabi_dcmpeq>
 8005b86:	b108      	cbz	r0, 8005b8c <__cvt+0xa4>
 8005b88:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b8c:	2230      	movs	r2, #48	; 0x30
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	454b      	cmp	r3, r9
 8005b92:	d307      	bcc.n	8005ba4 <__cvt+0xbc>
 8005b94:	9b03      	ldr	r3, [sp, #12]
 8005b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b98:	1bdb      	subs	r3, r3, r7
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	b004      	add	sp, #16
 8005ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba4:	1c59      	adds	r1, r3, #1
 8005ba6:	9103      	str	r1, [sp, #12]
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	e7f0      	b.n	8005b8e <__cvt+0xa6>

08005bac <__exponent>:
 8005bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2900      	cmp	r1, #0
 8005bb2:	bfb8      	it	lt
 8005bb4:	4249      	neglt	r1, r1
 8005bb6:	f803 2b02 	strb.w	r2, [r3], #2
 8005bba:	bfb4      	ite	lt
 8005bbc:	222d      	movlt	r2, #45	; 0x2d
 8005bbe:	222b      	movge	r2, #43	; 0x2b
 8005bc0:	2909      	cmp	r1, #9
 8005bc2:	7042      	strb	r2, [r0, #1]
 8005bc4:	dd2a      	ble.n	8005c1c <__exponent+0x70>
 8005bc6:	f10d 0407 	add.w	r4, sp, #7
 8005bca:	46a4      	mov	ip, r4
 8005bcc:	270a      	movs	r7, #10
 8005bce:	46a6      	mov	lr, r4
 8005bd0:	460a      	mov	r2, r1
 8005bd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bd6:	fb07 1516 	mls	r5, r7, r6, r1
 8005bda:	3530      	adds	r5, #48	; 0x30
 8005bdc:	2a63      	cmp	r2, #99	; 0x63
 8005bde:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005be2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005be6:	4631      	mov	r1, r6
 8005be8:	dcf1      	bgt.n	8005bce <__exponent+0x22>
 8005bea:	3130      	adds	r1, #48	; 0x30
 8005bec:	f1ae 0502 	sub.w	r5, lr, #2
 8005bf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bf4:	1c44      	adds	r4, r0, #1
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	4561      	cmp	r1, ip
 8005bfa:	d30a      	bcc.n	8005c12 <__exponent+0x66>
 8005bfc:	f10d 0209 	add.w	r2, sp, #9
 8005c00:	eba2 020e 	sub.w	r2, r2, lr
 8005c04:	4565      	cmp	r5, ip
 8005c06:	bf88      	it	hi
 8005c08:	2200      	movhi	r2, #0
 8005c0a:	4413      	add	r3, r2
 8005c0c:	1a18      	subs	r0, r3, r0
 8005c0e:	b003      	add	sp, #12
 8005c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c1a:	e7ed      	b.n	8005bf8 <__exponent+0x4c>
 8005c1c:	2330      	movs	r3, #48	; 0x30
 8005c1e:	3130      	adds	r1, #48	; 0x30
 8005c20:	7083      	strb	r3, [r0, #2]
 8005c22:	70c1      	strb	r1, [r0, #3]
 8005c24:	1d03      	adds	r3, r0, #4
 8005c26:	e7f1      	b.n	8005c0c <__exponent+0x60>

08005c28 <_printf_float>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	ed2d 8b02 	vpush	{d8}
 8005c30:	b08d      	sub	sp, #52	; 0x34
 8005c32:	460c      	mov	r4, r1
 8005c34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c38:	4616      	mov	r6, r2
 8005c3a:	461f      	mov	r7, r3
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	f001 fc4d 	bl	80074dc <_localeconv_r>
 8005c42:	f8d0 a000 	ldr.w	sl, [r0]
 8005c46:	4650      	mov	r0, sl
 8005c48:	f7fa faea 	bl	8000220 <strlen>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	f8d8 3000 	ldr.w	r3, [r8]
 8005c58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c5c:	3307      	adds	r3, #7
 8005c5e:	f023 0307 	bic.w	r3, r3, #7
 8005c62:	f103 0208 	add.w	r2, r3, #8
 8005c66:	f8c8 2000 	str.w	r2, [r8]
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c7a:	9307      	str	r3, [sp, #28]
 8005c7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c80:	ee08 0a10 	vmov	s16, r0
 8005c84:	4b9f      	ldr	r3, [pc, #636]	; (8005f04 <_printf_float+0x2dc>)
 8005c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c8e:	f7fa ff25 	bl	8000adc <__aeabi_dcmpun>
 8005c92:	bb88      	cbnz	r0, 8005cf8 <_printf_float+0xd0>
 8005c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c98:	4b9a      	ldr	r3, [pc, #616]	; (8005f04 <_printf_float+0x2dc>)
 8005c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c9e:	f7fa feff 	bl	8000aa0 <__aeabi_dcmple>
 8005ca2:	bb48      	cbnz	r0, 8005cf8 <_printf_float+0xd0>
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4640      	mov	r0, r8
 8005caa:	4649      	mov	r1, r9
 8005cac:	f7fa feee 	bl	8000a8c <__aeabi_dcmplt>
 8005cb0:	b110      	cbz	r0, 8005cb8 <_printf_float+0x90>
 8005cb2:	232d      	movs	r3, #45	; 0x2d
 8005cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb8:	4b93      	ldr	r3, [pc, #588]	; (8005f08 <_printf_float+0x2e0>)
 8005cba:	4894      	ldr	r0, [pc, #592]	; (8005f0c <_printf_float+0x2e4>)
 8005cbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005cc0:	bf94      	ite	ls
 8005cc2:	4698      	movls	r8, r3
 8005cc4:	4680      	movhi	r8, r0
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	6123      	str	r3, [r4, #16]
 8005cca:	9b05      	ldr	r3, [sp, #20]
 8005ccc:	f023 0204 	bic.w	r2, r3, #4
 8005cd0:	6022      	str	r2, [r4, #0]
 8005cd2:	f04f 0900 	mov.w	r9, #0
 8005cd6:	9700      	str	r7, [sp, #0]
 8005cd8:	4633      	mov	r3, r6
 8005cda:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 f9d8 	bl	8006094 <_printf_common>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	f040 8090 	bne.w	8005e0a <_printf_float+0x1e2>
 8005cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cee:	b00d      	add	sp, #52	; 0x34
 8005cf0:	ecbd 8b02 	vpop	{d8}
 8005cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	4649      	mov	r1, r9
 8005d00:	f7fa feec 	bl	8000adc <__aeabi_dcmpun>
 8005d04:	b140      	cbz	r0, 8005d18 <_printf_float+0xf0>
 8005d06:	464b      	mov	r3, r9
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bfbc      	itt	lt
 8005d0c:	232d      	movlt	r3, #45	; 0x2d
 8005d0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d12:	487f      	ldr	r0, [pc, #508]	; (8005f10 <_printf_float+0x2e8>)
 8005d14:	4b7f      	ldr	r3, [pc, #508]	; (8005f14 <_printf_float+0x2ec>)
 8005d16:	e7d1      	b.n	8005cbc <_printf_float+0x94>
 8005d18:	6863      	ldr	r3, [r4, #4]
 8005d1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d1e:	9206      	str	r2, [sp, #24]
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	d13f      	bne.n	8005da4 <_printf_float+0x17c>
 8005d24:	2306      	movs	r3, #6
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	9b05      	ldr	r3, [sp, #20]
 8005d2a:	6861      	ldr	r1, [r4, #4]
 8005d2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d30:	2300      	movs	r3, #0
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	ab0a      	add	r3, sp, #40	; 0x28
 8005d36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d3a:	ab09      	add	r3, sp, #36	; 0x24
 8005d3c:	ec49 8b10 	vmov	d0, r8, r9
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	6022      	str	r2, [r4, #0]
 8005d44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f7ff fecd 	bl	8005ae8 <__cvt>
 8005d4e:	9b06      	ldr	r3, [sp, #24]
 8005d50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d52:	2b47      	cmp	r3, #71	; 0x47
 8005d54:	4680      	mov	r8, r0
 8005d56:	d108      	bne.n	8005d6a <_printf_float+0x142>
 8005d58:	1cc8      	adds	r0, r1, #3
 8005d5a:	db02      	blt.n	8005d62 <_printf_float+0x13a>
 8005d5c:	6863      	ldr	r3, [r4, #4]
 8005d5e:	4299      	cmp	r1, r3
 8005d60:	dd41      	ble.n	8005de6 <_printf_float+0x1be>
 8005d62:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d66:	fa5f fb8b 	uxtb.w	fp, fp
 8005d6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d6e:	d820      	bhi.n	8005db2 <_printf_float+0x18a>
 8005d70:	3901      	subs	r1, #1
 8005d72:	465a      	mov	r2, fp
 8005d74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d78:	9109      	str	r1, [sp, #36]	; 0x24
 8005d7a:	f7ff ff17 	bl	8005bac <__exponent>
 8005d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d80:	1813      	adds	r3, r2, r0
 8005d82:	2a01      	cmp	r2, #1
 8005d84:	4681      	mov	r9, r0
 8005d86:	6123      	str	r3, [r4, #16]
 8005d88:	dc02      	bgt.n	8005d90 <_printf_float+0x168>
 8005d8a:	6822      	ldr	r2, [r4, #0]
 8005d8c:	07d2      	lsls	r2, r2, #31
 8005d8e:	d501      	bpl.n	8005d94 <_printf_float+0x16c>
 8005d90:	3301      	adds	r3, #1
 8005d92:	6123      	str	r3, [r4, #16]
 8005d94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d09c      	beq.n	8005cd6 <_printf_float+0xae>
 8005d9c:	232d      	movs	r3, #45	; 0x2d
 8005d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da2:	e798      	b.n	8005cd6 <_printf_float+0xae>
 8005da4:	9a06      	ldr	r2, [sp, #24]
 8005da6:	2a47      	cmp	r2, #71	; 0x47
 8005da8:	d1be      	bne.n	8005d28 <_printf_float+0x100>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1bc      	bne.n	8005d28 <_printf_float+0x100>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e7b9      	b.n	8005d26 <_printf_float+0xfe>
 8005db2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005db6:	d118      	bne.n	8005dea <_printf_float+0x1c2>
 8005db8:	2900      	cmp	r1, #0
 8005dba:	6863      	ldr	r3, [r4, #4]
 8005dbc:	dd0b      	ble.n	8005dd6 <_printf_float+0x1ae>
 8005dbe:	6121      	str	r1, [r4, #16]
 8005dc0:	b913      	cbnz	r3, 8005dc8 <_printf_float+0x1a0>
 8005dc2:	6822      	ldr	r2, [r4, #0]
 8005dc4:	07d0      	lsls	r0, r2, #31
 8005dc6:	d502      	bpl.n	8005dce <_printf_float+0x1a6>
 8005dc8:	3301      	adds	r3, #1
 8005dca:	440b      	add	r3, r1
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dd0:	f04f 0900 	mov.w	r9, #0
 8005dd4:	e7de      	b.n	8005d94 <_printf_float+0x16c>
 8005dd6:	b913      	cbnz	r3, 8005dde <_printf_float+0x1b6>
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	07d2      	lsls	r2, r2, #31
 8005ddc:	d501      	bpl.n	8005de2 <_printf_float+0x1ba>
 8005dde:	3302      	adds	r3, #2
 8005de0:	e7f4      	b.n	8005dcc <_printf_float+0x1a4>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e7f2      	b.n	8005dcc <_printf_float+0x1a4>
 8005de6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dec:	4299      	cmp	r1, r3
 8005dee:	db05      	blt.n	8005dfc <_printf_float+0x1d4>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	6121      	str	r1, [r4, #16]
 8005df4:	07d8      	lsls	r0, r3, #31
 8005df6:	d5ea      	bpl.n	8005dce <_printf_float+0x1a6>
 8005df8:	1c4b      	adds	r3, r1, #1
 8005dfa:	e7e7      	b.n	8005dcc <_printf_float+0x1a4>
 8005dfc:	2900      	cmp	r1, #0
 8005dfe:	bfd4      	ite	le
 8005e00:	f1c1 0202 	rsble	r2, r1, #2
 8005e04:	2201      	movgt	r2, #1
 8005e06:	4413      	add	r3, r2
 8005e08:	e7e0      	b.n	8005dcc <_printf_float+0x1a4>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	055a      	lsls	r2, r3, #21
 8005e0e:	d407      	bmi.n	8005e20 <_printf_float+0x1f8>
 8005e10:	6923      	ldr	r3, [r4, #16]
 8005e12:	4642      	mov	r2, r8
 8005e14:	4631      	mov	r1, r6
 8005e16:	4628      	mov	r0, r5
 8005e18:	47b8      	blx	r7
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d12c      	bne.n	8005e78 <_printf_float+0x250>
 8005e1e:	e764      	b.n	8005cea <_printf_float+0xc2>
 8005e20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e24:	f240 80e0 	bls.w	8005fe8 <_printf_float+0x3c0>
 8005e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f7fa fe22 	bl	8000a78 <__aeabi_dcmpeq>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d034      	beq.n	8005ea2 <_printf_float+0x27a>
 8005e38:	4a37      	ldr	r2, [pc, #220]	; (8005f18 <_printf_float+0x2f0>)
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b8      	blx	r7
 8005e42:	3001      	adds	r0, #1
 8005e44:	f43f af51 	beq.w	8005cea <_printf_float+0xc2>
 8005e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	db02      	blt.n	8005e56 <_printf_float+0x22e>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	07d8      	lsls	r0, r3, #31
 8005e54:	d510      	bpl.n	8005e78 <_printf_float+0x250>
 8005e56:	ee18 3a10 	vmov	r3, s16
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4628      	mov	r0, r5
 8005e60:	47b8      	blx	r7
 8005e62:	3001      	adds	r0, #1
 8005e64:	f43f af41 	beq.w	8005cea <_printf_float+0xc2>
 8005e68:	f04f 0800 	mov.w	r8, #0
 8005e6c:	f104 091a 	add.w	r9, r4, #26
 8005e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e72:	3b01      	subs	r3, #1
 8005e74:	4543      	cmp	r3, r8
 8005e76:	dc09      	bgt.n	8005e8c <_printf_float+0x264>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	079b      	lsls	r3, r3, #30
 8005e7c:	f100 8105 	bmi.w	800608a <_printf_float+0x462>
 8005e80:	68e0      	ldr	r0, [r4, #12]
 8005e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e84:	4298      	cmp	r0, r3
 8005e86:	bfb8      	it	lt
 8005e88:	4618      	movlt	r0, r3
 8005e8a:	e730      	b.n	8005cee <_printf_float+0xc6>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	464a      	mov	r2, r9
 8005e90:	4631      	mov	r1, r6
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b8      	blx	r7
 8005e96:	3001      	adds	r0, #1
 8005e98:	f43f af27 	beq.w	8005cea <_printf_float+0xc2>
 8005e9c:	f108 0801 	add.w	r8, r8, #1
 8005ea0:	e7e6      	b.n	8005e70 <_printf_float+0x248>
 8005ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	dc39      	bgt.n	8005f1c <_printf_float+0x2f4>
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <_printf_float+0x2f0>)
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4631      	mov	r1, r6
 8005eae:	4628      	mov	r0, r5
 8005eb0:	47b8      	blx	r7
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	f43f af19 	beq.w	8005cea <_printf_float+0xc2>
 8005eb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	d102      	bne.n	8005ec6 <_printf_float+0x29e>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	d5d8      	bpl.n	8005e78 <_printf_float+0x250>
 8005ec6:	ee18 3a10 	vmov	r3, s16
 8005eca:	4652      	mov	r2, sl
 8005ecc:	4631      	mov	r1, r6
 8005ece:	4628      	mov	r0, r5
 8005ed0:	47b8      	blx	r7
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	f43f af09 	beq.w	8005cea <_printf_float+0xc2>
 8005ed8:	f04f 0900 	mov.w	r9, #0
 8005edc:	f104 0a1a 	add.w	sl, r4, #26
 8005ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee2:	425b      	negs	r3, r3
 8005ee4:	454b      	cmp	r3, r9
 8005ee6:	dc01      	bgt.n	8005eec <_printf_float+0x2c4>
 8005ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eea:	e792      	b.n	8005e12 <_printf_float+0x1ea>
 8005eec:	2301      	movs	r3, #1
 8005eee:	4652      	mov	r2, sl
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	47b8      	blx	r7
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	f43f aef7 	beq.w	8005cea <_printf_float+0xc2>
 8005efc:	f109 0901 	add.w	r9, r9, #1
 8005f00:	e7ee      	b.n	8005ee0 <_printf_float+0x2b8>
 8005f02:	bf00      	nop
 8005f04:	7fefffff 	.word	0x7fefffff
 8005f08:	08008410 	.word	0x08008410
 8005f0c:	08008414 	.word	0x08008414
 8005f10:	0800841c 	.word	0x0800841c
 8005f14:	08008418 	.word	0x08008418
 8005f18:	08008420 	.word	0x08008420
 8005f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f20:	429a      	cmp	r2, r3
 8005f22:	bfa8      	it	ge
 8005f24:	461a      	movge	r2, r3
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	4691      	mov	r9, r2
 8005f2a:	dc37      	bgt.n	8005f9c <_printf_float+0x374>
 8005f2c:	f04f 0b00 	mov.w	fp, #0
 8005f30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f34:	f104 021a 	add.w	r2, r4, #26
 8005f38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f3a:	9305      	str	r3, [sp, #20]
 8005f3c:	eba3 0309 	sub.w	r3, r3, r9
 8005f40:	455b      	cmp	r3, fp
 8005f42:	dc33      	bgt.n	8005fac <_printf_float+0x384>
 8005f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	db3b      	blt.n	8005fc4 <_printf_float+0x39c>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	07da      	lsls	r2, r3, #31
 8005f50:	d438      	bmi.n	8005fc4 <_printf_float+0x39c>
 8005f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f54:	9a05      	ldr	r2, [sp, #20]
 8005f56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f58:	1a9a      	subs	r2, r3, r2
 8005f5a:	eba3 0901 	sub.w	r9, r3, r1
 8005f5e:	4591      	cmp	r9, r2
 8005f60:	bfa8      	it	ge
 8005f62:	4691      	movge	r9, r2
 8005f64:	f1b9 0f00 	cmp.w	r9, #0
 8005f68:	dc35      	bgt.n	8005fd6 <_printf_float+0x3ae>
 8005f6a:	f04f 0800 	mov.w	r8, #0
 8005f6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f72:	f104 0a1a 	add.w	sl, r4, #26
 8005f76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	eba3 0309 	sub.w	r3, r3, r9
 8005f80:	4543      	cmp	r3, r8
 8005f82:	f77f af79 	ble.w	8005e78 <_printf_float+0x250>
 8005f86:	2301      	movs	r3, #1
 8005f88:	4652      	mov	r2, sl
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b8      	blx	r7
 8005f90:	3001      	adds	r0, #1
 8005f92:	f43f aeaa 	beq.w	8005cea <_printf_float+0xc2>
 8005f96:	f108 0801 	add.w	r8, r8, #1
 8005f9a:	e7ec      	b.n	8005f76 <_printf_float+0x34e>
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d1c0      	bne.n	8005f2c <_printf_float+0x304>
 8005faa:	e69e      	b.n	8005cea <_printf_float+0xc2>
 8005fac:	2301      	movs	r3, #1
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	9205      	str	r2, [sp, #20]
 8005fb4:	47b8      	blx	r7
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	f43f ae97 	beq.w	8005cea <_printf_float+0xc2>
 8005fbc:	9a05      	ldr	r2, [sp, #20]
 8005fbe:	f10b 0b01 	add.w	fp, fp, #1
 8005fc2:	e7b9      	b.n	8005f38 <_printf_float+0x310>
 8005fc4:	ee18 3a10 	vmov	r3, s16
 8005fc8:	4652      	mov	r2, sl
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d1be      	bne.n	8005f52 <_printf_float+0x32a>
 8005fd4:	e689      	b.n	8005cea <_printf_float+0xc2>
 8005fd6:	9a05      	ldr	r2, [sp, #20]
 8005fd8:	464b      	mov	r3, r9
 8005fda:	4442      	add	r2, r8
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d1c1      	bne.n	8005f6a <_printf_float+0x342>
 8005fe6:	e680      	b.n	8005cea <_printf_float+0xc2>
 8005fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fea:	2a01      	cmp	r2, #1
 8005fec:	dc01      	bgt.n	8005ff2 <_printf_float+0x3ca>
 8005fee:	07db      	lsls	r3, r3, #31
 8005ff0:	d538      	bpl.n	8006064 <_printf_float+0x43c>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f43f ae74 	beq.w	8005cea <_printf_float+0xc2>
 8006002:	ee18 3a10 	vmov	r3, s16
 8006006:	4652      	mov	r2, sl
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f ae6b 	beq.w	8005cea <_printf_float+0xc2>
 8006014:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006018:	2200      	movs	r2, #0
 800601a:	2300      	movs	r3, #0
 800601c:	f7fa fd2c 	bl	8000a78 <__aeabi_dcmpeq>
 8006020:	b9d8      	cbnz	r0, 800605a <_printf_float+0x432>
 8006022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006024:	f108 0201 	add.w	r2, r8, #1
 8006028:	3b01      	subs	r3, #1
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	d10e      	bne.n	8006052 <_printf_float+0x42a>
 8006034:	e659      	b.n	8005cea <_printf_float+0xc2>
 8006036:	2301      	movs	r3, #1
 8006038:	4652      	mov	r2, sl
 800603a:	4631      	mov	r1, r6
 800603c:	4628      	mov	r0, r5
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	f43f ae52 	beq.w	8005cea <_printf_float+0xc2>
 8006046:	f108 0801 	add.w	r8, r8, #1
 800604a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604c:	3b01      	subs	r3, #1
 800604e:	4543      	cmp	r3, r8
 8006050:	dcf1      	bgt.n	8006036 <_printf_float+0x40e>
 8006052:	464b      	mov	r3, r9
 8006054:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006058:	e6dc      	b.n	8005e14 <_printf_float+0x1ec>
 800605a:	f04f 0800 	mov.w	r8, #0
 800605e:	f104 0a1a 	add.w	sl, r4, #26
 8006062:	e7f2      	b.n	800604a <_printf_float+0x422>
 8006064:	2301      	movs	r3, #1
 8006066:	4642      	mov	r2, r8
 8006068:	e7df      	b.n	800602a <_printf_float+0x402>
 800606a:	2301      	movs	r3, #1
 800606c:	464a      	mov	r2, r9
 800606e:	4631      	mov	r1, r6
 8006070:	4628      	mov	r0, r5
 8006072:	47b8      	blx	r7
 8006074:	3001      	adds	r0, #1
 8006076:	f43f ae38 	beq.w	8005cea <_printf_float+0xc2>
 800607a:	f108 0801 	add.w	r8, r8, #1
 800607e:	68e3      	ldr	r3, [r4, #12]
 8006080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006082:	1a5b      	subs	r3, r3, r1
 8006084:	4543      	cmp	r3, r8
 8006086:	dcf0      	bgt.n	800606a <_printf_float+0x442>
 8006088:	e6fa      	b.n	8005e80 <_printf_float+0x258>
 800608a:	f04f 0800 	mov.w	r8, #0
 800608e:	f104 0919 	add.w	r9, r4, #25
 8006092:	e7f4      	b.n	800607e <_printf_float+0x456>

08006094 <_printf_common>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	4616      	mov	r6, r2
 800609a:	4699      	mov	r9, r3
 800609c:	688a      	ldr	r2, [r1, #8]
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a4:	4293      	cmp	r3, r2
 80060a6:	bfb8      	it	lt
 80060a8:	4613      	movlt	r3, r2
 80060aa:	6033      	str	r3, [r6, #0]
 80060ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060b0:	4607      	mov	r7, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	b10a      	cbz	r2, 80060ba <_printf_common+0x26>
 80060b6:	3301      	adds	r3, #1
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	0699      	lsls	r1, r3, #26
 80060be:	bf42      	ittt	mi
 80060c0:	6833      	ldrmi	r3, [r6, #0]
 80060c2:	3302      	addmi	r3, #2
 80060c4:	6033      	strmi	r3, [r6, #0]
 80060c6:	6825      	ldr	r5, [r4, #0]
 80060c8:	f015 0506 	ands.w	r5, r5, #6
 80060cc:	d106      	bne.n	80060dc <_printf_common+0x48>
 80060ce:	f104 0a19 	add.w	sl, r4, #25
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	6832      	ldr	r2, [r6, #0]
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	42ab      	cmp	r3, r5
 80060da:	dc26      	bgt.n	800612a <_printf_common+0x96>
 80060dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e0:	1e13      	subs	r3, r2, #0
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	bf18      	it	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	0692      	lsls	r2, r2, #26
 80060ea:	d42b      	bmi.n	8006144 <_printf_common+0xb0>
 80060ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f0:	4649      	mov	r1, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d01e      	beq.n	8006138 <_printf_common+0xa4>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	68e5      	ldr	r5, [r4, #12]
 80060fe:	6832      	ldr	r2, [r6, #0]
 8006100:	f003 0306 	and.w	r3, r3, #6
 8006104:	2b04      	cmp	r3, #4
 8006106:	bf08      	it	eq
 8006108:	1aad      	subeq	r5, r5, r2
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	6922      	ldr	r2, [r4, #16]
 800610e:	bf0c      	ite	eq
 8006110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006114:	2500      	movne	r5, #0
 8006116:	4293      	cmp	r3, r2
 8006118:	bfc4      	itt	gt
 800611a:	1a9b      	subgt	r3, r3, r2
 800611c:	18ed      	addgt	r5, r5, r3
 800611e:	2600      	movs	r6, #0
 8006120:	341a      	adds	r4, #26
 8006122:	42b5      	cmp	r5, r6
 8006124:	d11a      	bne.n	800615c <_printf_common+0xc8>
 8006126:	2000      	movs	r0, #0
 8006128:	e008      	b.n	800613c <_printf_common+0xa8>
 800612a:	2301      	movs	r3, #1
 800612c:	4652      	mov	r2, sl
 800612e:	4649      	mov	r1, r9
 8006130:	4638      	mov	r0, r7
 8006132:	47c0      	blx	r8
 8006134:	3001      	adds	r0, #1
 8006136:	d103      	bne.n	8006140 <_printf_common+0xac>
 8006138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	3501      	adds	r5, #1
 8006142:	e7c6      	b.n	80060d2 <_printf_common+0x3e>
 8006144:	18e1      	adds	r1, r4, r3
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	2030      	movs	r0, #48	; 0x30
 800614a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800614e:	4422      	add	r2, r4
 8006150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006158:	3302      	adds	r3, #2
 800615a:	e7c7      	b.n	80060ec <_printf_common+0x58>
 800615c:	2301      	movs	r3, #1
 800615e:	4622      	mov	r2, r4
 8006160:	4649      	mov	r1, r9
 8006162:	4638      	mov	r0, r7
 8006164:	47c0      	blx	r8
 8006166:	3001      	adds	r0, #1
 8006168:	d0e6      	beq.n	8006138 <_printf_common+0xa4>
 800616a:	3601      	adds	r6, #1
 800616c:	e7d9      	b.n	8006122 <_printf_common+0x8e>
	...

08006170 <_printf_i>:
 8006170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006174:	7e0f      	ldrb	r7, [r1, #24]
 8006176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006178:	2f78      	cmp	r7, #120	; 0x78
 800617a:	4691      	mov	r9, r2
 800617c:	4680      	mov	r8, r0
 800617e:	460c      	mov	r4, r1
 8006180:	469a      	mov	sl, r3
 8006182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006186:	d807      	bhi.n	8006198 <_printf_i+0x28>
 8006188:	2f62      	cmp	r7, #98	; 0x62
 800618a:	d80a      	bhi.n	80061a2 <_printf_i+0x32>
 800618c:	2f00      	cmp	r7, #0
 800618e:	f000 80d8 	beq.w	8006342 <_printf_i+0x1d2>
 8006192:	2f58      	cmp	r7, #88	; 0x58
 8006194:	f000 80a3 	beq.w	80062de <_printf_i+0x16e>
 8006198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800619c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061a0:	e03a      	b.n	8006218 <_printf_i+0xa8>
 80061a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061a6:	2b15      	cmp	r3, #21
 80061a8:	d8f6      	bhi.n	8006198 <_printf_i+0x28>
 80061aa:	a101      	add	r1, pc, #4	; (adr r1, 80061b0 <_printf_i+0x40>)
 80061ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061b0:	08006209 	.word	0x08006209
 80061b4:	0800621d 	.word	0x0800621d
 80061b8:	08006199 	.word	0x08006199
 80061bc:	08006199 	.word	0x08006199
 80061c0:	08006199 	.word	0x08006199
 80061c4:	08006199 	.word	0x08006199
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	08006199 	.word	0x08006199
 80061d0:	08006199 	.word	0x08006199
 80061d4:	08006199 	.word	0x08006199
 80061d8:	08006199 	.word	0x08006199
 80061dc:	08006329 	.word	0x08006329
 80061e0:	0800624d 	.word	0x0800624d
 80061e4:	0800630b 	.word	0x0800630b
 80061e8:	08006199 	.word	0x08006199
 80061ec:	08006199 	.word	0x08006199
 80061f0:	0800634b 	.word	0x0800634b
 80061f4:	08006199 	.word	0x08006199
 80061f8:	0800624d 	.word	0x0800624d
 80061fc:	08006199 	.word	0x08006199
 8006200:	08006199 	.word	0x08006199
 8006204:	08006313 	.word	0x08006313
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	1d1a      	adds	r2, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	602a      	str	r2, [r5, #0]
 8006210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006218:	2301      	movs	r3, #1
 800621a:	e0a3      	b.n	8006364 <_printf_i+0x1f4>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	6829      	ldr	r1, [r5, #0]
 8006220:	0606      	lsls	r6, r0, #24
 8006222:	f101 0304 	add.w	r3, r1, #4
 8006226:	d50a      	bpl.n	800623e <_printf_i+0xce>
 8006228:	680e      	ldr	r6, [r1, #0]
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	2e00      	cmp	r6, #0
 800622e:	da03      	bge.n	8006238 <_printf_i+0xc8>
 8006230:	232d      	movs	r3, #45	; 0x2d
 8006232:	4276      	negs	r6, r6
 8006234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006238:	485e      	ldr	r0, [pc, #376]	; (80063b4 <_printf_i+0x244>)
 800623a:	230a      	movs	r3, #10
 800623c:	e019      	b.n	8006272 <_printf_i+0x102>
 800623e:	680e      	ldr	r6, [r1, #0]
 8006240:	602b      	str	r3, [r5, #0]
 8006242:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006246:	bf18      	it	ne
 8006248:	b236      	sxthne	r6, r6
 800624a:	e7ef      	b.n	800622c <_printf_i+0xbc>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	1d19      	adds	r1, r3, #4
 8006252:	6029      	str	r1, [r5, #0]
 8006254:	0601      	lsls	r1, r0, #24
 8006256:	d501      	bpl.n	800625c <_printf_i+0xec>
 8006258:	681e      	ldr	r6, [r3, #0]
 800625a:	e002      	b.n	8006262 <_printf_i+0xf2>
 800625c:	0646      	lsls	r6, r0, #25
 800625e:	d5fb      	bpl.n	8006258 <_printf_i+0xe8>
 8006260:	881e      	ldrh	r6, [r3, #0]
 8006262:	4854      	ldr	r0, [pc, #336]	; (80063b4 <_printf_i+0x244>)
 8006264:	2f6f      	cmp	r7, #111	; 0x6f
 8006266:	bf0c      	ite	eq
 8006268:	2308      	moveq	r3, #8
 800626a:	230a      	movne	r3, #10
 800626c:	2100      	movs	r1, #0
 800626e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006272:	6865      	ldr	r5, [r4, #4]
 8006274:	60a5      	str	r5, [r4, #8]
 8006276:	2d00      	cmp	r5, #0
 8006278:	bfa2      	ittt	ge
 800627a:	6821      	ldrge	r1, [r4, #0]
 800627c:	f021 0104 	bicge.w	r1, r1, #4
 8006280:	6021      	strge	r1, [r4, #0]
 8006282:	b90e      	cbnz	r6, 8006288 <_printf_i+0x118>
 8006284:	2d00      	cmp	r5, #0
 8006286:	d04d      	beq.n	8006324 <_printf_i+0x1b4>
 8006288:	4615      	mov	r5, r2
 800628a:	fbb6 f1f3 	udiv	r1, r6, r3
 800628e:	fb03 6711 	mls	r7, r3, r1, r6
 8006292:	5dc7      	ldrb	r7, [r0, r7]
 8006294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006298:	4637      	mov	r7, r6
 800629a:	42bb      	cmp	r3, r7
 800629c:	460e      	mov	r6, r1
 800629e:	d9f4      	bls.n	800628a <_printf_i+0x11a>
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d10b      	bne.n	80062bc <_printf_i+0x14c>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	07de      	lsls	r6, r3, #31
 80062a8:	d508      	bpl.n	80062bc <_printf_i+0x14c>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	6861      	ldr	r1, [r4, #4]
 80062ae:	4299      	cmp	r1, r3
 80062b0:	bfde      	ittt	le
 80062b2:	2330      	movle	r3, #48	; 0x30
 80062b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062bc:	1b52      	subs	r2, r2, r5
 80062be:	6122      	str	r2, [r4, #16]
 80062c0:	f8cd a000 	str.w	sl, [sp]
 80062c4:	464b      	mov	r3, r9
 80062c6:	aa03      	add	r2, sp, #12
 80062c8:	4621      	mov	r1, r4
 80062ca:	4640      	mov	r0, r8
 80062cc:	f7ff fee2 	bl	8006094 <_printf_common>
 80062d0:	3001      	adds	r0, #1
 80062d2:	d14c      	bne.n	800636e <_printf_i+0x1fe>
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062d8:	b004      	add	sp, #16
 80062da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062de:	4835      	ldr	r0, [pc, #212]	; (80063b4 <_printf_i+0x244>)
 80062e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062e4:	6829      	ldr	r1, [r5, #0]
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80062ec:	6029      	str	r1, [r5, #0]
 80062ee:	061d      	lsls	r5, r3, #24
 80062f0:	d514      	bpl.n	800631c <_printf_i+0x1ac>
 80062f2:	07df      	lsls	r7, r3, #31
 80062f4:	bf44      	itt	mi
 80062f6:	f043 0320 	orrmi.w	r3, r3, #32
 80062fa:	6023      	strmi	r3, [r4, #0]
 80062fc:	b91e      	cbnz	r6, 8006306 <_printf_i+0x196>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	f023 0320 	bic.w	r3, r3, #32
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	2310      	movs	r3, #16
 8006308:	e7b0      	b.n	800626c <_printf_i+0xfc>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f043 0320 	orr.w	r3, r3, #32
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	2378      	movs	r3, #120	; 0x78
 8006314:	4828      	ldr	r0, [pc, #160]	; (80063b8 <_printf_i+0x248>)
 8006316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800631a:	e7e3      	b.n	80062e4 <_printf_i+0x174>
 800631c:	0659      	lsls	r1, r3, #25
 800631e:	bf48      	it	mi
 8006320:	b2b6      	uxthmi	r6, r6
 8006322:	e7e6      	b.n	80062f2 <_printf_i+0x182>
 8006324:	4615      	mov	r5, r2
 8006326:	e7bb      	b.n	80062a0 <_printf_i+0x130>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	6826      	ldr	r6, [r4, #0]
 800632c:	6961      	ldr	r1, [r4, #20]
 800632e:	1d18      	adds	r0, r3, #4
 8006330:	6028      	str	r0, [r5, #0]
 8006332:	0635      	lsls	r5, r6, #24
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	d501      	bpl.n	800633c <_printf_i+0x1cc>
 8006338:	6019      	str	r1, [r3, #0]
 800633a:	e002      	b.n	8006342 <_printf_i+0x1d2>
 800633c:	0670      	lsls	r0, r6, #25
 800633e:	d5fb      	bpl.n	8006338 <_printf_i+0x1c8>
 8006340:	8019      	strh	r1, [r3, #0]
 8006342:	2300      	movs	r3, #0
 8006344:	6123      	str	r3, [r4, #16]
 8006346:	4615      	mov	r5, r2
 8006348:	e7ba      	b.n	80062c0 <_printf_i+0x150>
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	1d1a      	adds	r2, r3, #4
 800634e:	602a      	str	r2, [r5, #0]
 8006350:	681d      	ldr	r5, [r3, #0]
 8006352:	6862      	ldr	r2, [r4, #4]
 8006354:	2100      	movs	r1, #0
 8006356:	4628      	mov	r0, r5
 8006358:	f7f9 ff12 	bl	8000180 <memchr>
 800635c:	b108      	cbz	r0, 8006362 <_printf_i+0x1f2>
 800635e:	1b40      	subs	r0, r0, r5
 8006360:	6060      	str	r0, [r4, #4]
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	6123      	str	r3, [r4, #16]
 8006366:	2300      	movs	r3, #0
 8006368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800636c:	e7a8      	b.n	80062c0 <_printf_i+0x150>
 800636e:	6923      	ldr	r3, [r4, #16]
 8006370:	462a      	mov	r2, r5
 8006372:	4649      	mov	r1, r9
 8006374:	4640      	mov	r0, r8
 8006376:	47d0      	blx	sl
 8006378:	3001      	adds	r0, #1
 800637a:	d0ab      	beq.n	80062d4 <_printf_i+0x164>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	079b      	lsls	r3, r3, #30
 8006380:	d413      	bmi.n	80063aa <_printf_i+0x23a>
 8006382:	68e0      	ldr	r0, [r4, #12]
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	4298      	cmp	r0, r3
 8006388:	bfb8      	it	lt
 800638a:	4618      	movlt	r0, r3
 800638c:	e7a4      	b.n	80062d8 <_printf_i+0x168>
 800638e:	2301      	movs	r3, #1
 8006390:	4632      	mov	r2, r6
 8006392:	4649      	mov	r1, r9
 8006394:	4640      	mov	r0, r8
 8006396:	47d0      	blx	sl
 8006398:	3001      	adds	r0, #1
 800639a:	d09b      	beq.n	80062d4 <_printf_i+0x164>
 800639c:	3501      	adds	r5, #1
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	9903      	ldr	r1, [sp, #12]
 80063a2:	1a5b      	subs	r3, r3, r1
 80063a4:	42ab      	cmp	r3, r5
 80063a6:	dcf2      	bgt.n	800638e <_printf_i+0x21e>
 80063a8:	e7eb      	b.n	8006382 <_printf_i+0x212>
 80063aa:	2500      	movs	r5, #0
 80063ac:	f104 0619 	add.w	r6, r4, #25
 80063b0:	e7f5      	b.n	800639e <_printf_i+0x22e>
 80063b2:	bf00      	nop
 80063b4:	08008422 	.word	0x08008422
 80063b8:	08008433 	.word	0x08008433

080063bc <iprintf>:
 80063bc:	b40f      	push	{r0, r1, r2, r3}
 80063be:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <iprintf+0x2c>)
 80063c0:	b513      	push	{r0, r1, r4, lr}
 80063c2:	681c      	ldr	r4, [r3, #0]
 80063c4:	b124      	cbz	r4, 80063d0 <iprintf+0x14>
 80063c6:	69a3      	ldr	r3, [r4, #24]
 80063c8:	b913      	cbnz	r3, 80063d0 <iprintf+0x14>
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7ff f95c 	bl	8005688 <__sinit>
 80063d0:	ab05      	add	r3, sp, #20
 80063d2:	9a04      	ldr	r2, [sp, #16]
 80063d4:	68a1      	ldr	r1, [r4, #8]
 80063d6:	9301      	str	r3, [sp, #4]
 80063d8:	4620      	mov	r0, r4
 80063da:	f001 fc77 	bl	8007ccc <_vfiprintf_r>
 80063de:	b002      	add	sp, #8
 80063e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e4:	b004      	add	sp, #16
 80063e6:	4770      	bx	lr
 80063e8:	20000014 	.word	0x20000014

080063ec <_puts_r>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	460e      	mov	r6, r1
 80063f0:	4605      	mov	r5, r0
 80063f2:	b118      	cbz	r0, 80063fc <_puts_r+0x10>
 80063f4:	6983      	ldr	r3, [r0, #24]
 80063f6:	b90b      	cbnz	r3, 80063fc <_puts_r+0x10>
 80063f8:	f7ff f946 	bl	8005688 <__sinit>
 80063fc:	69ab      	ldr	r3, [r5, #24]
 80063fe:	68ac      	ldr	r4, [r5, #8]
 8006400:	b913      	cbnz	r3, 8006408 <_puts_r+0x1c>
 8006402:	4628      	mov	r0, r5
 8006404:	f7ff f940 	bl	8005688 <__sinit>
 8006408:	4b2c      	ldr	r3, [pc, #176]	; (80064bc <_puts_r+0xd0>)
 800640a:	429c      	cmp	r4, r3
 800640c:	d120      	bne.n	8006450 <_puts_r+0x64>
 800640e:	686c      	ldr	r4, [r5, #4]
 8006410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006412:	07db      	lsls	r3, r3, #31
 8006414:	d405      	bmi.n	8006422 <_puts_r+0x36>
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	0598      	lsls	r0, r3, #22
 800641a:	d402      	bmi.n	8006422 <_puts_r+0x36>
 800641c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800641e:	f7ff f9f6 	bl	800580e <__retarget_lock_acquire_recursive>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	0719      	lsls	r1, r3, #28
 8006426:	d51d      	bpl.n	8006464 <_puts_r+0x78>
 8006428:	6923      	ldr	r3, [r4, #16]
 800642a:	b1db      	cbz	r3, 8006464 <_puts_r+0x78>
 800642c:	3e01      	subs	r6, #1
 800642e:	68a3      	ldr	r3, [r4, #8]
 8006430:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006434:	3b01      	subs	r3, #1
 8006436:	60a3      	str	r3, [r4, #8]
 8006438:	bb39      	cbnz	r1, 800648a <_puts_r+0x9e>
 800643a:	2b00      	cmp	r3, #0
 800643c:	da38      	bge.n	80064b0 <_puts_r+0xc4>
 800643e:	4622      	mov	r2, r4
 8006440:	210a      	movs	r1, #10
 8006442:	4628      	mov	r0, r5
 8006444:	f000 f89c 	bl	8006580 <__swbuf_r>
 8006448:	3001      	adds	r0, #1
 800644a:	d011      	beq.n	8006470 <_puts_r+0x84>
 800644c:	250a      	movs	r5, #10
 800644e:	e011      	b.n	8006474 <_puts_r+0x88>
 8006450:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <_puts_r+0xd4>)
 8006452:	429c      	cmp	r4, r3
 8006454:	d101      	bne.n	800645a <_puts_r+0x6e>
 8006456:	68ac      	ldr	r4, [r5, #8]
 8006458:	e7da      	b.n	8006410 <_puts_r+0x24>
 800645a:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <_puts_r+0xd8>)
 800645c:	429c      	cmp	r4, r3
 800645e:	bf08      	it	eq
 8006460:	68ec      	ldreq	r4, [r5, #12]
 8006462:	e7d5      	b.n	8006410 <_puts_r+0x24>
 8006464:	4621      	mov	r1, r4
 8006466:	4628      	mov	r0, r5
 8006468:	f000 f8ee 	bl	8006648 <__swsetup_r>
 800646c:	2800      	cmp	r0, #0
 800646e:	d0dd      	beq.n	800642c <_puts_r+0x40>
 8006470:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006476:	07da      	lsls	r2, r3, #31
 8006478:	d405      	bmi.n	8006486 <_puts_r+0x9a>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	059b      	lsls	r3, r3, #22
 800647e:	d402      	bmi.n	8006486 <_puts_r+0x9a>
 8006480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006482:	f7ff f9c5 	bl	8005810 <__retarget_lock_release_recursive>
 8006486:	4628      	mov	r0, r5
 8006488:	bd70      	pop	{r4, r5, r6, pc}
 800648a:	2b00      	cmp	r3, #0
 800648c:	da04      	bge.n	8006498 <_puts_r+0xac>
 800648e:	69a2      	ldr	r2, [r4, #24]
 8006490:	429a      	cmp	r2, r3
 8006492:	dc06      	bgt.n	80064a2 <_puts_r+0xb6>
 8006494:	290a      	cmp	r1, #10
 8006496:	d004      	beq.n	80064a2 <_puts_r+0xb6>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	6022      	str	r2, [r4, #0]
 800649e:	7019      	strb	r1, [r3, #0]
 80064a0:	e7c5      	b.n	800642e <_puts_r+0x42>
 80064a2:	4622      	mov	r2, r4
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 f86b 	bl	8006580 <__swbuf_r>
 80064aa:	3001      	adds	r0, #1
 80064ac:	d1bf      	bne.n	800642e <_puts_r+0x42>
 80064ae:	e7df      	b.n	8006470 <_puts_r+0x84>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	250a      	movs	r5, #10
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	6022      	str	r2, [r4, #0]
 80064b8:	701d      	strb	r5, [r3, #0]
 80064ba:	e7db      	b.n	8006474 <_puts_r+0x88>
 80064bc:	080083cc 	.word	0x080083cc
 80064c0:	080083ec 	.word	0x080083ec
 80064c4:	080083ac 	.word	0x080083ac

080064c8 <puts>:
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <puts+0xc>)
 80064ca:	4601      	mov	r1, r0
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	f7ff bf8d 	b.w	80063ec <_puts_r>
 80064d2:	bf00      	nop
 80064d4:	20000014 	.word	0x20000014

080064d8 <_sbrk_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d06      	ldr	r5, [pc, #24]	; (80064f4 <_sbrk_r+0x1c>)
 80064dc:	2300      	movs	r3, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	f7fb f896 	bl	8001614 <_sbrk>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_sbrk_r+0x1a>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_sbrk_r+0x1a>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	200002ec 	.word	0x200002ec

080064f8 <__sread>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	460c      	mov	r4, r1
 80064fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006500:	f001 fd14 	bl	8007f2c <_read_r>
 8006504:	2800      	cmp	r0, #0
 8006506:	bfab      	itete	ge
 8006508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800650a:	89a3      	ldrhlt	r3, [r4, #12]
 800650c:	181b      	addge	r3, r3, r0
 800650e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006512:	bfac      	ite	ge
 8006514:	6563      	strge	r3, [r4, #84]	; 0x54
 8006516:	81a3      	strhlt	r3, [r4, #12]
 8006518:	bd10      	pop	{r4, pc}

0800651a <__swrite>:
 800651a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651e:	461f      	mov	r7, r3
 8006520:	898b      	ldrh	r3, [r1, #12]
 8006522:	05db      	lsls	r3, r3, #23
 8006524:	4605      	mov	r5, r0
 8006526:	460c      	mov	r4, r1
 8006528:	4616      	mov	r6, r2
 800652a:	d505      	bpl.n	8006538 <__swrite+0x1e>
 800652c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006530:	2302      	movs	r3, #2
 8006532:	2200      	movs	r2, #0
 8006534:	f000 ffd6 	bl	80074e4 <_lseek_r>
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800653e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	4632      	mov	r2, r6
 8006546:	463b      	mov	r3, r7
 8006548:	4628      	mov	r0, r5
 800654a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800654e:	f000 b869 	b.w	8006624 <_write_r>

08006552 <__sseek>:
 8006552:	b510      	push	{r4, lr}
 8006554:	460c      	mov	r4, r1
 8006556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655a:	f000 ffc3 	bl	80074e4 <_lseek_r>
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	bf15      	itete	ne
 8006564:	6560      	strne	r0, [r4, #84]	; 0x54
 8006566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800656a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800656e:	81a3      	strheq	r3, [r4, #12]
 8006570:	bf18      	it	ne
 8006572:	81a3      	strhne	r3, [r4, #12]
 8006574:	bd10      	pop	{r4, pc}

08006576 <__sclose>:
 8006576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657a:	f000 b8f1 	b.w	8006760 <_close_r>
	...

08006580 <__swbuf_r>:
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	460e      	mov	r6, r1
 8006584:	4614      	mov	r4, r2
 8006586:	4605      	mov	r5, r0
 8006588:	b118      	cbz	r0, 8006592 <__swbuf_r+0x12>
 800658a:	6983      	ldr	r3, [r0, #24]
 800658c:	b90b      	cbnz	r3, 8006592 <__swbuf_r+0x12>
 800658e:	f7ff f87b 	bl	8005688 <__sinit>
 8006592:	4b21      	ldr	r3, [pc, #132]	; (8006618 <__swbuf_r+0x98>)
 8006594:	429c      	cmp	r4, r3
 8006596:	d12b      	bne.n	80065f0 <__swbuf_r+0x70>
 8006598:	686c      	ldr	r4, [r5, #4]
 800659a:	69a3      	ldr	r3, [r4, #24]
 800659c:	60a3      	str	r3, [r4, #8]
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	071a      	lsls	r2, r3, #28
 80065a2:	d52f      	bpl.n	8006604 <__swbuf_r+0x84>
 80065a4:	6923      	ldr	r3, [r4, #16]
 80065a6:	b36b      	cbz	r3, 8006604 <__swbuf_r+0x84>
 80065a8:	6923      	ldr	r3, [r4, #16]
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	1ac0      	subs	r0, r0, r3
 80065ae:	6963      	ldr	r3, [r4, #20]
 80065b0:	b2f6      	uxtb	r6, r6
 80065b2:	4283      	cmp	r3, r0
 80065b4:	4637      	mov	r7, r6
 80065b6:	dc04      	bgt.n	80065c2 <__swbuf_r+0x42>
 80065b8:	4621      	mov	r1, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	f7fe ffd0 	bl	8005560 <_fflush_r>
 80065c0:	bb30      	cbnz	r0, 8006610 <__swbuf_r+0x90>
 80065c2:	68a3      	ldr	r3, [r4, #8]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	60a3      	str	r3, [r4, #8]
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	6022      	str	r2, [r4, #0]
 80065ce:	701e      	strb	r6, [r3, #0]
 80065d0:	6963      	ldr	r3, [r4, #20]
 80065d2:	3001      	adds	r0, #1
 80065d4:	4283      	cmp	r3, r0
 80065d6:	d004      	beq.n	80065e2 <__swbuf_r+0x62>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	07db      	lsls	r3, r3, #31
 80065dc:	d506      	bpl.n	80065ec <__swbuf_r+0x6c>
 80065de:	2e0a      	cmp	r6, #10
 80065e0:	d104      	bne.n	80065ec <__swbuf_r+0x6c>
 80065e2:	4621      	mov	r1, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	f7fe ffbb 	bl	8005560 <_fflush_r>
 80065ea:	b988      	cbnz	r0, 8006610 <__swbuf_r+0x90>
 80065ec:	4638      	mov	r0, r7
 80065ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <__swbuf_r+0x9c>)
 80065f2:	429c      	cmp	r4, r3
 80065f4:	d101      	bne.n	80065fa <__swbuf_r+0x7a>
 80065f6:	68ac      	ldr	r4, [r5, #8]
 80065f8:	e7cf      	b.n	800659a <__swbuf_r+0x1a>
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <__swbuf_r+0xa0>)
 80065fc:	429c      	cmp	r4, r3
 80065fe:	bf08      	it	eq
 8006600:	68ec      	ldreq	r4, [r5, #12]
 8006602:	e7ca      	b.n	800659a <__swbuf_r+0x1a>
 8006604:	4621      	mov	r1, r4
 8006606:	4628      	mov	r0, r5
 8006608:	f000 f81e 	bl	8006648 <__swsetup_r>
 800660c:	2800      	cmp	r0, #0
 800660e:	d0cb      	beq.n	80065a8 <__swbuf_r+0x28>
 8006610:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006614:	e7ea      	b.n	80065ec <__swbuf_r+0x6c>
 8006616:	bf00      	nop
 8006618:	080083cc 	.word	0x080083cc
 800661c:	080083ec 	.word	0x080083ec
 8006620:	080083ac 	.word	0x080083ac

08006624 <_write_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d07      	ldr	r5, [pc, #28]	; (8006644 <_write_r+0x20>)
 8006628:	4604      	mov	r4, r0
 800662a:	4608      	mov	r0, r1
 800662c:	4611      	mov	r1, r2
 800662e:	2200      	movs	r2, #0
 8006630:	602a      	str	r2, [r5, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	f7fa ff9e 	bl	8001574 <_write>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_write_r+0x1e>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_write_r+0x1e>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	200002ec 	.word	0x200002ec

08006648 <__swsetup_r>:
 8006648:	4b32      	ldr	r3, [pc, #200]	; (8006714 <__swsetup_r+0xcc>)
 800664a:	b570      	push	{r4, r5, r6, lr}
 800664c:	681d      	ldr	r5, [r3, #0]
 800664e:	4606      	mov	r6, r0
 8006650:	460c      	mov	r4, r1
 8006652:	b125      	cbz	r5, 800665e <__swsetup_r+0x16>
 8006654:	69ab      	ldr	r3, [r5, #24]
 8006656:	b913      	cbnz	r3, 800665e <__swsetup_r+0x16>
 8006658:	4628      	mov	r0, r5
 800665a:	f7ff f815 	bl	8005688 <__sinit>
 800665e:	4b2e      	ldr	r3, [pc, #184]	; (8006718 <__swsetup_r+0xd0>)
 8006660:	429c      	cmp	r4, r3
 8006662:	d10f      	bne.n	8006684 <__swsetup_r+0x3c>
 8006664:	686c      	ldr	r4, [r5, #4]
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800666c:	0719      	lsls	r1, r3, #28
 800666e:	d42c      	bmi.n	80066ca <__swsetup_r+0x82>
 8006670:	06dd      	lsls	r5, r3, #27
 8006672:	d411      	bmi.n	8006698 <__swsetup_r+0x50>
 8006674:	2309      	movs	r3, #9
 8006676:	6033      	str	r3, [r6, #0]
 8006678:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800667c:	81a3      	strh	r3, [r4, #12]
 800667e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006682:	e03e      	b.n	8006702 <__swsetup_r+0xba>
 8006684:	4b25      	ldr	r3, [pc, #148]	; (800671c <__swsetup_r+0xd4>)
 8006686:	429c      	cmp	r4, r3
 8006688:	d101      	bne.n	800668e <__swsetup_r+0x46>
 800668a:	68ac      	ldr	r4, [r5, #8]
 800668c:	e7eb      	b.n	8006666 <__swsetup_r+0x1e>
 800668e:	4b24      	ldr	r3, [pc, #144]	; (8006720 <__swsetup_r+0xd8>)
 8006690:	429c      	cmp	r4, r3
 8006692:	bf08      	it	eq
 8006694:	68ec      	ldreq	r4, [r5, #12]
 8006696:	e7e6      	b.n	8006666 <__swsetup_r+0x1e>
 8006698:	0758      	lsls	r0, r3, #29
 800669a:	d512      	bpl.n	80066c2 <__swsetup_r+0x7a>
 800669c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800669e:	b141      	cbz	r1, 80066b2 <__swsetup_r+0x6a>
 80066a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066a4:	4299      	cmp	r1, r3
 80066a6:	d002      	beq.n	80066ae <__swsetup_r+0x66>
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7ff f93d 	bl	8005928 <_free_r>
 80066ae:	2300      	movs	r3, #0
 80066b0:	6363      	str	r3, [r4, #52]	; 0x34
 80066b2:	89a3      	ldrh	r3, [r4, #12]
 80066b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	2300      	movs	r3, #0
 80066bc:	6063      	str	r3, [r4, #4]
 80066be:	6923      	ldr	r3, [r4, #16]
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	f043 0308 	orr.w	r3, r3, #8
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	b94b      	cbnz	r3, 80066e2 <__swsetup_r+0x9a>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d8:	d003      	beq.n	80066e2 <__swsetup_r+0x9a>
 80066da:	4621      	mov	r1, r4
 80066dc:	4630      	mov	r0, r6
 80066de:	f7ff f8bd 	bl	800585c <__smakebuf_r>
 80066e2:	89a0      	ldrh	r0, [r4, #12]
 80066e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066e8:	f010 0301 	ands.w	r3, r0, #1
 80066ec:	d00a      	beq.n	8006704 <__swsetup_r+0xbc>
 80066ee:	2300      	movs	r3, #0
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	6963      	ldr	r3, [r4, #20]
 80066f4:	425b      	negs	r3, r3
 80066f6:	61a3      	str	r3, [r4, #24]
 80066f8:	6923      	ldr	r3, [r4, #16]
 80066fa:	b943      	cbnz	r3, 800670e <__swsetup_r+0xc6>
 80066fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006700:	d1ba      	bne.n	8006678 <__swsetup_r+0x30>
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	0781      	lsls	r1, r0, #30
 8006706:	bf58      	it	pl
 8006708:	6963      	ldrpl	r3, [r4, #20]
 800670a:	60a3      	str	r3, [r4, #8]
 800670c:	e7f4      	b.n	80066f8 <__swsetup_r+0xb0>
 800670e:	2000      	movs	r0, #0
 8006710:	e7f7      	b.n	8006702 <__swsetup_r+0xba>
 8006712:	bf00      	nop
 8006714:	20000014 	.word	0x20000014
 8006718:	080083cc 	.word	0x080083cc
 800671c:	080083ec 	.word	0x080083ec
 8006720:	080083ac 	.word	0x080083ac

08006724 <__assert_func>:
 8006724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006726:	4614      	mov	r4, r2
 8006728:	461a      	mov	r2, r3
 800672a:	4b09      	ldr	r3, [pc, #36]	; (8006750 <__assert_func+0x2c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4605      	mov	r5, r0
 8006730:	68d8      	ldr	r0, [r3, #12]
 8006732:	b14c      	cbz	r4, 8006748 <__assert_func+0x24>
 8006734:	4b07      	ldr	r3, [pc, #28]	; (8006754 <__assert_func+0x30>)
 8006736:	9100      	str	r1, [sp, #0]
 8006738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800673c:	4906      	ldr	r1, [pc, #24]	; (8006758 <__assert_func+0x34>)
 800673e:	462b      	mov	r3, r5
 8006740:	f000 fe98 	bl	8007474 <fiprintf>
 8006744:	f001 fc11 	bl	8007f6a <abort>
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <__assert_func+0x38>)
 800674a:	461c      	mov	r4, r3
 800674c:	e7f3      	b.n	8006736 <__assert_func+0x12>
 800674e:	bf00      	nop
 8006750:	20000014 	.word	0x20000014
 8006754:	08008444 	.word	0x08008444
 8006758:	08008451 	.word	0x08008451
 800675c:	0800847f 	.word	0x0800847f

08006760 <_close_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d06      	ldr	r5, [pc, #24]	; (800677c <_close_r+0x1c>)
 8006764:	2300      	movs	r3, #0
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	602b      	str	r3, [r5, #0]
 800676c:	f7fa ff1e 	bl	80015ac <_close>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_close_r+0x1a>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	b103      	cbz	r3, 800677a <_close_r+0x1a>
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	200002ec 	.word	0x200002ec

08006780 <quorem>:
 8006780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006784:	6903      	ldr	r3, [r0, #16]
 8006786:	690c      	ldr	r4, [r1, #16]
 8006788:	42a3      	cmp	r3, r4
 800678a:	4607      	mov	r7, r0
 800678c:	f2c0 8081 	blt.w	8006892 <quorem+0x112>
 8006790:	3c01      	subs	r4, #1
 8006792:	f101 0814 	add.w	r8, r1, #20
 8006796:	f100 0514 	add.w	r5, r0, #20
 800679a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067a8:	3301      	adds	r3, #1
 80067aa:	429a      	cmp	r2, r3
 80067ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80067b8:	d331      	bcc.n	800681e <quorem+0x9e>
 80067ba:	f04f 0e00 	mov.w	lr, #0
 80067be:	4640      	mov	r0, r8
 80067c0:	46ac      	mov	ip, r5
 80067c2:	46f2      	mov	sl, lr
 80067c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80067c8:	b293      	uxth	r3, r2
 80067ca:	fb06 e303 	mla	r3, r6, r3, lr
 80067ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	ebaa 0303 	sub.w	r3, sl, r3
 80067d8:	f8dc a000 	ldr.w	sl, [ip]
 80067dc:	0c12      	lsrs	r2, r2, #16
 80067de:	fa13 f38a 	uxtah	r3, r3, sl
 80067e2:	fb06 e202 	mla	r2, r6, r2, lr
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	9b00      	ldr	r3, [sp, #0]
 80067ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067ee:	b292      	uxth	r2, r2
 80067f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80067fc:	4581      	cmp	r9, r0
 80067fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006802:	f84c 3b04 	str.w	r3, [ip], #4
 8006806:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800680a:	d2db      	bcs.n	80067c4 <quorem+0x44>
 800680c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006810:	b92b      	cbnz	r3, 800681e <quorem+0x9e>
 8006812:	9b01      	ldr	r3, [sp, #4]
 8006814:	3b04      	subs	r3, #4
 8006816:	429d      	cmp	r5, r3
 8006818:	461a      	mov	r2, r3
 800681a:	d32e      	bcc.n	800687a <quorem+0xfa>
 800681c:	613c      	str	r4, [r7, #16]
 800681e:	4638      	mov	r0, r7
 8006820:	f001 f912 	bl	8007a48 <__mcmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	db24      	blt.n	8006872 <quorem+0xf2>
 8006828:	3601      	adds	r6, #1
 800682a:	4628      	mov	r0, r5
 800682c:	f04f 0c00 	mov.w	ip, #0
 8006830:	f858 2b04 	ldr.w	r2, [r8], #4
 8006834:	f8d0 e000 	ldr.w	lr, [r0]
 8006838:	b293      	uxth	r3, r2
 800683a:	ebac 0303 	sub.w	r3, ip, r3
 800683e:	0c12      	lsrs	r2, r2, #16
 8006840:	fa13 f38e 	uxtah	r3, r3, lr
 8006844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800684c:	b29b      	uxth	r3, r3
 800684e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006852:	45c1      	cmp	r9, r8
 8006854:	f840 3b04 	str.w	r3, [r0], #4
 8006858:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800685c:	d2e8      	bcs.n	8006830 <quorem+0xb0>
 800685e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006866:	b922      	cbnz	r2, 8006872 <quorem+0xf2>
 8006868:	3b04      	subs	r3, #4
 800686a:	429d      	cmp	r5, r3
 800686c:	461a      	mov	r2, r3
 800686e:	d30a      	bcc.n	8006886 <quorem+0x106>
 8006870:	613c      	str	r4, [r7, #16]
 8006872:	4630      	mov	r0, r6
 8006874:	b003      	add	sp, #12
 8006876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	3b04      	subs	r3, #4
 800687e:	2a00      	cmp	r2, #0
 8006880:	d1cc      	bne.n	800681c <quorem+0x9c>
 8006882:	3c01      	subs	r4, #1
 8006884:	e7c7      	b.n	8006816 <quorem+0x96>
 8006886:	6812      	ldr	r2, [r2, #0]
 8006888:	3b04      	subs	r3, #4
 800688a:	2a00      	cmp	r2, #0
 800688c:	d1f0      	bne.n	8006870 <quorem+0xf0>
 800688e:	3c01      	subs	r4, #1
 8006890:	e7eb      	b.n	800686a <quorem+0xea>
 8006892:	2000      	movs	r0, #0
 8006894:	e7ee      	b.n	8006874 <quorem+0xf4>
	...

08006898 <_dtoa_r>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	ed2d 8b04 	vpush	{d8-d9}
 80068a0:	ec57 6b10 	vmov	r6, r7, d0
 80068a4:	b093      	sub	sp, #76	; 0x4c
 80068a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80068ac:	9106      	str	r1, [sp, #24]
 80068ae:	ee10 aa10 	vmov	sl, s0
 80068b2:	4604      	mov	r4, r0
 80068b4:	9209      	str	r2, [sp, #36]	; 0x24
 80068b6:	930c      	str	r3, [sp, #48]	; 0x30
 80068b8:	46bb      	mov	fp, r7
 80068ba:	b975      	cbnz	r5, 80068da <_dtoa_r+0x42>
 80068bc:	2010      	movs	r0, #16
 80068be:	f7ff f80d 	bl	80058dc <malloc>
 80068c2:	4602      	mov	r2, r0
 80068c4:	6260      	str	r0, [r4, #36]	; 0x24
 80068c6:	b920      	cbnz	r0, 80068d2 <_dtoa_r+0x3a>
 80068c8:	4ba7      	ldr	r3, [pc, #668]	; (8006b68 <_dtoa_r+0x2d0>)
 80068ca:	21ea      	movs	r1, #234	; 0xea
 80068cc:	48a7      	ldr	r0, [pc, #668]	; (8006b6c <_dtoa_r+0x2d4>)
 80068ce:	f7ff ff29 	bl	8006724 <__assert_func>
 80068d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068d6:	6005      	str	r5, [r0, #0]
 80068d8:	60c5      	str	r5, [r0, #12]
 80068da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068dc:	6819      	ldr	r1, [r3, #0]
 80068de:	b151      	cbz	r1, 80068f6 <_dtoa_r+0x5e>
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	604a      	str	r2, [r1, #4]
 80068e4:	2301      	movs	r3, #1
 80068e6:	4093      	lsls	r3, r2
 80068e8:	608b      	str	r3, [r1, #8]
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fe6a 	bl	80075c4 <_Bfree>
 80068f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	1e3b      	subs	r3, r7, #0
 80068f8:	bfaa      	itet	ge
 80068fa:	2300      	movge	r3, #0
 80068fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006900:	f8c8 3000 	strge.w	r3, [r8]
 8006904:	4b9a      	ldr	r3, [pc, #616]	; (8006b70 <_dtoa_r+0x2d8>)
 8006906:	bfbc      	itt	lt
 8006908:	2201      	movlt	r2, #1
 800690a:	f8c8 2000 	strlt.w	r2, [r8]
 800690e:	ea33 030b 	bics.w	r3, r3, fp
 8006912:	d11b      	bne.n	800694c <_dtoa_r+0xb4>
 8006914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006916:	f242 730f 	movw	r3, #9999	; 0x270f
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006920:	4333      	orrs	r3, r6
 8006922:	f000 8592 	beq.w	800744a <_dtoa_r+0xbb2>
 8006926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006928:	b963      	cbnz	r3, 8006944 <_dtoa_r+0xac>
 800692a:	4b92      	ldr	r3, [pc, #584]	; (8006b74 <_dtoa_r+0x2dc>)
 800692c:	e022      	b.n	8006974 <_dtoa_r+0xdc>
 800692e:	4b92      	ldr	r3, [pc, #584]	; (8006b78 <_dtoa_r+0x2e0>)
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	3308      	adds	r3, #8
 8006934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	9801      	ldr	r0, [sp, #4]
 800693a:	b013      	add	sp, #76	; 0x4c
 800693c:	ecbd 8b04 	vpop	{d8-d9}
 8006940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006944:	4b8b      	ldr	r3, [pc, #556]	; (8006b74 <_dtoa_r+0x2dc>)
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	3303      	adds	r3, #3
 800694a:	e7f3      	b.n	8006934 <_dtoa_r+0x9c>
 800694c:	2200      	movs	r2, #0
 800694e:	2300      	movs	r3, #0
 8006950:	4650      	mov	r0, sl
 8006952:	4659      	mov	r1, fp
 8006954:	f7fa f890 	bl	8000a78 <__aeabi_dcmpeq>
 8006958:	ec4b ab19 	vmov	d9, sl, fp
 800695c:	4680      	mov	r8, r0
 800695e:	b158      	cbz	r0, 8006978 <_dtoa_r+0xe0>
 8006960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006962:	2301      	movs	r3, #1
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 856b 	beq.w	8007444 <_dtoa_r+0xbac>
 800696e:	4883      	ldr	r0, [pc, #524]	; (8006b7c <_dtoa_r+0x2e4>)
 8006970:	6018      	str	r0, [r3, #0]
 8006972:	1e43      	subs	r3, r0, #1
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	e7df      	b.n	8006938 <_dtoa_r+0xa0>
 8006978:	ec4b ab10 	vmov	d0, sl, fp
 800697c:	aa10      	add	r2, sp, #64	; 0x40
 800697e:	a911      	add	r1, sp, #68	; 0x44
 8006980:	4620      	mov	r0, r4
 8006982:	f001 f907 	bl	8007b94 <__d2b>
 8006986:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800698a:	ee08 0a10 	vmov	s16, r0
 800698e:	2d00      	cmp	r5, #0
 8006990:	f000 8084 	beq.w	8006a9c <_dtoa_r+0x204>
 8006994:	ee19 3a90 	vmov	r3, s19
 8006998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800699c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80069a0:	4656      	mov	r6, sl
 80069a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80069a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80069ae:	4b74      	ldr	r3, [pc, #464]	; (8006b80 <_dtoa_r+0x2e8>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	4630      	mov	r0, r6
 80069b4:	4639      	mov	r1, r7
 80069b6:	f7f9 fc3f 	bl	8000238 <__aeabi_dsub>
 80069ba:	a365      	add	r3, pc, #404	; (adr r3, 8006b50 <_dtoa_r+0x2b8>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fdf2 	bl	80005a8 <__aeabi_dmul>
 80069c4:	a364      	add	r3, pc, #400	; (adr r3, 8006b58 <_dtoa_r+0x2c0>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	f7f9 fc37 	bl	800023c <__adddf3>
 80069ce:	4606      	mov	r6, r0
 80069d0:	4628      	mov	r0, r5
 80069d2:	460f      	mov	r7, r1
 80069d4:	f7f9 fd7e 	bl	80004d4 <__aeabi_i2d>
 80069d8:	a361      	add	r3, pc, #388	; (adr r3, 8006b60 <_dtoa_r+0x2c8>)
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f7f9 fde3 	bl	80005a8 <__aeabi_dmul>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4630      	mov	r0, r6
 80069e8:	4639      	mov	r1, r7
 80069ea:	f7f9 fc27 	bl	800023c <__adddf3>
 80069ee:	4606      	mov	r6, r0
 80069f0:	460f      	mov	r7, r1
 80069f2:	f7fa f889 	bl	8000b08 <__aeabi_d2iz>
 80069f6:	2200      	movs	r2, #0
 80069f8:	9000      	str	r0, [sp, #0]
 80069fa:	2300      	movs	r3, #0
 80069fc:	4630      	mov	r0, r6
 80069fe:	4639      	mov	r1, r7
 8006a00:	f7fa f844 	bl	8000a8c <__aeabi_dcmplt>
 8006a04:	b150      	cbz	r0, 8006a1c <_dtoa_r+0x184>
 8006a06:	9800      	ldr	r0, [sp, #0]
 8006a08:	f7f9 fd64 	bl	80004d4 <__aeabi_i2d>
 8006a0c:	4632      	mov	r2, r6
 8006a0e:	463b      	mov	r3, r7
 8006a10:	f7fa f832 	bl	8000a78 <__aeabi_dcmpeq>
 8006a14:	b910      	cbnz	r0, 8006a1c <_dtoa_r+0x184>
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	9b00      	ldr	r3, [sp, #0]
 8006a1e:	2b16      	cmp	r3, #22
 8006a20:	d85a      	bhi.n	8006ad8 <_dtoa_r+0x240>
 8006a22:	9a00      	ldr	r2, [sp, #0]
 8006a24:	4b57      	ldr	r3, [pc, #348]	; (8006b84 <_dtoa_r+0x2ec>)
 8006a26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	ec51 0b19 	vmov	r0, r1, d9
 8006a32:	f7fa f82b 	bl	8000a8c <__aeabi_dcmplt>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d050      	beq.n	8006adc <_dtoa_r+0x244>
 8006a3a:	9b00      	ldr	r3, [sp, #0]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a46:	1b5d      	subs	r5, r3, r5
 8006a48:	1e6b      	subs	r3, r5, #1
 8006a4a:	9305      	str	r3, [sp, #20]
 8006a4c:	bf45      	ittet	mi
 8006a4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006a52:	9304      	strmi	r3, [sp, #16]
 8006a54:	2300      	movpl	r3, #0
 8006a56:	2300      	movmi	r3, #0
 8006a58:	bf4c      	ite	mi
 8006a5a:	9305      	strmi	r3, [sp, #20]
 8006a5c:	9304      	strpl	r3, [sp, #16]
 8006a5e:	9b00      	ldr	r3, [sp, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	db3d      	blt.n	8006ae0 <_dtoa_r+0x248>
 8006a64:	9b05      	ldr	r3, [sp, #20]
 8006a66:	9a00      	ldr	r2, [sp, #0]
 8006a68:	920a      	str	r2, [sp, #40]	; 0x28
 8006a6a:	4413      	add	r3, r2
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9307      	str	r3, [sp, #28]
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	2b09      	cmp	r3, #9
 8006a76:	f200 8089 	bhi.w	8006b8c <_dtoa_r+0x2f4>
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	bfc4      	itt	gt
 8006a7e:	3b04      	subgt	r3, #4
 8006a80:	9306      	strgt	r3, [sp, #24]
 8006a82:	9b06      	ldr	r3, [sp, #24]
 8006a84:	f1a3 0302 	sub.w	r3, r3, #2
 8006a88:	bfcc      	ite	gt
 8006a8a:	2500      	movgt	r5, #0
 8006a8c:	2501      	movle	r5, #1
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	f200 8087 	bhi.w	8006ba2 <_dtoa_r+0x30a>
 8006a94:	e8df f003 	tbb	[pc, r3]
 8006a98:	59383a2d 	.word	0x59383a2d
 8006a9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006aa0:	441d      	add	r5, r3
 8006aa2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	bfc1      	itttt	gt
 8006aaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006aae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ab2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006ab6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006aba:	bfda      	itte	le
 8006abc:	f1c3 0320 	rsble	r3, r3, #32
 8006ac0:	fa06 f003 	lslle.w	r0, r6, r3
 8006ac4:	4318      	orrgt	r0, r3
 8006ac6:	f7f9 fcf5 	bl	80004b4 <__aeabi_ui2d>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4606      	mov	r6, r0
 8006ace:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006ad2:	3d01      	subs	r5, #1
 8006ad4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ad6:	e76a      	b.n	80069ae <_dtoa_r+0x116>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e7b2      	b.n	8006a42 <_dtoa_r+0x1aa>
 8006adc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ade:	e7b1      	b.n	8006a44 <_dtoa_r+0x1ac>
 8006ae0:	9b04      	ldr	r3, [sp, #16]
 8006ae2:	9a00      	ldr	r2, [sp, #0]
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	9304      	str	r3, [sp, #16]
 8006ae8:	4253      	negs	r3, r2
 8006aea:	9307      	str	r3, [sp, #28]
 8006aec:	2300      	movs	r3, #0
 8006aee:	930a      	str	r3, [sp, #40]	; 0x28
 8006af0:	e7bf      	b.n	8006a72 <_dtoa_r+0x1da>
 8006af2:	2300      	movs	r3, #0
 8006af4:	9308      	str	r3, [sp, #32]
 8006af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dc55      	bgt.n	8006ba8 <_dtoa_r+0x310>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b02:	461a      	mov	r2, r3
 8006b04:	9209      	str	r2, [sp, #36]	; 0x24
 8006b06:	e00c      	b.n	8006b22 <_dtoa_r+0x28a>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e7f3      	b.n	8006af4 <_dtoa_r+0x25c>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b10:	9308      	str	r3, [sp, #32]
 8006b12:	9b00      	ldr	r3, [sp, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	9302      	str	r3, [sp, #8]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	9303      	str	r3, [sp, #12]
 8006b1e:	bfb8      	it	lt
 8006b20:	2301      	movlt	r3, #1
 8006b22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b24:	2200      	movs	r2, #0
 8006b26:	6042      	str	r2, [r0, #4]
 8006b28:	2204      	movs	r2, #4
 8006b2a:	f102 0614 	add.w	r6, r2, #20
 8006b2e:	429e      	cmp	r6, r3
 8006b30:	6841      	ldr	r1, [r0, #4]
 8006b32:	d93d      	bls.n	8006bb0 <_dtoa_r+0x318>
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 fd05 	bl	8007544 <_Balloc>
 8006b3a:	9001      	str	r0, [sp, #4]
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d13b      	bne.n	8006bb8 <_dtoa_r+0x320>
 8006b40:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <_dtoa_r+0x2f0>)
 8006b42:	4602      	mov	r2, r0
 8006b44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b48:	e6c0      	b.n	80068cc <_dtoa_r+0x34>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e7df      	b.n	8006b0e <_dtoa_r+0x276>
 8006b4e:	bf00      	nop
 8006b50:	636f4361 	.word	0x636f4361
 8006b54:	3fd287a7 	.word	0x3fd287a7
 8006b58:	8b60c8b3 	.word	0x8b60c8b3
 8006b5c:	3fc68a28 	.word	0x3fc68a28
 8006b60:	509f79fb 	.word	0x509f79fb
 8006b64:	3fd34413 	.word	0x3fd34413
 8006b68:	0800858e 	.word	0x0800858e
 8006b6c:	080085a5 	.word	0x080085a5
 8006b70:	7ff00000 	.word	0x7ff00000
 8006b74:	0800858a 	.word	0x0800858a
 8006b78:	08008581 	.word	0x08008581
 8006b7c:	08008421 	.word	0x08008421
 8006b80:	3ff80000 	.word	0x3ff80000
 8006b84:	080086a0 	.word	0x080086a0
 8006b88:	08008600 	.word	0x08008600
 8006b8c:	2501      	movs	r5, #1
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9306      	str	r3, [sp, #24]
 8006b92:	9508      	str	r5, [sp, #32]
 8006b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2312      	movs	r3, #18
 8006ba0:	e7b0      	b.n	8006b04 <_dtoa_r+0x26c>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	9308      	str	r3, [sp, #32]
 8006ba6:	e7f5      	b.n	8006b94 <_dtoa_r+0x2fc>
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bae:	e7b8      	b.n	8006b22 <_dtoa_r+0x28a>
 8006bb0:	3101      	adds	r1, #1
 8006bb2:	6041      	str	r1, [r0, #4]
 8006bb4:	0052      	lsls	r2, r2, #1
 8006bb6:	e7b8      	b.n	8006b2a <_dtoa_r+0x292>
 8006bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bba:	9a01      	ldr	r2, [sp, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	2b0e      	cmp	r3, #14
 8006bc2:	f200 809d 	bhi.w	8006d00 <_dtoa_r+0x468>
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	f000 809a 	beq.w	8006d00 <_dtoa_r+0x468>
 8006bcc:	9b00      	ldr	r3, [sp, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dd32      	ble.n	8006c38 <_dtoa_r+0x3a0>
 8006bd2:	4ab7      	ldr	r2, [pc, #732]	; (8006eb0 <_dtoa_r+0x618>)
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006be0:	9b00      	ldr	r3, [sp, #0]
 8006be2:	05d8      	lsls	r0, r3, #23
 8006be4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006be8:	d516      	bpl.n	8006c18 <_dtoa_r+0x380>
 8006bea:	4bb2      	ldr	r3, [pc, #712]	; (8006eb4 <_dtoa_r+0x61c>)
 8006bec:	ec51 0b19 	vmov	r0, r1, d9
 8006bf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bf4:	f7f9 fe02 	bl	80007fc <__aeabi_ddiv>
 8006bf8:	f007 070f 	and.w	r7, r7, #15
 8006bfc:	4682      	mov	sl, r0
 8006bfe:	468b      	mov	fp, r1
 8006c00:	2503      	movs	r5, #3
 8006c02:	4eac      	ldr	r6, [pc, #688]	; (8006eb4 <_dtoa_r+0x61c>)
 8006c04:	b957      	cbnz	r7, 8006c1c <_dtoa_r+0x384>
 8006c06:	4642      	mov	r2, r8
 8006c08:	464b      	mov	r3, r9
 8006c0a:	4650      	mov	r0, sl
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	f7f9 fdf5 	bl	80007fc <__aeabi_ddiv>
 8006c12:	4682      	mov	sl, r0
 8006c14:	468b      	mov	fp, r1
 8006c16:	e028      	b.n	8006c6a <_dtoa_r+0x3d2>
 8006c18:	2502      	movs	r5, #2
 8006c1a:	e7f2      	b.n	8006c02 <_dtoa_r+0x36a>
 8006c1c:	07f9      	lsls	r1, r7, #31
 8006c1e:	d508      	bpl.n	8006c32 <_dtoa_r+0x39a>
 8006c20:	4640      	mov	r0, r8
 8006c22:	4649      	mov	r1, r9
 8006c24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c28:	f7f9 fcbe 	bl	80005a8 <__aeabi_dmul>
 8006c2c:	3501      	adds	r5, #1
 8006c2e:	4680      	mov	r8, r0
 8006c30:	4689      	mov	r9, r1
 8006c32:	107f      	asrs	r7, r7, #1
 8006c34:	3608      	adds	r6, #8
 8006c36:	e7e5      	b.n	8006c04 <_dtoa_r+0x36c>
 8006c38:	f000 809b 	beq.w	8006d72 <_dtoa_r+0x4da>
 8006c3c:	9b00      	ldr	r3, [sp, #0]
 8006c3e:	4f9d      	ldr	r7, [pc, #628]	; (8006eb4 <_dtoa_r+0x61c>)
 8006c40:	425e      	negs	r6, r3
 8006c42:	4b9b      	ldr	r3, [pc, #620]	; (8006eb0 <_dtoa_r+0x618>)
 8006c44:	f006 020f 	and.w	r2, r6, #15
 8006c48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	ec51 0b19 	vmov	r0, r1, d9
 8006c54:	f7f9 fca8 	bl	80005a8 <__aeabi_dmul>
 8006c58:	1136      	asrs	r6, r6, #4
 8006c5a:	4682      	mov	sl, r0
 8006c5c:	468b      	mov	fp, r1
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2502      	movs	r5, #2
 8006c62:	2e00      	cmp	r6, #0
 8006c64:	d17a      	bne.n	8006d5c <_dtoa_r+0x4c4>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1d3      	bne.n	8006c12 <_dtoa_r+0x37a>
 8006c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8082 	beq.w	8006d76 <_dtoa_r+0x4de>
 8006c72:	4b91      	ldr	r3, [pc, #580]	; (8006eb8 <_dtoa_r+0x620>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	4650      	mov	r0, sl
 8006c78:	4659      	mov	r1, fp
 8006c7a:	f7f9 ff07 	bl	8000a8c <__aeabi_dcmplt>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d079      	beq.n	8006d76 <_dtoa_r+0x4de>
 8006c82:	9b03      	ldr	r3, [sp, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d076      	beq.n	8006d76 <_dtoa_r+0x4de>
 8006c88:	9b02      	ldr	r3, [sp, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dd36      	ble.n	8006cfc <_dtoa_r+0x464>
 8006c8e:	9b00      	ldr	r3, [sp, #0]
 8006c90:	4650      	mov	r0, sl
 8006c92:	4659      	mov	r1, fp
 8006c94:	1e5f      	subs	r7, r3, #1
 8006c96:	2200      	movs	r2, #0
 8006c98:	4b88      	ldr	r3, [pc, #544]	; (8006ebc <_dtoa_r+0x624>)
 8006c9a:	f7f9 fc85 	bl	80005a8 <__aeabi_dmul>
 8006c9e:	9e02      	ldr	r6, [sp, #8]
 8006ca0:	4682      	mov	sl, r0
 8006ca2:	468b      	mov	fp, r1
 8006ca4:	3501      	adds	r5, #1
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f7f9 fc14 	bl	80004d4 <__aeabi_i2d>
 8006cac:	4652      	mov	r2, sl
 8006cae:	465b      	mov	r3, fp
 8006cb0:	f7f9 fc7a 	bl	80005a8 <__aeabi_dmul>
 8006cb4:	4b82      	ldr	r3, [pc, #520]	; (8006ec0 <_dtoa_r+0x628>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f7f9 fac0 	bl	800023c <__adddf3>
 8006cbc:	46d0      	mov	r8, sl
 8006cbe:	46d9      	mov	r9, fp
 8006cc0:	4682      	mov	sl, r0
 8006cc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d158      	bne.n	8006d7c <_dtoa_r+0x4e4>
 8006cca:	4b7e      	ldr	r3, [pc, #504]	; (8006ec4 <_dtoa_r+0x62c>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 fab1 	bl	8000238 <__aeabi_dsub>
 8006cd6:	4652      	mov	r2, sl
 8006cd8:	465b      	mov	r3, fp
 8006cda:	4680      	mov	r8, r0
 8006cdc:	4689      	mov	r9, r1
 8006cde:	f7f9 fef3 	bl	8000ac8 <__aeabi_dcmpgt>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	f040 8295 	bne.w	8007212 <_dtoa_r+0x97a>
 8006ce8:	4652      	mov	r2, sl
 8006cea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	f7f9 fecb 	bl	8000a8c <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 8289 	bne.w	800720e <_dtoa_r+0x976>
 8006cfc:	ec5b ab19 	vmov	sl, fp, d9
 8006d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f2c0 8148 	blt.w	8006f98 <_dtoa_r+0x700>
 8006d08:	9a00      	ldr	r2, [sp, #0]
 8006d0a:	2a0e      	cmp	r2, #14
 8006d0c:	f300 8144 	bgt.w	8006f98 <_dtoa_r+0x700>
 8006d10:	4b67      	ldr	r3, [pc, #412]	; (8006eb0 <_dtoa_r+0x618>)
 8006d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f280 80d5 	bge.w	8006ecc <_dtoa_r+0x634>
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f300 80d1 	bgt.w	8006ecc <_dtoa_r+0x634>
 8006d2a:	f040 826f 	bne.w	800720c <_dtoa_r+0x974>
 8006d2e:	4b65      	ldr	r3, [pc, #404]	; (8006ec4 <_dtoa_r+0x62c>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	4640      	mov	r0, r8
 8006d34:	4649      	mov	r1, r9
 8006d36:	f7f9 fc37 	bl	80005a8 <__aeabi_dmul>
 8006d3a:	4652      	mov	r2, sl
 8006d3c:	465b      	mov	r3, fp
 8006d3e:	f7f9 feb9 	bl	8000ab4 <__aeabi_dcmpge>
 8006d42:	9e03      	ldr	r6, [sp, #12]
 8006d44:	4637      	mov	r7, r6
 8006d46:	2800      	cmp	r0, #0
 8006d48:	f040 8245 	bne.w	80071d6 <_dtoa_r+0x93e>
 8006d4c:	9d01      	ldr	r5, [sp, #4]
 8006d4e:	2331      	movs	r3, #49	; 0x31
 8006d50:	f805 3b01 	strb.w	r3, [r5], #1
 8006d54:	9b00      	ldr	r3, [sp, #0]
 8006d56:	3301      	adds	r3, #1
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	e240      	b.n	80071de <_dtoa_r+0x946>
 8006d5c:	07f2      	lsls	r2, r6, #31
 8006d5e:	d505      	bpl.n	8006d6c <_dtoa_r+0x4d4>
 8006d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d64:	f7f9 fc20 	bl	80005a8 <__aeabi_dmul>
 8006d68:	3501      	adds	r5, #1
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	1076      	asrs	r6, r6, #1
 8006d6e:	3708      	adds	r7, #8
 8006d70:	e777      	b.n	8006c62 <_dtoa_r+0x3ca>
 8006d72:	2502      	movs	r5, #2
 8006d74:	e779      	b.n	8006c6a <_dtoa_r+0x3d2>
 8006d76:	9f00      	ldr	r7, [sp, #0]
 8006d78:	9e03      	ldr	r6, [sp, #12]
 8006d7a:	e794      	b.n	8006ca6 <_dtoa_r+0x40e>
 8006d7c:	9901      	ldr	r1, [sp, #4]
 8006d7e:	4b4c      	ldr	r3, [pc, #304]	; (8006eb0 <_dtoa_r+0x618>)
 8006d80:	4431      	add	r1, r6
 8006d82:	910d      	str	r1, [sp, #52]	; 0x34
 8006d84:	9908      	ldr	r1, [sp, #32]
 8006d86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d8e:	2900      	cmp	r1, #0
 8006d90:	d043      	beq.n	8006e1a <_dtoa_r+0x582>
 8006d92:	494d      	ldr	r1, [pc, #308]	; (8006ec8 <_dtoa_r+0x630>)
 8006d94:	2000      	movs	r0, #0
 8006d96:	f7f9 fd31 	bl	80007fc <__aeabi_ddiv>
 8006d9a:	4652      	mov	r2, sl
 8006d9c:	465b      	mov	r3, fp
 8006d9e:	f7f9 fa4b 	bl	8000238 <__aeabi_dsub>
 8006da2:	9d01      	ldr	r5, [sp, #4]
 8006da4:	4682      	mov	sl, r0
 8006da6:	468b      	mov	fp, r1
 8006da8:	4649      	mov	r1, r9
 8006daa:	4640      	mov	r0, r8
 8006dac:	f7f9 feac 	bl	8000b08 <__aeabi_d2iz>
 8006db0:	4606      	mov	r6, r0
 8006db2:	f7f9 fb8f 	bl	80004d4 <__aeabi_i2d>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4640      	mov	r0, r8
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	f7f9 fa3b 	bl	8000238 <__aeabi_dsub>
 8006dc2:	3630      	adds	r6, #48	; 0x30
 8006dc4:	f805 6b01 	strb.w	r6, [r5], #1
 8006dc8:	4652      	mov	r2, sl
 8006dca:	465b      	mov	r3, fp
 8006dcc:	4680      	mov	r8, r0
 8006dce:	4689      	mov	r9, r1
 8006dd0:	f7f9 fe5c 	bl	8000a8c <__aeabi_dcmplt>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d163      	bne.n	8006ea0 <_dtoa_r+0x608>
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	4936      	ldr	r1, [pc, #216]	; (8006eb8 <_dtoa_r+0x620>)
 8006dde:	2000      	movs	r0, #0
 8006de0:	f7f9 fa2a 	bl	8000238 <__aeabi_dsub>
 8006de4:	4652      	mov	r2, sl
 8006de6:	465b      	mov	r3, fp
 8006de8:	f7f9 fe50 	bl	8000a8c <__aeabi_dcmplt>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f040 80b5 	bne.w	8006f5c <_dtoa_r+0x6c4>
 8006df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006df4:	429d      	cmp	r5, r3
 8006df6:	d081      	beq.n	8006cfc <_dtoa_r+0x464>
 8006df8:	4b30      	ldr	r3, [pc, #192]	; (8006ebc <_dtoa_r+0x624>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	4659      	mov	r1, fp
 8006e00:	f7f9 fbd2 	bl	80005a8 <__aeabi_dmul>
 8006e04:	4b2d      	ldr	r3, [pc, #180]	; (8006ebc <_dtoa_r+0x624>)
 8006e06:	4682      	mov	sl, r0
 8006e08:	468b      	mov	fp, r1
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f7f9 fbca 	bl	80005a8 <__aeabi_dmul>
 8006e14:	4680      	mov	r8, r0
 8006e16:	4689      	mov	r9, r1
 8006e18:	e7c6      	b.n	8006da8 <_dtoa_r+0x510>
 8006e1a:	4650      	mov	r0, sl
 8006e1c:	4659      	mov	r1, fp
 8006e1e:	f7f9 fbc3 	bl	80005a8 <__aeabi_dmul>
 8006e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e24:	9d01      	ldr	r5, [sp, #4]
 8006e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e28:	4682      	mov	sl, r0
 8006e2a:	468b      	mov	fp, r1
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	4640      	mov	r0, r8
 8006e30:	f7f9 fe6a 	bl	8000b08 <__aeabi_d2iz>
 8006e34:	4606      	mov	r6, r0
 8006e36:	f7f9 fb4d 	bl	80004d4 <__aeabi_i2d>
 8006e3a:	3630      	adds	r6, #48	; 0x30
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4640      	mov	r0, r8
 8006e42:	4649      	mov	r1, r9
 8006e44:	f7f9 f9f8 	bl	8000238 <__aeabi_dsub>
 8006e48:	f805 6b01 	strb.w	r6, [r5], #1
 8006e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e4e:	429d      	cmp	r5, r3
 8006e50:	4680      	mov	r8, r0
 8006e52:	4689      	mov	r9, r1
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	d124      	bne.n	8006ea4 <_dtoa_r+0x60c>
 8006e5a:	4b1b      	ldr	r3, [pc, #108]	; (8006ec8 <_dtoa_r+0x630>)
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	4659      	mov	r1, fp
 8006e60:	f7f9 f9ec 	bl	800023c <__adddf3>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	f7f9 fe2c 	bl	8000ac8 <__aeabi_dcmpgt>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d173      	bne.n	8006f5c <_dtoa_r+0x6c4>
 8006e74:	4652      	mov	r2, sl
 8006e76:	465b      	mov	r3, fp
 8006e78:	4913      	ldr	r1, [pc, #76]	; (8006ec8 <_dtoa_r+0x630>)
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	f7f9 f9dc 	bl	8000238 <__aeabi_dsub>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4640      	mov	r0, r8
 8006e86:	4649      	mov	r1, r9
 8006e88:	f7f9 fe00 	bl	8000a8c <__aeabi_dcmplt>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f43f af35 	beq.w	8006cfc <_dtoa_r+0x464>
 8006e92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e94:	1e6b      	subs	r3, r5, #1
 8006e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e9c:	2b30      	cmp	r3, #48	; 0x30
 8006e9e:	d0f8      	beq.n	8006e92 <_dtoa_r+0x5fa>
 8006ea0:	9700      	str	r7, [sp, #0]
 8006ea2:	e049      	b.n	8006f38 <_dtoa_r+0x6a0>
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <_dtoa_r+0x624>)
 8006ea6:	f7f9 fb7f 	bl	80005a8 <__aeabi_dmul>
 8006eaa:	4680      	mov	r8, r0
 8006eac:	4689      	mov	r9, r1
 8006eae:	e7bd      	b.n	8006e2c <_dtoa_r+0x594>
 8006eb0:	080086a0 	.word	0x080086a0
 8006eb4:	08008678 	.word	0x08008678
 8006eb8:	3ff00000 	.word	0x3ff00000
 8006ebc:	40240000 	.word	0x40240000
 8006ec0:	401c0000 	.word	0x401c0000
 8006ec4:	40140000 	.word	0x40140000
 8006ec8:	3fe00000 	.word	0x3fe00000
 8006ecc:	9d01      	ldr	r5, [sp, #4]
 8006ece:	4656      	mov	r6, sl
 8006ed0:	465f      	mov	r7, fp
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	4639      	mov	r1, r7
 8006eda:	f7f9 fc8f 	bl	80007fc <__aeabi_ddiv>
 8006ede:	f7f9 fe13 	bl	8000b08 <__aeabi_d2iz>
 8006ee2:	4682      	mov	sl, r0
 8006ee4:	f7f9 faf6 	bl	80004d4 <__aeabi_i2d>
 8006ee8:	4642      	mov	r2, r8
 8006eea:	464b      	mov	r3, r9
 8006eec:	f7f9 fb5c 	bl	80005a8 <__aeabi_dmul>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006efc:	f7f9 f99c 	bl	8000238 <__aeabi_dsub>
 8006f00:	f805 6b01 	strb.w	r6, [r5], #1
 8006f04:	9e01      	ldr	r6, [sp, #4]
 8006f06:	9f03      	ldr	r7, [sp, #12]
 8006f08:	1bae      	subs	r6, r5, r6
 8006f0a:	42b7      	cmp	r7, r6
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	d135      	bne.n	8006f7e <_dtoa_r+0x6e6>
 8006f12:	f7f9 f993 	bl	800023c <__adddf3>
 8006f16:	4642      	mov	r2, r8
 8006f18:	464b      	mov	r3, r9
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	460f      	mov	r7, r1
 8006f1e:	f7f9 fdd3 	bl	8000ac8 <__aeabi_dcmpgt>
 8006f22:	b9d0      	cbnz	r0, 8006f5a <_dtoa_r+0x6c2>
 8006f24:	4642      	mov	r2, r8
 8006f26:	464b      	mov	r3, r9
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 fda4 	bl	8000a78 <__aeabi_dcmpeq>
 8006f30:	b110      	cbz	r0, 8006f38 <_dtoa_r+0x6a0>
 8006f32:	f01a 0f01 	tst.w	sl, #1
 8006f36:	d110      	bne.n	8006f5a <_dtoa_r+0x6c2>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	ee18 1a10 	vmov	r1, s16
 8006f3e:	f000 fb41 	bl	80075c4 <_Bfree>
 8006f42:	2300      	movs	r3, #0
 8006f44:	9800      	ldr	r0, [sp, #0]
 8006f46:	702b      	strb	r3, [r5, #0]
 8006f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	6018      	str	r0, [r3, #0]
 8006f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f43f acf1 	beq.w	8006938 <_dtoa_r+0xa0>
 8006f56:	601d      	str	r5, [r3, #0]
 8006f58:	e4ee      	b.n	8006938 <_dtoa_r+0xa0>
 8006f5a:	9f00      	ldr	r7, [sp, #0]
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	461d      	mov	r5, r3
 8006f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f64:	2a39      	cmp	r2, #57	; 0x39
 8006f66:	d106      	bne.n	8006f76 <_dtoa_r+0x6de>
 8006f68:	9a01      	ldr	r2, [sp, #4]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d1f7      	bne.n	8006f5e <_dtoa_r+0x6c6>
 8006f6e:	9901      	ldr	r1, [sp, #4]
 8006f70:	2230      	movs	r2, #48	; 0x30
 8006f72:	3701      	adds	r7, #1
 8006f74:	700a      	strb	r2, [r1, #0]
 8006f76:	781a      	ldrb	r2, [r3, #0]
 8006f78:	3201      	adds	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e790      	b.n	8006ea0 <_dtoa_r+0x608>
 8006f7e:	4ba6      	ldr	r3, [pc, #664]	; (8007218 <_dtoa_r+0x980>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	f7f9 fb11 	bl	80005a8 <__aeabi_dmul>
 8006f86:	2200      	movs	r2, #0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	f7f9 fd73 	bl	8000a78 <__aeabi_dcmpeq>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d09d      	beq.n	8006ed2 <_dtoa_r+0x63a>
 8006f96:	e7cf      	b.n	8006f38 <_dtoa_r+0x6a0>
 8006f98:	9a08      	ldr	r2, [sp, #32]
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	f000 80d7 	beq.w	800714e <_dtoa_r+0x8b6>
 8006fa0:	9a06      	ldr	r2, [sp, #24]
 8006fa2:	2a01      	cmp	r2, #1
 8006fa4:	f300 80ba 	bgt.w	800711c <_dtoa_r+0x884>
 8006fa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	f000 80b2 	beq.w	8007114 <_dtoa_r+0x87c>
 8006fb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fb4:	9e07      	ldr	r6, [sp, #28]
 8006fb6:	9d04      	ldr	r5, [sp, #16]
 8006fb8:	9a04      	ldr	r2, [sp, #16]
 8006fba:	441a      	add	r2, r3
 8006fbc:	9204      	str	r2, [sp, #16]
 8006fbe:	9a05      	ldr	r2, [sp, #20]
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	441a      	add	r2, r3
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	9205      	str	r2, [sp, #20]
 8006fc8:	f000 fbb4 	bl	8007734 <__i2b>
 8006fcc:	4607      	mov	r7, r0
 8006fce:	2d00      	cmp	r5, #0
 8006fd0:	dd0c      	ble.n	8006fec <_dtoa_r+0x754>
 8006fd2:	9b05      	ldr	r3, [sp, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	dd09      	ble.n	8006fec <_dtoa_r+0x754>
 8006fd8:	42ab      	cmp	r3, r5
 8006fda:	9a04      	ldr	r2, [sp, #16]
 8006fdc:	bfa8      	it	ge
 8006fde:	462b      	movge	r3, r5
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	9204      	str	r2, [sp, #16]
 8006fe4:	9a05      	ldr	r2, [sp, #20]
 8006fe6:	1aed      	subs	r5, r5, r3
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	9305      	str	r3, [sp, #20]
 8006fec:	9b07      	ldr	r3, [sp, #28]
 8006fee:	b31b      	cbz	r3, 8007038 <_dtoa_r+0x7a0>
 8006ff0:	9b08      	ldr	r3, [sp, #32]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 80af 	beq.w	8007156 <_dtoa_r+0x8be>
 8006ff8:	2e00      	cmp	r6, #0
 8006ffa:	dd13      	ble.n	8007024 <_dtoa_r+0x78c>
 8006ffc:	4639      	mov	r1, r7
 8006ffe:	4632      	mov	r2, r6
 8007000:	4620      	mov	r0, r4
 8007002:	f000 fc57 	bl	80078b4 <__pow5mult>
 8007006:	ee18 2a10 	vmov	r2, s16
 800700a:	4601      	mov	r1, r0
 800700c:	4607      	mov	r7, r0
 800700e:	4620      	mov	r0, r4
 8007010:	f000 fba6 	bl	8007760 <__multiply>
 8007014:	ee18 1a10 	vmov	r1, s16
 8007018:	4680      	mov	r8, r0
 800701a:	4620      	mov	r0, r4
 800701c:	f000 fad2 	bl	80075c4 <_Bfree>
 8007020:	ee08 8a10 	vmov	s16, r8
 8007024:	9b07      	ldr	r3, [sp, #28]
 8007026:	1b9a      	subs	r2, r3, r6
 8007028:	d006      	beq.n	8007038 <_dtoa_r+0x7a0>
 800702a:	ee18 1a10 	vmov	r1, s16
 800702e:	4620      	mov	r0, r4
 8007030:	f000 fc40 	bl	80078b4 <__pow5mult>
 8007034:	ee08 0a10 	vmov	s16, r0
 8007038:	2101      	movs	r1, #1
 800703a:	4620      	mov	r0, r4
 800703c:	f000 fb7a 	bl	8007734 <__i2b>
 8007040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	4606      	mov	r6, r0
 8007046:	f340 8088 	ble.w	800715a <_dtoa_r+0x8c2>
 800704a:	461a      	mov	r2, r3
 800704c:	4601      	mov	r1, r0
 800704e:	4620      	mov	r0, r4
 8007050:	f000 fc30 	bl	80078b4 <__pow5mult>
 8007054:	9b06      	ldr	r3, [sp, #24]
 8007056:	2b01      	cmp	r3, #1
 8007058:	4606      	mov	r6, r0
 800705a:	f340 8081 	ble.w	8007160 <_dtoa_r+0x8c8>
 800705e:	f04f 0800 	mov.w	r8, #0
 8007062:	6933      	ldr	r3, [r6, #16]
 8007064:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007068:	6918      	ldr	r0, [r3, #16]
 800706a:	f000 fb13 	bl	8007694 <__hi0bits>
 800706e:	f1c0 0020 	rsb	r0, r0, #32
 8007072:	9b05      	ldr	r3, [sp, #20]
 8007074:	4418      	add	r0, r3
 8007076:	f010 001f 	ands.w	r0, r0, #31
 800707a:	f000 8092 	beq.w	80071a2 <_dtoa_r+0x90a>
 800707e:	f1c0 0320 	rsb	r3, r0, #32
 8007082:	2b04      	cmp	r3, #4
 8007084:	f340 808a 	ble.w	800719c <_dtoa_r+0x904>
 8007088:	f1c0 001c 	rsb	r0, r0, #28
 800708c:	9b04      	ldr	r3, [sp, #16]
 800708e:	4403      	add	r3, r0
 8007090:	9304      	str	r3, [sp, #16]
 8007092:	9b05      	ldr	r3, [sp, #20]
 8007094:	4403      	add	r3, r0
 8007096:	4405      	add	r5, r0
 8007098:	9305      	str	r3, [sp, #20]
 800709a:	9b04      	ldr	r3, [sp, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	dd07      	ble.n	80070b0 <_dtoa_r+0x818>
 80070a0:	ee18 1a10 	vmov	r1, s16
 80070a4:	461a      	mov	r2, r3
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fc5e 	bl	8007968 <__lshift>
 80070ac:	ee08 0a10 	vmov	s16, r0
 80070b0:	9b05      	ldr	r3, [sp, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	dd05      	ble.n	80070c2 <_dtoa_r+0x82a>
 80070b6:	4631      	mov	r1, r6
 80070b8:	461a      	mov	r2, r3
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 fc54 	bl	8007968 <__lshift>
 80070c0:	4606      	mov	r6, r0
 80070c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d06e      	beq.n	80071a6 <_dtoa_r+0x90e>
 80070c8:	ee18 0a10 	vmov	r0, s16
 80070cc:	4631      	mov	r1, r6
 80070ce:	f000 fcbb 	bl	8007a48 <__mcmp>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	da67      	bge.n	80071a6 <_dtoa_r+0x90e>
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	3b01      	subs	r3, #1
 80070da:	ee18 1a10 	vmov	r1, s16
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	220a      	movs	r2, #10
 80070e2:	2300      	movs	r3, #0
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fa8f 	bl	8007608 <__multadd>
 80070ea:	9b08      	ldr	r3, [sp, #32]
 80070ec:	ee08 0a10 	vmov	s16, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 81b1 	beq.w	8007458 <_dtoa_r+0xbc0>
 80070f6:	2300      	movs	r3, #0
 80070f8:	4639      	mov	r1, r7
 80070fa:	220a      	movs	r2, #10
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 fa83 	bl	8007608 <__multadd>
 8007102:	9b02      	ldr	r3, [sp, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	4607      	mov	r7, r0
 8007108:	f300 808e 	bgt.w	8007228 <_dtoa_r+0x990>
 800710c:	9b06      	ldr	r3, [sp, #24]
 800710e:	2b02      	cmp	r3, #2
 8007110:	dc51      	bgt.n	80071b6 <_dtoa_r+0x91e>
 8007112:	e089      	b.n	8007228 <_dtoa_r+0x990>
 8007114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800711a:	e74b      	b.n	8006fb4 <_dtoa_r+0x71c>
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	1e5e      	subs	r6, r3, #1
 8007120:	9b07      	ldr	r3, [sp, #28]
 8007122:	42b3      	cmp	r3, r6
 8007124:	bfbf      	itttt	lt
 8007126:	9b07      	ldrlt	r3, [sp, #28]
 8007128:	9607      	strlt	r6, [sp, #28]
 800712a:	1af2      	sublt	r2, r6, r3
 800712c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800712e:	bfb6      	itet	lt
 8007130:	189b      	addlt	r3, r3, r2
 8007132:	1b9e      	subge	r6, r3, r6
 8007134:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	bfb8      	it	lt
 800713a:	2600      	movlt	r6, #0
 800713c:	2b00      	cmp	r3, #0
 800713e:	bfb7      	itett	lt
 8007140:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007144:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007148:	1a9d      	sublt	r5, r3, r2
 800714a:	2300      	movlt	r3, #0
 800714c:	e734      	b.n	8006fb8 <_dtoa_r+0x720>
 800714e:	9e07      	ldr	r6, [sp, #28]
 8007150:	9d04      	ldr	r5, [sp, #16]
 8007152:	9f08      	ldr	r7, [sp, #32]
 8007154:	e73b      	b.n	8006fce <_dtoa_r+0x736>
 8007156:	9a07      	ldr	r2, [sp, #28]
 8007158:	e767      	b.n	800702a <_dtoa_r+0x792>
 800715a:	9b06      	ldr	r3, [sp, #24]
 800715c:	2b01      	cmp	r3, #1
 800715e:	dc18      	bgt.n	8007192 <_dtoa_r+0x8fa>
 8007160:	f1ba 0f00 	cmp.w	sl, #0
 8007164:	d115      	bne.n	8007192 <_dtoa_r+0x8fa>
 8007166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800716a:	b993      	cbnz	r3, 8007192 <_dtoa_r+0x8fa>
 800716c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007170:	0d1b      	lsrs	r3, r3, #20
 8007172:	051b      	lsls	r3, r3, #20
 8007174:	b183      	cbz	r3, 8007198 <_dtoa_r+0x900>
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	3301      	adds	r3, #1
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	9b05      	ldr	r3, [sp, #20]
 800717e:	3301      	adds	r3, #1
 8007180:	9305      	str	r3, [sp, #20]
 8007182:	f04f 0801 	mov.w	r8, #1
 8007186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007188:	2b00      	cmp	r3, #0
 800718a:	f47f af6a 	bne.w	8007062 <_dtoa_r+0x7ca>
 800718e:	2001      	movs	r0, #1
 8007190:	e76f      	b.n	8007072 <_dtoa_r+0x7da>
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	e7f6      	b.n	8007186 <_dtoa_r+0x8ee>
 8007198:	4698      	mov	r8, r3
 800719a:	e7f4      	b.n	8007186 <_dtoa_r+0x8ee>
 800719c:	f43f af7d 	beq.w	800709a <_dtoa_r+0x802>
 80071a0:	4618      	mov	r0, r3
 80071a2:	301c      	adds	r0, #28
 80071a4:	e772      	b.n	800708c <_dtoa_r+0x7f4>
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dc37      	bgt.n	800721c <_dtoa_r+0x984>
 80071ac:	9b06      	ldr	r3, [sp, #24]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	dd34      	ble.n	800721c <_dtoa_r+0x984>
 80071b2:	9b03      	ldr	r3, [sp, #12]
 80071b4:	9302      	str	r3, [sp, #8]
 80071b6:	9b02      	ldr	r3, [sp, #8]
 80071b8:	b96b      	cbnz	r3, 80071d6 <_dtoa_r+0x93e>
 80071ba:	4631      	mov	r1, r6
 80071bc:	2205      	movs	r2, #5
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 fa22 	bl	8007608 <__multadd>
 80071c4:	4601      	mov	r1, r0
 80071c6:	4606      	mov	r6, r0
 80071c8:	ee18 0a10 	vmov	r0, s16
 80071cc:	f000 fc3c 	bl	8007a48 <__mcmp>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	f73f adbb 	bgt.w	8006d4c <_dtoa_r+0x4b4>
 80071d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d8:	9d01      	ldr	r5, [sp, #4]
 80071da:	43db      	mvns	r3, r3
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	f04f 0800 	mov.w	r8, #0
 80071e2:	4631      	mov	r1, r6
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 f9ed 	bl	80075c4 <_Bfree>
 80071ea:	2f00      	cmp	r7, #0
 80071ec:	f43f aea4 	beq.w	8006f38 <_dtoa_r+0x6a0>
 80071f0:	f1b8 0f00 	cmp.w	r8, #0
 80071f4:	d005      	beq.n	8007202 <_dtoa_r+0x96a>
 80071f6:	45b8      	cmp	r8, r7
 80071f8:	d003      	beq.n	8007202 <_dtoa_r+0x96a>
 80071fa:	4641      	mov	r1, r8
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 f9e1 	bl	80075c4 <_Bfree>
 8007202:	4639      	mov	r1, r7
 8007204:	4620      	mov	r0, r4
 8007206:	f000 f9dd 	bl	80075c4 <_Bfree>
 800720a:	e695      	b.n	8006f38 <_dtoa_r+0x6a0>
 800720c:	2600      	movs	r6, #0
 800720e:	4637      	mov	r7, r6
 8007210:	e7e1      	b.n	80071d6 <_dtoa_r+0x93e>
 8007212:	9700      	str	r7, [sp, #0]
 8007214:	4637      	mov	r7, r6
 8007216:	e599      	b.n	8006d4c <_dtoa_r+0x4b4>
 8007218:	40240000 	.word	0x40240000
 800721c:	9b08      	ldr	r3, [sp, #32]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 80ca 	beq.w	80073b8 <_dtoa_r+0xb20>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	9302      	str	r3, [sp, #8]
 8007228:	2d00      	cmp	r5, #0
 800722a:	dd05      	ble.n	8007238 <_dtoa_r+0x9a0>
 800722c:	4639      	mov	r1, r7
 800722e:	462a      	mov	r2, r5
 8007230:	4620      	mov	r0, r4
 8007232:	f000 fb99 	bl	8007968 <__lshift>
 8007236:	4607      	mov	r7, r0
 8007238:	f1b8 0f00 	cmp.w	r8, #0
 800723c:	d05b      	beq.n	80072f6 <_dtoa_r+0xa5e>
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4620      	mov	r0, r4
 8007242:	f000 f97f 	bl	8007544 <_Balloc>
 8007246:	4605      	mov	r5, r0
 8007248:	b928      	cbnz	r0, 8007256 <_dtoa_r+0x9be>
 800724a:	4b87      	ldr	r3, [pc, #540]	; (8007468 <_dtoa_r+0xbd0>)
 800724c:	4602      	mov	r2, r0
 800724e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007252:	f7ff bb3b 	b.w	80068cc <_dtoa_r+0x34>
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	3202      	adds	r2, #2
 800725a:	0092      	lsls	r2, r2, #2
 800725c:	f107 010c 	add.w	r1, r7, #12
 8007260:	300c      	adds	r0, #12
 8007262:	f7fe fb4b 	bl	80058fc <memcpy>
 8007266:	2201      	movs	r2, #1
 8007268:	4629      	mov	r1, r5
 800726a:	4620      	mov	r0, r4
 800726c:	f000 fb7c 	bl	8007968 <__lshift>
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	f103 0901 	add.w	r9, r3, #1
 8007276:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800727a:	4413      	add	r3, r2
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	f00a 0301 	and.w	r3, sl, #1
 8007282:	46b8      	mov	r8, r7
 8007284:	9304      	str	r3, [sp, #16]
 8007286:	4607      	mov	r7, r0
 8007288:	4631      	mov	r1, r6
 800728a:	ee18 0a10 	vmov	r0, s16
 800728e:	f7ff fa77 	bl	8006780 <quorem>
 8007292:	4641      	mov	r1, r8
 8007294:	9002      	str	r0, [sp, #8]
 8007296:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800729a:	ee18 0a10 	vmov	r0, s16
 800729e:	f000 fbd3 	bl	8007a48 <__mcmp>
 80072a2:	463a      	mov	r2, r7
 80072a4:	9003      	str	r0, [sp, #12]
 80072a6:	4631      	mov	r1, r6
 80072a8:	4620      	mov	r0, r4
 80072aa:	f000 fbe9 	bl	8007a80 <__mdiff>
 80072ae:	68c2      	ldr	r2, [r0, #12]
 80072b0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80072b4:	4605      	mov	r5, r0
 80072b6:	bb02      	cbnz	r2, 80072fa <_dtoa_r+0xa62>
 80072b8:	4601      	mov	r1, r0
 80072ba:	ee18 0a10 	vmov	r0, s16
 80072be:	f000 fbc3 	bl	8007a48 <__mcmp>
 80072c2:	4602      	mov	r2, r0
 80072c4:	4629      	mov	r1, r5
 80072c6:	4620      	mov	r0, r4
 80072c8:	9207      	str	r2, [sp, #28]
 80072ca:	f000 f97b 	bl	80075c4 <_Bfree>
 80072ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80072d2:	ea43 0102 	orr.w	r1, r3, r2
 80072d6:	9b04      	ldr	r3, [sp, #16]
 80072d8:	430b      	orrs	r3, r1
 80072da:	464d      	mov	r5, r9
 80072dc:	d10f      	bne.n	80072fe <_dtoa_r+0xa66>
 80072de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80072e2:	d02a      	beq.n	800733a <_dtoa_r+0xaa2>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	dd02      	ble.n	80072f0 <_dtoa_r+0xa58>
 80072ea:	9b02      	ldr	r3, [sp, #8]
 80072ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80072f0:	f88b a000 	strb.w	sl, [fp]
 80072f4:	e775      	b.n	80071e2 <_dtoa_r+0x94a>
 80072f6:	4638      	mov	r0, r7
 80072f8:	e7ba      	b.n	8007270 <_dtoa_r+0x9d8>
 80072fa:	2201      	movs	r2, #1
 80072fc:	e7e2      	b.n	80072c4 <_dtoa_r+0xa2c>
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	db04      	blt.n	800730e <_dtoa_r+0xa76>
 8007304:	9906      	ldr	r1, [sp, #24]
 8007306:	430b      	orrs	r3, r1
 8007308:	9904      	ldr	r1, [sp, #16]
 800730a:	430b      	orrs	r3, r1
 800730c:	d122      	bne.n	8007354 <_dtoa_r+0xabc>
 800730e:	2a00      	cmp	r2, #0
 8007310:	ddee      	ble.n	80072f0 <_dtoa_r+0xa58>
 8007312:	ee18 1a10 	vmov	r1, s16
 8007316:	2201      	movs	r2, #1
 8007318:	4620      	mov	r0, r4
 800731a:	f000 fb25 	bl	8007968 <__lshift>
 800731e:	4631      	mov	r1, r6
 8007320:	ee08 0a10 	vmov	s16, r0
 8007324:	f000 fb90 	bl	8007a48 <__mcmp>
 8007328:	2800      	cmp	r0, #0
 800732a:	dc03      	bgt.n	8007334 <_dtoa_r+0xa9c>
 800732c:	d1e0      	bne.n	80072f0 <_dtoa_r+0xa58>
 800732e:	f01a 0f01 	tst.w	sl, #1
 8007332:	d0dd      	beq.n	80072f0 <_dtoa_r+0xa58>
 8007334:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007338:	d1d7      	bne.n	80072ea <_dtoa_r+0xa52>
 800733a:	2339      	movs	r3, #57	; 0x39
 800733c:	f88b 3000 	strb.w	r3, [fp]
 8007340:	462b      	mov	r3, r5
 8007342:	461d      	mov	r5, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800734a:	2a39      	cmp	r2, #57	; 0x39
 800734c:	d071      	beq.n	8007432 <_dtoa_r+0xb9a>
 800734e:	3201      	adds	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e746      	b.n	80071e2 <_dtoa_r+0x94a>
 8007354:	2a00      	cmp	r2, #0
 8007356:	dd07      	ble.n	8007368 <_dtoa_r+0xad0>
 8007358:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800735c:	d0ed      	beq.n	800733a <_dtoa_r+0xaa2>
 800735e:	f10a 0301 	add.w	r3, sl, #1
 8007362:	f88b 3000 	strb.w	r3, [fp]
 8007366:	e73c      	b.n	80071e2 <_dtoa_r+0x94a>
 8007368:	9b05      	ldr	r3, [sp, #20]
 800736a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800736e:	4599      	cmp	r9, r3
 8007370:	d047      	beq.n	8007402 <_dtoa_r+0xb6a>
 8007372:	ee18 1a10 	vmov	r1, s16
 8007376:	2300      	movs	r3, #0
 8007378:	220a      	movs	r2, #10
 800737a:	4620      	mov	r0, r4
 800737c:	f000 f944 	bl	8007608 <__multadd>
 8007380:	45b8      	cmp	r8, r7
 8007382:	ee08 0a10 	vmov	s16, r0
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	f04f 020a 	mov.w	r2, #10
 800738e:	4641      	mov	r1, r8
 8007390:	4620      	mov	r0, r4
 8007392:	d106      	bne.n	80073a2 <_dtoa_r+0xb0a>
 8007394:	f000 f938 	bl	8007608 <__multadd>
 8007398:	4680      	mov	r8, r0
 800739a:	4607      	mov	r7, r0
 800739c:	f109 0901 	add.w	r9, r9, #1
 80073a0:	e772      	b.n	8007288 <_dtoa_r+0x9f0>
 80073a2:	f000 f931 	bl	8007608 <__multadd>
 80073a6:	4639      	mov	r1, r7
 80073a8:	4680      	mov	r8, r0
 80073aa:	2300      	movs	r3, #0
 80073ac:	220a      	movs	r2, #10
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f92a 	bl	8007608 <__multadd>
 80073b4:	4607      	mov	r7, r0
 80073b6:	e7f1      	b.n	800739c <_dtoa_r+0xb04>
 80073b8:	9b03      	ldr	r3, [sp, #12]
 80073ba:	9302      	str	r3, [sp, #8]
 80073bc:	9d01      	ldr	r5, [sp, #4]
 80073be:	ee18 0a10 	vmov	r0, s16
 80073c2:	4631      	mov	r1, r6
 80073c4:	f7ff f9dc 	bl	8006780 <quorem>
 80073c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	f805 ab01 	strb.w	sl, [r5], #1
 80073d2:	1aea      	subs	r2, r5, r3
 80073d4:	9b02      	ldr	r3, [sp, #8]
 80073d6:	4293      	cmp	r3, r2
 80073d8:	dd09      	ble.n	80073ee <_dtoa_r+0xb56>
 80073da:	ee18 1a10 	vmov	r1, s16
 80073de:	2300      	movs	r3, #0
 80073e0:	220a      	movs	r2, #10
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 f910 	bl	8007608 <__multadd>
 80073e8:	ee08 0a10 	vmov	s16, r0
 80073ec:	e7e7      	b.n	80073be <_dtoa_r+0xb26>
 80073ee:	9b02      	ldr	r3, [sp, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfc8      	it	gt
 80073f4:	461d      	movgt	r5, r3
 80073f6:	9b01      	ldr	r3, [sp, #4]
 80073f8:	bfd8      	it	le
 80073fa:	2501      	movle	r5, #1
 80073fc:	441d      	add	r5, r3
 80073fe:	f04f 0800 	mov.w	r8, #0
 8007402:	ee18 1a10 	vmov	r1, s16
 8007406:	2201      	movs	r2, #1
 8007408:	4620      	mov	r0, r4
 800740a:	f000 faad 	bl	8007968 <__lshift>
 800740e:	4631      	mov	r1, r6
 8007410:	ee08 0a10 	vmov	s16, r0
 8007414:	f000 fb18 	bl	8007a48 <__mcmp>
 8007418:	2800      	cmp	r0, #0
 800741a:	dc91      	bgt.n	8007340 <_dtoa_r+0xaa8>
 800741c:	d102      	bne.n	8007424 <_dtoa_r+0xb8c>
 800741e:	f01a 0f01 	tst.w	sl, #1
 8007422:	d18d      	bne.n	8007340 <_dtoa_r+0xaa8>
 8007424:	462b      	mov	r3, r5
 8007426:	461d      	mov	r5, r3
 8007428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800742c:	2a30      	cmp	r2, #48	; 0x30
 800742e:	d0fa      	beq.n	8007426 <_dtoa_r+0xb8e>
 8007430:	e6d7      	b.n	80071e2 <_dtoa_r+0x94a>
 8007432:	9a01      	ldr	r2, [sp, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	d184      	bne.n	8007342 <_dtoa_r+0xaaa>
 8007438:	9b00      	ldr	r3, [sp, #0]
 800743a:	3301      	adds	r3, #1
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	2331      	movs	r3, #49	; 0x31
 8007440:	7013      	strb	r3, [r2, #0]
 8007442:	e6ce      	b.n	80071e2 <_dtoa_r+0x94a>
 8007444:	4b09      	ldr	r3, [pc, #36]	; (800746c <_dtoa_r+0xbd4>)
 8007446:	f7ff ba95 	b.w	8006974 <_dtoa_r+0xdc>
 800744a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800744c:	2b00      	cmp	r3, #0
 800744e:	f47f aa6e 	bne.w	800692e <_dtoa_r+0x96>
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <_dtoa_r+0xbd8>)
 8007454:	f7ff ba8e 	b.w	8006974 <_dtoa_r+0xdc>
 8007458:	9b02      	ldr	r3, [sp, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	dcae      	bgt.n	80073bc <_dtoa_r+0xb24>
 800745e:	9b06      	ldr	r3, [sp, #24]
 8007460:	2b02      	cmp	r3, #2
 8007462:	f73f aea8 	bgt.w	80071b6 <_dtoa_r+0x91e>
 8007466:	e7a9      	b.n	80073bc <_dtoa_r+0xb24>
 8007468:	08008600 	.word	0x08008600
 800746c:	08008420 	.word	0x08008420
 8007470:	08008581 	.word	0x08008581

08007474 <fiprintf>:
 8007474:	b40e      	push	{r1, r2, r3}
 8007476:	b503      	push	{r0, r1, lr}
 8007478:	4601      	mov	r1, r0
 800747a:	ab03      	add	r3, sp, #12
 800747c:	4805      	ldr	r0, [pc, #20]	; (8007494 <fiprintf+0x20>)
 800747e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	f000 fc21 	bl	8007ccc <_vfiprintf_r>
 800748a:	b002      	add	sp, #8
 800748c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007490:	b003      	add	sp, #12
 8007492:	4770      	bx	lr
 8007494:	20000014 	.word	0x20000014

08007498 <_fstat_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4d07      	ldr	r5, [pc, #28]	; (80074b8 <_fstat_r+0x20>)
 800749c:	2300      	movs	r3, #0
 800749e:	4604      	mov	r4, r0
 80074a0:	4608      	mov	r0, r1
 80074a2:	4611      	mov	r1, r2
 80074a4:	602b      	str	r3, [r5, #0]
 80074a6:	f7fa f88d 	bl	80015c4 <_fstat>
 80074aa:	1c43      	adds	r3, r0, #1
 80074ac:	d102      	bne.n	80074b4 <_fstat_r+0x1c>
 80074ae:	682b      	ldr	r3, [r5, #0]
 80074b0:	b103      	cbz	r3, 80074b4 <_fstat_r+0x1c>
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	bd38      	pop	{r3, r4, r5, pc}
 80074b6:	bf00      	nop
 80074b8:	200002ec 	.word	0x200002ec

080074bc <_isatty_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4d06      	ldr	r5, [pc, #24]	; (80074d8 <_isatty_r+0x1c>)
 80074c0:	2300      	movs	r3, #0
 80074c2:	4604      	mov	r4, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	602b      	str	r3, [r5, #0]
 80074c8:	f7fa f88c 	bl	80015e4 <_isatty>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_isatty_r+0x1a>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_isatty_r+0x1a>
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	200002ec 	.word	0x200002ec

080074dc <_localeconv_r>:
 80074dc:	4800      	ldr	r0, [pc, #0]	; (80074e0 <_localeconv_r+0x4>)
 80074de:	4770      	bx	lr
 80074e0:	20000168 	.word	0x20000168

080074e4 <_lseek_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d07      	ldr	r5, [pc, #28]	; (8007504 <_lseek_r+0x20>)
 80074e8:	4604      	mov	r4, r0
 80074ea:	4608      	mov	r0, r1
 80074ec:	4611      	mov	r1, r2
 80074ee:	2200      	movs	r2, #0
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f7fa f881 	bl	80015fa <_lseek>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_lseek_r+0x1e>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_lseek_r+0x1e>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	200002ec 	.word	0x200002ec

08007508 <__ascii_mbtowc>:
 8007508:	b082      	sub	sp, #8
 800750a:	b901      	cbnz	r1, 800750e <__ascii_mbtowc+0x6>
 800750c:	a901      	add	r1, sp, #4
 800750e:	b142      	cbz	r2, 8007522 <__ascii_mbtowc+0x1a>
 8007510:	b14b      	cbz	r3, 8007526 <__ascii_mbtowc+0x1e>
 8007512:	7813      	ldrb	r3, [r2, #0]
 8007514:	600b      	str	r3, [r1, #0]
 8007516:	7812      	ldrb	r2, [r2, #0]
 8007518:	1e10      	subs	r0, r2, #0
 800751a:	bf18      	it	ne
 800751c:	2001      	movne	r0, #1
 800751e:	b002      	add	sp, #8
 8007520:	4770      	bx	lr
 8007522:	4610      	mov	r0, r2
 8007524:	e7fb      	b.n	800751e <__ascii_mbtowc+0x16>
 8007526:	f06f 0001 	mvn.w	r0, #1
 800752a:	e7f8      	b.n	800751e <__ascii_mbtowc+0x16>

0800752c <__malloc_lock>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__malloc_lock+0x8>)
 800752e:	f7fe b96e 	b.w	800580e <__retarget_lock_acquire_recursive>
 8007532:	bf00      	nop
 8007534:	200002e0 	.word	0x200002e0

08007538 <__malloc_unlock>:
 8007538:	4801      	ldr	r0, [pc, #4]	; (8007540 <__malloc_unlock+0x8>)
 800753a:	f7fe b969 	b.w	8005810 <__retarget_lock_release_recursive>
 800753e:	bf00      	nop
 8007540:	200002e0 	.word	0x200002e0

08007544 <_Balloc>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	b976      	cbnz	r6, 800756c <_Balloc+0x28>
 800754e:	2010      	movs	r0, #16
 8007550:	f7fe f9c4 	bl	80058dc <malloc>
 8007554:	4602      	mov	r2, r0
 8007556:	6260      	str	r0, [r4, #36]	; 0x24
 8007558:	b920      	cbnz	r0, 8007564 <_Balloc+0x20>
 800755a:	4b18      	ldr	r3, [pc, #96]	; (80075bc <_Balloc+0x78>)
 800755c:	4818      	ldr	r0, [pc, #96]	; (80075c0 <_Balloc+0x7c>)
 800755e:	2166      	movs	r1, #102	; 0x66
 8007560:	f7ff f8e0 	bl	8006724 <__assert_func>
 8007564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007568:	6006      	str	r6, [r0, #0]
 800756a:	60c6      	str	r6, [r0, #12]
 800756c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800756e:	68f3      	ldr	r3, [r6, #12]
 8007570:	b183      	cbz	r3, 8007594 <_Balloc+0x50>
 8007572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800757a:	b9b8      	cbnz	r0, 80075ac <_Balloc+0x68>
 800757c:	2101      	movs	r1, #1
 800757e:	fa01 f605 	lsl.w	r6, r1, r5
 8007582:	1d72      	adds	r2, r6, #5
 8007584:	0092      	lsls	r2, r2, #2
 8007586:	4620      	mov	r0, r4
 8007588:	f000 fb60 	bl	8007c4c <_calloc_r>
 800758c:	b160      	cbz	r0, 80075a8 <_Balloc+0x64>
 800758e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007592:	e00e      	b.n	80075b2 <_Balloc+0x6e>
 8007594:	2221      	movs	r2, #33	; 0x21
 8007596:	2104      	movs	r1, #4
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fb57 	bl	8007c4c <_calloc_r>
 800759e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075a0:	60f0      	str	r0, [r6, #12]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e4      	bne.n	8007572 <_Balloc+0x2e>
 80075a8:	2000      	movs	r0, #0
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	6802      	ldr	r2, [r0, #0]
 80075ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075b2:	2300      	movs	r3, #0
 80075b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075b8:	e7f7      	b.n	80075aa <_Balloc+0x66>
 80075ba:	bf00      	nop
 80075bc:	0800858e 	.word	0x0800858e
 80075c0:	0800861b 	.word	0x0800861b

080075c4 <_Bfree>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075c8:	4605      	mov	r5, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	b976      	cbnz	r6, 80075ec <_Bfree+0x28>
 80075ce:	2010      	movs	r0, #16
 80075d0:	f7fe f984 	bl	80058dc <malloc>
 80075d4:	4602      	mov	r2, r0
 80075d6:	6268      	str	r0, [r5, #36]	; 0x24
 80075d8:	b920      	cbnz	r0, 80075e4 <_Bfree+0x20>
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <_Bfree+0x3c>)
 80075dc:	4809      	ldr	r0, [pc, #36]	; (8007604 <_Bfree+0x40>)
 80075de:	218a      	movs	r1, #138	; 0x8a
 80075e0:	f7ff f8a0 	bl	8006724 <__assert_func>
 80075e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075e8:	6006      	str	r6, [r0, #0]
 80075ea:	60c6      	str	r6, [r0, #12]
 80075ec:	b13c      	cbz	r4, 80075fe <_Bfree+0x3a>
 80075ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075f0:	6862      	ldr	r2, [r4, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f8:	6021      	str	r1, [r4, #0]
 80075fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	0800858e 	.word	0x0800858e
 8007604:	0800861b 	.word	0x0800861b

08007608 <__multadd>:
 8007608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800760c:	690d      	ldr	r5, [r1, #16]
 800760e:	4607      	mov	r7, r0
 8007610:	460c      	mov	r4, r1
 8007612:	461e      	mov	r6, r3
 8007614:	f101 0c14 	add.w	ip, r1, #20
 8007618:	2000      	movs	r0, #0
 800761a:	f8dc 3000 	ldr.w	r3, [ip]
 800761e:	b299      	uxth	r1, r3
 8007620:	fb02 6101 	mla	r1, r2, r1, r6
 8007624:	0c1e      	lsrs	r6, r3, #16
 8007626:	0c0b      	lsrs	r3, r1, #16
 8007628:	fb02 3306 	mla	r3, r2, r6, r3
 800762c:	b289      	uxth	r1, r1
 800762e:	3001      	adds	r0, #1
 8007630:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007634:	4285      	cmp	r5, r0
 8007636:	f84c 1b04 	str.w	r1, [ip], #4
 800763a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800763e:	dcec      	bgt.n	800761a <__multadd+0x12>
 8007640:	b30e      	cbz	r6, 8007686 <__multadd+0x7e>
 8007642:	68a3      	ldr	r3, [r4, #8]
 8007644:	42ab      	cmp	r3, r5
 8007646:	dc19      	bgt.n	800767c <__multadd+0x74>
 8007648:	6861      	ldr	r1, [r4, #4]
 800764a:	4638      	mov	r0, r7
 800764c:	3101      	adds	r1, #1
 800764e:	f7ff ff79 	bl	8007544 <_Balloc>
 8007652:	4680      	mov	r8, r0
 8007654:	b928      	cbnz	r0, 8007662 <__multadd+0x5a>
 8007656:	4602      	mov	r2, r0
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <__multadd+0x84>)
 800765a:	480d      	ldr	r0, [pc, #52]	; (8007690 <__multadd+0x88>)
 800765c:	21b5      	movs	r1, #181	; 0xb5
 800765e:	f7ff f861 	bl	8006724 <__assert_func>
 8007662:	6922      	ldr	r2, [r4, #16]
 8007664:	3202      	adds	r2, #2
 8007666:	f104 010c 	add.w	r1, r4, #12
 800766a:	0092      	lsls	r2, r2, #2
 800766c:	300c      	adds	r0, #12
 800766e:	f7fe f945 	bl	80058fc <memcpy>
 8007672:	4621      	mov	r1, r4
 8007674:	4638      	mov	r0, r7
 8007676:	f7ff ffa5 	bl	80075c4 <_Bfree>
 800767a:	4644      	mov	r4, r8
 800767c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007680:	3501      	adds	r5, #1
 8007682:	615e      	str	r6, [r3, #20]
 8007684:	6125      	str	r5, [r4, #16]
 8007686:	4620      	mov	r0, r4
 8007688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800768c:	08008600 	.word	0x08008600
 8007690:	0800861b 	.word	0x0800861b

08007694 <__hi0bits>:
 8007694:	0c03      	lsrs	r3, r0, #16
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	b9d3      	cbnz	r3, 80076d0 <__hi0bits+0x3c>
 800769a:	0400      	lsls	r0, r0, #16
 800769c:	2310      	movs	r3, #16
 800769e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076a2:	bf04      	itt	eq
 80076a4:	0200      	lsleq	r0, r0, #8
 80076a6:	3308      	addeq	r3, #8
 80076a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076ac:	bf04      	itt	eq
 80076ae:	0100      	lsleq	r0, r0, #4
 80076b0:	3304      	addeq	r3, #4
 80076b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076b6:	bf04      	itt	eq
 80076b8:	0080      	lsleq	r0, r0, #2
 80076ba:	3302      	addeq	r3, #2
 80076bc:	2800      	cmp	r0, #0
 80076be:	db05      	blt.n	80076cc <__hi0bits+0x38>
 80076c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076c4:	f103 0301 	add.w	r3, r3, #1
 80076c8:	bf08      	it	eq
 80076ca:	2320      	moveq	r3, #32
 80076cc:	4618      	mov	r0, r3
 80076ce:	4770      	bx	lr
 80076d0:	2300      	movs	r3, #0
 80076d2:	e7e4      	b.n	800769e <__hi0bits+0xa>

080076d4 <__lo0bits>:
 80076d4:	6803      	ldr	r3, [r0, #0]
 80076d6:	f013 0207 	ands.w	r2, r3, #7
 80076da:	4601      	mov	r1, r0
 80076dc:	d00b      	beq.n	80076f6 <__lo0bits+0x22>
 80076de:	07da      	lsls	r2, r3, #31
 80076e0:	d423      	bmi.n	800772a <__lo0bits+0x56>
 80076e2:	0798      	lsls	r0, r3, #30
 80076e4:	bf49      	itett	mi
 80076e6:	085b      	lsrmi	r3, r3, #1
 80076e8:	089b      	lsrpl	r3, r3, #2
 80076ea:	2001      	movmi	r0, #1
 80076ec:	600b      	strmi	r3, [r1, #0]
 80076ee:	bf5c      	itt	pl
 80076f0:	600b      	strpl	r3, [r1, #0]
 80076f2:	2002      	movpl	r0, #2
 80076f4:	4770      	bx	lr
 80076f6:	b298      	uxth	r0, r3
 80076f8:	b9a8      	cbnz	r0, 8007726 <__lo0bits+0x52>
 80076fa:	0c1b      	lsrs	r3, r3, #16
 80076fc:	2010      	movs	r0, #16
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	b90a      	cbnz	r2, 8007706 <__lo0bits+0x32>
 8007702:	3008      	adds	r0, #8
 8007704:	0a1b      	lsrs	r3, r3, #8
 8007706:	071a      	lsls	r2, r3, #28
 8007708:	bf04      	itt	eq
 800770a:	091b      	lsreq	r3, r3, #4
 800770c:	3004      	addeq	r0, #4
 800770e:	079a      	lsls	r2, r3, #30
 8007710:	bf04      	itt	eq
 8007712:	089b      	lsreq	r3, r3, #2
 8007714:	3002      	addeq	r0, #2
 8007716:	07da      	lsls	r2, r3, #31
 8007718:	d403      	bmi.n	8007722 <__lo0bits+0x4e>
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	f100 0001 	add.w	r0, r0, #1
 8007720:	d005      	beq.n	800772e <__lo0bits+0x5a>
 8007722:	600b      	str	r3, [r1, #0]
 8007724:	4770      	bx	lr
 8007726:	4610      	mov	r0, r2
 8007728:	e7e9      	b.n	80076fe <__lo0bits+0x2a>
 800772a:	2000      	movs	r0, #0
 800772c:	4770      	bx	lr
 800772e:	2020      	movs	r0, #32
 8007730:	4770      	bx	lr
	...

08007734 <__i2b>:
 8007734:	b510      	push	{r4, lr}
 8007736:	460c      	mov	r4, r1
 8007738:	2101      	movs	r1, #1
 800773a:	f7ff ff03 	bl	8007544 <_Balloc>
 800773e:	4602      	mov	r2, r0
 8007740:	b928      	cbnz	r0, 800774e <__i2b+0x1a>
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <__i2b+0x24>)
 8007744:	4805      	ldr	r0, [pc, #20]	; (800775c <__i2b+0x28>)
 8007746:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800774a:	f7fe ffeb 	bl	8006724 <__assert_func>
 800774e:	2301      	movs	r3, #1
 8007750:	6144      	str	r4, [r0, #20]
 8007752:	6103      	str	r3, [r0, #16]
 8007754:	bd10      	pop	{r4, pc}
 8007756:	bf00      	nop
 8007758:	08008600 	.word	0x08008600
 800775c:	0800861b 	.word	0x0800861b

08007760 <__multiply>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	4691      	mov	r9, r2
 8007766:	690a      	ldr	r2, [r1, #16]
 8007768:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800776c:	429a      	cmp	r2, r3
 800776e:	bfb8      	it	lt
 8007770:	460b      	movlt	r3, r1
 8007772:	460c      	mov	r4, r1
 8007774:	bfbc      	itt	lt
 8007776:	464c      	movlt	r4, r9
 8007778:	4699      	movlt	r9, r3
 800777a:	6927      	ldr	r7, [r4, #16]
 800777c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007780:	68a3      	ldr	r3, [r4, #8]
 8007782:	6861      	ldr	r1, [r4, #4]
 8007784:	eb07 060a 	add.w	r6, r7, sl
 8007788:	42b3      	cmp	r3, r6
 800778a:	b085      	sub	sp, #20
 800778c:	bfb8      	it	lt
 800778e:	3101      	addlt	r1, #1
 8007790:	f7ff fed8 	bl	8007544 <_Balloc>
 8007794:	b930      	cbnz	r0, 80077a4 <__multiply+0x44>
 8007796:	4602      	mov	r2, r0
 8007798:	4b44      	ldr	r3, [pc, #272]	; (80078ac <__multiply+0x14c>)
 800779a:	4845      	ldr	r0, [pc, #276]	; (80078b0 <__multiply+0x150>)
 800779c:	f240 115d 	movw	r1, #349	; 0x15d
 80077a0:	f7fe ffc0 	bl	8006724 <__assert_func>
 80077a4:	f100 0514 	add.w	r5, r0, #20
 80077a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077ac:	462b      	mov	r3, r5
 80077ae:	2200      	movs	r2, #0
 80077b0:	4543      	cmp	r3, r8
 80077b2:	d321      	bcc.n	80077f8 <__multiply+0x98>
 80077b4:	f104 0314 	add.w	r3, r4, #20
 80077b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077bc:	f109 0314 	add.w	r3, r9, #20
 80077c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077c4:	9202      	str	r2, [sp, #8]
 80077c6:	1b3a      	subs	r2, r7, r4
 80077c8:	3a15      	subs	r2, #21
 80077ca:	f022 0203 	bic.w	r2, r2, #3
 80077ce:	3204      	adds	r2, #4
 80077d0:	f104 0115 	add.w	r1, r4, #21
 80077d4:	428f      	cmp	r7, r1
 80077d6:	bf38      	it	cc
 80077d8:	2204      	movcc	r2, #4
 80077da:	9201      	str	r2, [sp, #4]
 80077dc:	9a02      	ldr	r2, [sp, #8]
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d80c      	bhi.n	80077fe <__multiply+0x9e>
 80077e4:	2e00      	cmp	r6, #0
 80077e6:	dd03      	ble.n	80077f0 <__multiply+0x90>
 80077e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d05a      	beq.n	80078a6 <__multiply+0x146>
 80077f0:	6106      	str	r6, [r0, #16]
 80077f2:	b005      	add	sp, #20
 80077f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f8:	f843 2b04 	str.w	r2, [r3], #4
 80077fc:	e7d8      	b.n	80077b0 <__multiply+0x50>
 80077fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8007802:	f1ba 0f00 	cmp.w	sl, #0
 8007806:	d024      	beq.n	8007852 <__multiply+0xf2>
 8007808:	f104 0e14 	add.w	lr, r4, #20
 800780c:	46a9      	mov	r9, r5
 800780e:	f04f 0c00 	mov.w	ip, #0
 8007812:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007816:	f8d9 1000 	ldr.w	r1, [r9]
 800781a:	fa1f fb82 	uxth.w	fp, r2
 800781e:	b289      	uxth	r1, r1
 8007820:	fb0a 110b 	mla	r1, sl, fp, r1
 8007824:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007828:	f8d9 2000 	ldr.w	r2, [r9]
 800782c:	4461      	add	r1, ip
 800782e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007832:	fb0a c20b 	mla	r2, sl, fp, ip
 8007836:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800783a:	b289      	uxth	r1, r1
 800783c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007840:	4577      	cmp	r7, lr
 8007842:	f849 1b04 	str.w	r1, [r9], #4
 8007846:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800784a:	d8e2      	bhi.n	8007812 <__multiply+0xb2>
 800784c:	9a01      	ldr	r2, [sp, #4]
 800784e:	f845 c002 	str.w	ip, [r5, r2]
 8007852:	9a03      	ldr	r2, [sp, #12]
 8007854:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007858:	3304      	adds	r3, #4
 800785a:	f1b9 0f00 	cmp.w	r9, #0
 800785e:	d020      	beq.n	80078a2 <__multiply+0x142>
 8007860:	6829      	ldr	r1, [r5, #0]
 8007862:	f104 0c14 	add.w	ip, r4, #20
 8007866:	46ae      	mov	lr, r5
 8007868:	f04f 0a00 	mov.w	sl, #0
 800786c:	f8bc b000 	ldrh.w	fp, [ip]
 8007870:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007874:	fb09 220b 	mla	r2, r9, fp, r2
 8007878:	4492      	add	sl, r2
 800787a:	b289      	uxth	r1, r1
 800787c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007880:	f84e 1b04 	str.w	r1, [lr], #4
 8007884:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007888:	f8be 1000 	ldrh.w	r1, [lr]
 800788c:	0c12      	lsrs	r2, r2, #16
 800788e:	fb09 1102 	mla	r1, r9, r2, r1
 8007892:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007896:	4567      	cmp	r7, ip
 8007898:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800789c:	d8e6      	bhi.n	800786c <__multiply+0x10c>
 800789e:	9a01      	ldr	r2, [sp, #4]
 80078a0:	50a9      	str	r1, [r5, r2]
 80078a2:	3504      	adds	r5, #4
 80078a4:	e79a      	b.n	80077dc <__multiply+0x7c>
 80078a6:	3e01      	subs	r6, #1
 80078a8:	e79c      	b.n	80077e4 <__multiply+0x84>
 80078aa:	bf00      	nop
 80078ac:	08008600 	.word	0x08008600
 80078b0:	0800861b 	.word	0x0800861b

080078b4 <__pow5mult>:
 80078b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b8:	4615      	mov	r5, r2
 80078ba:	f012 0203 	ands.w	r2, r2, #3
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	d007      	beq.n	80078d4 <__pow5mult+0x20>
 80078c4:	4c25      	ldr	r4, [pc, #148]	; (800795c <__pow5mult+0xa8>)
 80078c6:	3a01      	subs	r2, #1
 80078c8:	2300      	movs	r3, #0
 80078ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078ce:	f7ff fe9b 	bl	8007608 <__multadd>
 80078d2:	4607      	mov	r7, r0
 80078d4:	10ad      	asrs	r5, r5, #2
 80078d6:	d03d      	beq.n	8007954 <__pow5mult+0xa0>
 80078d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078da:	b97c      	cbnz	r4, 80078fc <__pow5mult+0x48>
 80078dc:	2010      	movs	r0, #16
 80078de:	f7fd fffd 	bl	80058dc <malloc>
 80078e2:	4602      	mov	r2, r0
 80078e4:	6270      	str	r0, [r6, #36]	; 0x24
 80078e6:	b928      	cbnz	r0, 80078f4 <__pow5mult+0x40>
 80078e8:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <__pow5mult+0xac>)
 80078ea:	481e      	ldr	r0, [pc, #120]	; (8007964 <__pow5mult+0xb0>)
 80078ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078f0:	f7fe ff18 	bl	8006724 <__assert_func>
 80078f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078f8:	6004      	str	r4, [r0, #0]
 80078fa:	60c4      	str	r4, [r0, #12]
 80078fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007904:	b94c      	cbnz	r4, 800791a <__pow5mult+0x66>
 8007906:	f240 2171 	movw	r1, #625	; 0x271
 800790a:	4630      	mov	r0, r6
 800790c:	f7ff ff12 	bl	8007734 <__i2b>
 8007910:	2300      	movs	r3, #0
 8007912:	f8c8 0008 	str.w	r0, [r8, #8]
 8007916:	4604      	mov	r4, r0
 8007918:	6003      	str	r3, [r0, #0]
 800791a:	f04f 0900 	mov.w	r9, #0
 800791e:	07eb      	lsls	r3, r5, #31
 8007920:	d50a      	bpl.n	8007938 <__pow5mult+0x84>
 8007922:	4639      	mov	r1, r7
 8007924:	4622      	mov	r2, r4
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff ff1a 	bl	8007760 <__multiply>
 800792c:	4639      	mov	r1, r7
 800792e:	4680      	mov	r8, r0
 8007930:	4630      	mov	r0, r6
 8007932:	f7ff fe47 	bl	80075c4 <_Bfree>
 8007936:	4647      	mov	r7, r8
 8007938:	106d      	asrs	r5, r5, #1
 800793a:	d00b      	beq.n	8007954 <__pow5mult+0xa0>
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	b938      	cbnz	r0, 8007950 <__pow5mult+0x9c>
 8007940:	4622      	mov	r2, r4
 8007942:	4621      	mov	r1, r4
 8007944:	4630      	mov	r0, r6
 8007946:	f7ff ff0b 	bl	8007760 <__multiply>
 800794a:	6020      	str	r0, [r4, #0]
 800794c:	f8c0 9000 	str.w	r9, [r0]
 8007950:	4604      	mov	r4, r0
 8007952:	e7e4      	b.n	800791e <__pow5mult+0x6a>
 8007954:	4638      	mov	r0, r7
 8007956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795a:	bf00      	nop
 800795c:	08008768 	.word	0x08008768
 8007960:	0800858e 	.word	0x0800858e
 8007964:	0800861b 	.word	0x0800861b

08007968 <__lshift>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	6849      	ldr	r1, [r1, #4]
 8007970:	6923      	ldr	r3, [r4, #16]
 8007972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	4607      	mov	r7, r0
 800797a:	4691      	mov	r9, r2
 800797c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007980:	f108 0601 	add.w	r6, r8, #1
 8007984:	42b3      	cmp	r3, r6
 8007986:	db0b      	blt.n	80079a0 <__lshift+0x38>
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff fddb 	bl	8007544 <_Balloc>
 800798e:	4605      	mov	r5, r0
 8007990:	b948      	cbnz	r0, 80079a6 <__lshift+0x3e>
 8007992:	4602      	mov	r2, r0
 8007994:	4b2a      	ldr	r3, [pc, #168]	; (8007a40 <__lshift+0xd8>)
 8007996:	482b      	ldr	r0, [pc, #172]	; (8007a44 <__lshift+0xdc>)
 8007998:	f240 11d9 	movw	r1, #473	; 0x1d9
 800799c:	f7fe fec2 	bl	8006724 <__assert_func>
 80079a0:	3101      	adds	r1, #1
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	e7ee      	b.n	8007984 <__lshift+0x1c>
 80079a6:	2300      	movs	r3, #0
 80079a8:	f100 0114 	add.w	r1, r0, #20
 80079ac:	f100 0210 	add.w	r2, r0, #16
 80079b0:	4618      	mov	r0, r3
 80079b2:	4553      	cmp	r3, sl
 80079b4:	db37      	blt.n	8007a26 <__lshift+0xbe>
 80079b6:	6920      	ldr	r0, [r4, #16]
 80079b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079bc:	f104 0314 	add.w	r3, r4, #20
 80079c0:	f019 091f 	ands.w	r9, r9, #31
 80079c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079cc:	d02f      	beq.n	8007a2e <__lshift+0xc6>
 80079ce:	f1c9 0e20 	rsb	lr, r9, #32
 80079d2:	468a      	mov	sl, r1
 80079d4:	f04f 0c00 	mov.w	ip, #0
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	fa02 f209 	lsl.w	r2, r2, r9
 80079de:	ea42 020c 	orr.w	r2, r2, ip
 80079e2:	f84a 2b04 	str.w	r2, [sl], #4
 80079e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ea:	4298      	cmp	r0, r3
 80079ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80079f0:	d8f2      	bhi.n	80079d8 <__lshift+0x70>
 80079f2:	1b03      	subs	r3, r0, r4
 80079f4:	3b15      	subs	r3, #21
 80079f6:	f023 0303 	bic.w	r3, r3, #3
 80079fa:	3304      	adds	r3, #4
 80079fc:	f104 0215 	add.w	r2, r4, #21
 8007a00:	4290      	cmp	r0, r2
 8007a02:	bf38      	it	cc
 8007a04:	2304      	movcc	r3, #4
 8007a06:	f841 c003 	str.w	ip, [r1, r3]
 8007a0a:	f1bc 0f00 	cmp.w	ip, #0
 8007a0e:	d001      	beq.n	8007a14 <__lshift+0xac>
 8007a10:	f108 0602 	add.w	r6, r8, #2
 8007a14:	3e01      	subs	r6, #1
 8007a16:	4638      	mov	r0, r7
 8007a18:	612e      	str	r6, [r5, #16]
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f7ff fdd2 	bl	80075c4 <_Bfree>
 8007a20:	4628      	mov	r0, r5
 8007a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	e7c1      	b.n	80079b2 <__lshift+0x4a>
 8007a2e:	3904      	subs	r1, #4
 8007a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a34:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a38:	4298      	cmp	r0, r3
 8007a3a:	d8f9      	bhi.n	8007a30 <__lshift+0xc8>
 8007a3c:	e7ea      	b.n	8007a14 <__lshift+0xac>
 8007a3e:	bf00      	nop
 8007a40:	08008600 	.word	0x08008600
 8007a44:	0800861b 	.word	0x0800861b

08007a48 <__mcmp>:
 8007a48:	b530      	push	{r4, r5, lr}
 8007a4a:	6902      	ldr	r2, [r0, #16]
 8007a4c:	690c      	ldr	r4, [r1, #16]
 8007a4e:	1b12      	subs	r2, r2, r4
 8007a50:	d10e      	bne.n	8007a70 <__mcmp+0x28>
 8007a52:	f100 0314 	add.w	r3, r0, #20
 8007a56:	3114      	adds	r1, #20
 8007a58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a68:	42a5      	cmp	r5, r4
 8007a6a:	d003      	beq.n	8007a74 <__mcmp+0x2c>
 8007a6c:	d305      	bcc.n	8007a7a <__mcmp+0x32>
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4610      	mov	r0, r2
 8007a72:	bd30      	pop	{r4, r5, pc}
 8007a74:	4283      	cmp	r3, r0
 8007a76:	d3f3      	bcc.n	8007a60 <__mcmp+0x18>
 8007a78:	e7fa      	b.n	8007a70 <__mcmp+0x28>
 8007a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a7e:	e7f7      	b.n	8007a70 <__mcmp+0x28>

08007a80 <__mdiff>:
 8007a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	460c      	mov	r4, r1
 8007a86:	4606      	mov	r6, r0
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4690      	mov	r8, r2
 8007a8e:	f7ff ffdb 	bl	8007a48 <__mcmp>
 8007a92:	1e05      	subs	r5, r0, #0
 8007a94:	d110      	bne.n	8007ab8 <__mdiff+0x38>
 8007a96:	4629      	mov	r1, r5
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff fd53 	bl	8007544 <_Balloc>
 8007a9e:	b930      	cbnz	r0, 8007aae <__mdiff+0x2e>
 8007aa0:	4b3a      	ldr	r3, [pc, #232]	; (8007b8c <__mdiff+0x10c>)
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	f240 2132 	movw	r1, #562	; 0x232
 8007aa8:	4839      	ldr	r0, [pc, #228]	; (8007b90 <__mdiff+0x110>)
 8007aaa:	f7fe fe3b 	bl	8006724 <__assert_func>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	bfa4      	itt	ge
 8007aba:	4643      	movge	r3, r8
 8007abc:	46a0      	movge	r8, r4
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ac4:	bfa6      	itte	ge
 8007ac6:	461c      	movge	r4, r3
 8007ac8:	2500      	movge	r5, #0
 8007aca:	2501      	movlt	r5, #1
 8007acc:	f7ff fd3a 	bl	8007544 <_Balloc>
 8007ad0:	b920      	cbnz	r0, 8007adc <__mdiff+0x5c>
 8007ad2:	4b2e      	ldr	r3, [pc, #184]	; (8007b8c <__mdiff+0x10c>)
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ada:	e7e5      	b.n	8007aa8 <__mdiff+0x28>
 8007adc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ae0:	6926      	ldr	r6, [r4, #16]
 8007ae2:	60c5      	str	r5, [r0, #12]
 8007ae4:	f104 0914 	add.w	r9, r4, #20
 8007ae8:	f108 0514 	add.w	r5, r8, #20
 8007aec:	f100 0e14 	add.w	lr, r0, #20
 8007af0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007af4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007af8:	f108 0210 	add.w	r2, r8, #16
 8007afc:	46f2      	mov	sl, lr
 8007afe:	2100      	movs	r1, #0
 8007b00:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b08:	fa1f f883 	uxth.w	r8, r3
 8007b0c:	fa11 f18b 	uxtah	r1, r1, fp
 8007b10:	0c1b      	lsrs	r3, r3, #16
 8007b12:	eba1 0808 	sub.w	r8, r1, r8
 8007b16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b1e:	fa1f f888 	uxth.w	r8, r8
 8007b22:	1419      	asrs	r1, r3, #16
 8007b24:	454e      	cmp	r6, r9
 8007b26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b2a:	f84a 3b04 	str.w	r3, [sl], #4
 8007b2e:	d8e7      	bhi.n	8007b00 <__mdiff+0x80>
 8007b30:	1b33      	subs	r3, r6, r4
 8007b32:	3b15      	subs	r3, #21
 8007b34:	f023 0303 	bic.w	r3, r3, #3
 8007b38:	3304      	adds	r3, #4
 8007b3a:	3415      	adds	r4, #21
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	bf38      	it	cc
 8007b40:	2304      	movcc	r3, #4
 8007b42:	441d      	add	r5, r3
 8007b44:	4473      	add	r3, lr
 8007b46:	469e      	mov	lr, r3
 8007b48:	462e      	mov	r6, r5
 8007b4a:	4566      	cmp	r6, ip
 8007b4c:	d30e      	bcc.n	8007b6c <__mdiff+0xec>
 8007b4e:	f10c 0203 	add.w	r2, ip, #3
 8007b52:	1b52      	subs	r2, r2, r5
 8007b54:	f022 0203 	bic.w	r2, r2, #3
 8007b58:	3d03      	subs	r5, #3
 8007b5a:	45ac      	cmp	ip, r5
 8007b5c:	bf38      	it	cc
 8007b5e:	2200      	movcc	r2, #0
 8007b60:	441a      	add	r2, r3
 8007b62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b66:	b17b      	cbz	r3, 8007b88 <__mdiff+0x108>
 8007b68:	6107      	str	r7, [r0, #16]
 8007b6a:	e7a3      	b.n	8007ab4 <__mdiff+0x34>
 8007b6c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b70:	fa11 f288 	uxtah	r2, r1, r8
 8007b74:	1414      	asrs	r4, r2, #16
 8007b76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b7a:	b292      	uxth	r2, r2
 8007b7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b80:	f84e 2b04 	str.w	r2, [lr], #4
 8007b84:	1421      	asrs	r1, r4, #16
 8007b86:	e7e0      	b.n	8007b4a <__mdiff+0xca>
 8007b88:	3f01      	subs	r7, #1
 8007b8a:	e7ea      	b.n	8007b62 <__mdiff+0xe2>
 8007b8c:	08008600 	.word	0x08008600
 8007b90:	0800861b 	.word	0x0800861b

08007b94 <__d2b>:
 8007b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b98:	4689      	mov	r9, r1
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	ec57 6b10 	vmov	r6, r7, d0
 8007ba0:	4690      	mov	r8, r2
 8007ba2:	f7ff fccf 	bl	8007544 <_Balloc>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	b930      	cbnz	r0, 8007bb8 <__d2b+0x24>
 8007baa:	4602      	mov	r2, r0
 8007bac:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <__d2b+0xb0>)
 8007bae:	4826      	ldr	r0, [pc, #152]	; (8007c48 <__d2b+0xb4>)
 8007bb0:	f240 310a 	movw	r1, #778	; 0x30a
 8007bb4:	f7fe fdb6 	bl	8006724 <__assert_func>
 8007bb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bc0:	bb35      	cbnz	r5, 8007c10 <__d2b+0x7c>
 8007bc2:	2e00      	cmp	r6, #0
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	d028      	beq.n	8007c1a <__d2b+0x86>
 8007bc8:	4668      	mov	r0, sp
 8007bca:	9600      	str	r6, [sp, #0]
 8007bcc:	f7ff fd82 	bl	80076d4 <__lo0bits>
 8007bd0:	9900      	ldr	r1, [sp, #0]
 8007bd2:	b300      	cbz	r0, 8007c16 <__d2b+0x82>
 8007bd4:	9a01      	ldr	r2, [sp, #4]
 8007bd6:	f1c0 0320 	rsb	r3, r0, #32
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	430b      	orrs	r3, r1
 8007be0:	40c2      	lsrs	r2, r0
 8007be2:	6163      	str	r3, [r4, #20]
 8007be4:	9201      	str	r2, [sp, #4]
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	61a3      	str	r3, [r4, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bf14      	ite	ne
 8007bee:	2202      	movne	r2, #2
 8007bf0:	2201      	moveq	r2, #1
 8007bf2:	6122      	str	r2, [r4, #16]
 8007bf4:	b1d5      	cbz	r5, 8007c2c <__d2b+0x98>
 8007bf6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bfa:	4405      	add	r5, r0
 8007bfc:	f8c9 5000 	str.w	r5, [r9]
 8007c00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c04:	f8c8 0000 	str.w	r0, [r8]
 8007c08:	4620      	mov	r0, r4
 8007c0a:	b003      	add	sp, #12
 8007c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c14:	e7d5      	b.n	8007bc2 <__d2b+0x2e>
 8007c16:	6161      	str	r1, [r4, #20]
 8007c18:	e7e5      	b.n	8007be6 <__d2b+0x52>
 8007c1a:	a801      	add	r0, sp, #4
 8007c1c:	f7ff fd5a 	bl	80076d4 <__lo0bits>
 8007c20:	9b01      	ldr	r3, [sp, #4]
 8007c22:	6163      	str	r3, [r4, #20]
 8007c24:	2201      	movs	r2, #1
 8007c26:	6122      	str	r2, [r4, #16]
 8007c28:	3020      	adds	r0, #32
 8007c2a:	e7e3      	b.n	8007bf4 <__d2b+0x60>
 8007c2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c34:	f8c9 0000 	str.w	r0, [r9]
 8007c38:	6918      	ldr	r0, [r3, #16]
 8007c3a:	f7ff fd2b 	bl	8007694 <__hi0bits>
 8007c3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c42:	e7df      	b.n	8007c04 <__d2b+0x70>
 8007c44:	08008600 	.word	0x08008600
 8007c48:	0800861b 	.word	0x0800861b

08007c4c <_calloc_r>:
 8007c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c4e:	fba1 2402 	umull	r2, r4, r1, r2
 8007c52:	b94c      	cbnz	r4, 8007c68 <_calloc_r+0x1c>
 8007c54:	4611      	mov	r1, r2
 8007c56:	9201      	str	r2, [sp, #4]
 8007c58:	f7fd fed2 	bl	8005a00 <_malloc_r>
 8007c5c:	9a01      	ldr	r2, [sp, #4]
 8007c5e:	4605      	mov	r5, r0
 8007c60:	b930      	cbnz	r0, 8007c70 <_calloc_r+0x24>
 8007c62:	4628      	mov	r0, r5
 8007c64:	b003      	add	sp, #12
 8007c66:	bd30      	pop	{r4, r5, pc}
 8007c68:	220c      	movs	r2, #12
 8007c6a:	6002      	str	r2, [r0, #0]
 8007c6c:	2500      	movs	r5, #0
 8007c6e:	e7f8      	b.n	8007c62 <_calloc_r+0x16>
 8007c70:	4621      	mov	r1, r4
 8007c72:	f7fd fe51 	bl	8005918 <memset>
 8007c76:	e7f4      	b.n	8007c62 <_calloc_r+0x16>

08007c78 <__sfputc_r>:
 8007c78:	6893      	ldr	r3, [r2, #8]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	b410      	push	{r4}
 8007c80:	6093      	str	r3, [r2, #8]
 8007c82:	da08      	bge.n	8007c96 <__sfputc_r+0x1e>
 8007c84:	6994      	ldr	r4, [r2, #24]
 8007c86:	42a3      	cmp	r3, r4
 8007c88:	db01      	blt.n	8007c8e <__sfputc_r+0x16>
 8007c8a:	290a      	cmp	r1, #10
 8007c8c:	d103      	bne.n	8007c96 <__sfputc_r+0x1e>
 8007c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c92:	f7fe bc75 	b.w	8006580 <__swbuf_r>
 8007c96:	6813      	ldr	r3, [r2, #0]
 8007c98:	1c58      	adds	r0, r3, #1
 8007c9a:	6010      	str	r0, [r2, #0]
 8007c9c:	7019      	strb	r1, [r3, #0]
 8007c9e:	4608      	mov	r0, r1
 8007ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <__sfputs_r>:
 8007ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca8:	4606      	mov	r6, r0
 8007caa:	460f      	mov	r7, r1
 8007cac:	4614      	mov	r4, r2
 8007cae:	18d5      	adds	r5, r2, r3
 8007cb0:	42ac      	cmp	r4, r5
 8007cb2:	d101      	bne.n	8007cb8 <__sfputs_r+0x12>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e007      	b.n	8007cc8 <__sfputs_r+0x22>
 8007cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cbc:	463a      	mov	r2, r7
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7ff ffda 	bl	8007c78 <__sfputc_r>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d1f3      	bne.n	8007cb0 <__sfputs_r+0xa>
 8007cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ccc <_vfiprintf_r>:
 8007ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	b09d      	sub	sp, #116	; 0x74
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	4698      	mov	r8, r3
 8007cd8:	4606      	mov	r6, r0
 8007cda:	b118      	cbz	r0, 8007ce4 <_vfiprintf_r+0x18>
 8007cdc:	6983      	ldr	r3, [r0, #24]
 8007cde:	b90b      	cbnz	r3, 8007ce4 <_vfiprintf_r+0x18>
 8007ce0:	f7fd fcd2 	bl	8005688 <__sinit>
 8007ce4:	4b89      	ldr	r3, [pc, #548]	; (8007f0c <_vfiprintf_r+0x240>)
 8007ce6:	429d      	cmp	r5, r3
 8007ce8:	d11b      	bne.n	8007d22 <_vfiprintf_r+0x56>
 8007cea:	6875      	ldr	r5, [r6, #4]
 8007cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cee:	07d9      	lsls	r1, r3, #31
 8007cf0:	d405      	bmi.n	8007cfe <_vfiprintf_r+0x32>
 8007cf2:	89ab      	ldrh	r3, [r5, #12]
 8007cf4:	059a      	lsls	r2, r3, #22
 8007cf6:	d402      	bmi.n	8007cfe <_vfiprintf_r+0x32>
 8007cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cfa:	f7fd fd88 	bl	800580e <__retarget_lock_acquire_recursive>
 8007cfe:	89ab      	ldrh	r3, [r5, #12]
 8007d00:	071b      	lsls	r3, r3, #28
 8007d02:	d501      	bpl.n	8007d08 <_vfiprintf_r+0x3c>
 8007d04:	692b      	ldr	r3, [r5, #16]
 8007d06:	b9eb      	cbnz	r3, 8007d44 <_vfiprintf_r+0x78>
 8007d08:	4629      	mov	r1, r5
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7fe fc9c 	bl	8006648 <__swsetup_r>
 8007d10:	b1c0      	cbz	r0, 8007d44 <_vfiprintf_r+0x78>
 8007d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d14:	07dc      	lsls	r4, r3, #31
 8007d16:	d50e      	bpl.n	8007d36 <_vfiprintf_r+0x6a>
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d1c:	b01d      	add	sp, #116	; 0x74
 8007d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d22:	4b7b      	ldr	r3, [pc, #492]	; (8007f10 <_vfiprintf_r+0x244>)
 8007d24:	429d      	cmp	r5, r3
 8007d26:	d101      	bne.n	8007d2c <_vfiprintf_r+0x60>
 8007d28:	68b5      	ldr	r5, [r6, #8]
 8007d2a:	e7df      	b.n	8007cec <_vfiprintf_r+0x20>
 8007d2c:	4b79      	ldr	r3, [pc, #484]	; (8007f14 <_vfiprintf_r+0x248>)
 8007d2e:	429d      	cmp	r5, r3
 8007d30:	bf08      	it	eq
 8007d32:	68f5      	ldreq	r5, [r6, #12]
 8007d34:	e7da      	b.n	8007cec <_vfiprintf_r+0x20>
 8007d36:	89ab      	ldrh	r3, [r5, #12]
 8007d38:	0598      	lsls	r0, r3, #22
 8007d3a:	d4ed      	bmi.n	8007d18 <_vfiprintf_r+0x4c>
 8007d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d3e:	f7fd fd67 	bl	8005810 <__retarget_lock_release_recursive>
 8007d42:	e7e9      	b.n	8007d18 <_vfiprintf_r+0x4c>
 8007d44:	2300      	movs	r3, #0
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	2320      	movs	r3, #32
 8007d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d52:	2330      	movs	r3, #48	; 0x30
 8007d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f18 <_vfiprintf_r+0x24c>
 8007d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d5c:	f04f 0901 	mov.w	r9, #1
 8007d60:	4623      	mov	r3, r4
 8007d62:	469a      	mov	sl, r3
 8007d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d68:	b10a      	cbz	r2, 8007d6e <_vfiprintf_r+0xa2>
 8007d6a:	2a25      	cmp	r2, #37	; 0x25
 8007d6c:	d1f9      	bne.n	8007d62 <_vfiprintf_r+0x96>
 8007d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d72:	d00b      	beq.n	8007d8c <_vfiprintf_r+0xc0>
 8007d74:	465b      	mov	r3, fp
 8007d76:	4622      	mov	r2, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7ff ff93 	bl	8007ca6 <__sfputs_r>
 8007d80:	3001      	adds	r0, #1
 8007d82:	f000 80aa 	beq.w	8007eda <_vfiprintf_r+0x20e>
 8007d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d88:	445a      	add	r2, fp
 8007d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 80a2 	beq.w	8007eda <_vfiprintf_r+0x20e>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da0:	f10a 0a01 	add.w	sl, sl, #1
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	9307      	str	r3, [sp, #28]
 8007da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dac:	931a      	str	r3, [sp, #104]	; 0x68
 8007dae:	4654      	mov	r4, sl
 8007db0:	2205      	movs	r2, #5
 8007db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db6:	4858      	ldr	r0, [pc, #352]	; (8007f18 <_vfiprintf_r+0x24c>)
 8007db8:	f7f8 f9e2 	bl	8000180 <memchr>
 8007dbc:	9a04      	ldr	r2, [sp, #16]
 8007dbe:	b9d8      	cbnz	r0, 8007df8 <_vfiprintf_r+0x12c>
 8007dc0:	06d1      	lsls	r1, r2, #27
 8007dc2:	bf44      	itt	mi
 8007dc4:	2320      	movmi	r3, #32
 8007dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dca:	0713      	lsls	r3, r2, #28
 8007dcc:	bf44      	itt	mi
 8007dce:	232b      	movmi	r3, #43	; 0x2b
 8007dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dda:	d015      	beq.n	8007e08 <_vfiprintf_r+0x13c>
 8007ddc:	9a07      	ldr	r2, [sp, #28]
 8007dde:	4654      	mov	r4, sl
 8007de0:	2000      	movs	r0, #0
 8007de2:	f04f 0c0a 	mov.w	ip, #10
 8007de6:	4621      	mov	r1, r4
 8007de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dec:	3b30      	subs	r3, #48	; 0x30
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	d94e      	bls.n	8007e90 <_vfiprintf_r+0x1c4>
 8007df2:	b1b0      	cbz	r0, 8007e22 <_vfiprintf_r+0x156>
 8007df4:	9207      	str	r2, [sp, #28]
 8007df6:	e014      	b.n	8007e22 <_vfiprintf_r+0x156>
 8007df8:	eba0 0308 	sub.w	r3, r0, r8
 8007dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	46a2      	mov	sl, r4
 8007e06:	e7d2      	b.n	8007dae <_vfiprintf_r+0xe2>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	1d19      	adds	r1, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	9103      	str	r1, [sp, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bfbb      	ittet	lt
 8007e14:	425b      	neglt	r3, r3
 8007e16:	f042 0202 	orrlt.w	r2, r2, #2
 8007e1a:	9307      	strge	r3, [sp, #28]
 8007e1c:	9307      	strlt	r3, [sp, #28]
 8007e1e:	bfb8      	it	lt
 8007e20:	9204      	strlt	r2, [sp, #16]
 8007e22:	7823      	ldrb	r3, [r4, #0]
 8007e24:	2b2e      	cmp	r3, #46	; 0x2e
 8007e26:	d10c      	bne.n	8007e42 <_vfiprintf_r+0x176>
 8007e28:	7863      	ldrb	r3, [r4, #1]
 8007e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e2c:	d135      	bne.n	8007e9a <_vfiprintf_r+0x1ce>
 8007e2e:	9b03      	ldr	r3, [sp, #12]
 8007e30:	1d1a      	adds	r2, r3, #4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	9203      	str	r2, [sp, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfb8      	it	lt
 8007e3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e3e:	3402      	adds	r4, #2
 8007e40:	9305      	str	r3, [sp, #20]
 8007e42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f28 <_vfiprintf_r+0x25c>
 8007e46:	7821      	ldrb	r1, [r4, #0]
 8007e48:	2203      	movs	r2, #3
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	f7f8 f998 	bl	8000180 <memchr>
 8007e50:	b140      	cbz	r0, 8007e64 <_vfiprintf_r+0x198>
 8007e52:	2340      	movs	r3, #64	; 0x40
 8007e54:	eba0 000a 	sub.w	r0, r0, sl
 8007e58:	fa03 f000 	lsl.w	r0, r3, r0
 8007e5c:	9b04      	ldr	r3, [sp, #16]
 8007e5e:	4303      	orrs	r3, r0
 8007e60:	3401      	adds	r4, #1
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e68:	482c      	ldr	r0, [pc, #176]	; (8007f1c <_vfiprintf_r+0x250>)
 8007e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e6e:	2206      	movs	r2, #6
 8007e70:	f7f8 f986 	bl	8000180 <memchr>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d03f      	beq.n	8007ef8 <_vfiprintf_r+0x22c>
 8007e78:	4b29      	ldr	r3, [pc, #164]	; (8007f20 <_vfiprintf_r+0x254>)
 8007e7a:	bb1b      	cbnz	r3, 8007ec4 <_vfiprintf_r+0x1f8>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	3307      	adds	r3, #7
 8007e80:	f023 0307 	bic.w	r3, r3, #7
 8007e84:	3308      	adds	r3, #8
 8007e86:	9303      	str	r3, [sp, #12]
 8007e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8a:	443b      	add	r3, r7
 8007e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e8e:	e767      	b.n	8007d60 <_vfiprintf_r+0x94>
 8007e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e94:	460c      	mov	r4, r1
 8007e96:	2001      	movs	r0, #1
 8007e98:	e7a5      	b.n	8007de6 <_vfiprintf_r+0x11a>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	3401      	adds	r4, #1
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f04f 0c0a 	mov.w	ip, #10
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eac:	3a30      	subs	r2, #48	; 0x30
 8007eae:	2a09      	cmp	r2, #9
 8007eb0:	d903      	bls.n	8007eba <_vfiprintf_r+0x1ee>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0c5      	beq.n	8007e42 <_vfiprintf_r+0x176>
 8007eb6:	9105      	str	r1, [sp, #20]
 8007eb8:	e7c3      	b.n	8007e42 <_vfiprintf_r+0x176>
 8007eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e7f0      	b.n	8007ea6 <_vfiprintf_r+0x1da>
 8007ec4:	ab03      	add	r3, sp, #12
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	462a      	mov	r2, r5
 8007eca:	4b16      	ldr	r3, [pc, #88]	; (8007f24 <_vfiprintf_r+0x258>)
 8007ecc:	a904      	add	r1, sp, #16
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f7fd feaa 	bl	8005c28 <_printf_float>
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	1c78      	adds	r0, r7, #1
 8007ed8:	d1d6      	bne.n	8007e88 <_vfiprintf_r+0x1bc>
 8007eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007edc:	07d9      	lsls	r1, r3, #31
 8007ede:	d405      	bmi.n	8007eec <_vfiprintf_r+0x220>
 8007ee0:	89ab      	ldrh	r3, [r5, #12]
 8007ee2:	059a      	lsls	r2, r3, #22
 8007ee4:	d402      	bmi.n	8007eec <_vfiprintf_r+0x220>
 8007ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ee8:	f7fd fc92 	bl	8005810 <__retarget_lock_release_recursive>
 8007eec:	89ab      	ldrh	r3, [r5, #12]
 8007eee:	065b      	lsls	r3, r3, #25
 8007ef0:	f53f af12 	bmi.w	8007d18 <_vfiprintf_r+0x4c>
 8007ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ef6:	e711      	b.n	8007d1c <_vfiprintf_r+0x50>
 8007ef8:	ab03      	add	r3, sp, #12
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	462a      	mov	r2, r5
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <_vfiprintf_r+0x258>)
 8007f00:	a904      	add	r1, sp, #16
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7fe f934 	bl	8006170 <_printf_i>
 8007f08:	e7e4      	b.n	8007ed4 <_vfiprintf_r+0x208>
 8007f0a:	bf00      	nop
 8007f0c:	080083cc 	.word	0x080083cc
 8007f10:	080083ec 	.word	0x080083ec
 8007f14:	080083ac 	.word	0x080083ac
 8007f18:	08008774 	.word	0x08008774
 8007f1c:	0800877e 	.word	0x0800877e
 8007f20:	08005c29 	.word	0x08005c29
 8007f24:	08007ca7 	.word	0x08007ca7
 8007f28:	0800877a 	.word	0x0800877a

08007f2c <_read_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d07      	ldr	r5, [pc, #28]	; (8007f4c <_read_r+0x20>)
 8007f30:	4604      	mov	r4, r0
 8007f32:	4608      	mov	r0, r1
 8007f34:	4611      	mov	r1, r2
 8007f36:	2200      	movs	r2, #0
 8007f38:	602a      	str	r2, [r5, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f7f9 fafd 	bl	800153a <_read>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d102      	bne.n	8007f4a <_read_r+0x1e>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	b103      	cbz	r3, 8007f4a <_read_r+0x1e>
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	200002ec 	.word	0x200002ec

08007f50 <__ascii_wctomb>:
 8007f50:	b149      	cbz	r1, 8007f66 <__ascii_wctomb+0x16>
 8007f52:	2aff      	cmp	r2, #255	; 0xff
 8007f54:	bf85      	ittet	hi
 8007f56:	238a      	movhi	r3, #138	; 0x8a
 8007f58:	6003      	strhi	r3, [r0, #0]
 8007f5a:	700a      	strbls	r2, [r1, #0]
 8007f5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007f60:	bf98      	it	ls
 8007f62:	2001      	movls	r0, #1
 8007f64:	4770      	bx	lr
 8007f66:	4608      	mov	r0, r1
 8007f68:	4770      	bx	lr

08007f6a <abort>:
 8007f6a:	b508      	push	{r3, lr}
 8007f6c:	2006      	movs	r0, #6
 8007f6e:	f000 f82b 	bl	8007fc8 <raise>
 8007f72:	2001      	movs	r0, #1
 8007f74:	f7f9 fad7 	bl	8001526 <_exit>

08007f78 <_raise_r>:
 8007f78:	291f      	cmp	r1, #31
 8007f7a:	b538      	push	{r3, r4, r5, lr}
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	460d      	mov	r5, r1
 8007f80:	d904      	bls.n	8007f8c <_raise_r+0x14>
 8007f82:	2316      	movs	r3, #22
 8007f84:	6003      	str	r3, [r0, #0]
 8007f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f8e:	b112      	cbz	r2, 8007f96 <_raise_r+0x1e>
 8007f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f94:	b94b      	cbnz	r3, 8007faa <_raise_r+0x32>
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 f830 	bl	8007ffc <_getpid_r>
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa6:	f000 b817 	b.w	8007fd8 <_kill_r>
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d00a      	beq.n	8007fc4 <_raise_r+0x4c>
 8007fae:	1c59      	adds	r1, r3, #1
 8007fb0:	d103      	bne.n	8007fba <_raise_r+0x42>
 8007fb2:	2316      	movs	r3, #22
 8007fb4:	6003      	str	r3, [r0, #0]
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e7e7      	b.n	8007f8a <_raise_r+0x12>
 8007fba:	2400      	movs	r4, #0
 8007fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	4798      	blx	r3
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	e7e0      	b.n	8007f8a <_raise_r+0x12>

08007fc8 <raise>:
 8007fc8:	4b02      	ldr	r3, [pc, #8]	; (8007fd4 <raise+0xc>)
 8007fca:	4601      	mov	r1, r0
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	f7ff bfd3 	b.w	8007f78 <_raise_r>
 8007fd2:	bf00      	nop
 8007fd4:	20000014 	.word	0x20000014

08007fd8 <_kill_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	; (8007ff8 <_kill_r+0x20>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	602b      	str	r3, [r5, #0]
 8007fe6:	f7f9 fa8e 	bl	8001506 <_kill>
 8007fea:	1c43      	adds	r3, r0, #1
 8007fec:	d102      	bne.n	8007ff4 <_kill_r+0x1c>
 8007fee:	682b      	ldr	r3, [r5, #0]
 8007ff0:	b103      	cbz	r3, 8007ff4 <_kill_r+0x1c>
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	bd38      	pop	{r3, r4, r5, pc}
 8007ff6:	bf00      	nop
 8007ff8:	200002ec 	.word	0x200002ec

08007ffc <_getpid_r>:
 8007ffc:	f7f9 ba7b 	b.w	80014f6 <_getpid>

08008000 <_init>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	bf00      	nop
 8008004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008006:	bc08      	pop	{r3}
 8008008:	469e      	mov	lr, r3
 800800a:	4770      	bx	lr

0800800c <_fini>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	bf00      	nop
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr
