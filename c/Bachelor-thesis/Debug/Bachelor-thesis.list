
Bachelor-thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007550  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08007690  08007690  00017690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000008  08007da8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c0  200001e8  08007f88  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002a8  08007f88  000202a8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fe95  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000024d6  00000000  00000000  000300ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001410  00000000  00000000  00032588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001308  00000000  00000000  00033998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000227c9  00000000  00000000  00034ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f380  00000000  00000000  00057469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000db5a7  00000000  00000000  000667e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00141d90  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000063d8  00000000  00000000  00141de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stabstr      0000004e  00000000  00000000  001481b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08007678 	.word	0x08007678

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	08007678 	.word	0x08007678

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b68:	f023 0218 	bic.w	r2, r3, #24
 8000b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <send_start_signal>:
    printf("Fastest response time us:       %f\n", min);
    printf("Slowest response time us:       %f\n", max);
    printf("--------------------------------------------------------\n");
}

void send_start_signal(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <send_start_signal+0x1c>)
 8000bc2:	f001 f8a7 	bl	8001d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <send_start_signal+0x1c>)
 8000bcc:	f001 f8a2 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	48000800 	.word	0x48000800

08000bd8 <send_stop_signal>:
void send_stop_signal(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2104      	movs	r1, #4
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <send_stop_signal+0x1c>)
 8000be2:	f001 f897 	bl	8001d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2104      	movs	r1, #4
 8000bea:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <send_stop_signal+0x1c>)
 8000bec:	f001 f892 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	48000800 	.word	0x48000800

08000bf8 <stop_mode_with_rtc_wakeup>:

void stop_mode_with_rtc_wakeup(uint32_t wakeup_interval_ms, uint32_t wakeup_count)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
    uint32_t run_counter = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]

    // Convert the interval from milliseconds to RTC clock ticks
    float multiplier = 1/0.488;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <stop_mode_with_rtc_wakeup+0x78>)
 8000c08:	613b      	str	r3, [r7, #16]
    uint32_t interval = wakeup_interval_ms * multiplier;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c14:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c20:	ee17 3a90 	vmov	r3, s15
 8000c24:	60fb      	str	r3, [r7, #12]

    while (run_counter < wakeup_count)
 8000c26:	e01a      	b.n	8000c5e <stop_mode_with_rtc_wakeup+0x66>
    {
        send_start_signal();
 8000c28:	f7ff ffc6 	bl	8000bb8 <send_start_signal>

        // Enter Stop mode
        HAL_SuspendTick();
 8000c2c:	f000 fdba 	bl	80017a4 <HAL_SuspendTick>
        // Configure the RTC Wake-up timer
        HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, interval, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000c30:	2200      	movs	r2, #0
 8000c32:	68f9      	ldr	r1, [r7, #12]
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <stop_mode_with_rtc_wakeup+0x7c>)
 8000c36:	f002 ff5d 	bl	8003af4 <HAL_RTCEx_SetWakeUpTimer_IT>
        HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f001 f8c4 	bl	8001dc8 <HAL_PWREx_EnterSTOP2Mode>

        // Disable the RTC Wake-up timer
        HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <stop_mode_with_rtc_wakeup+0x7c>)
 8000c42:	f003 f813 	bl	8003c6c <HAL_RTCEx_DeactivateWakeUpTimer>
        SystemClock_Config(); // Reconfigure the system clock after waking up
 8000c46:	f000 f947 	bl	8000ed8 <SystemClock_Config>

        // Wake up from Stop mode
        HAL_ResumeTick();
 8000c4a:	f000 fdbb 	bl	80017c4 <HAL_ResumeTick>

        send_stop_signal();
 8000c4e:	f7ff ffc3 	bl	8000bd8 <send_stop_signal>
        HAL_Delay(10);
 8000c52:	200a      	movs	r0, #10
 8000c54:	f000 fd82 	bl	800175c <HAL_Delay>

        run_counter++;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
    while (run_counter < wakeup_count)
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d3e0      	bcc.n	8000c28 <stop_mode_with_rtc_wakeup+0x30>
    }
}
 8000c66:	bf00      	nop
 8000c68:	bf00      	nop
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	400325c5 	.word	0x400325c5
 8000c74:	20000204 	.word	0x20000204

08000c78 <send16Bit>:
        printf("DEATH\n");
    }
}


_Bool send16Bit(uint16_t *send){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2, 10) == HAL_OK){
 8000c80:	230a      	movs	r3, #10
 8000c82:	2202      	movs	r2, #2
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <send16Bit+0x28>)
 8000c88:	f003 f921 	bl	8003ece <HAL_SPI_Transmit>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <send16Bit+0x1e>
		return true;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <send16Bit+0x20>
	}
	return false;
 8000c96:	2300      	movs	r3, #0

}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000228 	.word	0x20000228

08000ca4 <send_settings_spi>:
	if(HAL_SPI_Receive(&hspi1, (uint8_t*)readInto, 2, 10) == HAL_OK){
		return true;
	}
	return false;
}
void send_settings_spi(uint16_t sleep_time, uint16_t run_amount, uint16_t run_type){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	80bb      	strh	r3, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef sendSleepTimeReady = HAL_SPI_Transmit(&hspi1, &SLEEP_TIME_ADDR, 1, 10);
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4925      	ldr	r1, [pc, #148]	; (8000d50 <send_settings_spi+0xac>)
 8000cbc:	4825      	ldr	r0, [pc, #148]	; (8000d54 <send_settings_spi+0xb0>)
 8000cbe:	f003 f906 	bl	8003ece <HAL_SPI_Transmit>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	73fb      	strb	r3, [r7, #15]
	if(sendSleepTimeReady == HAL_OK){
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10c      	bne.n	8000ce6 <send_settings_spi+0x42>
		if(!send16Bit(&sleep_time)){
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ffd2 	bl	8000c78 <send16Bit>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f083 0301 	eor.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <send_settings_spi+0x42>
			printf("COULD NOT SEND SLEEP TIME");
 8000ce0:	481d      	ldr	r0, [pc, #116]	; (8000d58 <send_settings_spi+0xb4>)
 8000ce2:	f004 ff1b 	bl	8005b1c <iprintf>
		}
	}
	else{
		//
	}
	HAL_StatusTypeDef sendRunAmountReady = HAL_SPI_Transmit(&hspi1, &RUN_AMOUNT_ADDR, 1, 10);
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	2201      	movs	r2, #1
 8000cea:	491c      	ldr	r1, [pc, #112]	; (8000d5c <send_settings_spi+0xb8>)
 8000cec:	4819      	ldr	r0, [pc, #100]	; (8000d54 <send_settings_spi+0xb0>)
 8000cee:	f003 f8ee 	bl	8003ece <HAL_SPI_Transmit>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73bb      	strb	r3, [r7, #14]
	if(sendRunAmountReady == HAL_OK){
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10c      	bne.n	8000d16 <send_settings_spi+0x72>
		if(!send16Bit(&run_amount)){
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ffba 	bl	8000c78 <send16Bit>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f083 0301 	eor.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <send_settings_spi+0x72>
			printf("COULD NOT SEND RUN AMOUNT");
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <send_settings_spi+0xbc>)
 8000d12:	f004 ff03 	bl	8005b1c <iprintf>
		}
	}
	HAL_StatusTypeDef sendRunTypeReady = HAL_SPI_Transmit(&hspi1, &TEST_MODE_ADDR, 1, 10);
 8000d16:	230a      	movs	r3, #10
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4912      	ldr	r1, [pc, #72]	; (8000d64 <send_settings_spi+0xc0>)
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <send_settings_spi+0xb0>)
 8000d1e:	f003 f8d6 	bl	8003ece <HAL_SPI_Transmit>
 8000d22:	4603      	mov	r3, r0
 8000d24:	737b      	strb	r3, [r7, #13]
	if(sendRunTypeReady == HAL_OK){
 8000d26:	7b7b      	ldrb	r3, [r7, #13]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10c      	bne.n	8000d46 <send_settings_spi+0xa2>
		if(!send16Bit(&run_type)){
 8000d2c:	1cbb      	adds	r3, r7, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ffa2 	bl	8000c78 <send16Bit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f083 0301 	eor.w	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <send_settings_spi+0xa2>
			printf("COULD NOT SEND RUN TYPE");
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <send_settings_spi+0xc4>)
 8000d42:	f004 feeb 	bl	8005b1c <iprintf>
		}
	}

}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000228 	.word	0x20000228
 8000d58:	080078c0 	.word	0x080078c0
 8000d5c:	20000009 	.word	0x20000009
 8000d60:	080078dc 	.word	0x080078dc
 8000d64:	2000000a 	.word	0x2000000a
 8000d68:	080078f8 	.word	0x080078f8

08000d6c <receive_data_SPI>:

uint16_t* receive_data_SPI(uint16_t run_amount){
 8000d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d70:	b089      	sub	sp, #36	; 0x24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	80fb      	strh	r3, [r7, #6]
 8000d78:	466b      	mov	r3, sp
 8000d7a:	461e      	mov	r6, r3
	uint8_t bytesread[run_amount * 2];
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	0059      	lsls	r1, r3, #1
 8000d80:	1e4b      	subs	r3, r1, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	460a      	mov	r2, r1
 8000d86:	2300      	movs	r3, #0
 8000d88:	4690      	mov	r8, r2
 8000d8a:	4699      	mov	r9, r3
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000da0:	460a      	mov	r2, r1
 8000da2:	2300      	movs	r3, #0
 8000da4:	4614      	mov	r4, r2
 8000da6:	461d      	mov	r5, r3
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	00eb      	lsls	r3, r5, #3
 8000db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000db6:	00e2      	lsls	r2, r4, #3
 8000db8:	460b      	mov	r3, r1
 8000dba:	3307      	adds	r3, #7
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	ebad 0d03 	sub.w	sp, sp, r3
 8000dc4:	466b      	mov	r3, sp
 8000dc6:	3300      	adds	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
	uint16_t *received_data = malloc(run_amount * sizeof(uint16_t));
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f004 f934 	bl	800503c <malloc>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60fb      	str	r3, [r7, #12]
	if (received_data == NULL){
		// Handle error
	}

	// Wait for the RECEIVE_READY_Pin to go high before proceeding
	while (HAL_GPIO_ReadPin(RECEIVE_READY_GPIO_Port, RECEIVE_READY_Pin) == GPIO_PIN_RESET)
 8000dd8:	bf00      	nop
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <receive_data_SPI+0xfc>)
 8000dde:	f000 ff81 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f8      	beq.n	8000dda <receive_data_SPI+0x6e>
	{
		// add timeout or yield to other tasks here if necessary
	}

	for (int i = 0; i < run_amount * 2; i += 2){
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	e00b      	b.n	8000e06 <receive_data_SPI+0x9a>
		HAL_SPI_Receive(&hspi1, &bytesread[i], 2, HAL_MAX_DELAY); // Receive two bytes of data over SPI
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	18d1      	adds	r1, r2, r3
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df8:	2202      	movs	r2, #2
 8000dfa:	481c      	ldr	r0, [pc, #112]	; (8000e6c <receive_data_SPI+0x100>)
 8000dfc:	f003 f9d5 	bl	80041aa <HAL_SPI_Receive>
	for (int i = 0; i < run_amount * 2; i += 2){
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	3302      	adds	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbee      	blt.n	8000dee <receive_data_SPI+0x82>
	}

	// Process the received data and store it in received_data
	for (int i = 0; i < run_amount; i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	e017      	b.n	8000e46 <receive_data_SPI+0xda>
		uint16_t data = bytesread[i * 2 + 1] << 8 | bytesread[i * 2];
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	6939      	ldr	r1, [r7, #16]
 8000e2a:	5ccb      	ldrb	r3, [r1, r3]
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	817b      	strh	r3, [r7, #10]
		received_data[i] = data;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	897a      	ldrh	r2, [r7, #10]
 8000e3e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < run_amount; i++){
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	3301      	adds	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbe3      	blt.n	8000e16 <receive_data_SPI+0xaa>
	}

	printf("%d\n", run_amount); // Print the number of SPI transfers made
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <receive_data_SPI+0x104>)
 8000e54:	f004 fe62 	bl	8005b1c <iprintf>
	return received_data;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	46b5      	mov	sp, r6
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3724      	adds	r7, #36	; 0x24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e66:	bf00      	nop
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	20000228 	.word	0x20000228
 8000e70:	08007910 	.word	0x08007910

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7a:	f000 fbe9 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7e:	f000 f82b 	bl	8000ed8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e82:	f000 f885 	bl	8000f90 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 f911 	bl	80010ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e8a:	f000 f8d3 	bl	8001034 <MX_SPI1_Init>
  MX_RTC_Init();
 8000e8e:	f000 f89d 	bl	8000fcc <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 while(!finished)
 8000e92:	e017      	b.n	8000ec4 <main+0x50>
	 {
		 send_settings_spi(1000, 100, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2164      	movs	r1, #100	; 0x64
 8000e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9c:	f7ff ff02 	bl	8000ca4 <send_settings_spi>
		 HAL_Delay(10);
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 fc5b 	bl	800175c <HAL_Delay>
		 //lightsleep_test(1000, 10);
		 stop_mode_with_rtc_wakeup(1000, 100);
 8000ea6:	2164      	movs	r1, #100	; 0x64
 8000ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eac:	f7ff fea4 	bl	8000bf8 <stop_mode_with_rtc_wakeup>
		 uint16_t *data = receive_data_SPI(10);
 8000eb0:	200a      	movs	r0, #10
 8000eb2:	f7ff ff5b 	bl	8000d6c <receive_data_SPI>
 8000eb6:	6078      	str	r0, [r7, #4]
	     // Free the allocated memory for received_data
		 free(data);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f004 f8c7 	bl	800504c <free>
		 finished = true;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <main+0x60>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
	 while(!finished)
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <main+0x60>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f083 0301 	eor.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1e0      	bne.n	8000e94 <main+0x20>
 8000ed2:	e7f7      	b.n	8000ec4 <main+0x50>
 8000ed4:	2000028c 	.word	0x2000028c

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b09a      	sub	sp, #104	; 0x68
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2248      	movs	r2, #72	; 0x48
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 f8c6 	bl	8005078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000efe:	f000 ff45 	bl	8001d8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000f02:	2010      	movs	r0, #16
 8000f04:	f7ff fe28 	bl	8000b58 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <SystemClock_Config+0xb4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f10:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <SystemClock_Config+0xb4>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <SystemClock_Config+0xb4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000f24:	2307      	movs	r3, #7
 8000f26:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fac9 	bl	80024dc <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000f50:	f000 f926 	bl	80011a0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f54:	236f      	movs	r3, #111	; 0x6f
 8000f56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2101      	movs	r1, #1
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fe25 	bl	8002bc4 <HAL_RCC_ClockConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f80:	f000 f90e 	bl	80011a0 <Error_Handler>
  }
}
 8000f84:	bf00      	nop
 8000f86:	3768      	adds	r7, #104	; 0x68
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	58000400 	.word	0x58000400

08000f90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2250      	movs	r2, #80	; 0x50
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 f86b 	bl	8005078 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fa17 	bl	80033e6 <HAL_RCCEx_PeriphCLKConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000fbe:	f000 f8ef 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	; 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_RTC_Init+0x60>)
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <MX_RTC_Init+0x64>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_RTC_Init+0x60>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_RTC_Init+0x60>)
 8000fde:	227f      	movs	r2, #127	; 0x7f
 8000fe0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_RTC_Init+0x60>)
 8000fe4:	22ff      	movs	r2, #255	; 0xff
 8000fe6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_RTC_Init+0x60>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_RTC_Init+0x60>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <MX_RTC_Init+0x60>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_RTC_Init+0x60>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <MX_RTC_Init+0x60>)
 8001002:	f002 fc77 	bl	80038f4 <HAL_RTC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800100c:	f000 f8c8 	bl	80011a0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001010:	2200      	movs	r2, #0
 8001012:	f245 010b 	movw	r1, #20491	; 0x500b
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_RTC_Init+0x60>)
 8001018:	f002 fd6c 	bl	8003af4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001022:	f000 f8bd 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000204 	.word	0x20000204
 8001030:	40002800 	.word	0x40002800

08001034 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_SPI1_Init+0x70>)
 800103a:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <MX_SPI1_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_SPI1_Init+0x70>)
 8001040:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001044:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_SPI1_Init+0x70>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_SPI1_Init+0x70>)
 800104e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001052:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_SPI1_Init+0x70>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_SPI1_Init+0x70>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_SPI1_Init+0x70>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_SPI1_Init+0x70>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_SPI1_Init+0x70>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_SPI1_Init+0x70>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_SPI1_Init+0x70>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_SPI1_Init+0x70>)
 8001080:	2207      	movs	r2, #7
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_SPI1_Init+0x70>)
 8001086:	2200      	movs	r2, #0
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_SPI1_Init+0x70>)
 800108c:	2208      	movs	r2, #8
 800108e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_SPI1_Init+0x70>)
 8001092:	f002 fe79 	bl	8003d88 <HAL_SPI_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 800109c:	f000 f880 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000228 	.word	0x20000228
 80010a8:	40013000 	.word	0x40013000

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c0:	2004      	movs	r0, #4
 80010c2:	f7ff fd5f 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff fd5c 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	2002      	movs	r0, #2
 80010ce:	f7ff fd59 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	2008      	movs	r0, #8
 80010d4:	f7ff fd56 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIMER_PIN_Pin|RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2105      	movs	r1, #5
 80010dc:	482d      	ldr	r0, [pc, #180]	; (8001194 <MX_GPIO_Init+0xe8>)
 80010de:	f000 fe19 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2133      	movs	r1, #51	; 0x33
 80010e6:	482c      	ldr	r0, [pc, #176]	; (8001198 <MX_GPIO_Init+0xec>)
 80010e8:	f000 fe14 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TIMER_PIN_Pin RESPONSE_PIN_Pin */
  GPIO_InitStruct.Pin = TIMER_PIN_Pin|RESPONSE_PIN_Pin;
 80010ec:	2305      	movs	r3, #5
 80010ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f4:	2302      	movs	r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4824      	ldr	r0, [pc, #144]	; (8001194 <MX_GPIO_Init+0xe8>)
 8001102:	f000 fc7f 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_PIN_Pin;
 8001106:	2302      	movs	r3, #2
 8001108:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800110e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001110:	2302      	movs	r3, #2
 8001112:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IRQ_PIN_GPIO_Port, &GPIO_InitStruct);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	481e      	ldr	r0, [pc, #120]	; (8001194 <MX_GPIO_Init+0xe8>)
 800111a:	f000 fc73 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800111e:	2310      	movs	r3, #16
 8001120:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4619      	mov	r1, r3
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <MX_GPIO_Init+0xe8>)
 8001130:	f000 fc68 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin CHIP_SELECT_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin;
 8001134:	2333      	movs	r3, #51	; 0x33
 8001136:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_GPIO_Init+0xec>)
 800114a:	f000 fc5b 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 B3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 800114e:	2303      	movs	r3, #3
 8001150:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4619      	mov	r1, r3
 800115e:	480f      	ldr	r0, [pc, #60]	; (800119c <MX_GPIO_Init+0xf0>)
 8001160:	f000 fc50 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECEIVE_READY_Pin */
  GPIO_InitStruct.Pin = RECEIVE_READY_Pin;
 8001164:	2340      	movs	r3, #64	; 0x40
 8001166:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(RECEIVE_READY_GPIO_Port, &GPIO_InitStruct);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <MX_GPIO_Init+0xec>)
 8001176:	f000 fc45 	bl	8001a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2007      	movs	r0, #7
 8001180:	f000 fc0b 	bl	800199a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001184:	2007      	movs	r0, #7
 8001186:	f000 fc22 	bl	80019ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	48000800 	.word	0x48000800
 8001198:	48000400 	.word	0x48000400
 800119c:	48000c00 	.word	0x48000c00

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>

080011aa <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80011ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_AHB2_GRP1_EnableClock>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011f0:	68fb      	ldr	r3, [r7, #12]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011fe:	b480      	push	{r7}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800120c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4313      	orrs	r3, r2
 8001214:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4013      	ands	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800123e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001254:	68fb      	ldr	r3, [r7, #12]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b096      	sub	sp, #88	; 0x58
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	2250      	movs	r2, #80	; 0x50
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f003 fef9 	bl	8005078 <memset>
  if(hrtc->Instance==RTC)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <HAL_RTC_MspInit+0x64>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d11d      	bne.n	80012cc <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001294:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 f8a0 	bl	80033e6 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80012ac:	f7ff ff78 	bl	80011a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012b0:	f7ff ff7b 	bl	80011aa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80012b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012b8:	f7ff ffa1 	bl	80011fe <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 fb6a 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80012c6:	2003      	movs	r0, #3
 80012c8:	f000 fb81 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3758      	adds	r7, #88	; 0x58
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40002800 	.word	0x40002800

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_SPI_MspInit+0x5c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d117      	bne.n	800132a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012fe:	f7ff ff97 	bl	8001230 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff ff62 	bl	80011cc <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001308:	23f0      	movs	r3, #240	; 0xf0
 800130a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001318:	2305      	movs	r3, #5
 800131a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f000 fb6d 	bl	8001a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40013000 	.word	0x40013000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f9be 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <RTC_WKUP_IRQHandler+0x10>)
 8001392:	f002 fcc9 	bl	8003d28 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000204 	.word	0x20000204

080013a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_PIN_Pin);
 80013a4:	2002      	movs	r0, #2
 80013a6:	f000 fccd 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_kill>:

int _kill(int pid, int sig)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c8:	f003 fbee 	bl	8004ba8 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2216      	movs	r2, #22
 80013d0:	601a      	str	r2, [r3, #0]
  return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_exit>:

void _exit (int status)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffe7 	bl	80013be <_kill>
  while (1) {}    /* Make sure we hang here */
 80013f0:	e7fe      	b.n	80013f0 <_exit+0x12>

080013f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e00a      	b.n	800141a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001404:	f3af 8000 	nop.w
 8001408:	4601      	mov	r1, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	60ba      	str	r2, [r7, #8]
 8001410:	b2ca      	uxtb	r2, r1
 8001412:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	dbf0      	blt.n	8001404 <_read+0x12>
  }

  return len;
 8001422:	687b      	ldr	r3, [r7, #4]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e009      	b.n	8001452 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	60ba      	str	r2, [r7, #8]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	dbf1      	blt.n	800143e <_write+0x12>
  }
  return len;
 800145a:	687b      	ldr	r3, [r7, #4]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_close>:

int _close(int file)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148c:	605a      	str	r2, [r3, #4]
  return 0;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_isatty>:

int _isatty(int file)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b085      	sub	sp, #20
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f003 fb54 	bl	8004ba8 <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20030000 	.word	0x20030000
 800152c:	00000400 	.word	0x00000400
 8001530:	20000290 	.word	0x20000290
 8001534:	200002a8 	.word	0x200002a8

08001538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <SystemInit+0x98>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <SystemInit+0x98>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800154c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001564:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <SystemInit+0x9c>)
 8001572:	4013      	ands	r3, r2
 8001574:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001582:	f023 0305 	bic.w	r3, r3, #5
 8001586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a2:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <SystemInit+0xa0>)
 80015a4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <SystemInit+0xa0>)
 80015ac:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	faf6fefb 	.word	0xfaf6fefb
 80015d8:	22041000 	.word	0x22041000

080015dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e0:	3304      	adds	r3, #4

080015e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015e6:	d3f9      	bcc.n	80015dc <CopyDataInit>
  bx lr
 80015e8:	4770      	bx	lr

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015ec:	3004      	adds	r0, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>
  bx lr
 80015f2:	4770      	bx	lr

080015f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f8:	f7ff ff9e 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <LoopForever+0x6>)
 80015fe:	490c      	ldr	r1, [pc, #48]	; (8001630 <LoopForever+0xa>)
 8001600:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <LoopForever+0xe>)
 8001602:	2300      	movs	r3, #0
 8001604:	f7ff ffed 	bl	80015e2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <LoopForever+0x12>)
 800160a:	490c      	ldr	r1, [pc, #48]	; (800163c <LoopForever+0x16>)
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <LoopForever+0x1a>)
 800160e:	2300      	movs	r3, #0
 8001610:	f7ff ffe7 	bl	80015e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <LoopForever+0x1e>)
 8001616:	490c      	ldr	r1, [pc, #48]	; (8001648 <LoopForever+0x22>)
 8001618:	2300      	movs	r3, #0
 800161a:	f7ff ffe8 	bl	80015ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800161e:	f003 fc81 	bl	8004f24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001622:	f7ff fc27 	bl	8000e74 <main>

08001626 <LoopForever>:

LoopForever:
  b LoopForever
 8001626:	e7fe      	b.n	8001626 <LoopForever>
  ldr   r0, =_estack
 8001628:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800162c:	20000008 	.word	0x20000008
 8001630:	200001e8 	.word	0x200001e8
 8001634:	08007da8 	.word	0x08007da8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001638:	20030000 	.word	0x20030000
 800163c:	20030000 	.word	0x20030000
 8001640:	08007f88 	.word	0x08007f88
  INIT_BSS _sbss, _ebss
 8001644:	200001e8 	.word	0x200001e8
 8001648:	200002a8 	.word	0x200002a8

0800164c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_Init+0x3c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_Init+0x3c>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001664:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001666:	2003      	movs	r0, #3
 8001668:	f000 f98c 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166c:	2000      	movs	r0, #0
 800166e:	f000 f80f 	bl	8001690 <HAL_InitTick>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	e001      	b.n	8001682 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800167e:	f7ff fdf0 	bl	8001262 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001682:	79fb      	ldrb	r3, [r7, #7]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	58004000 	.word	0x58004000

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_InitTick+0x6c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d024      	beq.n	80016ee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016a4:	f001 fc3a 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_InitTick+0x6c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f994 	bl	80019ea <HAL_SYSTICK_Config>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10f      	bne.n	80016e8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	d809      	bhi.n	80016e2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ce:	2200      	movs	r2, #0
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016d6:	f000 f960 	bl	800199a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <HAL_InitTick+0x70>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e004      	b.n	80016f2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000014 	.word	0x20000014
 8001700:	20000010 	.word	0x20000010

08001704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000014 	.word	0x20000014
 8001728:	20000294 	.word	0x20000294

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000294 	.word	0x20000294

08001744 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTickPrio+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000010 	.word	0x20000010

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffe2 	bl	800172c <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffd2 	bl	800172c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000014 	.word	0x20000014

080017a4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_SuspendTick+0x1c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_SuspendTick+0x1c>)
 80017ae:	f023 0302 	bic.w	r3, r3, #2
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_ResumeTick+0x1c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_ResumeTick+0x1c>)
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0b      	blt.n	8001872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	4907      	ldr	r1, [pc, #28]	; (8001880 <__NVIC_EnableIRQ+0x38>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff29 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff40 	bl	800182c <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff33 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa4 	bl	8001940 <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	e14c      	b.n	8001cae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 813e 	beq.w	8001ca8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d005      	beq.n	8001a44 <HAL_GPIO_Init+0x40>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d130      	bne.n	8001aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	f003 0201 	and.w	r2, r3, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d017      	beq.n	8001ae2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d123      	bne.n	8001b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	6939      	ldr	r1, [r7, #16]
 8001b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0203 	and.w	r2, r3, #3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8098 	beq.w	8001ca8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b78:	4a54      	ldr	r2, [pc, #336]	; (8001ccc <HAL_GPIO_Init+0x2c8>)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ba2:	d019      	beq.n	8001bd8 <HAL_GPIO_Init+0x1d4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_GPIO_Init+0x2cc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_GPIO_Init+0x1d0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_GPIO_Init+0x1cc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a48      	ldr	r2, [pc, #288]	; (8001cd8 <HAL_GPIO_Init+0x2d4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x1c8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a47      	ldr	r2, [pc, #284]	; (8001cdc <HAL_GPIO_Init+0x2d8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_GPIO_Init+0x1c4>
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	e008      	b.n	8001bda <HAL_GPIO_Init+0x1d6>
 8001bc8:	2307      	movs	r3, #7
 8001bca:	e006      	b.n	8001bda <HAL_GPIO_Init+0x1d6>
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e004      	b.n	8001bda <HAL_GPIO_Init+0x1d6>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e002      	b.n	8001bda <HAL_GPIO_Init+0x1d6>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_GPIO_Init+0x1d6>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	f002 0203 	and.w	r2, r2, #3
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	4093      	lsls	r3, r2
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bea:	4938      	ldr	r1, [pc, #224]	; (8001ccc <HAL_GPIO_Init+0x2c8>)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bf8:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c1c:	4a30      	ldr	r2, [pc, #192]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c46:	4a26      	ldr	r2, [pc, #152]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c72:	4a1b      	ldr	r2, [pc, #108]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f47f aeab 	bne.w	8001a14 <HAL_GPIO_Init+0x10>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	48000400 	.word	0x48000400
 8001cd4:	48000800 	.word	0x48000800
 8001cd8:	48000c00 	.word	0x48000c00
 8001cdc:	48001000 	.word	0x48001000
 8001ce0:	58000800 	.word	0x58000800

08001ce4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f806 	bl	8001d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	58000800 	.word	0x58000800

08001d74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	58000400 	.word	0x58000400

08001dac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	58000400 	.word	0x58000400

08001dc8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0307 	bic.w	r3, r3, #7
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001df4:	bf30      	wfi
 8001df6:	e002      	b.n	8001dfe <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001df8:	bf40      	sev
    __WFE();
 8001dfa:	bf20      	wfe
    __WFE();
 8001dfc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6113      	str	r3, [r2, #16]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	58000400 	.word	0x58000400
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e32:	d101      	bne.n	8001e38 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_RCC_HSE_Enable>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_RCC_HSE_Disable>:
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_RCC_HSE_IsReady>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e92:	d101      	bne.n	8001e98 <LL_RCC_HSE_IsReady+0x18>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_RCC_HSE_IsReady+0x1a>
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_HSI_Enable>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_RCC_HSI_Disable>:
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed4:	6013      	str	r3, [r2, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_RCC_HSI_IsReady>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d101      	bne.n	8001ef8 <LL_RCC_HSI_IsReady+0x18>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <LL_RCC_HSI_IsReady+0x1a>
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_HSI48_Enable>:
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_RCC_HSI48_Disable>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_HSI48_IsReady>:
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d101      	bne.n	8001f8a <LL_RCC_HSI48_IsReady+0x18>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <LL_RCC_HSI48_IsReady+0x1a>
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_RCC_LSE_Enable>:
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_RCC_LSE_Disable>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_RCC_LSE_EnableBypass>:
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_RCC_LSE_DisableBypass>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_RCC_LSE_IsReady>:
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d101      	bne.n	8002036 <LL_RCC_LSE_IsReady+0x18>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_RCC_LSE_IsReady+0x1a>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_RCC_LSI1_Enable>:
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_RCC_LSI1_Disable>:
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RCC_LSI1_IsReady>:
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d101      	bne.n	800209e <LL_RCC_LSI1_IsReady+0x18>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_RCC_LSI1_IsReady+0x1a>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_RCC_LSI2_Enable>:
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_RCC_LSI2_Disable>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020dc:	f023 0304 	bic.w	r3, r3, #4
 80020e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_RCC_LSI2_IsReady>:
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d101      	bne.n	8002106 <LL_RCC_LSI2_IsReady+0x18>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <LL_RCC_LSI2_IsReady+0x1a>
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_RCC_LSI2_SetTrimming>:
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_RCC_MSI_Enable>:
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_RCC_MSI_Disable>:
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6013      	str	r3, [r2, #0]
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_RCC_MSI_IsReady>:
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d101      	bne.n	8002192 <LL_RCC_MSI_IsReady+0x16>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <LL_RCC_MSI_IsReady+0x18>
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_RCC_MSI_SetRange>:
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_RCC_MSI_GetRange>:
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2bb0      	cmp	r3, #176	; 0xb0
 80021dc:	d901      	bls.n	80021e2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80021de:	23b0      	movs	r3, #176	; 0xb0
 80021e0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80021e2:	687b      	ldr	r3, [r7, #4]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_RCC_SetSysClkSource>:
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 0203 	bic.w	r2, r3, #3
 800222c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_RCC_GetSysClkSource>:
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_RCC_SetAHBPrescaler>:
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_RCC_SetAHB4Prescaler>:
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022be:	f023 020f 	bic.w	r2, r3, #15
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_RCC_SetAPB1Prescaler>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_RCC_SetAPB2Prescaler>:
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_RCC_GetAHBPrescaler>:
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_RCC_GetAHB4Prescaler>:
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002390:	6013      	str	r3, [r2, #0]
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ae:	d101      	bne.n	80023b4 <LL_RCC_PLL_IsReady+0x18>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <LL_RCC_PLL_IsReady+0x1a>
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80023f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0303 	and.w	r3, r3, #3
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d101      	bne.n	800243a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800244a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800245a:	d101      	bne.n	8002460 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d101      	bne.n	8002486 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024a4:	d101      	bne.n	80024aa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024c8:	d101      	bne.n	80024ce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b08d      	sub	sp, #52	; 0x34
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e363      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 808d 	beq.w	8002616 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fc:	f7ff fea1 	bl	8002242 <LL_RCC_GetSysClkSource>
 8002500:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002502:	f7ff ff82 	bl	800240a <LL_RCC_PLL_GetMainSource>
 8002506:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x3e>
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d147      	bne.n	80025a4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	2b01      	cmp	r3, #1
 8002518:	d144      	bne.n	80025a4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e347      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800252a:	f7ff fe4c 	bl	80021c6 <LL_RCC_MSI_GetRange>
 800252e:	4603      	mov	r3, r0
 8002530:	429c      	cmp	r4, r3
 8002532:	d914      	bls.n	800255e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fd03 	bl	8002f44 <RCC_SetFlashLatencyFromMSIRange>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e336      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fe26 	bl	800219e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fe4a 	bl	80021f0 <LL_RCC_MSI_SetCalibTrimming>
 800255c:	e013      	b.n	8002586 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fe1b 	bl	800219e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fe3f 	bl	80021f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fce4 	bl	8002f44 <RCC_SetFlashLatencyFromMSIRange>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e317      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002586:	f000 fcc9 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 800258a:	4603      	mov	r3, r0
 800258c:	4aa4      	ldr	r2, [pc, #656]	; (8002820 <HAL_RCC_OscConfig+0x344>)
 800258e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002590:	4ba4      	ldr	r3, [pc, #656]	; (8002824 <HAL_RCC_OscConfig+0x348>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f87b 	bl	8001690 <HAL_InitTick>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d039      	beq.n	8002614 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e308      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01e      	beq.n	80025ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ac:	f7ff fdc8 	bl	8002140 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025b0:	f7ff f8bc 	bl	800172c <HAL_GetTick>
 80025b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b8:	f7ff f8b8 	bl	800172c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e2f5      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80025ca:	f7ff fdd7 	bl	800217c <LL_RCC_MSI_IsReady>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f1      	beq.n	80025b8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fde0 	bl	800219e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fe04 	bl	80021f0 <LL_RCC_MSI_SetCalibTrimming>
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025ea:	f7ff fdb8 	bl	800215e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ee:	f7ff f89d 	bl	800172c <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f6:	f7ff f899 	bl	800172c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e2d6      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002608:	f7ff fdb8 	bl	800217c <LL_RCC_MSI_IsReady>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f1      	bne.n	80025f6 <HAL_RCC_OscConfig+0x11a>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002614:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d047      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002622:	f7ff fe0e 	bl	8002242 <LL_RCC_GetSysClkSource>
 8002626:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002628:	f7ff feef 	bl	800240a <LL_RCC_PLL_GetMainSource>
 800262c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d005      	beq.n	8002640 <HAL_RCC_OscConfig+0x164>
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d105      	bne.n	800264c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d134      	bne.n	80026b2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e2b4      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d102      	bne.n	800265c <HAL_RCC_OscConfig+0x180>
 8002656:	f7ff fbf5 	bl	8001e44 <LL_RCC_HSE_Enable>
 800265a:	e001      	b.n	8002660 <HAL_RCC_OscConfig+0x184>
 800265c:	f7ff fc01 	bl	8001e62 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d012      	beq.n	800268e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff f860 	bl	800172c <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff f85c 	bl	800172c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e299      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002682:	f7ff fbfd 	bl	8001e80 <LL_RCC_HSE_IsReady>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f1      	beq.n	8002670 <HAL_RCC_OscConfig+0x194>
 800268c:	e011      	b.n	80026b2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7ff f84d 	bl	800172c <HAL_GetTick>
 8002692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002696:	f7ff f849 	bl	800172c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	; 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e286      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80026a8:	f7ff fbea 	bl	8001e80 <LL_RCC_HSE_IsReady>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f1      	bne.n	8002696 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04c      	beq.n	8002758 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026be:	f7ff fdc0 	bl	8002242 <LL_RCC_GetSysClkSource>
 80026c2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c4:	f7ff fea1 	bl	800240a <LL_RCC_PLL_GetMainSource>
 80026c8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_OscConfig+0x200>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d10e      	bne.n	80026f4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d10b      	bne.n	80026f4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e266      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fc09 	bl	8001f04 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80026f2:	e031      	b.n	8002758 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d019      	beq.n	8002730 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fc:	f7ff fbd2 	bl	8001ea4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7ff f814 	bl	800172c <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002708:	f7ff f810 	bl	800172c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e24d      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800271a:	f7ff fbe1 	bl	8001ee0 <LL_RCC_HSI_IsReady>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f1      	beq.n	8002708 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fbeb 	bl	8001f04 <LL_RCC_HSI_SetCalibTrimming>
 800272e:	e013      	b.n	8002758 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002730:	f7ff fbc7 	bl	8001ec2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fffa 	bl	800172c <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273c:	f7fe fff6 	bl	800172c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e233      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800274e:	f7ff fbc7 	bl	8001ee0 <LL_RCC_HSI_IsReady>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f1      	bne.n	800273c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a3 	beq.w	80028b8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d076      	beq.n	8002868 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d046      	beq.n	8002814 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002786:	f7ff fc7e 	bl	8002086 <LL_RCC_LSI1_IsReady>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d113      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002790:	f7ff fc57 	bl	8002042 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002794:	f7fe ffca 	bl	800172c <HAL_GetTick>
 8002798:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800279c:	f7fe ffc6 	bl	800172c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e203      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80027ae:	f7ff fc6a 	bl	8002086 <LL_RCC_LSI1_IsReady>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f1      	beq.n	800279c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80027b8:	f7ff fc77 	bl	80020aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe ffb6 	bl	800172c <HAL_GetTick>
 80027c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027c4:	f7fe ffb2 	bl	800172c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1ef      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80027d6:	f7ff fc8a 	bl	80020ee <LL_RCC_LSI2_IsReady>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f1      	beq.n	80027c4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fc94 	bl	8002112 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80027ea:	f7ff fc3b 	bl	8002064 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe ff9d 	bl	800172c <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027f6:	f7fe ff99 	bl	800172c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1d6      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002808:	f7ff fc3d 	bl	8002086 <LL_RCC_LSI1_IsReady>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f1      	bne.n	80027f6 <HAL_RCC_OscConfig+0x31a>
 8002812:	e051      	b.n	80028b8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002814:	f7ff fc15 	bl	8002042 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe ff88 	bl	800172c <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800281e:	e00c      	b.n	800283a <HAL_RCC_OscConfig+0x35e>
 8002820:	2000000c 	.word	0x2000000c
 8002824:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002828:	f7fe ff80 	bl	800172c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1bd      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800283a:	f7ff fc24 	bl	8002086 <LL_RCC_LSI1_IsReady>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f1      	beq.n	8002828 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002844:	f7ff fc42 	bl	80020cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800284a:	f7fe ff6f 	bl	800172c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b03      	cmp	r3, #3
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1ac      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800285c:	f7ff fc47 	bl	80020ee <LL_RCC_LSI2_IsReady>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f1      	bne.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002866:	e027      	b.n	80028b8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002868:	f7ff fc30 	bl	80020cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe ff5e 	bl	800172c <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002874:	f7fe ff5a 	bl	800172c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b03      	cmp	r3, #3
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e197      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002886:	f7ff fc32 	bl	80020ee <LL_RCC_LSI2_IsReady>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f1      	bne.n	8002874 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002890:	f7ff fbe8 	bl	8002064 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe ff4a 	bl	800172c <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800289c:	f7fe ff46 	bl	800172c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e183      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80028ae:	f7ff fbea 	bl	8002086 <LL_RCC_LSI1_IsReady>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f1      	bne.n	800289c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c4:	4ba7      	ldr	r3, [pc, #668]	; (8002b64 <HAL_RCC_OscConfig+0x688>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d114      	bne.n	80028fa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80028d0:	f7ff fa5c 	bl	8001d8c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d4:	f7fe ff2a 	bl	800172c <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe ff26 	bl	800172c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e163      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ee:	4b9d      	ldr	r3, [pc, #628]	; (8002b64 <HAL_RCC_OscConfig+0x688>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_RCC_OscConfig+0x42c>
 8002902:	f7ff fb48 	bl	8001f96 <LL_RCC_LSE_Enable>
 8002906:	e00c      	b.n	8002922 <HAL_RCC_OscConfig+0x446>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b05      	cmp	r3, #5
 800290e:	d104      	bne.n	800291a <HAL_RCC_OscConfig+0x43e>
 8002910:	f7ff fb63 	bl	8001fda <LL_RCC_LSE_EnableBypass>
 8002914:	f7ff fb3f 	bl	8001f96 <LL_RCC_LSE_Enable>
 8002918:	e003      	b.n	8002922 <HAL_RCC_OscConfig+0x446>
 800291a:	f7ff fb4d 	bl	8001fb8 <LL_RCC_LSE_Disable>
 800291e:	f7ff fb6d 	bl	8001ffc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d014      	beq.n	8002954 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fe feff 	bl	800172c <HAL_GetTick>
 800292e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7fe fefb 	bl	800172c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e136      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002948:	f7ff fb69 	bl	800201e <LL_RCC_LSE_IsReady>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ef      	beq.n	8002932 <HAL_RCC_OscConfig+0x456>
 8002952:	e013      	b.n	800297c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe feea 	bl	800172c <HAL_GetTick>
 8002958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fe fee6 	bl	800172c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e121      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002972:	f7ff fb54 	bl	800201e <LL_RCC_LSE_IsReady>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ef      	bne.n	800295c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02c      	beq.n	80029e2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d014      	beq.n	80029ba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002990:	f7ff facd 	bl	8001f2e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe feca 	bl	800172c <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800299c:	f7fe fec6 	bl	800172c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e103      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80029ae:	f7ff fae0 	bl	8001f72 <LL_RCC_HSI48_IsReady>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f1      	beq.n	800299c <HAL_RCC_OscConfig+0x4c0>
 80029b8:	e013      	b.n	80029e2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029ba:	f7ff fac9 	bl	8001f50 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe feb5 	bl	800172c <HAL_GetTick>
 80029c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c6:	f7fe feb1 	bl	800172c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0ee      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80029d8:	f7ff facb 	bl	8001f72 <LL_RCC_HSI48_IsReady>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f1      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80e4 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ec:	f7ff fc29 	bl	8002242 <LL_RCC_GetSysClkSource>
 80029f0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	f040 80b4 	bne.w	8002b6c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0203 	and.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d123      	bne.n	8002a5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d11c      	bne.n	8002a5a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d114      	bne.n	8002a5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d10d      	bne.n	8002a5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d05d      	beq.n	8002b16 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b0c      	cmp	r3, #12
 8002a5e:	d058      	beq.n	8002b12 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0a1      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a72:	f7ff fc84 	bl	800237e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a76:	f7fe fe59 	bl	800172c <HAL_GetTick>
 8002a7a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe fe55 	bl	800172c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e092      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1ef      	bne.n	8002a7e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_RCC_OscConfig+0x68c>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ab0:	4311      	orrs	r1, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab6:	0212      	lsls	r2, r2, #8
 8002ab8:	4311      	orrs	r1, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002abe:	4311      	orrs	r1, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ac4:	4311      	orrs	r1, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002aca:	430a      	orrs	r2, r1
 8002acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ad4:	f7ff fc44 	bl	8002360 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae8:	f7fe fe20 	bl	800172c <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe fe1c 	bl	800172c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e059      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b10:	e050      	b.n	8002bb4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e04f      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d147      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b24:	f7ff fc1c 	bl	8002360 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b38:	f7fe fdf8 	bl	800172c <HAL_GetTick>
 8002b3c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fdf4 	bl	800172c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e031      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ef      	beq.n	8002b40 <HAL_RCC_OscConfig+0x664>
 8002b60:	e028      	b.n	8002bb4 <HAL_RCC_OscConfig+0x6d8>
 8002b62:	bf00      	nop
 8002b64:	58000400 	.word	0x58000400
 8002b68:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d01e      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	f7ff fc04 	bl	800237e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe fdd9 	bl	800172c <HAL_GetTick>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe fdd5 	bl	800172c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e012      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1ef      	bne.n	8002b7e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_OscConfig+0x6e4>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	60cb      	str	r3, [r1, #12]
 8002bae:	e001      	b.n	8002bb4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3734      	adds	r7, #52	; 0x34
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd90      	pop	{r4, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	eefefffc 	.word	0xeefefffc

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e12d      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b98      	ldr	r3, [pc, #608]	; (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d91b      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b95      	ldr	r3, [pc, #596]	; (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 0207 	bic.w	r2, r3, #7
 8002bee:	4993      	ldr	r1, [pc, #588]	; (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf6:	f7fe fd99 	bl	800172c <HAL_GetTick>
 8002bfa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bfe:	f7fe fd95 	bl	800172c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e111      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c10:	4b8a      	ldr	r3, [pc, #552]	; (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d1ef      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fb13 	bl	800225a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c34:	f7fe fd7a 	bl	800172c <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c3c:	f7fe fd76 	bl	800172c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0f2      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c4e:	f7ff fbe8 	bl	8002422 <LL_RCC_IsActiveFlag_HPRE>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f1      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d016      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fb0a 	bl	8002282 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fd5d 	bl	800172c <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c76:	f7fe fd59 	bl	800172c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e0d5      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002c88:	f7ff fbdd 	bl	8002446 <LL_RCC_IsActiveFlag_C2HPRE>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f1      	beq.n	8002c76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d016      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fb03 	bl	80022ae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fd40 	bl	800172c <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cb0:	f7fe fd3c 	bl	800172c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0b8      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002cc2:	f7ff fbd3 	bl	800246c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f1      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d016      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fafd 	bl	80022dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ce2:	f7fe fd23 	bl	800172c <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cea:	f7fe fd1f 	bl	800172c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e09b      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002cfc:	f7ff fbc9 	bl	8002492 <LL_RCC_IsActiveFlag_PPRE1>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f1      	beq.n	8002cea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d017      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff faf3 	bl	8002304 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d1e:	f7fe fd05 	bl	800172c <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d26:	f7fe fd01 	bl	800172c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e07d      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d38:	f7ff fbbd 	bl	80024b6 <LL_RCC_IsActiveFlag_PPRE2>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f1      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d043      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002d56:	f7ff f893 	bl	8001e80 <LL_RCC_HSE_IsReady>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d11e      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e067      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002d6c:	f7ff fb16 	bl	800239c <LL_RCC_PLL_IsReady>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d113      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e05c      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002d82:	f7ff f9fb 	bl	800217c <LL_RCC_MSI_IsReady>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d108      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e051      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002d90:	f7ff f8a6 	bl	8001ee0 <LL_RCC_HSI_IsReady>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e04a      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fa39 	bl	800221a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da8:	f7fe fcc0 	bl	800172c <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7fe fcbc 	bl	800172c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e036      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	f7ff fa3c 	bl	8002242 <LL_RCC_GetSysClkSource>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d1ec      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d21b      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de4:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 0207 	bic.w	r2, r3, #7
 8002dec:	4913      	ldr	r1, [pc, #76]	; (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df4:	f7fe fc9a 	bl	800172c <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dfc:	f7fe fc96 	bl	800172c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e012      	b.n	8002e34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_ClockConfig+0x278>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1ef      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e1c:	f000 f87e 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <HAL_RCC_ClockConfig+0x27c>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002e26:	f7fe fc8d 	bl	8001744 <HAL_GetTickPrio>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fc2f 	bl	8001690 <HAL_InitTick>
 8002e32:	4603      	mov	r3, r0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	58004000 	.word	0x58004000
 8002e40:	2000000c 	.word	0x2000000c

08002e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4a:	f7ff f9fa 	bl	8002242 <LL_RCC_GetSysClkSource>
 8002e4e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002e56:	f7ff f9b6 	bl	80021c6 <LL_RCC_MSI_GetRange>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	4a2b      	ldr	r2, [pc, #172]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	e04b      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d102      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e045      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d10a      	bne.n	8002e94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e7e:	f7fe ffcf 	bl	8001e20 <LL_RCC_HSE_IsEnabledDiv2>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d102      	bne.n	8002e8e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002e88:	4b22      	ldr	r3, [pc, #136]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e03a      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e037      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002e94:	f7ff fab9 	bl	800240a <LL_RCC_PLL_GetMainSource>
 8002e98:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d003      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x64>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x6a>
 8002ea6:	e00d      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eaa:	60bb      	str	r3, [r7, #8]
        break;
 8002eac:	e015      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002eae:	f7fe ffb7 	bl	8001e20 <LL_RCC_HSE_IsEnabledDiv2>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002eb8:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002ebc:	e00d      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ec0:	60bb      	str	r3, [r7, #8]
        break;
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ec4:	f7ff f97f 	bl	80021c6 <LL_RCC_MSI_GetRange>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed6:	60bb      	str	r3, [r7, #8]
        break;
 8002ed8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002eda:	f7ff fa71 	bl	80023c0 <LL_RCC_PLL_GetN>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	fb03 f402 	mul.w	r4, r3, r2
 8002ee6:	f7ff fa84 	bl	80023f2 <LL_RCC_PLL_GetDivider>
 8002eea:	4603      	mov	r3, r0
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	3301      	adds	r3, #1
 8002ef0:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ef4:	f7ff fa71 	bl	80023da <LL_RCC_PLL_GetR>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	0f5b      	lsrs	r3, r3, #29
 8002efc:	3301      	adds	r3, #1
 8002efe:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f02:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002f04:	68fb      	ldr	r3, [r7, #12]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd90      	pop	{r4, r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	08007980 	.word	0x08007980
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	01e84800 	.word	0x01e84800

08002f1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b598      	push	{r3, r4, r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002f20:	f7ff ff90 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8002f24:	4604      	mov	r4, r0
 8002f26:	f7ff fa01 	bl	800232c <LL_RCC_GetAHBPrescaler>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	4a03      	ldr	r2, [pc, #12]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x24>)
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	bd98      	pop	{r3, r4, r7, pc}
 8002f40:	08007940 	.word	0x08007940

08002f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2bb0      	cmp	r3, #176	; 0xb0
 8002f50:	d903      	bls.n	8002f5a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e007      	b.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002f6a:	f7ff f9eb 	bl	8002344 <LL_RCC_GetAHB4Prescaler>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	0c9c      	lsrs	r4, r3, #18
 8002f8e:	f7fe ff0d 	bl	8001dac <HAL_PWREx_GetVoltageRange>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4619      	mov	r1, r3
 8002f96:	4620      	mov	r0, r4
 8002f98:	f000 f80c 	bl	8002fb4 <RCC_SetFlashLatency>
 8002f9c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	08007980 	.word	0x08007980
 8002fac:	08007940 	.word	0x08007940
 8002fb0:	431bde83 	.word	0x431bde83

08002fb4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b093      	sub	sp, #76	; 0x4c
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <RCC_SetFlashLatency+0xe8>)
 8002fc0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002fca:	4a35      	ldr	r2, [pc, #212]	; (80030a0 <RCC_SetFlashLatency+0xec>)
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002fd6:	4b33      	ldr	r3, [pc, #204]	; (80030a4 <RCC_SetFlashLatency+0xf0>)
 8002fd8:	f107 040c 	add.w	r4, r7, #12
 8002fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fec:	d11a      	bne.n	8003024 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff2:	e013      	b.n	800301c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	3348      	adds	r3, #72	; 0x48
 8002ffa:	443b      	add	r3, r7
 8002ffc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	d807      	bhi.n	8003016 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	3348      	adds	r3, #72	; 0x48
 800300c:	443b      	add	r3, r7
 800300e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003012:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003014:	e020      	b.n	8003058 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003018:	3301      	adds	r3, #1
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
 800301c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301e:	2b03      	cmp	r3, #3
 8003020:	d9e8      	bls.n	8002ff4 <RCC_SetFlashLatency+0x40>
 8003022:	e019      	b.n	8003058 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003024:	2300      	movs	r3, #0
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003028:	e013      	b.n	8003052 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800302a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	3348      	adds	r3, #72	; 0x48
 8003030:	443b      	add	r3, r7
 8003032:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d807      	bhi.n	800304c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3348      	adds	r3, #72	; 0x48
 8003042:	443b      	add	r3, r7
 8003044:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003048:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800304a:	e005      	b.n	8003058 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800304c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304e:	3301      	adds	r3, #1
 8003050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	2b02      	cmp	r3, #2
 8003056:	d9e8      	bls.n	800302a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <RCC_SetFlashLatency+0xf4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 0207 	bic.w	r2, r3, #7
 8003060:	4911      	ldr	r1, [pc, #68]	; (80030a8 <RCC_SetFlashLatency+0xf4>)
 8003062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003068:	f7fe fb60 	bl	800172c <HAL_GetTick>
 800306c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800306e:	e008      	b.n	8003082 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003070:	f7fe fb5c 	bl	800172c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e007      	b.n	8003092 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <RCC_SetFlashLatency+0xf4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800308c:	429a      	cmp	r2, r3
 800308e:	d1ef      	bne.n	8003070 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	374c      	adds	r7, #76	; 0x4c
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}
 800309a:	bf00      	nop
 800309c:	08007914 	.word	0x08007914
 80030a0:	08007924 	.word	0x08007924
 80030a4:	08007930 	.word	0x08007930
 80030a8:	58004000 	.word	0x58004000

080030ac <LL_RCC_LSE_IsEnabled>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <LL_RCC_LSE_IsEnabled+0x18>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <LL_RCC_LSE_IsEnabled+0x1a>
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_RCC_LSE_IsReady>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d101      	bne.n	80030e8 <LL_RCC_LSE_IsReady+0x18>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <LL_RCC_LSE_IsReady+0x1a>
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_RCC_SetRFWKPClockSource>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003104:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_RCC_SetSMPSClockSource>:
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4313      	orrs	r3, r2
 800313a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_RCC_SetSMPSPrescaler>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800315a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4313      	orrs	r3, r2
 8003162:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_RCC_SetUSARTClockSource>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f023 0203 	bic.w	r2, r3, #3
 8003184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_RCC_SetLPUARTClockSource>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_RCC_SetI2CClockSource>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80031ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_RCC_SetLPTIMClockSource>:
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	041b      	lsls	r3, r3, #16
 8003220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_RCC_SetSAIClockSource>:
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800324a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_RCC_SetRNGClockSource>:
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_RCC_SetCLK48ClockSource>:
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_RCC_SetUSBClockSource>:
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ffe3 	bl	800328e <LL_RCC_SetCLK48ClockSource>
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <LL_RCC_SetADCClockSource>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80032d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <LL_RCC_SetRTCClockSource>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_RCC_GetRTCClockSource>:
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003334:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_RCC_ForceBackupDomainReset>:
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_RCC_PLLSAI1_Enable>:
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003394:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003398:	6013      	str	r3, [r2, #0]
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_RCC_PLLSAI1_Disable>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80033a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_RCC_PLLSAI1_IsReady>:
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d4:	d101      	bne.n	80033da <LL_RCC_PLLSAI1_IsReady+0x18>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b088      	sub	sp, #32
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80033ee:	2300      	movs	r3, #0
 80033f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80033f2:	2300      	movs	r3, #0
 80033f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d034      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800340a:	d021      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800340c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003410:	d81b      	bhi.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003412:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003416:	d01d      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800341c:	d815      	bhi.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003426:	d110      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003436:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003438:	e00d      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f947 	bl	80036d2 <RCCEx_PLLSAI1_ConfigNP>
 8003444:	4603      	mov	r3, r0
 8003446:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003448:	e005      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	77fb      	strb	r3, [r7, #31]
        break;
 800344e:	e002      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fee8 	bl	8003236 <LL_RCC_SetSAIClockSource>
 8003466:	e001      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	7ffb      	ldrb	r3, [r7, #31]
 800346a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	d046      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003478:	f7ff ff56 	bl	8003328 <LL_RCC_GetRTCClockSource>
 800347c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	429a      	cmp	r2, r3
 8003486:	d03c      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003488:	f7fe fc80 	bl	8001d8c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ff30 	bl	80032fc <LL_RCC_SetRTCClockSource>
 800349c:	e02e      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800349e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80034a8:	f7ff ff4b 	bl	8003342 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80034ac:	f7ff ff5a 	bl	8003364 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80034be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80034c8:	f7ff fdf0 	bl	80030ac <LL_RCC_LSE_IsEnabled>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d114      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034d2:	f7fe f92b 	bl	800172c <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80034d8:	e00b      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fe f927 	bl	800172c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d902      	bls.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	77fb      	strb	r3, [r7, #31]
              break;
 80034f0:	e004      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80034f2:	f7ff fded 	bl	80030d0 <LL_RCC_LSE_IsReady>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d1ee      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80034fc:	7ffb      	ldrb	r3, [r7, #31]
 80034fe:	77bb      	strb	r3, [r7, #30]
 8003500:	e001      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	7ffb      	ldrb	r3, [r7, #31]
 8003504:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fe2a 	bl	8003170 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d004      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fe35 	bl	800319c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fe5d 	bl	8003202 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fe52 	bl	8003202 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fe2a 	bl	80031c8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fe1f 	bl	80031c8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d022      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fe8d 	bl	80032ba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a8:	d107      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f8dd 	bl	8003788 <RCCEx_PLLSAI1_ConfigNQ>
 80035ce:	4603      	mov	r3, r0
 80035d0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80035d2:	7ffb      	ldrb	r3, [r7, #31]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80035d8:	7ffb      	ldrb	r3, [r7, #31]
 80035da:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02b      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f0:	d008      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035fa:	d003      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fe2a 	bl	8003262 <LL_RCC_SetRNGClockSource>
 800360e:	e00a      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	2000      	movs	r0, #0
 800361c:	f7ff fe21 	bl	8003262 <LL_RCC_SetRNGClockSource>
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff fe34 	bl	800328e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800362e:	d107      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800363a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d022      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fe3d 	bl	80032d0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800365e:	d107      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800366a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003678:	d10b      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f8dd 	bl	800383e <RCCEx_PLLSAI1_ConfigNR>
 8003684:	4603      	mov	r3, r0
 8003686:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003688:	7ffb      	ldrb	r3, [r7, #31]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800368e:	7ffb      	ldrb	r3, [r7, #31]
 8003690:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fd26 	bl	80030f4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fd45 	bl	8003148 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fd2c 	bl	8003120 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80036c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036de:	f7ff fe61 	bl	80033a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036e2:	f7fe f823 	bl	800172c <HAL_GetTick>
 80036e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036e8:	e009      	b.n	80036fe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036ea:	f7fe f81f 	bl	800172c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d902      	bls.n	80036fe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	73fb      	strb	r3, [r7, #15]
      break;
 80036fc:	e004      	b.n	8003708 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036fe:	f7ff fe60 	bl	80033c2 <LL_RCC_PLLSAI1_IsReady>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d137      	bne.n	800377e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800370e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003722:	4313      	orrs	r3, r2
 8003724:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800373c:	f7ff fe23 	bl	8003386 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003740:	f7fd fff4 	bl	800172c <HAL_GetTick>
 8003744:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003746:	e009      	b.n	800375c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003748:	f7fd fff0 	bl	800172c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d902      	bls.n	800375c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	73fb      	strb	r3, [r7, #15]
        break;
 800375a:	e004      	b.n	8003766 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800375c:	f7ff fe31 	bl	80033c2 <LL_RCC_PLLSAI1_IsReady>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d1f0      	bne.n	8003748 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d108      	bne.n	800377e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003794:	f7ff fe06 	bl	80033a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003798:	f7fd ffc8 	bl	800172c <HAL_GetTick>
 800379c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800379e:	e009      	b.n	80037b4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037a0:	f7fd ffc4 	bl	800172c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d902      	bls.n	80037b4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	73fb      	strb	r3, [r7, #15]
      break;
 80037b2:	e004      	b.n	80037be <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037b4:	f7ff fe05 	bl	80033c2 <LL_RCC_PLLSAI1_IsReady>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d137      	bne.n	8003834 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80037c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d8:	4313      	orrs	r3, r2
 80037da:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80037dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ee:	4313      	orrs	r3, r2
 80037f0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80037f2:	f7ff fdc8 	bl	8003386 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f6:	f7fd ff99 	bl	800172c <HAL_GetTick>
 80037fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037fc:	e009      	b.n	8003812 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037fe:	f7fd ff95 	bl	800172c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d902      	bls.n	8003812 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	73fb      	strb	r3, [r7, #15]
        break;
 8003810:	e004      	b.n	800381c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003812:	f7ff fdd6 	bl	80033c2 <LL_RCC_PLLSAI1_IsReady>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d1f0      	bne.n	80037fe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003830:	4313      	orrs	r3, r2
 8003832:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800384a:	f7ff fdab 	bl	80033a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800384e:	f7fd ff6d 	bl	800172c <HAL_GetTick>
 8003852:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003854:	e009      	b.n	800386a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003856:	f7fd ff69 	bl	800172c <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d902      	bls.n	800386a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	73fb      	strb	r3, [r7, #15]
      break;
 8003868:	e004      	b.n	8003874 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800386a:	f7ff fdaa 	bl	80033c2 <LL_RCC_PLLSAI1_IsReady>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f0      	bne.n	8003856 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d137      	bne.n	80038ea <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800388e:	4313      	orrs	r3, r2
 8003890:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038a4:	4313      	orrs	r3, r2
 80038a6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038a8:	f7ff fd6d 	bl	8003386 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7fd ff3e 	bl	800172c <HAL_GetTick>
 80038b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038b2:	e009      	b.n	80038c8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b4:	f7fd ff3a 	bl	800172c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d902      	bls.n	80038c8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	73fb      	strb	r3, [r7, #15]
        break;
 80038c6:	e004      	b.n	80038d2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038c8:	f7ff fd7b 	bl	80033c2 <LL_RCC_PLLSAI1_IsReady>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d1f0      	bne.n	80038b4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80038d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e6:	4313      	orrs	r3, r2
 80038e8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e09f      	b.n	8003a46 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd fca8 	bl	8001270 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003928:	4b49      	ldr	r3, [pc, #292]	; (8003a50 <HAL_RTC_Init+0x15c>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b10      	cmp	r3, #16
 8003932:	d07e      	beq.n	8003a32 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	22ca      	movs	r2, #202	; 0xca
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2253      	movs	r2, #83	; 0x53
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8ab 	bl	8003aa0 <RTC_EnterInitMode>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	22ff      	movs	r2, #255	; 0xff
 8003956:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2204      	movs	r2, #4
 800395c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	e067      	b.n	8003a36 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003978:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6899      	ldr	r1, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	68d2      	ldr	r2, [r2, #12]
 80039a0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6919      	ldr	r1, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	041a      	lsls	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0203 	bic.w	r2, r2, #3
 80039d4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d113      	bne.n	8003a24 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f829 	bl	8003a54 <HAL_RTC_WaitForSynchro>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	22ff      	movs	r2, #255	; 0xff
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2204      	movs	r2, #4
 8003a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e010      	b.n	8003a46 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	22ff      	movs	r2, #255	; 0xff
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
 8003a30:	e001      	b.n	8003a36 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40002800 	.word	0x40002800

08003a54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003a6c:	f7fd fe5e 	bl	800172c <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a72:	e009      	b.n	8003a88 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a74:	f7fd fe5a 	bl	800172c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a82:	d901      	bls.n	8003a88 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e007      	b.n	8003a98 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ee      	beq.n	8003a74 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d119      	bne.n	8003aea <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003abe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ac0:	f7fd fe34 	bl	800172c <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ac6:	e009      	b.n	8003adc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ac8:	f7fd fe30 	bl	800172c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad6:	d901      	bls.n	8003adc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e007      	b.n	8003aec <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e0a8      	b.n	8003c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	22ca      	movs	r2, #202	; 0xca
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2253      	movs	r2, #83	; 0x53
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003b3c:	f7fd fdf6 	bl	800172c <HAL_GetTick>
 8003b40:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003b42:	e015      	b.n	8003b70 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b44:	f7fd fdf2 	bl	800172c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b52:	d90d      	bls.n	8003b70 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	22ff      	movs	r2, #255	; 0xff
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e077      	b.n	8003c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e2      	bne.n	8003b44 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003b9e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003ba0:	f7fd fdc4 	bl	800172c <HAL_GetTick>
 8003ba4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003ba6:	e015      	b.n	8003bd4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ba8:	f7fd fdc0 	bl	800172c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb6:	d90d      	bls.n	8003bd4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e045      	b.n	8003c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0e2      	beq.n	8003ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0207 	bic.w	r2, r2, #7
 8003bf8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6899      	ldr	r1, [r3, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c24:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c34:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c44:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	22ff      	movs	r2, #255	; 0xff
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	58000800 	.word	0x58000800

08003c6c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e04d      	b.n	8003d1e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	22ca      	movs	r2, #202	; 0xca
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2253      	movs	r2, #83	; 0x53
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cc0:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003cc2:	f7fd fd33 	bl	800172c <HAL_GetTick>
 8003cc6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003cc8:	e015      	b.n	8003cf6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cca:	f7fd fd2f 	bl	800172c <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cd8:	d90d      	bls.n	8003cf6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	22ff      	movs	r2, #255	; 0xff
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e013      	b.n	8003d1e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0e2      	beq.n	8003cca <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	22ff      	movs	r2, #255	; 0xff
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f818 	bl	8003d74 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003d54:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003d58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d5c:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	58000800 	.word	0x58000800

08003d74 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e095      	b.n	8003ec6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d108      	bne.n	8003db4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003daa:	d009      	beq.n	8003dc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
 8003db2:	e005      	b.n	8003dc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fa7c 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e00:	d902      	bls.n	8003e08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e002      	b.n	8003e0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e16:	d007      	beq.n	8003e28 <HAL_SPI_Init+0xa0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e20:	d002      	beq.n	8003e28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	ea42 0103 	orr.w	r1, r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	0c1b      	lsrs	r3, r3, #16
 8003e84:	f003 0204 	and.w	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ea4:	ea42 0103 	orr.w	r1, r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b088      	sub	sp, #32
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_SPI_Transmit+0x22>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e158      	b.n	80041a2 <HAL_SPI_Transmit+0x2d4>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef8:	f7fd fc18 	bl	800172c <HAL_GetTick>
 8003efc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f12:	e13d      	b.n	8004190 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_Transmit+0x52>
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f24:	e134      	b.n	8004190 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2203      	movs	r2, #3
 8003f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	88fa      	ldrh	r2, [r7, #6]
 8003f44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f70:	d10f      	bne.n	8003f92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d007      	beq.n	8003fb0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fb8:	d94b      	bls.n	8004052 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Transmit+0xfa>
 8003fc2:	8afb      	ldrh	r3, [r7, #22]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d13e      	bne.n	8004046 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	881a      	ldrh	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	1c9a      	adds	r2, r3, #2
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fec:	e02b      	b.n	8004046 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d112      	bne.n	8004022 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	881a      	ldrh	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	1c9a      	adds	r2, r3, #2
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004020:	e011      	b.n	8004046 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004022:	f7fd fb83 	bl	800172c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d803      	bhi.n	800403a <HAL_SPI_Transmit+0x16c>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004038:	d102      	bne.n	8004040 <HAL_SPI_Transmit+0x172>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004044:	e0a4      	b.n	8004190 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ce      	bne.n	8003fee <HAL_SPI_Transmit+0x120>
 8004050:	e07c      	b.n	800414c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_Transmit+0x192>
 800405a:	8afb      	ldrh	r3, [r7, #22]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d170      	bne.n	8004142 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d912      	bls.n	8004090 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	881a      	ldrh	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b02      	subs	r3, #2
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800408e:	e058      	b.n	8004142 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80040b6:	e044      	b.n	8004142 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d12b      	bne.n	800411e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d912      	bls.n	80040f6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b02      	subs	r3, #2
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040f4:	e025      	b.n	8004142 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	7812      	ldrb	r2, [r2, #0]
 8004102:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800411c:	e011      	b.n	8004142 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411e:	f7fd fb05 	bl	800172c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d803      	bhi.n	8004136 <HAL_SPI_Transmit+0x268>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004134:	d102      	bne.n	800413c <HAL_SPI_Transmit+0x26e>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004140:	e026      	b.n	8004190 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1b5      	bne.n	80040b8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	6839      	ldr	r1, [r7, #0]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fce3 	bl	8004b1c <SPI_EndRxTxTransaction>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e000      	b.n	8004190 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800418e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b088      	sub	sp, #32
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d112      	bne.n	80041ee <HAL_SPI_Receive+0x44>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10e      	bne.n	80041ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2204      	movs	r2, #4
 80041d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f910 	bl	800440a <HAL_SPI_TransmitReceive>
 80041ea:	4603      	mov	r3, r0
 80041ec:	e109      	b.n	8004402 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_SPI_Receive+0x52>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e102      	b.n	8004402 <HAL_SPI_Receive+0x258>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004204:	f7fd fa92 	bl	800172c <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004216:	2302      	movs	r3, #2
 8004218:	75fb      	strb	r3, [r7, #23]
    goto error;
 800421a:	e0e9      	b.n	80043f0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_SPI_Receive+0x7e>
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800422c:	e0e0      	b.n	80043f0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2204      	movs	r2, #4
 8004232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	88fa      	ldrh	r2, [r7, #6]
 800424e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004278:	d908      	bls.n	800428c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	e007      	b.n	800429c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a4:	d10f      	bne.n	80042c6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b40      	cmp	r3, #64	; 0x40
 80042d2:	d007      	beq.n	80042e4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ec:	d867      	bhi.n	80043be <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042ee:	e030      	b.n	8004352 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d117      	bne.n	800432e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f103 020c 	add.w	r2, r3, #12
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800432c:	e011      	b.n	8004352 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800432e:	f7fd f9fd 	bl	800172c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d803      	bhi.n	8004346 <HAL_SPI_Receive+0x19c>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004344:	d102      	bne.n	800434c <HAL_SPI_Receive+0x1a2>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004350:	e04e      	b.n	80043f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1c8      	bne.n	80042f0 <HAL_SPI_Receive+0x146>
 800435e:	e034      	b.n	80043ca <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d115      	bne.n	800439a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	b292      	uxth	r2, r2
 800437a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004398:	e011      	b.n	80043be <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800439a:	f7fd f9c7 	bl	800172c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d803      	bhi.n	80043b2 <HAL_SPI_Receive+0x208>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b0:	d102      	bne.n	80043b8 <HAL_SPI_Receive+0x20e>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043bc:	e018      	b.n	80043f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ca      	bne.n	8004360 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	6839      	ldr	r1, [r7, #0]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fb4c 	bl	8004a6c <SPI_EndRxTransaction>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	75fb      	strb	r3, [r7, #23]
 80043ec:	e000      	b.n	80043f0 <HAL_SPI_Receive+0x246>
  }

error :
 80043ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b08a      	sub	sp, #40	; 0x28
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_SPI_TransmitReceive+0x26>
 800442c:	2302      	movs	r3, #2
 800442e:	e1fb      	b.n	8004828 <HAL_SPI_TransmitReceive+0x41e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004438:	f7fd f978 	bl	800172c <HAL_GetTick>
 800443c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004444:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800444c:	887b      	ldrh	r3, [r7, #2]
 800444e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004454:	7efb      	ldrb	r3, [r7, #27]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d00e      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x6e>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004460:	d106      	bne.n	8004470 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_SPI_TransmitReceive+0x66>
 800446a:	7efb      	ldrb	r3, [r7, #27]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d003      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004470:	2302      	movs	r3, #2
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004476:	e1cd      	b.n	8004814 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_SPI_TransmitReceive+0x80>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_SPI_TransmitReceive+0x80>
 8004484:	887b      	ldrh	r3, [r7, #2]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004490:	e1c0      	b.n	8004814 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b04      	cmp	r3, #4
 800449c:	d003      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2205      	movs	r2, #5
 80044a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	887a      	ldrh	r2, [r7, #2]
 80044b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	887a      	ldrh	r2, [r7, #2]
 80044be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	887a      	ldrh	r2, [r7, #2]
 80044cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	887a      	ldrh	r2, [r7, #2]
 80044d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044e8:	d802      	bhi.n	80044f0 <HAL_SPI_TransmitReceive+0xe6>
 80044ea:	8a3b      	ldrh	r3, [r7, #16]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d908      	bls.n	8004502 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044fe:	605a      	str	r2, [r3, #4]
 8004500:	e007      	b.n	8004512 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004510:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d007      	beq.n	8004530 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004538:	d97c      	bls.n	8004634 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x13e>
 8004542:	8a7b      	ldrh	r3, [r7, #18]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d169      	bne.n	800461c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	881a      	ldrh	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	1c9a      	adds	r2, r3, #2
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800456c:	e056      	b.n	800461c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b02      	cmp	r3, #2
 800457a:	d11b      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x1aa>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0x1aa>
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	2b01      	cmp	r3, #1
 800458a:	d113      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d11c      	bne.n	80045fc <HAL_SPI_TransmitReceive+0x1f2>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	b292      	uxth	r2, r2
 80045da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	1c9a      	adds	r2, r3, #2
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045f8:	2301      	movs	r3, #1
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045fc:	f7fd f896 	bl	800172c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004608:	429a      	cmp	r2, r3
 800460a:	d807      	bhi.n	800461c <HAL_SPI_TransmitReceive+0x212>
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004612:	d003      	beq.n	800461c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800461a:	e0fb      	b.n	8004814 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1a3      	bne.n	800456e <HAL_SPI_TransmitReceive+0x164>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d19d      	bne.n	800456e <HAL_SPI_TransmitReceive+0x164>
 8004632:	e0df      	b.n	80047f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_SPI_TransmitReceive+0x23a>
 800463c:	8a7b      	ldrh	r3, [r7, #18]
 800463e:	2b01      	cmp	r3, #1
 8004640:	f040 80cb 	bne.w	80047da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d912      	bls.n	8004674 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b02      	subs	r3, #2
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004672:	e0b2      	b.n	80047da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800469a:	e09e      	b.n	80047da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d134      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x30a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02f      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x30a>
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d12c      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d912      	bls.n	80046ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	881a      	ldrh	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	1c9a      	adds	r2, r3, #2
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b02      	subs	r3, #2
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046e8:	e012      	b.n	8004710 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b01      	cmp	r3, #1
 8004720:	d148      	bne.n	80047b4 <HAL_SPI_TransmitReceive+0x3aa>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d042      	beq.n	80047b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b01      	cmp	r3, #1
 8004738:	d923      	bls.n	8004782 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	b292      	uxth	r2, r2
 8004746:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	1c9a      	adds	r2, r3, #2
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b02      	subs	r3, #2
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d81f      	bhi.n	80047b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	e016      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f103 020c 	add.w	r2, r3, #12
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	7812      	ldrb	r2, [r2, #0]
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047b0:	2301      	movs	r3, #1
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047b4:	f7fc ffba 	bl	800172c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d803      	bhi.n	80047cc <HAL_SPI_TransmitReceive+0x3c2>
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ca:	d102      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x3c8>
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80047d8:	e01c      	b.n	8004814 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f47f af5b 	bne.w	800469c <HAL_SPI_TransmitReceive+0x292>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f47f af54 	bne.w	800469c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f98f 	bl	8004b1c <SPI_EndRxTxTransaction>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d006      	beq.n	8004812 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	661a      	str	r2, [r3, #96]	; 0x60
 8004810:	e000      	b.n	8004814 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004812:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004824:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004828:	4618      	mov	r0, r3
 800482a:	3728      	adds	r7, #40	; 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004840:	f7fc ff74 	bl	800172c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4413      	add	r3, r2
 800484e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004850:	f7fc ff6c 	bl	800172c <HAL_GetTick>
 8004854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004856:	4b39      	ldr	r3, [pc, #228]	; (800493c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	015b      	lsls	r3, r3, #5
 800485c:	0d1b      	lsrs	r3, r3, #20
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	fb02 f303 	mul.w	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004866:	e054      	b.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800486e:	d050      	beq.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004870:	f7fc ff5c 	bl	800172c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	429a      	cmp	r2, r3
 800487e:	d902      	bls.n	8004886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d13d      	bne.n	8004902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489e:	d111      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a8:	d004      	beq.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d107      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048cc:	d10f      	bne.n	80048ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e017      	b.n	8004932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	3b01      	subs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	429a      	cmp	r2, r3
 800492e:	d19b      	bne.n	8004868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	2000000c 	.word	0x2000000c

08004940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004952:	f7fc feeb 	bl	800172c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	4413      	add	r3, r2
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004962:	f7fc fee3 	bl	800172c <HAL_GetTick>
 8004966:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004970:	4b3d      	ldr	r3, [pc, #244]	; (8004a68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	00da      	lsls	r2, r3, #3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	0d1b      	lsrs	r3, r3, #20
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004988:	e060      	b.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004990:	d107      	bne.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a8:	d050      	beq.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049aa:	f7fc febf 	bl	800172c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d902      	bls.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d13d      	bne.n	8004a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d8:	d111      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e2:	d004      	beq.n	80049ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ec:	d107      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a06:	d10f      	bne.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e010      	b.n	8004a5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d196      	bne.n	800498a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000000c 	.word	0x2000000c

08004a6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a80:	d111      	bne.n	8004aa6 <SPI_EndRxTransaction+0x3a>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8a:	d004      	beq.n	8004a96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a94:	d107      	bne.n	8004aa6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff febd 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e023      	b.n	8004b14 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad4:	d11d      	bne.n	8004b12 <SPI_EndRxTransaction+0xa6>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ade:	d004      	beq.n	8004aea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	d113      	bne.n	8004b12 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff ff22 	bl	8004940 <SPI_WaitFifoStateUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e000      	b.n	8004b14 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ff03 	bl	8004940 <SPI_WaitFifoStateUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b44:	f043 0220 	orr.w	r2, r3, #32
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e027      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fe68 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e014      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7ff fedc 	bl	8004940 <SPI_WaitFifoStateUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b92:	f043 0220 	orr.w	r2, r3, #32
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e000      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <__errno>:
 8004ba8:	4b01      	ldr	r3, [pc, #4]	; (8004bb0 <__errno+0x8>)
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	20000018 	.word	0x20000018

08004bb4 <__sflush_r>:
 8004bb4:	898a      	ldrh	r2, [r1, #12]
 8004bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bba:	4605      	mov	r5, r0
 8004bbc:	0710      	lsls	r0, r2, #28
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	d458      	bmi.n	8004c74 <__sflush_r+0xc0>
 8004bc2:	684b      	ldr	r3, [r1, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	dc05      	bgt.n	8004bd4 <__sflush_r+0x20>
 8004bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	dc02      	bgt.n	8004bd4 <__sflush_r+0x20>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d0f9      	beq.n	8004bce <__sflush_r+0x1a>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004be0:	682f      	ldr	r7, [r5, #0]
 8004be2:	602b      	str	r3, [r5, #0]
 8004be4:	d032      	beq.n	8004c4c <__sflush_r+0x98>
 8004be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	075a      	lsls	r2, r3, #29
 8004bec:	d505      	bpl.n	8004bfa <__sflush_r+0x46>
 8004bee:	6863      	ldr	r3, [r4, #4]
 8004bf0:	1ac0      	subs	r0, r0, r3
 8004bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bf4:	b10b      	cbz	r3, 8004bfa <__sflush_r+0x46>
 8004bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bf8:	1ac0      	subs	r0, r0, r3
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c00:	6a21      	ldr	r1, [r4, #32]
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b0      	blx	r6
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	d106      	bne.n	8004c1a <__sflush_r+0x66>
 8004c0c:	6829      	ldr	r1, [r5, #0]
 8004c0e:	291d      	cmp	r1, #29
 8004c10:	d82c      	bhi.n	8004c6c <__sflush_r+0xb8>
 8004c12:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <__sflush_r+0x108>)
 8004c14:	40ca      	lsrs	r2, r1
 8004c16:	07d6      	lsls	r6, r2, #31
 8004c18:	d528      	bpl.n	8004c6c <__sflush_r+0xb8>
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	6062      	str	r2, [r4, #4]
 8004c1e:	04d9      	lsls	r1, r3, #19
 8004c20:	6922      	ldr	r2, [r4, #16]
 8004c22:	6022      	str	r2, [r4, #0]
 8004c24:	d504      	bpl.n	8004c30 <__sflush_r+0x7c>
 8004c26:	1c42      	adds	r2, r0, #1
 8004c28:	d101      	bne.n	8004c2e <__sflush_r+0x7a>
 8004c2a:	682b      	ldr	r3, [r5, #0]
 8004c2c:	b903      	cbnz	r3, 8004c30 <__sflush_r+0x7c>
 8004c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c32:	602f      	str	r7, [r5, #0]
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d0ca      	beq.n	8004bce <__sflush_r+0x1a>
 8004c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	d002      	beq.n	8004c46 <__sflush_r+0x92>
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 fa21 	bl	8005088 <_free_r>
 8004c46:	2000      	movs	r0, #0
 8004c48:	6360      	str	r0, [r4, #52]	; 0x34
 8004c4a:	e7c1      	b.n	8004bd0 <__sflush_r+0x1c>
 8004c4c:	6a21      	ldr	r1, [r4, #32]
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b0      	blx	r6
 8004c54:	1c41      	adds	r1, r0, #1
 8004c56:	d1c7      	bne.n	8004be8 <__sflush_r+0x34>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0c4      	beq.n	8004be8 <__sflush_r+0x34>
 8004c5e:	2b1d      	cmp	r3, #29
 8004c60:	d001      	beq.n	8004c66 <__sflush_r+0xb2>
 8004c62:	2b16      	cmp	r3, #22
 8004c64:	d101      	bne.n	8004c6a <__sflush_r+0xb6>
 8004c66:	602f      	str	r7, [r5, #0]
 8004c68:	e7b1      	b.n	8004bce <__sflush_r+0x1a>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	e7ad      	b.n	8004bd0 <__sflush_r+0x1c>
 8004c74:	690f      	ldr	r7, [r1, #16]
 8004c76:	2f00      	cmp	r7, #0
 8004c78:	d0a9      	beq.n	8004bce <__sflush_r+0x1a>
 8004c7a:	0793      	lsls	r3, r2, #30
 8004c7c:	680e      	ldr	r6, [r1, #0]
 8004c7e:	bf08      	it	eq
 8004c80:	694b      	ldreq	r3, [r1, #20]
 8004c82:	600f      	str	r7, [r1, #0]
 8004c84:	bf18      	it	ne
 8004c86:	2300      	movne	r3, #0
 8004c88:	eba6 0807 	sub.w	r8, r6, r7
 8004c8c:	608b      	str	r3, [r1, #8]
 8004c8e:	f1b8 0f00 	cmp.w	r8, #0
 8004c92:	dd9c      	ble.n	8004bce <__sflush_r+0x1a>
 8004c94:	6a21      	ldr	r1, [r4, #32]
 8004c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c98:	4643      	mov	r3, r8
 8004c9a:	463a      	mov	r2, r7
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b0      	blx	r6
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	dc06      	bgt.n	8004cb2 <__sflush_r+0xfe>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb0:	e78e      	b.n	8004bd0 <__sflush_r+0x1c>
 8004cb2:	4407      	add	r7, r0
 8004cb4:	eba8 0800 	sub.w	r8, r8, r0
 8004cb8:	e7e9      	b.n	8004c8e <__sflush_r+0xda>
 8004cba:	bf00      	nop
 8004cbc:	20400001 	.word	0x20400001

08004cc0 <_fflush_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	690b      	ldr	r3, [r1, #16]
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	b913      	cbnz	r3, 8004cd0 <_fflush_r+0x10>
 8004cca:	2500      	movs	r5, #0
 8004ccc:	4628      	mov	r0, r5
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	b118      	cbz	r0, 8004cda <_fflush_r+0x1a>
 8004cd2:	6983      	ldr	r3, [r0, #24]
 8004cd4:	b90b      	cbnz	r3, 8004cda <_fflush_r+0x1a>
 8004cd6:	f000 f887 	bl	8004de8 <__sinit>
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <_fflush_r+0x6c>)
 8004cdc:	429c      	cmp	r4, r3
 8004cde:	d11b      	bne.n	8004d18 <_fflush_r+0x58>
 8004ce0:	686c      	ldr	r4, [r5, #4]
 8004ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ef      	beq.n	8004cca <_fflush_r+0xa>
 8004cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cec:	07d0      	lsls	r0, r2, #31
 8004cee:	d404      	bmi.n	8004cfa <_fflush_r+0x3a>
 8004cf0:	0599      	lsls	r1, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_fflush_r+0x3a>
 8004cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf6:	f000 f93a 	bl	8004f6e <__retarget_lock_acquire_recursive>
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	f7ff ff59 	bl	8004bb4 <__sflush_r>
 8004d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d04:	07da      	lsls	r2, r3, #31
 8004d06:	4605      	mov	r5, r0
 8004d08:	d4e0      	bmi.n	8004ccc <_fflush_r+0xc>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	059b      	lsls	r3, r3, #22
 8004d0e:	d4dd      	bmi.n	8004ccc <_fflush_r+0xc>
 8004d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d12:	f000 f92d 	bl	8004f70 <__retarget_lock_release_recursive>
 8004d16:	e7d9      	b.n	8004ccc <_fflush_r+0xc>
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <_fflush_r+0x70>)
 8004d1a:	429c      	cmp	r4, r3
 8004d1c:	d101      	bne.n	8004d22 <_fflush_r+0x62>
 8004d1e:	68ac      	ldr	r4, [r5, #8]
 8004d20:	e7df      	b.n	8004ce2 <_fflush_r+0x22>
 8004d22:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <_fflush_r+0x74>)
 8004d24:	429c      	cmp	r4, r3
 8004d26:	bf08      	it	eq
 8004d28:	68ec      	ldreq	r4, [r5, #12]
 8004d2a:	e7da      	b.n	8004ce2 <_fflush_r+0x22>
 8004d2c:	080079e0 	.word	0x080079e0
 8004d30:	08007a00 	.word	0x08007a00
 8004d34:	080079c0 	.word	0x080079c0

08004d38 <std>:
 8004d38:	2300      	movs	r3, #0
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d46:	6083      	str	r3, [r0, #8]
 8004d48:	8181      	strh	r1, [r0, #12]
 8004d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d4c:	81c2      	strh	r2, [r0, #14]
 8004d4e:	6183      	str	r3, [r0, #24]
 8004d50:	4619      	mov	r1, r3
 8004d52:	2208      	movs	r2, #8
 8004d54:	305c      	adds	r0, #92	; 0x5c
 8004d56:	f000 f98f 	bl	8005078 <memset>
 8004d5a:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <std+0x38>)
 8004d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <std+0x3c>)
 8004d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <std+0x40>)
 8004d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <std+0x44>)
 8004d68:	6224      	str	r4, [r4, #32]
 8004d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	bf00      	nop
 8004d70:	08005b6d 	.word	0x08005b6d
 8004d74:	08005b8f 	.word	0x08005b8f
 8004d78:	08005bc7 	.word	0x08005bc7
 8004d7c:	08005beb 	.word	0x08005beb

08004d80 <_cleanup_r>:
 8004d80:	4901      	ldr	r1, [pc, #4]	; (8004d88 <_cleanup_r+0x8>)
 8004d82:	f000 b8af 	b.w	8004ee4 <_fwalk_reent>
 8004d86:	bf00      	nop
 8004d88:	08004cc1 	.word	0x08004cc1

08004d8c <__sfmoreglue>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	2268      	movs	r2, #104	; 0x68
 8004d90:	1e4d      	subs	r5, r1, #1
 8004d92:	4355      	muls	r5, r2
 8004d94:	460e      	mov	r6, r1
 8004d96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d9a:	f000 f9e1 	bl	8005160 <_malloc_r>
 8004d9e:	4604      	mov	r4, r0
 8004da0:	b140      	cbz	r0, 8004db4 <__sfmoreglue+0x28>
 8004da2:	2100      	movs	r1, #0
 8004da4:	e9c0 1600 	strd	r1, r6, [r0]
 8004da8:	300c      	adds	r0, #12
 8004daa:	60a0      	str	r0, [r4, #8]
 8004dac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004db0:	f000 f962 	bl	8005078 <memset>
 8004db4:	4620      	mov	r0, r4
 8004db6:	bd70      	pop	{r4, r5, r6, pc}

08004db8 <__sfp_lock_acquire>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__sfp_lock_acquire+0x8>)
 8004dba:	f000 b8d8 	b.w	8004f6e <__retarget_lock_acquire_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	20000299 	.word	0x20000299

08004dc4 <__sfp_lock_release>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	; (8004dcc <__sfp_lock_release+0x8>)
 8004dc6:	f000 b8d3 	b.w	8004f70 <__retarget_lock_release_recursive>
 8004dca:	bf00      	nop
 8004dcc:	20000299 	.word	0x20000299

08004dd0 <__sinit_lock_acquire>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__sinit_lock_acquire+0x8>)
 8004dd2:	f000 b8cc 	b.w	8004f6e <__retarget_lock_acquire_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	2000029a 	.word	0x2000029a

08004ddc <__sinit_lock_release>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	; (8004de4 <__sinit_lock_release+0x8>)
 8004dde:	f000 b8c7 	b.w	8004f70 <__retarget_lock_release_recursive>
 8004de2:	bf00      	nop
 8004de4:	2000029a 	.word	0x2000029a

08004de8 <__sinit>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4604      	mov	r4, r0
 8004dec:	f7ff fff0 	bl	8004dd0 <__sinit_lock_acquire>
 8004df0:	69a3      	ldr	r3, [r4, #24]
 8004df2:	b11b      	cbz	r3, 8004dfc <__sinit+0x14>
 8004df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df8:	f7ff bff0 	b.w	8004ddc <__sinit_lock_release>
 8004dfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e00:	6523      	str	r3, [r4, #80]	; 0x50
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <__sinit+0x68>)
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <__sinit+0x6c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e0a:	42a3      	cmp	r3, r4
 8004e0c:	bf04      	itt	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	61a3      	streq	r3, [r4, #24]
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 f820 	bl	8004e58 <__sfp>
 8004e18:	6060      	str	r0, [r4, #4]
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 f81c 	bl	8004e58 <__sfp>
 8004e20:	60a0      	str	r0, [r4, #8]
 8004e22:	4620      	mov	r0, r4
 8004e24:	f000 f818 	bl	8004e58 <__sfp>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	60e0      	str	r0, [r4, #12]
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	6860      	ldr	r0, [r4, #4]
 8004e30:	f7ff ff82 	bl	8004d38 <std>
 8004e34:	68a0      	ldr	r0, [r4, #8]
 8004e36:	2201      	movs	r2, #1
 8004e38:	2109      	movs	r1, #9
 8004e3a:	f7ff ff7d 	bl	8004d38 <std>
 8004e3e:	68e0      	ldr	r0, [r4, #12]
 8004e40:	2202      	movs	r2, #2
 8004e42:	2112      	movs	r1, #18
 8004e44:	f7ff ff78 	bl	8004d38 <std>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61a3      	str	r3, [r4, #24]
 8004e4c:	e7d2      	b.n	8004df4 <__sinit+0xc>
 8004e4e:	bf00      	nop
 8004e50:	08007a20 	.word	0x08007a20
 8004e54:	08004d81 	.word	0x08004d81

08004e58 <__sfp>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	4607      	mov	r7, r0
 8004e5c:	f7ff ffac 	bl	8004db8 <__sfp_lock_acquire>
 8004e60:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <__sfp+0x84>)
 8004e62:	681e      	ldr	r6, [r3, #0]
 8004e64:	69b3      	ldr	r3, [r6, #24]
 8004e66:	b913      	cbnz	r3, 8004e6e <__sfp+0x16>
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff ffbd 	bl	8004de8 <__sinit>
 8004e6e:	3648      	adds	r6, #72	; 0x48
 8004e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	d503      	bpl.n	8004e80 <__sfp+0x28>
 8004e78:	6833      	ldr	r3, [r6, #0]
 8004e7a:	b30b      	cbz	r3, 8004ec0 <__sfp+0x68>
 8004e7c:	6836      	ldr	r6, [r6, #0]
 8004e7e:	e7f7      	b.n	8004e70 <__sfp+0x18>
 8004e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e84:	b9d5      	cbnz	r5, 8004ebc <__sfp+0x64>
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <__sfp+0x88>)
 8004e88:	60e3      	str	r3, [r4, #12]
 8004e8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e8e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e90:	f000 f86c 	bl	8004f6c <__retarget_lock_init_recursive>
 8004e94:	f7ff ff96 	bl	8004dc4 <__sfp_lock_release>
 8004e98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ea0:	6025      	str	r5, [r4, #0]
 8004ea2:	61a5      	str	r5, [r4, #24]
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004eac:	f000 f8e4 	bl	8005078 <memset>
 8004eb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004eb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004eb8:	4620      	mov	r0, r4
 8004eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ebc:	3468      	adds	r4, #104	; 0x68
 8004ebe:	e7d9      	b.n	8004e74 <__sfp+0x1c>
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f7ff ff62 	bl	8004d8c <__sfmoreglue>
 8004ec8:	4604      	mov	r4, r0
 8004eca:	6030      	str	r0, [r6, #0]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d1d5      	bne.n	8004e7c <__sfp+0x24>
 8004ed0:	f7ff ff78 	bl	8004dc4 <__sfp_lock_release>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	e7ee      	b.n	8004eb8 <__sfp+0x60>
 8004eda:	bf00      	nop
 8004edc:	08007a20 	.word	0x08007a20
 8004ee0:	ffff0001 	.word	0xffff0001

08004ee4 <_fwalk_reent>:
 8004ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee8:	4606      	mov	r6, r0
 8004eea:	4688      	mov	r8, r1
 8004eec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ef0:	2700      	movs	r7, #0
 8004ef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ef6:	f1b9 0901 	subs.w	r9, r9, #1
 8004efa:	d505      	bpl.n	8004f08 <_fwalk_reent+0x24>
 8004efc:	6824      	ldr	r4, [r4, #0]
 8004efe:	2c00      	cmp	r4, #0
 8004f00:	d1f7      	bne.n	8004ef2 <_fwalk_reent+0xe>
 8004f02:	4638      	mov	r0, r7
 8004f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f08:	89ab      	ldrh	r3, [r5, #12]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d907      	bls.n	8004f1e <_fwalk_reent+0x3a>
 8004f0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f12:	3301      	adds	r3, #1
 8004f14:	d003      	beq.n	8004f1e <_fwalk_reent+0x3a>
 8004f16:	4629      	mov	r1, r5
 8004f18:	4630      	mov	r0, r6
 8004f1a:	47c0      	blx	r8
 8004f1c:	4307      	orrs	r7, r0
 8004f1e:	3568      	adds	r5, #104	; 0x68
 8004f20:	e7e9      	b.n	8004ef6 <_fwalk_reent+0x12>
	...

08004f24 <__libc_init_array>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	4d0d      	ldr	r5, [pc, #52]	; (8004f5c <__libc_init_array+0x38>)
 8004f28:	4c0d      	ldr	r4, [pc, #52]	; (8004f60 <__libc_init_array+0x3c>)
 8004f2a:	1b64      	subs	r4, r4, r5
 8004f2c:	10a4      	asrs	r4, r4, #2
 8004f2e:	2600      	movs	r6, #0
 8004f30:	42a6      	cmp	r6, r4
 8004f32:	d109      	bne.n	8004f48 <__libc_init_array+0x24>
 8004f34:	4d0b      	ldr	r5, [pc, #44]	; (8004f64 <__libc_init_array+0x40>)
 8004f36:	4c0c      	ldr	r4, [pc, #48]	; (8004f68 <__libc_init_array+0x44>)
 8004f38:	f002 fb9e 	bl	8007678 <_init>
 8004f3c:	1b64      	subs	r4, r4, r5
 8004f3e:	10a4      	asrs	r4, r4, #2
 8004f40:	2600      	movs	r6, #0
 8004f42:	42a6      	cmp	r6, r4
 8004f44:	d105      	bne.n	8004f52 <__libc_init_array+0x2e>
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
 8004f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4c:	4798      	blx	r3
 8004f4e:	3601      	adds	r6, #1
 8004f50:	e7ee      	b.n	8004f30 <__libc_init_array+0xc>
 8004f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f56:	4798      	blx	r3
 8004f58:	3601      	adds	r6, #1
 8004f5a:	e7f2      	b.n	8004f42 <__libc_init_array+0x1e>
 8004f5c:	08007da0 	.word	0x08007da0
 8004f60:	08007da0 	.word	0x08007da0
 8004f64:	08007da0 	.word	0x08007da0
 8004f68:	08007da4 	.word	0x08007da4

08004f6c <__retarget_lock_init_recursive>:
 8004f6c:	4770      	bx	lr

08004f6e <__retarget_lock_acquire_recursive>:
 8004f6e:	4770      	bx	lr

08004f70 <__retarget_lock_release_recursive>:
 8004f70:	4770      	bx	lr

08004f72 <__swhatbuf_r>:
 8004f72:	b570      	push	{r4, r5, r6, lr}
 8004f74:	460e      	mov	r6, r1
 8004f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7a:	2900      	cmp	r1, #0
 8004f7c:	b096      	sub	sp, #88	; 0x58
 8004f7e:	4614      	mov	r4, r2
 8004f80:	461d      	mov	r5, r3
 8004f82:	da08      	bge.n	8004f96 <__swhatbuf_r+0x24>
 8004f84:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	602a      	str	r2, [r5, #0]
 8004f8c:	061a      	lsls	r2, r3, #24
 8004f8e:	d410      	bmi.n	8004fb2 <__swhatbuf_r+0x40>
 8004f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f94:	e00e      	b.n	8004fb4 <__swhatbuf_r+0x42>
 8004f96:	466a      	mov	r2, sp
 8004f98:	f001 fdba 	bl	8006b10 <_fstat_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	dbf1      	blt.n	8004f84 <__swhatbuf_r+0x12>
 8004fa0:	9a01      	ldr	r2, [sp, #4]
 8004fa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004faa:	425a      	negs	r2, r3
 8004fac:	415a      	adcs	r2, r3
 8004fae:	602a      	str	r2, [r5, #0]
 8004fb0:	e7ee      	b.n	8004f90 <__swhatbuf_r+0x1e>
 8004fb2:	2340      	movs	r3, #64	; 0x40
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	b016      	add	sp, #88	; 0x58
 8004fba:	bd70      	pop	{r4, r5, r6, pc}

08004fbc <__smakebuf_r>:
 8004fbc:	898b      	ldrh	r3, [r1, #12]
 8004fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fc0:	079d      	lsls	r5, r3, #30
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	d507      	bpl.n	8004fd8 <__smakebuf_r+0x1c>
 8004fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	6163      	str	r3, [r4, #20]
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	ab01      	add	r3, sp, #4
 8004fda:	466a      	mov	r2, sp
 8004fdc:	f7ff ffc9 	bl	8004f72 <__swhatbuf_r>
 8004fe0:	9900      	ldr	r1, [sp, #0]
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f000 f8bb 	bl	8005160 <_malloc_r>
 8004fea:	b948      	cbnz	r0, 8005000 <__smakebuf_r+0x44>
 8004fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff0:	059a      	lsls	r2, r3, #22
 8004ff2:	d4ef      	bmi.n	8004fd4 <__smakebuf_r+0x18>
 8004ff4:	f023 0303 	bic.w	r3, r3, #3
 8004ff8:	f043 0302 	orr.w	r3, r3, #2
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	e7e3      	b.n	8004fc8 <__smakebuf_r+0xc>
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <__smakebuf_r+0x7c>)
 8005002:	62b3      	str	r3, [r6, #40]	; 0x28
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	6020      	str	r0, [r4, #0]
 8005008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500c:	81a3      	strh	r3, [r4, #12]
 800500e:	9b00      	ldr	r3, [sp, #0]
 8005010:	6163      	str	r3, [r4, #20]
 8005012:	9b01      	ldr	r3, [sp, #4]
 8005014:	6120      	str	r0, [r4, #16]
 8005016:	b15b      	cbz	r3, 8005030 <__smakebuf_r+0x74>
 8005018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800501c:	4630      	mov	r0, r6
 800501e:	f001 fd89 	bl	8006b34 <_isatty_r>
 8005022:	b128      	cbz	r0, 8005030 <__smakebuf_r+0x74>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	89a0      	ldrh	r0, [r4, #12]
 8005032:	4305      	orrs	r5, r0
 8005034:	81a5      	strh	r5, [r4, #12]
 8005036:	e7cd      	b.n	8004fd4 <__smakebuf_r+0x18>
 8005038:	08004d81 	.word	0x08004d81

0800503c <malloc>:
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <malloc+0xc>)
 800503e:	4601      	mov	r1, r0
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f000 b88d 	b.w	8005160 <_malloc_r>
 8005046:	bf00      	nop
 8005048:	20000018 	.word	0x20000018

0800504c <free>:
 800504c:	4b02      	ldr	r3, [pc, #8]	; (8005058 <free+0xc>)
 800504e:	4601      	mov	r1, r0
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	f000 b819 	b.w	8005088 <_free_r>
 8005056:	bf00      	nop
 8005058:	20000018 	.word	0x20000018

0800505c <memcpy>:
 800505c:	440a      	add	r2, r1
 800505e:	4291      	cmp	r1, r2
 8005060:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005064:	d100      	bne.n	8005068 <memcpy+0xc>
 8005066:	4770      	bx	lr
 8005068:	b510      	push	{r4, lr}
 800506a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800506e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005072:	4291      	cmp	r1, r2
 8005074:	d1f9      	bne.n	800506a <memcpy+0xe>
 8005076:	bd10      	pop	{r4, pc}

08005078 <memset>:
 8005078:	4402      	add	r2, r0
 800507a:	4603      	mov	r3, r0
 800507c:	4293      	cmp	r3, r2
 800507e:	d100      	bne.n	8005082 <memset+0xa>
 8005080:	4770      	bx	lr
 8005082:	f803 1b01 	strb.w	r1, [r3], #1
 8005086:	e7f9      	b.n	800507c <memset+0x4>

08005088 <_free_r>:
 8005088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800508a:	2900      	cmp	r1, #0
 800508c:	d044      	beq.n	8005118 <_free_r+0x90>
 800508e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005092:	9001      	str	r0, [sp, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f1a1 0404 	sub.w	r4, r1, #4
 800509a:	bfb8      	it	lt
 800509c:	18e4      	addlt	r4, r4, r3
 800509e:	f001 fd81 	bl	8006ba4 <__malloc_lock>
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <_free_r+0x94>)
 80050a4:	9801      	ldr	r0, [sp, #4]
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	b933      	cbnz	r3, 80050b8 <_free_r+0x30>
 80050aa:	6063      	str	r3, [r4, #4]
 80050ac:	6014      	str	r4, [r2, #0]
 80050ae:	b003      	add	sp, #12
 80050b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b4:	f001 bd7c 	b.w	8006bb0 <__malloc_unlock>
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	d908      	bls.n	80050ce <_free_r+0x46>
 80050bc:	6825      	ldr	r5, [r4, #0]
 80050be:	1961      	adds	r1, r4, r5
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf01      	itttt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	1949      	addeq	r1, r1, r5
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	e7ed      	b.n	80050aa <_free_r+0x22>
 80050ce:	461a      	mov	r2, r3
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	b10b      	cbz	r3, 80050d8 <_free_r+0x50>
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	d9fa      	bls.n	80050ce <_free_r+0x46>
 80050d8:	6811      	ldr	r1, [r2, #0]
 80050da:	1855      	adds	r5, r2, r1
 80050dc:	42a5      	cmp	r5, r4
 80050de:	d10b      	bne.n	80050f8 <_free_r+0x70>
 80050e0:	6824      	ldr	r4, [r4, #0]
 80050e2:	4421      	add	r1, r4
 80050e4:	1854      	adds	r4, r2, r1
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	6011      	str	r1, [r2, #0]
 80050ea:	d1e0      	bne.n	80050ae <_free_r+0x26>
 80050ec:	681c      	ldr	r4, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	6053      	str	r3, [r2, #4]
 80050f2:	4421      	add	r1, r4
 80050f4:	6011      	str	r1, [r2, #0]
 80050f6:	e7da      	b.n	80050ae <_free_r+0x26>
 80050f8:	d902      	bls.n	8005100 <_free_r+0x78>
 80050fa:	230c      	movs	r3, #12
 80050fc:	6003      	str	r3, [r0, #0]
 80050fe:	e7d6      	b.n	80050ae <_free_r+0x26>
 8005100:	6825      	ldr	r5, [r4, #0]
 8005102:	1961      	adds	r1, r4, r5
 8005104:	428b      	cmp	r3, r1
 8005106:	bf04      	itt	eq
 8005108:	6819      	ldreq	r1, [r3, #0]
 800510a:	685b      	ldreq	r3, [r3, #4]
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	bf04      	itt	eq
 8005110:	1949      	addeq	r1, r1, r5
 8005112:	6021      	streq	r1, [r4, #0]
 8005114:	6054      	str	r4, [r2, #4]
 8005116:	e7ca      	b.n	80050ae <_free_r+0x26>
 8005118:	b003      	add	sp, #12
 800511a:	bd30      	pop	{r4, r5, pc}
 800511c:	2000029c 	.word	0x2000029c

08005120 <sbrk_aligned>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4e0e      	ldr	r6, [pc, #56]	; (800515c <sbrk_aligned+0x3c>)
 8005124:	460c      	mov	r4, r1
 8005126:	6831      	ldr	r1, [r6, #0]
 8005128:	4605      	mov	r5, r0
 800512a:	b911      	cbnz	r1, 8005132 <sbrk_aligned+0x12>
 800512c:	f000 fd0e 	bl	8005b4c <_sbrk_r>
 8005130:	6030      	str	r0, [r6, #0]
 8005132:	4621      	mov	r1, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f000 fd09 	bl	8005b4c <_sbrk_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d00a      	beq.n	8005154 <sbrk_aligned+0x34>
 800513e:	1cc4      	adds	r4, r0, #3
 8005140:	f024 0403 	bic.w	r4, r4, #3
 8005144:	42a0      	cmp	r0, r4
 8005146:	d007      	beq.n	8005158 <sbrk_aligned+0x38>
 8005148:	1a21      	subs	r1, r4, r0
 800514a:	4628      	mov	r0, r5
 800514c:	f000 fcfe 	bl	8005b4c <_sbrk_r>
 8005150:	3001      	adds	r0, #1
 8005152:	d101      	bne.n	8005158 <sbrk_aligned+0x38>
 8005154:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005158:	4620      	mov	r0, r4
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	200002a0 	.word	0x200002a0

08005160 <_malloc_r>:
 8005160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005164:	1ccd      	adds	r5, r1, #3
 8005166:	f025 0503 	bic.w	r5, r5, #3
 800516a:	3508      	adds	r5, #8
 800516c:	2d0c      	cmp	r5, #12
 800516e:	bf38      	it	cc
 8005170:	250c      	movcc	r5, #12
 8005172:	2d00      	cmp	r5, #0
 8005174:	4607      	mov	r7, r0
 8005176:	db01      	blt.n	800517c <_malloc_r+0x1c>
 8005178:	42a9      	cmp	r1, r5
 800517a:	d905      	bls.n	8005188 <_malloc_r+0x28>
 800517c:	230c      	movs	r3, #12
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	2600      	movs	r6, #0
 8005182:	4630      	mov	r0, r6
 8005184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005188:	4e2e      	ldr	r6, [pc, #184]	; (8005244 <_malloc_r+0xe4>)
 800518a:	f001 fd0b 	bl	8006ba4 <__malloc_lock>
 800518e:	6833      	ldr	r3, [r6, #0]
 8005190:	461c      	mov	r4, r3
 8005192:	bb34      	cbnz	r4, 80051e2 <_malloc_r+0x82>
 8005194:	4629      	mov	r1, r5
 8005196:	4638      	mov	r0, r7
 8005198:	f7ff ffc2 	bl	8005120 <sbrk_aligned>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	4604      	mov	r4, r0
 80051a0:	d14d      	bne.n	800523e <_malloc_r+0xde>
 80051a2:	6834      	ldr	r4, [r6, #0]
 80051a4:	4626      	mov	r6, r4
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	d140      	bne.n	800522c <_malloc_r+0xcc>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	4631      	mov	r1, r6
 80051ae:	4638      	mov	r0, r7
 80051b0:	eb04 0803 	add.w	r8, r4, r3
 80051b4:	f000 fcca 	bl	8005b4c <_sbrk_r>
 80051b8:	4580      	cmp	r8, r0
 80051ba:	d13a      	bne.n	8005232 <_malloc_r+0xd2>
 80051bc:	6821      	ldr	r1, [r4, #0]
 80051be:	3503      	adds	r5, #3
 80051c0:	1a6d      	subs	r5, r5, r1
 80051c2:	f025 0503 	bic.w	r5, r5, #3
 80051c6:	3508      	adds	r5, #8
 80051c8:	2d0c      	cmp	r5, #12
 80051ca:	bf38      	it	cc
 80051cc:	250c      	movcc	r5, #12
 80051ce:	4629      	mov	r1, r5
 80051d0:	4638      	mov	r0, r7
 80051d2:	f7ff ffa5 	bl	8005120 <sbrk_aligned>
 80051d6:	3001      	adds	r0, #1
 80051d8:	d02b      	beq.n	8005232 <_malloc_r+0xd2>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	442b      	add	r3, r5
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	e00e      	b.n	8005200 <_malloc_r+0xa0>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	1b52      	subs	r2, r2, r5
 80051e6:	d41e      	bmi.n	8005226 <_malloc_r+0xc6>
 80051e8:	2a0b      	cmp	r2, #11
 80051ea:	d916      	bls.n	800521a <_malloc_r+0xba>
 80051ec:	1961      	adds	r1, r4, r5
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	6025      	str	r5, [r4, #0]
 80051f2:	bf18      	it	ne
 80051f4:	6059      	strne	r1, [r3, #4]
 80051f6:	6863      	ldr	r3, [r4, #4]
 80051f8:	bf08      	it	eq
 80051fa:	6031      	streq	r1, [r6, #0]
 80051fc:	5162      	str	r2, [r4, r5]
 80051fe:	604b      	str	r3, [r1, #4]
 8005200:	4638      	mov	r0, r7
 8005202:	f104 060b 	add.w	r6, r4, #11
 8005206:	f001 fcd3 	bl	8006bb0 <__malloc_unlock>
 800520a:	f026 0607 	bic.w	r6, r6, #7
 800520e:	1d23      	adds	r3, r4, #4
 8005210:	1af2      	subs	r2, r6, r3
 8005212:	d0b6      	beq.n	8005182 <_malloc_r+0x22>
 8005214:	1b9b      	subs	r3, r3, r6
 8005216:	50a3      	str	r3, [r4, r2]
 8005218:	e7b3      	b.n	8005182 <_malloc_r+0x22>
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	42a3      	cmp	r3, r4
 800521e:	bf0c      	ite	eq
 8005220:	6032      	streq	r2, [r6, #0]
 8005222:	605a      	strne	r2, [r3, #4]
 8005224:	e7ec      	b.n	8005200 <_malloc_r+0xa0>
 8005226:	4623      	mov	r3, r4
 8005228:	6864      	ldr	r4, [r4, #4]
 800522a:	e7b2      	b.n	8005192 <_malloc_r+0x32>
 800522c:	4634      	mov	r4, r6
 800522e:	6876      	ldr	r6, [r6, #4]
 8005230:	e7b9      	b.n	80051a6 <_malloc_r+0x46>
 8005232:	230c      	movs	r3, #12
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4638      	mov	r0, r7
 8005238:	f001 fcba 	bl	8006bb0 <__malloc_unlock>
 800523c:	e7a1      	b.n	8005182 <_malloc_r+0x22>
 800523e:	6025      	str	r5, [r4, #0]
 8005240:	e7de      	b.n	8005200 <_malloc_r+0xa0>
 8005242:	bf00      	nop
 8005244:	2000029c 	.word	0x2000029c

08005248 <__cvt>:
 8005248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	ec55 4b10 	vmov	r4, r5, d0
 8005250:	2d00      	cmp	r5, #0
 8005252:	460e      	mov	r6, r1
 8005254:	4619      	mov	r1, r3
 8005256:	462b      	mov	r3, r5
 8005258:	bfbb      	ittet	lt
 800525a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800525e:	461d      	movlt	r5, r3
 8005260:	2300      	movge	r3, #0
 8005262:	232d      	movlt	r3, #45	; 0x2d
 8005264:	700b      	strb	r3, [r1, #0]
 8005266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005268:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800526c:	4691      	mov	r9, r2
 800526e:	f023 0820 	bic.w	r8, r3, #32
 8005272:	bfbc      	itt	lt
 8005274:	4622      	movlt	r2, r4
 8005276:	4614      	movlt	r4, r2
 8005278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800527c:	d005      	beq.n	800528a <__cvt+0x42>
 800527e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005282:	d100      	bne.n	8005286 <__cvt+0x3e>
 8005284:	3601      	adds	r6, #1
 8005286:	2102      	movs	r1, #2
 8005288:	e000      	b.n	800528c <__cvt+0x44>
 800528a:	2103      	movs	r1, #3
 800528c:	ab03      	add	r3, sp, #12
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	ab02      	add	r3, sp, #8
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	ec45 4b10 	vmov	d0, r4, r5
 8005298:	4653      	mov	r3, sl
 800529a:	4632      	mov	r2, r6
 800529c:	f000 fe38 	bl	8005f10 <_dtoa_r>
 80052a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052a4:	4607      	mov	r7, r0
 80052a6:	d102      	bne.n	80052ae <__cvt+0x66>
 80052a8:	f019 0f01 	tst.w	r9, #1
 80052ac:	d022      	beq.n	80052f4 <__cvt+0xac>
 80052ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052b2:	eb07 0906 	add.w	r9, r7, r6
 80052b6:	d110      	bne.n	80052da <__cvt+0x92>
 80052b8:	783b      	ldrb	r3, [r7, #0]
 80052ba:	2b30      	cmp	r3, #48	; 0x30
 80052bc:	d10a      	bne.n	80052d4 <__cvt+0x8c>
 80052be:	2200      	movs	r2, #0
 80052c0:	2300      	movs	r3, #0
 80052c2:	4620      	mov	r0, r4
 80052c4:	4629      	mov	r1, r5
 80052c6:	f7fb fbd7 	bl	8000a78 <__aeabi_dcmpeq>
 80052ca:	b918      	cbnz	r0, 80052d4 <__cvt+0x8c>
 80052cc:	f1c6 0601 	rsb	r6, r6, #1
 80052d0:	f8ca 6000 	str.w	r6, [sl]
 80052d4:	f8da 3000 	ldr.w	r3, [sl]
 80052d8:	4499      	add	r9, r3
 80052da:	2200      	movs	r2, #0
 80052dc:	2300      	movs	r3, #0
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7fb fbc9 	bl	8000a78 <__aeabi_dcmpeq>
 80052e6:	b108      	cbz	r0, 80052ec <__cvt+0xa4>
 80052e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80052ec:	2230      	movs	r2, #48	; 0x30
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	454b      	cmp	r3, r9
 80052f2:	d307      	bcc.n	8005304 <__cvt+0xbc>
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052f8:	1bdb      	subs	r3, r3, r7
 80052fa:	4638      	mov	r0, r7
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	b004      	add	sp, #16
 8005300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005304:	1c59      	adds	r1, r3, #1
 8005306:	9103      	str	r1, [sp, #12]
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e7f0      	b.n	80052ee <__cvt+0xa6>

0800530c <__exponent>:
 800530c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800530e:	4603      	mov	r3, r0
 8005310:	2900      	cmp	r1, #0
 8005312:	bfb8      	it	lt
 8005314:	4249      	neglt	r1, r1
 8005316:	f803 2b02 	strb.w	r2, [r3], #2
 800531a:	bfb4      	ite	lt
 800531c:	222d      	movlt	r2, #45	; 0x2d
 800531e:	222b      	movge	r2, #43	; 0x2b
 8005320:	2909      	cmp	r1, #9
 8005322:	7042      	strb	r2, [r0, #1]
 8005324:	dd2a      	ble.n	800537c <__exponent+0x70>
 8005326:	f10d 0407 	add.w	r4, sp, #7
 800532a:	46a4      	mov	ip, r4
 800532c:	270a      	movs	r7, #10
 800532e:	46a6      	mov	lr, r4
 8005330:	460a      	mov	r2, r1
 8005332:	fb91 f6f7 	sdiv	r6, r1, r7
 8005336:	fb07 1516 	mls	r5, r7, r6, r1
 800533a:	3530      	adds	r5, #48	; 0x30
 800533c:	2a63      	cmp	r2, #99	; 0x63
 800533e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005346:	4631      	mov	r1, r6
 8005348:	dcf1      	bgt.n	800532e <__exponent+0x22>
 800534a:	3130      	adds	r1, #48	; 0x30
 800534c:	f1ae 0502 	sub.w	r5, lr, #2
 8005350:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005354:	1c44      	adds	r4, r0, #1
 8005356:	4629      	mov	r1, r5
 8005358:	4561      	cmp	r1, ip
 800535a:	d30a      	bcc.n	8005372 <__exponent+0x66>
 800535c:	f10d 0209 	add.w	r2, sp, #9
 8005360:	eba2 020e 	sub.w	r2, r2, lr
 8005364:	4565      	cmp	r5, ip
 8005366:	bf88      	it	hi
 8005368:	2200      	movhi	r2, #0
 800536a:	4413      	add	r3, r2
 800536c:	1a18      	subs	r0, r3, r0
 800536e:	b003      	add	sp, #12
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005376:	f804 2f01 	strb.w	r2, [r4, #1]!
 800537a:	e7ed      	b.n	8005358 <__exponent+0x4c>
 800537c:	2330      	movs	r3, #48	; 0x30
 800537e:	3130      	adds	r1, #48	; 0x30
 8005380:	7083      	strb	r3, [r0, #2]
 8005382:	70c1      	strb	r1, [r0, #3]
 8005384:	1d03      	adds	r3, r0, #4
 8005386:	e7f1      	b.n	800536c <__exponent+0x60>

08005388 <_printf_float>:
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538c:	ed2d 8b02 	vpush	{d8}
 8005390:	b08d      	sub	sp, #52	; 0x34
 8005392:	460c      	mov	r4, r1
 8005394:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005398:	4616      	mov	r6, r2
 800539a:	461f      	mov	r7, r3
 800539c:	4605      	mov	r5, r0
 800539e:	f001 fbd9 	bl	8006b54 <_localeconv_r>
 80053a2:	f8d0 a000 	ldr.w	sl, [r0]
 80053a6:	4650      	mov	r0, sl
 80053a8:	f7fa ff3a 	bl	8000220 <strlen>
 80053ac:	2300      	movs	r3, #0
 80053ae:	930a      	str	r3, [sp, #40]	; 0x28
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	9305      	str	r3, [sp, #20]
 80053b4:	f8d8 3000 	ldr.w	r3, [r8]
 80053b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053bc:	3307      	adds	r3, #7
 80053be:	f023 0307 	bic.w	r3, r3, #7
 80053c2:	f103 0208 	add.w	r2, r3, #8
 80053c6:	f8c8 2000 	str.w	r2, [r8]
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053da:	9307      	str	r3, [sp, #28]
 80053dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80053e0:	ee08 0a10 	vmov	s16, r0
 80053e4:	4b9f      	ldr	r3, [pc, #636]	; (8005664 <_printf_float+0x2dc>)
 80053e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ee:	f7fb fb75 	bl	8000adc <__aeabi_dcmpun>
 80053f2:	bb88      	cbnz	r0, 8005458 <_printf_float+0xd0>
 80053f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f8:	4b9a      	ldr	r3, [pc, #616]	; (8005664 <_printf_float+0x2dc>)
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053fe:	f7fb fb4f 	bl	8000aa0 <__aeabi_dcmple>
 8005402:	bb48      	cbnz	r0, 8005458 <_printf_float+0xd0>
 8005404:	2200      	movs	r2, #0
 8005406:	2300      	movs	r3, #0
 8005408:	4640      	mov	r0, r8
 800540a:	4649      	mov	r1, r9
 800540c:	f7fb fb3e 	bl	8000a8c <__aeabi_dcmplt>
 8005410:	b110      	cbz	r0, 8005418 <_printf_float+0x90>
 8005412:	232d      	movs	r3, #45	; 0x2d
 8005414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005418:	4b93      	ldr	r3, [pc, #588]	; (8005668 <_printf_float+0x2e0>)
 800541a:	4894      	ldr	r0, [pc, #592]	; (800566c <_printf_float+0x2e4>)
 800541c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005420:	bf94      	ite	ls
 8005422:	4698      	movls	r8, r3
 8005424:	4680      	movhi	r8, r0
 8005426:	2303      	movs	r3, #3
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	9b05      	ldr	r3, [sp, #20]
 800542c:	f023 0204 	bic.w	r2, r3, #4
 8005430:	6022      	str	r2, [r4, #0]
 8005432:	f04f 0900 	mov.w	r9, #0
 8005436:	9700      	str	r7, [sp, #0]
 8005438:	4633      	mov	r3, r6
 800543a:	aa0b      	add	r2, sp, #44	; 0x2c
 800543c:	4621      	mov	r1, r4
 800543e:	4628      	mov	r0, r5
 8005440:	f000 f9d8 	bl	80057f4 <_printf_common>
 8005444:	3001      	adds	r0, #1
 8005446:	f040 8090 	bne.w	800556a <_printf_float+0x1e2>
 800544a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800544e:	b00d      	add	sp, #52	; 0x34
 8005450:	ecbd 8b02 	vpop	{d8}
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	4640      	mov	r0, r8
 800545e:	4649      	mov	r1, r9
 8005460:	f7fb fb3c 	bl	8000adc <__aeabi_dcmpun>
 8005464:	b140      	cbz	r0, 8005478 <_printf_float+0xf0>
 8005466:	464b      	mov	r3, r9
 8005468:	2b00      	cmp	r3, #0
 800546a:	bfbc      	itt	lt
 800546c:	232d      	movlt	r3, #45	; 0x2d
 800546e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005472:	487f      	ldr	r0, [pc, #508]	; (8005670 <_printf_float+0x2e8>)
 8005474:	4b7f      	ldr	r3, [pc, #508]	; (8005674 <_printf_float+0x2ec>)
 8005476:	e7d1      	b.n	800541c <_printf_float+0x94>
 8005478:	6863      	ldr	r3, [r4, #4]
 800547a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800547e:	9206      	str	r2, [sp, #24]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	d13f      	bne.n	8005504 <_printf_float+0x17c>
 8005484:	2306      	movs	r3, #6
 8005486:	6063      	str	r3, [r4, #4]
 8005488:	9b05      	ldr	r3, [sp, #20]
 800548a:	6861      	ldr	r1, [r4, #4]
 800548c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005490:	2300      	movs	r3, #0
 8005492:	9303      	str	r3, [sp, #12]
 8005494:	ab0a      	add	r3, sp, #40	; 0x28
 8005496:	e9cd b301 	strd	fp, r3, [sp, #4]
 800549a:	ab09      	add	r3, sp, #36	; 0x24
 800549c:	ec49 8b10 	vmov	d0, r8, r9
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	6022      	str	r2, [r4, #0]
 80054a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054a8:	4628      	mov	r0, r5
 80054aa:	f7ff fecd 	bl	8005248 <__cvt>
 80054ae:	9b06      	ldr	r3, [sp, #24]
 80054b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054b2:	2b47      	cmp	r3, #71	; 0x47
 80054b4:	4680      	mov	r8, r0
 80054b6:	d108      	bne.n	80054ca <_printf_float+0x142>
 80054b8:	1cc8      	adds	r0, r1, #3
 80054ba:	db02      	blt.n	80054c2 <_printf_float+0x13a>
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	4299      	cmp	r1, r3
 80054c0:	dd41      	ble.n	8005546 <_printf_float+0x1be>
 80054c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80054c6:	fa5f fb8b 	uxtb.w	fp, fp
 80054ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054ce:	d820      	bhi.n	8005512 <_printf_float+0x18a>
 80054d0:	3901      	subs	r1, #1
 80054d2:	465a      	mov	r2, fp
 80054d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054d8:	9109      	str	r1, [sp, #36]	; 0x24
 80054da:	f7ff ff17 	bl	800530c <__exponent>
 80054de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054e0:	1813      	adds	r3, r2, r0
 80054e2:	2a01      	cmp	r2, #1
 80054e4:	4681      	mov	r9, r0
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	dc02      	bgt.n	80054f0 <_printf_float+0x168>
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	07d2      	lsls	r2, r2, #31
 80054ee:	d501      	bpl.n	80054f4 <_printf_float+0x16c>
 80054f0:	3301      	adds	r3, #1
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d09c      	beq.n	8005436 <_printf_float+0xae>
 80054fc:	232d      	movs	r3, #45	; 0x2d
 80054fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005502:	e798      	b.n	8005436 <_printf_float+0xae>
 8005504:	9a06      	ldr	r2, [sp, #24]
 8005506:	2a47      	cmp	r2, #71	; 0x47
 8005508:	d1be      	bne.n	8005488 <_printf_float+0x100>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1bc      	bne.n	8005488 <_printf_float+0x100>
 800550e:	2301      	movs	r3, #1
 8005510:	e7b9      	b.n	8005486 <_printf_float+0xfe>
 8005512:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005516:	d118      	bne.n	800554a <_printf_float+0x1c2>
 8005518:	2900      	cmp	r1, #0
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	dd0b      	ble.n	8005536 <_printf_float+0x1ae>
 800551e:	6121      	str	r1, [r4, #16]
 8005520:	b913      	cbnz	r3, 8005528 <_printf_float+0x1a0>
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	07d0      	lsls	r0, r2, #31
 8005526:	d502      	bpl.n	800552e <_printf_float+0x1a6>
 8005528:	3301      	adds	r3, #1
 800552a:	440b      	add	r3, r1
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005530:	f04f 0900 	mov.w	r9, #0
 8005534:	e7de      	b.n	80054f4 <_printf_float+0x16c>
 8005536:	b913      	cbnz	r3, 800553e <_printf_float+0x1b6>
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	07d2      	lsls	r2, r2, #31
 800553c:	d501      	bpl.n	8005542 <_printf_float+0x1ba>
 800553e:	3302      	adds	r3, #2
 8005540:	e7f4      	b.n	800552c <_printf_float+0x1a4>
 8005542:	2301      	movs	r3, #1
 8005544:	e7f2      	b.n	800552c <_printf_float+0x1a4>
 8005546:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800554a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800554c:	4299      	cmp	r1, r3
 800554e:	db05      	blt.n	800555c <_printf_float+0x1d4>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	6121      	str	r1, [r4, #16]
 8005554:	07d8      	lsls	r0, r3, #31
 8005556:	d5ea      	bpl.n	800552e <_printf_float+0x1a6>
 8005558:	1c4b      	adds	r3, r1, #1
 800555a:	e7e7      	b.n	800552c <_printf_float+0x1a4>
 800555c:	2900      	cmp	r1, #0
 800555e:	bfd4      	ite	le
 8005560:	f1c1 0202 	rsble	r2, r1, #2
 8005564:	2201      	movgt	r2, #1
 8005566:	4413      	add	r3, r2
 8005568:	e7e0      	b.n	800552c <_printf_float+0x1a4>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	055a      	lsls	r2, r3, #21
 800556e:	d407      	bmi.n	8005580 <_printf_float+0x1f8>
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	4642      	mov	r2, r8
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	d12c      	bne.n	80055d8 <_printf_float+0x250>
 800557e:	e764      	b.n	800544a <_printf_float+0xc2>
 8005580:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005584:	f240 80e0 	bls.w	8005748 <_printf_float+0x3c0>
 8005588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800558c:	2200      	movs	r2, #0
 800558e:	2300      	movs	r3, #0
 8005590:	f7fb fa72 	bl	8000a78 <__aeabi_dcmpeq>
 8005594:	2800      	cmp	r0, #0
 8005596:	d034      	beq.n	8005602 <_printf_float+0x27a>
 8005598:	4a37      	ldr	r2, [pc, #220]	; (8005678 <_printf_float+0x2f0>)
 800559a:	2301      	movs	r3, #1
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f af51 	beq.w	800544a <_printf_float+0xc2>
 80055a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ac:	429a      	cmp	r2, r3
 80055ae:	db02      	blt.n	80055b6 <_printf_float+0x22e>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	07d8      	lsls	r0, r3, #31
 80055b4:	d510      	bpl.n	80055d8 <_printf_float+0x250>
 80055b6:	ee18 3a10 	vmov	r3, s16
 80055ba:	4652      	mov	r2, sl
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f af41 	beq.w	800544a <_printf_float+0xc2>
 80055c8:	f04f 0800 	mov.w	r8, #0
 80055cc:	f104 091a 	add.w	r9, r4, #26
 80055d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d2:	3b01      	subs	r3, #1
 80055d4:	4543      	cmp	r3, r8
 80055d6:	dc09      	bgt.n	80055ec <_printf_float+0x264>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	079b      	lsls	r3, r3, #30
 80055dc:	f100 8105 	bmi.w	80057ea <_printf_float+0x462>
 80055e0:	68e0      	ldr	r0, [r4, #12]
 80055e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e4:	4298      	cmp	r0, r3
 80055e6:	bfb8      	it	lt
 80055e8:	4618      	movlt	r0, r3
 80055ea:	e730      	b.n	800544e <_printf_float+0xc6>
 80055ec:	2301      	movs	r3, #1
 80055ee:	464a      	mov	r2, r9
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f af27 	beq.w	800544a <_printf_float+0xc2>
 80055fc:	f108 0801 	add.w	r8, r8, #1
 8005600:	e7e6      	b.n	80055d0 <_printf_float+0x248>
 8005602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	dc39      	bgt.n	800567c <_printf_float+0x2f4>
 8005608:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <_printf_float+0x2f0>)
 800560a:	2301      	movs	r3, #1
 800560c:	4631      	mov	r1, r6
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	f43f af19 	beq.w	800544a <_printf_float+0xc2>
 8005618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800561c:	4313      	orrs	r3, r2
 800561e:	d102      	bne.n	8005626 <_printf_float+0x29e>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	07d9      	lsls	r1, r3, #31
 8005624:	d5d8      	bpl.n	80055d8 <_printf_float+0x250>
 8005626:	ee18 3a10 	vmov	r3, s16
 800562a:	4652      	mov	r2, sl
 800562c:	4631      	mov	r1, r6
 800562e:	4628      	mov	r0, r5
 8005630:	47b8      	blx	r7
 8005632:	3001      	adds	r0, #1
 8005634:	f43f af09 	beq.w	800544a <_printf_float+0xc2>
 8005638:	f04f 0900 	mov.w	r9, #0
 800563c:	f104 0a1a 	add.w	sl, r4, #26
 8005640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005642:	425b      	negs	r3, r3
 8005644:	454b      	cmp	r3, r9
 8005646:	dc01      	bgt.n	800564c <_printf_float+0x2c4>
 8005648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564a:	e792      	b.n	8005572 <_printf_float+0x1ea>
 800564c:	2301      	movs	r3, #1
 800564e:	4652      	mov	r2, sl
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	f43f aef7 	beq.w	800544a <_printf_float+0xc2>
 800565c:	f109 0901 	add.w	r9, r9, #1
 8005660:	e7ee      	b.n	8005640 <_printf_float+0x2b8>
 8005662:	bf00      	nop
 8005664:	7fefffff 	.word	0x7fefffff
 8005668:	08007a24 	.word	0x08007a24
 800566c:	08007a28 	.word	0x08007a28
 8005670:	08007a30 	.word	0x08007a30
 8005674:	08007a2c 	.word	0x08007a2c
 8005678:	08007a34 	.word	0x08007a34
 800567c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800567e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005680:	429a      	cmp	r2, r3
 8005682:	bfa8      	it	ge
 8005684:	461a      	movge	r2, r3
 8005686:	2a00      	cmp	r2, #0
 8005688:	4691      	mov	r9, r2
 800568a:	dc37      	bgt.n	80056fc <_printf_float+0x374>
 800568c:	f04f 0b00 	mov.w	fp, #0
 8005690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005694:	f104 021a 	add.w	r2, r4, #26
 8005698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	eba3 0309 	sub.w	r3, r3, r9
 80056a0:	455b      	cmp	r3, fp
 80056a2:	dc33      	bgt.n	800570c <_printf_float+0x384>
 80056a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a8:	429a      	cmp	r2, r3
 80056aa:	db3b      	blt.n	8005724 <_printf_float+0x39c>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	07da      	lsls	r2, r3, #31
 80056b0:	d438      	bmi.n	8005724 <_printf_float+0x39c>
 80056b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b4:	9a05      	ldr	r2, [sp, #20]
 80056b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056b8:	1a9a      	subs	r2, r3, r2
 80056ba:	eba3 0901 	sub.w	r9, r3, r1
 80056be:	4591      	cmp	r9, r2
 80056c0:	bfa8      	it	ge
 80056c2:	4691      	movge	r9, r2
 80056c4:	f1b9 0f00 	cmp.w	r9, #0
 80056c8:	dc35      	bgt.n	8005736 <_printf_float+0x3ae>
 80056ca:	f04f 0800 	mov.w	r8, #0
 80056ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056d2:	f104 0a1a 	add.w	sl, r4, #26
 80056d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	eba3 0309 	sub.w	r3, r3, r9
 80056e0:	4543      	cmp	r3, r8
 80056e2:	f77f af79 	ble.w	80055d8 <_printf_float+0x250>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f aeaa 	beq.w	800544a <_printf_float+0xc2>
 80056f6:	f108 0801 	add.w	r8, r8, #1
 80056fa:	e7ec      	b.n	80056d6 <_printf_float+0x34e>
 80056fc:	4613      	mov	r3, r2
 80056fe:	4631      	mov	r1, r6
 8005700:	4642      	mov	r2, r8
 8005702:	4628      	mov	r0, r5
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	d1c0      	bne.n	800568c <_printf_float+0x304>
 800570a:	e69e      	b.n	800544a <_printf_float+0xc2>
 800570c:	2301      	movs	r3, #1
 800570e:	4631      	mov	r1, r6
 8005710:	4628      	mov	r0, r5
 8005712:	9205      	str	r2, [sp, #20]
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	f43f ae97 	beq.w	800544a <_printf_float+0xc2>
 800571c:	9a05      	ldr	r2, [sp, #20]
 800571e:	f10b 0b01 	add.w	fp, fp, #1
 8005722:	e7b9      	b.n	8005698 <_printf_float+0x310>
 8005724:	ee18 3a10 	vmov	r3, s16
 8005728:	4652      	mov	r2, sl
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	d1be      	bne.n	80056b2 <_printf_float+0x32a>
 8005734:	e689      	b.n	800544a <_printf_float+0xc2>
 8005736:	9a05      	ldr	r2, [sp, #20]
 8005738:	464b      	mov	r3, r9
 800573a:	4442      	add	r2, r8
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	d1c1      	bne.n	80056ca <_printf_float+0x342>
 8005746:	e680      	b.n	800544a <_printf_float+0xc2>
 8005748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800574a:	2a01      	cmp	r2, #1
 800574c:	dc01      	bgt.n	8005752 <_printf_float+0x3ca>
 800574e:	07db      	lsls	r3, r3, #31
 8005750:	d538      	bpl.n	80057c4 <_printf_float+0x43c>
 8005752:	2301      	movs	r3, #1
 8005754:	4642      	mov	r2, r8
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	f43f ae74 	beq.w	800544a <_printf_float+0xc2>
 8005762:	ee18 3a10 	vmov	r3, s16
 8005766:	4652      	mov	r2, sl
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	f43f ae6b 	beq.w	800544a <_printf_float+0xc2>
 8005774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005778:	2200      	movs	r2, #0
 800577a:	2300      	movs	r3, #0
 800577c:	f7fb f97c 	bl	8000a78 <__aeabi_dcmpeq>
 8005780:	b9d8      	cbnz	r0, 80057ba <_printf_float+0x432>
 8005782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005784:	f108 0201 	add.w	r2, r8, #1
 8005788:	3b01      	subs	r3, #1
 800578a:	4631      	mov	r1, r6
 800578c:	4628      	mov	r0, r5
 800578e:	47b8      	blx	r7
 8005790:	3001      	adds	r0, #1
 8005792:	d10e      	bne.n	80057b2 <_printf_float+0x42a>
 8005794:	e659      	b.n	800544a <_printf_float+0xc2>
 8005796:	2301      	movs	r3, #1
 8005798:	4652      	mov	r2, sl
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f ae52 	beq.w	800544a <_printf_float+0xc2>
 80057a6:	f108 0801 	add.w	r8, r8, #1
 80057aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ac:	3b01      	subs	r3, #1
 80057ae:	4543      	cmp	r3, r8
 80057b0:	dcf1      	bgt.n	8005796 <_printf_float+0x40e>
 80057b2:	464b      	mov	r3, r9
 80057b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057b8:	e6dc      	b.n	8005574 <_printf_float+0x1ec>
 80057ba:	f04f 0800 	mov.w	r8, #0
 80057be:	f104 0a1a 	add.w	sl, r4, #26
 80057c2:	e7f2      	b.n	80057aa <_printf_float+0x422>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4642      	mov	r2, r8
 80057c8:	e7df      	b.n	800578a <_printf_float+0x402>
 80057ca:	2301      	movs	r3, #1
 80057cc:	464a      	mov	r2, r9
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae38 	beq.w	800544a <_printf_float+0xc2>
 80057da:	f108 0801 	add.w	r8, r8, #1
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057e2:	1a5b      	subs	r3, r3, r1
 80057e4:	4543      	cmp	r3, r8
 80057e6:	dcf0      	bgt.n	80057ca <_printf_float+0x442>
 80057e8:	e6fa      	b.n	80055e0 <_printf_float+0x258>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	f104 0919 	add.w	r9, r4, #25
 80057f2:	e7f4      	b.n	80057de <_printf_float+0x456>

080057f4 <_printf_common>:
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	4616      	mov	r6, r2
 80057fa:	4699      	mov	r9, r3
 80057fc:	688a      	ldr	r2, [r1, #8]
 80057fe:	690b      	ldr	r3, [r1, #16]
 8005800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005804:	4293      	cmp	r3, r2
 8005806:	bfb8      	it	lt
 8005808:	4613      	movlt	r3, r2
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005810:	4607      	mov	r7, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b10a      	cbz	r2, 800581a <_printf_common+0x26>
 8005816:	3301      	adds	r3, #1
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	0699      	lsls	r1, r3, #26
 800581e:	bf42      	ittt	mi
 8005820:	6833      	ldrmi	r3, [r6, #0]
 8005822:	3302      	addmi	r3, #2
 8005824:	6033      	strmi	r3, [r6, #0]
 8005826:	6825      	ldr	r5, [r4, #0]
 8005828:	f015 0506 	ands.w	r5, r5, #6
 800582c:	d106      	bne.n	800583c <_printf_common+0x48>
 800582e:	f104 0a19 	add.w	sl, r4, #25
 8005832:	68e3      	ldr	r3, [r4, #12]
 8005834:	6832      	ldr	r2, [r6, #0]
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	42ab      	cmp	r3, r5
 800583a:	dc26      	bgt.n	800588a <_printf_common+0x96>
 800583c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005840:	1e13      	subs	r3, r2, #0
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	bf18      	it	ne
 8005846:	2301      	movne	r3, #1
 8005848:	0692      	lsls	r2, r2, #26
 800584a:	d42b      	bmi.n	80058a4 <_printf_common+0xb0>
 800584c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005850:	4649      	mov	r1, r9
 8005852:	4638      	mov	r0, r7
 8005854:	47c0      	blx	r8
 8005856:	3001      	adds	r0, #1
 8005858:	d01e      	beq.n	8005898 <_printf_common+0xa4>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	68e5      	ldr	r5, [r4, #12]
 800585e:	6832      	ldr	r2, [r6, #0]
 8005860:	f003 0306 	and.w	r3, r3, #6
 8005864:	2b04      	cmp	r3, #4
 8005866:	bf08      	it	eq
 8005868:	1aad      	subeq	r5, r5, r2
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	bf0c      	ite	eq
 8005870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005874:	2500      	movne	r5, #0
 8005876:	4293      	cmp	r3, r2
 8005878:	bfc4      	itt	gt
 800587a:	1a9b      	subgt	r3, r3, r2
 800587c:	18ed      	addgt	r5, r5, r3
 800587e:	2600      	movs	r6, #0
 8005880:	341a      	adds	r4, #26
 8005882:	42b5      	cmp	r5, r6
 8005884:	d11a      	bne.n	80058bc <_printf_common+0xc8>
 8005886:	2000      	movs	r0, #0
 8005888:	e008      	b.n	800589c <_printf_common+0xa8>
 800588a:	2301      	movs	r3, #1
 800588c:	4652      	mov	r2, sl
 800588e:	4649      	mov	r1, r9
 8005890:	4638      	mov	r0, r7
 8005892:	47c0      	blx	r8
 8005894:	3001      	adds	r0, #1
 8005896:	d103      	bne.n	80058a0 <_printf_common+0xac>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7c6      	b.n	8005832 <_printf_common+0x3e>
 80058a4:	18e1      	adds	r1, r4, r3
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	2030      	movs	r0, #48	; 0x30
 80058aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ae:	4422      	add	r2, r4
 80058b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b8:	3302      	adds	r3, #2
 80058ba:	e7c7      	b.n	800584c <_printf_common+0x58>
 80058bc:	2301      	movs	r3, #1
 80058be:	4622      	mov	r2, r4
 80058c0:	4649      	mov	r1, r9
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d0e6      	beq.n	8005898 <_printf_common+0xa4>
 80058ca:	3601      	adds	r6, #1
 80058cc:	e7d9      	b.n	8005882 <_printf_common+0x8e>
	...

080058d0 <_printf_i>:
 80058d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	7e0f      	ldrb	r7, [r1, #24]
 80058d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d8:	2f78      	cmp	r7, #120	; 0x78
 80058da:	4691      	mov	r9, r2
 80058dc:	4680      	mov	r8, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	469a      	mov	sl, r3
 80058e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e6:	d807      	bhi.n	80058f8 <_printf_i+0x28>
 80058e8:	2f62      	cmp	r7, #98	; 0x62
 80058ea:	d80a      	bhi.n	8005902 <_printf_i+0x32>
 80058ec:	2f00      	cmp	r7, #0
 80058ee:	f000 80d8 	beq.w	8005aa2 <_printf_i+0x1d2>
 80058f2:	2f58      	cmp	r7, #88	; 0x58
 80058f4:	f000 80a3 	beq.w	8005a3e <_printf_i+0x16e>
 80058f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005900:	e03a      	b.n	8005978 <_printf_i+0xa8>
 8005902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005906:	2b15      	cmp	r3, #21
 8005908:	d8f6      	bhi.n	80058f8 <_printf_i+0x28>
 800590a:	a101      	add	r1, pc, #4	; (adr r1, 8005910 <_printf_i+0x40>)
 800590c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005910:	08005969 	.word	0x08005969
 8005914:	0800597d 	.word	0x0800597d
 8005918:	080058f9 	.word	0x080058f9
 800591c:	080058f9 	.word	0x080058f9
 8005920:	080058f9 	.word	0x080058f9
 8005924:	080058f9 	.word	0x080058f9
 8005928:	0800597d 	.word	0x0800597d
 800592c:	080058f9 	.word	0x080058f9
 8005930:	080058f9 	.word	0x080058f9
 8005934:	080058f9 	.word	0x080058f9
 8005938:	080058f9 	.word	0x080058f9
 800593c:	08005a89 	.word	0x08005a89
 8005940:	080059ad 	.word	0x080059ad
 8005944:	08005a6b 	.word	0x08005a6b
 8005948:	080058f9 	.word	0x080058f9
 800594c:	080058f9 	.word	0x080058f9
 8005950:	08005aab 	.word	0x08005aab
 8005954:	080058f9 	.word	0x080058f9
 8005958:	080059ad 	.word	0x080059ad
 800595c:	080058f9 	.word	0x080058f9
 8005960:	080058f9 	.word	0x080058f9
 8005964:	08005a73 	.word	0x08005a73
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005978:	2301      	movs	r3, #1
 800597a:	e0a3      	b.n	8005ac4 <_printf_i+0x1f4>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	6829      	ldr	r1, [r5, #0]
 8005980:	0606      	lsls	r6, r0, #24
 8005982:	f101 0304 	add.w	r3, r1, #4
 8005986:	d50a      	bpl.n	800599e <_printf_i+0xce>
 8005988:	680e      	ldr	r6, [r1, #0]
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	2e00      	cmp	r6, #0
 800598e:	da03      	bge.n	8005998 <_printf_i+0xc8>
 8005990:	232d      	movs	r3, #45	; 0x2d
 8005992:	4276      	negs	r6, r6
 8005994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005998:	485e      	ldr	r0, [pc, #376]	; (8005b14 <_printf_i+0x244>)
 800599a:	230a      	movs	r3, #10
 800599c:	e019      	b.n	80059d2 <_printf_i+0x102>
 800599e:	680e      	ldr	r6, [r1, #0]
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059a6:	bf18      	it	ne
 80059a8:	b236      	sxthne	r6, r6
 80059aa:	e7ef      	b.n	800598c <_printf_i+0xbc>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	0601      	lsls	r1, r0, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xec>
 80059b8:	681e      	ldr	r6, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <_printf_i+0xf2>
 80059bc:	0646      	lsls	r6, r0, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xe8>
 80059c0:	881e      	ldrh	r6, [r3, #0]
 80059c2:	4854      	ldr	r0, [pc, #336]	; (8005b14 <_printf_i+0x244>)
 80059c4:	2f6f      	cmp	r7, #111	; 0x6f
 80059c6:	bf0c      	ite	eq
 80059c8:	2308      	moveq	r3, #8
 80059ca:	230a      	movne	r3, #10
 80059cc:	2100      	movs	r1, #0
 80059ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059d2:	6865      	ldr	r5, [r4, #4]
 80059d4:	60a5      	str	r5, [r4, #8]
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	bfa2      	ittt	ge
 80059da:	6821      	ldrge	r1, [r4, #0]
 80059dc:	f021 0104 	bicge.w	r1, r1, #4
 80059e0:	6021      	strge	r1, [r4, #0]
 80059e2:	b90e      	cbnz	r6, 80059e8 <_printf_i+0x118>
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	d04d      	beq.n	8005a84 <_printf_i+0x1b4>
 80059e8:	4615      	mov	r5, r2
 80059ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ee:	fb03 6711 	mls	r7, r3, r1, r6
 80059f2:	5dc7      	ldrb	r7, [r0, r7]
 80059f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f8:	4637      	mov	r7, r6
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	460e      	mov	r6, r1
 80059fe:	d9f4      	bls.n	80059ea <_printf_i+0x11a>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10b      	bne.n	8005a1c <_printf_i+0x14c>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	07de      	lsls	r6, r3, #31
 8005a08:	d508      	bpl.n	8005a1c <_printf_i+0x14c>
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	6861      	ldr	r1, [r4, #4]
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	bfde      	ittt	le
 8005a12:	2330      	movle	r3, #48	; 0x30
 8005a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a1c:	1b52      	subs	r2, r2, r5
 8005a1e:	6122      	str	r2, [r4, #16]
 8005a20:	f8cd a000 	str.w	sl, [sp]
 8005a24:	464b      	mov	r3, r9
 8005a26:	aa03      	add	r2, sp, #12
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f7ff fee2 	bl	80057f4 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d14c      	bne.n	8005ace <_printf_i+0x1fe>
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a38:	b004      	add	sp, #16
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	4835      	ldr	r0, [pc, #212]	; (8005b14 <_printf_i+0x244>)
 8005a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a44:	6829      	ldr	r1, [r5, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a4c:	6029      	str	r1, [r5, #0]
 8005a4e:	061d      	lsls	r5, r3, #24
 8005a50:	d514      	bpl.n	8005a7c <_printf_i+0x1ac>
 8005a52:	07df      	lsls	r7, r3, #31
 8005a54:	bf44      	itt	mi
 8005a56:	f043 0320 	orrmi.w	r3, r3, #32
 8005a5a:	6023      	strmi	r3, [r4, #0]
 8005a5c:	b91e      	cbnz	r6, 8005a66 <_printf_i+0x196>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f023 0320 	bic.w	r3, r3, #32
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	2310      	movs	r3, #16
 8005a68:	e7b0      	b.n	80059cc <_printf_i+0xfc>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f043 0320 	orr.w	r3, r3, #32
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	2378      	movs	r3, #120	; 0x78
 8005a74:	4828      	ldr	r0, [pc, #160]	; (8005b18 <_printf_i+0x248>)
 8005a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a7a:	e7e3      	b.n	8005a44 <_printf_i+0x174>
 8005a7c:	0659      	lsls	r1, r3, #25
 8005a7e:	bf48      	it	mi
 8005a80:	b2b6      	uxthmi	r6, r6
 8005a82:	e7e6      	b.n	8005a52 <_printf_i+0x182>
 8005a84:	4615      	mov	r5, r2
 8005a86:	e7bb      	b.n	8005a00 <_printf_i+0x130>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	6826      	ldr	r6, [r4, #0]
 8005a8c:	6961      	ldr	r1, [r4, #20]
 8005a8e:	1d18      	adds	r0, r3, #4
 8005a90:	6028      	str	r0, [r5, #0]
 8005a92:	0635      	lsls	r5, r6, #24
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0x1cc>
 8005a98:	6019      	str	r1, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <_printf_i+0x1d2>
 8005a9c:	0670      	lsls	r0, r6, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0x1c8>
 8005aa0:	8019      	strh	r1, [r3, #0]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	e7ba      	b.n	8005a20 <_printf_i+0x150>
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	681d      	ldr	r5, [r3, #0]
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7fa fb62 	bl	8000180 <memchr>
 8005abc:	b108      	cbz	r0, 8005ac2 <_printf_i+0x1f2>
 8005abe:	1b40      	subs	r0, r0, r5
 8005ac0:	6060      	str	r0, [r4, #4]
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	6123      	str	r3, [r4, #16]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005acc:	e7a8      	b.n	8005a20 <_printf_i+0x150>
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	47d0      	blx	sl
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d0ab      	beq.n	8005a34 <_printf_i+0x164>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	079b      	lsls	r3, r3, #30
 8005ae0:	d413      	bmi.n	8005b0a <_printf_i+0x23a>
 8005ae2:	68e0      	ldr	r0, [r4, #12]
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	4298      	cmp	r0, r3
 8005ae8:	bfb8      	it	lt
 8005aea:	4618      	movlt	r0, r3
 8005aec:	e7a4      	b.n	8005a38 <_printf_i+0x168>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4632      	mov	r2, r6
 8005af2:	4649      	mov	r1, r9
 8005af4:	4640      	mov	r0, r8
 8005af6:	47d0      	blx	sl
 8005af8:	3001      	adds	r0, #1
 8005afa:	d09b      	beq.n	8005a34 <_printf_i+0x164>
 8005afc:	3501      	adds	r5, #1
 8005afe:	68e3      	ldr	r3, [r4, #12]
 8005b00:	9903      	ldr	r1, [sp, #12]
 8005b02:	1a5b      	subs	r3, r3, r1
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	dcf2      	bgt.n	8005aee <_printf_i+0x21e>
 8005b08:	e7eb      	b.n	8005ae2 <_printf_i+0x212>
 8005b0a:	2500      	movs	r5, #0
 8005b0c:	f104 0619 	add.w	r6, r4, #25
 8005b10:	e7f5      	b.n	8005afe <_printf_i+0x22e>
 8005b12:	bf00      	nop
 8005b14:	08007a36 	.word	0x08007a36
 8005b18:	08007a47 	.word	0x08007a47

08005b1c <iprintf>:
 8005b1c:	b40f      	push	{r0, r1, r2, r3}
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <iprintf+0x2c>)
 8005b20:	b513      	push	{r0, r1, r4, lr}
 8005b22:	681c      	ldr	r4, [r3, #0]
 8005b24:	b124      	cbz	r4, 8005b30 <iprintf+0x14>
 8005b26:	69a3      	ldr	r3, [r4, #24]
 8005b28:	b913      	cbnz	r3, 8005b30 <iprintf+0x14>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f7ff f95c 	bl	8004de8 <__sinit>
 8005b30:	ab05      	add	r3, sp, #20
 8005b32:	9a04      	ldr	r2, [sp, #16]
 8005b34:	68a1      	ldr	r1, [r4, #8]
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f001 fc03 	bl	8007344 <_vfiprintf_r>
 8005b3e:	b002      	add	sp, #8
 8005b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b44:	b004      	add	sp, #16
 8005b46:	4770      	bx	lr
 8005b48:	20000018 	.word	0x20000018

08005b4c <_sbrk_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4d06      	ldr	r5, [pc, #24]	; (8005b68 <_sbrk_r+0x1c>)
 8005b50:	2300      	movs	r3, #0
 8005b52:	4604      	mov	r4, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	602b      	str	r3, [r5, #0]
 8005b58:	f7fb fcb8 	bl	80014cc <_sbrk>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_sbrk_r+0x1a>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_sbrk_r+0x1a>
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	200002a4 	.word	0x200002a4

08005b6c <__sread>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	460c      	mov	r4, r1
 8005b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b74:	f001 fd16 	bl	80075a4 <_read_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	bfab      	itete	ge
 8005b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b80:	181b      	addge	r3, r3, r0
 8005b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b86:	bfac      	ite	ge
 8005b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b8a:	81a3      	strhlt	r3, [r4, #12]
 8005b8c:	bd10      	pop	{r4, pc}

08005b8e <__swrite>:
 8005b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b92:	461f      	mov	r7, r3
 8005b94:	898b      	ldrh	r3, [r1, #12]
 8005b96:	05db      	lsls	r3, r3, #23
 8005b98:	4605      	mov	r5, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4616      	mov	r6, r2
 8005b9e:	d505      	bpl.n	8005bac <__swrite+0x1e>
 8005ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f000 ffd8 	bl	8006b5c <_lseek_r>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	4632      	mov	r2, r6
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc2:	f000 b869 	b.w	8005c98 <_write_r>

08005bc6 <__sseek>:
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	460c      	mov	r4, r1
 8005bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bce:	f000 ffc5 	bl	8006b5c <_lseek_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	bf15      	itete	ne
 8005bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005be2:	81a3      	strheq	r3, [r4, #12]
 8005be4:	bf18      	it	ne
 8005be6:	81a3      	strhne	r3, [r4, #12]
 8005be8:	bd10      	pop	{r4, pc}

08005bea <__sclose>:
 8005bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bee:	f000 b8f1 	b.w	8005dd4 <_close_r>
	...

08005bf4 <__swbuf_r>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	460e      	mov	r6, r1
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	b118      	cbz	r0, 8005c06 <__swbuf_r+0x12>
 8005bfe:	6983      	ldr	r3, [r0, #24]
 8005c00:	b90b      	cbnz	r3, 8005c06 <__swbuf_r+0x12>
 8005c02:	f7ff f8f1 	bl	8004de8 <__sinit>
 8005c06:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <__swbuf_r+0x98>)
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	d12b      	bne.n	8005c64 <__swbuf_r+0x70>
 8005c0c:	686c      	ldr	r4, [r5, #4]
 8005c0e:	69a3      	ldr	r3, [r4, #24]
 8005c10:	60a3      	str	r3, [r4, #8]
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	071a      	lsls	r2, r3, #28
 8005c16:	d52f      	bpl.n	8005c78 <__swbuf_r+0x84>
 8005c18:	6923      	ldr	r3, [r4, #16]
 8005c1a:	b36b      	cbz	r3, 8005c78 <__swbuf_r+0x84>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	1ac0      	subs	r0, r0, r3
 8005c22:	6963      	ldr	r3, [r4, #20]
 8005c24:	b2f6      	uxtb	r6, r6
 8005c26:	4283      	cmp	r3, r0
 8005c28:	4637      	mov	r7, r6
 8005c2a:	dc04      	bgt.n	8005c36 <__swbuf_r+0x42>
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f7ff f846 	bl	8004cc0 <_fflush_r>
 8005c34:	bb30      	cbnz	r0, 8005c84 <__swbuf_r+0x90>
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60a3      	str	r3, [r4, #8]
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	6022      	str	r2, [r4, #0]
 8005c42:	701e      	strb	r6, [r3, #0]
 8005c44:	6963      	ldr	r3, [r4, #20]
 8005c46:	3001      	adds	r0, #1
 8005c48:	4283      	cmp	r3, r0
 8005c4a:	d004      	beq.n	8005c56 <__swbuf_r+0x62>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	07db      	lsls	r3, r3, #31
 8005c50:	d506      	bpl.n	8005c60 <__swbuf_r+0x6c>
 8005c52:	2e0a      	cmp	r6, #10
 8005c54:	d104      	bne.n	8005c60 <__swbuf_r+0x6c>
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f7ff f831 	bl	8004cc0 <_fflush_r>
 8005c5e:	b988      	cbnz	r0, 8005c84 <__swbuf_r+0x90>
 8005c60:	4638      	mov	r0, r7
 8005c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c64:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <__swbuf_r+0x9c>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d101      	bne.n	8005c6e <__swbuf_r+0x7a>
 8005c6a:	68ac      	ldr	r4, [r5, #8]
 8005c6c:	e7cf      	b.n	8005c0e <__swbuf_r+0x1a>
 8005c6e:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <__swbuf_r+0xa0>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	bf08      	it	eq
 8005c74:	68ec      	ldreq	r4, [r5, #12]
 8005c76:	e7ca      	b.n	8005c0e <__swbuf_r+0x1a>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f81e 	bl	8005cbc <__swsetup_r>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d0cb      	beq.n	8005c1c <__swbuf_r+0x28>
 8005c84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c88:	e7ea      	b.n	8005c60 <__swbuf_r+0x6c>
 8005c8a:	bf00      	nop
 8005c8c:	080079e0 	.word	0x080079e0
 8005c90:	08007a00 	.word	0x08007a00
 8005c94:	080079c0 	.word	0x080079c0

08005c98 <_write_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4d07      	ldr	r5, [pc, #28]	; (8005cb8 <_write_r+0x20>)
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	602a      	str	r2, [r5, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f7fb fbc0 	bl	800142c <_write>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_write_r+0x1e>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_write_r+0x1e>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	200002a4 	.word	0x200002a4

08005cbc <__swsetup_r>:
 8005cbc:	4b32      	ldr	r3, [pc, #200]	; (8005d88 <__swsetup_r+0xcc>)
 8005cbe:	b570      	push	{r4, r5, r6, lr}
 8005cc0:	681d      	ldr	r5, [r3, #0]
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	b125      	cbz	r5, 8005cd2 <__swsetup_r+0x16>
 8005cc8:	69ab      	ldr	r3, [r5, #24]
 8005cca:	b913      	cbnz	r3, 8005cd2 <__swsetup_r+0x16>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f7ff f88b 	bl	8004de8 <__sinit>
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <__swsetup_r+0xd0>)
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	d10f      	bne.n	8005cf8 <__swsetup_r+0x3c>
 8005cd8:	686c      	ldr	r4, [r5, #4]
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ce0:	0719      	lsls	r1, r3, #28
 8005ce2:	d42c      	bmi.n	8005d3e <__swsetup_r+0x82>
 8005ce4:	06dd      	lsls	r5, r3, #27
 8005ce6:	d411      	bmi.n	8005d0c <__swsetup_r+0x50>
 8005ce8:	2309      	movs	r3, #9
 8005cea:	6033      	str	r3, [r6, #0]
 8005cec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf6:	e03e      	b.n	8005d76 <__swsetup_r+0xba>
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <__swsetup_r+0xd4>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d101      	bne.n	8005d02 <__swsetup_r+0x46>
 8005cfe:	68ac      	ldr	r4, [r5, #8]
 8005d00:	e7eb      	b.n	8005cda <__swsetup_r+0x1e>
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <__swsetup_r+0xd8>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	bf08      	it	eq
 8005d08:	68ec      	ldreq	r4, [r5, #12]
 8005d0a:	e7e6      	b.n	8005cda <__swsetup_r+0x1e>
 8005d0c:	0758      	lsls	r0, r3, #29
 8005d0e:	d512      	bpl.n	8005d36 <__swsetup_r+0x7a>
 8005d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d12:	b141      	cbz	r1, 8005d26 <__swsetup_r+0x6a>
 8005d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	d002      	beq.n	8005d22 <__swsetup_r+0x66>
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7ff f9b3 	bl	8005088 <_free_r>
 8005d22:	2300      	movs	r3, #0
 8005d24:	6363      	str	r3, [r4, #52]	; 0x34
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6063      	str	r3, [r4, #4]
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	f043 0308 	orr.w	r3, r3, #8
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	b94b      	cbnz	r3, 8005d56 <__swsetup_r+0x9a>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4c:	d003      	beq.n	8005d56 <__swsetup_r+0x9a>
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4630      	mov	r0, r6
 8005d52:	f7ff f933 	bl	8004fbc <__smakebuf_r>
 8005d56:	89a0      	ldrh	r0, [r4, #12]
 8005d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d5c:	f010 0301 	ands.w	r3, r0, #1
 8005d60:	d00a      	beq.n	8005d78 <__swsetup_r+0xbc>
 8005d62:	2300      	movs	r3, #0
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	6963      	ldr	r3, [r4, #20]
 8005d68:	425b      	negs	r3, r3
 8005d6a:	61a3      	str	r3, [r4, #24]
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	b943      	cbnz	r3, 8005d82 <__swsetup_r+0xc6>
 8005d70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d74:	d1ba      	bne.n	8005cec <__swsetup_r+0x30>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	0781      	lsls	r1, r0, #30
 8005d7a:	bf58      	it	pl
 8005d7c:	6963      	ldrpl	r3, [r4, #20]
 8005d7e:	60a3      	str	r3, [r4, #8]
 8005d80:	e7f4      	b.n	8005d6c <__swsetup_r+0xb0>
 8005d82:	2000      	movs	r0, #0
 8005d84:	e7f7      	b.n	8005d76 <__swsetup_r+0xba>
 8005d86:	bf00      	nop
 8005d88:	20000018 	.word	0x20000018
 8005d8c:	080079e0 	.word	0x080079e0
 8005d90:	08007a00 	.word	0x08007a00
 8005d94:	080079c0 	.word	0x080079c0

08005d98 <__assert_func>:
 8005d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d9a:	4614      	mov	r4, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <__assert_func+0x2c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4605      	mov	r5, r0
 8005da4:	68d8      	ldr	r0, [r3, #12]
 8005da6:	b14c      	cbz	r4, 8005dbc <__assert_func+0x24>
 8005da8:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <__assert_func+0x30>)
 8005daa:	9100      	str	r1, [sp, #0]
 8005dac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005db0:	4906      	ldr	r1, [pc, #24]	; (8005dcc <__assert_func+0x34>)
 8005db2:	462b      	mov	r3, r5
 8005db4:	f000 fe9a 	bl	8006aec <fiprintf>
 8005db8:	f001 fc13 	bl	80075e2 <abort>
 8005dbc:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <__assert_func+0x38>)
 8005dbe:	461c      	mov	r4, r3
 8005dc0:	e7f3      	b.n	8005daa <__assert_func+0x12>
 8005dc2:	bf00      	nop
 8005dc4:	20000018 	.word	0x20000018
 8005dc8:	08007a58 	.word	0x08007a58
 8005dcc:	08007a65 	.word	0x08007a65
 8005dd0:	08007a93 	.word	0x08007a93

08005dd4 <_close_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d06      	ldr	r5, [pc, #24]	; (8005df0 <_close_r+0x1c>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fb fb40 	bl	8001464 <_close>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_close_r+0x1a>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_close_r+0x1a>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	200002a4 	.word	0x200002a4

08005df4 <quorem>:
 8005df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	6903      	ldr	r3, [r0, #16]
 8005dfa:	690c      	ldr	r4, [r1, #16]
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	4607      	mov	r7, r0
 8005e00:	f2c0 8081 	blt.w	8005f06 <quorem+0x112>
 8005e04:	3c01      	subs	r4, #1
 8005e06:	f101 0814 	add.w	r8, r1, #20
 8005e0a:	f100 0514 	add.w	r5, r0, #20
 8005e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e28:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e2c:	d331      	bcc.n	8005e92 <quorem+0x9e>
 8005e2e:	f04f 0e00 	mov.w	lr, #0
 8005e32:	4640      	mov	r0, r8
 8005e34:	46ac      	mov	ip, r5
 8005e36:	46f2      	mov	sl, lr
 8005e38:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e3c:	b293      	uxth	r3, r2
 8005e3e:	fb06 e303 	mla	r3, r6, r3, lr
 8005e42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	ebaa 0303 	sub.w	r3, sl, r3
 8005e4c:	f8dc a000 	ldr.w	sl, [ip]
 8005e50:	0c12      	lsrs	r2, r2, #16
 8005e52:	fa13 f38a 	uxtah	r3, r3, sl
 8005e56:	fb06 e202 	mla	r2, r6, r2, lr
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	9b00      	ldr	r3, [sp, #0]
 8005e5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e62:	b292      	uxth	r2, r2
 8005e64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e70:	4581      	cmp	r9, r0
 8005e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e76:	f84c 3b04 	str.w	r3, [ip], #4
 8005e7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e7e:	d2db      	bcs.n	8005e38 <quorem+0x44>
 8005e80:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e84:	b92b      	cbnz	r3, 8005e92 <quorem+0x9e>
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	429d      	cmp	r5, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	d32e      	bcc.n	8005eee <quorem+0xfa>
 8005e90:	613c      	str	r4, [r7, #16]
 8005e92:	4638      	mov	r0, r7
 8005e94:	f001 f914 	bl	80070c0 <__mcmp>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	db24      	blt.n	8005ee6 <quorem+0xf2>
 8005e9c:	3601      	adds	r6, #1
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f04f 0c00 	mov.w	ip, #0
 8005ea4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ea8:	f8d0 e000 	ldr.w	lr, [r0]
 8005eac:	b293      	uxth	r3, r2
 8005eae:	ebac 0303 	sub.w	r3, ip, r3
 8005eb2:	0c12      	lsrs	r2, r2, #16
 8005eb4:	fa13 f38e 	uxtah	r3, r3, lr
 8005eb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ebc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ec6:	45c1      	cmp	r9, r8
 8005ec8:	f840 3b04 	str.w	r3, [r0], #4
 8005ecc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ed0:	d2e8      	bcs.n	8005ea4 <quorem+0xb0>
 8005ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eda:	b922      	cbnz	r2, 8005ee6 <quorem+0xf2>
 8005edc:	3b04      	subs	r3, #4
 8005ede:	429d      	cmp	r5, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	d30a      	bcc.n	8005efa <quorem+0x106>
 8005ee4:	613c      	str	r4, [r7, #16]
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	b003      	add	sp, #12
 8005eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	3b04      	subs	r3, #4
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	d1cc      	bne.n	8005e90 <quorem+0x9c>
 8005ef6:	3c01      	subs	r4, #1
 8005ef8:	e7c7      	b.n	8005e8a <quorem+0x96>
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	3b04      	subs	r3, #4
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	d1f0      	bne.n	8005ee4 <quorem+0xf0>
 8005f02:	3c01      	subs	r4, #1
 8005f04:	e7eb      	b.n	8005ede <quorem+0xea>
 8005f06:	2000      	movs	r0, #0
 8005f08:	e7ee      	b.n	8005ee8 <quorem+0xf4>
 8005f0a:	0000      	movs	r0, r0
 8005f0c:	0000      	movs	r0, r0
	...

08005f10 <_dtoa_r>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	ed2d 8b04 	vpush	{d8-d9}
 8005f18:	ec57 6b10 	vmov	r6, r7, d0
 8005f1c:	b093      	sub	sp, #76	; 0x4c
 8005f1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f24:	9106      	str	r1, [sp, #24]
 8005f26:	ee10 aa10 	vmov	sl, s0
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f30:	46bb      	mov	fp, r7
 8005f32:	b975      	cbnz	r5, 8005f52 <_dtoa_r+0x42>
 8005f34:	2010      	movs	r0, #16
 8005f36:	f7ff f881 	bl	800503c <malloc>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	6260      	str	r0, [r4, #36]	; 0x24
 8005f3e:	b920      	cbnz	r0, 8005f4a <_dtoa_r+0x3a>
 8005f40:	4ba7      	ldr	r3, [pc, #668]	; (80061e0 <_dtoa_r+0x2d0>)
 8005f42:	21ea      	movs	r1, #234	; 0xea
 8005f44:	48a7      	ldr	r0, [pc, #668]	; (80061e4 <_dtoa_r+0x2d4>)
 8005f46:	f7ff ff27 	bl	8005d98 <__assert_func>
 8005f4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f4e:	6005      	str	r5, [r0, #0]
 8005f50:	60c5      	str	r5, [r0, #12]
 8005f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f54:	6819      	ldr	r1, [r3, #0]
 8005f56:	b151      	cbz	r1, 8005f6e <_dtoa_r+0x5e>
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	604a      	str	r2, [r1, #4]
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4093      	lsls	r3, r2
 8005f60:	608b      	str	r3, [r1, #8]
 8005f62:	4620      	mov	r0, r4
 8005f64:	f000 fe6a 	bl	8006c3c <_Bfree>
 8005f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	1e3b      	subs	r3, r7, #0
 8005f70:	bfaa      	itet	ge
 8005f72:	2300      	movge	r3, #0
 8005f74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f78:	f8c8 3000 	strge.w	r3, [r8]
 8005f7c:	4b9a      	ldr	r3, [pc, #616]	; (80061e8 <_dtoa_r+0x2d8>)
 8005f7e:	bfbc      	itt	lt
 8005f80:	2201      	movlt	r2, #1
 8005f82:	f8c8 2000 	strlt.w	r2, [r8]
 8005f86:	ea33 030b 	bics.w	r3, r3, fp
 8005f8a:	d11b      	bne.n	8005fc4 <_dtoa_r+0xb4>
 8005f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f98:	4333      	orrs	r3, r6
 8005f9a:	f000 8592 	beq.w	8006ac2 <_dtoa_r+0xbb2>
 8005f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fa0:	b963      	cbnz	r3, 8005fbc <_dtoa_r+0xac>
 8005fa2:	4b92      	ldr	r3, [pc, #584]	; (80061ec <_dtoa_r+0x2dc>)
 8005fa4:	e022      	b.n	8005fec <_dtoa_r+0xdc>
 8005fa6:	4b92      	ldr	r3, [pc, #584]	; (80061f0 <_dtoa_r+0x2e0>)
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	3308      	adds	r3, #8
 8005fac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	9801      	ldr	r0, [sp, #4]
 8005fb2:	b013      	add	sp, #76	; 0x4c
 8005fb4:	ecbd 8b04 	vpop	{d8-d9}
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	4b8b      	ldr	r3, [pc, #556]	; (80061ec <_dtoa_r+0x2dc>)
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	3303      	adds	r3, #3
 8005fc2:	e7f3      	b.n	8005fac <_dtoa_r+0x9c>
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	4650      	mov	r0, sl
 8005fca:	4659      	mov	r1, fp
 8005fcc:	f7fa fd54 	bl	8000a78 <__aeabi_dcmpeq>
 8005fd0:	ec4b ab19 	vmov	d9, sl, fp
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	b158      	cbz	r0, 8005ff0 <_dtoa_r+0xe0>
 8005fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fda:	2301      	movs	r3, #1
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 856b 	beq.w	8006abc <_dtoa_r+0xbac>
 8005fe6:	4883      	ldr	r0, [pc, #524]	; (80061f4 <_dtoa_r+0x2e4>)
 8005fe8:	6018      	str	r0, [r3, #0]
 8005fea:	1e43      	subs	r3, r0, #1
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	e7df      	b.n	8005fb0 <_dtoa_r+0xa0>
 8005ff0:	ec4b ab10 	vmov	d0, sl, fp
 8005ff4:	aa10      	add	r2, sp, #64	; 0x40
 8005ff6:	a911      	add	r1, sp, #68	; 0x44
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f001 f907 	bl	800720c <__d2b>
 8005ffe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006002:	ee08 0a10 	vmov	s16, r0
 8006006:	2d00      	cmp	r5, #0
 8006008:	f000 8084 	beq.w	8006114 <_dtoa_r+0x204>
 800600c:	ee19 3a90 	vmov	r3, s19
 8006010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006014:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006018:	4656      	mov	r6, sl
 800601a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800601e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006022:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006026:	4b74      	ldr	r3, [pc, #464]	; (80061f8 <_dtoa_r+0x2e8>)
 8006028:	2200      	movs	r2, #0
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa f903 	bl	8000238 <__aeabi_dsub>
 8006032:	a365      	add	r3, pc, #404	; (adr r3, 80061c8 <_dtoa_r+0x2b8>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa fab6 	bl	80005a8 <__aeabi_dmul>
 800603c:	a364      	add	r3, pc, #400	; (adr r3, 80061d0 <_dtoa_r+0x2c0>)
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	f7fa f8fb 	bl	800023c <__adddf3>
 8006046:	4606      	mov	r6, r0
 8006048:	4628      	mov	r0, r5
 800604a:	460f      	mov	r7, r1
 800604c:	f7fa fa42 	bl	80004d4 <__aeabi_i2d>
 8006050:	a361      	add	r3, pc, #388	; (adr r3, 80061d8 <_dtoa_r+0x2c8>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f7fa faa7 	bl	80005a8 <__aeabi_dmul>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4630      	mov	r0, r6
 8006060:	4639      	mov	r1, r7
 8006062:	f7fa f8eb 	bl	800023c <__adddf3>
 8006066:	4606      	mov	r6, r0
 8006068:	460f      	mov	r7, r1
 800606a:	f7fa fd4d 	bl	8000b08 <__aeabi_d2iz>
 800606e:	2200      	movs	r2, #0
 8006070:	9000      	str	r0, [sp, #0]
 8006072:	2300      	movs	r3, #0
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa fd08 	bl	8000a8c <__aeabi_dcmplt>
 800607c:	b150      	cbz	r0, 8006094 <_dtoa_r+0x184>
 800607e:	9800      	ldr	r0, [sp, #0]
 8006080:	f7fa fa28 	bl	80004d4 <__aeabi_i2d>
 8006084:	4632      	mov	r2, r6
 8006086:	463b      	mov	r3, r7
 8006088:	f7fa fcf6 	bl	8000a78 <__aeabi_dcmpeq>
 800608c:	b910      	cbnz	r0, 8006094 <_dtoa_r+0x184>
 800608e:	9b00      	ldr	r3, [sp, #0]
 8006090:	3b01      	subs	r3, #1
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	9b00      	ldr	r3, [sp, #0]
 8006096:	2b16      	cmp	r3, #22
 8006098:	d85a      	bhi.n	8006150 <_dtoa_r+0x240>
 800609a:	9a00      	ldr	r2, [sp, #0]
 800609c:	4b57      	ldr	r3, [pc, #348]	; (80061fc <_dtoa_r+0x2ec>)
 800609e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	ec51 0b19 	vmov	r0, r1, d9
 80060aa:	f7fa fcef 	bl	8000a8c <__aeabi_dcmplt>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d050      	beq.n	8006154 <_dtoa_r+0x244>
 80060b2:	9b00      	ldr	r3, [sp, #0]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	2300      	movs	r3, #0
 80060ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80060bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060be:	1b5d      	subs	r5, r3, r5
 80060c0:	1e6b      	subs	r3, r5, #1
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	bf45      	ittet	mi
 80060c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80060ca:	9304      	strmi	r3, [sp, #16]
 80060cc:	2300      	movpl	r3, #0
 80060ce:	2300      	movmi	r3, #0
 80060d0:	bf4c      	ite	mi
 80060d2:	9305      	strmi	r3, [sp, #20]
 80060d4:	9304      	strpl	r3, [sp, #16]
 80060d6:	9b00      	ldr	r3, [sp, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	db3d      	blt.n	8006158 <_dtoa_r+0x248>
 80060dc:	9b05      	ldr	r3, [sp, #20]
 80060de:	9a00      	ldr	r2, [sp, #0]
 80060e0:	920a      	str	r2, [sp, #40]	; 0x28
 80060e2:	4413      	add	r3, r2
 80060e4:	9305      	str	r3, [sp, #20]
 80060e6:	2300      	movs	r3, #0
 80060e8:	9307      	str	r3, [sp, #28]
 80060ea:	9b06      	ldr	r3, [sp, #24]
 80060ec:	2b09      	cmp	r3, #9
 80060ee:	f200 8089 	bhi.w	8006204 <_dtoa_r+0x2f4>
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	bfc4      	itt	gt
 80060f6:	3b04      	subgt	r3, #4
 80060f8:	9306      	strgt	r3, [sp, #24]
 80060fa:	9b06      	ldr	r3, [sp, #24]
 80060fc:	f1a3 0302 	sub.w	r3, r3, #2
 8006100:	bfcc      	ite	gt
 8006102:	2500      	movgt	r5, #0
 8006104:	2501      	movle	r5, #1
 8006106:	2b03      	cmp	r3, #3
 8006108:	f200 8087 	bhi.w	800621a <_dtoa_r+0x30a>
 800610c:	e8df f003 	tbb	[pc, r3]
 8006110:	59383a2d 	.word	0x59383a2d
 8006114:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006118:	441d      	add	r5, r3
 800611a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800611e:	2b20      	cmp	r3, #32
 8006120:	bfc1      	itttt	gt
 8006122:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006126:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800612a:	fa0b f303 	lslgt.w	r3, fp, r3
 800612e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006132:	bfda      	itte	le
 8006134:	f1c3 0320 	rsble	r3, r3, #32
 8006138:	fa06 f003 	lslle.w	r0, r6, r3
 800613c:	4318      	orrgt	r0, r3
 800613e:	f7fa f9b9 	bl	80004b4 <__aeabi_ui2d>
 8006142:	2301      	movs	r3, #1
 8006144:	4606      	mov	r6, r0
 8006146:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800614a:	3d01      	subs	r5, #1
 800614c:	930e      	str	r3, [sp, #56]	; 0x38
 800614e:	e76a      	b.n	8006026 <_dtoa_r+0x116>
 8006150:	2301      	movs	r3, #1
 8006152:	e7b2      	b.n	80060ba <_dtoa_r+0x1aa>
 8006154:	900b      	str	r0, [sp, #44]	; 0x2c
 8006156:	e7b1      	b.n	80060bc <_dtoa_r+0x1ac>
 8006158:	9b04      	ldr	r3, [sp, #16]
 800615a:	9a00      	ldr	r2, [sp, #0]
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	9304      	str	r3, [sp, #16]
 8006160:	4253      	negs	r3, r2
 8006162:	9307      	str	r3, [sp, #28]
 8006164:	2300      	movs	r3, #0
 8006166:	930a      	str	r3, [sp, #40]	; 0x28
 8006168:	e7bf      	b.n	80060ea <_dtoa_r+0x1da>
 800616a:	2300      	movs	r3, #0
 800616c:	9308      	str	r3, [sp, #32]
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	dc55      	bgt.n	8006220 <_dtoa_r+0x310>
 8006174:	2301      	movs	r3, #1
 8006176:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800617a:	461a      	mov	r2, r3
 800617c:	9209      	str	r2, [sp, #36]	; 0x24
 800617e:	e00c      	b.n	800619a <_dtoa_r+0x28a>
 8006180:	2301      	movs	r3, #1
 8006182:	e7f3      	b.n	800616c <_dtoa_r+0x25c>
 8006184:	2300      	movs	r3, #0
 8006186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006188:	9308      	str	r3, [sp, #32]
 800618a:	9b00      	ldr	r3, [sp, #0]
 800618c:	4413      	add	r3, r2
 800618e:	9302      	str	r3, [sp, #8]
 8006190:	3301      	adds	r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	9303      	str	r3, [sp, #12]
 8006196:	bfb8      	it	lt
 8006198:	2301      	movlt	r3, #1
 800619a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800619c:	2200      	movs	r2, #0
 800619e:	6042      	str	r2, [r0, #4]
 80061a0:	2204      	movs	r2, #4
 80061a2:	f102 0614 	add.w	r6, r2, #20
 80061a6:	429e      	cmp	r6, r3
 80061a8:	6841      	ldr	r1, [r0, #4]
 80061aa:	d93d      	bls.n	8006228 <_dtoa_r+0x318>
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fd05 	bl	8006bbc <_Balloc>
 80061b2:	9001      	str	r0, [sp, #4]
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d13b      	bne.n	8006230 <_dtoa_r+0x320>
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <_dtoa_r+0x2f0>)
 80061ba:	4602      	mov	r2, r0
 80061bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061c0:	e6c0      	b.n	8005f44 <_dtoa_r+0x34>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e7df      	b.n	8006186 <_dtoa_r+0x276>
 80061c6:	bf00      	nop
 80061c8:	636f4361 	.word	0x636f4361
 80061cc:	3fd287a7 	.word	0x3fd287a7
 80061d0:	8b60c8b3 	.word	0x8b60c8b3
 80061d4:	3fc68a28 	.word	0x3fc68a28
 80061d8:	509f79fb 	.word	0x509f79fb
 80061dc:	3fd34413 	.word	0x3fd34413
 80061e0:	08007ba2 	.word	0x08007ba2
 80061e4:	08007bb9 	.word	0x08007bb9
 80061e8:	7ff00000 	.word	0x7ff00000
 80061ec:	08007b9e 	.word	0x08007b9e
 80061f0:	08007b95 	.word	0x08007b95
 80061f4:	08007a35 	.word	0x08007a35
 80061f8:	3ff80000 	.word	0x3ff80000
 80061fc:	08007cb8 	.word	0x08007cb8
 8006200:	08007c14 	.word	0x08007c14
 8006204:	2501      	movs	r5, #1
 8006206:	2300      	movs	r3, #0
 8006208:	9306      	str	r3, [sp, #24]
 800620a:	9508      	str	r5, [sp, #32]
 800620c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006210:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006214:	2200      	movs	r2, #0
 8006216:	2312      	movs	r3, #18
 8006218:	e7b0      	b.n	800617c <_dtoa_r+0x26c>
 800621a:	2301      	movs	r3, #1
 800621c:	9308      	str	r3, [sp, #32]
 800621e:	e7f5      	b.n	800620c <_dtoa_r+0x2fc>
 8006220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006222:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006226:	e7b8      	b.n	800619a <_dtoa_r+0x28a>
 8006228:	3101      	adds	r1, #1
 800622a:	6041      	str	r1, [r0, #4]
 800622c:	0052      	lsls	r2, r2, #1
 800622e:	e7b8      	b.n	80061a2 <_dtoa_r+0x292>
 8006230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006232:	9a01      	ldr	r2, [sp, #4]
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	2b0e      	cmp	r3, #14
 800623a:	f200 809d 	bhi.w	8006378 <_dtoa_r+0x468>
 800623e:	2d00      	cmp	r5, #0
 8006240:	f000 809a 	beq.w	8006378 <_dtoa_r+0x468>
 8006244:	9b00      	ldr	r3, [sp, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	dd32      	ble.n	80062b0 <_dtoa_r+0x3a0>
 800624a:	4ab7      	ldr	r2, [pc, #732]	; (8006528 <_dtoa_r+0x618>)
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006254:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006258:	9b00      	ldr	r3, [sp, #0]
 800625a:	05d8      	lsls	r0, r3, #23
 800625c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006260:	d516      	bpl.n	8006290 <_dtoa_r+0x380>
 8006262:	4bb2      	ldr	r3, [pc, #712]	; (800652c <_dtoa_r+0x61c>)
 8006264:	ec51 0b19 	vmov	r0, r1, d9
 8006268:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800626c:	f7fa fac6 	bl	80007fc <__aeabi_ddiv>
 8006270:	f007 070f 	and.w	r7, r7, #15
 8006274:	4682      	mov	sl, r0
 8006276:	468b      	mov	fp, r1
 8006278:	2503      	movs	r5, #3
 800627a:	4eac      	ldr	r6, [pc, #688]	; (800652c <_dtoa_r+0x61c>)
 800627c:	b957      	cbnz	r7, 8006294 <_dtoa_r+0x384>
 800627e:	4642      	mov	r2, r8
 8006280:	464b      	mov	r3, r9
 8006282:	4650      	mov	r0, sl
 8006284:	4659      	mov	r1, fp
 8006286:	f7fa fab9 	bl	80007fc <__aeabi_ddiv>
 800628a:	4682      	mov	sl, r0
 800628c:	468b      	mov	fp, r1
 800628e:	e028      	b.n	80062e2 <_dtoa_r+0x3d2>
 8006290:	2502      	movs	r5, #2
 8006292:	e7f2      	b.n	800627a <_dtoa_r+0x36a>
 8006294:	07f9      	lsls	r1, r7, #31
 8006296:	d508      	bpl.n	80062aa <_dtoa_r+0x39a>
 8006298:	4640      	mov	r0, r8
 800629a:	4649      	mov	r1, r9
 800629c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062a0:	f7fa f982 	bl	80005a8 <__aeabi_dmul>
 80062a4:	3501      	adds	r5, #1
 80062a6:	4680      	mov	r8, r0
 80062a8:	4689      	mov	r9, r1
 80062aa:	107f      	asrs	r7, r7, #1
 80062ac:	3608      	adds	r6, #8
 80062ae:	e7e5      	b.n	800627c <_dtoa_r+0x36c>
 80062b0:	f000 809b 	beq.w	80063ea <_dtoa_r+0x4da>
 80062b4:	9b00      	ldr	r3, [sp, #0]
 80062b6:	4f9d      	ldr	r7, [pc, #628]	; (800652c <_dtoa_r+0x61c>)
 80062b8:	425e      	negs	r6, r3
 80062ba:	4b9b      	ldr	r3, [pc, #620]	; (8006528 <_dtoa_r+0x618>)
 80062bc:	f006 020f 	and.w	r2, r6, #15
 80062c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	ec51 0b19 	vmov	r0, r1, d9
 80062cc:	f7fa f96c 	bl	80005a8 <__aeabi_dmul>
 80062d0:	1136      	asrs	r6, r6, #4
 80062d2:	4682      	mov	sl, r0
 80062d4:	468b      	mov	fp, r1
 80062d6:	2300      	movs	r3, #0
 80062d8:	2502      	movs	r5, #2
 80062da:	2e00      	cmp	r6, #0
 80062dc:	d17a      	bne.n	80063d4 <_dtoa_r+0x4c4>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1d3      	bne.n	800628a <_dtoa_r+0x37a>
 80062e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8082 	beq.w	80063ee <_dtoa_r+0x4de>
 80062ea:	4b91      	ldr	r3, [pc, #580]	; (8006530 <_dtoa_r+0x620>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	4650      	mov	r0, sl
 80062f0:	4659      	mov	r1, fp
 80062f2:	f7fa fbcb 	bl	8000a8c <__aeabi_dcmplt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d079      	beq.n	80063ee <_dtoa_r+0x4de>
 80062fa:	9b03      	ldr	r3, [sp, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d076      	beq.n	80063ee <_dtoa_r+0x4de>
 8006300:	9b02      	ldr	r3, [sp, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dd36      	ble.n	8006374 <_dtoa_r+0x464>
 8006306:	9b00      	ldr	r3, [sp, #0]
 8006308:	4650      	mov	r0, sl
 800630a:	4659      	mov	r1, fp
 800630c:	1e5f      	subs	r7, r3, #1
 800630e:	2200      	movs	r2, #0
 8006310:	4b88      	ldr	r3, [pc, #544]	; (8006534 <_dtoa_r+0x624>)
 8006312:	f7fa f949 	bl	80005a8 <__aeabi_dmul>
 8006316:	9e02      	ldr	r6, [sp, #8]
 8006318:	4682      	mov	sl, r0
 800631a:	468b      	mov	fp, r1
 800631c:	3501      	adds	r5, #1
 800631e:	4628      	mov	r0, r5
 8006320:	f7fa f8d8 	bl	80004d4 <__aeabi_i2d>
 8006324:	4652      	mov	r2, sl
 8006326:	465b      	mov	r3, fp
 8006328:	f7fa f93e 	bl	80005a8 <__aeabi_dmul>
 800632c:	4b82      	ldr	r3, [pc, #520]	; (8006538 <_dtoa_r+0x628>)
 800632e:	2200      	movs	r2, #0
 8006330:	f7f9 ff84 	bl	800023c <__adddf3>
 8006334:	46d0      	mov	r8, sl
 8006336:	46d9      	mov	r9, fp
 8006338:	4682      	mov	sl, r0
 800633a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800633e:	2e00      	cmp	r6, #0
 8006340:	d158      	bne.n	80063f4 <_dtoa_r+0x4e4>
 8006342:	4b7e      	ldr	r3, [pc, #504]	; (800653c <_dtoa_r+0x62c>)
 8006344:	2200      	movs	r2, #0
 8006346:	4640      	mov	r0, r8
 8006348:	4649      	mov	r1, r9
 800634a:	f7f9 ff75 	bl	8000238 <__aeabi_dsub>
 800634e:	4652      	mov	r2, sl
 8006350:	465b      	mov	r3, fp
 8006352:	4680      	mov	r8, r0
 8006354:	4689      	mov	r9, r1
 8006356:	f7fa fbb7 	bl	8000ac8 <__aeabi_dcmpgt>
 800635a:	2800      	cmp	r0, #0
 800635c:	f040 8295 	bne.w	800688a <_dtoa_r+0x97a>
 8006360:	4652      	mov	r2, sl
 8006362:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006366:	4640      	mov	r0, r8
 8006368:	4649      	mov	r1, r9
 800636a:	f7fa fb8f 	bl	8000a8c <__aeabi_dcmplt>
 800636e:	2800      	cmp	r0, #0
 8006370:	f040 8289 	bne.w	8006886 <_dtoa_r+0x976>
 8006374:	ec5b ab19 	vmov	sl, fp, d9
 8006378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800637a:	2b00      	cmp	r3, #0
 800637c:	f2c0 8148 	blt.w	8006610 <_dtoa_r+0x700>
 8006380:	9a00      	ldr	r2, [sp, #0]
 8006382:	2a0e      	cmp	r2, #14
 8006384:	f300 8144 	bgt.w	8006610 <_dtoa_r+0x700>
 8006388:	4b67      	ldr	r3, [pc, #412]	; (8006528 <_dtoa_r+0x618>)
 800638a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800638e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006394:	2b00      	cmp	r3, #0
 8006396:	f280 80d5 	bge.w	8006544 <_dtoa_r+0x634>
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	f300 80d1 	bgt.w	8006544 <_dtoa_r+0x634>
 80063a2:	f040 826f 	bne.w	8006884 <_dtoa_r+0x974>
 80063a6:	4b65      	ldr	r3, [pc, #404]	; (800653c <_dtoa_r+0x62c>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7fa f8fb 	bl	80005a8 <__aeabi_dmul>
 80063b2:	4652      	mov	r2, sl
 80063b4:	465b      	mov	r3, fp
 80063b6:	f7fa fb7d 	bl	8000ab4 <__aeabi_dcmpge>
 80063ba:	9e03      	ldr	r6, [sp, #12]
 80063bc:	4637      	mov	r7, r6
 80063be:	2800      	cmp	r0, #0
 80063c0:	f040 8245 	bne.w	800684e <_dtoa_r+0x93e>
 80063c4:	9d01      	ldr	r5, [sp, #4]
 80063c6:	2331      	movs	r3, #49	; 0x31
 80063c8:	f805 3b01 	strb.w	r3, [r5], #1
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	3301      	adds	r3, #1
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	e240      	b.n	8006856 <_dtoa_r+0x946>
 80063d4:	07f2      	lsls	r2, r6, #31
 80063d6:	d505      	bpl.n	80063e4 <_dtoa_r+0x4d4>
 80063d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063dc:	f7fa f8e4 	bl	80005a8 <__aeabi_dmul>
 80063e0:	3501      	adds	r5, #1
 80063e2:	2301      	movs	r3, #1
 80063e4:	1076      	asrs	r6, r6, #1
 80063e6:	3708      	adds	r7, #8
 80063e8:	e777      	b.n	80062da <_dtoa_r+0x3ca>
 80063ea:	2502      	movs	r5, #2
 80063ec:	e779      	b.n	80062e2 <_dtoa_r+0x3d2>
 80063ee:	9f00      	ldr	r7, [sp, #0]
 80063f0:	9e03      	ldr	r6, [sp, #12]
 80063f2:	e794      	b.n	800631e <_dtoa_r+0x40e>
 80063f4:	9901      	ldr	r1, [sp, #4]
 80063f6:	4b4c      	ldr	r3, [pc, #304]	; (8006528 <_dtoa_r+0x618>)
 80063f8:	4431      	add	r1, r6
 80063fa:	910d      	str	r1, [sp, #52]	; 0x34
 80063fc:	9908      	ldr	r1, [sp, #32]
 80063fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006402:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006406:	2900      	cmp	r1, #0
 8006408:	d043      	beq.n	8006492 <_dtoa_r+0x582>
 800640a:	494d      	ldr	r1, [pc, #308]	; (8006540 <_dtoa_r+0x630>)
 800640c:	2000      	movs	r0, #0
 800640e:	f7fa f9f5 	bl	80007fc <__aeabi_ddiv>
 8006412:	4652      	mov	r2, sl
 8006414:	465b      	mov	r3, fp
 8006416:	f7f9 ff0f 	bl	8000238 <__aeabi_dsub>
 800641a:	9d01      	ldr	r5, [sp, #4]
 800641c:	4682      	mov	sl, r0
 800641e:	468b      	mov	fp, r1
 8006420:	4649      	mov	r1, r9
 8006422:	4640      	mov	r0, r8
 8006424:	f7fa fb70 	bl	8000b08 <__aeabi_d2iz>
 8006428:	4606      	mov	r6, r0
 800642a:	f7fa f853 	bl	80004d4 <__aeabi_i2d>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4640      	mov	r0, r8
 8006434:	4649      	mov	r1, r9
 8006436:	f7f9 feff 	bl	8000238 <__aeabi_dsub>
 800643a:	3630      	adds	r6, #48	; 0x30
 800643c:	f805 6b01 	strb.w	r6, [r5], #1
 8006440:	4652      	mov	r2, sl
 8006442:	465b      	mov	r3, fp
 8006444:	4680      	mov	r8, r0
 8006446:	4689      	mov	r9, r1
 8006448:	f7fa fb20 	bl	8000a8c <__aeabi_dcmplt>
 800644c:	2800      	cmp	r0, #0
 800644e:	d163      	bne.n	8006518 <_dtoa_r+0x608>
 8006450:	4642      	mov	r2, r8
 8006452:	464b      	mov	r3, r9
 8006454:	4936      	ldr	r1, [pc, #216]	; (8006530 <_dtoa_r+0x620>)
 8006456:	2000      	movs	r0, #0
 8006458:	f7f9 feee 	bl	8000238 <__aeabi_dsub>
 800645c:	4652      	mov	r2, sl
 800645e:	465b      	mov	r3, fp
 8006460:	f7fa fb14 	bl	8000a8c <__aeabi_dcmplt>
 8006464:	2800      	cmp	r0, #0
 8006466:	f040 80b5 	bne.w	80065d4 <_dtoa_r+0x6c4>
 800646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800646c:	429d      	cmp	r5, r3
 800646e:	d081      	beq.n	8006374 <_dtoa_r+0x464>
 8006470:	4b30      	ldr	r3, [pc, #192]	; (8006534 <_dtoa_r+0x624>)
 8006472:	2200      	movs	r2, #0
 8006474:	4650      	mov	r0, sl
 8006476:	4659      	mov	r1, fp
 8006478:	f7fa f896 	bl	80005a8 <__aeabi_dmul>
 800647c:	4b2d      	ldr	r3, [pc, #180]	; (8006534 <_dtoa_r+0x624>)
 800647e:	4682      	mov	sl, r0
 8006480:	468b      	mov	fp, r1
 8006482:	4640      	mov	r0, r8
 8006484:	4649      	mov	r1, r9
 8006486:	2200      	movs	r2, #0
 8006488:	f7fa f88e 	bl	80005a8 <__aeabi_dmul>
 800648c:	4680      	mov	r8, r0
 800648e:	4689      	mov	r9, r1
 8006490:	e7c6      	b.n	8006420 <_dtoa_r+0x510>
 8006492:	4650      	mov	r0, sl
 8006494:	4659      	mov	r1, fp
 8006496:	f7fa f887 	bl	80005a8 <__aeabi_dmul>
 800649a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800649c:	9d01      	ldr	r5, [sp, #4]
 800649e:	930f      	str	r3, [sp, #60]	; 0x3c
 80064a0:	4682      	mov	sl, r0
 80064a2:	468b      	mov	fp, r1
 80064a4:	4649      	mov	r1, r9
 80064a6:	4640      	mov	r0, r8
 80064a8:	f7fa fb2e 	bl	8000b08 <__aeabi_d2iz>
 80064ac:	4606      	mov	r6, r0
 80064ae:	f7fa f811 	bl	80004d4 <__aeabi_i2d>
 80064b2:	3630      	adds	r6, #48	; 0x30
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4640      	mov	r0, r8
 80064ba:	4649      	mov	r1, r9
 80064bc:	f7f9 febc 	bl	8000238 <__aeabi_dsub>
 80064c0:	f805 6b01 	strb.w	r6, [r5], #1
 80064c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c6:	429d      	cmp	r5, r3
 80064c8:	4680      	mov	r8, r0
 80064ca:	4689      	mov	r9, r1
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	d124      	bne.n	800651c <_dtoa_r+0x60c>
 80064d2:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <_dtoa_r+0x630>)
 80064d4:	4650      	mov	r0, sl
 80064d6:	4659      	mov	r1, fp
 80064d8:	f7f9 feb0 	bl	800023c <__adddf3>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7fa faf0 	bl	8000ac8 <__aeabi_dcmpgt>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d173      	bne.n	80065d4 <_dtoa_r+0x6c4>
 80064ec:	4652      	mov	r2, sl
 80064ee:	465b      	mov	r3, fp
 80064f0:	4913      	ldr	r1, [pc, #76]	; (8006540 <_dtoa_r+0x630>)
 80064f2:	2000      	movs	r0, #0
 80064f4:	f7f9 fea0 	bl	8000238 <__aeabi_dsub>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	f7fa fac4 	bl	8000a8c <__aeabi_dcmplt>
 8006504:	2800      	cmp	r0, #0
 8006506:	f43f af35 	beq.w	8006374 <_dtoa_r+0x464>
 800650a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800650c:	1e6b      	subs	r3, r5, #1
 800650e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006510:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006514:	2b30      	cmp	r3, #48	; 0x30
 8006516:	d0f8      	beq.n	800650a <_dtoa_r+0x5fa>
 8006518:	9700      	str	r7, [sp, #0]
 800651a:	e049      	b.n	80065b0 <_dtoa_r+0x6a0>
 800651c:	4b05      	ldr	r3, [pc, #20]	; (8006534 <_dtoa_r+0x624>)
 800651e:	f7fa f843 	bl	80005a8 <__aeabi_dmul>
 8006522:	4680      	mov	r8, r0
 8006524:	4689      	mov	r9, r1
 8006526:	e7bd      	b.n	80064a4 <_dtoa_r+0x594>
 8006528:	08007cb8 	.word	0x08007cb8
 800652c:	08007c90 	.word	0x08007c90
 8006530:	3ff00000 	.word	0x3ff00000
 8006534:	40240000 	.word	0x40240000
 8006538:	401c0000 	.word	0x401c0000
 800653c:	40140000 	.word	0x40140000
 8006540:	3fe00000 	.word	0x3fe00000
 8006544:	9d01      	ldr	r5, [sp, #4]
 8006546:	4656      	mov	r6, sl
 8006548:	465f      	mov	r7, fp
 800654a:	4642      	mov	r2, r8
 800654c:	464b      	mov	r3, r9
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	f7fa f953 	bl	80007fc <__aeabi_ddiv>
 8006556:	f7fa fad7 	bl	8000b08 <__aeabi_d2iz>
 800655a:	4682      	mov	sl, r0
 800655c:	f7f9 ffba 	bl	80004d4 <__aeabi_i2d>
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	f7fa f820 	bl	80005a8 <__aeabi_dmul>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4630      	mov	r0, r6
 800656e:	4639      	mov	r1, r7
 8006570:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006574:	f7f9 fe60 	bl	8000238 <__aeabi_dsub>
 8006578:	f805 6b01 	strb.w	r6, [r5], #1
 800657c:	9e01      	ldr	r6, [sp, #4]
 800657e:	9f03      	ldr	r7, [sp, #12]
 8006580:	1bae      	subs	r6, r5, r6
 8006582:	42b7      	cmp	r7, r6
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	d135      	bne.n	80065f6 <_dtoa_r+0x6e6>
 800658a:	f7f9 fe57 	bl	800023c <__adddf3>
 800658e:	4642      	mov	r2, r8
 8006590:	464b      	mov	r3, r9
 8006592:	4606      	mov	r6, r0
 8006594:	460f      	mov	r7, r1
 8006596:	f7fa fa97 	bl	8000ac8 <__aeabi_dcmpgt>
 800659a:	b9d0      	cbnz	r0, 80065d2 <_dtoa_r+0x6c2>
 800659c:	4642      	mov	r2, r8
 800659e:	464b      	mov	r3, r9
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7fa fa68 	bl	8000a78 <__aeabi_dcmpeq>
 80065a8:	b110      	cbz	r0, 80065b0 <_dtoa_r+0x6a0>
 80065aa:	f01a 0f01 	tst.w	sl, #1
 80065ae:	d110      	bne.n	80065d2 <_dtoa_r+0x6c2>
 80065b0:	4620      	mov	r0, r4
 80065b2:	ee18 1a10 	vmov	r1, s16
 80065b6:	f000 fb41 	bl	8006c3c <_Bfree>
 80065ba:	2300      	movs	r3, #0
 80065bc:	9800      	ldr	r0, [sp, #0]
 80065be:	702b      	strb	r3, [r5, #0]
 80065c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065c2:	3001      	adds	r0, #1
 80065c4:	6018      	str	r0, [r3, #0]
 80065c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f43f acf1 	beq.w	8005fb0 <_dtoa_r+0xa0>
 80065ce:	601d      	str	r5, [r3, #0]
 80065d0:	e4ee      	b.n	8005fb0 <_dtoa_r+0xa0>
 80065d2:	9f00      	ldr	r7, [sp, #0]
 80065d4:	462b      	mov	r3, r5
 80065d6:	461d      	mov	r5, r3
 80065d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065dc:	2a39      	cmp	r2, #57	; 0x39
 80065de:	d106      	bne.n	80065ee <_dtoa_r+0x6de>
 80065e0:	9a01      	ldr	r2, [sp, #4]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d1f7      	bne.n	80065d6 <_dtoa_r+0x6c6>
 80065e6:	9901      	ldr	r1, [sp, #4]
 80065e8:	2230      	movs	r2, #48	; 0x30
 80065ea:	3701      	adds	r7, #1
 80065ec:	700a      	strb	r2, [r1, #0]
 80065ee:	781a      	ldrb	r2, [r3, #0]
 80065f0:	3201      	adds	r2, #1
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	e790      	b.n	8006518 <_dtoa_r+0x608>
 80065f6:	4ba6      	ldr	r3, [pc, #664]	; (8006890 <_dtoa_r+0x980>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	f7f9 ffd5 	bl	80005a8 <__aeabi_dmul>
 80065fe:	2200      	movs	r2, #0
 8006600:	2300      	movs	r3, #0
 8006602:	4606      	mov	r6, r0
 8006604:	460f      	mov	r7, r1
 8006606:	f7fa fa37 	bl	8000a78 <__aeabi_dcmpeq>
 800660a:	2800      	cmp	r0, #0
 800660c:	d09d      	beq.n	800654a <_dtoa_r+0x63a>
 800660e:	e7cf      	b.n	80065b0 <_dtoa_r+0x6a0>
 8006610:	9a08      	ldr	r2, [sp, #32]
 8006612:	2a00      	cmp	r2, #0
 8006614:	f000 80d7 	beq.w	80067c6 <_dtoa_r+0x8b6>
 8006618:	9a06      	ldr	r2, [sp, #24]
 800661a:	2a01      	cmp	r2, #1
 800661c:	f300 80ba 	bgt.w	8006794 <_dtoa_r+0x884>
 8006620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006622:	2a00      	cmp	r2, #0
 8006624:	f000 80b2 	beq.w	800678c <_dtoa_r+0x87c>
 8006628:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800662c:	9e07      	ldr	r6, [sp, #28]
 800662e:	9d04      	ldr	r5, [sp, #16]
 8006630:	9a04      	ldr	r2, [sp, #16]
 8006632:	441a      	add	r2, r3
 8006634:	9204      	str	r2, [sp, #16]
 8006636:	9a05      	ldr	r2, [sp, #20]
 8006638:	2101      	movs	r1, #1
 800663a:	441a      	add	r2, r3
 800663c:	4620      	mov	r0, r4
 800663e:	9205      	str	r2, [sp, #20]
 8006640:	f000 fbb4 	bl	8006dac <__i2b>
 8006644:	4607      	mov	r7, r0
 8006646:	2d00      	cmp	r5, #0
 8006648:	dd0c      	ble.n	8006664 <_dtoa_r+0x754>
 800664a:	9b05      	ldr	r3, [sp, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	dd09      	ble.n	8006664 <_dtoa_r+0x754>
 8006650:	42ab      	cmp	r3, r5
 8006652:	9a04      	ldr	r2, [sp, #16]
 8006654:	bfa8      	it	ge
 8006656:	462b      	movge	r3, r5
 8006658:	1ad2      	subs	r2, r2, r3
 800665a:	9204      	str	r2, [sp, #16]
 800665c:	9a05      	ldr	r2, [sp, #20]
 800665e:	1aed      	subs	r5, r5, r3
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	b31b      	cbz	r3, 80066b0 <_dtoa_r+0x7a0>
 8006668:	9b08      	ldr	r3, [sp, #32]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80af 	beq.w	80067ce <_dtoa_r+0x8be>
 8006670:	2e00      	cmp	r6, #0
 8006672:	dd13      	ble.n	800669c <_dtoa_r+0x78c>
 8006674:	4639      	mov	r1, r7
 8006676:	4632      	mov	r2, r6
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fc57 	bl	8006f2c <__pow5mult>
 800667e:	ee18 2a10 	vmov	r2, s16
 8006682:	4601      	mov	r1, r0
 8006684:	4607      	mov	r7, r0
 8006686:	4620      	mov	r0, r4
 8006688:	f000 fba6 	bl	8006dd8 <__multiply>
 800668c:	ee18 1a10 	vmov	r1, s16
 8006690:	4680      	mov	r8, r0
 8006692:	4620      	mov	r0, r4
 8006694:	f000 fad2 	bl	8006c3c <_Bfree>
 8006698:	ee08 8a10 	vmov	s16, r8
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	1b9a      	subs	r2, r3, r6
 80066a0:	d006      	beq.n	80066b0 <_dtoa_r+0x7a0>
 80066a2:	ee18 1a10 	vmov	r1, s16
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fc40 	bl	8006f2c <__pow5mult>
 80066ac:	ee08 0a10 	vmov	s16, r0
 80066b0:	2101      	movs	r1, #1
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 fb7a 	bl	8006dac <__i2b>
 80066b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	4606      	mov	r6, r0
 80066be:	f340 8088 	ble.w	80067d2 <_dtoa_r+0x8c2>
 80066c2:	461a      	mov	r2, r3
 80066c4:	4601      	mov	r1, r0
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 fc30 	bl	8006f2c <__pow5mult>
 80066cc:	9b06      	ldr	r3, [sp, #24]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	4606      	mov	r6, r0
 80066d2:	f340 8081 	ble.w	80067d8 <_dtoa_r+0x8c8>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	6933      	ldr	r3, [r6, #16]
 80066dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066e0:	6918      	ldr	r0, [r3, #16]
 80066e2:	f000 fb13 	bl	8006d0c <__hi0bits>
 80066e6:	f1c0 0020 	rsb	r0, r0, #32
 80066ea:	9b05      	ldr	r3, [sp, #20]
 80066ec:	4418      	add	r0, r3
 80066ee:	f010 001f 	ands.w	r0, r0, #31
 80066f2:	f000 8092 	beq.w	800681a <_dtoa_r+0x90a>
 80066f6:	f1c0 0320 	rsb	r3, r0, #32
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	f340 808a 	ble.w	8006814 <_dtoa_r+0x904>
 8006700:	f1c0 001c 	rsb	r0, r0, #28
 8006704:	9b04      	ldr	r3, [sp, #16]
 8006706:	4403      	add	r3, r0
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	9b05      	ldr	r3, [sp, #20]
 800670c:	4403      	add	r3, r0
 800670e:	4405      	add	r5, r0
 8006710:	9305      	str	r3, [sp, #20]
 8006712:	9b04      	ldr	r3, [sp, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	dd07      	ble.n	8006728 <_dtoa_r+0x818>
 8006718:	ee18 1a10 	vmov	r1, s16
 800671c:	461a      	mov	r2, r3
 800671e:	4620      	mov	r0, r4
 8006720:	f000 fc5e 	bl	8006fe0 <__lshift>
 8006724:	ee08 0a10 	vmov	s16, r0
 8006728:	9b05      	ldr	r3, [sp, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dd05      	ble.n	800673a <_dtoa_r+0x82a>
 800672e:	4631      	mov	r1, r6
 8006730:	461a      	mov	r2, r3
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fc54 	bl	8006fe0 <__lshift>
 8006738:	4606      	mov	r6, r0
 800673a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d06e      	beq.n	800681e <_dtoa_r+0x90e>
 8006740:	ee18 0a10 	vmov	r0, s16
 8006744:	4631      	mov	r1, r6
 8006746:	f000 fcbb 	bl	80070c0 <__mcmp>
 800674a:	2800      	cmp	r0, #0
 800674c:	da67      	bge.n	800681e <_dtoa_r+0x90e>
 800674e:	9b00      	ldr	r3, [sp, #0]
 8006750:	3b01      	subs	r3, #1
 8006752:	ee18 1a10 	vmov	r1, s16
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	220a      	movs	r2, #10
 800675a:	2300      	movs	r3, #0
 800675c:	4620      	mov	r0, r4
 800675e:	f000 fa8f 	bl	8006c80 <__multadd>
 8006762:	9b08      	ldr	r3, [sp, #32]
 8006764:	ee08 0a10 	vmov	s16, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 81b1 	beq.w	8006ad0 <_dtoa_r+0xbc0>
 800676e:	2300      	movs	r3, #0
 8006770:	4639      	mov	r1, r7
 8006772:	220a      	movs	r2, #10
 8006774:	4620      	mov	r0, r4
 8006776:	f000 fa83 	bl	8006c80 <__multadd>
 800677a:	9b02      	ldr	r3, [sp, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	4607      	mov	r7, r0
 8006780:	f300 808e 	bgt.w	80068a0 <_dtoa_r+0x990>
 8006784:	9b06      	ldr	r3, [sp, #24]
 8006786:	2b02      	cmp	r3, #2
 8006788:	dc51      	bgt.n	800682e <_dtoa_r+0x91e>
 800678a:	e089      	b.n	80068a0 <_dtoa_r+0x990>
 800678c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800678e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006792:	e74b      	b.n	800662c <_dtoa_r+0x71c>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	1e5e      	subs	r6, r3, #1
 8006798:	9b07      	ldr	r3, [sp, #28]
 800679a:	42b3      	cmp	r3, r6
 800679c:	bfbf      	itttt	lt
 800679e:	9b07      	ldrlt	r3, [sp, #28]
 80067a0:	9607      	strlt	r6, [sp, #28]
 80067a2:	1af2      	sublt	r2, r6, r3
 80067a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80067a6:	bfb6      	itet	lt
 80067a8:	189b      	addlt	r3, r3, r2
 80067aa:	1b9e      	subge	r6, r3, r6
 80067ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	bfb8      	it	lt
 80067b2:	2600      	movlt	r6, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfb7      	itett	lt
 80067b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80067bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80067c0:	1a9d      	sublt	r5, r3, r2
 80067c2:	2300      	movlt	r3, #0
 80067c4:	e734      	b.n	8006630 <_dtoa_r+0x720>
 80067c6:	9e07      	ldr	r6, [sp, #28]
 80067c8:	9d04      	ldr	r5, [sp, #16]
 80067ca:	9f08      	ldr	r7, [sp, #32]
 80067cc:	e73b      	b.n	8006646 <_dtoa_r+0x736>
 80067ce:	9a07      	ldr	r2, [sp, #28]
 80067d0:	e767      	b.n	80066a2 <_dtoa_r+0x792>
 80067d2:	9b06      	ldr	r3, [sp, #24]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	dc18      	bgt.n	800680a <_dtoa_r+0x8fa>
 80067d8:	f1ba 0f00 	cmp.w	sl, #0
 80067dc:	d115      	bne.n	800680a <_dtoa_r+0x8fa>
 80067de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067e2:	b993      	cbnz	r3, 800680a <_dtoa_r+0x8fa>
 80067e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80067e8:	0d1b      	lsrs	r3, r3, #20
 80067ea:	051b      	lsls	r3, r3, #20
 80067ec:	b183      	cbz	r3, 8006810 <_dtoa_r+0x900>
 80067ee:	9b04      	ldr	r3, [sp, #16]
 80067f0:	3301      	adds	r3, #1
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	9b05      	ldr	r3, [sp, #20]
 80067f6:	3301      	adds	r3, #1
 80067f8:	9305      	str	r3, [sp, #20]
 80067fa:	f04f 0801 	mov.w	r8, #1
 80067fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	f47f af6a 	bne.w	80066da <_dtoa_r+0x7ca>
 8006806:	2001      	movs	r0, #1
 8006808:	e76f      	b.n	80066ea <_dtoa_r+0x7da>
 800680a:	f04f 0800 	mov.w	r8, #0
 800680e:	e7f6      	b.n	80067fe <_dtoa_r+0x8ee>
 8006810:	4698      	mov	r8, r3
 8006812:	e7f4      	b.n	80067fe <_dtoa_r+0x8ee>
 8006814:	f43f af7d 	beq.w	8006712 <_dtoa_r+0x802>
 8006818:	4618      	mov	r0, r3
 800681a:	301c      	adds	r0, #28
 800681c:	e772      	b.n	8006704 <_dtoa_r+0x7f4>
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	dc37      	bgt.n	8006894 <_dtoa_r+0x984>
 8006824:	9b06      	ldr	r3, [sp, #24]
 8006826:	2b02      	cmp	r3, #2
 8006828:	dd34      	ble.n	8006894 <_dtoa_r+0x984>
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	9302      	str	r3, [sp, #8]
 800682e:	9b02      	ldr	r3, [sp, #8]
 8006830:	b96b      	cbnz	r3, 800684e <_dtoa_r+0x93e>
 8006832:	4631      	mov	r1, r6
 8006834:	2205      	movs	r2, #5
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fa22 	bl	8006c80 <__multadd>
 800683c:	4601      	mov	r1, r0
 800683e:	4606      	mov	r6, r0
 8006840:	ee18 0a10 	vmov	r0, s16
 8006844:	f000 fc3c 	bl	80070c0 <__mcmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	f73f adbb 	bgt.w	80063c4 <_dtoa_r+0x4b4>
 800684e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006850:	9d01      	ldr	r5, [sp, #4]
 8006852:	43db      	mvns	r3, r3
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	f04f 0800 	mov.w	r8, #0
 800685a:	4631      	mov	r1, r6
 800685c:	4620      	mov	r0, r4
 800685e:	f000 f9ed 	bl	8006c3c <_Bfree>
 8006862:	2f00      	cmp	r7, #0
 8006864:	f43f aea4 	beq.w	80065b0 <_dtoa_r+0x6a0>
 8006868:	f1b8 0f00 	cmp.w	r8, #0
 800686c:	d005      	beq.n	800687a <_dtoa_r+0x96a>
 800686e:	45b8      	cmp	r8, r7
 8006870:	d003      	beq.n	800687a <_dtoa_r+0x96a>
 8006872:	4641      	mov	r1, r8
 8006874:	4620      	mov	r0, r4
 8006876:	f000 f9e1 	bl	8006c3c <_Bfree>
 800687a:	4639      	mov	r1, r7
 800687c:	4620      	mov	r0, r4
 800687e:	f000 f9dd 	bl	8006c3c <_Bfree>
 8006882:	e695      	b.n	80065b0 <_dtoa_r+0x6a0>
 8006884:	2600      	movs	r6, #0
 8006886:	4637      	mov	r7, r6
 8006888:	e7e1      	b.n	800684e <_dtoa_r+0x93e>
 800688a:	9700      	str	r7, [sp, #0]
 800688c:	4637      	mov	r7, r6
 800688e:	e599      	b.n	80063c4 <_dtoa_r+0x4b4>
 8006890:	40240000 	.word	0x40240000
 8006894:	9b08      	ldr	r3, [sp, #32]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80ca 	beq.w	8006a30 <_dtoa_r+0xb20>
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	9302      	str	r3, [sp, #8]
 80068a0:	2d00      	cmp	r5, #0
 80068a2:	dd05      	ble.n	80068b0 <_dtoa_r+0x9a0>
 80068a4:	4639      	mov	r1, r7
 80068a6:	462a      	mov	r2, r5
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fb99 	bl	8006fe0 <__lshift>
 80068ae:	4607      	mov	r7, r0
 80068b0:	f1b8 0f00 	cmp.w	r8, #0
 80068b4:	d05b      	beq.n	800696e <_dtoa_r+0xa5e>
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 f97f 	bl	8006bbc <_Balloc>
 80068be:	4605      	mov	r5, r0
 80068c0:	b928      	cbnz	r0, 80068ce <_dtoa_r+0x9be>
 80068c2:	4b87      	ldr	r3, [pc, #540]	; (8006ae0 <_dtoa_r+0xbd0>)
 80068c4:	4602      	mov	r2, r0
 80068c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068ca:	f7ff bb3b 	b.w	8005f44 <_dtoa_r+0x34>
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	3202      	adds	r2, #2
 80068d2:	0092      	lsls	r2, r2, #2
 80068d4:	f107 010c 	add.w	r1, r7, #12
 80068d8:	300c      	adds	r0, #12
 80068da:	f7fe fbbf 	bl	800505c <memcpy>
 80068de:	2201      	movs	r2, #1
 80068e0:	4629      	mov	r1, r5
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 fb7c 	bl	8006fe0 <__lshift>
 80068e8:	9b01      	ldr	r3, [sp, #4]
 80068ea:	f103 0901 	add.w	r9, r3, #1
 80068ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80068f2:	4413      	add	r3, r2
 80068f4:	9305      	str	r3, [sp, #20]
 80068f6:	f00a 0301 	and.w	r3, sl, #1
 80068fa:	46b8      	mov	r8, r7
 80068fc:	9304      	str	r3, [sp, #16]
 80068fe:	4607      	mov	r7, r0
 8006900:	4631      	mov	r1, r6
 8006902:	ee18 0a10 	vmov	r0, s16
 8006906:	f7ff fa75 	bl	8005df4 <quorem>
 800690a:	4641      	mov	r1, r8
 800690c:	9002      	str	r0, [sp, #8]
 800690e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006912:	ee18 0a10 	vmov	r0, s16
 8006916:	f000 fbd3 	bl	80070c0 <__mcmp>
 800691a:	463a      	mov	r2, r7
 800691c:	9003      	str	r0, [sp, #12]
 800691e:	4631      	mov	r1, r6
 8006920:	4620      	mov	r0, r4
 8006922:	f000 fbe9 	bl	80070f8 <__mdiff>
 8006926:	68c2      	ldr	r2, [r0, #12]
 8006928:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800692c:	4605      	mov	r5, r0
 800692e:	bb02      	cbnz	r2, 8006972 <_dtoa_r+0xa62>
 8006930:	4601      	mov	r1, r0
 8006932:	ee18 0a10 	vmov	r0, s16
 8006936:	f000 fbc3 	bl	80070c0 <__mcmp>
 800693a:	4602      	mov	r2, r0
 800693c:	4629      	mov	r1, r5
 800693e:	4620      	mov	r0, r4
 8006940:	9207      	str	r2, [sp, #28]
 8006942:	f000 f97b 	bl	8006c3c <_Bfree>
 8006946:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800694a:	ea43 0102 	orr.w	r1, r3, r2
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	430b      	orrs	r3, r1
 8006952:	464d      	mov	r5, r9
 8006954:	d10f      	bne.n	8006976 <_dtoa_r+0xa66>
 8006956:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800695a:	d02a      	beq.n	80069b2 <_dtoa_r+0xaa2>
 800695c:	9b03      	ldr	r3, [sp, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	dd02      	ble.n	8006968 <_dtoa_r+0xa58>
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006968:	f88b a000 	strb.w	sl, [fp]
 800696c:	e775      	b.n	800685a <_dtoa_r+0x94a>
 800696e:	4638      	mov	r0, r7
 8006970:	e7ba      	b.n	80068e8 <_dtoa_r+0x9d8>
 8006972:	2201      	movs	r2, #1
 8006974:	e7e2      	b.n	800693c <_dtoa_r+0xa2c>
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	db04      	blt.n	8006986 <_dtoa_r+0xa76>
 800697c:	9906      	ldr	r1, [sp, #24]
 800697e:	430b      	orrs	r3, r1
 8006980:	9904      	ldr	r1, [sp, #16]
 8006982:	430b      	orrs	r3, r1
 8006984:	d122      	bne.n	80069cc <_dtoa_r+0xabc>
 8006986:	2a00      	cmp	r2, #0
 8006988:	ddee      	ble.n	8006968 <_dtoa_r+0xa58>
 800698a:	ee18 1a10 	vmov	r1, s16
 800698e:	2201      	movs	r2, #1
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fb25 	bl	8006fe0 <__lshift>
 8006996:	4631      	mov	r1, r6
 8006998:	ee08 0a10 	vmov	s16, r0
 800699c:	f000 fb90 	bl	80070c0 <__mcmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	dc03      	bgt.n	80069ac <_dtoa_r+0xa9c>
 80069a4:	d1e0      	bne.n	8006968 <_dtoa_r+0xa58>
 80069a6:	f01a 0f01 	tst.w	sl, #1
 80069aa:	d0dd      	beq.n	8006968 <_dtoa_r+0xa58>
 80069ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069b0:	d1d7      	bne.n	8006962 <_dtoa_r+0xa52>
 80069b2:	2339      	movs	r3, #57	; 0x39
 80069b4:	f88b 3000 	strb.w	r3, [fp]
 80069b8:	462b      	mov	r3, r5
 80069ba:	461d      	mov	r5, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069c2:	2a39      	cmp	r2, #57	; 0x39
 80069c4:	d071      	beq.n	8006aaa <_dtoa_r+0xb9a>
 80069c6:	3201      	adds	r2, #1
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	e746      	b.n	800685a <_dtoa_r+0x94a>
 80069cc:	2a00      	cmp	r2, #0
 80069ce:	dd07      	ble.n	80069e0 <_dtoa_r+0xad0>
 80069d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069d4:	d0ed      	beq.n	80069b2 <_dtoa_r+0xaa2>
 80069d6:	f10a 0301 	add.w	r3, sl, #1
 80069da:	f88b 3000 	strb.w	r3, [fp]
 80069de:	e73c      	b.n	800685a <_dtoa_r+0x94a>
 80069e0:	9b05      	ldr	r3, [sp, #20]
 80069e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80069e6:	4599      	cmp	r9, r3
 80069e8:	d047      	beq.n	8006a7a <_dtoa_r+0xb6a>
 80069ea:	ee18 1a10 	vmov	r1, s16
 80069ee:	2300      	movs	r3, #0
 80069f0:	220a      	movs	r2, #10
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f944 	bl	8006c80 <__multadd>
 80069f8:	45b8      	cmp	r8, r7
 80069fa:	ee08 0a10 	vmov	s16, r0
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	f04f 020a 	mov.w	r2, #10
 8006a06:	4641      	mov	r1, r8
 8006a08:	4620      	mov	r0, r4
 8006a0a:	d106      	bne.n	8006a1a <_dtoa_r+0xb0a>
 8006a0c:	f000 f938 	bl	8006c80 <__multadd>
 8006a10:	4680      	mov	r8, r0
 8006a12:	4607      	mov	r7, r0
 8006a14:	f109 0901 	add.w	r9, r9, #1
 8006a18:	e772      	b.n	8006900 <_dtoa_r+0x9f0>
 8006a1a:	f000 f931 	bl	8006c80 <__multadd>
 8006a1e:	4639      	mov	r1, r7
 8006a20:	4680      	mov	r8, r0
 8006a22:	2300      	movs	r3, #0
 8006a24:	220a      	movs	r2, #10
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 f92a 	bl	8006c80 <__multadd>
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	e7f1      	b.n	8006a14 <_dtoa_r+0xb04>
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	9302      	str	r3, [sp, #8]
 8006a34:	9d01      	ldr	r5, [sp, #4]
 8006a36:	ee18 0a10 	vmov	r0, s16
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	f7ff f9da 	bl	8005df4 <quorem>
 8006a40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a44:	9b01      	ldr	r3, [sp, #4]
 8006a46:	f805 ab01 	strb.w	sl, [r5], #1
 8006a4a:	1aea      	subs	r2, r5, r3
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	dd09      	ble.n	8006a66 <_dtoa_r+0xb56>
 8006a52:	ee18 1a10 	vmov	r1, s16
 8006a56:	2300      	movs	r3, #0
 8006a58:	220a      	movs	r2, #10
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 f910 	bl	8006c80 <__multadd>
 8006a60:	ee08 0a10 	vmov	s16, r0
 8006a64:	e7e7      	b.n	8006a36 <_dtoa_r+0xb26>
 8006a66:	9b02      	ldr	r3, [sp, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfc8      	it	gt
 8006a6c:	461d      	movgt	r5, r3
 8006a6e:	9b01      	ldr	r3, [sp, #4]
 8006a70:	bfd8      	it	le
 8006a72:	2501      	movle	r5, #1
 8006a74:	441d      	add	r5, r3
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	ee18 1a10 	vmov	r1, s16
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 faad 	bl	8006fe0 <__lshift>
 8006a86:	4631      	mov	r1, r6
 8006a88:	ee08 0a10 	vmov	s16, r0
 8006a8c:	f000 fb18 	bl	80070c0 <__mcmp>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	dc91      	bgt.n	80069b8 <_dtoa_r+0xaa8>
 8006a94:	d102      	bne.n	8006a9c <_dtoa_r+0xb8c>
 8006a96:	f01a 0f01 	tst.w	sl, #1
 8006a9a:	d18d      	bne.n	80069b8 <_dtoa_r+0xaa8>
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	461d      	mov	r5, r3
 8006aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aa4:	2a30      	cmp	r2, #48	; 0x30
 8006aa6:	d0fa      	beq.n	8006a9e <_dtoa_r+0xb8e>
 8006aa8:	e6d7      	b.n	800685a <_dtoa_r+0x94a>
 8006aaa:	9a01      	ldr	r2, [sp, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d184      	bne.n	80069ba <_dtoa_r+0xaaa>
 8006ab0:	9b00      	ldr	r3, [sp, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	2331      	movs	r3, #49	; 0x31
 8006ab8:	7013      	strb	r3, [r2, #0]
 8006aba:	e6ce      	b.n	800685a <_dtoa_r+0x94a>
 8006abc:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <_dtoa_r+0xbd4>)
 8006abe:	f7ff ba95 	b.w	8005fec <_dtoa_r+0xdc>
 8006ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f47f aa6e 	bne.w	8005fa6 <_dtoa_r+0x96>
 8006aca:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <_dtoa_r+0xbd8>)
 8006acc:	f7ff ba8e 	b.w	8005fec <_dtoa_r+0xdc>
 8006ad0:	9b02      	ldr	r3, [sp, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dcae      	bgt.n	8006a34 <_dtoa_r+0xb24>
 8006ad6:	9b06      	ldr	r3, [sp, #24]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	f73f aea8 	bgt.w	800682e <_dtoa_r+0x91e>
 8006ade:	e7a9      	b.n	8006a34 <_dtoa_r+0xb24>
 8006ae0:	08007c14 	.word	0x08007c14
 8006ae4:	08007a34 	.word	0x08007a34
 8006ae8:	08007b95 	.word	0x08007b95

08006aec <fiprintf>:
 8006aec:	b40e      	push	{r1, r2, r3}
 8006aee:	b503      	push	{r0, r1, lr}
 8006af0:	4601      	mov	r1, r0
 8006af2:	ab03      	add	r3, sp, #12
 8006af4:	4805      	ldr	r0, [pc, #20]	; (8006b0c <fiprintf+0x20>)
 8006af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006afa:	6800      	ldr	r0, [r0, #0]
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	f000 fc21 	bl	8007344 <_vfiprintf_r>
 8006b02:	b002      	add	sp, #8
 8006b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b08:	b003      	add	sp, #12
 8006b0a:	4770      	bx	lr
 8006b0c:	20000018 	.word	0x20000018

08006b10 <_fstat_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	; (8006b30 <_fstat_r+0x20>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	f7fa fcad 	bl	800147c <_fstat>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d102      	bne.n	8006b2c <_fstat_r+0x1c>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	b103      	cbz	r3, 8006b2c <_fstat_r+0x1c>
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	bd38      	pop	{r3, r4, r5, pc}
 8006b2e:	bf00      	nop
 8006b30:	200002a4 	.word	0x200002a4

08006b34 <_isatty_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d06      	ldr	r5, [pc, #24]	; (8006b50 <_isatty_r+0x1c>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fa fcac 	bl	800149c <_isatty>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_isatty_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_isatty_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	200002a4 	.word	0x200002a4

08006b54 <_localeconv_r>:
 8006b54:	4800      	ldr	r0, [pc, #0]	; (8006b58 <_localeconv_r+0x4>)
 8006b56:	4770      	bx	lr
 8006b58:	2000016c 	.word	0x2000016c

08006b5c <_lseek_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4d07      	ldr	r5, [pc, #28]	; (8006b7c <_lseek_r+0x20>)
 8006b60:	4604      	mov	r4, r0
 8006b62:	4608      	mov	r0, r1
 8006b64:	4611      	mov	r1, r2
 8006b66:	2200      	movs	r2, #0
 8006b68:	602a      	str	r2, [r5, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f7fa fca1 	bl	80014b2 <_lseek>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_lseek_r+0x1e>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_lseek_r+0x1e>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	200002a4 	.word	0x200002a4

08006b80 <__ascii_mbtowc>:
 8006b80:	b082      	sub	sp, #8
 8006b82:	b901      	cbnz	r1, 8006b86 <__ascii_mbtowc+0x6>
 8006b84:	a901      	add	r1, sp, #4
 8006b86:	b142      	cbz	r2, 8006b9a <__ascii_mbtowc+0x1a>
 8006b88:	b14b      	cbz	r3, 8006b9e <__ascii_mbtowc+0x1e>
 8006b8a:	7813      	ldrb	r3, [r2, #0]
 8006b8c:	600b      	str	r3, [r1, #0]
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	1e10      	subs	r0, r2, #0
 8006b92:	bf18      	it	ne
 8006b94:	2001      	movne	r0, #1
 8006b96:	b002      	add	sp, #8
 8006b98:	4770      	bx	lr
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	e7fb      	b.n	8006b96 <__ascii_mbtowc+0x16>
 8006b9e:	f06f 0001 	mvn.w	r0, #1
 8006ba2:	e7f8      	b.n	8006b96 <__ascii_mbtowc+0x16>

08006ba4 <__malloc_lock>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	; (8006bac <__malloc_lock+0x8>)
 8006ba6:	f7fe b9e2 	b.w	8004f6e <__retarget_lock_acquire_recursive>
 8006baa:	bf00      	nop
 8006bac:	20000298 	.word	0x20000298

08006bb0 <__malloc_unlock>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	; (8006bb8 <__malloc_unlock+0x8>)
 8006bb2:	f7fe b9dd 	b.w	8004f70 <__retarget_lock_release_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	20000298 	.word	0x20000298

08006bbc <_Balloc>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	b976      	cbnz	r6, 8006be4 <_Balloc+0x28>
 8006bc6:	2010      	movs	r0, #16
 8006bc8:	f7fe fa38 	bl	800503c <malloc>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6260      	str	r0, [r4, #36]	; 0x24
 8006bd0:	b920      	cbnz	r0, 8006bdc <_Balloc+0x20>
 8006bd2:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <_Balloc+0x78>)
 8006bd4:	4818      	ldr	r0, [pc, #96]	; (8006c38 <_Balloc+0x7c>)
 8006bd6:	2166      	movs	r1, #102	; 0x66
 8006bd8:	f7ff f8de 	bl	8005d98 <__assert_func>
 8006bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006be0:	6006      	str	r6, [r0, #0]
 8006be2:	60c6      	str	r6, [r0, #12]
 8006be4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006be6:	68f3      	ldr	r3, [r6, #12]
 8006be8:	b183      	cbz	r3, 8006c0c <_Balloc+0x50>
 8006bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bf2:	b9b8      	cbnz	r0, 8006c24 <_Balloc+0x68>
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	fa01 f605 	lsl.w	r6, r1, r5
 8006bfa:	1d72      	adds	r2, r6, #5
 8006bfc:	0092      	lsls	r2, r2, #2
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 fb60 	bl	80072c4 <_calloc_r>
 8006c04:	b160      	cbz	r0, 8006c20 <_Balloc+0x64>
 8006c06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c0a:	e00e      	b.n	8006c2a <_Balloc+0x6e>
 8006c0c:	2221      	movs	r2, #33	; 0x21
 8006c0e:	2104      	movs	r1, #4
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 fb57 	bl	80072c4 <_calloc_r>
 8006c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c18:	60f0      	str	r0, [r6, #12]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e4      	bne.n	8006bea <_Balloc+0x2e>
 8006c20:	2000      	movs	r0, #0
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	6802      	ldr	r2, [r0, #0]
 8006c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c30:	e7f7      	b.n	8006c22 <_Balloc+0x66>
 8006c32:	bf00      	nop
 8006c34:	08007ba2 	.word	0x08007ba2
 8006c38:	08007c2f 	.word	0x08007c2f

08006c3c <_Bfree>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c40:	4605      	mov	r5, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	b976      	cbnz	r6, 8006c64 <_Bfree+0x28>
 8006c46:	2010      	movs	r0, #16
 8006c48:	f7fe f9f8 	bl	800503c <malloc>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6268      	str	r0, [r5, #36]	; 0x24
 8006c50:	b920      	cbnz	r0, 8006c5c <_Bfree+0x20>
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <_Bfree+0x3c>)
 8006c54:	4809      	ldr	r0, [pc, #36]	; (8006c7c <_Bfree+0x40>)
 8006c56:	218a      	movs	r1, #138	; 0x8a
 8006c58:	f7ff f89e 	bl	8005d98 <__assert_func>
 8006c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c60:	6006      	str	r6, [r0, #0]
 8006c62:	60c6      	str	r6, [r0, #12]
 8006c64:	b13c      	cbz	r4, 8006c76 <_Bfree+0x3a>
 8006c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c68:	6862      	ldr	r2, [r4, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c70:	6021      	str	r1, [r4, #0]
 8006c72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	08007ba2 	.word	0x08007ba2
 8006c7c:	08007c2f 	.word	0x08007c2f

08006c80 <__multadd>:
 8006c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c84:	690d      	ldr	r5, [r1, #16]
 8006c86:	4607      	mov	r7, r0
 8006c88:	460c      	mov	r4, r1
 8006c8a:	461e      	mov	r6, r3
 8006c8c:	f101 0c14 	add.w	ip, r1, #20
 8006c90:	2000      	movs	r0, #0
 8006c92:	f8dc 3000 	ldr.w	r3, [ip]
 8006c96:	b299      	uxth	r1, r3
 8006c98:	fb02 6101 	mla	r1, r2, r1, r6
 8006c9c:	0c1e      	lsrs	r6, r3, #16
 8006c9e:	0c0b      	lsrs	r3, r1, #16
 8006ca0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ca4:	b289      	uxth	r1, r1
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cac:	4285      	cmp	r5, r0
 8006cae:	f84c 1b04 	str.w	r1, [ip], #4
 8006cb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cb6:	dcec      	bgt.n	8006c92 <__multadd+0x12>
 8006cb8:	b30e      	cbz	r6, 8006cfe <__multadd+0x7e>
 8006cba:	68a3      	ldr	r3, [r4, #8]
 8006cbc:	42ab      	cmp	r3, r5
 8006cbe:	dc19      	bgt.n	8006cf4 <__multadd+0x74>
 8006cc0:	6861      	ldr	r1, [r4, #4]
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	3101      	adds	r1, #1
 8006cc6:	f7ff ff79 	bl	8006bbc <_Balloc>
 8006cca:	4680      	mov	r8, r0
 8006ccc:	b928      	cbnz	r0, 8006cda <__multadd+0x5a>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <__multadd+0x84>)
 8006cd2:	480d      	ldr	r0, [pc, #52]	; (8006d08 <__multadd+0x88>)
 8006cd4:	21b5      	movs	r1, #181	; 0xb5
 8006cd6:	f7ff f85f 	bl	8005d98 <__assert_func>
 8006cda:	6922      	ldr	r2, [r4, #16]
 8006cdc:	3202      	adds	r2, #2
 8006cde:	f104 010c 	add.w	r1, r4, #12
 8006ce2:	0092      	lsls	r2, r2, #2
 8006ce4:	300c      	adds	r0, #12
 8006ce6:	f7fe f9b9 	bl	800505c <memcpy>
 8006cea:	4621      	mov	r1, r4
 8006cec:	4638      	mov	r0, r7
 8006cee:	f7ff ffa5 	bl	8006c3c <_Bfree>
 8006cf2:	4644      	mov	r4, r8
 8006cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cf8:	3501      	adds	r5, #1
 8006cfa:	615e      	str	r6, [r3, #20]
 8006cfc:	6125      	str	r5, [r4, #16]
 8006cfe:	4620      	mov	r0, r4
 8006d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d04:	08007c14 	.word	0x08007c14
 8006d08:	08007c2f 	.word	0x08007c2f

08006d0c <__hi0bits>:
 8006d0c:	0c03      	lsrs	r3, r0, #16
 8006d0e:	041b      	lsls	r3, r3, #16
 8006d10:	b9d3      	cbnz	r3, 8006d48 <__hi0bits+0x3c>
 8006d12:	0400      	lsls	r0, r0, #16
 8006d14:	2310      	movs	r3, #16
 8006d16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d1a:	bf04      	itt	eq
 8006d1c:	0200      	lsleq	r0, r0, #8
 8006d1e:	3308      	addeq	r3, #8
 8006d20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d24:	bf04      	itt	eq
 8006d26:	0100      	lsleq	r0, r0, #4
 8006d28:	3304      	addeq	r3, #4
 8006d2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d2e:	bf04      	itt	eq
 8006d30:	0080      	lsleq	r0, r0, #2
 8006d32:	3302      	addeq	r3, #2
 8006d34:	2800      	cmp	r0, #0
 8006d36:	db05      	blt.n	8006d44 <__hi0bits+0x38>
 8006d38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d3c:	f103 0301 	add.w	r3, r3, #1
 8006d40:	bf08      	it	eq
 8006d42:	2320      	moveq	r3, #32
 8006d44:	4618      	mov	r0, r3
 8006d46:	4770      	bx	lr
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e7e4      	b.n	8006d16 <__hi0bits+0xa>

08006d4c <__lo0bits>:
 8006d4c:	6803      	ldr	r3, [r0, #0]
 8006d4e:	f013 0207 	ands.w	r2, r3, #7
 8006d52:	4601      	mov	r1, r0
 8006d54:	d00b      	beq.n	8006d6e <__lo0bits+0x22>
 8006d56:	07da      	lsls	r2, r3, #31
 8006d58:	d423      	bmi.n	8006da2 <__lo0bits+0x56>
 8006d5a:	0798      	lsls	r0, r3, #30
 8006d5c:	bf49      	itett	mi
 8006d5e:	085b      	lsrmi	r3, r3, #1
 8006d60:	089b      	lsrpl	r3, r3, #2
 8006d62:	2001      	movmi	r0, #1
 8006d64:	600b      	strmi	r3, [r1, #0]
 8006d66:	bf5c      	itt	pl
 8006d68:	600b      	strpl	r3, [r1, #0]
 8006d6a:	2002      	movpl	r0, #2
 8006d6c:	4770      	bx	lr
 8006d6e:	b298      	uxth	r0, r3
 8006d70:	b9a8      	cbnz	r0, 8006d9e <__lo0bits+0x52>
 8006d72:	0c1b      	lsrs	r3, r3, #16
 8006d74:	2010      	movs	r0, #16
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	b90a      	cbnz	r2, 8006d7e <__lo0bits+0x32>
 8006d7a:	3008      	adds	r0, #8
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	071a      	lsls	r2, r3, #28
 8006d80:	bf04      	itt	eq
 8006d82:	091b      	lsreq	r3, r3, #4
 8006d84:	3004      	addeq	r0, #4
 8006d86:	079a      	lsls	r2, r3, #30
 8006d88:	bf04      	itt	eq
 8006d8a:	089b      	lsreq	r3, r3, #2
 8006d8c:	3002      	addeq	r0, #2
 8006d8e:	07da      	lsls	r2, r3, #31
 8006d90:	d403      	bmi.n	8006d9a <__lo0bits+0x4e>
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	f100 0001 	add.w	r0, r0, #1
 8006d98:	d005      	beq.n	8006da6 <__lo0bits+0x5a>
 8006d9a:	600b      	str	r3, [r1, #0]
 8006d9c:	4770      	bx	lr
 8006d9e:	4610      	mov	r0, r2
 8006da0:	e7e9      	b.n	8006d76 <__lo0bits+0x2a>
 8006da2:	2000      	movs	r0, #0
 8006da4:	4770      	bx	lr
 8006da6:	2020      	movs	r0, #32
 8006da8:	4770      	bx	lr
	...

08006dac <__i2b>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	460c      	mov	r4, r1
 8006db0:	2101      	movs	r1, #1
 8006db2:	f7ff ff03 	bl	8006bbc <_Balloc>
 8006db6:	4602      	mov	r2, r0
 8006db8:	b928      	cbnz	r0, 8006dc6 <__i2b+0x1a>
 8006dba:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <__i2b+0x24>)
 8006dbc:	4805      	ldr	r0, [pc, #20]	; (8006dd4 <__i2b+0x28>)
 8006dbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dc2:	f7fe ffe9 	bl	8005d98 <__assert_func>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	6144      	str	r4, [r0, #20]
 8006dca:	6103      	str	r3, [r0, #16]
 8006dcc:	bd10      	pop	{r4, pc}
 8006dce:	bf00      	nop
 8006dd0:	08007c14 	.word	0x08007c14
 8006dd4:	08007c2f 	.word	0x08007c2f

08006dd8 <__multiply>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	4691      	mov	r9, r2
 8006dde:	690a      	ldr	r2, [r1, #16]
 8006de0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	bfb8      	it	lt
 8006de8:	460b      	movlt	r3, r1
 8006dea:	460c      	mov	r4, r1
 8006dec:	bfbc      	itt	lt
 8006dee:	464c      	movlt	r4, r9
 8006df0:	4699      	movlt	r9, r3
 8006df2:	6927      	ldr	r7, [r4, #16]
 8006df4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006df8:	68a3      	ldr	r3, [r4, #8]
 8006dfa:	6861      	ldr	r1, [r4, #4]
 8006dfc:	eb07 060a 	add.w	r6, r7, sl
 8006e00:	42b3      	cmp	r3, r6
 8006e02:	b085      	sub	sp, #20
 8006e04:	bfb8      	it	lt
 8006e06:	3101      	addlt	r1, #1
 8006e08:	f7ff fed8 	bl	8006bbc <_Balloc>
 8006e0c:	b930      	cbnz	r0, 8006e1c <__multiply+0x44>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	4b44      	ldr	r3, [pc, #272]	; (8006f24 <__multiply+0x14c>)
 8006e12:	4845      	ldr	r0, [pc, #276]	; (8006f28 <__multiply+0x150>)
 8006e14:	f240 115d 	movw	r1, #349	; 0x15d
 8006e18:	f7fe ffbe 	bl	8005d98 <__assert_func>
 8006e1c:	f100 0514 	add.w	r5, r0, #20
 8006e20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e24:	462b      	mov	r3, r5
 8006e26:	2200      	movs	r2, #0
 8006e28:	4543      	cmp	r3, r8
 8006e2a:	d321      	bcc.n	8006e70 <__multiply+0x98>
 8006e2c:	f104 0314 	add.w	r3, r4, #20
 8006e30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e34:	f109 0314 	add.w	r3, r9, #20
 8006e38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e3c:	9202      	str	r2, [sp, #8]
 8006e3e:	1b3a      	subs	r2, r7, r4
 8006e40:	3a15      	subs	r2, #21
 8006e42:	f022 0203 	bic.w	r2, r2, #3
 8006e46:	3204      	adds	r2, #4
 8006e48:	f104 0115 	add.w	r1, r4, #21
 8006e4c:	428f      	cmp	r7, r1
 8006e4e:	bf38      	it	cc
 8006e50:	2204      	movcc	r2, #4
 8006e52:	9201      	str	r2, [sp, #4]
 8006e54:	9a02      	ldr	r2, [sp, #8]
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d80c      	bhi.n	8006e76 <__multiply+0x9e>
 8006e5c:	2e00      	cmp	r6, #0
 8006e5e:	dd03      	ble.n	8006e68 <__multiply+0x90>
 8006e60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d05a      	beq.n	8006f1e <__multiply+0x146>
 8006e68:	6106      	str	r6, [r0, #16]
 8006e6a:	b005      	add	sp, #20
 8006e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e70:	f843 2b04 	str.w	r2, [r3], #4
 8006e74:	e7d8      	b.n	8006e28 <__multiply+0x50>
 8006e76:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e7a:	f1ba 0f00 	cmp.w	sl, #0
 8006e7e:	d024      	beq.n	8006eca <__multiply+0xf2>
 8006e80:	f104 0e14 	add.w	lr, r4, #20
 8006e84:	46a9      	mov	r9, r5
 8006e86:	f04f 0c00 	mov.w	ip, #0
 8006e8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e8e:	f8d9 1000 	ldr.w	r1, [r9]
 8006e92:	fa1f fb82 	uxth.w	fp, r2
 8006e96:	b289      	uxth	r1, r1
 8006e98:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ea0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ea4:	4461      	add	r1, ip
 8006ea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eaa:	fb0a c20b 	mla	r2, sl, fp, ip
 8006eae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006eb2:	b289      	uxth	r1, r1
 8006eb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006eb8:	4577      	cmp	r7, lr
 8006eba:	f849 1b04 	str.w	r1, [r9], #4
 8006ebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ec2:	d8e2      	bhi.n	8006e8a <__multiply+0xb2>
 8006ec4:	9a01      	ldr	r2, [sp, #4]
 8006ec6:	f845 c002 	str.w	ip, [r5, r2]
 8006eca:	9a03      	ldr	r2, [sp, #12]
 8006ecc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	f1b9 0f00 	cmp.w	r9, #0
 8006ed6:	d020      	beq.n	8006f1a <__multiply+0x142>
 8006ed8:	6829      	ldr	r1, [r5, #0]
 8006eda:	f104 0c14 	add.w	ip, r4, #20
 8006ede:	46ae      	mov	lr, r5
 8006ee0:	f04f 0a00 	mov.w	sl, #0
 8006ee4:	f8bc b000 	ldrh.w	fp, [ip]
 8006ee8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006eec:	fb09 220b 	mla	r2, r9, fp, r2
 8006ef0:	4492      	add	sl, r2
 8006ef2:	b289      	uxth	r1, r1
 8006ef4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ef8:	f84e 1b04 	str.w	r1, [lr], #4
 8006efc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f00:	f8be 1000 	ldrh.w	r1, [lr]
 8006f04:	0c12      	lsrs	r2, r2, #16
 8006f06:	fb09 1102 	mla	r1, r9, r2, r1
 8006f0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f0e:	4567      	cmp	r7, ip
 8006f10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f14:	d8e6      	bhi.n	8006ee4 <__multiply+0x10c>
 8006f16:	9a01      	ldr	r2, [sp, #4]
 8006f18:	50a9      	str	r1, [r5, r2]
 8006f1a:	3504      	adds	r5, #4
 8006f1c:	e79a      	b.n	8006e54 <__multiply+0x7c>
 8006f1e:	3e01      	subs	r6, #1
 8006f20:	e79c      	b.n	8006e5c <__multiply+0x84>
 8006f22:	bf00      	nop
 8006f24:	08007c14 	.word	0x08007c14
 8006f28:	08007c2f 	.word	0x08007c2f

08006f2c <__pow5mult>:
 8006f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f30:	4615      	mov	r5, r2
 8006f32:	f012 0203 	ands.w	r2, r2, #3
 8006f36:	4606      	mov	r6, r0
 8006f38:	460f      	mov	r7, r1
 8006f3a:	d007      	beq.n	8006f4c <__pow5mult+0x20>
 8006f3c:	4c25      	ldr	r4, [pc, #148]	; (8006fd4 <__pow5mult+0xa8>)
 8006f3e:	3a01      	subs	r2, #1
 8006f40:	2300      	movs	r3, #0
 8006f42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f46:	f7ff fe9b 	bl	8006c80 <__multadd>
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	10ad      	asrs	r5, r5, #2
 8006f4e:	d03d      	beq.n	8006fcc <__pow5mult+0xa0>
 8006f50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f52:	b97c      	cbnz	r4, 8006f74 <__pow5mult+0x48>
 8006f54:	2010      	movs	r0, #16
 8006f56:	f7fe f871 	bl	800503c <malloc>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	6270      	str	r0, [r6, #36]	; 0x24
 8006f5e:	b928      	cbnz	r0, 8006f6c <__pow5mult+0x40>
 8006f60:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <__pow5mult+0xac>)
 8006f62:	481e      	ldr	r0, [pc, #120]	; (8006fdc <__pow5mult+0xb0>)
 8006f64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f68:	f7fe ff16 	bl	8005d98 <__assert_func>
 8006f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f70:	6004      	str	r4, [r0, #0]
 8006f72:	60c4      	str	r4, [r0, #12]
 8006f74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f7c:	b94c      	cbnz	r4, 8006f92 <__pow5mult+0x66>
 8006f7e:	f240 2171 	movw	r1, #625	; 0x271
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7ff ff12 	bl	8006dac <__i2b>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f8e:	4604      	mov	r4, r0
 8006f90:	6003      	str	r3, [r0, #0]
 8006f92:	f04f 0900 	mov.w	r9, #0
 8006f96:	07eb      	lsls	r3, r5, #31
 8006f98:	d50a      	bpl.n	8006fb0 <__pow5mult+0x84>
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7ff ff1a 	bl	8006dd8 <__multiply>
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7ff fe47 	bl	8006c3c <_Bfree>
 8006fae:	4647      	mov	r7, r8
 8006fb0:	106d      	asrs	r5, r5, #1
 8006fb2:	d00b      	beq.n	8006fcc <__pow5mult+0xa0>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	b938      	cbnz	r0, 8006fc8 <__pow5mult+0x9c>
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff ff0b 	bl	8006dd8 <__multiply>
 8006fc2:	6020      	str	r0, [r4, #0]
 8006fc4:	f8c0 9000 	str.w	r9, [r0]
 8006fc8:	4604      	mov	r4, r0
 8006fca:	e7e4      	b.n	8006f96 <__pow5mult+0x6a>
 8006fcc:	4638      	mov	r0, r7
 8006fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd2:	bf00      	nop
 8006fd4:	08007d80 	.word	0x08007d80
 8006fd8:	08007ba2 	.word	0x08007ba2
 8006fdc:	08007c2f 	.word	0x08007c2f

08006fe0 <__lshift>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	6849      	ldr	r1, [r1, #4]
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	4691      	mov	r9, r2
 8006ff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ff8:	f108 0601 	add.w	r6, r8, #1
 8006ffc:	42b3      	cmp	r3, r6
 8006ffe:	db0b      	blt.n	8007018 <__lshift+0x38>
 8007000:	4638      	mov	r0, r7
 8007002:	f7ff fddb 	bl	8006bbc <_Balloc>
 8007006:	4605      	mov	r5, r0
 8007008:	b948      	cbnz	r0, 800701e <__lshift+0x3e>
 800700a:	4602      	mov	r2, r0
 800700c:	4b2a      	ldr	r3, [pc, #168]	; (80070b8 <__lshift+0xd8>)
 800700e:	482b      	ldr	r0, [pc, #172]	; (80070bc <__lshift+0xdc>)
 8007010:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007014:	f7fe fec0 	bl	8005d98 <__assert_func>
 8007018:	3101      	adds	r1, #1
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	e7ee      	b.n	8006ffc <__lshift+0x1c>
 800701e:	2300      	movs	r3, #0
 8007020:	f100 0114 	add.w	r1, r0, #20
 8007024:	f100 0210 	add.w	r2, r0, #16
 8007028:	4618      	mov	r0, r3
 800702a:	4553      	cmp	r3, sl
 800702c:	db37      	blt.n	800709e <__lshift+0xbe>
 800702e:	6920      	ldr	r0, [r4, #16]
 8007030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007034:	f104 0314 	add.w	r3, r4, #20
 8007038:	f019 091f 	ands.w	r9, r9, #31
 800703c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007040:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007044:	d02f      	beq.n	80070a6 <__lshift+0xc6>
 8007046:	f1c9 0e20 	rsb	lr, r9, #32
 800704a:	468a      	mov	sl, r1
 800704c:	f04f 0c00 	mov.w	ip, #0
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	fa02 f209 	lsl.w	r2, r2, r9
 8007056:	ea42 020c 	orr.w	r2, r2, ip
 800705a:	f84a 2b04 	str.w	r2, [sl], #4
 800705e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007062:	4298      	cmp	r0, r3
 8007064:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007068:	d8f2      	bhi.n	8007050 <__lshift+0x70>
 800706a:	1b03      	subs	r3, r0, r4
 800706c:	3b15      	subs	r3, #21
 800706e:	f023 0303 	bic.w	r3, r3, #3
 8007072:	3304      	adds	r3, #4
 8007074:	f104 0215 	add.w	r2, r4, #21
 8007078:	4290      	cmp	r0, r2
 800707a:	bf38      	it	cc
 800707c:	2304      	movcc	r3, #4
 800707e:	f841 c003 	str.w	ip, [r1, r3]
 8007082:	f1bc 0f00 	cmp.w	ip, #0
 8007086:	d001      	beq.n	800708c <__lshift+0xac>
 8007088:	f108 0602 	add.w	r6, r8, #2
 800708c:	3e01      	subs	r6, #1
 800708e:	4638      	mov	r0, r7
 8007090:	612e      	str	r6, [r5, #16]
 8007092:	4621      	mov	r1, r4
 8007094:	f7ff fdd2 	bl	8006c3c <_Bfree>
 8007098:	4628      	mov	r0, r5
 800709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709e:	f842 0f04 	str.w	r0, [r2, #4]!
 80070a2:	3301      	adds	r3, #1
 80070a4:	e7c1      	b.n	800702a <__lshift+0x4a>
 80070a6:	3904      	subs	r1, #4
 80070a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80070b0:	4298      	cmp	r0, r3
 80070b2:	d8f9      	bhi.n	80070a8 <__lshift+0xc8>
 80070b4:	e7ea      	b.n	800708c <__lshift+0xac>
 80070b6:	bf00      	nop
 80070b8:	08007c14 	.word	0x08007c14
 80070bc:	08007c2f 	.word	0x08007c2f

080070c0 <__mcmp>:
 80070c0:	b530      	push	{r4, r5, lr}
 80070c2:	6902      	ldr	r2, [r0, #16]
 80070c4:	690c      	ldr	r4, [r1, #16]
 80070c6:	1b12      	subs	r2, r2, r4
 80070c8:	d10e      	bne.n	80070e8 <__mcmp+0x28>
 80070ca:	f100 0314 	add.w	r3, r0, #20
 80070ce:	3114      	adds	r1, #20
 80070d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070e0:	42a5      	cmp	r5, r4
 80070e2:	d003      	beq.n	80070ec <__mcmp+0x2c>
 80070e4:	d305      	bcc.n	80070f2 <__mcmp+0x32>
 80070e6:	2201      	movs	r2, #1
 80070e8:	4610      	mov	r0, r2
 80070ea:	bd30      	pop	{r4, r5, pc}
 80070ec:	4283      	cmp	r3, r0
 80070ee:	d3f3      	bcc.n	80070d8 <__mcmp+0x18>
 80070f0:	e7fa      	b.n	80070e8 <__mcmp+0x28>
 80070f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070f6:	e7f7      	b.n	80070e8 <__mcmp+0x28>

080070f8 <__mdiff>:
 80070f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	460c      	mov	r4, r1
 80070fe:	4606      	mov	r6, r0
 8007100:	4611      	mov	r1, r2
 8007102:	4620      	mov	r0, r4
 8007104:	4690      	mov	r8, r2
 8007106:	f7ff ffdb 	bl	80070c0 <__mcmp>
 800710a:	1e05      	subs	r5, r0, #0
 800710c:	d110      	bne.n	8007130 <__mdiff+0x38>
 800710e:	4629      	mov	r1, r5
 8007110:	4630      	mov	r0, r6
 8007112:	f7ff fd53 	bl	8006bbc <_Balloc>
 8007116:	b930      	cbnz	r0, 8007126 <__mdiff+0x2e>
 8007118:	4b3a      	ldr	r3, [pc, #232]	; (8007204 <__mdiff+0x10c>)
 800711a:	4602      	mov	r2, r0
 800711c:	f240 2132 	movw	r1, #562	; 0x232
 8007120:	4839      	ldr	r0, [pc, #228]	; (8007208 <__mdiff+0x110>)
 8007122:	f7fe fe39 	bl	8005d98 <__assert_func>
 8007126:	2301      	movs	r3, #1
 8007128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800712c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	bfa4      	itt	ge
 8007132:	4643      	movge	r3, r8
 8007134:	46a0      	movge	r8, r4
 8007136:	4630      	mov	r0, r6
 8007138:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800713c:	bfa6      	itte	ge
 800713e:	461c      	movge	r4, r3
 8007140:	2500      	movge	r5, #0
 8007142:	2501      	movlt	r5, #1
 8007144:	f7ff fd3a 	bl	8006bbc <_Balloc>
 8007148:	b920      	cbnz	r0, 8007154 <__mdiff+0x5c>
 800714a:	4b2e      	ldr	r3, [pc, #184]	; (8007204 <__mdiff+0x10c>)
 800714c:	4602      	mov	r2, r0
 800714e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007152:	e7e5      	b.n	8007120 <__mdiff+0x28>
 8007154:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007158:	6926      	ldr	r6, [r4, #16]
 800715a:	60c5      	str	r5, [r0, #12]
 800715c:	f104 0914 	add.w	r9, r4, #20
 8007160:	f108 0514 	add.w	r5, r8, #20
 8007164:	f100 0e14 	add.w	lr, r0, #20
 8007168:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800716c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007170:	f108 0210 	add.w	r2, r8, #16
 8007174:	46f2      	mov	sl, lr
 8007176:	2100      	movs	r1, #0
 8007178:	f859 3b04 	ldr.w	r3, [r9], #4
 800717c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007180:	fa1f f883 	uxth.w	r8, r3
 8007184:	fa11 f18b 	uxtah	r1, r1, fp
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	eba1 0808 	sub.w	r8, r1, r8
 800718e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007192:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007196:	fa1f f888 	uxth.w	r8, r8
 800719a:	1419      	asrs	r1, r3, #16
 800719c:	454e      	cmp	r6, r9
 800719e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071a2:	f84a 3b04 	str.w	r3, [sl], #4
 80071a6:	d8e7      	bhi.n	8007178 <__mdiff+0x80>
 80071a8:	1b33      	subs	r3, r6, r4
 80071aa:	3b15      	subs	r3, #21
 80071ac:	f023 0303 	bic.w	r3, r3, #3
 80071b0:	3304      	adds	r3, #4
 80071b2:	3415      	adds	r4, #21
 80071b4:	42a6      	cmp	r6, r4
 80071b6:	bf38      	it	cc
 80071b8:	2304      	movcc	r3, #4
 80071ba:	441d      	add	r5, r3
 80071bc:	4473      	add	r3, lr
 80071be:	469e      	mov	lr, r3
 80071c0:	462e      	mov	r6, r5
 80071c2:	4566      	cmp	r6, ip
 80071c4:	d30e      	bcc.n	80071e4 <__mdiff+0xec>
 80071c6:	f10c 0203 	add.w	r2, ip, #3
 80071ca:	1b52      	subs	r2, r2, r5
 80071cc:	f022 0203 	bic.w	r2, r2, #3
 80071d0:	3d03      	subs	r5, #3
 80071d2:	45ac      	cmp	ip, r5
 80071d4:	bf38      	it	cc
 80071d6:	2200      	movcc	r2, #0
 80071d8:	441a      	add	r2, r3
 80071da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80071de:	b17b      	cbz	r3, 8007200 <__mdiff+0x108>
 80071e0:	6107      	str	r7, [r0, #16]
 80071e2:	e7a3      	b.n	800712c <__mdiff+0x34>
 80071e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80071e8:	fa11 f288 	uxtah	r2, r1, r8
 80071ec:	1414      	asrs	r4, r2, #16
 80071ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071f2:	b292      	uxth	r2, r2
 80071f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071f8:	f84e 2b04 	str.w	r2, [lr], #4
 80071fc:	1421      	asrs	r1, r4, #16
 80071fe:	e7e0      	b.n	80071c2 <__mdiff+0xca>
 8007200:	3f01      	subs	r7, #1
 8007202:	e7ea      	b.n	80071da <__mdiff+0xe2>
 8007204:	08007c14 	.word	0x08007c14
 8007208:	08007c2f 	.word	0x08007c2f

0800720c <__d2b>:
 800720c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007210:	4689      	mov	r9, r1
 8007212:	2101      	movs	r1, #1
 8007214:	ec57 6b10 	vmov	r6, r7, d0
 8007218:	4690      	mov	r8, r2
 800721a:	f7ff fccf 	bl	8006bbc <_Balloc>
 800721e:	4604      	mov	r4, r0
 8007220:	b930      	cbnz	r0, 8007230 <__d2b+0x24>
 8007222:	4602      	mov	r2, r0
 8007224:	4b25      	ldr	r3, [pc, #148]	; (80072bc <__d2b+0xb0>)
 8007226:	4826      	ldr	r0, [pc, #152]	; (80072c0 <__d2b+0xb4>)
 8007228:	f240 310a 	movw	r1, #778	; 0x30a
 800722c:	f7fe fdb4 	bl	8005d98 <__assert_func>
 8007230:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007234:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007238:	bb35      	cbnz	r5, 8007288 <__d2b+0x7c>
 800723a:	2e00      	cmp	r6, #0
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	d028      	beq.n	8007292 <__d2b+0x86>
 8007240:	4668      	mov	r0, sp
 8007242:	9600      	str	r6, [sp, #0]
 8007244:	f7ff fd82 	bl	8006d4c <__lo0bits>
 8007248:	9900      	ldr	r1, [sp, #0]
 800724a:	b300      	cbz	r0, 800728e <__d2b+0x82>
 800724c:	9a01      	ldr	r2, [sp, #4]
 800724e:	f1c0 0320 	rsb	r3, r0, #32
 8007252:	fa02 f303 	lsl.w	r3, r2, r3
 8007256:	430b      	orrs	r3, r1
 8007258:	40c2      	lsrs	r2, r0
 800725a:	6163      	str	r3, [r4, #20]
 800725c:	9201      	str	r2, [sp, #4]
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	61a3      	str	r3, [r4, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	bf14      	ite	ne
 8007266:	2202      	movne	r2, #2
 8007268:	2201      	moveq	r2, #1
 800726a:	6122      	str	r2, [r4, #16]
 800726c:	b1d5      	cbz	r5, 80072a4 <__d2b+0x98>
 800726e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007272:	4405      	add	r5, r0
 8007274:	f8c9 5000 	str.w	r5, [r9]
 8007278:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800727c:	f8c8 0000 	str.w	r0, [r8]
 8007280:	4620      	mov	r0, r4
 8007282:	b003      	add	sp, #12
 8007284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800728c:	e7d5      	b.n	800723a <__d2b+0x2e>
 800728e:	6161      	str	r1, [r4, #20]
 8007290:	e7e5      	b.n	800725e <__d2b+0x52>
 8007292:	a801      	add	r0, sp, #4
 8007294:	f7ff fd5a 	bl	8006d4c <__lo0bits>
 8007298:	9b01      	ldr	r3, [sp, #4]
 800729a:	6163      	str	r3, [r4, #20]
 800729c:	2201      	movs	r2, #1
 800729e:	6122      	str	r2, [r4, #16]
 80072a0:	3020      	adds	r0, #32
 80072a2:	e7e3      	b.n	800726c <__d2b+0x60>
 80072a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072ac:	f8c9 0000 	str.w	r0, [r9]
 80072b0:	6918      	ldr	r0, [r3, #16]
 80072b2:	f7ff fd2b 	bl	8006d0c <__hi0bits>
 80072b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072ba:	e7df      	b.n	800727c <__d2b+0x70>
 80072bc:	08007c14 	.word	0x08007c14
 80072c0:	08007c2f 	.word	0x08007c2f

080072c4 <_calloc_r>:
 80072c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072c6:	fba1 2402 	umull	r2, r4, r1, r2
 80072ca:	b94c      	cbnz	r4, 80072e0 <_calloc_r+0x1c>
 80072cc:	4611      	mov	r1, r2
 80072ce:	9201      	str	r2, [sp, #4]
 80072d0:	f7fd ff46 	bl	8005160 <_malloc_r>
 80072d4:	9a01      	ldr	r2, [sp, #4]
 80072d6:	4605      	mov	r5, r0
 80072d8:	b930      	cbnz	r0, 80072e8 <_calloc_r+0x24>
 80072da:	4628      	mov	r0, r5
 80072dc:	b003      	add	sp, #12
 80072de:	bd30      	pop	{r4, r5, pc}
 80072e0:	220c      	movs	r2, #12
 80072e2:	6002      	str	r2, [r0, #0]
 80072e4:	2500      	movs	r5, #0
 80072e6:	e7f8      	b.n	80072da <_calloc_r+0x16>
 80072e8:	4621      	mov	r1, r4
 80072ea:	f7fd fec5 	bl	8005078 <memset>
 80072ee:	e7f4      	b.n	80072da <_calloc_r+0x16>

080072f0 <__sfputc_r>:
 80072f0:	6893      	ldr	r3, [r2, #8]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	b410      	push	{r4}
 80072f8:	6093      	str	r3, [r2, #8]
 80072fa:	da08      	bge.n	800730e <__sfputc_r+0x1e>
 80072fc:	6994      	ldr	r4, [r2, #24]
 80072fe:	42a3      	cmp	r3, r4
 8007300:	db01      	blt.n	8007306 <__sfputc_r+0x16>
 8007302:	290a      	cmp	r1, #10
 8007304:	d103      	bne.n	800730e <__sfputc_r+0x1e>
 8007306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800730a:	f7fe bc73 	b.w	8005bf4 <__swbuf_r>
 800730e:	6813      	ldr	r3, [r2, #0]
 8007310:	1c58      	adds	r0, r3, #1
 8007312:	6010      	str	r0, [r2, #0]
 8007314:	7019      	strb	r1, [r3, #0]
 8007316:	4608      	mov	r0, r1
 8007318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800731c:	4770      	bx	lr

0800731e <__sfputs_r>:
 800731e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	4614      	mov	r4, r2
 8007326:	18d5      	adds	r5, r2, r3
 8007328:	42ac      	cmp	r4, r5
 800732a:	d101      	bne.n	8007330 <__sfputs_r+0x12>
 800732c:	2000      	movs	r0, #0
 800732e:	e007      	b.n	8007340 <__sfputs_r+0x22>
 8007330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007334:	463a      	mov	r2, r7
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff ffda 	bl	80072f0 <__sfputc_r>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d1f3      	bne.n	8007328 <__sfputs_r+0xa>
 8007340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007344 <_vfiprintf_r>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	460d      	mov	r5, r1
 800734a:	b09d      	sub	sp, #116	; 0x74
 800734c:	4614      	mov	r4, r2
 800734e:	4698      	mov	r8, r3
 8007350:	4606      	mov	r6, r0
 8007352:	b118      	cbz	r0, 800735c <_vfiprintf_r+0x18>
 8007354:	6983      	ldr	r3, [r0, #24]
 8007356:	b90b      	cbnz	r3, 800735c <_vfiprintf_r+0x18>
 8007358:	f7fd fd46 	bl	8004de8 <__sinit>
 800735c:	4b89      	ldr	r3, [pc, #548]	; (8007584 <_vfiprintf_r+0x240>)
 800735e:	429d      	cmp	r5, r3
 8007360:	d11b      	bne.n	800739a <_vfiprintf_r+0x56>
 8007362:	6875      	ldr	r5, [r6, #4]
 8007364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007366:	07d9      	lsls	r1, r3, #31
 8007368:	d405      	bmi.n	8007376 <_vfiprintf_r+0x32>
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	059a      	lsls	r2, r3, #22
 800736e:	d402      	bmi.n	8007376 <_vfiprintf_r+0x32>
 8007370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007372:	f7fd fdfc 	bl	8004f6e <__retarget_lock_acquire_recursive>
 8007376:	89ab      	ldrh	r3, [r5, #12]
 8007378:	071b      	lsls	r3, r3, #28
 800737a:	d501      	bpl.n	8007380 <_vfiprintf_r+0x3c>
 800737c:	692b      	ldr	r3, [r5, #16]
 800737e:	b9eb      	cbnz	r3, 80073bc <_vfiprintf_r+0x78>
 8007380:	4629      	mov	r1, r5
 8007382:	4630      	mov	r0, r6
 8007384:	f7fe fc9a 	bl	8005cbc <__swsetup_r>
 8007388:	b1c0      	cbz	r0, 80073bc <_vfiprintf_r+0x78>
 800738a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800738c:	07dc      	lsls	r4, r3, #31
 800738e:	d50e      	bpl.n	80073ae <_vfiprintf_r+0x6a>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007394:	b01d      	add	sp, #116	; 0x74
 8007396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739a:	4b7b      	ldr	r3, [pc, #492]	; (8007588 <_vfiprintf_r+0x244>)
 800739c:	429d      	cmp	r5, r3
 800739e:	d101      	bne.n	80073a4 <_vfiprintf_r+0x60>
 80073a0:	68b5      	ldr	r5, [r6, #8]
 80073a2:	e7df      	b.n	8007364 <_vfiprintf_r+0x20>
 80073a4:	4b79      	ldr	r3, [pc, #484]	; (800758c <_vfiprintf_r+0x248>)
 80073a6:	429d      	cmp	r5, r3
 80073a8:	bf08      	it	eq
 80073aa:	68f5      	ldreq	r5, [r6, #12]
 80073ac:	e7da      	b.n	8007364 <_vfiprintf_r+0x20>
 80073ae:	89ab      	ldrh	r3, [r5, #12]
 80073b0:	0598      	lsls	r0, r3, #22
 80073b2:	d4ed      	bmi.n	8007390 <_vfiprintf_r+0x4c>
 80073b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073b6:	f7fd fddb 	bl	8004f70 <__retarget_lock_release_recursive>
 80073ba:	e7e9      	b.n	8007390 <_vfiprintf_r+0x4c>
 80073bc:	2300      	movs	r3, #0
 80073be:	9309      	str	r3, [sp, #36]	; 0x24
 80073c0:	2320      	movs	r3, #32
 80073c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80073ca:	2330      	movs	r3, #48	; 0x30
 80073cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007590 <_vfiprintf_r+0x24c>
 80073d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073d4:	f04f 0901 	mov.w	r9, #1
 80073d8:	4623      	mov	r3, r4
 80073da:	469a      	mov	sl, r3
 80073dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073e0:	b10a      	cbz	r2, 80073e6 <_vfiprintf_r+0xa2>
 80073e2:	2a25      	cmp	r2, #37	; 0x25
 80073e4:	d1f9      	bne.n	80073da <_vfiprintf_r+0x96>
 80073e6:	ebba 0b04 	subs.w	fp, sl, r4
 80073ea:	d00b      	beq.n	8007404 <_vfiprintf_r+0xc0>
 80073ec:	465b      	mov	r3, fp
 80073ee:	4622      	mov	r2, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	4630      	mov	r0, r6
 80073f4:	f7ff ff93 	bl	800731e <__sfputs_r>
 80073f8:	3001      	adds	r0, #1
 80073fa:	f000 80aa 	beq.w	8007552 <_vfiprintf_r+0x20e>
 80073fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007400:	445a      	add	r2, fp
 8007402:	9209      	str	r2, [sp, #36]	; 0x24
 8007404:	f89a 3000 	ldrb.w	r3, [sl]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80a2 	beq.w	8007552 <_vfiprintf_r+0x20e>
 800740e:	2300      	movs	r3, #0
 8007410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007418:	f10a 0a01 	add.w	sl, sl, #1
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	9307      	str	r3, [sp, #28]
 8007420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007424:	931a      	str	r3, [sp, #104]	; 0x68
 8007426:	4654      	mov	r4, sl
 8007428:	2205      	movs	r2, #5
 800742a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800742e:	4858      	ldr	r0, [pc, #352]	; (8007590 <_vfiprintf_r+0x24c>)
 8007430:	f7f8 fea6 	bl	8000180 <memchr>
 8007434:	9a04      	ldr	r2, [sp, #16]
 8007436:	b9d8      	cbnz	r0, 8007470 <_vfiprintf_r+0x12c>
 8007438:	06d1      	lsls	r1, r2, #27
 800743a:	bf44      	itt	mi
 800743c:	2320      	movmi	r3, #32
 800743e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007442:	0713      	lsls	r3, r2, #28
 8007444:	bf44      	itt	mi
 8007446:	232b      	movmi	r3, #43	; 0x2b
 8007448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800744c:	f89a 3000 	ldrb.w	r3, [sl]
 8007450:	2b2a      	cmp	r3, #42	; 0x2a
 8007452:	d015      	beq.n	8007480 <_vfiprintf_r+0x13c>
 8007454:	9a07      	ldr	r2, [sp, #28]
 8007456:	4654      	mov	r4, sl
 8007458:	2000      	movs	r0, #0
 800745a:	f04f 0c0a 	mov.w	ip, #10
 800745e:	4621      	mov	r1, r4
 8007460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007464:	3b30      	subs	r3, #48	; 0x30
 8007466:	2b09      	cmp	r3, #9
 8007468:	d94e      	bls.n	8007508 <_vfiprintf_r+0x1c4>
 800746a:	b1b0      	cbz	r0, 800749a <_vfiprintf_r+0x156>
 800746c:	9207      	str	r2, [sp, #28]
 800746e:	e014      	b.n	800749a <_vfiprintf_r+0x156>
 8007470:	eba0 0308 	sub.w	r3, r0, r8
 8007474:	fa09 f303 	lsl.w	r3, r9, r3
 8007478:	4313      	orrs	r3, r2
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	46a2      	mov	sl, r4
 800747e:	e7d2      	b.n	8007426 <_vfiprintf_r+0xe2>
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	1d19      	adds	r1, r3, #4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	9103      	str	r1, [sp, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	bfbb      	ittet	lt
 800748c:	425b      	neglt	r3, r3
 800748e:	f042 0202 	orrlt.w	r2, r2, #2
 8007492:	9307      	strge	r3, [sp, #28]
 8007494:	9307      	strlt	r3, [sp, #28]
 8007496:	bfb8      	it	lt
 8007498:	9204      	strlt	r2, [sp, #16]
 800749a:	7823      	ldrb	r3, [r4, #0]
 800749c:	2b2e      	cmp	r3, #46	; 0x2e
 800749e:	d10c      	bne.n	80074ba <_vfiprintf_r+0x176>
 80074a0:	7863      	ldrb	r3, [r4, #1]
 80074a2:	2b2a      	cmp	r3, #42	; 0x2a
 80074a4:	d135      	bne.n	8007512 <_vfiprintf_r+0x1ce>
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	1d1a      	adds	r2, r3, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	9203      	str	r2, [sp, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfb8      	it	lt
 80074b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80074b6:	3402      	adds	r4, #2
 80074b8:	9305      	str	r3, [sp, #20]
 80074ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075a0 <_vfiprintf_r+0x25c>
 80074be:	7821      	ldrb	r1, [r4, #0]
 80074c0:	2203      	movs	r2, #3
 80074c2:	4650      	mov	r0, sl
 80074c4:	f7f8 fe5c 	bl	8000180 <memchr>
 80074c8:	b140      	cbz	r0, 80074dc <_vfiprintf_r+0x198>
 80074ca:	2340      	movs	r3, #64	; 0x40
 80074cc:	eba0 000a 	sub.w	r0, r0, sl
 80074d0:	fa03 f000 	lsl.w	r0, r3, r0
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	4303      	orrs	r3, r0
 80074d8:	3401      	adds	r4, #1
 80074da:	9304      	str	r3, [sp, #16]
 80074dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e0:	482c      	ldr	r0, [pc, #176]	; (8007594 <_vfiprintf_r+0x250>)
 80074e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074e6:	2206      	movs	r2, #6
 80074e8:	f7f8 fe4a 	bl	8000180 <memchr>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d03f      	beq.n	8007570 <_vfiprintf_r+0x22c>
 80074f0:	4b29      	ldr	r3, [pc, #164]	; (8007598 <_vfiprintf_r+0x254>)
 80074f2:	bb1b      	cbnz	r3, 800753c <_vfiprintf_r+0x1f8>
 80074f4:	9b03      	ldr	r3, [sp, #12]
 80074f6:	3307      	adds	r3, #7
 80074f8:	f023 0307 	bic.w	r3, r3, #7
 80074fc:	3308      	adds	r3, #8
 80074fe:	9303      	str	r3, [sp, #12]
 8007500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007502:	443b      	add	r3, r7
 8007504:	9309      	str	r3, [sp, #36]	; 0x24
 8007506:	e767      	b.n	80073d8 <_vfiprintf_r+0x94>
 8007508:	fb0c 3202 	mla	r2, ip, r2, r3
 800750c:	460c      	mov	r4, r1
 800750e:	2001      	movs	r0, #1
 8007510:	e7a5      	b.n	800745e <_vfiprintf_r+0x11a>
 8007512:	2300      	movs	r3, #0
 8007514:	3401      	adds	r4, #1
 8007516:	9305      	str	r3, [sp, #20]
 8007518:	4619      	mov	r1, r3
 800751a:	f04f 0c0a 	mov.w	ip, #10
 800751e:	4620      	mov	r0, r4
 8007520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007524:	3a30      	subs	r2, #48	; 0x30
 8007526:	2a09      	cmp	r2, #9
 8007528:	d903      	bls.n	8007532 <_vfiprintf_r+0x1ee>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0c5      	beq.n	80074ba <_vfiprintf_r+0x176>
 800752e:	9105      	str	r1, [sp, #20]
 8007530:	e7c3      	b.n	80074ba <_vfiprintf_r+0x176>
 8007532:	fb0c 2101 	mla	r1, ip, r1, r2
 8007536:	4604      	mov	r4, r0
 8007538:	2301      	movs	r3, #1
 800753a:	e7f0      	b.n	800751e <_vfiprintf_r+0x1da>
 800753c:	ab03      	add	r3, sp, #12
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	462a      	mov	r2, r5
 8007542:	4b16      	ldr	r3, [pc, #88]	; (800759c <_vfiprintf_r+0x258>)
 8007544:	a904      	add	r1, sp, #16
 8007546:	4630      	mov	r0, r6
 8007548:	f7fd ff1e 	bl	8005388 <_printf_float>
 800754c:	4607      	mov	r7, r0
 800754e:	1c78      	adds	r0, r7, #1
 8007550:	d1d6      	bne.n	8007500 <_vfiprintf_r+0x1bc>
 8007552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007554:	07d9      	lsls	r1, r3, #31
 8007556:	d405      	bmi.n	8007564 <_vfiprintf_r+0x220>
 8007558:	89ab      	ldrh	r3, [r5, #12]
 800755a:	059a      	lsls	r2, r3, #22
 800755c:	d402      	bmi.n	8007564 <_vfiprintf_r+0x220>
 800755e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007560:	f7fd fd06 	bl	8004f70 <__retarget_lock_release_recursive>
 8007564:	89ab      	ldrh	r3, [r5, #12]
 8007566:	065b      	lsls	r3, r3, #25
 8007568:	f53f af12 	bmi.w	8007390 <_vfiprintf_r+0x4c>
 800756c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800756e:	e711      	b.n	8007394 <_vfiprintf_r+0x50>
 8007570:	ab03      	add	r3, sp, #12
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	462a      	mov	r2, r5
 8007576:	4b09      	ldr	r3, [pc, #36]	; (800759c <_vfiprintf_r+0x258>)
 8007578:	a904      	add	r1, sp, #16
 800757a:	4630      	mov	r0, r6
 800757c:	f7fe f9a8 	bl	80058d0 <_printf_i>
 8007580:	e7e4      	b.n	800754c <_vfiprintf_r+0x208>
 8007582:	bf00      	nop
 8007584:	080079e0 	.word	0x080079e0
 8007588:	08007a00 	.word	0x08007a00
 800758c:	080079c0 	.word	0x080079c0
 8007590:	08007d8c 	.word	0x08007d8c
 8007594:	08007d96 	.word	0x08007d96
 8007598:	08005389 	.word	0x08005389
 800759c:	0800731f 	.word	0x0800731f
 80075a0:	08007d92 	.word	0x08007d92

080075a4 <_read_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d07      	ldr	r5, [pc, #28]	; (80075c4 <_read_r+0x20>)
 80075a8:	4604      	mov	r4, r0
 80075aa:	4608      	mov	r0, r1
 80075ac:	4611      	mov	r1, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	602a      	str	r2, [r5, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f7f9 ff1d 	bl	80013f2 <_read>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_read_r+0x1e>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_read_r+0x1e>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	200002a4 	.word	0x200002a4

080075c8 <__ascii_wctomb>:
 80075c8:	b149      	cbz	r1, 80075de <__ascii_wctomb+0x16>
 80075ca:	2aff      	cmp	r2, #255	; 0xff
 80075cc:	bf85      	ittet	hi
 80075ce:	238a      	movhi	r3, #138	; 0x8a
 80075d0:	6003      	strhi	r3, [r0, #0]
 80075d2:	700a      	strbls	r2, [r1, #0]
 80075d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80075d8:	bf98      	it	ls
 80075da:	2001      	movls	r0, #1
 80075dc:	4770      	bx	lr
 80075de:	4608      	mov	r0, r1
 80075e0:	4770      	bx	lr

080075e2 <abort>:
 80075e2:	b508      	push	{r3, lr}
 80075e4:	2006      	movs	r0, #6
 80075e6:	f000 f82b 	bl	8007640 <raise>
 80075ea:	2001      	movs	r0, #1
 80075ec:	f7f9 fef7 	bl	80013de <_exit>

080075f0 <_raise_r>:
 80075f0:	291f      	cmp	r1, #31
 80075f2:	b538      	push	{r3, r4, r5, lr}
 80075f4:	4604      	mov	r4, r0
 80075f6:	460d      	mov	r5, r1
 80075f8:	d904      	bls.n	8007604 <_raise_r+0x14>
 80075fa:	2316      	movs	r3, #22
 80075fc:	6003      	str	r3, [r0, #0]
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007606:	b112      	cbz	r2, 800760e <_raise_r+0x1e>
 8007608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800760c:	b94b      	cbnz	r3, 8007622 <_raise_r+0x32>
 800760e:	4620      	mov	r0, r4
 8007610:	f000 f830 	bl	8007674 <_getpid_r>
 8007614:	462a      	mov	r2, r5
 8007616:	4601      	mov	r1, r0
 8007618:	4620      	mov	r0, r4
 800761a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800761e:	f000 b817 	b.w	8007650 <_kill_r>
 8007622:	2b01      	cmp	r3, #1
 8007624:	d00a      	beq.n	800763c <_raise_r+0x4c>
 8007626:	1c59      	adds	r1, r3, #1
 8007628:	d103      	bne.n	8007632 <_raise_r+0x42>
 800762a:	2316      	movs	r3, #22
 800762c:	6003      	str	r3, [r0, #0]
 800762e:	2001      	movs	r0, #1
 8007630:	e7e7      	b.n	8007602 <_raise_r+0x12>
 8007632:	2400      	movs	r4, #0
 8007634:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007638:	4628      	mov	r0, r5
 800763a:	4798      	blx	r3
 800763c:	2000      	movs	r0, #0
 800763e:	e7e0      	b.n	8007602 <_raise_r+0x12>

08007640 <raise>:
 8007640:	4b02      	ldr	r3, [pc, #8]	; (800764c <raise+0xc>)
 8007642:	4601      	mov	r1, r0
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	f7ff bfd3 	b.w	80075f0 <_raise_r>
 800764a:	bf00      	nop
 800764c:	20000018 	.word	0x20000018

08007650 <_kill_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	; (8007670 <_kill_r+0x20>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	4611      	mov	r1, r2
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	f7f9 feae 	bl	80013be <_kill>
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	d102      	bne.n	800766c <_kill_r+0x1c>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	b103      	cbz	r3, 800766c <_kill_r+0x1c>
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	bd38      	pop	{r3, r4, r5, pc}
 800766e:	bf00      	nop
 8007670:	200002a4 	.word	0x200002a4

08007674 <_getpid_r>:
 8007674:	f7f9 be9b 	b.w	80013ae <_getpid>

08007678 <_init>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr

08007684 <_fini>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr
