
Bachelor-thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  08007628  08007628  00017628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007cec  08007cec  00017cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000008  08007cf0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c8  200001e8  08007ed0  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002b0  08007ed0  000202b0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fe1f  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000024ef  00000000  00000000  00030037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001408  00000000  00000000  00032528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001300  00000000  00000000  00033930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000227c9  00000000  00000000  00034c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f5bb  00000000  00000000  000573f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000db58c  00000000  00000000  000669b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00141f40  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000063a8  00000000  00000000  00141f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stabstr      0000004e  00000000  00000000  00148338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08007610 	.word	0x08007610

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	08007610 	.word	0x08007610

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b68:	f023 0218 	bic.w	r2, r3, #24
 8000b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <send_start_signal>:
    printf("Fastest response time us:       %f\n", min);
    printf("Slowest response time us:       %f\n", max);
    printf("--------------------------------------------------------\n");
}

void send_start_signal(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <send_start_signal+0x1c>)
 8000bc2:	f001 f88b 	bl	8001cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <send_start_signal+0x1c>)
 8000bcc:	f001 f886 	bl	8001cdc <HAL_GPIO_WritePin>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	48000800 	.word	0x48000800

08000bd8 <lightsleep_test_interrupt>:

        run_counter++;
    }
}

void lightsleep_test_interrupt(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	while(runAmount < maxRuns){
 8000bdc:	e006      	b.n	8000bec <lightsleep_test_interrupt+0x14>
        send_start_signal();
 8000bde:	f7ff ffeb 	bl	8000bb8 <send_start_signal>

        // Enter Stop mode
        HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000be2:	2101      	movs	r1, #1
 8000be4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000be8:	f001 f8b8 	bl	8001d5c <HAL_PWR_EnterSTOPMode>
	while(runAmount < maxRuns){
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <lightsleep_test_interrupt+0x28>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <lightsleep_test_interrupt+0x2c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3f2      	bcc.n	8000bde <lightsleep_test_interrupt+0x6>
        //HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
        //send_stop_signal();
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000290 	.word	0x20000290
 8000c04:	20000294 	.word	0x20000294

08000c08 <send16Bit>:
        printf("DEATH\n");
    }
}


_Bool send16Bit(uint16_t *send){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2, 10) == HAL_OK){
 8000c10:	230a      	movs	r3, #10
 8000c12:	2202      	movs	r2, #2
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <send16Bit+0x28>)
 8000c18:	f003 f925 	bl	8003e66 <HAL_SPI_Transmit>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <send16Bit+0x1e>
		return true;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <send16Bit+0x20>
	}
	return false;
 8000c26:	2300      	movs	r3, #0

}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000228 	.word	0x20000228

08000c34 <send_settings_spi>:
	if(HAL_SPI_Receive(&hspi1, (uint8_t*)readInto, 2, 10) == HAL_OK){
		return true;
	}
	return false;
}
void send_settings_spi(uint16_t sleep_time, uint16_t run_amount, uint16_t run_type){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	4613      	mov	r3, r2
 8000c44:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef sendSleepTimeReady = HAL_SPI_Transmit(&hspi1, &SLEEP_TIME_ADDR, 1, 10);
 8000c46:	230a      	movs	r3, #10
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4925      	ldr	r1, [pc, #148]	; (8000ce0 <send_settings_spi+0xac>)
 8000c4c:	4825      	ldr	r0, [pc, #148]	; (8000ce4 <send_settings_spi+0xb0>)
 8000c4e:	f003 f90a 	bl	8003e66 <HAL_SPI_Transmit>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
	if(sendSleepTimeReady == HAL_OK){
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10c      	bne.n	8000c76 <send_settings_spi+0x42>
		if(!send16Bit(&sleep_time)){
 8000c5c:	1dbb      	adds	r3, r7, #6
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffd2 	bl	8000c08 <send16Bit>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f083 0301 	eor.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <send_settings_spi+0x42>
			printf("COULD NOT SEND SLEEP TIME");
 8000c70:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <send_settings_spi+0xb4>)
 8000c72:	f004 ff1f 	bl	8005ab4 <iprintf>
		}
	}
	else{
		//
	}
	HAL_StatusTypeDef sendRunAmountReady = HAL_SPI_Transmit(&hspi1, &RUN_AMOUNT_ADDR, 1, 10);
 8000c76:	230a      	movs	r3, #10
 8000c78:	2201      	movs	r2, #1
 8000c7a:	491c      	ldr	r1, [pc, #112]	; (8000cec <send_settings_spi+0xb8>)
 8000c7c:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <send_settings_spi+0xb0>)
 8000c7e:	f003 f8f2 	bl	8003e66 <HAL_SPI_Transmit>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73bb      	strb	r3, [r7, #14]
	if(sendRunAmountReady == HAL_OK){
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10c      	bne.n	8000ca6 <send_settings_spi+0x72>
		if(!send16Bit(&run_amount)){
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffba 	bl	8000c08 <send16Bit>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f083 0301 	eor.w	r3, r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <send_settings_spi+0x72>
			printf("COULD NOT SEND RUN AMOUNT");
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <send_settings_spi+0xbc>)
 8000ca2:	f004 ff07 	bl	8005ab4 <iprintf>
		}
	}
	HAL_StatusTypeDef sendRunTypeReady = HAL_SPI_Transmit(&hspi1, &TEST_MODE_ADDR, 1, 10);
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4912      	ldr	r1, [pc, #72]	; (8000cf4 <send_settings_spi+0xc0>)
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <send_settings_spi+0xb0>)
 8000cae:	f003 f8da 	bl	8003e66 <HAL_SPI_Transmit>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	737b      	strb	r3, [r7, #13]
	if(sendRunTypeReady == HAL_OK){
 8000cb6:	7b7b      	ldrb	r3, [r7, #13]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10c      	bne.n	8000cd6 <send_settings_spi+0xa2>
		if(!send16Bit(&run_type)){
 8000cbc:	1cbb      	adds	r3, r7, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffa2 	bl	8000c08 <send16Bit>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <send_settings_spi+0xa2>
			printf("COULD NOT SEND RUN TYPE");
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <send_settings_spi+0xc4>)
 8000cd2:	f004 feef 	bl	8005ab4 <iprintf>
		}
	}

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000228 	.word	0x20000228
 8000ce8:	0800780c 	.word	0x0800780c
 8000cec:	20000009 	.word	0x20000009
 8000cf0:	08007828 	.word	0x08007828
 8000cf4:	2000000a 	.word	0x2000000a
 8000cf8:	08007844 	.word	0x08007844

08000cfc <receive_data_SPI>:

uint16_t* receive_data_SPI(uint16_t run_amount){
 8000cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d00:	b089      	sub	sp, #36	; 0x24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	80fb      	strh	r3, [r7, #6]
 8000d08:	466b      	mov	r3, sp
 8000d0a:	461e      	mov	r6, r3
	uint8_t bytesread[run_amount * 2];
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	0059      	lsls	r1, r3, #1
 8000d10:	1e4b      	subs	r3, r1, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	460a      	mov	r2, r1
 8000d16:	2300      	movs	r3, #0
 8000d18:	4690      	mov	r8, r2
 8000d1a:	4699      	mov	r9, r3
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d30:	460a      	mov	r2, r1
 8000d32:	2300      	movs	r3, #0
 8000d34:	4614      	mov	r4, r2
 8000d36:	461d      	mov	r5, r3
 8000d38:	f04f 0200 	mov.w	r2, #0
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	00eb      	lsls	r3, r5, #3
 8000d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d46:	00e2      	lsls	r2, r4, #3
 8000d48:	460b      	mov	r3, r1
 8000d4a:	3307      	adds	r3, #7
 8000d4c:	08db      	lsrs	r3, r3, #3
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	ebad 0d03 	sub.w	sp, sp, r3
 8000d54:	466b      	mov	r3, sp
 8000d56:	3300      	adds	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
	uint16_t *received_data = malloc(run_amount * sizeof(uint16_t));
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 f938 	bl	8004fd4 <malloc>
 8000d64:	4603      	mov	r3, r0
 8000d66:	60fb      	str	r3, [r7, #12]
	if (received_data == NULL){
		// Handle error
	}

	// Wait for the RECEIVE_READY_Pin to go high before proceeding
	while (HAL_GPIO_ReadPin(RECEIVE_READY_GPIO_Port, RECEIVE_READY_Pin) == GPIO_PIN_RESET)
 8000d68:	bf00      	nop
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	4822      	ldr	r0, [pc, #136]	; (8000df8 <receive_data_SPI+0xfc>)
 8000d6e:	f000 ff9d 	bl	8001cac <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f8      	beq.n	8000d6a <receive_data_SPI+0x6e>
	{
		// add timeout or yield to other tasks here if necessary
	}

	for (int i = 0; i < run_amount * 2; i += 2){
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	e00b      	b.n	8000d96 <receive_data_SPI+0x9a>
		HAL_SPI_Receive(&hspi1, &bytesread[i], 2, HAL_MAX_DELAY); // Receive two bytes of data over SPI
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	18d1      	adds	r1, r2, r3
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	2202      	movs	r2, #2
 8000d8a:	481c      	ldr	r0, [pc, #112]	; (8000dfc <receive_data_SPI+0x100>)
 8000d8c:	f003 f9d9 	bl	8004142 <HAL_SPI_Receive>
	for (int i = 0; i < run_amount * 2; i += 2){
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	3302      	adds	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbee      	blt.n	8000d7e <receive_data_SPI+0x82>
	}

	// Process the received data and store it in received_data
	for (int i = 0; i < run_amount; i++){
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	e017      	b.n	8000dd6 <receive_data_SPI+0xda>
		uint16_t data = bytesread[i * 2 + 1] << 8 | bytesread[i * 2];
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	3301      	adds	r3, #1
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	6939      	ldr	r1, [r7, #16]
 8000dba:	5ccb      	ldrb	r3, [r1, r3]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	817b      	strh	r3, [r7, #10]
		received_data[i] = data;
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	897a      	ldrh	r2, [r7, #10]
 8000dce:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < run_amount; i++){
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbe3      	blt.n	8000da6 <receive_data_SPI+0xaa>
	}

	printf("%d\n", run_amount); // Print the number of SPI transfers made
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <receive_data_SPI+0x104>)
 8000de4:	f004 fe66 	bl	8005ab4 <iprintf>
	return received_data;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	46b5      	mov	sp, r6
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3724      	adds	r7, #36	; 0x24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df6:	bf00      	nop
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	20000228 	.word	0x20000228
 8000e00:	0800785c 	.word	0x0800785c

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f000 fc15 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 f833 	bl	8000e78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e12:	f000 f88d 	bl	8000f30 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 f919 	bl	800104c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e1a:	f000 f8db 	bl	8000fd4 <MX_SPI1_Init>
  MX_RTC_Init();
 8000e1e:	f000 f8a5 	bl	8000f6c <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 while(!finished)
 8000e22:	e01c      	b.n	8000e5e <main+0x5a>
	 {
		 uint16_t runs = 100;
 8000e24:	2364      	movs	r3, #100	; 0x64
 8000e26:	80fb      	strh	r3, [r7, #6]
		 maxRuns = runs;
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <main+0x6c>)
 8000e2c:	6013      	str	r3, [r2, #0]
		 send_settings_spi(10000, runs, 1);
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	2201      	movs	r2, #1
 8000e32:	4619      	mov	r1, r3
 8000e34:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e38:	f7ff fefc 	bl	8000c34 <send_settings_spi>
		 HAL_Delay(10);
 8000e3c:	200a      	movs	r0, #10
 8000e3e:	f000 fc81 	bl	8001744 <HAL_Delay>
		 HAL_SuspendTick();
 8000e42:	f000 fca3 	bl	800178c <HAL_SuspendTick>
		 lightsleep_test_interrupt();
 8000e46:	f7ff fec7 	bl	8000bd8 <lightsleep_test_interrupt>
		 //lightsleep(1000, 10);
		 uint16_t *data = receive_data_SPI(10);
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f7ff ff56 	bl	8000cfc <receive_data_SPI>
 8000e50:	6038      	str	r0, [r7, #0]
	     // Free the allocated memory for received_data
		 free(data);
 8000e52:	6838      	ldr	r0, [r7, #0]
 8000e54:	f004 f8c6 	bl	8004fe4 <free>
		 finished = true;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <main+0x70>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
	 while(!finished)
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <main+0x70>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f083 0301 	eor.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1db      	bne.n	8000e24 <main+0x20>
 8000e6c:	e7f7      	b.n	8000e5e <main+0x5a>
 8000e6e:	bf00      	nop
 8000e70:	20000294 	.word	0x20000294
 8000e74:	2000028c 	.word	0x2000028c

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b09a      	sub	sp, #104	; 0x68
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	2248      	movs	r2, #72	; 0x48
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f004 f8c2 	bl	8005010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e9e:	f000 ff4d 	bl	8001d3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000ea2:	2010      	movs	r0, #16
 8000ea4:	f7ff fe58 	bl	8000b58 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <SystemClock_Config+0xb4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <SystemClock_Config+0xb4>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <SystemClock_Config+0xb4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed8:	2340      	movs	r3, #64	; 0x40
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fb23 	bl	8002530 <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000ef0:	f000 f94a 	bl	8001188 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000ef4:	236f      	movs	r3, #111	; 0x6f
 8000ef6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2101      	movs	r1, #1
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fe7f 	bl	8002c18 <HAL_RCC_ClockConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f20:	f000 f932 	bl	8001188 <Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3768      	adds	r7, #104	; 0x68
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	58000400 	.word	0x58000400

08000f30 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2250      	movs	r2, #80	; 0x50
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 f867 	bl	8005010 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f46:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fa71 	bl	800343a <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000f5e:	f000 f913 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	; 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_RTC_Init+0x60>)
 8000f72:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <MX_RTC_Init+0x64>)
 8000f74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_RTC_Init+0x60>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_RTC_Init+0x60>)
 8000f7e:	227f      	movs	r2, #127	; 0x7f
 8000f80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_RTC_Init+0x60>)
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_RTC_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_RTC_Init+0x60>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MX_RTC_Init+0x60>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_RTC_Init+0x60>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fa0:	480a      	ldr	r0, [pc, #40]	; (8000fcc <MX_RTC_Init+0x60>)
 8000fa2:	f002 fcd1 	bl	8003948 <HAL_RTC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000fac:	f000 f8ec 	bl	8001188 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f245 010b 	movw	r1, #20491	; 0x500b
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_RTC_Init+0x60>)
 8000fb8:	f002 fdc6 	bl	8003b48 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000fc2:	f000 f8e1 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000204 	.word	0x20000204
 8000fd0:	40002800 	.word	0x40002800

08000fd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_SPI1_Init+0x70>)
 8000fda:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <MX_SPI1_Init+0x74>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_SPI1_Init+0x70>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_SPI1_Init+0x70>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_SPI1_Init+0x70>)
 8000fee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ff2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_SPI1_Init+0x70>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_SPI1_Init+0x70>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_SPI1_Init+0x70>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_SPI1_Init+0x70>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100c:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <MX_SPI1_Init+0x70>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_SPI1_Init+0x70>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MX_SPI1_Init+0x70>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_SPI1_Init+0x70>)
 8001020:	2207      	movs	r2, #7
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <MX_SPI1_Init+0x70>)
 8001026:	2200      	movs	r2, #0
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_SPI1_Init+0x70>)
 800102c:	2208      	movs	r2, #8
 800102e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_SPI1_Init+0x70>)
 8001032:	f002 fe75 	bl	8003d20 <HAL_SPI_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 800103c:	f000 f8a4 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000228 	.word	0x20000228
 8001048:	40013000 	.word	0x40013000

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001060:	2004      	movs	r0, #4
 8001062:	f7ff fd8f 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff fd8c 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	2002      	movs	r0, #2
 800106e:	f7ff fd89 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	2008      	movs	r0, #8
 8001074:	f7ff fd86 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIMER_PIN_Pin|RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2105      	movs	r1, #5
 800107c:	482d      	ldr	r0, [pc, #180]	; (8001134 <MX_GPIO_Init+0xe8>)
 800107e:	f000 fe2d 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2133      	movs	r1, #51	; 0x33
 8001086:	482c      	ldr	r0, [pc, #176]	; (8001138 <MX_GPIO_Init+0xec>)
 8001088:	f000 fe28 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TIMER_PIN_Pin RESPONSE_PIN_Pin */
  GPIO_InitStruct.Pin = TIMER_PIN_Pin|RESPONSE_PIN_Pin;
 800108c:	2305      	movs	r3, #5
 800108e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001094:	2302      	movs	r3, #2
 8001096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4824      	ldr	r0, [pc, #144]	; (8001134 <MX_GPIO_Init+0xe8>)
 80010a2:	f000 fc93 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_PIN_Pin;
 80010a6:	2302      	movs	r3, #2
 80010a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IRQ_PIN_GPIO_Port, &GPIO_InitStruct);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	481e      	ldr	r0, [pc, #120]	; (8001134 <MX_GPIO_Init+0xe8>)
 80010ba:	f000 fc87 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010be:	2310      	movs	r3, #16
 80010c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4819      	ldr	r0, [pc, #100]	; (8001134 <MX_GPIO_Init+0xe8>)
 80010d0:	f000 fc7c 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin CHIP_SELECT_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin;
 80010d4:	2333      	movs	r3, #51	; 0x33
 80010d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_GPIO_Init+0xec>)
 80010ea:	f000 fc6f 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 B3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 80010ee:	2303      	movs	r3, #3
 80010f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	480f      	ldr	r0, [pc, #60]	; (800113c <MX_GPIO_Init+0xf0>)
 8001100:	f000 fc64 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RECEIVE_READY_Pin */
  GPIO_InitStruct.Pin = RECEIVE_READY_Pin;
 8001104:	2340      	movs	r3, #64	; 0x40
 8001106:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(RECEIVE_READY_GPIO_Port, &GPIO_InitStruct);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4808      	ldr	r0, [pc, #32]	; (8001138 <MX_GPIO_Init+0xec>)
 8001116:	f000 fc59 	bl	80019cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2007      	movs	r0, #7
 8001120:	f000 fc1f 	bl	8001962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001124:	2007      	movs	r0, #7
 8001126:	f000 fc36 	bl	8001996 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	48000800 	.word	0x48000800
 8001138:	48000400 	.word	0x48000400
 800113c:	48000c00 	.word	0x48000c00

08001140 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == IRQ_PIN_Pin) {
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d111      	bne.n	8001174 <HAL_GPIO_EXTI_Callback+0x34>
	  //HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2104      	movs	r1, #4
 8001154:	480a      	ldr	r0, [pc, #40]	; (8001180 <HAL_GPIO_EXTI_Callback+0x40>)
 8001156:	f000 fdc1 	bl	8001cdc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2104      	movs	r1, #4
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <HAL_GPIO_EXTI_Callback+0x40>)
 8001160:	f000 fdbc 	bl	8001cdc <HAL_GPIO_WritePin>
	  runAmount++;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_GPIO_EXTI_Callback+0x44>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_GPIO_EXTI_Callback+0x44>)
 800116c:	6013      	str	r3, [r2, #0]
	  // HAL_ResumeTick();
	  // HAL_Delay(10);
	  HAL_PWR_DisableSleepOnExit();
 800116e:	f000 fe0d 	bl	8001d8c <HAL_PWR_DisableSleepOnExit>
  } else {
      __NOP();
  }
}
 8001172:	e000      	b.n	8001176 <HAL_GPIO_EXTI_Callback+0x36>
      __NOP();
 8001174:	bf00      	nop
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	48000800 	.word	0x48000800
 8001184:	20000290 	.word	0x20000290

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	e7fe      	b.n	8001190 <Error_Handler+0x8>

08001192 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_AHB2_GRP1_EnableClock>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b085      	sub	sp, #20
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001202:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4013      	ands	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001234:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123c:	68fb      	ldr	r3, [r7, #12]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b096      	sub	sp, #88	; 0x58
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	2250      	movs	r2, #80	; 0x50
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fed1 	bl	8005010 <memset>
  if(hrtc->Instance==RTC)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <HAL_RTC_MspInit+0x64>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d11d      	bne.n	80012b4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800127c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800127e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4618      	mov	r0, r3
 800128a:	f002 f8d6 	bl	800343a <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001294:	f7ff ff78 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001298:	f7ff ff7b 	bl	8001192 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800129c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012a0:	f7ff ffa1 	bl	80011e6 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 fb5a 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 fb71 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3758      	adds	r7, #88	; 0x58
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40002800 	.word	0x40002800

080012c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_SPI_MspInit+0x5c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d117      	bne.n	8001312 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012e6:	f7ff ff97 	bl	8001218 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff ff62 	bl	80011b4 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012f0:	23f0      	movs	r3, #240	; 0xf0
 80012f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001300:	2305      	movs	r3, #5
 8001302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f000 fb5d 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40013000 	.word	0x40013000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <NMI_Handler+0x4>

08001326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <MemManage_Handler+0x4>

08001332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <UsageFault_Handler+0x4>

0800133e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136c:	f000 f9be 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <RTC_WKUP_IRQHandler+0x10>)
 800137a:	f002 fca1 	bl	8003cc0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000204 	.word	0x20000204

08001388 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_PIN_Pin);
 800138c:	2002      	movs	r0, #2
 800138e:	f000 fcbd 	bl	8001d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}

08001396 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  return 1;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_kill>:

int _kill(int pid, int sig)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013b0:	f003 fbc6 	bl	8004b40 <__errno>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2216      	movs	r2, #22
 80013b8:	601a      	str	r2, [r3, #0]
  return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_exit>:

void _exit (int status)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013ce:	f04f 31ff 	mov.w	r1, #4294967295
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffe7 	bl	80013a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013d8:	e7fe      	b.n	80013d8 <_exit+0x12>

080013da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e00a      	b.n	8001402 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ec:	f3af 8000 	nop.w
 80013f0:	4601      	mov	r1, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf0      	blt.n	80013ec <_read+0x12>
  }

  return len;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e009      	b.n	800143a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	60ba      	str	r2, [r7, #8]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	dbf1      	blt.n	8001426 <_write+0x12>
  }
  return len;
 8001442:	687b      	ldr	r3, [r7, #4]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <_close>:

int _close(int file)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001474:	605a      	str	r2, [r3, #4]
  return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_isatty>:

int _isatty(int file)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f003 fb2c 	bl	8004b40 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20030000 	.word	0x20030000
 8001514:	00000400 	.word	0x00000400
 8001518:	20000298 	.word	0x20000298
 800151c:	200002b0 	.word	0x200002b0

08001520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <SystemInit+0x98>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <SystemInit+0x98>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001548:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800154c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <SystemInit+0x9c>)
 800155a:	4013      	ands	r3, r2
 800155c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156a:	f023 0305 	bic.w	r3, r3, #5
 800156e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800157a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158a:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <SystemInit+0xa0>)
 800158c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800158e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <SystemInit+0xa0>)
 8001594:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00
 80015bc:	faf6fefb 	.word	0xfaf6fefb
 80015c0:	22041000 	.word	0x22041000

080015c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c8:	3304      	adds	r3, #4

080015ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015ce:	d3f9      	bcc.n	80015c4 <CopyDataInit>
  bx lr
 80015d0:	4770      	bx	lr

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015d4:	3004      	adds	r0, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>
  bx lr
 80015da:	4770      	bx	lr

080015dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e0:	f7ff ff9e 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <LoopForever+0x6>)
 80015e6:	490c      	ldr	r1, [pc, #48]	; (8001618 <LoopForever+0xa>)
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <LoopForever+0xe>)
 80015ea:	2300      	movs	r3, #0
 80015ec:	f7ff ffed 	bl	80015ca <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <LoopForever+0x12>)
 80015f2:	490c      	ldr	r1, [pc, #48]	; (8001624 <LoopForever+0x16>)
 80015f4:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <LoopForever+0x1a>)
 80015f6:	2300      	movs	r3, #0
 80015f8:	f7ff ffe7 	bl	80015ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <LoopForever+0x1e>)
 80015fe:	490c      	ldr	r1, [pc, #48]	; (8001630 <LoopForever+0x22>)
 8001600:	2300      	movs	r3, #0
 8001602:	f7ff ffe8 	bl	80015d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001606:	f003 fc59 	bl	8004ebc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800160a:	f7ff fbfb 	bl	8000e04 <main>

0800160e <LoopForever>:

LoopForever:
  b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   r0, =_estack
 8001610:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001614:	20000008 	.word	0x20000008
 8001618:	200001e8 	.word	0x200001e8
 800161c:	08007cf0 	.word	0x08007cf0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001620:	20030000 	.word	0x20030000
 8001624:	20030000 	.word	0x20030000
 8001628:	08007ed0 	.word	0x08007ed0
  INIT_BSS _sbss, _ebss
 800162c:	200001e8 	.word	0x200001e8
 8001630:	200002b0 	.word	0x200002b0

08001634 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_Init+0x3c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_Init+0x3c>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f000 f97c 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001654:	2000      	movs	r0, #0
 8001656:	f000 f80f 	bl	8001678 <HAL_InitTick>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	e001      	b.n	800166a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001666:	f7ff fdf0 	bl	800124a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800166a:	79fb      	ldrb	r3, [r7, #7]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	58004000 	.word	0x58004000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_InitTick+0x6c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d024      	beq.n	80016d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800168c:	f001 fc70 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_InitTick+0x6c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f984 	bl	80019b2 <HAL_SYSTICK_Config>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10f      	bne.n	80016d0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	d809      	bhi.n	80016ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b6:	2200      	movs	r2, #0
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	f04f 30ff 	mov.w	r0, #4294967295
 80016be:	f000 f950 	bl	8001962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_InitTick+0x70>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e007      	b.n	80016da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e004      	b.n	80016da <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e001      	b.n	80016da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000014 	.word	0x20000014
 80016e8:	20000010 	.word	0x20000010

080016ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000014 	.word	0x20000014
 8001710:	2000029c 	.word	0x2000029c

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000029c 	.word	0x2000029c

0800172c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTickPrio+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000010 	.word	0x20000010

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffe2 	bl	8001714 <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffd2 	bl	8001714 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000014 	.word	0x20000014

0800178c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_SuspendTick+0x1c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_SuspendTick+0x1c>)
 8001796:	f023 0302 	bic.w	r3, r3, #2
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff40 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff90 	bl	80018a0 <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5f 	bl	800184c <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff33 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa4 	bl	8001908 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	e14c      	b.n	8001c76 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 813e 	beq.w	8001c70 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d005      	beq.n	8001a0c <HAL_GPIO_Init+0x40>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0201 	and.w	r2, r3, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d017      	beq.n	8001aaa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d123      	bne.n	8001afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0203 	and.w	r2, r3, #3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8098 	beq.w	8001c70 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b40:	4a54      	ldr	r2, [pc, #336]	; (8001c94 <HAL_GPIO_Init+0x2c8>)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b6a:	d019      	beq.n	8001ba0 <HAL_GPIO_Init+0x1d4>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_GPIO_Init+0x1d0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a49      	ldr	r2, [pc, #292]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00d      	beq.n	8001b98 <HAL_GPIO_Init+0x1cc>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <HAL_GPIO_Init+0x2d4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d007      	beq.n	8001b94 <HAL_GPIO_Init+0x1c8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a47      	ldr	r2, [pc, #284]	; (8001ca4 <HAL_GPIO_Init+0x2d8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_GPIO_Init+0x1c4>
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	e008      	b.n	8001ba2 <HAL_GPIO_Init+0x1d6>
 8001b90:	2307      	movs	r3, #7
 8001b92:	e006      	b.n	8001ba2 <HAL_GPIO_Init+0x1d6>
 8001b94:	2303      	movs	r3, #3
 8001b96:	e004      	b.n	8001ba2 <HAL_GPIO_Init+0x1d6>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x1d6>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_GPIO_Init+0x1d6>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	f002 0203 	and.w	r2, r2, #3
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bb2:	4938      	ldr	r1, [pc, #224]	; (8001c94 <HAL_GPIO_Init+0x2c8>)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001be4:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c0e:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f47f aeab 	bne.w	80019dc <HAL_GPIO_Init+0x10>
  }
}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40010000 	.word	0x40010000
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	48000c00 	.word	0x48000c00
 8001ca4:	48001000 	.word	0x48001000
 8001ca8:	58000800 	.word	0x58000800

08001cac <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fa08 	bl	8001140 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	58000800 	.word	0x58000800

08001d3c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	58000400 	.word	0x58000400

08001d5c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d6e:	d104      	bne.n	8001d7a <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f852 	bl	8001e1c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8001d78:	e003      	b.n	8001d82 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f823 	bl	8001dc8 <HAL_PWREx_EnterSTOP0Mode>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_PWR_DisableSleepOnExit>:
  * @note   Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *         re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001d96:	f023 0302 	bic.w	r3, r3, #2
 8001d9a:	6113      	str	r3, [r2, #16]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	58000400 	.word	0x58000400

08001dc8 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001dd8:	f023 0307 	bic.w	r3, r3, #7
 8001ddc:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001df0:	bf30      	wfi
 8001df2:	e002      	b.n	8001dfa <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001df4:	bf40      	sev
    __WFE();
 8001df6:	bf20      	wfe
    __WFE();
 8001df8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6113      	str	r3, [r2, #16]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	58000400 	.word	0x58000400
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0307 	bic.w	r3, r3, #7
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001e48:	bf30      	wfi
 8001e4a:	e002      	b.n	8001e52 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001e4c:	bf40      	sev
    __WFE();
 8001e4e:	bf20      	wfe
    __WFE();
 8001e50:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6113      	str	r3, [r2, #16]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	58000400 	.word	0x58000400
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e86:	d101      	bne.n	8001e8c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_RCC_HSE_Enable>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_RCC_HSE_Disable>:
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_RCC_HSE_IsReady>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ee6:	d101      	bne.n	8001eec <LL_RCC_HSE_IsReady+0x18>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <LL_RCC_HSE_IsReady+0x1a>
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_RCC_HSI_Enable>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_RCC_HSI_Disable>:
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f28:	6013      	str	r3, [r2, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_RCC_HSI_IsReady>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f46:	d101      	bne.n	8001f4c <LL_RCC_HSI_IsReady+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_RCC_HSI_IsReady+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_RCC_HSI48_Enable>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_RCC_HSI48_Disable>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RCC_HSI48_IsReady>:
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d101      	bne.n	8001fde <LL_RCC_HSI48_IsReady+0x18>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <LL_RCC_HSI48_IsReady+0x1a>
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_RCC_LSE_Enable>:
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_RCC_LSE_Disable>:
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_RCC_LSE_EnableBypass>:
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_RCC_LSE_DisableBypass>:
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_RCC_LSE_IsReady>:
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b02      	cmp	r3, #2
 8002084:	d101      	bne.n	800208a <LL_RCC_LSE_IsReady+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_RCC_LSE_IsReady+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_RCC_LSI1_Enable>:
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_RCC_LSI1_Disable>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_RCC_LSI1_IsReady>:
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d101      	bne.n	80020f2 <LL_RCC_LSI1_IsReady+0x18>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_RCC_LSI1_IsReady+0x1a>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_RCC_LSI2_Enable>:
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_RCC_LSI2_Disable>:
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_LSI2_IsReady>:
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b08      	cmp	r3, #8
 8002154:	d101      	bne.n	800215a <LL_RCC_LSI2_IsReady+0x18>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <LL_RCC_LSI2_IsReady+0x1a>
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_RCC_LSI2_SetTrimming>:
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002176:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_RCC_MSI_Enable>:
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_RCC_MSI_Disable>:
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6013      	str	r3, [r2, #0]
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_RCC_MSI_IsReady>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d101      	bne.n	80021e6 <LL_RCC_MSI_IsReady+0x16>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_RCC_MSI_IsReady+0x18>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_RCC_MSI_SetRange>:
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_RCC_MSI_GetRange>:
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2bb0      	cmp	r3, #176	; 0xb0
 8002230:	d901      	bls.n	8002236 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002232:	23b0      	movs	r3, #176	; 0xb0
 8002234:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002236:	687b      	ldr	r3, [r7, #4]
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_RCC_SetSysClkSource>:
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 0203 	bic.w	r2, r3, #3
 8002280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_RCC_GetSysClkSource>:
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_RCC_SetAHBPrescaler>:
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_RCC_SetAHB4Prescaler>:
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_RCC_SetAPB1Prescaler>:
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_RCC_SetAPB2Prescaler>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4313      	orrs	r3, r2
 8002372:	608b      	str	r3, [r1, #8]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_RCC_GetAHBPrescaler>:
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_RCC_GetAHB4Prescaler>:
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e4:	6013      	str	r3, [r2, #0]
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002402:	d101      	bne.n	8002408 <LL_RCC_PLL_IsReady+0x18>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <LL_RCC_PLL_IsReady+0x1a>
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800244a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0303 	and.w	r3, r3, #3
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002488:	d101      	bne.n	800248e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800249e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ae:	d101      	bne.n	80024b4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d101      	bne.n	80024da <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024f8:	d101      	bne.n	80024fe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002518:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800251c:	d101      	bne.n	8002522 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b08d      	sub	sp, #52	; 0x34
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e363      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 808d 	beq.w	800266a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002550:	f7ff fea1 	bl	8002296 <LL_RCC_GetSysClkSource>
 8002554:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002556:	f7ff ff82 	bl	800245e <LL_RCC_PLL_GetMainSource>
 800255a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x3e>
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d147      	bne.n	80025f8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	2b01      	cmp	r3, #1
 800256c:	d144      	bne.n	80025f8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e347      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800257e:	f7ff fe4c 	bl	800221a <LL_RCC_MSI_GetRange>
 8002582:	4603      	mov	r3, r0
 8002584:	429c      	cmp	r4, r3
 8002586:	d914      	bls.n	80025b2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fd03 	bl	8002f98 <RCC_SetFlashLatencyFromMSIRange>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e336      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fe26 	bl	80021f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fe4a 	bl	8002244 <LL_RCC_MSI_SetCalibTrimming>
 80025b0:	e013      	b.n	80025da <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fe1b 	bl	80021f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fe3f 	bl	8002244 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fce4 	bl	8002f98 <RCC_SetFlashLatencyFromMSIRange>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e317      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025da:	f000 fcc9 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 80025de:	4603      	mov	r3, r0
 80025e0:	4aa4      	ldr	r2, [pc, #656]	; (8002874 <HAL_RCC_OscConfig+0x344>)
 80025e2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025e4:	4ba4      	ldr	r3, [pc, #656]	; (8002878 <HAL_RCC_OscConfig+0x348>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff f845 	bl	8001678 <HAL_InitTick>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d039      	beq.n	8002668 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e308      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01e      	beq.n	800263e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002600:	f7ff fdc8 	bl	8002194 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002604:	f7ff f886 	bl	8001714 <HAL_GetTick>
 8002608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800260c:	f7ff f882 	bl	8001714 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e2f5      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800261e:	f7ff fdd7 	bl	80021d0 <LL_RCC_MSI_IsReady>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f1      	beq.n	800260c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fde0 	bl	80021f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fe04 	bl	8002244 <LL_RCC_MSI_SetCalibTrimming>
 800263c:	e015      	b.n	800266a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800263e:	f7ff fdb8 	bl	80021b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002642:	f7ff f867 	bl	8001714 <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264a:	f7ff f863 	bl	8001714 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e2d6      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800265c:	f7ff fdb8 	bl	80021d0 <LL_RCC_MSI_IsReady>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f1      	bne.n	800264a <HAL_RCC_OscConfig+0x11a>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002668:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d047      	beq.n	8002706 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002676:	f7ff fe0e 	bl	8002296 <LL_RCC_GetSysClkSource>
 800267a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800267c:	f7ff feef 	bl	800245e <LL_RCC_PLL_GetMainSource>
 8002680:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x164>
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d108      	bne.n	80026a0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d134      	bne.n	8002706 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e2b4      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_OscConfig+0x180>
 80026aa:	f7ff fbf5 	bl	8001e98 <LL_RCC_HSE_Enable>
 80026ae:	e001      	b.n	80026b4 <HAL_RCC_OscConfig+0x184>
 80026b0:	f7ff fc01 	bl	8001eb6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d012      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7ff f82a 	bl	8001714 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff f826 	bl	8001714 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e299      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80026d6:	f7ff fbfd 	bl	8001ed4 <LL_RCC_HSE_IsReady>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f1      	beq.n	80026c4 <HAL_RCC_OscConfig+0x194>
 80026e0:	e011      	b.n	8002706 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7ff f817 	bl	8001714 <HAL_GetTick>
 80026e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ea:	f7ff f813 	bl	8001714 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	; 0x64
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e286      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80026fc:	f7ff fbea 	bl	8001ed4 <LL_RCC_HSE_IsReady>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f1      	bne.n	80026ea <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d04c      	beq.n	80027ac <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002712:	f7ff fdc0 	bl	8002296 <LL_RCC_GetSysClkSource>
 8002716:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002718:	f7ff fea1 	bl	800245e <LL_RCC_PLL_GetMainSource>
 800271c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d005      	beq.n	8002730 <HAL_RCC_OscConfig+0x200>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d10e      	bne.n	8002748 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d10b      	bne.n	8002748 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e266      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fc09 	bl	8001f58 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002746:	e031      	b.n	80027ac <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d019      	beq.n	8002784 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002750:	f7ff fbd2 	bl	8001ef8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe ffde 	bl	8001714 <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe ffda 	bl	8001714 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e24d      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800276e:	f7ff fbe1 	bl	8001f34 <LL_RCC_HSI_IsReady>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f1      	beq.n	800275c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fbeb 	bl	8001f58 <LL_RCC_HSI_SetCalibTrimming>
 8002782:	e013      	b.n	80027ac <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002784:	f7ff fbc7 	bl	8001f16 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe ffc4 	bl	8001714 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe ffc0 	bl	8001714 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e233      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80027a2:	f7ff fbc7 	bl	8001f34 <LL_RCC_HSI_IsReady>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f1      	bne.n	8002790 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a3 	beq.w	800290c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d076      	beq.n	80028bc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d046      	beq.n	8002868 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80027da:	f7ff fc7e 	bl	80020da <LL_RCC_LSI1_IsReady>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d113      	bne.n	800280c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80027e4:	f7ff fc57 	bl	8002096 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027e8:	f7fe ff94 	bl	8001714 <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027f0:	f7fe ff90 	bl	8001714 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e203      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002802:	f7ff fc6a 	bl	80020da <LL_RCC_LSI1_IsReady>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f1      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800280c:	f7ff fc77 	bl	80020fe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe ff80 	bl	8001714 <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002818:	f7fe ff7c 	bl	8001714 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b03      	cmp	r3, #3
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1ef      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800282a:	f7ff fc8a 	bl	8002142 <LL_RCC_LSI2_IsReady>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f1      	beq.n	8002818 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fc94 	bl	8002166 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800283e:	f7ff fc3b 	bl	80020b8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fe ff67 	bl	8001714 <HAL_GetTick>
 8002846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800284a:	f7fe ff63 	bl	8001714 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1d6      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800285c:	f7ff fc3d 	bl	80020da <LL_RCC_LSI1_IsReady>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f1      	bne.n	800284a <HAL_RCC_OscConfig+0x31a>
 8002866:	e051      	b.n	800290c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002868:	f7ff fc15 	bl	8002096 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe ff52 	bl	8001714 <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002872:	e00c      	b.n	800288e <HAL_RCC_OscConfig+0x35e>
 8002874:	2000000c 	.word	0x2000000c
 8002878:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800287c:	f7fe ff4a 	bl	8001714 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1bd      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800288e:	f7ff fc24 	bl	80020da <LL_RCC_LSI1_IsReady>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f1      	beq.n	800287c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002898:	f7ff fc42 	bl	8002120 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800289e:	f7fe ff39 	bl	8001714 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1ac      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80028b0:	f7ff fc47 	bl	8002142 <LL_RCC_LSI2_IsReady>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f1      	bne.n	800289e <HAL_RCC_OscConfig+0x36e>
 80028ba:	e027      	b.n	800290c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80028bc:	f7ff fc30 	bl	8002120 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe ff28 	bl	8001714 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028c8:	f7fe ff24 	bl	8001714 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e197      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80028da:	f7ff fc32 	bl	8002142 <LL_RCC_LSI2_IsReady>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f1      	bne.n	80028c8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80028e4:	f7ff fbe8 	bl	80020b8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe ff14 	bl	8001714 <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028f0:	f7fe ff10 	bl	8001714 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e183      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002902:	f7ff fbea 	bl	80020da <LL_RCC_LSI1_IsReady>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f1      	bne.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d05b      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002918:	4ba7      	ldr	r3, [pc, #668]	; (8002bb8 <HAL_RCC_OscConfig+0x688>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d114      	bne.n	800294e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002924:	f7ff fa0a 	bl	8001d3c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002928:	f7fe fef4 	bl	8001714 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002930:	f7fe fef0 	bl	8001714 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e163      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002942:	4b9d      	ldr	r3, [pc, #628]	; (8002bb8 <HAL_RCC_OscConfig+0x688>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_RCC_OscConfig+0x42c>
 8002956:	f7ff fb48 	bl	8001fea <LL_RCC_LSE_Enable>
 800295a:	e00c      	b.n	8002976 <HAL_RCC_OscConfig+0x446>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d104      	bne.n	800296e <HAL_RCC_OscConfig+0x43e>
 8002964:	f7ff fb63 	bl	800202e <LL_RCC_LSE_EnableBypass>
 8002968:	f7ff fb3f 	bl	8001fea <LL_RCC_LSE_Enable>
 800296c:	e003      	b.n	8002976 <HAL_RCC_OscConfig+0x446>
 800296e:	f7ff fb4d 	bl	800200c <LL_RCC_LSE_Disable>
 8002972:	f7ff fb6d 	bl	8002050 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d014      	beq.n	80029a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297e:	f7fe fec9 	bl	8001714 <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe fec5 	bl	8001714 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e136      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800299c:	f7ff fb69 	bl	8002072 <LL_RCC_LSE_IsReady>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0ef      	beq.n	8002986 <HAL_RCC_OscConfig+0x456>
 80029a6:	e013      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe feb4 	bl	8001714 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe feb0 	bl	8001714 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e121      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80029c6:	f7ff fb54 	bl	8002072 <LL_RCC_LSE_IsReady>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ef      	bne.n	80029b0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d02c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d014      	beq.n	8002a0e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029e4:	f7ff facd 	bl	8001f82 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7fe fe94 	bl	8001714 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029f0:	f7fe fe90 	bl	8001714 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e103      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a02:	f7ff fae0 	bl	8001fc6 <LL_RCC_HSI48_IsReady>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f1      	beq.n	80029f0 <HAL_RCC_OscConfig+0x4c0>
 8002a0c:	e013      	b.n	8002a36 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a0e:	f7ff fac9 	bl	8001fa4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a12:	f7fe fe7f 	bl	8001714 <HAL_GetTick>
 8002a16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a1a:	f7fe fe7b 	bl	8001714 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0ee      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a2c:	f7ff facb 	bl	8001fc6 <LL_RCC_HSI48_IsReady>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f1      	bne.n	8002a1a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80e4 	beq.w	8002c08 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a40:	f7ff fc29 	bl	8002296 <LL_RCC_GetSysClkSource>
 8002a44:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	f040 80b4 	bne.w	8002bc0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0203 	and.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d123      	bne.n	8002aae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d11c      	bne.n	8002aae <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d114      	bne.n	8002aae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d10d      	bne.n	8002aae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d05d      	beq.n	8002b6a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	d058      	beq.n	8002b66 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0a1      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ac6:	f7ff fc84 	bl	80023d2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aca:	f7fe fe23 	bl	8001714 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe fe1f 	bl	8001714 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e092      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ef      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_RCC_OscConfig+0x68c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b04:	4311      	orrs	r1, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b0a:	0212      	lsls	r2, r2, #8
 8002b0c:	4311      	orrs	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b12:	4311      	orrs	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b18:	4311      	orrs	r1, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b28:	f7ff fc44 	bl	80023b4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b3c:	f7fe fdea 	bl	8001714 <HAL_GetTick>
 8002b40:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fde6 	bl	8001714 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e059      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ef      	beq.n	8002b44 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b64:	e050      	b.n	8002c08 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e04f      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d147      	bne.n	8002c08 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b78:	f7ff fc1c 	bl	80023b4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b8c:	f7fe fdc2 	bl	8001714 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fdbe 	bl	8001714 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e031      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ef      	beq.n	8002b94 <HAL_RCC_OscConfig+0x664>
 8002bb4:	e028      	b.n	8002c08 <HAL_RCC_OscConfig+0x6d8>
 8002bb6:	bf00      	nop
 8002bb8:	58000400 	.word	0x58000400
 8002bbc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	d01e      	beq.n	8002c04 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	f7ff fc04 	bl	80023d2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe fda3 	bl	8001714 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe fd9f 	bl	8001714 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e012      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ef      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_OscConfig+0x6e4>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60cb      	str	r3, [r1, #12]
 8002c02:	e001      	b.n	8002c08 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3734      	adds	r7, #52	; 0x34
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd90      	pop	{r4, r7, pc}
 8002c12:	bf00      	nop
 8002c14:	eefefffc 	.word	0xeefefffc

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e12d      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b98      	ldr	r3, [pc, #608]	; (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d91b      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b95      	ldr	r3, [pc, #596]	; (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 0207 	bic.w	r2, r3, #7
 8002c42:	4993      	ldr	r1, [pc, #588]	; (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fd63 	bl	8001714 <HAL_GetTick>
 8002c4e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c52:	f7fe fd5f 	bl	8001714 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e111      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c64:	4b8a      	ldr	r3, [pc, #552]	; (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d1ef      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d016      	beq.n	8002cac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fb13 	bl	80022ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c88:	f7fe fd44 	bl	8001714 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c90:	f7fe fd40 	bl	8001714 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0f2      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ca2:	f7ff fbe8 	bl	8002476 <LL_RCC_IsActiveFlag_HPRE>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f1      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fb0a 	bl	80022d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cc2:	f7fe fd27 	bl	8001714 <HAL_GetTick>
 8002cc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cca:	f7fe fd23 	bl	8001714 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0d5      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cdc:	f7ff fbdd 	bl	800249a <LL_RCC_IsActiveFlag_C2HPRE>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f1      	beq.n	8002cca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fb03 	bl	8002302 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fd0a 	bl	8001714 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d04:	f7fe fd06 	bl	8001714 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0b8      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d16:	f7ff fbd3 	bl	80024c0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f1      	beq.n	8002d04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d016      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fafd 	bl	8002330 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d36:	f7fe fced 	bl	8001714 <HAL_GetTick>
 8002d3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d3e:	f7fe fce9 	bl	8001714 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e09b      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d50:	f7ff fbc9 	bl	80024e6 <LL_RCC_IsActiveFlag_PPRE1>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f1      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d017      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff faf3 	bl	8002358 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d72:	f7fe fccf 	bl	8001714 <HAL_GetTick>
 8002d76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d7a:	f7fe fccb 	bl	8001714 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e07d      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d8c:	f7ff fbbd 	bl	800250a <LL_RCC_IsActiveFlag_PPRE2>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f1      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d043      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d106      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002daa:	f7ff f893 	bl	8001ed4 <LL_RCC_HSE_IsReady>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d11e      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e067      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002dc0:	f7ff fb16 	bl	80023f0 <LL_RCC_PLL_IsReady>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d113      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e05c      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002dd6:	f7ff f9fb 	bl	80021d0 <LL_RCC_MSI_IsReady>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d108      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e051      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002de4:	f7ff f8a6 	bl	8001f34 <LL_RCC_HSI_IsReady>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e04a      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fa39 	bl	800226e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fc8a 	bl	8001714 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7fe fc86 	bl	8001714 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e036      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	f7ff fa3c 	bl	8002296 <LL_RCC_GetSysClkSource>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d1ec      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2a:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d21b      	bcs.n	8002e70 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 0207 	bic.w	r2, r3, #7
 8002e40:	4913      	ldr	r1, [pc, #76]	; (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e48:	f7fe fc64 	bl	8001714 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e50:	f7fe fc60 	bl	8001714 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e012      	b.n	8002e88 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_ClockConfig+0x278>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1ef      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e70:	f000 f87e 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <HAL_RCC_ClockConfig+0x27c>)
 8002e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002e7a:	f7fe fc57 	bl	800172c <HAL_GetTickPrio>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fbf9 	bl	8001678 <HAL_InitTick>
 8002e86:	4603      	mov	r3, r0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	58004000 	.word	0x58004000
 8002e94:	2000000c 	.word	0x2000000c

08002e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e9e:	f7ff f9fa 	bl	8002296 <LL_RCC_GetSysClkSource>
 8002ea2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002eaa:	f7ff f9b6 	bl	800221a <LL_RCC_MSI_GetRange>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	4a2b      	ldr	r2, [pc, #172]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e04b      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d102      	bne.n	8002ecc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ec6:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	e045      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d10a      	bne.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ed2:	f7fe ffcf 	bl	8001e74 <LL_RCC_HSE_IsEnabledDiv2>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e03a      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e037      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002ee8:	f7ff fab9 	bl	800245e <LL_RCC_PLL_GetMainSource>
 8002eec:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d003      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x64>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x6a>
 8002efa:	e00d      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002efe:	60bb      	str	r3, [r7, #8]
        break;
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f02:	f7fe ffb7 	bl	8001e74 <LL_RCC_HSE_IsEnabledDiv2>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d102      	bne.n	8002f12 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f0e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f10:	e00d      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f14:	60bb      	str	r3, [r7, #8]
        break;
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f18:	f7ff f97f 	bl	800221a <LL_RCC_MSI_GetRange>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	4a0f      	ldr	r2, [pc, #60]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	60bb      	str	r3, [r7, #8]
        break;
 8002f2c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002f2e:	f7ff fa71 	bl	8002414 <LL_RCC_PLL_GetN>
 8002f32:	4602      	mov	r2, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	fb03 f402 	mul.w	r4, r3, r2
 8002f3a:	f7ff fa84 	bl	8002446 <LL_RCC_PLL_GetDivider>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	3301      	adds	r3, #1
 8002f44:	fbb4 f4f3 	udiv	r4, r4, r3
 8002f48:	f7ff fa71 	bl	800242e <LL_RCC_PLL_GetR>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	0f5b      	lsrs	r3, r3, #29
 8002f50:	3301      	adds	r3, #1
 8002f52:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f56:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002f58:	68fb      	ldr	r3, [r7, #12]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	080078cc 	.word	0x080078cc
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	01e84800 	.word	0x01e84800

08002f70 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b598      	push	{r3, r4, r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002f74:	f7ff ff90 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002f78:	4604      	mov	r4, r0
 8002f7a:	f7ff fa01 	bl	8002380 <LL_RCC_GetAHBPrescaler>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	4a03      	ldr	r2, [pc, #12]	; (8002f94 <HAL_RCC_GetHCLKFreq+0x24>)
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd98      	pop	{r3, r4, r7, pc}
 8002f94:	0800788c 	.word	0x0800788c

08002f98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2bb0      	cmp	r3, #176	; 0xb0
 8002fa4:	d903      	bls.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e007      	b.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002fbe:	f7ff f9eb 	bl	8002398 <LL_RCC_GetAHB4Prescaler>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	0c9c      	lsrs	r4, r3, #18
 8002fe2:	f7fe fee3 	bl	8001dac <HAL_PWREx_GetVoltageRange>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4620      	mov	r0, r4
 8002fec:	f000 f80c 	bl	8003008 <RCC_SetFlashLatency>
 8002ff0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	080078cc 	.word	0x080078cc
 8003000:	0800788c 	.word	0x0800788c
 8003004:	431bde83 	.word	0x431bde83

08003008 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b093      	sub	sp, #76	; 0x4c
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <RCC_SetFlashLatency+0xe8>)
 8003014:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800301a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800301e:	4a35      	ldr	r2, [pc, #212]	; (80030f4 <RCC_SetFlashLatency+0xec>)
 8003020:	f107 031c 	add.w	r3, r7, #28
 8003024:	ca07      	ldmia	r2, {r0, r1, r2}
 8003026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800302a:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <RCC_SetFlashLatency+0xf0>)
 800302c:	f107 040c 	add.w	r4, r7, #12
 8003030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003036:	2300      	movs	r3, #0
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003040:	d11a      	bne.n	8003078 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003042:	2300      	movs	r3, #0
 8003044:	643b      	str	r3, [r7, #64]	; 0x40
 8003046:	e013      	b.n	8003070 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	3348      	adds	r3, #72	; 0x48
 800304e:	443b      	add	r3, r7
 8003050:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d807      	bhi.n	800306a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800305a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	3348      	adds	r3, #72	; 0x48
 8003060:	443b      	add	r3, r7
 8003062:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003066:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003068:	e020      	b.n	80030ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800306a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306c:	3301      	adds	r3, #1
 800306e:	643b      	str	r3, [r7, #64]	; 0x40
 8003070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003072:	2b03      	cmp	r3, #3
 8003074:	d9e8      	bls.n	8003048 <RCC_SetFlashLatency+0x40>
 8003076:	e019      	b.n	80030ac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003078:	2300      	movs	r3, #0
 800307a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800307c:	e013      	b.n	80030a6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	3348      	adds	r3, #72	; 0x48
 8003084:	443b      	add	r3, r7
 8003086:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d807      	bhi.n	80030a0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3348      	adds	r3, #72	; 0x48
 8003096:	443b      	add	r3, r7
 8003098:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800309c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800309e:	e005      	b.n	80030ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a2:	3301      	adds	r3, #1
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d9e8      	bls.n	800307e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <RCC_SetFlashLatency+0xf4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 0207 	bic.w	r2, r3, #7
 80030b4:	4911      	ldr	r1, [pc, #68]	; (80030fc <RCC_SetFlashLatency+0xf4>)
 80030b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030bc:	f7fe fb2a 	bl	8001714 <HAL_GetTick>
 80030c0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80030c2:	e008      	b.n	80030d6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030c4:	f7fe fb26 	bl	8001714 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e007      	b.n	80030e6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <RCC_SetFlashLatency+0xf4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1ef      	bne.n	80030c4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	374c      	adds	r7, #76	; 0x4c
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd90      	pop	{r4, r7, pc}
 80030ee:	bf00      	nop
 80030f0:	08007860 	.word	0x08007860
 80030f4:	08007870 	.word	0x08007870
 80030f8:	0800787c 	.word	0x0800787c
 80030fc:	58004000 	.word	0x58004000

08003100 <LL_RCC_LSE_IsEnabled>:
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <LL_RCC_LSE_IsEnabled+0x18>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <LL_RCC_LSE_IsEnabled+0x1a>
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_RCC_LSE_IsReady>:
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b02      	cmp	r3, #2
 8003136:	d101      	bne.n	800313c <LL_RCC_LSE_IsReady+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_RCC_LSE_IsReady+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_RCC_SetRFWKPClockSource>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003158:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800315c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_RCC_SetSMPSClockSource>:
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4313      	orrs	r3, r2
 800318e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_RCC_SetSMPSPrescaler>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_RCC_SetUSARTClockSource>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f023 0203 	bic.w	r2, r3, #3
 80031d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_RCC_SetLPUARTClockSource>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_RCC_SetI2CClockSource>:
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003228:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_RCC_SetLPTIMClockSource>:
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <LL_RCC_SetSAIClockSource>:
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800329e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_RCC_SetRNGClockSource>:
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80032ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_RCC_SetCLK48ClockSource>:
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_RCC_SetUSBClockSource>:
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffe3 	bl	80032e2 <LL_RCC_SetCLK48ClockSource>
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <LL_RCC_SetADCClockSource>:
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_RCC_SetRTCClockSource>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_RCC_GetRTCClockSource>:
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_RCC_ForceBackupDomainReset>:
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <LL_RCC_PLLSAI1_Enable>:
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ec:	6013      	str	r3, [r2, #0]
}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_RCC_PLLSAI1_Disable>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003406:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800340a:	6013      	str	r3, [r2, #0]
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_RCC_PLLSAI1_IsReady>:
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800341a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003428:	d101      	bne.n	800342e <LL_RCC_PLLSAI1_IsReady+0x18>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003442:	2300      	movs	r3, #0
 8003444:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003446:	2300      	movs	r3, #0
 8003448:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d034      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800345e:	d021      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003460:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003464:	d81b      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003466:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800346a:	d01d      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800346c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003470:	d815      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347a:	d110      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800348c:	e00d      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f947 	bl	8003726 <RCCEx_PLLSAI1_ConfigNP>
 8003498:	4603      	mov	r3, r0
 800349a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800349c:	e005      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	77fb      	strb	r3, [r7, #31]
        break;
 80034a2:	e002      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80034a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fee8 	bl	800328a <LL_RCC_SetSAIClockSource>
 80034ba:	e001      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7ffb      	ldrb	r3, [r7, #31]
 80034be:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d046      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80034cc:	f7ff ff56 	bl	800337c <LL_RCC_GetRTCClockSource>
 80034d0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d03c      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80034dc:	f7fe fc2e 	bl	8001d3c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff30 	bl	8003350 <LL_RCC_SetRTCClockSource>
 80034f0:	e02e      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80034f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80034fc:	f7ff ff4b 	bl	8003396 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003500:	f7ff ff5a 	bl	80033b8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800351c:	f7ff fdf0 	bl	8003100 <LL_RCC_LSE_IsEnabled>
 8003520:	4603      	mov	r3, r0
 8003522:	2b01      	cmp	r3, #1
 8003524:	d114      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003526:	f7fe f8f5 	bl	8001714 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800352c:	e00b      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fe f8f1 	bl	8001714 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d902      	bls.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	77fb      	strb	r3, [r7, #31]
              break;
 8003544:	e004      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003546:	f7ff fded 	bl	8003124 <LL_RCC_LSE_IsReady>
 800354a:	4603      	mov	r3, r0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d1ee      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003550:	7ffb      	ldrb	r3, [r7, #31]
 8003552:	77bb      	strb	r3, [r7, #30]
 8003554:	e001      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d004      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fe2a 	bl	80031c4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fe35 	bl	80031f0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fe5d 	bl	8003256 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fe52 	bl	8003256 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fe2a 	bl	800321c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fe1f 	bl	800321c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d022      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fe8d 	bl	800330e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fc:	d107      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80035fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003616:	d10b      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f8dd 	bl	80037dc <RCCEx_PLLSAI1_ConfigNQ>
 8003622:	4603      	mov	r3, r0
 8003624:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800362c:	7ffb      	ldrb	r3, [r7, #31]
 800362e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02b      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800364e:	d003      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fe2a 	bl	80032b6 <LL_RCC_SetRNGClockSource>
 8003662:	e00a      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	2000      	movs	r0, #0
 8003670:	f7ff fe21 	bl	80032b6 <LL_RCC_SetRNGClockSource>
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff fe34 	bl	80032e2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003682:	d107      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003692:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d022      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fe3d 	bl	8003324 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b2:	d107      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036cc:	d10b      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f8dd 	bl	8003892 <RCCEx_PLLSAI1_ConfigNR>
 80036d8:	4603      	mov	r3, r0
 80036da:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80036dc:	7ffb      	ldrb	r3, [r7, #31]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
 80036e4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fd26 	bl	8003148 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fd45 	bl	800319c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fd2c 	bl	8003174 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800371c:	7fbb      	ldrb	r3, [r7, #30]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003732:	f7ff fe61 	bl	80033f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003736:	f7fd ffed 	bl	8001714 <HAL_GetTick>
 800373a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800373c:	e009      	b.n	8003752 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800373e:	f7fd ffe9 	bl	8001714 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d902      	bls.n	8003752 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e004      	b.n	800375c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003752:	f7ff fe60 	bl	8003416 <LL_RCC_PLLSAI1_IsReady>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d137      	bne.n	80037d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003776:	4313      	orrs	r3, r2
 8003778:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800377a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800378c:	4313      	orrs	r3, r2
 800378e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003790:	f7ff fe23 	bl	80033da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003794:	f7fd ffbe 	bl	8001714 <HAL_GetTick>
 8003798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800379a:	e009      	b.n	80037b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800379c:	f7fd ffba 	bl	8001714 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	73fb      	strb	r3, [r7, #15]
        break;
 80037ae:	e004      	b.n	80037ba <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037b0:	f7ff fe31 	bl	8003416 <LL_RCC_PLLSAI1_IsReady>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d1f0      	bne.n	800379c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d108      	bne.n	80037d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ce:	4313      	orrs	r3, r2
 80037d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80037e8:	f7ff fe06 	bl	80033f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037ec:	f7fd ff92 	bl	8001714 <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037f2:	e009      	b.n	8003808 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f4:	f7fd ff8e 	bl	8001714 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d902      	bls.n	8003808 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
      break;
 8003806:	e004      	b.n	8003812 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003808:	f7ff fe05 	bl	8003416 <LL_RCC_PLLSAI1_IsReady>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d137      	bne.n	8003888 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800382c:	4313      	orrs	r3, r2
 800382e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003842:	4313      	orrs	r3, r2
 8003844:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003846:	f7ff fdc8 	bl	80033da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384a:	f7fd ff63 	bl	8001714 <HAL_GetTick>
 800384e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003850:	e009      	b.n	8003866 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003852:	f7fd ff5f 	bl	8001714 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d902      	bls.n	8003866 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	73fb      	strb	r3, [r7, #15]
        break;
 8003864:	e004      	b.n	8003870 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003866:	f7ff fdd6 	bl	8003416 <LL_RCC_PLLSAI1_IsReady>
 800386a:	4603      	mov	r3, r0
 800386c:	2b01      	cmp	r3, #1
 800386e:	d1f0      	bne.n	8003852 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003884:	4313      	orrs	r3, r2
 8003886:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800389e:	f7ff fdab 	bl	80033f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038a2:	f7fd ff37 	bl	8001714 <HAL_GetTick>
 80038a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038a8:	e009      	b.n	80038be <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038aa:	f7fd ff33 	bl	8001714 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d902      	bls.n	80038be <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e004      	b.n	80038c8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038be:	f7ff fdaa 	bl	8003416 <LL_RCC_PLLSAI1_IsReady>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d137      	bne.n	800393e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e2:	4313      	orrs	r3, r2
 80038e4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f8:	4313      	orrs	r3, r2
 80038fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038fc:	f7ff fd6d 	bl	80033da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003900:	f7fd ff08 	bl	8001714 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003906:	e009      	b.n	800391c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003908:	f7fd ff04 	bl	8001714 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	73fb      	strb	r3, [r7, #15]
        break;
 800391a:	e004      	b.n	8003926 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800391c:	f7ff fd7b 	bl	8003416 <LL_RCC_PLLSAI1_IsReady>
 8003920:	4603      	mov	r3, r0
 8003922:	2b01      	cmp	r3, #1
 8003924:	d1f0      	bne.n	8003908 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d108      	bne.n	800393e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393a:	4313      	orrs	r3, r2
 800393c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e09f      	b.n	8003a9a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd fc72 	bl	8001258 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <HAL_RTC_Init+0x15c>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b10      	cmp	r3, #16
 8003986:	d07e      	beq.n	8003a86 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	22ca      	movs	r2, #202	; 0xca
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2253      	movs	r2, #83	; 0x53
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8ab 	bl	8003af4 <RTC_EnterInitMode>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	22ff      	movs	r2, #255	; 0xff
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2204      	movs	r2, #4
 80039b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e067      	b.n	8003a8a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80039c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68d2      	ldr	r2, [r2, #12]
 80039f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6919      	ldr	r1, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	041a      	lsls	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a18:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0203 	bic.w	r2, r2, #3
 8003a28:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d113      	bne.n	8003a78 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f829 	bl	8003aa8 <HAL_RTC_WaitForSynchro>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00d      	beq.n	8003a78 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	22ff      	movs	r2, #255	; 0xff
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2204      	movs	r2, #4
 8003a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e010      	b.n	8003a9a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e001      	b.n	8003a8a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40002800 	.word	0x40002800

08003aa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003abe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003ac0:	f7fd fe28 	bl	8001714 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ac6:	e009      	b.n	8003adc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ac8:	f7fd fe24 	bl	8001714 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad6:	d901      	bls.n	8003adc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e007      	b.n	8003aec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d119      	bne.n	8003b3e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b14:	f7fd fdfe 	bl	8001714 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b1a:	e009      	b.n	8003b30 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003b1c:	f7fd fdfa 	bl	8001714 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b2a:	d901      	bls.n	8003b30 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e007      	b.n	8003b40 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ee      	beq.n	8003b1c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0a8      	b.n	8003cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	22ca      	movs	r2, #202	; 0xca
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2253      	movs	r2, #83	; 0x53
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003b90:	f7fd fdc0 	bl	8001714 <HAL_GetTick>
 8003b94:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003b96:	e015      	b.n	8003bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b98:	f7fd fdbc 	bl	8001714 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba6:	d90d      	bls.n	8003bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	22ff      	movs	r2, #255	; 0xff
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e077      	b.n	8003cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e2      	bne.n	8003b98 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003bf2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003bf4:	f7fd fd8e 	bl	8001714 <HAL_GetTick>
 8003bf8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003bfa:	e015      	b.n	8003c28 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bfc:	f7fd fd8a 	bl	8001714 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0a:	d90d      	bls.n	8003c28 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	22ff      	movs	r2, #255	; 0xff
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2203      	movs	r2, #3
 8003c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e045      	b.n	8003cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0e2      	beq.n	8003bfc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0207 	bic.w	r2, r2, #7
 8003c4c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6899      	ldr	r1, [r3, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c5e:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c64:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c6e:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c78:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c88:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c98:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	22ff      	movs	r2, #255	; 0xff
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	58000800 	.word	0x58000800

08003cc0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f818 	bl	8003d0c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003cec:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003cf0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cf4:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	58000800 	.word	0x58000800

08003d0c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e095      	b.n	8003e5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d108      	bne.n	8003d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d42:	d009      	beq.n	8003d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
 8003d4a:	e005      	b.n	8003d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd faa4 	bl	80012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d98:	d902      	bls.n	8003da0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	e002      	b.n	8003da6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003dae:	d007      	beq.n	8003dc0 <HAL_SPI_Init+0xa0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db8:	d002      	beq.n	8003dc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	ea42 0103 	orr.w	r1, r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f003 0204 	and.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e3c:	ea42 0103 	orr.w	r1, r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b088      	sub	sp, #32
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_SPI_Transmit+0x22>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e158      	b.n	800413a <HAL_SPI_Transmit+0x2d4>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e90:	f7fd fc40 	bl	8001714 <HAL_GetTick>
 8003e94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eaa:	e13d      	b.n	8004128 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_SPI_Transmit+0x52>
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ebc:	e134      	b.n	8004128 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f08:	d10f      	bne.n	8003f2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d007      	beq.n	8003f48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f50:	d94b      	bls.n	8003fea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_Transmit+0xfa>
 8003f5a:	8afb      	ldrh	r3, [r7, #22]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d13e      	bne.n	8003fde <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f84:	e02b      	b.n	8003fde <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d112      	bne.n	8003fba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb8:	e011      	b.n	8003fde <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fba:	f7fd fbab 	bl	8001714 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d803      	bhi.n	8003fd2 <HAL_SPI_Transmit+0x16c>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d102      	bne.n	8003fd8 <HAL_SPI_Transmit+0x172>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fdc:	e0a4      	b.n	8004128 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1ce      	bne.n	8003f86 <HAL_SPI_Transmit+0x120>
 8003fe8:	e07c      	b.n	80040e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_SPI_Transmit+0x192>
 8003ff2:	8afb      	ldrh	r3, [r7, #22]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d170      	bne.n	80040da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d912      	bls.n	8004028 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	881a      	ldrh	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	1c9a      	adds	r2, r3, #2
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b02      	subs	r3, #2
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004026:	e058      	b.n	80040da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	7812      	ldrb	r2, [r2, #0]
 8004034:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800404e:	e044      	b.n	80040da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d12b      	bne.n	80040b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d912      	bls.n	800408e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b02      	subs	r3, #2
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800408c:	e025      	b.n	80040da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	7812      	ldrb	r2, [r2, #0]
 800409a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040b4:	e011      	b.n	80040da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040b6:	f7fd fb2d 	bl	8001714 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d803      	bhi.n	80040ce <HAL_SPI_Transmit+0x268>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d102      	bne.n	80040d4 <HAL_SPI_Transmit+0x26e>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040d8:	e026      	b.n	8004128 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1b5      	bne.n	8004050 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	6839      	ldr	r1, [r7, #0]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fce3 	bl	8004ab4 <SPI_EndRxTxTransaction>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e000      	b.n	8004128 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004126:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004138:	7ffb      	ldrb	r3, [r7, #31]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b088      	sub	sp, #32
 8004146:	af02      	add	r7, sp, #8
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800415e:	d112      	bne.n	8004186 <HAL_SPI_Receive+0x44>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10e      	bne.n	8004186 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2204      	movs	r2, #4
 800416c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004170:	88fa      	ldrh	r2, [r7, #6]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f910 	bl	80043a2 <HAL_SPI_TransmitReceive>
 8004182:	4603      	mov	r3, r0
 8004184:	e109      	b.n	800439a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_SPI_Receive+0x52>
 8004190:	2302      	movs	r3, #2
 8004192:	e102      	b.n	800439a <HAL_SPI_Receive+0x258>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800419c:	f7fd faba 	bl	8001714 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d002      	beq.n	80041b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
 80041b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041b2:	e0e9      	b.n	8004388 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_SPI_Receive+0x7e>
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041c4:	e0e0      	b.n	8004388 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2204      	movs	r2, #4
 80041ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	88fa      	ldrh	r2, [r7, #6]
 80041de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	88fa      	ldrh	r2, [r7, #6]
 80041e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004210:	d908      	bls.n	8004224 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	e007      	b.n	8004234 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004232:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423c:	d10f      	bne.n	800425e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800425c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d007      	beq.n	800427c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004284:	d867      	bhi.n	8004356 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004286:	e030      	b.n	80042ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b01      	cmp	r3, #1
 8004294:	d117      	bne.n	80042c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f103 020c 	add.w	r2, r3, #12
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80042c4:	e011      	b.n	80042ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c6:	f7fd fa25 	bl	8001714 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d803      	bhi.n	80042de <HAL_SPI_Receive+0x19c>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d102      	bne.n	80042e4 <HAL_SPI_Receive+0x1a2>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042e8:	e04e      	b.n	8004388 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1c8      	bne.n	8004288 <HAL_SPI_Receive+0x146>
 80042f6:	e034      	b.n	8004362 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d115      	bne.n	8004332 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	b292      	uxth	r2, r2
 8004312:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	1c9a      	adds	r2, r3, #2
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004330:	e011      	b.n	8004356 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004332:	f7fd f9ef 	bl	8001714 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d803      	bhi.n	800434a <HAL_SPI_Receive+0x208>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d102      	bne.n	8004350 <HAL_SPI_Receive+0x20e>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004354:	e018      	b.n	8004388 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ca      	bne.n	80042f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fb4c 	bl	8004a04 <SPI_EndRxTransaction>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75fb      	strb	r3, [r7, #23]
 8004384:	e000      	b.n	8004388 <HAL_SPI_Receive+0x246>
  }

error :
 8004386:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b08a      	sub	sp, #40	; 0x28
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043b0:	2301      	movs	r3, #1
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x26>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e1fb      	b.n	80047c0 <HAL_SPI_TransmitReceive+0x41e>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043d0:	f7fd f9a0 	bl	8001714 <HAL_GetTick>
 80043d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80043e4:	887b      	ldrh	r3, [r7, #2]
 80043e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80043e8:	887b      	ldrh	r3, [r7, #2]
 80043ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043ec:	7efb      	ldrb	r3, [r7, #27]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d00e      	beq.n	8004410 <HAL_SPI_TransmitReceive+0x6e>
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f8:	d106      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x66>
 8004402:	7efb      	ldrb	r3, [r7, #27]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d003      	beq.n	8004410 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004408:	2302      	movs	r3, #2
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800440e:	e1cd      	b.n	80047ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_SPI_TransmitReceive+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_SPI_TransmitReceive+0x80>
 800441c:	887b      	ldrh	r3, [r7, #2]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004428:	e1c0      	b.n	80047ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b04      	cmp	r3, #4
 8004434:	d003      	beq.n	800443e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2205      	movs	r2, #5
 800443a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	887a      	ldrh	r2, [r7, #2]
 800444e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	887a      	ldrh	r2, [r7, #2]
 8004456:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	887a      	ldrh	r2, [r7, #2]
 8004464:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	887a      	ldrh	r2, [r7, #2]
 800446a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004480:	d802      	bhi.n	8004488 <HAL_SPI_TransmitReceive+0xe6>
 8004482:	8a3b      	ldrh	r3, [r7, #16]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d908      	bls.n	800449a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	e007      	b.n	80044aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d007      	beq.n	80044c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044d0:	d97c      	bls.n	80045cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x13e>
 80044da:	8a7b      	ldrh	r3, [r7, #18]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d169      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	881a      	ldrh	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004504:	e056      	b.n	80045b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d11b      	bne.n	800454c <HAL_SPI_TransmitReceive+0x1aa>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_SPI_TransmitReceive+0x1aa>
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	2b01      	cmp	r3, #1
 8004522:	d113      	bne.n	800454c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	881a      	ldrh	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	1c9a      	adds	r2, r3, #2
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d11c      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x1f2>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	b292      	uxth	r2, r2
 8004572:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	1c9a      	adds	r2, r3, #2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004590:	2301      	movs	r3, #1
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004594:	f7fd f8be 	bl	8001714 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d807      	bhi.n	80045b4 <HAL_SPI_TransmitReceive+0x212>
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d003      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80045b2:	e0fb      	b.n	80047ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1a3      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x164>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d19d      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x164>
 80045ca:	e0df      	b.n	800478c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x23a>
 80045d4:	8a7b      	ldrh	r3, [r7, #18]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	f040 80cb 	bne.w	8004772 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d912      	bls.n	800460c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	1c9a      	adds	r2, r3, #2
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b02      	subs	r3, #2
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	87da      	strh	r2, [r3, #62]	; 0x3e
 800460a:	e0b2      	b.n	8004772 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	7812      	ldrb	r2, [r2, #0]
 8004618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004632:	e09e      	b.n	8004772 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d134      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x30a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02f      	beq.n	80046ac <HAL_SPI_TransmitReceive+0x30a>
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	2b01      	cmp	r3, #1
 8004650:	d12c      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d912      	bls.n	8004682 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b02      	subs	r3, #2
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004680:	e012      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d148      	bne.n	800474c <HAL_SPI_TransmitReceive+0x3aa>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d042      	beq.n	800474c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d923      	bls.n	800471a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	b292      	uxth	r2, r2
 80046de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	1c9a      	adds	r2, r3, #2
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b02      	subs	r3, #2
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d81f      	bhi.n	8004748 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	e016      	b.n	8004748 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f103 020c 	add.w	r2, r3, #12
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004748:	2301      	movs	r3, #1
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800474c:	f7fc ffe2 	bl	8001714 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004758:	429a      	cmp	r2, r3
 800475a:	d803      	bhi.n	8004764 <HAL_SPI_TransmitReceive+0x3c2>
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d102      	bne.n	800476a <HAL_SPI_TransmitReceive+0x3c8>
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004770:	e01c      	b.n	80047ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	f47f af5b 	bne.w	8004634 <HAL_SPI_TransmitReceive+0x292>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	f47f af54 	bne.w	8004634 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f98f 	bl	8004ab4 <SPI_EndRxTxTransaction>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d006      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60
 80047a8:	e000      	b.n	80047ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80047aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3728      	adds	r7, #40	; 0x28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047d8:	f7fc ff9c 	bl	8001714 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4413      	add	r3, r2
 80047e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047e8:	f7fc ff94 	bl	8001714 <HAL_GetTick>
 80047ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047ee:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	015b      	lsls	r3, r3, #5
 80047f4:	0d1b      	lsrs	r3, r3, #20
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047fe:	e054      	b.n	80048aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d050      	beq.n	80048aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004808:	f7fc ff84 	bl	8001714 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	429a      	cmp	r2, r3
 8004816:	d902      	bls.n	800481e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d13d      	bne.n	800489a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800482c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d111      	bne.n	800485c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004840:	d004      	beq.n	800484c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484a:	d107      	bne.n	800485c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004864:	d10f      	bne.n	8004886 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004884:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e017      	b.n	80048ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4013      	ands	r3, r2
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d19b      	bne.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	2000000c 	.word	0x2000000c

080048d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048ea:	f7fc ff13 	bl	8001714 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	4413      	add	r3, r2
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80048fa:	f7fc ff0b 	bl	8001714 <HAL_GetTick>
 80048fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004908:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	00da      	lsls	r2, r3, #3
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	0d1b      	lsrs	r3, r3, #20
 8004918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004920:	e060      	b.n	80049e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004928:	d107      	bne.n	800493a <SPI_WaitFifoStateUntilTimeout+0x62>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004938:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d050      	beq.n	80049e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004942:	f7fc fee7 	bl	8001714 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494e:	429a      	cmp	r2, r3
 8004950:	d902      	bls.n	8004958 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d13d      	bne.n	80049d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004966:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004970:	d111      	bne.n	8004996 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497a:	d004      	beq.n	8004986 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	d107      	bne.n	8004996 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004994:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499e:	d10f      	bne.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e010      	b.n	80049f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d196      	bne.n	8004922 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3728      	adds	r7, #40	; 0x28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	2000000c 	.word	0x2000000c

08004a04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a18:	d111      	bne.n	8004a3e <SPI_EndRxTransaction+0x3a>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a22:	d004      	beq.n	8004a2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d107      	bne.n	8004a3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2200      	movs	r2, #0
 8004a46:	2180      	movs	r1, #128	; 0x80
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff febd 	bl	80047c8 <SPI_WaitFlagStateUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e023      	b.n	8004aac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6c:	d11d      	bne.n	8004aaa <SPI_EndRxTransaction+0xa6>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a76:	d004      	beq.n	8004a82 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d113      	bne.n	8004aaa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f7ff ff22 	bl	80048d8 <SPI_WaitFifoStateUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e000      	b.n	8004aac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff ff03 	bl	80048d8 <SPI_WaitFifoStateUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004adc:	f043 0220 	orr.w	r2, r3, #32
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e027      	b.n	8004b38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2200      	movs	r2, #0
 8004af0:	2180      	movs	r1, #128	; 0x80
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f7ff fe68 	bl	80047c8 <SPI_WaitFlagStateUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	f043 0220 	orr.w	r2, r3, #32
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e014      	b.n	8004b38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff fedc 	bl	80048d8 <SPI_WaitFifoStateUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	f043 0220 	orr.w	r2, r3, #32
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e000      	b.n	8004b38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <__errno>:
 8004b40:	4b01      	ldr	r3, [pc, #4]	; (8004b48 <__errno+0x8>)
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000018 	.word	0x20000018

08004b4c <__sflush_r>:
 8004b4c:	898a      	ldrh	r2, [r1, #12]
 8004b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b52:	4605      	mov	r5, r0
 8004b54:	0710      	lsls	r0, r2, #28
 8004b56:	460c      	mov	r4, r1
 8004b58:	d458      	bmi.n	8004c0c <__sflush_r+0xc0>
 8004b5a:	684b      	ldr	r3, [r1, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dc05      	bgt.n	8004b6c <__sflush_r+0x20>
 8004b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	dc02      	bgt.n	8004b6c <__sflush_r+0x20>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b6e:	2e00      	cmp	r6, #0
 8004b70:	d0f9      	beq.n	8004b66 <__sflush_r+0x1a>
 8004b72:	2300      	movs	r3, #0
 8004b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b78:	682f      	ldr	r7, [r5, #0]
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	d032      	beq.n	8004be4 <__sflush_r+0x98>
 8004b7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	075a      	lsls	r2, r3, #29
 8004b84:	d505      	bpl.n	8004b92 <__sflush_r+0x46>
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	1ac0      	subs	r0, r0, r3
 8004b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b8c:	b10b      	cbz	r3, 8004b92 <__sflush_r+0x46>
 8004b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b90:	1ac0      	subs	r0, r0, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	4602      	mov	r2, r0
 8004b96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b98:	6a21      	ldr	r1, [r4, #32]
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b0      	blx	r6
 8004b9e:	1c43      	adds	r3, r0, #1
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	d106      	bne.n	8004bb2 <__sflush_r+0x66>
 8004ba4:	6829      	ldr	r1, [r5, #0]
 8004ba6:	291d      	cmp	r1, #29
 8004ba8:	d82c      	bhi.n	8004c04 <__sflush_r+0xb8>
 8004baa:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <__sflush_r+0x108>)
 8004bac:	40ca      	lsrs	r2, r1
 8004bae:	07d6      	lsls	r6, r2, #31
 8004bb0:	d528      	bpl.n	8004c04 <__sflush_r+0xb8>
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	6062      	str	r2, [r4, #4]
 8004bb6:	04d9      	lsls	r1, r3, #19
 8004bb8:	6922      	ldr	r2, [r4, #16]
 8004bba:	6022      	str	r2, [r4, #0]
 8004bbc:	d504      	bpl.n	8004bc8 <__sflush_r+0x7c>
 8004bbe:	1c42      	adds	r2, r0, #1
 8004bc0:	d101      	bne.n	8004bc6 <__sflush_r+0x7a>
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	b903      	cbnz	r3, 8004bc8 <__sflush_r+0x7c>
 8004bc6:	6560      	str	r0, [r4, #84]	; 0x54
 8004bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bca:	602f      	str	r7, [r5, #0]
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	d0ca      	beq.n	8004b66 <__sflush_r+0x1a>
 8004bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bd4:	4299      	cmp	r1, r3
 8004bd6:	d002      	beq.n	8004bde <__sflush_r+0x92>
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f000 fa21 	bl	8005020 <_free_r>
 8004bde:	2000      	movs	r0, #0
 8004be0:	6360      	str	r0, [r4, #52]	; 0x34
 8004be2:	e7c1      	b.n	8004b68 <__sflush_r+0x1c>
 8004be4:	6a21      	ldr	r1, [r4, #32]
 8004be6:	2301      	movs	r3, #1
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b0      	blx	r6
 8004bec:	1c41      	adds	r1, r0, #1
 8004bee:	d1c7      	bne.n	8004b80 <__sflush_r+0x34>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0c4      	beq.n	8004b80 <__sflush_r+0x34>
 8004bf6:	2b1d      	cmp	r3, #29
 8004bf8:	d001      	beq.n	8004bfe <__sflush_r+0xb2>
 8004bfa:	2b16      	cmp	r3, #22
 8004bfc:	d101      	bne.n	8004c02 <__sflush_r+0xb6>
 8004bfe:	602f      	str	r7, [r5, #0]
 8004c00:	e7b1      	b.n	8004b66 <__sflush_r+0x1a>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	e7ad      	b.n	8004b68 <__sflush_r+0x1c>
 8004c0c:	690f      	ldr	r7, [r1, #16]
 8004c0e:	2f00      	cmp	r7, #0
 8004c10:	d0a9      	beq.n	8004b66 <__sflush_r+0x1a>
 8004c12:	0793      	lsls	r3, r2, #30
 8004c14:	680e      	ldr	r6, [r1, #0]
 8004c16:	bf08      	it	eq
 8004c18:	694b      	ldreq	r3, [r1, #20]
 8004c1a:	600f      	str	r7, [r1, #0]
 8004c1c:	bf18      	it	ne
 8004c1e:	2300      	movne	r3, #0
 8004c20:	eba6 0807 	sub.w	r8, r6, r7
 8004c24:	608b      	str	r3, [r1, #8]
 8004c26:	f1b8 0f00 	cmp.w	r8, #0
 8004c2a:	dd9c      	ble.n	8004b66 <__sflush_r+0x1a>
 8004c2c:	6a21      	ldr	r1, [r4, #32]
 8004c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c30:	4643      	mov	r3, r8
 8004c32:	463a      	mov	r2, r7
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b0      	blx	r6
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	dc06      	bgt.n	8004c4a <__sflush_r+0xfe>
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	e78e      	b.n	8004b68 <__sflush_r+0x1c>
 8004c4a:	4407      	add	r7, r0
 8004c4c:	eba8 0800 	sub.w	r8, r8, r0
 8004c50:	e7e9      	b.n	8004c26 <__sflush_r+0xda>
 8004c52:	bf00      	nop
 8004c54:	20400001 	.word	0x20400001

08004c58 <_fflush_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	690b      	ldr	r3, [r1, #16]
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	b913      	cbnz	r3, 8004c68 <_fflush_r+0x10>
 8004c62:	2500      	movs	r5, #0
 8004c64:	4628      	mov	r0, r5
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	b118      	cbz	r0, 8004c72 <_fflush_r+0x1a>
 8004c6a:	6983      	ldr	r3, [r0, #24]
 8004c6c:	b90b      	cbnz	r3, 8004c72 <_fflush_r+0x1a>
 8004c6e:	f000 f887 	bl	8004d80 <__sinit>
 8004c72:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <_fflush_r+0x6c>)
 8004c74:	429c      	cmp	r4, r3
 8004c76:	d11b      	bne.n	8004cb0 <_fflush_r+0x58>
 8004c78:	686c      	ldr	r4, [r5, #4]
 8004c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ef      	beq.n	8004c62 <_fflush_r+0xa>
 8004c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c84:	07d0      	lsls	r0, r2, #31
 8004c86:	d404      	bmi.n	8004c92 <_fflush_r+0x3a>
 8004c88:	0599      	lsls	r1, r3, #22
 8004c8a:	d402      	bmi.n	8004c92 <_fflush_r+0x3a>
 8004c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8e:	f000 f93a 	bl	8004f06 <__retarget_lock_acquire_recursive>
 8004c92:	4628      	mov	r0, r5
 8004c94:	4621      	mov	r1, r4
 8004c96:	f7ff ff59 	bl	8004b4c <__sflush_r>
 8004c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c9c:	07da      	lsls	r2, r3, #31
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	d4e0      	bmi.n	8004c64 <_fflush_r+0xc>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	059b      	lsls	r3, r3, #22
 8004ca6:	d4dd      	bmi.n	8004c64 <_fflush_r+0xc>
 8004ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004caa:	f000 f92d 	bl	8004f08 <__retarget_lock_release_recursive>
 8004cae:	e7d9      	b.n	8004c64 <_fflush_r+0xc>
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <_fflush_r+0x70>)
 8004cb2:	429c      	cmp	r4, r3
 8004cb4:	d101      	bne.n	8004cba <_fflush_r+0x62>
 8004cb6:	68ac      	ldr	r4, [r5, #8]
 8004cb8:	e7df      	b.n	8004c7a <_fflush_r+0x22>
 8004cba:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <_fflush_r+0x74>)
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	bf08      	it	eq
 8004cc0:	68ec      	ldreq	r4, [r5, #12]
 8004cc2:	e7da      	b.n	8004c7a <_fflush_r+0x22>
 8004cc4:	0800792c 	.word	0x0800792c
 8004cc8:	0800794c 	.word	0x0800794c
 8004ccc:	0800790c 	.word	0x0800790c

08004cd0 <std>:
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	b510      	push	{r4, lr}
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8004cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cde:	6083      	str	r3, [r0, #8]
 8004ce0:	8181      	strh	r1, [r0, #12]
 8004ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ce4:	81c2      	strh	r2, [r0, #14]
 8004ce6:	6183      	str	r3, [r0, #24]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	2208      	movs	r2, #8
 8004cec:	305c      	adds	r0, #92	; 0x5c
 8004cee:	f000 f98f 	bl	8005010 <memset>
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <std+0x38>)
 8004cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <std+0x3c>)
 8004cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <std+0x40>)
 8004cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <std+0x44>)
 8004d00:	6224      	str	r4, [r4, #32]
 8004d02:	6323      	str	r3, [r4, #48]	; 0x30
 8004d04:	bd10      	pop	{r4, pc}
 8004d06:	bf00      	nop
 8004d08:	08005b05 	.word	0x08005b05
 8004d0c:	08005b27 	.word	0x08005b27
 8004d10:	08005b5f 	.word	0x08005b5f
 8004d14:	08005b83 	.word	0x08005b83

08004d18 <_cleanup_r>:
 8004d18:	4901      	ldr	r1, [pc, #4]	; (8004d20 <_cleanup_r+0x8>)
 8004d1a:	f000 b8af 	b.w	8004e7c <_fwalk_reent>
 8004d1e:	bf00      	nop
 8004d20:	08004c59 	.word	0x08004c59

08004d24 <__sfmoreglue>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	2268      	movs	r2, #104	; 0x68
 8004d28:	1e4d      	subs	r5, r1, #1
 8004d2a:	4355      	muls	r5, r2
 8004d2c:	460e      	mov	r6, r1
 8004d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d32:	f000 f9e1 	bl	80050f8 <_malloc_r>
 8004d36:	4604      	mov	r4, r0
 8004d38:	b140      	cbz	r0, 8004d4c <__sfmoreglue+0x28>
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8004d40:	300c      	adds	r0, #12
 8004d42:	60a0      	str	r0, [r4, #8]
 8004d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d48:	f000 f962 	bl	8005010 <memset>
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}

08004d50 <__sfp_lock_acquire>:
 8004d50:	4801      	ldr	r0, [pc, #4]	; (8004d58 <__sfp_lock_acquire+0x8>)
 8004d52:	f000 b8d8 	b.w	8004f06 <__retarget_lock_acquire_recursive>
 8004d56:	bf00      	nop
 8004d58:	200002a1 	.word	0x200002a1

08004d5c <__sfp_lock_release>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__sfp_lock_release+0x8>)
 8004d5e:	f000 b8d3 	b.w	8004f08 <__retarget_lock_release_recursive>
 8004d62:	bf00      	nop
 8004d64:	200002a1 	.word	0x200002a1

08004d68 <__sinit_lock_acquire>:
 8004d68:	4801      	ldr	r0, [pc, #4]	; (8004d70 <__sinit_lock_acquire+0x8>)
 8004d6a:	f000 b8cc 	b.w	8004f06 <__retarget_lock_acquire_recursive>
 8004d6e:	bf00      	nop
 8004d70:	200002a2 	.word	0x200002a2

08004d74 <__sinit_lock_release>:
 8004d74:	4801      	ldr	r0, [pc, #4]	; (8004d7c <__sinit_lock_release+0x8>)
 8004d76:	f000 b8c7 	b.w	8004f08 <__retarget_lock_release_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	200002a2 	.word	0x200002a2

08004d80 <__sinit>:
 8004d80:	b510      	push	{r4, lr}
 8004d82:	4604      	mov	r4, r0
 8004d84:	f7ff fff0 	bl	8004d68 <__sinit_lock_acquire>
 8004d88:	69a3      	ldr	r3, [r4, #24]
 8004d8a:	b11b      	cbz	r3, 8004d94 <__sinit+0x14>
 8004d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d90:	f7ff bff0 	b.w	8004d74 <__sinit_lock_release>
 8004d94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d98:	6523      	str	r3, [r4, #80]	; 0x50
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <__sinit+0x68>)
 8004d9c:	4a13      	ldr	r2, [pc, #76]	; (8004dec <__sinit+0x6c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	bf04      	itt	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	61a3      	streq	r3, [r4, #24]
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 f820 	bl	8004df0 <__sfp>
 8004db0:	6060      	str	r0, [r4, #4]
 8004db2:	4620      	mov	r0, r4
 8004db4:	f000 f81c 	bl	8004df0 <__sfp>
 8004db8:	60a0      	str	r0, [r4, #8]
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f000 f818 	bl	8004df0 <__sfp>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	60e0      	str	r0, [r4, #12]
 8004dc4:	2104      	movs	r1, #4
 8004dc6:	6860      	ldr	r0, [r4, #4]
 8004dc8:	f7ff ff82 	bl	8004cd0 <std>
 8004dcc:	68a0      	ldr	r0, [r4, #8]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2109      	movs	r1, #9
 8004dd2:	f7ff ff7d 	bl	8004cd0 <std>
 8004dd6:	68e0      	ldr	r0, [r4, #12]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	2112      	movs	r1, #18
 8004ddc:	f7ff ff78 	bl	8004cd0 <std>
 8004de0:	2301      	movs	r3, #1
 8004de2:	61a3      	str	r3, [r4, #24]
 8004de4:	e7d2      	b.n	8004d8c <__sinit+0xc>
 8004de6:	bf00      	nop
 8004de8:	0800796c 	.word	0x0800796c
 8004dec:	08004d19 	.word	0x08004d19

08004df0 <__sfp>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	4607      	mov	r7, r0
 8004df4:	f7ff ffac 	bl	8004d50 <__sfp_lock_acquire>
 8004df8:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <__sfp+0x84>)
 8004dfa:	681e      	ldr	r6, [r3, #0]
 8004dfc:	69b3      	ldr	r3, [r6, #24]
 8004dfe:	b913      	cbnz	r3, 8004e06 <__sfp+0x16>
 8004e00:	4630      	mov	r0, r6
 8004e02:	f7ff ffbd 	bl	8004d80 <__sinit>
 8004e06:	3648      	adds	r6, #72	; 0x48
 8004e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	d503      	bpl.n	8004e18 <__sfp+0x28>
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	b30b      	cbz	r3, 8004e58 <__sfp+0x68>
 8004e14:	6836      	ldr	r6, [r6, #0]
 8004e16:	e7f7      	b.n	8004e08 <__sfp+0x18>
 8004e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e1c:	b9d5      	cbnz	r5, 8004e54 <__sfp+0x64>
 8004e1e:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <__sfp+0x88>)
 8004e20:	60e3      	str	r3, [r4, #12]
 8004e22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e26:	6665      	str	r5, [r4, #100]	; 0x64
 8004e28:	f000 f86c 	bl	8004f04 <__retarget_lock_init_recursive>
 8004e2c:	f7ff ff96 	bl	8004d5c <__sfp_lock_release>
 8004e30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e38:	6025      	str	r5, [r4, #0]
 8004e3a:	61a5      	str	r5, [r4, #24]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e44:	f000 f8e4 	bl	8005010 <memset>
 8004e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e50:	4620      	mov	r0, r4
 8004e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e54:	3468      	adds	r4, #104	; 0x68
 8004e56:	e7d9      	b.n	8004e0c <__sfp+0x1c>
 8004e58:	2104      	movs	r1, #4
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f7ff ff62 	bl	8004d24 <__sfmoreglue>
 8004e60:	4604      	mov	r4, r0
 8004e62:	6030      	str	r0, [r6, #0]
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d1d5      	bne.n	8004e14 <__sfp+0x24>
 8004e68:	f7ff ff78 	bl	8004d5c <__sfp_lock_release>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	e7ee      	b.n	8004e50 <__sfp+0x60>
 8004e72:	bf00      	nop
 8004e74:	0800796c 	.word	0x0800796c
 8004e78:	ffff0001 	.word	0xffff0001

08004e7c <_fwalk_reent>:
 8004e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e80:	4606      	mov	r6, r0
 8004e82:	4688      	mov	r8, r1
 8004e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e88:	2700      	movs	r7, #0
 8004e8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e8e:	f1b9 0901 	subs.w	r9, r9, #1
 8004e92:	d505      	bpl.n	8004ea0 <_fwalk_reent+0x24>
 8004e94:	6824      	ldr	r4, [r4, #0]
 8004e96:	2c00      	cmp	r4, #0
 8004e98:	d1f7      	bne.n	8004e8a <_fwalk_reent+0xe>
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ea0:	89ab      	ldrh	r3, [r5, #12]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d907      	bls.n	8004eb6 <_fwalk_reent+0x3a>
 8004ea6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	d003      	beq.n	8004eb6 <_fwalk_reent+0x3a>
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	47c0      	blx	r8
 8004eb4:	4307      	orrs	r7, r0
 8004eb6:	3568      	adds	r5, #104	; 0x68
 8004eb8:	e7e9      	b.n	8004e8e <_fwalk_reent+0x12>
	...

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4d0d      	ldr	r5, [pc, #52]	; (8004ef4 <__libc_init_array+0x38>)
 8004ec0:	4c0d      	ldr	r4, [pc, #52]	; (8004ef8 <__libc_init_array+0x3c>)
 8004ec2:	1b64      	subs	r4, r4, r5
 8004ec4:	10a4      	asrs	r4, r4, #2
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	42a6      	cmp	r6, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	4d0b      	ldr	r5, [pc, #44]	; (8004efc <__libc_init_array+0x40>)
 8004ece:	4c0c      	ldr	r4, [pc, #48]	; (8004f00 <__libc_init_array+0x44>)
 8004ed0:	f002 fb9e 	bl	8007610 <_init>
 8004ed4:	1b64      	subs	r4, r4, r5
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	2600      	movs	r6, #0
 8004eda:	42a6      	cmp	r6, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee4:	4798      	blx	r3
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eee:	4798      	blx	r3
 8004ef0:	3601      	adds	r6, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	08007ce8 	.word	0x08007ce8
 8004ef8:	08007ce8 	.word	0x08007ce8
 8004efc:	08007ce8 	.word	0x08007ce8
 8004f00:	08007cec 	.word	0x08007cec

08004f04 <__retarget_lock_init_recursive>:
 8004f04:	4770      	bx	lr

08004f06 <__retarget_lock_acquire_recursive>:
 8004f06:	4770      	bx	lr

08004f08 <__retarget_lock_release_recursive>:
 8004f08:	4770      	bx	lr

08004f0a <__swhatbuf_r>:
 8004f0a:	b570      	push	{r4, r5, r6, lr}
 8004f0c:	460e      	mov	r6, r1
 8004f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f12:	2900      	cmp	r1, #0
 8004f14:	b096      	sub	sp, #88	; 0x58
 8004f16:	4614      	mov	r4, r2
 8004f18:	461d      	mov	r5, r3
 8004f1a:	da08      	bge.n	8004f2e <__swhatbuf_r+0x24>
 8004f1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	602a      	str	r2, [r5, #0]
 8004f24:	061a      	lsls	r2, r3, #24
 8004f26:	d410      	bmi.n	8004f4a <__swhatbuf_r+0x40>
 8004f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f2c:	e00e      	b.n	8004f4c <__swhatbuf_r+0x42>
 8004f2e:	466a      	mov	r2, sp
 8004f30:	f001 fdba 	bl	8006aa8 <_fstat_r>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	dbf1      	blt.n	8004f1c <__swhatbuf_r+0x12>
 8004f38:	9a01      	ldr	r2, [sp, #4]
 8004f3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f42:	425a      	negs	r2, r3
 8004f44:	415a      	adcs	r2, r3
 8004f46:	602a      	str	r2, [r5, #0]
 8004f48:	e7ee      	b.n	8004f28 <__swhatbuf_r+0x1e>
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	b016      	add	sp, #88	; 0x58
 8004f52:	bd70      	pop	{r4, r5, r6, pc}

08004f54 <__smakebuf_r>:
 8004f54:	898b      	ldrh	r3, [r1, #12]
 8004f56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f58:	079d      	lsls	r5, r3, #30
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	d507      	bpl.n	8004f70 <__smakebuf_r+0x1c>
 8004f60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	6123      	str	r3, [r4, #16]
 8004f68:	2301      	movs	r3, #1
 8004f6a:	6163      	str	r3, [r4, #20]
 8004f6c:	b002      	add	sp, #8
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	ab01      	add	r3, sp, #4
 8004f72:	466a      	mov	r2, sp
 8004f74:	f7ff ffc9 	bl	8004f0a <__swhatbuf_r>
 8004f78:	9900      	ldr	r1, [sp, #0]
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f000 f8bb 	bl	80050f8 <_malloc_r>
 8004f82:	b948      	cbnz	r0, 8004f98 <__smakebuf_r+0x44>
 8004f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f88:	059a      	lsls	r2, r3, #22
 8004f8a:	d4ef      	bmi.n	8004f6c <__smakebuf_r+0x18>
 8004f8c:	f023 0303 	bic.w	r3, r3, #3
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	81a3      	strh	r3, [r4, #12]
 8004f96:	e7e3      	b.n	8004f60 <__smakebuf_r+0xc>
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <__smakebuf_r+0x7c>)
 8004f9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	6020      	str	r0, [r4, #0]
 8004fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	9b00      	ldr	r3, [sp, #0]
 8004fa8:	6163      	str	r3, [r4, #20]
 8004faa:	9b01      	ldr	r3, [sp, #4]
 8004fac:	6120      	str	r0, [r4, #16]
 8004fae:	b15b      	cbz	r3, 8004fc8 <__smakebuf_r+0x74>
 8004fb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f001 fd89 	bl	8006acc <_isatty_r>
 8004fba:	b128      	cbz	r0, 8004fc8 <__smakebuf_r+0x74>
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	f023 0303 	bic.w	r3, r3, #3
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	89a0      	ldrh	r0, [r4, #12]
 8004fca:	4305      	orrs	r5, r0
 8004fcc:	81a5      	strh	r5, [r4, #12]
 8004fce:	e7cd      	b.n	8004f6c <__smakebuf_r+0x18>
 8004fd0:	08004d19 	.word	0x08004d19

08004fd4 <malloc>:
 8004fd4:	4b02      	ldr	r3, [pc, #8]	; (8004fe0 <malloc+0xc>)
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	f000 b88d 	b.w	80050f8 <_malloc_r>
 8004fde:	bf00      	nop
 8004fe0:	20000018 	.word	0x20000018

08004fe4 <free>:
 8004fe4:	4b02      	ldr	r3, [pc, #8]	; (8004ff0 <free+0xc>)
 8004fe6:	4601      	mov	r1, r0
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	f000 b819 	b.w	8005020 <_free_r>
 8004fee:	bf00      	nop
 8004ff0:	20000018 	.word	0x20000018

08004ff4 <memcpy>:
 8004ff4:	440a      	add	r2, r1
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ffc:	d100      	bne.n	8005000 <memcpy+0xc>
 8004ffe:	4770      	bx	lr
 8005000:	b510      	push	{r4, lr}
 8005002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800500a:	4291      	cmp	r1, r2
 800500c:	d1f9      	bne.n	8005002 <memcpy+0xe>
 800500e:	bd10      	pop	{r4, pc}

08005010 <memset>:
 8005010:	4402      	add	r2, r0
 8005012:	4603      	mov	r3, r0
 8005014:	4293      	cmp	r3, r2
 8005016:	d100      	bne.n	800501a <memset+0xa>
 8005018:	4770      	bx	lr
 800501a:	f803 1b01 	strb.w	r1, [r3], #1
 800501e:	e7f9      	b.n	8005014 <memset+0x4>

08005020 <_free_r>:
 8005020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005022:	2900      	cmp	r1, #0
 8005024:	d044      	beq.n	80050b0 <_free_r+0x90>
 8005026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800502a:	9001      	str	r0, [sp, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f1a1 0404 	sub.w	r4, r1, #4
 8005032:	bfb8      	it	lt
 8005034:	18e4      	addlt	r4, r4, r3
 8005036:	f001 fd81 	bl	8006b3c <__malloc_lock>
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <_free_r+0x94>)
 800503c:	9801      	ldr	r0, [sp, #4]
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	b933      	cbnz	r3, 8005050 <_free_r+0x30>
 8005042:	6063      	str	r3, [r4, #4]
 8005044:	6014      	str	r4, [r2, #0]
 8005046:	b003      	add	sp, #12
 8005048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800504c:	f001 bd7c 	b.w	8006b48 <__malloc_unlock>
 8005050:	42a3      	cmp	r3, r4
 8005052:	d908      	bls.n	8005066 <_free_r+0x46>
 8005054:	6825      	ldr	r5, [r4, #0]
 8005056:	1961      	adds	r1, r4, r5
 8005058:	428b      	cmp	r3, r1
 800505a:	bf01      	itttt	eq
 800505c:	6819      	ldreq	r1, [r3, #0]
 800505e:	685b      	ldreq	r3, [r3, #4]
 8005060:	1949      	addeq	r1, r1, r5
 8005062:	6021      	streq	r1, [r4, #0]
 8005064:	e7ed      	b.n	8005042 <_free_r+0x22>
 8005066:	461a      	mov	r2, r3
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b10b      	cbz	r3, 8005070 <_free_r+0x50>
 800506c:	42a3      	cmp	r3, r4
 800506e:	d9fa      	bls.n	8005066 <_free_r+0x46>
 8005070:	6811      	ldr	r1, [r2, #0]
 8005072:	1855      	adds	r5, r2, r1
 8005074:	42a5      	cmp	r5, r4
 8005076:	d10b      	bne.n	8005090 <_free_r+0x70>
 8005078:	6824      	ldr	r4, [r4, #0]
 800507a:	4421      	add	r1, r4
 800507c:	1854      	adds	r4, r2, r1
 800507e:	42a3      	cmp	r3, r4
 8005080:	6011      	str	r1, [r2, #0]
 8005082:	d1e0      	bne.n	8005046 <_free_r+0x26>
 8005084:	681c      	ldr	r4, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	6053      	str	r3, [r2, #4]
 800508a:	4421      	add	r1, r4
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	e7da      	b.n	8005046 <_free_r+0x26>
 8005090:	d902      	bls.n	8005098 <_free_r+0x78>
 8005092:	230c      	movs	r3, #12
 8005094:	6003      	str	r3, [r0, #0]
 8005096:	e7d6      	b.n	8005046 <_free_r+0x26>
 8005098:	6825      	ldr	r5, [r4, #0]
 800509a:	1961      	adds	r1, r4, r5
 800509c:	428b      	cmp	r3, r1
 800509e:	bf04      	itt	eq
 80050a0:	6819      	ldreq	r1, [r3, #0]
 80050a2:	685b      	ldreq	r3, [r3, #4]
 80050a4:	6063      	str	r3, [r4, #4]
 80050a6:	bf04      	itt	eq
 80050a8:	1949      	addeq	r1, r1, r5
 80050aa:	6021      	streq	r1, [r4, #0]
 80050ac:	6054      	str	r4, [r2, #4]
 80050ae:	e7ca      	b.n	8005046 <_free_r+0x26>
 80050b0:	b003      	add	sp, #12
 80050b2:	bd30      	pop	{r4, r5, pc}
 80050b4:	200002a4 	.word	0x200002a4

080050b8 <sbrk_aligned>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4e0e      	ldr	r6, [pc, #56]	; (80050f4 <sbrk_aligned+0x3c>)
 80050bc:	460c      	mov	r4, r1
 80050be:	6831      	ldr	r1, [r6, #0]
 80050c0:	4605      	mov	r5, r0
 80050c2:	b911      	cbnz	r1, 80050ca <sbrk_aligned+0x12>
 80050c4:	f000 fd0e 	bl	8005ae4 <_sbrk_r>
 80050c8:	6030      	str	r0, [r6, #0]
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 fd09 	bl	8005ae4 <_sbrk_r>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	d00a      	beq.n	80050ec <sbrk_aligned+0x34>
 80050d6:	1cc4      	adds	r4, r0, #3
 80050d8:	f024 0403 	bic.w	r4, r4, #3
 80050dc:	42a0      	cmp	r0, r4
 80050de:	d007      	beq.n	80050f0 <sbrk_aligned+0x38>
 80050e0:	1a21      	subs	r1, r4, r0
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 fcfe 	bl	8005ae4 <_sbrk_r>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d101      	bne.n	80050f0 <sbrk_aligned+0x38>
 80050ec:	f04f 34ff 	mov.w	r4, #4294967295
 80050f0:	4620      	mov	r0, r4
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	200002a8 	.word	0x200002a8

080050f8 <_malloc_r>:
 80050f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fc:	1ccd      	adds	r5, r1, #3
 80050fe:	f025 0503 	bic.w	r5, r5, #3
 8005102:	3508      	adds	r5, #8
 8005104:	2d0c      	cmp	r5, #12
 8005106:	bf38      	it	cc
 8005108:	250c      	movcc	r5, #12
 800510a:	2d00      	cmp	r5, #0
 800510c:	4607      	mov	r7, r0
 800510e:	db01      	blt.n	8005114 <_malloc_r+0x1c>
 8005110:	42a9      	cmp	r1, r5
 8005112:	d905      	bls.n	8005120 <_malloc_r+0x28>
 8005114:	230c      	movs	r3, #12
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	2600      	movs	r6, #0
 800511a:	4630      	mov	r0, r6
 800511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005120:	4e2e      	ldr	r6, [pc, #184]	; (80051dc <_malloc_r+0xe4>)
 8005122:	f001 fd0b 	bl	8006b3c <__malloc_lock>
 8005126:	6833      	ldr	r3, [r6, #0]
 8005128:	461c      	mov	r4, r3
 800512a:	bb34      	cbnz	r4, 800517a <_malloc_r+0x82>
 800512c:	4629      	mov	r1, r5
 800512e:	4638      	mov	r0, r7
 8005130:	f7ff ffc2 	bl	80050b8 <sbrk_aligned>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	4604      	mov	r4, r0
 8005138:	d14d      	bne.n	80051d6 <_malloc_r+0xde>
 800513a:	6834      	ldr	r4, [r6, #0]
 800513c:	4626      	mov	r6, r4
 800513e:	2e00      	cmp	r6, #0
 8005140:	d140      	bne.n	80051c4 <_malloc_r+0xcc>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	4631      	mov	r1, r6
 8005146:	4638      	mov	r0, r7
 8005148:	eb04 0803 	add.w	r8, r4, r3
 800514c:	f000 fcca 	bl	8005ae4 <_sbrk_r>
 8005150:	4580      	cmp	r8, r0
 8005152:	d13a      	bne.n	80051ca <_malloc_r+0xd2>
 8005154:	6821      	ldr	r1, [r4, #0]
 8005156:	3503      	adds	r5, #3
 8005158:	1a6d      	subs	r5, r5, r1
 800515a:	f025 0503 	bic.w	r5, r5, #3
 800515e:	3508      	adds	r5, #8
 8005160:	2d0c      	cmp	r5, #12
 8005162:	bf38      	it	cc
 8005164:	250c      	movcc	r5, #12
 8005166:	4629      	mov	r1, r5
 8005168:	4638      	mov	r0, r7
 800516a:	f7ff ffa5 	bl	80050b8 <sbrk_aligned>
 800516e:	3001      	adds	r0, #1
 8005170:	d02b      	beq.n	80051ca <_malloc_r+0xd2>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	442b      	add	r3, r5
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	e00e      	b.n	8005198 <_malloc_r+0xa0>
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	1b52      	subs	r2, r2, r5
 800517e:	d41e      	bmi.n	80051be <_malloc_r+0xc6>
 8005180:	2a0b      	cmp	r2, #11
 8005182:	d916      	bls.n	80051b2 <_malloc_r+0xba>
 8005184:	1961      	adds	r1, r4, r5
 8005186:	42a3      	cmp	r3, r4
 8005188:	6025      	str	r5, [r4, #0]
 800518a:	bf18      	it	ne
 800518c:	6059      	strne	r1, [r3, #4]
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	bf08      	it	eq
 8005192:	6031      	streq	r1, [r6, #0]
 8005194:	5162      	str	r2, [r4, r5]
 8005196:	604b      	str	r3, [r1, #4]
 8005198:	4638      	mov	r0, r7
 800519a:	f104 060b 	add.w	r6, r4, #11
 800519e:	f001 fcd3 	bl	8006b48 <__malloc_unlock>
 80051a2:	f026 0607 	bic.w	r6, r6, #7
 80051a6:	1d23      	adds	r3, r4, #4
 80051a8:	1af2      	subs	r2, r6, r3
 80051aa:	d0b6      	beq.n	800511a <_malloc_r+0x22>
 80051ac:	1b9b      	subs	r3, r3, r6
 80051ae:	50a3      	str	r3, [r4, r2]
 80051b0:	e7b3      	b.n	800511a <_malloc_r+0x22>
 80051b2:	6862      	ldr	r2, [r4, #4]
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	bf0c      	ite	eq
 80051b8:	6032      	streq	r2, [r6, #0]
 80051ba:	605a      	strne	r2, [r3, #4]
 80051bc:	e7ec      	b.n	8005198 <_malloc_r+0xa0>
 80051be:	4623      	mov	r3, r4
 80051c0:	6864      	ldr	r4, [r4, #4]
 80051c2:	e7b2      	b.n	800512a <_malloc_r+0x32>
 80051c4:	4634      	mov	r4, r6
 80051c6:	6876      	ldr	r6, [r6, #4]
 80051c8:	e7b9      	b.n	800513e <_malloc_r+0x46>
 80051ca:	230c      	movs	r3, #12
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	4638      	mov	r0, r7
 80051d0:	f001 fcba 	bl	8006b48 <__malloc_unlock>
 80051d4:	e7a1      	b.n	800511a <_malloc_r+0x22>
 80051d6:	6025      	str	r5, [r4, #0]
 80051d8:	e7de      	b.n	8005198 <_malloc_r+0xa0>
 80051da:	bf00      	nop
 80051dc:	200002a4 	.word	0x200002a4

080051e0 <__cvt>:
 80051e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	ec55 4b10 	vmov	r4, r5, d0
 80051e8:	2d00      	cmp	r5, #0
 80051ea:	460e      	mov	r6, r1
 80051ec:	4619      	mov	r1, r3
 80051ee:	462b      	mov	r3, r5
 80051f0:	bfbb      	ittet	lt
 80051f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051f6:	461d      	movlt	r5, r3
 80051f8:	2300      	movge	r3, #0
 80051fa:	232d      	movlt	r3, #45	; 0x2d
 80051fc:	700b      	strb	r3, [r1, #0]
 80051fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005200:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005204:	4691      	mov	r9, r2
 8005206:	f023 0820 	bic.w	r8, r3, #32
 800520a:	bfbc      	itt	lt
 800520c:	4622      	movlt	r2, r4
 800520e:	4614      	movlt	r4, r2
 8005210:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005214:	d005      	beq.n	8005222 <__cvt+0x42>
 8005216:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800521a:	d100      	bne.n	800521e <__cvt+0x3e>
 800521c:	3601      	adds	r6, #1
 800521e:	2102      	movs	r1, #2
 8005220:	e000      	b.n	8005224 <__cvt+0x44>
 8005222:	2103      	movs	r1, #3
 8005224:	ab03      	add	r3, sp, #12
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	ab02      	add	r3, sp, #8
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	ec45 4b10 	vmov	d0, r4, r5
 8005230:	4653      	mov	r3, sl
 8005232:	4632      	mov	r2, r6
 8005234:	f000 fe38 	bl	8005ea8 <_dtoa_r>
 8005238:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800523c:	4607      	mov	r7, r0
 800523e:	d102      	bne.n	8005246 <__cvt+0x66>
 8005240:	f019 0f01 	tst.w	r9, #1
 8005244:	d022      	beq.n	800528c <__cvt+0xac>
 8005246:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800524a:	eb07 0906 	add.w	r9, r7, r6
 800524e:	d110      	bne.n	8005272 <__cvt+0x92>
 8005250:	783b      	ldrb	r3, [r7, #0]
 8005252:	2b30      	cmp	r3, #48	; 0x30
 8005254:	d10a      	bne.n	800526c <__cvt+0x8c>
 8005256:	2200      	movs	r2, #0
 8005258:	2300      	movs	r3, #0
 800525a:	4620      	mov	r0, r4
 800525c:	4629      	mov	r1, r5
 800525e:	f7fb fc0b 	bl	8000a78 <__aeabi_dcmpeq>
 8005262:	b918      	cbnz	r0, 800526c <__cvt+0x8c>
 8005264:	f1c6 0601 	rsb	r6, r6, #1
 8005268:	f8ca 6000 	str.w	r6, [sl]
 800526c:	f8da 3000 	ldr.w	r3, [sl]
 8005270:	4499      	add	r9, r3
 8005272:	2200      	movs	r2, #0
 8005274:	2300      	movs	r3, #0
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fb fbfd 	bl	8000a78 <__aeabi_dcmpeq>
 800527e:	b108      	cbz	r0, 8005284 <__cvt+0xa4>
 8005280:	f8cd 900c 	str.w	r9, [sp, #12]
 8005284:	2230      	movs	r2, #48	; 0x30
 8005286:	9b03      	ldr	r3, [sp, #12]
 8005288:	454b      	cmp	r3, r9
 800528a:	d307      	bcc.n	800529c <__cvt+0xbc>
 800528c:	9b03      	ldr	r3, [sp, #12]
 800528e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005290:	1bdb      	subs	r3, r3, r7
 8005292:	4638      	mov	r0, r7
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	b004      	add	sp, #16
 8005298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529c:	1c59      	adds	r1, r3, #1
 800529e:	9103      	str	r1, [sp, #12]
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e7f0      	b.n	8005286 <__cvt+0xa6>

080052a4 <__exponent>:
 80052a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052a6:	4603      	mov	r3, r0
 80052a8:	2900      	cmp	r1, #0
 80052aa:	bfb8      	it	lt
 80052ac:	4249      	neglt	r1, r1
 80052ae:	f803 2b02 	strb.w	r2, [r3], #2
 80052b2:	bfb4      	ite	lt
 80052b4:	222d      	movlt	r2, #45	; 0x2d
 80052b6:	222b      	movge	r2, #43	; 0x2b
 80052b8:	2909      	cmp	r1, #9
 80052ba:	7042      	strb	r2, [r0, #1]
 80052bc:	dd2a      	ble.n	8005314 <__exponent+0x70>
 80052be:	f10d 0407 	add.w	r4, sp, #7
 80052c2:	46a4      	mov	ip, r4
 80052c4:	270a      	movs	r7, #10
 80052c6:	46a6      	mov	lr, r4
 80052c8:	460a      	mov	r2, r1
 80052ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80052ce:	fb07 1516 	mls	r5, r7, r6, r1
 80052d2:	3530      	adds	r5, #48	; 0x30
 80052d4:	2a63      	cmp	r2, #99	; 0x63
 80052d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80052da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052de:	4631      	mov	r1, r6
 80052e0:	dcf1      	bgt.n	80052c6 <__exponent+0x22>
 80052e2:	3130      	adds	r1, #48	; 0x30
 80052e4:	f1ae 0502 	sub.w	r5, lr, #2
 80052e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052ec:	1c44      	adds	r4, r0, #1
 80052ee:	4629      	mov	r1, r5
 80052f0:	4561      	cmp	r1, ip
 80052f2:	d30a      	bcc.n	800530a <__exponent+0x66>
 80052f4:	f10d 0209 	add.w	r2, sp, #9
 80052f8:	eba2 020e 	sub.w	r2, r2, lr
 80052fc:	4565      	cmp	r5, ip
 80052fe:	bf88      	it	hi
 8005300:	2200      	movhi	r2, #0
 8005302:	4413      	add	r3, r2
 8005304:	1a18      	subs	r0, r3, r0
 8005306:	b003      	add	sp, #12
 8005308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800530a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800530e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005312:	e7ed      	b.n	80052f0 <__exponent+0x4c>
 8005314:	2330      	movs	r3, #48	; 0x30
 8005316:	3130      	adds	r1, #48	; 0x30
 8005318:	7083      	strb	r3, [r0, #2]
 800531a:	70c1      	strb	r1, [r0, #3]
 800531c:	1d03      	adds	r3, r0, #4
 800531e:	e7f1      	b.n	8005304 <__exponent+0x60>

08005320 <_printf_float>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	ed2d 8b02 	vpush	{d8}
 8005328:	b08d      	sub	sp, #52	; 0x34
 800532a:	460c      	mov	r4, r1
 800532c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005330:	4616      	mov	r6, r2
 8005332:	461f      	mov	r7, r3
 8005334:	4605      	mov	r5, r0
 8005336:	f001 fbd9 	bl	8006aec <_localeconv_r>
 800533a:	f8d0 a000 	ldr.w	sl, [r0]
 800533e:	4650      	mov	r0, sl
 8005340:	f7fa ff6e 	bl	8000220 <strlen>
 8005344:	2300      	movs	r3, #0
 8005346:	930a      	str	r3, [sp, #40]	; 0x28
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	f8d8 3000 	ldr.w	r3, [r8]
 8005350:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005354:	3307      	adds	r3, #7
 8005356:	f023 0307 	bic.w	r3, r3, #7
 800535a:	f103 0208 	add.w	r2, r3, #8
 800535e:	f8c8 2000 	str.w	r2, [r8]
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800536a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800536e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005372:	9307      	str	r3, [sp, #28]
 8005374:	f8cd 8018 	str.w	r8, [sp, #24]
 8005378:	ee08 0a10 	vmov	s16, r0
 800537c:	4b9f      	ldr	r3, [pc, #636]	; (80055fc <_printf_float+0x2dc>)
 800537e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	f7fb fba9 	bl	8000adc <__aeabi_dcmpun>
 800538a:	bb88      	cbnz	r0, 80053f0 <_printf_float+0xd0>
 800538c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005390:	4b9a      	ldr	r3, [pc, #616]	; (80055fc <_printf_float+0x2dc>)
 8005392:	f04f 32ff 	mov.w	r2, #4294967295
 8005396:	f7fb fb83 	bl	8000aa0 <__aeabi_dcmple>
 800539a:	bb48      	cbnz	r0, 80053f0 <_printf_float+0xd0>
 800539c:	2200      	movs	r2, #0
 800539e:	2300      	movs	r3, #0
 80053a0:	4640      	mov	r0, r8
 80053a2:	4649      	mov	r1, r9
 80053a4:	f7fb fb72 	bl	8000a8c <__aeabi_dcmplt>
 80053a8:	b110      	cbz	r0, 80053b0 <_printf_float+0x90>
 80053aa:	232d      	movs	r3, #45	; 0x2d
 80053ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b0:	4b93      	ldr	r3, [pc, #588]	; (8005600 <_printf_float+0x2e0>)
 80053b2:	4894      	ldr	r0, [pc, #592]	; (8005604 <_printf_float+0x2e4>)
 80053b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053b8:	bf94      	ite	ls
 80053ba:	4698      	movls	r8, r3
 80053bc:	4680      	movhi	r8, r0
 80053be:	2303      	movs	r3, #3
 80053c0:	6123      	str	r3, [r4, #16]
 80053c2:	9b05      	ldr	r3, [sp, #20]
 80053c4:	f023 0204 	bic.w	r2, r3, #4
 80053c8:	6022      	str	r2, [r4, #0]
 80053ca:	f04f 0900 	mov.w	r9, #0
 80053ce:	9700      	str	r7, [sp, #0]
 80053d0:	4633      	mov	r3, r6
 80053d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80053d4:	4621      	mov	r1, r4
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 f9d8 	bl	800578c <_printf_common>
 80053dc:	3001      	adds	r0, #1
 80053de:	f040 8090 	bne.w	8005502 <_printf_float+0x1e2>
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295
 80053e6:	b00d      	add	sp, #52	; 0x34
 80053e8:	ecbd 8b02 	vpop	{d8}
 80053ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f0:	4642      	mov	r2, r8
 80053f2:	464b      	mov	r3, r9
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fb fb70 	bl	8000adc <__aeabi_dcmpun>
 80053fc:	b140      	cbz	r0, 8005410 <_printf_float+0xf0>
 80053fe:	464b      	mov	r3, r9
 8005400:	2b00      	cmp	r3, #0
 8005402:	bfbc      	itt	lt
 8005404:	232d      	movlt	r3, #45	; 0x2d
 8005406:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800540a:	487f      	ldr	r0, [pc, #508]	; (8005608 <_printf_float+0x2e8>)
 800540c:	4b7f      	ldr	r3, [pc, #508]	; (800560c <_printf_float+0x2ec>)
 800540e:	e7d1      	b.n	80053b4 <_printf_float+0x94>
 8005410:	6863      	ldr	r3, [r4, #4]
 8005412:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005416:	9206      	str	r2, [sp, #24]
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	d13f      	bne.n	800549c <_printf_float+0x17c>
 800541c:	2306      	movs	r3, #6
 800541e:	6063      	str	r3, [r4, #4]
 8005420:	9b05      	ldr	r3, [sp, #20]
 8005422:	6861      	ldr	r1, [r4, #4]
 8005424:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005428:	2300      	movs	r3, #0
 800542a:	9303      	str	r3, [sp, #12]
 800542c:	ab0a      	add	r3, sp, #40	; 0x28
 800542e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005432:	ab09      	add	r3, sp, #36	; 0x24
 8005434:	ec49 8b10 	vmov	d0, r8, r9
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	6022      	str	r2, [r4, #0]
 800543c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005440:	4628      	mov	r0, r5
 8005442:	f7ff fecd 	bl	80051e0 <__cvt>
 8005446:	9b06      	ldr	r3, [sp, #24]
 8005448:	9909      	ldr	r1, [sp, #36]	; 0x24
 800544a:	2b47      	cmp	r3, #71	; 0x47
 800544c:	4680      	mov	r8, r0
 800544e:	d108      	bne.n	8005462 <_printf_float+0x142>
 8005450:	1cc8      	adds	r0, r1, #3
 8005452:	db02      	blt.n	800545a <_printf_float+0x13a>
 8005454:	6863      	ldr	r3, [r4, #4]
 8005456:	4299      	cmp	r1, r3
 8005458:	dd41      	ble.n	80054de <_printf_float+0x1be>
 800545a:	f1ab 0b02 	sub.w	fp, fp, #2
 800545e:	fa5f fb8b 	uxtb.w	fp, fp
 8005462:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005466:	d820      	bhi.n	80054aa <_printf_float+0x18a>
 8005468:	3901      	subs	r1, #1
 800546a:	465a      	mov	r2, fp
 800546c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005470:	9109      	str	r1, [sp, #36]	; 0x24
 8005472:	f7ff ff17 	bl	80052a4 <__exponent>
 8005476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005478:	1813      	adds	r3, r2, r0
 800547a:	2a01      	cmp	r2, #1
 800547c:	4681      	mov	r9, r0
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	dc02      	bgt.n	8005488 <_printf_float+0x168>
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	07d2      	lsls	r2, r2, #31
 8005486:	d501      	bpl.n	800548c <_printf_float+0x16c>
 8005488:	3301      	adds	r3, #1
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005490:	2b00      	cmp	r3, #0
 8005492:	d09c      	beq.n	80053ce <_printf_float+0xae>
 8005494:	232d      	movs	r3, #45	; 0x2d
 8005496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800549a:	e798      	b.n	80053ce <_printf_float+0xae>
 800549c:	9a06      	ldr	r2, [sp, #24]
 800549e:	2a47      	cmp	r2, #71	; 0x47
 80054a0:	d1be      	bne.n	8005420 <_printf_float+0x100>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1bc      	bne.n	8005420 <_printf_float+0x100>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e7b9      	b.n	800541e <_printf_float+0xfe>
 80054aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054ae:	d118      	bne.n	80054e2 <_printf_float+0x1c2>
 80054b0:	2900      	cmp	r1, #0
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	dd0b      	ble.n	80054ce <_printf_float+0x1ae>
 80054b6:	6121      	str	r1, [r4, #16]
 80054b8:	b913      	cbnz	r3, 80054c0 <_printf_float+0x1a0>
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	07d0      	lsls	r0, r2, #31
 80054be:	d502      	bpl.n	80054c6 <_printf_float+0x1a6>
 80054c0:	3301      	adds	r3, #1
 80054c2:	440b      	add	r3, r1
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80054c8:	f04f 0900 	mov.w	r9, #0
 80054cc:	e7de      	b.n	800548c <_printf_float+0x16c>
 80054ce:	b913      	cbnz	r3, 80054d6 <_printf_float+0x1b6>
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	07d2      	lsls	r2, r2, #31
 80054d4:	d501      	bpl.n	80054da <_printf_float+0x1ba>
 80054d6:	3302      	adds	r3, #2
 80054d8:	e7f4      	b.n	80054c4 <_printf_float+0x1a4>
 80054da:	2301      	movs	r3, #1
 80054dc:	e7f2      	b.n	80054c4 <_printf_float+0x1a4>
 80054de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80054e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e4:	4299      	cmp	r1, r3
 80054e6:	db05      	blt.n	80054f4 <_printf_float+0x1d4>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	6121      	str	r1, [r4, #16]
 80054ec:	07d8      	lsls	r0, r3, #31
 80054ee:	d5ea      	bpl.n	80054c6 <_printf_float+0x1a6>
 80054f0:	1c4b      	adds	r3, r1, #1
 80054f2:	e7e7      	b.n	80054c4 <_printf_float+0x1a4>
 80054f4:	2900      	cmp	r1, #0
 80054f6:	bfd4      	ite	le
 80054f8:	f1c1 0202 	rsble	r2, r1, #2
 80054fc:	2201      	movgt	r2, #1
 80054fe:	4413      	add	r3, r2
 8005500:	e7e0      	b.n	80054c4 <_printf_float+0x1a4>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	055a      	lsls	r2, r3, #21
 8005506:	d407      	bmi.n	8005518 <_printf_float+0x1f8>
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	4642      	mov	r2, r8
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	d12c      	bne.n	8005570 <_printf_float+0x250>
 8005516:	e764      	b.n	80053e2 <_printf_float+0xc2>
 8005518:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800551c:	f240 80e0 	bls.w	80056e0 <_printf_float+0x3c0>
 8005520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005524:	2200      	movs	r2, #0
 8005526:	2300      	movs	r3, #0
 8005528:	f7fb faa6 	bl	8000a78 <__aeabi_dcmpeq>
 800552c:	2800      	cmp	r0, #0
 800552e:	d034      	beq.n	800559a <_printf_float+0x27a>
 8005530:	4a37      	ldr	r2, [pc, #220]	; (8005610 <_printf_float+0x2f0>)
 8005532:	2301      	movs	r3, #1
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f af51 	beq.w	80053e2 <_printf_float+0xc2>
 8005540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005544:	429a      	cmp	r2, r3
 8005546:	db02      	blt.n	800554e <_printf_float+0x22e>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	07d8      	lsls	r0, r3, #31
 800554c:	d510      	bpl.n	8005570 <_printf_float+0x250>
 800554e:	ee18 3a10 	vmov	r3, s16
 8005552:	4652      	mov	r2, sl
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f af41 	beq.w	80053e2 <_printf_float+0xc2>
 8005560:	f04f 0800 	mov.w	r8, #0
 8005564:	f104 091a 	add.w	r9, r4, #26
 8005568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800556a:	3b01      	subs	r3, #1
 800556c:	4543      	cmp	r3, r8
 800556e:	dc09      	bgt.n	8005584 <_printf_float+0x264>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	079b      	lsls	r3, r3, #30
 8005574:	f100 8105 	bmi.w	8005782 <_printf_float+0x462>
 8005578:	68e0      	ldr	r0, [r4, #12]
 800557a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800557c:	4298      	cmp	r0, r3
 800557e:	bfb8      	it	lt
 8005580:	4618      	movlt	r0, r3
 8005582:	e730      	b.n	80053e6 <_printf_float+0xc6>
 8005584:	2301      	movs	r3, #1
 8005586:	464a      	mov	r2, r9
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f af27 	beq.w	80053e2 <_printf_float+0xc2>
 8005594:	f108 0801 	add.w	r8, r8, #1
 8005598:	e7e6      	b.n	8005568 <_printf_float+0x248>
 800559a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	dc39      	bgt.n	8005614 <_printf_float+0x2f4>
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <_printf_float+0x2f0>)
 80055a2:	2301      	movs	r3, #1
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	f43f af19 	beq.w	80053e2 <_printf_float+0xc2>
 80055b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055b4:	4313      	orrs	r3, r2
 80055b6:	d102      	bne.n	80055be <_printf_float+0x29e>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	07d9      	lsls	r1, r3, #31
 80055bc:	d5d8      	bpl.n	8005570 <_printf_float+0x250>
 80055be:	ee18 3a10 	vmov	r3, s16
 80055c2:	4652      	mov	r2, sl
 80055c4:	4631      	mov	r1, r6
 80055c6:	4628      	mov	r0, r5
 80055c8:	47b8      	blx	r7
 80055ca:	3001      	adds	r0, #1
 80055cc:	f43f af09 	beq.w	80053e2 <_printf_float+0xc2>
 80055d0:	f04f 0900 	mov.w	r9, #0
 80055d4:	f104 0a1a 	add.w	sl, r4, #26
 80055d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055da:	425b      	negs	r3, r3
 80055dc:	454b      	cmp	r3, r9
 80055de:	dc01      	bgt.n	80055e4 <_printf_float+0x2c4>
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	e792      	b.n	800550a <_printf_float+0x1ea>
 80055e4:	2301      	movs	r3, #1
 80055e6:	4652      	mov	r2, sl
 80055e8:	4631      	mov	r1, r6
 80055ea:	4628      	mov	r0, r5
 80055ec:	47b8      	blx	r7
 80055ee:	3001      	adds	r0, #1
 80055f0:	f43f aef7 	beq.w	80053e2 <_printf_float+0xc2>
 80055f4:	f109 0901 	add.w	r9, r9, #1
 80055f8:	e7ee      	b.n	80055d8 <_printf_float+0x2b8>
 80055fa:	bf00      	nop
 80055fc:	7fefffff 	.word	0x7fefffff
 8005600:	08007970 	.word	0x08007970
 8005604:	08007974 	.word	0x08007974
 8005608:	0800797c 	.word	0x0800797c
 800560c:	08007978 	.word	0x08007978
 8005610:	08007980 	.word	0x08007980
 8005614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005618:	429a      	cmp	r2, r3
 800561a:	bfa8      	it	ge
 800561c:	461a      	movge	r2, r3
 800561e:	2a00      	cmp	r2, #0
 8005620:	4691      	mov	r9, r2
 8005622:	dc37      	bgt.n	8005694 <_printf_float+0x374>
 8005624:	f04f 0b00 	mov.w	fp, #0
 8005628:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800562c:	f104 021a 	add.w	r2, r4, #26
 8005630:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005632:	9305      	str	r3, [sp, #20]
 8005634:	eba3 0309 	sub.w	r3, r3, r9
 8005638:	455b      	cmp	r3, fp
 800563a:	dc33      	bgt.n	80056a4 <_printf_float+0x384>
 800563c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005640:	429a      	cmp	r2, r3
 8005642:	db3b      	blt.n	80056bc <_printf_float+0x39c>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	07da      	lsls	r2, r3, #31
 8005648:	d438      	bmi.n	80056bc <_printf_float+0x39c>
 800564a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564c:	9a05      	ldr	r2, [sp, #20]
 800564e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005650:	1a9a      	subs	r2, r3, r2
 8005652:	eba3 0901 	sub.w	r9, r3, r1
 8005656:	4591      	cmp	r9, r2
 8005658:	bfa8      	it	ge
 800565a:	4691      	movge	r9, r2
 800565c:	f1b9 0f00 	cmp.w	r9, #0
 8005660:	dc35      	bgt.n	80056ce <_printf_float+0x3ae>
 8005662:	f04f 0800 	mov.w	r8, #0
 8005666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800566a:	f104 0a1a 	add.w	sl, r4, #26
 800566e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	eba3 0309 	sub.w	r3, r3, r9
 8005678:	4543      	cmp	r3, r8
 800567a:	f77f af79 	ble.w	8005570 <_printf_float+0x250>
 800567e:	2301      	movs	r3, #1
 8005680:	4652      	mov	r2, sl
 8005682:	4631      	mov	r1, r6
 8005684:	4628      	mov	r0, r5
 8005686:	47b8      	blx	r7
 8005688:	3001      	adds	r0, #1
 800568a:	f43f aeaa 	beq.w	80053e2 <_printf_float+0xc2>
 800568e:	f108 0801 	add.w	r8, r8, #1
 8005692:	e7ec      	b.n	800566e <_printf_float+0x34e>
 8005694:	4613      	mov	r3, r2
 8005696:	4631      	mov	r1, r6
 8005698:	4642      	mov	r2, r8
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	d1c0      	bne.n	8005624 <_printf_float+0x304>
 80056a2:	e69e      	b.n	80053e2 <_printf_float+0xc2>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	9205      	str	r2, [sp, #20]
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f ae97 	beq.w	80053e2 <_printf_float+0xc2>
 80056b4:	9a05      	ldr	r2, [sp, #20]
 80056b6:	f10b 0b01 	add.w	fp, fp, #1
 80056ba:	e7b9      	b.n	8005630 <_printf_float+0x310>
 80056bc:	ee18 3a10 	vmov	r3, s16
 80056c0:	4652      	mov	r2, sl
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	d1be      	bne.n	800564a <_printf_float+0x32a>
 80056cc:	e689      	b.n	80053e2 <_printf_float+0xc2>
 80056ce:	9a05      	ldr	r2, [sp, #20]
 80056d0:	464b      	mov	r3, r9
 80056d2:	4442      	add	r2, r8
 80056d4:	4631      	mov	r1, r6
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b8      	blx	r7
 80056da:	3001      	adds	r0, #1
 80056dc:	d1c1      	bne.n	8005662 <_printf_float+0x342>
 80056de:	e680      	b.n	80053e2 <_printf_float+0xc2>
 80056e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056e2:	2a01      	cmp	r2, #1
 80056e4:	dc01      	bgt.n	80056ea <_printf_float+0x3ca>
 80056e6:	07db      	lsls	r3, r3, #31
 80056e8:	d538      	bpl.n	800575c <_printf_float+0x43c>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4642      	mov	r2, r8
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b8      	blx	r7
 80056f4:	3001      	adds	r0, #1
 80056f6:	f43f ae74 	beq.w	80053e2 <_printf_float+0xc2>
 80056fa:	ee18 3a10 	vmov	r3, s16
 80056fe:	4652      	mov	r2, sl
 8005700:	4631      	mov	r1, r6
 8005702:	4628      	mov	r0, r5
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	f43f ae6b 	beq.w	80053e2 <_printf_float+0xc2>
 800570c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005710:	2200      	movs	r2, #0
 8005712:	2300      	movs	r3, #0
 8005714:	f7fb f9b0 	bl	8000a78 <__aeabi_dcmpeq>
 8005718:	b9d8      	cbnz	r0, 8005752 <_printf_float+0x432>
 800571a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571c:	f108 0201 	add.w	r2, r8, #1
 8005720:	3b01      	subs	r3, #1
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	d10e      	bne.n	800574a <_printf_float+0x42a>
 800572c:	e659      	b.n	80053e2 <_printf_float+0xc2>
 800572e:	2301      	movs	r3, #1
 8005730:	4652      	mov	r2, sl
 8005732:	4631      	mov	r1, r6
 8005734:	4628      	mov	r0, r5
 8005736:	47b8      	blx	r7
 8005738:	3001      	adds	r0, #1
 800573a:	f43f ae52 	beq.w	80053e2 <_printf_float+0xc2>
 800573e:	f108 0801 	add.w	r8, r8, #1
 8005742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005744:	3b01      	subs	r3, #1
 8005746:	4543      	cmp	r3, r8
 8005748:	dcf1      	bgt.n	800572e <_printf_float+0x40e>
 800574a:	464b      	mov	r3, r9
 800574c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005750:	e6dc      	b.n	800550c <_printf_float+0x1ec>
 8005752:	f04f 0800 	mov.w	r8, #0
 8005756:	f104 0a1a 	add.w	sl, r4, #26
 800575a:	e7f2      	b.n	8005742 <_printf_float+0x422>
 800575c:	2301      	movs	r3, #1
 800575e:	4642      	mov	r2, r8
 8005760:	e7df      	b.n	8005722 <_printf_float+0x402>
 8005762:	2301      	movs	r3, #1
 8005764:	464a      	mov	r2, r9
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	f43f ae38 	beq.w	80053e2 <_printf_float+0xc2>
 8005772:	f108 0801 	add.w	r8, r8, #1
 8005776:	68e3      	ldr	r3, [r4, #12]
 8005778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800577a:	1a5b      	subs	r3, r3, r1
 800577c:	4543      	cmp	r3, r8
 800577e:	dcf0      	bgt.n	8005762 <_printf_float+0x442>
 8005780:	e6fa      	b.n	8005578 <_printf_float+0x258>
 8005782:	f04f 0800 	mov.w	r8, #0
 8005786:	f104 0919 	add.w	r9, r4, #25
 800578a:	e7f4      	b.n	8005776 <_printf_float+0x456>

0800578c <_printf_common>:
 800578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	4616      	mov	r6, r2
 8005792:	4699      	mov	r9, r3
 8005794:	688a      	ldr	r2, [r1, #8]
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800579c:	4293      	cmp	r3, r2
 800579e:	bfb8      	it	lt
 80057a0:	4613      	movlt	r3, r2
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057a8:	4607      	mov	r7, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	b10a      	cbz	r2, 80057b2 <_printf_common+0x26>
 80057ae:	3301      	adds	r3, #1
 80057b0:	6033      	str	r3, [r6, #0]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	0699      	lsls	r1, r3, #26
 80057b6:	bf42      	ittt	mi
 80057b8:	6833      	ldrmi	r3, [r6, #0]
 80057ba:	3302      	addmi	r3, #2
 80057bc:	6033      	strmi	r3, [r6, #0]
 80057be:	6825      	ldr	r5, [r4, #0]
 80057c0:	f015 0506 	ands.w	r5, r5, #6
 80057c4:	d106      	bne.n	80057d4 <_printf_common+0x48>
 80057c6:	f104 0a19 	add.w	sl, r4, #25
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	6832      	ldr	r2, [r6, #0]
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	dc26      	bgt.n	8005822 <_printf_common+0x96>
 80057d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057d8:	1e13      	subs	r3, r2, #0
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	bf18      	it	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	0692      	lsls	r2, r2, #26
 80057e2:	d42b      	bmi.n	800583c <_printf_common+0xb0>
 80057e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057e8:	4649      	mov	r1, r9
 80057ea:	4638      	mov	r0, r7
 80057ec:	47c0      	blx	r8
 80057ee:	3001      	adds	r0, #1
 80057f0:	d01e      	beq.n	8005830 <_printf_common+0xa4>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	68e5      	ldr	r5, [r4, #12]
 80057f6:	6832      	ldr	r2, [r6, #0]
 80057f8:	f003 0306 	and.w	r3, r3, #6
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	bf08      	it	eq
 8005800:	1aad      	subeq	r5, r5, r2
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	6922      	ldr	r2, [r4, #16]
 8005806:	bf0c      	ite	eq
 8005808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800580c:	2500      	movne	r5, #0
 800580e:	4293      	cmp	r3, r2
 8005810:	bfc4      	itt	gt
 8005812:	1a9b      	subgt	r3, r3, r2
 8005814:	18ed      	addgt	r5, r5, r3
 8005816:	2600      	movs	r6, #0
 8005818:	341a      	adds	r4, #26
 800581a:	42b5      	cmp	r5, r6
 800581c:	d11a      	bne.n	8005854 <_printf_common+0xc8>
 800581e:	2000      	movs	r0, #0
 8005820:	e008      	b.n	8005834 <_printf_common+0xa8>
 8005822:	2301      	movs	r3, #1
 8005824:	4652      	mov	r2, sl
 8005826:	4649      	mov	r1, r9
 8005828:	4638      	mov	r0, r7
 800582a:	47c0      	blx	r8
 800582c:	3001      	adds	r0, #1
 800582e:	d103      	bne.n	8005838 <_printf_common+0xac>
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005838:	3501      	adds	r5, #1
 800583a:	e7c6      	b.n	80057ca <_printf_common+0x3e>
 800583c:	18e1      	adds	r1, r4, r3
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	2030      	movs	r0, #48	; 0x30
 8005842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005846:	4422      	add	r2, r4
 8005848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800584c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005850:	3302      	adds	r3, #2
 8005852:	e7c7      	b.n	80057e4 <_printf_common+0x58>
 8005854:	2301      	movs	r3, #1
 8005856:	4622      	mov	r2, r4
 8005858:	4649      	mov	r1, r9
 800585a:	4638      	mov	r0, r7
 800585c:	47c0      	blx	r8
 800585e:	3001      	adds	r0, #1
 8005860:	d0e6      	beq.n	8005830 <_printf_common+0xa4>
 8005862:	3601      	adds	r6, #1
 8005864:	e7d9      	b.n	800581a <_printf_common+0x8e>
	...

08005868 <_printf_i>:
 8005868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	7e0f      	ldrb	r7, [r1, #24]
 800586e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005870:	2f78      	cmp	r7, #120	; 0x78
 8005872:	4691      	mov	r9, r2
 8005874:	4680      	mov	r8, r0
 8005876:	460c      	mov	r4, r1
 8005878:	469a      	mov	sl, r3
 800587a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800587e:	d807      	bhi.n	8005890 <_printf_i+0x28>
 8005880:	2f62      	cmp	r7, #98	; 0x62
 8005882:	d80a      	bhi.n	800589a <_printf_i+0x32>
 8005884:	2f00      	cmp	r7, #0
 8005886:	f000 80d8 	beq.w	8005a3a <_printf_i+0x1d2>
 800588a:	2f58      	cmp	r7, #88	; 0x58
 800588c:	f000 80a3 	beq.w	80059d6 <_printf_i+0x16e>
 8005890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005898:	e03a      	b.n	8005910 <_printf_i+0xa8>
 800589a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800589e:	2b15      	cmp	r3, #21
 80058a0:	d8f6      	bhi.n	8005890 <_printf_i+0x28>
 80058a2:	a101      	add	r1, pc, #4	; (adr r1, 80058a8 <_printf_i+0x40>)
 80058a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058a8:	08005901 	.word	0x08005901
 80058ac:	08005915 	.word	0x08005915
 80058b0:	08005891 	.word	0x08005891
 80058b4:	08005891 	.word	0x08005891
 80058b8:	08005891 	.word	0x08005891
 80058bc:	08005891 	.word	0x08005891
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005891 	.word	0x08005891
 80058c8:	08005891 	.word	0x08005891
 80058cc:	08005891 	.word	0x08005891
 80058d0:	08005891 	.word	0x08005891
 80058d4:	08005a21 	.word	0x08005a21
 80058d8:	08005945 	.word	0x08005945
 80058dc:	08005a03 	.word	0x08005a03
 80058e0:	08005891 	.word	0x08005891
 80058e4:	08005891 	.word	0x08005891
 80058e8:	08005a43 	.word	0x08005a43
 80058ec:	08005891 	.word	0x08005891
 80058f0:	08005945 	.word	0x08005945
 80058f4:	08005891 	.word	0x08005891
 80058f8:	08005891 	.word	0x08005891
 80058fc:	08005a0b 	.word	0x08005a0b
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	1d1a      	adds	r2, r3, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	602a      	str	r2, [r5, #0]
 8005908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800590c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005910:	2301      	movs	r3, #1
 8005912:	e0a3      	b.n	8005a5c <_printf_i+0x1f4>
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	6829      	ldr	r1, [r5, #0]
 8005918:	0606      	lsls	r6, r0, #24
 800591a:	f101 0304 	add.w	r3, r1, #4
 800591e:	d50a      	bpl.n	8005936 <_printf_i+0xce>
 8005920:	680e      	ldr	r6, [r1, #0]
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	2e00      	cmp	r6, #0
 8005926:	da03      	bge.n	8005930 <_printf_i+0xc8>
 8005928:	232d      	movs	r3, #45	; 0x2d
 800592a:	4276      	negs	r6, r6
 800592c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005930:	485e      	ldr	r0, [pc, #376]	; (8005aac <_printf_i+0x244>)
 8005932:	230a      	movs	r3, #10
 8005934:	e019      	b.n	800596a <_printf_i+0x102>
 8005936:	680e      	ldr	r6, [r1, #0]
 8005938:	602b      	str	r3, [r5, #0]
 800593a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800593e:	bf18      	it	ne
 8005940:	b236      	sxthne	r6, r6
 8005942:	e7ef      	b.n	8005924 <_printf_i+0xbc>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	1d19      	adds	r1, r3, #4
 800594a:	6029      	str	r1, [r5, #0]
 800594c:	0601      	lsls	r1, r0, #24
 800594e:	d501      	bpl.n	8005954 <_printf_i+0xec>
 8005950:	681e      	ldr	r6, [r3, #0]
 8005952:	e002      	b.n	800595a <_printf_i+0xf2>
 8005954:	0646      	lsls	r6, r0, #25
 8005956:	d5fb      	bpl.n	8005950 <_printf_i+0xe8>
 8005958:	881e      	ldrh	r6, [r3, #0]
 800595a:	4854      	ldr	r0, [pc, #336]	; (8005aac <_printf_i+0x244>)
 800595c:	2f6f      	cmp	r7, #111	; 0x6f
 800595e:	bf0c      	ite	eq
 8005960:	2308      	moveq	r3, #8
 8005962:	230a      	movne	r3, #10
 8005964:	2100      	movs	r1, #0
 8005966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800596a:	6865      	ldr	r5, [r4, #4]
 800596c:	60a5      	str	r5, [r4, #8]
 800596e:	2d00      	cmp	r5, #0
 8005970:	bfa2      	ittt	ge
 8005972:	6821      	ldrge	r1, [r4, #0]
 8005974:	f021 0104 	bicge.w	r1, r1, #4
 8005978:	6021      	strge	r1, [r4, #0]
 800597a:	b90e      	cbnz	r6, 8005980 <_printf_i+0x118>
 800597c:	2d00      	cmp	r5, #0
 800597e:	d04d      	beq.n	8005a1c <_printf_i+0x1b4>
 8005980:	4615      	mov	r5, r2
 8005982:	fbb6 f1f3 	udiv	r1, r6, r3
 8005986:	fb03 6711 	mls	r7, r3, r1, r6
 800598a:	5dc7      	ldrb	r7, [r0, r7]
 800598c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005990:	4637      	mov	r7, r6
 8005992:	42bb      	cmp	r3, r7
 8005994:	460e      	mov	r6, r1
 8005996:	d9f4      	bls.n	8005982 <_printf_i+0x11a>
 8005998:	2b08      	cmp	r3, #8
 800599a:	d10b      	bne.n	80059b4 <_printf_i+0x14c>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	07de      	lsls	r6, r3, #31
 80059a0:	d508      	bpl.n	80059b4 <_printf_i+0x14c>
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	6861      	ldr	r1, [r4, #4]
 80059a6:	4299      	cmp	r1, r3
 80059a8:	bfde      	ittt	le
 80059aa:	2330      	movle	r3, #48	; 0x30
 80059ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059b4:	1b52      	subs	r2, r2, r5
 80059b6:	6122      	str	r2, [r4, #16]
 80059b8:	f8cd a000 	str.w	sl, [sp]
 80059bc:	464b      	mov	r3, r9
 80059be:	aa03      	add	r2, sp, #12
 80059c0:	4621      	mov	r1, r4
 80059c2:	4640      	mov	r0, r8
 80059c4:	f7ff fee2 	bl	800578c <_printf_common>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d14c      	bne.n	8005a66 <_printf_i+0x1fe>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	b004      	add	sp, #16
 80059d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d6:	4835      	ldr	r0, [pc, #212]	; (8005aac <_printf_i+0x244>)
 80059d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059dc:	6829      	ldr	r1, [r5, #0]
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80059e4:	6029      	str	r1, [r5, #0]
 80059e6:	061d      	lsls	r5, r3, #24
 80059e8:	d514      	bpl.n	8005a14 <_printf_i+0x1ac>
 80059ea:	07df      	lsls	r7, r3, #31
 80059ec:	bf44      	itt	mi
 80059ee:	f043 0320 	orrmi.w	r3, r3, #32
 80059f2:	6023      	strmi	r3, [r4, #0]
 80059f4:	b91e      	cbnz	r6, 80059fe <_printf_i+0x196>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	f023 0320 	bic.w	r3, r3, #32
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	2310      	movs	r3, #16
 8005a00:	e7b0      	b.n	8005964 <_printf_i+0xfc>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	f043 0320 	orr.w	r3, r3, #32
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	2378      	movs	r3, #120	; 0x78
 8005a0c:	4828      	ldr	r0, [pc, #160]	; (8005ab0 <_printf_i+0x248>)
 8005a0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a12:	e7e3      	b.n	80059dc <_printf_i+0x174>
 8005a14:	0659      	lsls	r1, r3, #25
 8005a16:	bf48      	it	mi
 8005a18:	b2b6      	uxthmi	r6, r6
 8005a1a:	e7e6      	b.n	80059ea <_printf_i+0x182>
 8005a1c:	4615      	mov	r5, r2
 8005a1e:	e7bb      	b.n	8005998 <_printf_i+0x130>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	6826      	ldr	r6, [r4, #0]
 8005a24:	6961      	ldr	r1, [r4, #20]
 8005a26:	1d18      	adds	r0, r3, #4
 8005a28:	6028      	str	r0, [r5, #0]
 8005a2a:	0635      	lsls	r5, r6, #24
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	d501      	bpl.n	8005a34 <_printf_i+0x1cc>
 8005a30:	6019      	str	r1, [r3, #0]
 8005a32:	e002      	b.n	8005a3a <_printf_i+0x1d2>
 8005a34:	0670      	lsls	r0, r6, #25
 8005a36:	d5fb      	bpl.n	8005a30 <_printf_i+0x1c8>
 8005a38:	8019      	strh	r1, [r3, #0]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	4615      	mov	r5, r2
 8005a40:	e7ba      	b.n	80059b8 <_printf_i+0x150>
 8005a42:	682b      	ldr	r3, [r5, #0]
 8005a44:	1d1a      	adds	r2, r3, #4
 8005a46:	602a      	str	r2, [r5, #0]
 8005a48:	681d      	ldr	r5, [r3, #0]
 8005a4a:	6862      	ldr	r2, [r4, #4]
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f7fa fb96 	bl	8000180 <memchr>
 8005a54:	b108      	cbz	r0, 8005a5a <_printf_i+0x1f2>
 8005a56:	1b40      	subs	r0, r0, r5
 8005a58:	6060      	str	r0, [r4, #4]
 8005a5a:	6863      	ldr	r3, [r4, #4]
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a64:	e7a8      	b.n	80059b8 <_printf_i+0x150>
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	462a      	mov	r2, r5
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	47d0      	blx	sl
 8005a70:	3001      	adds	r0, #1
 8005a72:	d0ab      	beq.n	80059cc <_printf_i+0x164>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	079b      	lsls	r3, r3, #30
 8005a78:	d413      	bmi.n	8005aa2 <_printf_i+0x23a>
 8005a7a:	68e0      	ldr	r0, [r4, #12]
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	4298      	cmp	r0, r3
 8005a80:	bfb8      	it	lt
 8005a82:	4618      	movlt	r0, r3
 8005a84:	e7a4      	b.n	80059d0 <_printf_i+0x168>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4632      	mov	r2, r6
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	47d0      	blx	sl
 8005a90:	3001      	adds	r0, #1
 8005a92:	d09b      	beq.n	80059cc <_printf_i+0x164>
 8005a94:	3501      	adds	r5, #1
 8005a96:	68e3      	ldr	r3, [r4, #12]
 8005a98:	9903      	ldr	r1, [sp, #12]
 8005a9a:	1a5b      	subs	r3, r3, r1
 8005a9c:	42ab      	cmp	r3, r5
 8005a9e:	dcf2      	bgt.n	8005a86 <_printf_i+0x21e>
 8005aa0:	e7eb      	b.n	8005a7a <_printf_i+0x212>
 8005aa2:	2500      	movs	r5, #0
 8005aa4:	f104 0619 	add.w	r6, r4, #25
 8005aa8:	e7f5      	b.n	8005a96 <_printf_i+0x22e>
 8005aaa:	bf00      	nop
 8005aac:	08007982 	.word	0x08007982
 8005ab0:	08007993 	.word	0x08007993

08005ab4 <iprintf>:
 8005ab4:	b40f      	push	{r0, r1, r2, r3}
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <iprintf+0x2c>)
 8005ab8:	b513      	push	{r0, r1, r4, lr}
 8005aba:	681c      	ldr	r4, [r3, #0]
 8005abc:	b124      	cbz	r4, 8005ac8 <iprintf+0x14>
 8005abe:	69a3      	ldr	r3, [r4, #24]
 8005ac0:	b913      	cbnz	r3, 8005ac8 <iprintf+0x14>
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f7ff f95c 	bl	8004d80 <__sinit>
 8005ac8:	ab05      	add	r3, sp, #20
 8005aca:	9a04      	ldr	r2, [sp, #16]
 8005acc:	68a1      	ldr	r1, [r4, #8]
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f001 fc03 	bl	80072dc <_vfiprintf_r>
 8005ad6:	b002      	add	sp, #8
 8005ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005adc:	b004      	add	sp, #16
 8005ade:	4770      	bx	lr
 8005ae0:	20000018 	.word	0x20000018

08005ae4 <_sbrk_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d06      	ldr	r5, [pc, #24]	; (8005b00 <_sbrk_r+0x1c>)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4604      	mov	r4, r0
 8005aec:	4608      	mov	r0, r1
 8005aee:	602b      	str	r3, [r5, #0]
 8005af0:	f7fb fce0 	bl	80014b4 <_sbrk>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_sbrk_r+0x1a>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_sbrk_r+0x1a>
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	200002ac 	.word	0x200002ac

08005b04 <__sread>:
 8005b04:	b510      	push	{r4, lr}
 8005b06:	460c      	mov	r4, r1
 8005b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0c:	f001 fd16 	bl	800753c <_read_r>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	bfab      	itete	ge
 8005b14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b16:	89a3      	ldrhlt	r3, [r4, #12]
 8005b18:	181b      	addge	r3, r3, r0
 8005b1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b1e:	bfac      	ite	ge
 8005b20:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b22:	81a3      	strhlt	r3, [r4, #12]
 8005b24:	bd10      	pop	{r4, pc}

08005b26 <__swrite>:
 8005b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2a:	461f      	mov	r7, r3
 8005b2c:	898b      	ldrh	r3, [r1, #12]
 8005b2e:	05db      	lsls	r3, r3, #23
 8005b30:	4605      	mov	r5, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	4616      	mov	r6, r2
 8005b36:	d505      	bpl.n	8005b44 <__swrite+0x1e>
 8005b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f000 ffd8 	bl	8006af4 <_lseek_r>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b4e:	81a3      	strh	r3, [r4, #12]
 8005b50:	4632      	mov	r2, r6
 8005b52:	463b      	mov	r3, r7
 8005b54:	4628      	mov	r0, r5
 8005b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5a:	f000 b869 	b.w	8005c30 <_write_r>

08005b5e <__sseek>:
 8005b5e:	b510      	push	{r4, lr}
 8005b60:	460c      	mov	r4, r1
 8005b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b66:	f000 ffc5 	bl	8006af4 <_lseek_r>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	bf15      	itete	ne
 8005b70:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b7a:	81a3      	strheq	r3, [r4, #12]
 8005b7c:	bf18      	it	ne
 8005b7e:	81a3      	strhne	r3, [r4, #12]
 8005b80:	bd10      	pop	{r4, pc}

08005b82 <__sclose>:
 8005b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b86:	f000 b8f1 	b.w	8005d6c <_close_r>
	...

08005b8c <__swbuf_r>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	460e      	mov	r6, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	4605      	mov	r5, r0
 8005b94:	b118      	cbz	r0, 8005b9e <__swbuf_r+0x12>
 8005b96:	6983      	ldr	r3, [r0, #24]
 8005b98:	b90b      	cbnz	r3, 8005b9e <__swbuf_r+0x12>
 8005b9a:	f7ff f8f1 	bl	8004d80 <__sinit>
 8005b9e:	4b21      	ldr	r3, [pc, #132]	; (8005c24 <__swbuf_r+0x98>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	d12b      	bne.n	8005bfc <__swbuf_r+0x70>
 8005ba4:	686c      	ldr	r4, [r5, #4]
 8005ba6:	69a3      	ldr	r3, [r4, #24]
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	071a      	lsls	r2, r3, #28
 8005bae:	d52f      	bpl.n	8005c10 <__swbuf_r+0x84>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	b36b      	cbz	r3, 8005c10 <__swbuf_r+0x84>
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	6820      	ldr	r0, [r4, #0]
 8005bb8:	1ac0      	subs	r0, r0, r3
 8005bba:	6963      	ldr	r3, [r4, #20]
 8005bbc:	b2f6      	uxtb	r6, r6
 8005bbe:	4283      	cmp	r3, r0
 8005bc0:	4637      	mov	r7, r6
 8005bc2:	dc04      	bgt.n	8005bce <__swbuf_r+0x42>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f7ff f846 	bl	8004c58 <_fflush_r>
 8005bcc:	bb30      	cbnz	r0, 8005c1c <__swbuf_r+0x90>
 8005bce:	68a3      	ldr	r3, [r4, #8]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	60a3      	str	r3, [r4, #8]
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	6022      	str	r2, [r4, #0]
 8005bda:	701e      	strb	r6, [r3, #0]
 8005bdc:	6963      	ldr	r3, [r4, #20]
 8005bde:	3001      	adds	r0, #1
 8005be0:	4283      	cmp	r3, r0
 8005be2:	d004      	beq.n	8005bee <__swbuf_r+0x62>
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	07db      	lsls	r3, r3, #31
 8005be8:	d506      	bpl.n	8005bf8 <__swbuf_r+0x6c>
 8005bea:	2e0a      	cmp	r6, #10
 8005bec:	d104      	bne.n	8005bf8 <__swbuf_r+0x6c>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f7ff f831 	bl	8004c58 <_fflush_r>
 8005bf6:	b988      	cbnz	r0, 8005c1c <__swbuf_r+0x90>
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <__swbuf_r+0x9c>)
 8005bfe:	429c      	cmp	r4, r3
 8005c00:	d101      	bne.n	8005c06 <__swbuf_r+0x7a>
 8005c02:	68ac      	ldr	r4, [r5, #8]
 8005c04:	e7cf      	b.n	8005ba6 <__swbuf_r+0x1a>
 8005c06:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <__swbuf_r+0xa0>)
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	bf08      	it	eq
 8005c0c:	68ec      	ldreq	r4, [r5, #12]
 8005c0e:	e7ca      	b.n	8005ba6 <__swbuf_r+0x1a>
 8005c10:	4621      	mov	r1, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f81e 	bl	8005c54 <__swsetup_r>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d0cb      	beq.n	8005bb4 <__swbuf_r+0x28>
 8005c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c20:	e7ea      	b.n	8005bf8 <__swbuf_r+0x6c>
 8005c22:	bf00      	nop
 8005c24:	0800792c 	.word	0x0800792c
 8005c28:	0800794c 	.word	0x0800794c
 8005c2c:	0800790c 	.word	0x0800790c

08005c30 <_write_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d07      	ldr	r5, [pc, #28]	; (8005c50 <_write_r+0x20>)
 8005c34:	4604      	mov	r4, r0
 8005c36:	4608      	mov	r0, r1
 8005c38:	4611      	mov	r1, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	602a      	str	r2, [r5, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f7fb fbe8 	bl	8001414 <_write>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_write_r+0x1e>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_write_r+0x1e>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	200002ac 	.word	0x200002ac

08005c54 <__swsetup_r>:
 8005c54:	4b32      	ldr	r3, [pc, #200]	; (8005d20 <__swsetup_r+0xcc>)
 8005c56:	b570      	push	{r4, r5, r6, lr}
 8005c58:	681d      	ldr	r5, [r3, #0]
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	b125      	cbz	r5, 8005c6a <__swsetup_r+0x16>
 8005c60:	69ab      	ldr	r3, [r5, #24]
 8005c62:	b913      	cbnz	r3, 8005c6a <__swsetup_r+0x16>
 8005c64:	4628      	mov	r0, r5
 8005c66:	f7ff f88b 	bl	8004d80 <__sinit>
 8005c6a:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <__swsetup_r+0xd0>)
 8005c6c:	429c      	cmp	r4, r3
 8005c6e:	d10f      	bne.n	8005c90 <__swsetup_r+0x3c>
 8005c70:	686c      	ldr	r4, [r5, #4]
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c78:	0719      	lsls	r1, r3, #28
 8005c7a:	d42c      	bmi.n	8005cd6 <__swsetup_r+0x82>
 8005c7c:	06dd      	lsls	r5, r3, #27
 8005c7e:	d411      	bmi.n	8005ca4 <__swsetup_r+0x50>
 8005c80:	2309      	movs	r3, #9
 8005c82:	6033      	str	r3, [r6, #0]
 8005c84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c88:	81a3      	strh	r3, [r4, #12]
 8005c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8e:	e03e      	b.n	8005d0e <__swsetup_r+0xba>
 8005c90:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <__swsetup_r+0xd4>)
 8005c92:	429c      	cmp	r4, r3
 8005c94:	d101      	bne.n	8005c9a <__swsetup_r+0x46>
 8005c96:	68ac      	ldr	r4, [r5, #8]
 8005c98:	e7eb      	b.n	8005c72 <__swsetup_r+0x1e>
 8005c9a:	4b24      	ldr	r3, [pc, #144]	; (8005d2c <__swsetup_r+0xd8>)
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	bf08      	it	eq
 8005ca0:	68ec      	ldreq	r4, [r5, #12]
 8005ca2:	e7e6      	b.n	8005c72 <__swsetup_r+0x1e>
 8005ca4:	0758      	lsls	r0, r3, #29
 8005ca6:	d512      	bpl.n	8005cce <__swsetup_r+0x7a>
 8005ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005caa:	b141      	cbz	r1, 8005cbe <__swsetup_r+0x6a>
 8005cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cb0:	4299      	cmp	r1, r3
 8005cb2:	d002      	beq.n	8005cba <__swsetup_r+0x66>
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f7ff f9b3 	bl	8005020 <_free_r>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	6363      	str	r3, [r4, #52]	; 0x34
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6063      	str	r3, [r4, #4]
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	f043 0308 	orr.w	r3, r3, #8
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	b94b      	cbnz	r3, 8005cee <__swsetup_r+0x9a>
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce4:	d003      	beq.n	8005cee <__swsetup_r+0x9a>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4630      	mov	r0, r6
 8005cea:	f7ff f933 	bl	8004f54 <__smakebuf_r>
 8005cee:	89a0      	ldrh	r0, [r4, #12]
 8005cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cf4:	f010 0301 	ands.w	r3, r0, #1
 8005cf8:	d00a      	beq.n	8005d10 <__swsetup_r+0xbc>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60a3      	str	r3, [r4, #8]
 8005cfe:	6963      	ldr	r3, [r4, #20]
 8005d00:	425b      	negs	r3, r3
 8005d02:	61a3      	str	r3, [r4, #24]
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	b943      	cbnz	r3, 8005d1a <__swsetup_r+0xc6>
 8005d08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d0c:	d1ba      	bne.n	8005c84 <__swsetup_r+0x30>
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	0781      	lsls	r1, r0, #30
 8005d12:	bf58      	it	pl
 8005d14:	6963      	ldrpl	r3, [r4, #20]
 8005d16:	60a3      	str	r3, [r4, #8]
 8005d18:	e7f4      	b.n	8005d04 <__swsetup_r+0xb0>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e7f7      	b.n	8005d0e <__swsetup_r+0xba>
 8005d1e:	bf00      	nop
 8005d20:	20000018 	.word	0x20000018
 8005d24:	0800792c 	.word	0x0800792c
 8005d28:	0800794c 	.word	0x0800794c
 8005d2c:	0800790c 	.word	0x0800790c

08005d30 <__assert_func>:
 8005d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d32:	4614      	mov	r4, r2
 8005d34:	461a      	mov	r2, r3
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <__assert_func+0x2c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	68d8      	ldr	r0, [r3, #12]
 8005d3e:	b14c      	cbz	r4, 8005d54 <__assert_func+0x24>
 8005d40:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <__assert_func+0x30>)
 8005d42:	9100      	str	r1, [sp, #0]
 8005d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d48:	4906      	ldr	r1, [pc, #24]	; (8005d64 <__assert_func+0x34>)
 8005d4a:	462b      	mov	r3, r5
 8005d4c:	f000 fe9a 	bl	8006a84 <fiprintf>
 8005d50:	f001 fc13 	bl	800757a <abort>
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <__assert_func+0x38>)
 8005d56:	461c      	mov	r4, r3
 8005d58:	e7f3      	b.n	8005d42 <__assert_func+0x12>
 8005d5a:	bf00      	nop
 8005d5c:	20000018 	.word	0x20000018
 8005d60:	080079a4 	.word	0x080079a4
 8005d64:	080079b1 	.word	0x080079b1
 8005d68:	080079df 	.word	0x080079df

08005d6c <_close_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d06      	ldr	r5, [pc, #24]	; (8005d88 <_close_r+0x1c>)
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	602b      	str	r3, [r5, #0]
 8005d78:	f7fb fb68 	bl	800144c <_close>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_close_r+0x1a>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_close_r+0x1a>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	200002ac 	.word	0x200002ac

08005d8c <quorem>:
 8005d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	6903      	ldr	r3, [r0, #16]
 8005d92:	690c      	ldr	r4, [r1, #16]
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	4607      	mov	r7, r0
 8005d98:	f2c0 8081 	blt.w	8005e9e <quorem+0x112>
 8005d9c:	3c01      	subs	r4, #1
 8005d9e:	f101 0814 	add.w	r8, r1, #20
 8005da2:	f100 0514 	add.w	r5, r0, #20
 8005da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005db0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db4:	3301      	adds	r3, #1
 8005db6:	429a      	cmp	r2, r3
 8005db8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005dbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dc4:	d331      	bcc.n	8005e2a <quorem+0x9e>
 8005dc6:	f04f 0e00 	mov.w	lr, #0
 8005dca:	4640      	mov	r0, r8
 8005dcc:	46ac      	mov	ip, r5
 8005dce:	46f2      	mov	sl, lr
 8005dd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dd4:	b293      	uxth	r3, r2
 8005dd6:	fb06 e303 	mla	r3, r6, r3, lr
 8005dda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	ebaa 0303 	sub.w	r3, sl, r3
 8005de4:	f8dc a000 	ldr.w	sl, [ip]
 8005de8:	0c12      	lsrs	r2, r2, #16
 8005dea:	fa13 f38a 	uxtah	r3, r3, sl
 8005dee:	fb06 e202 	mla	r2, r6, r2, lr
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	9b00      	ldr	r3, [sp, #0]
 8005df6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dfa:	b292      	uxth	r2, r2
 8005dfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e04:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e08:	4581      	cmp	r9, r0
 8005e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e0e:	f84c 3b04 	str.w	r3, [ip], #4
 8005e12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e16:	d2db      	bcs.n	8005dd0 <quorem+0x44>
 8005e18:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e1c:	b92b      	cbnz	r3, 8005e2a <quorem+0x9e>
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	3b04      	subs	r3, #4
 8005e22:	429d      	cmp	r5, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	d32e      	bcc.n	8005e86 <quorem+0xfa>
 8005e28:	613c      	str	r4, [r7, #16]
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	f001 f914 	bl	8007058 <__mcmp>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	db24      	blt.n	8005e7e <quorem+0xf2>
 8005e34:	3601      	adds	r6, #1
 8005e36:	4628      	mov	r0, r5
 8005e38:	f04f 0c00 	mov.w	ip, #0
 8005e3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e40:	f8d0 e000 	ldr.w	lr, [r0]
 8005e44:	b293      	uxth	r3, r2
 8005e46:	ebac 0303 	sub.w	r3, ip, r3
 8005e4a:	0c12      	lsrs	r2, r2, #16
 8005e4c:	fa13 f38e 	uxtah	r3, r3, lr
 8005e50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e5e:	45c1      	cmp	r9, r8
 8005e60:	f840 3b04 	str.w	r3, [r0], #4
 8005e64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e68:	d2e8      	bcs.n	8005e3c <quorem+0xb0>
 8005e6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e72:	b922      	cbnz	r2, 8005e7e <quorem+0xf2>
 8005e74:	3b04      	subs	r3, #4
 8005e76:	429d      	cmp	r5, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	d30a      	bcc.n	8005e92 <quorem+0x106>
 8005e7c:	613c      	str	r4, [r7, #16]
 8005e7e:	4630      	mov	r0, r6
 8005e80:	b003      	add	sp, #12
 8005e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	d1cc      	bne.n	8005e28 <quorem+0x9c>
 8005e8e:	3c01      	subs	r4, #1
 8005e90:	e7c7      	b.n	8005e22 <quorem+0x96>
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	3b04      	subs	r3, #4
 8005e96:	2a00      	cmp	r2, #0
 8005e98:	d1f0      	bne.n	8005e7c <quorem+0xf0>
 8005e9a:	3c01      	subs	r4, #1
 8005e9c:	e7eb      	b.n	8005e76 <quorem+0xea>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e7ee      	b.n	8005e80 <quorem+0xf4>
 8005ea2:	0000      	movs	r0, r0
 8005ea4:	0000      	movs	r0, r0
	...

08005ea8 <_dtoa_r>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	ed2d 8b04 	vpush	{d8-d9}
 8005eb0:	ec57 6b10 	vmov	r6, r7, d0
 8005eb4:	b093      	sub	sp, #76	; 0x4c
 8005eb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005eb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ebc:	9106      	str	r1, [sp, #24]
 8005ebe:	ee10 aa10 	vmov	sl, s0
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ec8:	46bb      	mov	fp, r7
 8005eca:	b975      	cbnz	r5, 8005eea <_dtoa_r+0x42>
 8005ecc:	2010      	movs	r0, #16
 8005ece:	f7ff f881 	bl	8004fd4 <malloc>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	6260      	str	r0, [r4, #36]	; 0x24
 8005ed6:	b920      	cbnz	r0, 8005ee2 <_dtoa_r+0x3a>
 8005ed8:	4ba7      	ldr	r3, [pc, #668]	; (8006178 <_dtoa_r+0x2d0>)
 8005eda:	21ea      	movs	r1, #234	; 0xea
 8005edc:	48a7      	ldr	r0, [pc, #668]	; (800617c <_dtoa_r+0x2d4>)
 8005ede:	f7ff ff27 	bl	8005d30 <__assert_func>
 8005ee2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ee6:	6005      	str	r5, [r0, #0]
 8005ee8:	60c5      	str	r5, [r0, #12]
 8005eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	b151      	cbz	r1, 8005f06 <_dtoa_r+0x5e>
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	604a      	str	r2, [r1, #4]
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4093      	lsls	r3, r2
 8005ef8:	608b      	str	r3, [r1, #8]
 8005efa:	4620      	mov	r0, r4
 8005efc:	f000 fe6a 	bl	8006bd4 <_Bfree>
 8005f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	1e3b      	subs	r3, r7, #0
 8005f08:	bfaa      	itet	ge
 8005f0a:	2300      	movge	r3, #0
 8005f0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f10:	f8c8 3000 	strge.w	r3, [r8]
 8005f14:	4b9a      	ldr	r3, [pc, #616]	; (8006180 <_dtoa_r+0x2d8>)
 8005f16:	bfbc      	itt	lt
 8005f18:	2201      	movlt	r2, #1
 8005f1a:	f8c8 2000 	strlt.w	r2, [r8]
 8005f1e:	ea33 030b 	bics.w	r3, r3, fp
 8005f22:	d11b      	bne.n	8005f5c <_dtoa_r+0xb4>
 8005f24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f26:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f30:	4333      	orrs	r3, r6
 8005f32:	f000 8592 	beq.w	8006a5a <_dtoa_r+0xbb2>
 8005f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f38:	b963      	cbnz	r3, 8005f54 <_dtoa_r+0xac>
 8005f3a:	4b92      	ldr	r3, [pc, #584]	; (8006184 <_dtoa_r+0x2dc>)
 8005f3c:	e022      	b.n	8005f84 <_dtoa_r+0xdc>
 8005f3e:	4b92      	ldr	r3, [pc, #584]	; (8006188 <_dtoa_r+0x2e0>)
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	3308      	adds	r3, #8
 8005f44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	9801      	ldr	r0, [sp, #4]
 8005f4a:	b013      	add	sp, #76	; 0x4c
 8005f4c:	ecbd 8b04 	vpop	{d8-d9}
 8005f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f54:	4b8b      	ldr	r3, [pc, #556]	; (8006184 <_dtoa_r+0x2dc>)
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	3303      	adds	r3, #3
 8005f5a:	e7f3      	b.n	8005f44 <_dtoa_r+0x9c>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	4650      	mov	r0, sl
 8005f62:	4659      	mov	r1, fp
 8005f64:	f7fa fd88 	bl	8000a78 <__aeabi_dcmpeq>
 8005f68:	ec4b ab19 	vmov	d9, sl, fp
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	b158      	cbz	r0, 8005f88 <_dtoa_r+0xe0>
 8005f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f72:	2301      	movs	r3, #1
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 856b 	beq.w	8006a54 <_dtoa_r+0xbac>
 8005f7e:	4883      	ldr	r0, [pc, #524]	; (800618c <_dtoa_r+0x2e4>)
 8005f80:	6018      	str	r0, [r3, #0]
 8005f82:	1e43      	subs	r3, r0, #1
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	e7df      	b.n	8005f48 <_dtoa_r+0xa0>
 8005f88:	ec4b ab10 	vmov	d0, sl, fp
 8005f8c:	aa10      	add	r2, sp, #64	; 0x40
 8005f8e:	a911      	add	r1, sp, #68	; 0x44
 8005f90:	4620      	mov	r0, r4
 8005f92:	f001 f907 	bl	80071a4 <__d2b>
 8005f96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f9a:	ee08 0a10 	vmov	s16, r0
 8005f9e:	2d00      	cmp	r5, #0
 8005fa0:	f000 8084 	beq.w	80060ac <_dtoa_r+0x204>
 8005fa4:	ee19 3a90 	vmov	r3, s19
 8005fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005fb0:	4656      	mov	r6, sl
 8005fb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005fbe:	4b74      	ldr	r3, [pc, #464]	; (8006190 <_dtoa_r+0x2e8>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	f7fa f937 	bl	8000238 <__aeabi_dsub>
 8005fca:	a365      	add	r3, pc, #404	; (adr r3, 8006160 <_dtoa_r+0x2b8>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa faea 	bl	80005a8 <__aeabi_dmul>
 8005fd4:	a364      	add	r3, pc, #400	; (adr r3, 8006168 <_dtoa_r+0x2c0>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f7fa f92f 	bl	800023c <__adddf3>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	460f      	mov	r7, r1
 8005fe4:	f7fa fa76 	bl	80004d4 <__aeabi_i2d>
 8005fe8:	a361      	add	r3, pc, #388	; (adr r3, 8006170 <_dtoa_r+0x2c8>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa fadb 	bl	80005a8 <__aeabi_dmul>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	f7fa f91f 	bl	800023c <__adddf3>
 8005ffe:	4606      	mov	r6, r0
 8006000:	460f      	mov	r7, r1
 8006002:	f7fa fd81 	bl	8000b08 <__aeabi_d2iz>
 8006006:	2200      	movs	r2, #0
 8006008:	9000      	str	r0, [sp, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fa fd3c 	bl	8000a8c <__aeabi_dcmplt>
 8006014:	b150      	cbz	r0, 800602c <_dtoa_r+0x184>
 8006016:	9800      	ldr	r0, [sp, #0]
 8006018:	f7fa fa5c 	bl	80004d4 <__aeabi_i2d>
 800601c:	4632      	mov	r2, r6
 800601e:	463b      	mov	r3, r7
 8006020:	f7fa fd2a 	bl	8000a78 <__aeabi_dcmpeq>
 8006024:	b910      	cbnz	r0, 800602c <_dtoa_r+0x184>
 8006026:	9b00      	ldr	r3, [sp, #0]
 8006028:	3b01      	subs	r3, #1
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	9b00      	ldr	r3, [sp, #0]
 800602e:	2b16      	cmp	r3, #22
 8006030:	d85a      	bhi.n	80060e8 <_dtoa_r+0x240>
 8006032:	9a00      	ldr	r2, [sp, #0]
 8006034:	4b57      	ldr	r3, [pc, #348]	; (8006194 <_dtoa_r+0x2ec>)
 8006036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	ec51 0b19 	vmov	r0, r1, d9
 8006042:	f7fa fd23 	bl	8000a8c <__aeabi_dcmplt>
 8006046:	2800      	cmp	r0, #0
 8006048:	d050      	beq.n	80060ec <_dtoa_r+0x244>
 800604a:	9b00      	ldr	r3, [sp, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	2300      	movs	r3, #0
 8006052:	930b      	str	r3, [sp, #44]	; 0x2c
 8006054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006056:	1b5d      	subs	r5, r3, r5
 8006058:	1e6b      	subs	r3, r5, #1
 800605a:	9305      	str	r3, [sp, #20]
 800605c:	bf45      	ittet	mi
 800605e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006062:	9304      	strmi	r3, [sp, #16]
 8006064:	2300      	movpl	r3, #0
 8006066:	2300      	movmi	r3, #0
 8006068:	bf4c      	ite	mi
 800606a:	9305      	strmi	r3, [sp, #20]
 800606c:	9304      	strpl	r3, [sp, #16]
 800606e:	9b00      	ldr	r3, [sp, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	db3d      	blt.n	80060f0 <_dtoa_r+0x248>
 8006074:	9b05      	ldr	r3, [sp, #20]
 8006076:	9a00      	ldr	r2, [sp, #0]
 8006078:	920a      	str	r2, [sp, #40]	; 0x28
 800607a:	4413      	add	r3, r2
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	2300      	movs	r3, #0
 8006080:	9307      	str	r3, [sp, #28]
 8006082:	9b06      	ldr	r3, [sp, #24]
 8006084:	2b09      	cmp	r3, #9
 8006086:	f200 8089 	bhi.w	800619c <_dtoa_r+0x2f4>
 800608a:	2b05      	cmp	r3, #5
 800608c:	bfc4      	itt	gt
 800608e:	3b04      	subgt	r3, #4
 8006090:	9306      	strgt	r3, [sp, #24]
 8006092:	9b06      	ldr	r3, [sp, #24]
 8006094:	f1a3 0302 	sub.w	r3, r3, #2
 8006098:	bfcc      	ite	gt
 800609a:	2500      	movgt	r5, #0
 800609c:	2501      	movle	r5, #1
 800609e:	2b03      	cmp	r3, #3
 80060a0:	f200 8087 	bhi.w	80061b2 <_dtoa_r+0x30a>
 80060a4:	e8df f003 	tbb	[pc, r3]
 80060a8:	59383a2d 	.word	0x59383a2d
 80060ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060b0:	441d      	add	r5, r3
 80060b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	bfc1      	itttt	gt
 80060ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80060c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80060c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060ca:	bfda      	itte	le
 80060cc:	f1c3 0320 	rsble	r3, r3, #32
 80060d0:	fa06 f003 	lslle.w	r0, r6, r3
 80060d4:	4318      	orrgt	r0, r3
 80060d6:	f7fa f9ed 	bl	80004b4 <__aeabi_ui2d>
 80060da:	2301      	movs	r3, #1
 80060dc:	4606      	mov	r6, r0
 80060de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060e2:	3d01      	subs	r5, #1
 80060e4:	930e      	str	r3, [sp, #56]	; 0x38
 80060e6:	e76a      	b.n	8005fbe <_dtoa_r+0x116>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e7b2      	b.n	8006052 <_dtoa_r+0x1aa>
 80060ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80060ee:	e7b1      	b.n	8006054 <_dtoa_r+0x1ac>
 80060f0:	9b04      	ldr	r3, [sp, #16]
 80060f2:	9a00      	ldr	r2, [sp, #0]
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	9304      	str	r3, [sp, #16]
 80060f8:	4253      	negs	r3, r2
 80060fa:	9307      	str	r3, [sp, #28]
 80060fc:	2300      	movs	r3, #0
 80060fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006100:	e7bf      	b.n	8006082 <_dtoa_r+0x1da>
 8006102:	2300      	movs	r3, #0
 8006104:	9308      	str	r3, [sp, #32]
 8006106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	dc55      	bgt.n	80061b8 <_dtoa_r+0x310>
 800610c:	2301      	movs	r3, #1
 800610e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006112:	461a      	mov	r2, r3
 8006114:	9209      	str	r2, [sp, #36]	; 0x24
 8006116:	e00c      	b.n	8006132 <_dtoa_r+0x28a>
 8006118:	2301      	movs	r3, #1
 800611a:	e7f3      	b.n	8006104 <_dtoa_r+0x25c>
 800611c:	2300      	movs	r3, #0
 800611e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006120:	9308      	str	r3, [sp, #32]
 8006122:	9b00      	ldr	r3, [sp, #0]
 8006124:	4413      	add	r3, r2
 8006126:	9302      	str	r3, [sp, #8]
 8006128:	3301      	adds	r3, #1
 800612a:	2b01      	cmp	r3, #1
 800612c:	9303      	str	r3, [sp, #12]
 800612e:	bfb8      	it	lt
 8006130:	2301      	movlt	r3, #1
 8006132:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006134:	2200      	movs	r2, #0
 8006136:	6042      	str	r2, [r0, #4]
 8006138:	2204      	movs	r2, #4
 800613a:	f102 0614 	add.w	r6, r2, #20
 800613e:	429e      	cmp	r6, r3
 8006140:	6841      	ldr	r1, [r0, #4]
 8006142:	d93d      	bls.n	80061c0 <_dtoa_r+0x318>
 8006144:	4620      	mov	r0, r4
 8006146:	f000 fd05 	bl	8006b54 <_Balloc>
 800614a:	9001      	str	r0, [sp, #4]
 800614c:	2800      	cmp	r0, #0
 800614e:	d13b      	bne.n	80061c8 <_dtoa_r+0x320>
 8006150:	4b11      	ldr	r3, [pc, #68]	; (8006198 <_dtoa_r+0x2f0>)
 8006152:	4602      	mov	r2, r0
 8006154:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006158:	e6c0      	b.n	8005edc <_dtoa_r+0x34>
 800615a:	2301      	movs	r3, #1
 800615c:	e7df      	b.n	800611e <_dtoa_r+0x276>
 800615e:	bf00      	nop
 8006160:	636f4361 	.word	0x636f4361
 8006164:	3fd287a7 	.word	0x3fd287a7
 8006168:	8b60c8b3 	.word	0x8b60c8b3
 800616c:	3fc68a28 	.word	0x3fc68a28
 8006170:	509f79fb 	.word	0x509f79fb
 8006174:	3fd34413 	.word	0x3fd34413
 8006178:	08007aee 	.word	0x08007aee
 800617c:	08007b05 	.word	0x08007b05
 8006180:	7ff00000 	.word	0x7ff00000
 8006184:	08007aea 	.word	0x08007aea
 8006188:	08007ae1 	.word	0x08007ae1
 800618c:	08007981 	.word	0x08007981
 8006190:	3ff80000 	.word	0x3ff80000
 8006194:	08007c00 	.word	0x08007c00
 8006198:	08007b60 	.word	0x08007b60
 800619c:	2501      	movs	r5, #1
 800619e:	2300      	movs	r3, #0
 80061a0:	9306      	str	r3, [sp, #24]
 80061a2:	9508      	str	r5, [sp, #32]
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295
 80061a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061ac:	2200      	movs	r2, #0
 80061ae:	2312      	movs	r3, #18
 80061b0:	e7b0      	b.n	8006114 <_dtoa_r+0x26c>
 80061b2:	2301      	movs	r3, #1
 80061b4:	9308      	str	r3, [sp, #32]
 80061b6:	e7f5      	b.n	80061a4 <_dtoa_r+0x2fc>
 80061b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061be:	e7b8      	b.n	8006132 <_dtoa_r+0x28a>
 80061c0:	3101      	adds	r1, #1
 80061c2:	6041      	str	r1, [r0, #4]
 80061c4:	0052      	lsls	r2, r2, #1
 80061c6:	e7b8      	b.n	800613a <_dtoa_r+0x292>
 80061c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ca:	9a01      	ldr	r2, [sp, #4]
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	2b0e      	cmp	r3, #14
 80061d2:	f200 809d 	bhi.w	8006310 <_dtoa_r+0x468>
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	f000 809a 	beq.w	8006310 <_dtoa_r+0x468>
 80061dc:	9b00      	ldr	r3, [sp, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	dd32      	ble.n	8006248 <_dtoa_r+0x3a0>
 80061e2:	4ab7      	ldr	r2, [pc, #732]	; (80064c0 <_dtoa_r+0x618>)
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061f0:	9b00      	ldr	r3, [sp, #0]
 80061f2:	05d8      	lsls	r0, r3, #23
 80061f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061f8:	d516      	bpl.n	8006228 <_dtoa_r+0x380>
 80061fa:	4bb2      	ldr	r3, [pc, #712]	; (80064c4 <_dtoa_r+0x61c>)
 80061fc:	ec51 0b19 	vmov	r0, r1, d9
 8006200:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006204:	f7fa fafa 	bl	80007fc <__aeabi_ddiv>
 8006208:	f007 070f 	and.w	r7, r7, #15
 800620c:	4682      	mov	sl, r0
 800620e:	468b      	mov	fp, r1
 8006210:	2503      	movs	r5, #3
 8006212:	4eac      	ldr	r6, [pc, #688]	; (80064c4 <_dtoa_r+0x61c>)
 8006214:	b957      	cbnz	r7, 800622c <_dtoa_r+0x384>
 8006216:	4642      	mov	r2, r8
 8006218:	464b      	mov	r3, r9
 800621a:	4650      	mov	r0, sl
 800621c:	4659      	mov	r1, fp
 800621e:	f7fa faed 	bl	80007fc <__aeabi_ddiv>
 8006222:	4682      	mov	sl, r0
 8006224:	468b      	mov	fp, r1
 8006226:	e028      	b.n	800627a <_dtoa_r+0x3d2>
 8006228:	2502      	movs	r5, #2
 800622a:	e7f2      	b.n	8006212 <_dtoa_r+0x36a>
 800622c:	07f9      	lsls	r1, r7, #31
 800622e:	d508      	bpl.n	8006242 <_dtoa_r+0x39a>
 8006230:	4640      	mov	r0, r8
 8006232:	4649      	mov	r1, r9
 8006234:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006238:	f7fa f9b6 	bl	80005a8 <__aeabi_dmul>
 800623c:	3501      	adds	r5, #1
 800623e:	4680      	mov	r8, r0
 8006240:	4689      	mov	r9, r1
 8006242:	107f      	asrs	r7, r7, #1
 8006244:	3608      	adds	r6, #8
 8006246:	e7e5      	b.n	8006214 <_dtoa_r+0x36c>
 8006248:	f000 809b 	beq.w	8006382 <_dtoa_r+0x4da>
 800624c:	9b00      	ldr	r3, [sp, #0]
 800624e:	4f9d      	ldr	r7, [pc, #628]	; (80064c4 <_dtoa_r+0x61c>)
 8006250:	425e      	negs	r6, r3
 8006252:	4b9b      	ldr	r3, [pc, #620]	; (80064c0 <_dtoa_r+0x618>)
 8006254:	f006 020f 	and.w	r2, r6, #15
 8006258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	ec51 0b19 	vmov	r0, r1, d9
 8006264:	f7fa f9a0 	bl	80005a8 <__aeabi_dmul>
 8006268:	1136      	asrs	r6, r6, #4
 800626a:	4682      	mov	sl, r0
 800626c:	468b      	mov	fp, r1
 800626e:	2300      	movs	r3, #0
 8006270:	2502      	movs	r5, #2
 8006272:	2e00      	cmp	r6, #0
 8006274:	d17a      	bne.n	800636c <_dtoa_r+0x4c4>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1d3      	bne.n	8006222 <_dtoa_r+0x37a>
 800627a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8082 	beq.w	8006386 <_dtoa_r+0x4de>
 8006282:	4b91      	ldr	r3, [pc, #580]	; (80064c8 <_dtoa_r+0x620>)
 8006284:	2200      	movs	r2, #0
 8006286:	4650      	mov	r0, sl
 8006288:	4659      	mov	r1, fp
 800628a:	f7fa fbff 	bl	8000a8c <__aeabi_dcmplt>
 800628e:	2800      	cmp	r0, #0
 8006290:	d079      	beq.n	8006386 <_dtoa_r+0x4de>
 8006292:	9b03      	ldr	r3, [sp, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d076      	beq.n	8006386 <_dtoa_r+0x4de>
 8006298:	9b02      	ldr	r3, [sp, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	dd36      	ble.n	800630c <_dtoa_r+0x464>
 800629e:	9b00      	ldr	r3, [sp, #0]
 80062a0:	4650      	mov	r0, sl
 80062a2:	4659      	mov	r1, fp
 80062a4:	1e5f      	subs	r7, r3, #1
 80062a6:	2200      	movs	r2, #0
 80062a8:	4b88      	ldr	r3, [pc, #544]	; (80064cc <_dtoa_r+0x624>)
 80062aa:	f7fa f97d 	bl	80005a8 <__aeabi_dmul>
 80062ae:	9e02      	ldr	r6, [sp, #8]
 80062b0:	4682      	mov	sl, r0
 80062b2:	468b      	mov	fp, r1
 80062b4:	3501      	adds	r5, #1
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7fa f90c 	bl	80004d4 <__aeabi_i2d>
 80062bc:	4652      	mov	r2, sl
 80062be:	465b      	mov	r3, fp
 80062c0:	f7fa f972 	bl	80005a8 <__aeabi_dmul>
 80062c4:	4b82      	ldr	r3, [pc, #520]	; (80064d0 <_dtoa_r+0x628>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	f7f9 ffb8 	bl	800023c <__adddf3>
 80062cc:	46d0      	mov	r8, sl
 80062ce:	46d9      	mov	r9, fp
 80062d0:	4682      	mov	sl, r0
 80062d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d158      	bne.n	800638c <_dtoa_r+0x4e4>
 80062da:	4b7e      	ldr	r3, [pc, #504]	; (80064d4 <_dtoa_r+0x62c>)
 80062dc:	2200      	movs	r2, #0
 80062de:	4640      	mov	r0, r8
 80062e0:	4649      	mov	r1, r9
 80062e2:	f7f9 ffa9 	bl	8000238 <__aeabi_dsub>
 80062e6:	4652      	mov	r2, sl
 80062e8:	465b      	mov	r3, fp
 80062ea:	4680      	mov	r8, r0
 80062ec:	4689      	mov	r9, r1
 80062ee:	f7fa fbeb 	bl	8000ac8 <__aeabi_dcmpgt>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f040 8295 	bne.w	8006822 <_dtoa_r+0x97a>
 80062f8:	4652      	mov	r2, sl
 80062fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062fe:	4640      	mov	r0, r8
 8006300:	4649      	mov	r1, r9
 8006302:	f7fa fbc3 	bl	8000a8c <__aeabi_dcmplt>
 8006306:	2800      	cmp	r0, #0
 8006308:	f040 8289 	bne.w	800681e <_dtoa_r+0x976>
 800630c:	ec5b ab19 	vmov	sl, fp, d9
 8006310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006312:	2b00      	cmp	r3, #0
 8006314:	f2c0 8148 	blt.w	80065a8 <_dtoa_r+0x700>
 8006318:	9a00      	ldr	r2, [sp, #0]
 800631a:	2a0e      	cmp	r2, #14
 800631c:	f300 8144 	bgt.w	80065a8 <_dtoa_r+0x700>
 8006320:	4b67      	ldr	r3, [pc, #412]	; (80064c0 <_dtoa_r+0x618>)
 8006322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006326:	e9d3 8900 	ldrd	r8, r9, [r3]
 800632a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	f280 80d5 	bge.w	80064dc <_dtoa_r+0x634>
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f300 80d1 	bgt.w	80064dc <_dtoa_r+0x634>
 800633a:	f040 826f 	bne.w	800681c <_dtoa_r+0x974>
 800633e:	4b65      	ldr	r3, [pc, #404]	; (80064d4 <_dtoa_r+0x62c>)
 8006340:	2200      	movs	r2, #0
 8006342:	4640      	mov	r0, r8
 8006344:	4649      	mov	r1, r9
 8006346:	f7fa f92f 	bl	80005a8 <__aeabi_dmul>
 800634a:	4652      	mov	r2, sl
 800634c:	465b      	mov	r3, fp
 800634e:	f7fa fbb1 	bl	8000ab4 <__aeabi_dcmpge>
 8006352:	9e03      	ldr	r6, [sp, #12]
 8006354:	4637      	mov	r7, r6
 8006356:	2800      	cmp	r0, #0
 8006358:	f040 8245 	bne.w	80067e6 <_dtoa_r+0x93e>
 800635c:	9d01      	ldr	r5, [sp, #4]
 800635e:	2331      	movs	r3, #49	; 0x31
 8006360:	f805 3b01 	strb.w	r3, [r5], #1
 8006364:	9b00      	ldr	r3, [sp, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	e240      	b.n	80067ee <_dtoa_r+0x946>
 800636c:	07f2      	lsls	r2, r6, #31
 800636e:	d505      	bpl.n	800637c <_dtoa_r+0x4d4>
 8006370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006374:	f7fa f918 	bl	80005a8 <__aeabi_dmul>
 8006378:	3501      	adds	r5, #1
 800637a:	2301      	movs	r3, #1
 800637c:	1076      	asrs	r6, r6, #1
 800637e:	3708      	adds	r7, #8
 8006380:	e777      	b.n	8006272 <_dtoa_r+0x3ca>
 8006382:	2502      	movs	r5, #2
 8006384:	e779      	b.n	800627a <_dtoa_r+0x3d2>
 8006386:	9f00      	ldr	r7, [sp, #0]
 8006388:	9e03      	ldr	r6, [sp, #12]
 800638a:	e794      	b.n	80062b6 <_dtoa_r+0x40e>
 800638c:	9901      	ldr	r1, [sp, #4]
 800638e:	4b4c      	ldr	r3, [pc, #304]	; (80064c0 <_dtoa_r+0x618>)
 8006390:	4431      	add	r1, r6
 8006392:	910d      	str	r1, [sp, #52]	; 0x34
 8006394:	9908      	ldr	r1, [sp, #32]
 8006396:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800639a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800639e:	2900      	cmp	r1, #0
 80063a0:	d043      	beq.n	800642a <_dtoa_r+0x582>
 80063a2:	494d      	ldr	r1, [pc, #308]	; (80064d8 <_dtoa_r+0x630>)
 80063a4:	2000      	movs	r0, #0
 80063a6:	f7fa fa29 	bl	80007fc <__aeabi_ddiv>
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	f7f9 ff43 	bl	8000238 <__aeabi_dsub>
 80063b2:	9d01      	ldr	r5, [sp, #4]
 80063b4:	4682      	mov	sl, r0
 80063b6:	468b      	mov	fp, r1
 80063b8:	4649      	mov	r1, r9
 80063ba:	4640      	mov	r0, r8
 80063bc:	f7fa fba4 	bl	8000b08 <__aeabi_d2iz>
 80063c0:	4606      	mov	r6, r0
 80063c2:	f7fa f887 	bl	80004d4 <__aeabi_i2d>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4640      	mov	r0, r8
 80063cc:	4649      	mov	r1, r9
 80063ce:	f7f9 ff33 	bl	8000238 <__aeabi_dsub>
 80063d2:	3630      	adds	r6, #48	; 0x30
 80063d4:	f805 6b01 	strb.w	r6, [r5], #1
 80063d8:	4652      	mov	r2, sl
 80063da:	465b      	mov	r3, fp
 80063dc:	4680      	mov	r8, r0
 80063de:	4689      	mov	r9, r1
 80063e0:	f7fa fb54 	bl	8000a8c <__aeabi_dcmplt>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d163      	bne.n	80064b0 <_dtoa_r+0x608>
 80063e8:	4642      	mov	r2, r8
 80063ea:	464b      	mov	r3, r9
 80063ec:	4936      	ldr	r1, [pc, #216]	; (80064c8 <_dtoa_r+0x620>)
 80063ee:	2000      	movs	r0, #0
 80063f0:	f7f9 ff22 	bl	8000238 <__aeabi_dsub>
 80063f4:	4652      	mov	r2, sl
 80063f6:	465b      	mov	r3, fp
 80063f8:	f7fa fb48 	bl	8000a8c <__aeabi_dcmplt>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f040 80b5 	bne.w	800656c <_dtoa_r+0x6c4>
 8006402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006404:	429d      	cmp	r5, r3
 8006406:	d081      	beq.n	800630c <_dtoa_r+0x464>
 8006408:	4b30      	ldr	r3, [pc, #192]	; (80064cc <_dtoa_r+0x624>)
 800640a:	2200      	movs	r2, #0
 800640c:	4650      	mov	r0, sl
 800640e:	4659      	mov	r1, fp
 8006410:	f7fa f8ca 	bl	80005a8 <__aeabi_dmul>
 8006414:	4b2d      	ldr	r3, [pc, #180]	; (80064cc <_dtoa_r+0x624>)
 8006416:	4682      	mov	sl, r0
 8006418:	468b      	mov	fp, r1
 800641a:	4640      	mov	r0, r8
 800641c:	4649      	mov	r1, r9
 800641e:	2200      	movs	r2, #0
 8006420:	f7fa f8c2 	bl	80005a8 <__aeabi_dmul>
 8006424:	4680      	mov	r8, r0
 8006426:	4689      	mov	r9, r1
 8006428:	e7c6      	b.n	80063b8 <_dtoa_r+0x510>
 800642a:	4650      	mov	r0, sl
 800642c:	4659      	mov	r1, fp
 800642e:	f7fa f8bb 	bl	80005a8 <__aeabi_dmul>
 8006432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006434:	9d01      	ldr	r5, [sp, #4]
 8006436:	930f      	str	r3, [sp, #60]	; 0x3c
 8006438:	4682      	mov	sl, r0
 800643a:	468b      	mov	fp, r1
 800643c:	4649      	mov	r1, r9
 800643e:	4640      	mov	r0, r8
 8006440:	f7fa fb62 	bl	8000b08 <__aeabi_d2iz>
 8006444:	4606      	mov	r6, r0
 8006446:	f7fa f845 	bl	80004d4 <__aeabi_i2d>
 800644a:	3630      	adds	r6, #48	; 0x30
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7f9 fef0 	bl	8000238 <__aeabi_dsub>
 8006458:	f805 6b01 	strb.w	r6, [r5], #1
 800645c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800645e:	429d      	cmp	r5, r3
 8006460:	4680      	mov	r8, r0
 8006462:	4689      	mov	r9, r1
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	d124      	bne.n	80064b4 <_dtoa_r+0x60c>
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <_dtoa_r+0x630>)
 800646c:	4650      	mov	r0, sl
 800646e:	4659      	mov	r1, fp
 8006470:	f7f9 fee4 	bl	800023c <__adddf3>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7fa fb24 	bl	8000ac8 <__aeabi_dcmpgt>
 8006480:	2800      	cmp	r0, #0
 8006482:	d173      	bne.n	800656c <_dtoa_r+0x6c4>
 8006484:	4652      	mov	r2, sl
 8006486:	465b      	mov	r3, fp
 8006488:	4913      	ldr	r1, [pc, #76]	; (80064d8 <_dtoa_r+0x630>)
 800648a:	2000      	movs	r0, #0
 800648c:	f7f9 fed4 	bl	8000238 <__aeabi_dsub>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4640      	mov	r0, r8
 8006496:	4649      	mov	r1, r9
 8006498:	f7fa faf8 	bl	8000a8c <__aeabi_dcmplt>
 800649c:	2800      	cmp	r0, #0
 800649e:	f43f af35 	beq.w	800630c <_dtoa_r+0x464>
 80064a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064a4:	1e6b      	subs	r3, r5, #1
 80064a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80064a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064ac:	2b30      	cmp	r3, #48	; 0x30
 80064ae:	d0f8      	beq.n	80064a2 <_dtoa_r+0x5fa>
 80064b0:	9700      	str	r7, [sp, #0]
 80064b2:	e049      	b.n	8006548 <_dtoa_r+0x6a0>
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <_dtoa_r+0x624>)
 80064b6:	f7fa f877 	bl	80005a8 <__aeabi_dmul>
 80064ba:	4680      	mov	r8, r0
 80064bc:	4689      	mov	r9, r1
 80064be:	e7bd      	b.n	800643c <_dtoa_r+0x594>
 80064c0:	08007c00 	.word	0x08007c00
 80064c4:	08007bd8 	.word	0x08007bd8
 80064c8:	3ff00000 	.word	0x3ff00000
 80064cc:	40240000 	.word	0x40240000
 80064d0:	401c0000 	.word	0x401c0000
 80064d4:	40140000 	.word	0x40140000
 80064d8:	3fe00000 	.word	0x3fe00000
 80064dc:	9d01      	ldr	r5, [sp, #4]
 80064de:	4656      	mov	r6, sl
 80064e0:	465f      	mov	r7, fp
 80064e2:	4642      	mov	r2, r8
 80064e4:	464b      	mov	r3, r9
 80064e6:	4630      	mov	r0, r6
 80064e8:	4639      	mov	r1, r7
 80064ea:	f7fa f987 	bl	80007fc <__aeabi_ddiv>
 80064ee:	f7fa fb0b 	bl	8000b08 <__aeabi_d2iz>
 80064f2:	4682      	mov	sl, r0
 80064f4:	f7f9 ffee 	bl	80004d4 <__aeabi_i2d>
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	f7fa f854 	bl	80005a8 <__aeabi_dmul>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4630      	mov	r0, r6
 8006506:	4639      	mov	r1, r7
 8006508:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800650c:	f7f9 fe94 	bl	8000238 <__aeabi_dsub>
 8006510:	f805 6b01 	strb.w	r6, [r5], #1
 8006514:	9e01      	ldr	r6, [sp, #4]
 8006516:	9f03      	ldr	r7, [sp, #12]
 8006518:	1bae      	subs	r6, r5, r6
 800651a:	42b7      	cmp	r7, r6
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	d135      	bne.n	800658e <_dtoa_r+0x6e6>
 8006522:	f7f9 fe8b 	bl	800023c <__adddf3>
 8006526:	4642      	mov	r2, r8
 8006528:	464b      	mov	r3, r9
 800652a:	4606      	mov	r6, r0
 800652c:	460f      	mov	r7, r1
 800652e:	f7fa facb 	bl	8000ac8 <__aeabi_dcmpgt>
 8006532:	b9d0      	cbnz	r0, 800656a <_dtoa_r+0x6c2>
 8006534:	4642      	mov	r2, r8
 8006536:	464b      	mov	r3, r9
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7fa fa9c 	bl	8000a78 <__aeabi_dcmpeq>
 8006540:	b110      	cbz	r0, 8006548 <_dtoa_r+0x6a0>
 8006542:	f01a 0f01 	tst.w	sl, #1
 8006546:	d110      	bne.n	800656a <_dtoa_r+0x6c2>
 8006548:	4620      	mov	r0, r4
 800654a:	ee18 1a10 	vmov	r1, s16
 800654e:	f000 fb41 	bl	8006bd4 <_Bfree>
 8006552:	2300      	movs	r3, #0
 8006554:	9800      	ldr	r0, [sp, #0]
 8006556:	702b      	strb	r3, [r5, #0]
 8006558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800655a:	3001      	adds	r0, #1
 800655c:	6018      	str	r0, [r3, #0]
 800655e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006560:	2b00      	cmp	r3, #0
 8006562:	f43f acf1 	beq.w	8005f48 <_dtoa_r+0xa0>
 8006566:	601d      	str	r5, [r3, #0]
 8006568:	e4ee      	b.n	8005f48 <_dtoa_r+0xa0>
 800656a:	9f00      	ldr	r7, [sp, #0]
 800656c:	462b      	mov	r3, r5
 800656e:	461d      	mov	r5, r3
 8006570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006574:	2a39      	cmp	r2, #57	; 0x39
 8006576:	d106      	bne.n	8006586 <_dtoa_r+0x6de>
 8006578:	9a01      	ldr	r2, [sp, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d1f7      	bne.n	800656e <_dtoa_r+0x6c6>
 800657e:	9901      	ldr	r1, [sp, #4]
 8006580:	2230      	movs	r2, #48	; 0x30
 8006582:	3701      	adds	r7, #1
 8006584:	700a      	strb	r2, [r1, #0]
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	3201      	adds	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e790      	b.n	80064b0 <_dtoa_r+0x608>
 800658e:	4ba6      	ldr	r3, [pc, #664]	; (8006828 <_dtoa_r+0x980>)
 8006590:	2200      	movs	r2, #0
 8006592:	f7fa f809 	bl	80005a8 <__aeabi_dmul>
 8006596:	2200      	movs	r2, #0
 8006598:	2300      	movs	r3, #0
 800659a:	4606      	mov	r6, r0
 800659c:	460f      	mov	r7, r1
 800659e:	f7fa fa6b 	bl	8000a78 <__aeabi_dcmpeq>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d09d      	beq.n	80064e2 <_dtoa_r+0x63a>
 80065a6:	e7cf      	b.n	8006548 <_dtoa_r+0x6a0>
 80065a8:	9a08      	ldr	r2, [sp, #32]
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	f000 80d7 	beq.w	800675e <_dtoa_r+0x8b6>
 80065b0:	9a06      	ldr	r2, [sp, #24]
 80065b2:	2a01      	cmp	r2, #1
 80065b4:	f300 80ba 	bgt.w	800672c <_dtoa_r+0x884>
 80065b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065ba:	2a00      	cmp	r2, #0
 80065bc:	f000 80b2 	beq.w	8006724 <_dtoa_r+0x87c>
 80065c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065c4:	9e07      	ldr	r6, [sp, #28]
 80065c6:	9d04      	ldr	r5, [sp, #16]
 80065c8:	9a04      	ldr	r2, [sp, #16]
 80065ca:	441a      	add	r2, r3
 80065cc:	9204      	str	r2, [sp, #16]
 80065ce:	9a05      	ldr	r2, [sp, #20]
 80065d0:	2101      	movs	r1, #1
 80065d2:	441a      	add	r2, r3
 80065d4:	4620      	mov	r0, r4
 80065d6:	9205      	str	r2, [sp, #20]
 80065d8:	f000 fbb4 	bl	8006d44 <__i2b>
 80065dc:	4607      	mov	r7, r0
 80065de:	2d00      	cmp	r5, #0
 80065e0:	dd0c      	ble.n	80065fc <_dtoa_r+0x754>
 80065e2:	9b05      	ldr	r3, [sp, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dd09      	ble.n	80065fc <_dtoa_r+0x754>
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	9a04      	ldr	r2, [sp, #16]
 80065ec:	bfa8      	it	ge
 80065ee:	462b      	movge	r3, r5
 80065f0:	1ad2      	subs	r2, r2, r3
 80065f2:	9204      	str	r2, [sp, #16]
 80065f4:	9a05      	ldr	r2, [sp, #20]
 80065f6:	1aed      	subs	r5, r5, r3
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	9305      	str	r3, [sp, #20]
 80065fc:	9b07      	ldr	r3, [sp, #28]
 80065fe:	b31b      	cbz	r3, 8006648 <_dtoa_r+0x7a0>
 8006600:	9b08      	ldr	r3, [sp, #32]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80af 	beq.w	8006766 <_dtoa_r+0x8be>
 8006608:	2e00      	cmp	r6, #0
 800660a:	dd13      	ble.n	8006634 <_dtoa_r+0x78c>
 800660c:	4639      	mov	r1, r7
 800660e:	4632      	mov	r2, r6
 8006610:	4620      	mov	r0, r4
 8006612:	f000 fc57 	bl	8006ec4 <__pow5mult>
 8006616:	ee18 2a10 	vmov	r2, s16
 800661a:	4601      	mov	r1, r0
 800661c:	4607      	mov	r7, r0
 800661e:	4620      	mov	r0, r4
 8006620:	f000 fba6 	bl	8006d70 <__multiply>
 8006624:	ee18 1a10 	vmov	r1, s16
 8006628:	4680      	mov	r8, r0
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fad2 	bl	8006bd4 <_Bfree>
 8006630:	ee08 8a10 	vmov	s16, r8
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	1b9a      	subs	r2, r3, r6
 8006638:	d006      	beq.n	8006648 <_dtoa_r+0x7a0>
 800663a:	ee18 1a10 	vmov	r1, s16
 800663e:	4620      	mov	r0, r4
 8006640:	f000 fc40 	bl	8006ec4 <__pow5mult>
 8006644:	ee08 0a10 	vmov	s16, r0
 8006648:	2101      	movs	r1, #1
 800664a:	4620      	mov	r0, r4
 800664c:	f000 fb7a 	bl	8006d44 <__i2b>
 8006650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006652:	2b00      	cmp	r3, #0
 8006654:	4606      	mov	r6, r0
 8006656:	f340 8088 	ble.w	800676a <_dtoa_r+0x8c2>
 800665a:	461a      	mov	r2, r3
 800665c:	4601      	mov	r1, r0
 800665e:	4620      	mov	r0, r4
 8006660:	f000 fc30 	bl	8006ec4 <__pow5mult>
 8006664:	9b06      	ldr	r3, [sp, #24]
 8006666:	2b01      	cmp	r3, #1
 8006668:	4606      	mov	r6, r0
 800666a:	f340 8081 	ble.w	8006770 <_dtoa_r+0x8c8>
 800666e:	f04f 0800 	mov.w	r8, #0
 8006672:	6933      	ldr	r3, [r6, #16]
 8006674:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006678:	6918      	ldr	r0, [r3, #16]
 800667a:	f000 fb13 	bl	8006ca4 <__hi0bits>
 800667e:	f1c0 0020 	rsb	r0, r0, #32
 8006682:	9b05      	ldr	r3, [sp, #20]
 8006684:	4418      	add	r0, r3
 8006686:	f010 001f 	ands.w	r0, r0, #31
 800668a:	f000 8092 	beq.w	80067b2 <_dtoa_r+0x90a>
 800668e:	f1c0 0320 	rsb	r3, r0, #32
 8006692:	2b04      	cmp	r3, #4
 8006694:	f340 808a 	ble.w	80067ac <_dtoa_r+0x904>
 8006698:	f1c0 001c 	rsb	r0, r0, #28
 800669c:	9b04      	ldr	r3, [sp, #16]
 800669e:	4403      	add	r3, r0
 80066a0:	9304      	str	r3, [sp, #16]
 80066a2:	9b05      	ldr	r3, [sp, #20]
 80066a4:	4403      	add	r3, r0
 80066a6:	4405      	add	r5, r0
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	9b04      	ldr	r3, [sp, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	dd07      	ble.n	80066c0 <_dtoa_r+0x818>
 80066b0:	ee18 1a10 	vmov	r1, s16
 80066b4:	461a      	mov	r2, r3
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 fc5e 	bl	8006f78 <__lshift>
 80066bc:	ee08 0a10 	vmov	s16, r0
 80066c0:	9b05      	ldr	r3, [sp, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	dd05      	ble.n	80066d2 <_dtoa_r+0x82a>
 80066c6:	4631      	mov	r1, r6
 80066c8:	461a      	mov	r2, r3
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fc54 	bl	8006f78 <__lshift>
 80066d0:	4606      	mov	r6, r0
 80066d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d06e      	beq.n	80067b6 <_dtoa_r+0x90e>
 80066d8:	ee18 0a10 	vmov	r0, s16
 80066dc:	4631      	mov	r1, r6
 80066de:	f000 fcbb 	bl	8007058 <__mcmp>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	da67      	bge.n	80067b6 <_dtoa_r+0x90e>
 80066e6:	9b00      	ldr	r3, [sp, #0]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	ee18 1a10 	vmov	r1, s16
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	220a      	movs	r2, #10
 80066f2:	2300      	movs	r3, #0
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fa8f 	bl	8006c18 <__multadd>
 80066fa:	9b08      	ldr	r3, [sp, #32]
 80066fc:	ee08 0a10 	vmov	s16, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 81b1 	beq.w	8006a68 <_dtoa_r+0xbc0>
 8006706:	2300      	movs	r3, #0
 8006708:	4639      	mov	r1, r7
 800670a:	220a      	movs	r2, #10
 800670c:	4620      	mov	r0, r4
 800670e:	f000 fa83 	bl	8006c18 <__multadd>
 8006712:	9b02      	ldr	r3, [sp, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	4607      	mov	r7, r0
 8006718:	f300 808e 	bgt.w	8006838 <_dtoa_r+0x990>
 800671c:	9b06      	ldr	r3, [sp, #24]
 800671e:	2b02      	cmp	r3, #2
 8006720:	dc51      	bgt.n	80067c6 <_dtoa_r+0x91e>
 8006722:	e089      	b.n	8006838 <_dtoa_r+0x990>
 8006724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800672a:	e74b      	b.n	80065c4 <_dtoa_r+0x71c>
 800672c:	9b03      	ldr	r3, [sp, #12]
 800672e:	1e5e      	subs	r6, r3, #1
 8006730:	9b07      	ldr	r3, [sp, #28]
 8006732:	42b3      	cmp	r3, r6
 8006734:	bfbf      	itttt	lt
 8006736:	9b07      	ldrlt	r3, [sp, #28]
 8006738:	9607      	strlt	r6, [sp, #28]
 800673a:	1af2      	sublt	r2, r6, r3
 800673c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800673e:	bfb6      	itet	lt
 8006740:	189b      	addlt	r3, r3, r2
 8006742:	1b9e      	subge	r6, r3, r6
 8006744:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	bfb8      	it	lt
 800674a:	2600      	movlt	r6, #0
 800674c:	2b00      	cmp	r3, #0
 800674e:	bfb7      	itett	lt
 8006750:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006754:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006758:	1a9d      	sublt	r5, r3, r2
 800675a:	2300      	movlt	r3, #0
 800675c:	e734      	b.n	80065c8 <_dtoa_r+0x720>
 800675e:	9e07      	ldr	r6, [sp, #28]
 8006760:	9d04      	ldr	r5, [sp, #16]
 8006762:	9f08      	ldr	r7, [sp, #32]
 8006764:	e73b      	b.n	80065de <_dtoa_r+0x736>
 8006766:	9a07      	ldr	r2, [sp, #28]
 8006768:	e767      	b.n	800663a <_dtoa_r+0x792>
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	2b01      	cmp	r3, #1
 800676e:	dc18      	bgt.n	80067a2 <_dtoa_r+0x8fa>
 8006770:	f1ba 0f00 	cmp.w	sl, #0
 8006774:	d115      	bne.n	80067a2 <_dtoa_r+0x8fa>
 8006776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800677a:	b993      	cbnz	r3, 80067a2 <_dtoa_r+0x8fa>
 800677c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006780:	0d1b      	lsrs	r3, r3, #20
 8006782:	051b      	lsls	r3, r3, #20
 8006784:	b183      	cbz	r3, 80067a8 <_dtoa_r+0x900>
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	3301      	adds	r3, #1
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	9b05      	ldr	r3, [sp, #20]
 800678e:	3301      	adds	r3, #1
 8006790:	9305      	str	r3, [sp, #20]
 8006792:	f04f 0801 	mov.w	r8, #1
 8006796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006798:	2b00      	cmp	r3, #0
 800679a:	f47f af6a 	bne.w	8006672 <_dtoa_r+0x7ca>
 800679e:	2001      	movs	r0, #1
 80067a0:	e76f      	b.n	8006682 <_dtoa_r+0x7da>
 80067a2:	f04f 0800 	mov.w	r8, #0
 80067a6:	e7f6      	b.n	8006796 <_dtoa_r+0x8ee>
 80067a8:	4698      	mov	r8, r3
 80067aa:	e7f4      	b.n	8006796 <_dtoa_r+0x8ee>
 80067ac:	f43f af7d 	beq.w	80066aa <_dtoa_r+0x802>
 80067b0:	4618      	mov	r0, r3
 80067b2:	301c      	adds	r0, #28
 80067b4:	e772      	b.n	800669c <_dtoa_r+0x7f4>
 80067b6:	9b03      	ldr	r3, [sp, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	dc37      	bgt.n	800682c <_dtoa_r+0x984>
 80067bc:	9b06      	ldr	r3, [sp, #24]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	dd34      	ble.n	800682c <_dtoa_r+0x984>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	9302      	str	r3, [sp, #8]
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	b96b      	cbnz	r3, 80067e6 <_dtoa_r+0x93e>
 80067ca:	4631      	mov	r1, r6
 80067cc:	2205      	movs	r2, #5
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 fa22 	bl	8006c18 <__multadd>
 80067d4:	4601      	mov	r1, r0
 80067d6:	4606      	mov	r6, r0
 80067d8:	ee18 0a10 	vmov	r0, s16
 80067dc:	f000 fc3c 	bl	8007058 <__mcmp>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	f73f adbb 	bgt.w	800635c <_dtoa_r+0x4b4>
 80067e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e8:	9d01      	ldr	r5, [sp, #4]
 80067ea:	43db      	mvns	r3, r3
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	f04f 0800 	mov.w	r8, #0
 80067f2:	4631      	mov	r1, r6
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 f9ed 	bl	8006bd4 <_Bfree>
 80067fa:	2f00      	cmp	r7, #0
 80067fc:	f43f aea4 	beq.w	8006548 <_dtoa_r+0x6a0>
 8006800:	f1b8 0f00 	cmp.w	r8, #0
 8006804:	d005      	beq.n	8006812 <_dtoa_r+0x96a>
 8006806:	45b8      	cmp	r8, r7
 8006808:	d003      	beq.n	8006812 <_dtoa_r+0x96a>
 800680a:	4641      	mov	r1, r8
 800680c:	4620      	mov	r0, r4
 800680e:	f000 f9e1 	bl	8006bd4 <_Bfree>
 8006812:	4639      	mov	r1, r7
 8006814:	4620      	mov	r0, r4
 8006816:	f000 f9dd 	bl	8006bd4 <_Bfree>
 800681a:	e695      	b.n	8006548 <_dtoa_r+0x6a0>
 800681c:	2600      	movs	r6, #0
 800681e:	4637      	mov	r7, r6
 8006820:	e7e1      	b.n	80067e6 <_dtoa_r+0x93e>
 8006822:	9700      	str	r7, [sp, #0]
 8006824:	4637      	mov	r7, r6
 8006826:	e599      	b.n	800635c <_dtoa_r+0x4b4>
 8006828:	40240000 	.word	0x40240000
 800682c:	9b08      	ldr	r3, [sp, #32]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 80ca 	beq.w	80069c8 <_dtoa_r+0xb20>
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	9302      	str	r3, [sp, #8]
 8006838:	2d00      	cmp	r5, #0
 800683a:	dd05      	ble.n	8006848 <_dtoa_r+0x9a0>
 800683c:	4639      	mov	r1, r7
 800683e:	462a      	mov	r2, r5
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fb99 	bl	8006f78 <__lshift>
 8006846:	4607      	mov	r7, r0
 8006848:	f1b8 0f00 	cmp.w	r8, #0
 800684c:	d05b      	beq.n	8006906 <_dtoa_r+0xa5e>
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4620      	mov	r0, r4
 8006852:	f000 f97f 	bl	8006b54 <_Balloc>
 8006856:	4605      	mov	r5, r0
 8006858:	b928      	cbnz	r0, 8006866 <_dtoa_r+0x9be>
 800685a:	4b87      	ldr	r3, [pc, #540]	; (8006a78 <_dtoa_r+0xbd0>)
 800685c:	4602      	mov	r2, r0
 800685e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006862:	f7ff bb3b 	b.w	8005edc <_dtoa_r+0x34>
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	3202      	adds	r2, #2
 800686a:	0092      	lsls	r2, r2, #2
 800686c:	f107 010c 	add.w	r1, r7, #12
 8006870:	300c      	adds	r0, #12
 8006872:	f7fe fbbf 	bl	8004ff4 <memcpy>
 8006876:	2201      	movs	r2, #1
 8006878:	4629      	mov	r1, r5
 800687a:	4620      	mov	r0, r4
 800687c:	f000 fb7c 	bl	8006f78 <__lshift>
 8006880:	9b01      	ldr	r3, [sp, #4]
 8006882:	f103 0901 	add.w	r9, r3, #1
 8006886:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800688a:	4413      	add	r3, r2
 800688c:	9305      	str	r3, [sp, #20]
 800688e:	f00a 0301 	and.w	r3, sl, #1
 8006892:	46b8      	mov	r8, r7
 8006894:	9304      	str	r3, [sp, #16]
 8006896:	4607      	mov	r7, r0
 8006898:	4631      	mov	r1, r6
 800689a:	ee18 0a10 	vmov	r0, s16
 800689e:	f7ff fa75 	bl	8005d8c <quorem>
 80068a2:	4641      	mov	r1, r8
 80068a4:	9002      	str	r0, [sp, #8]
 80068a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068aa:	ee18 0a10 	vmov	r0, s16
 80068ae:	f000 fbd3 	bl	8007058 <__mcmp>
 80068b2:	463a      	mov	r2, r7
 80068b4:	9003      	str	r0, [sp, #12]
 80068b6:	4631      	mov	r1, r6
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fbe9 	bl	8007090 <__mdiff>
 80068be:	68c2      	ldr	r2, [r0, #12]
 80068c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80068c4:	4605      	mov	r5, r0
 80068c6:	bb02      	cbnz	r2, 800690a <_dtoa_r+0xa62>
 80068c8:	4601      	mov	r1, r0
 80068ca:	ee18 0a10 	vmov	r0, s16
 80068ce:	f000 fbc3 	bl	8007058 <__mcmp>
 80068d2:	4602      	mov	r2, r0
 80068d4:	4629      	mov	r1, r5
 80068d6:	4620      	mov	r0, r4
 80068d8:	9207      	str	r2, [sp, #28]
 80068da:	f000 f97b 	bl	8006bd4 <_Bfree>
 80068de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068e2:	ea43 0102 	orr.w	r1, r3, r2
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	430b      	orrs	r3, r1
 80068ea:	464d      	mov	r5, r9
 80068ec:	d10f      	bne.n	800690e <_dtoa_r+0xa66>
 80068ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068f2:	d02a      	beq.n	800694a <_dtoa_r+0xaa2>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	dd02      	ble.n	8006900 <_dtoa_r+0xa58>
 80068fa:	9b02      	ldr	r3, [sp, #8]
 80068fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006900:	f88b a000 	strb.w	sl, [fp]
 8006904:	e775      	b.n	80067f2 <_dtoa_r+0x94a>
 8006906:	4638      	mov	r0, r7
 8006908:	e7ba      	b.n	8006880 <_dtoa_r+0x9d8>
 800690a:	2201      	movs	r2, #1
 800690c:	e7e2      	b.n	80068d4 <_dtoa_r+0xa2c>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	db04      	blt.n	800691e <_dtoa_r+0xa76>
 8006914:	9906      	ldr	r1, [sp, #24]
 8006916:	430b      	orrs	r3, r1
 8006918:	9904      	ldr	r1, [sp, #16]
 800691a:	430b      	orrs	r3, r1
 800691c:	d122      	bne.n	8006964 <_dtoa_r+0xabc>
 800691e:	2a00      	cmp	r2, #0
 8006920:	ddee      	ble.n	8006900 <_dtoa_r+0xa58>
 8006922:	ee18 1a10 	vmov	r1, s16
 8006926:	2201      	movs	r2, #1
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fb25 	bl	8006f78 <__lshift>
 800692e:	4631      	mov	r1, r6
 8006930:	ee08 0a10 	vmov	s16, r0
 8006934:	f000 fb90 	bl	8007058 <__mcmp>
 8006938:	2800      	cmp	r0, #0
 800693a:	dc03      	bgt.n	8006944 <_dtoa_r+0xa9c>
 800693c:	d1e0      	bne.n	8006900 <_dtoa_r+0xa58>
 800693e:	f01a 0f01 	tst.w	sl, #1
 8006942:	d0dd      	beq.n	8006900 <_dtoa_r+0xa58>
 8006944:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006948:	d1d7      	bne.n	80068fa <_dtoa_r+0xa52>
 800694a:	2339      	movs	r3, #57	; 0x39
 800694c:	f88b 3000 	strb.w	r3, [fp]
 8006950:	462b      	mov	r3, r5
 8006952:	461d      	mov	r5, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800695a:	2a39      	cmp	r2, #57	; 0x39
 800695c:	d071      	beq.n	8006a42 <_dtoa_r+0xb9a>
 800695e:	3201      	adds	r2, #1
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	e746      	b.n	80067f2 <_dtoa_r+0x94a>
 8006964:	2a00      	cmp	r2, #0
 8006966:	dd07      	ble.n	8006978 <_dtoa_r+0xad0>
 8006968:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800696c:	d0ed      	beq.n	800694a <_dtoa_r+0xaa2>
 800696e:	f10a 0301 	add.w	r3, sl, #1
 8006972:	f88b 3000 	strb.w	r3, [fp]
 8006976:	e73c      	b.n	80067f2 <_dtoa_r+0x94a>
 8006978:	9b05      	ldr	r3, [sp, #20]
 800697a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800697e:	4599      	cmp	r9, r3
 8006980:	d047      	beq.n	8006a12 <_dtoa_r+0xb6a>
 8006982:	ee18 1a10 	vmov	r1, s16
 8006986:	2300      	movs	r3, #0
 8006988:	220a      	movs	r2, #10
 800698a:	4620      	mov	r0, r4
 800698c:	f000 f944 	bl	8006c18 <__multadd>
 8006990:	45b8      	cmp	r8, r7
 8006992:	ee08 0a10 	vmov	s16, r0
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	f04f 020a 	mov.w	r2, #10
 800699e:	4641      	mov	r1, r8
 80069a0:	4620      	mov	r0, r4
 80069a2:	d106      	bne.n	80069b2 <_dtoa_r+0xb0a>
 80069a4:	f000 f938 	bl	8006c18 <__multadd>
 80069a8:	4680      	mov	r8, r0
 80069aa:	4607      	mov	r7, r0
 80069ac:	f109 0901 	add.w	r9, r9, #1
 80069b0:	e772      	b.n	8006898 <_dtoa_r+0x9f0>
 80069b2:	f000 f931 	bl	8006c18 <__multadd>
 80069b6:	4639      	mov	r1, r7
 80069b8:	4680      	mov	r8, r0
 80069ba:	2300      	movs	r3, #0
 80069bc:	220a      	movs	r2, #10
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 f92a 	bl	8006c18 <__multadd>
 80069c4:	4607      	mov	r7, r0
 80069c6:	e7f1      	b.n	80069ac <_dtoa_r+0xb04>
 80069c8:	9b03      	ldr	r3, [sp, #12]
 80069ca:	9302      	str	r3, [sp, #8]
 80069cc:	9d01      	ldr	r5, [sp, #4]
 80069ce:	ee18 0a10 	vmov	r0, s16
 80069d2:	4631      	mov	r1, r6
 80069d4:	f7ff f9da 	bl	8005d8c <quorem>
 80069d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	f805 ab01 	strb.w	sl, [r5], #1
 80069e2:	1aea      	subs	r2, r5, r3
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	4293      	cmp	r3, r2
 80069e8:	dd09      	ble.n	80069fe <_dtoa_r+0xb56>
 80069ea:	ee18 1a10 	vmov	r1, s16
 80069ee:	2300      	movs	r3, #0
 80069f0:	220a      	movs	r2, #10
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f910 	bl	8006c18 <__multadd>
 80069f8:	ee08 0a10 	vmov	s16, r0
 80069fc:	e7e7      	b.n	80069ce <_dtoa_r+0xb26>
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bfc8      	it	gt
 8006a04:	461d      	movgt	r5, r3
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	bfd8      	it	le
 8006a0a:	2501      	movle	r5, #1
 8006a0c:	441d      	add	r5, r3
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	ee18 1a10 	vmov	r1, s16
 8006a16:	2201      	movs	r2, #1
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 faad 	bl	8006f78 <__lshift>
 8006a1e:	4631      	mov	r1, r6
 8006a20:	ee08 0a10 	vmov	s16, r0
 8006a24:	f000 fb18 	bl	8007058 <__mcmp>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	dc91      	bgt.n	8006950 <_dtoa_r+0xaa8>
 8006a2c:	d102      	bne.n	8006a34 <_dtoa_r+0xb8c>
 8006a2e:	f01a 0f01 	tst.w	sl, #1
 8006a32:	d18d      	bne.n	8006950 <_dtoa_r+0xaa8>
 8006a34:	462b      	mov	r3, r5
 8006a36:	461d      	mov	r5, r3
 8006a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a3c:	2a30      	cmp	r2, #48	; 0x30
 8006a3e:	d0fa      	beq.n	8006a36 <_dtoa_r+0xb8e>
 8006a40:	e6d7      	b.n	80067f2 <_dtoa_r+0x94a>
 8006a42:	9a01      	ldr	r2, [sp, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d184      	bne.n	8006952 <_dtoa_r+0xaaa>
 8006a48:	9b00      	ldr	r3, [sp, #0]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	2331      	movs	r3, #49	; 0x31
 8006a50:	7013      	strb	r3, [r2, #0]
 8006a52:	e6ce      	b.n	80067f2 <_dtoa_r+0x94a>
 8006a54:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <_dtoa_r+0xbd4>)
 8006a56:	f7ff ba95 	b.w	8005f84 <_dtoa_r+0xdc>
 8006a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f47f aa6e 	bne.w	8005f3e <_dtoa_r+0x96>
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <_dtoa_r+0xbd8>)
 8006a64:	f7ff ba8e 	b.w	8005f84 <_dtoa_r+0xdc>
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dcae      	bgt.n	80069cc <_dtoa_r+0xb24>
 8006a6e:	9b06      	ldr	r3, [sp, #24]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	f73f aea8 	bgt.w	80067c6 <_dtoa_r+0x91e>
 8006a76:	e7a9      	b.n	80069cc <_dtoa_r+0xb24>
 8006a78:	08007b60 	.word	0x08007b60
 8006a7c:	08007980 	.word	0x08007980
 8006a80:	08007ae1 	.word	0x08007ae1

08006a84 <fiprintf>:
 8006a84:	b40e      	push	{r1, r2, r3}
 8006a86:	b503      	push	{r0, r1, lr}
 8006a88:	4601      	mov	r1, r0
 8006a8a:	ab03      	add	r3, sp, #12
 8006a8c:	4805      	ldr	r0, [pc, #20]	; (8006aa4 <fiprintf+0x20>)
 8006a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a92:	6800      	ldr	r0, [r0, #0]
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	f000 fc21 	bl	80072dc <_vfiprintf_r>
 8006a9a:	b002      	add	sp, #8
 8006a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa0:	b003      	add	sp, #12
 8006aa2:	4770      	bx	lr
 8006aa4:	20000018 	.word	0x20000018

08006aa8 <_fstat_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4d07      	ldr	r5, [pc, #28]	; (8006ac8 <_fstat_r+0x20>)
 8006aac:	2300      	movs	r3, #0
 8006aae:	4604      	mov	r4, r0
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	602b      	str	r3, [r5, #0]
 8006ab6:	f7fa fcd5 	bl	8001464 <_fstat>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	d102      	bne.n	8006ac4 <_fstat_r+0x1c>
 8006abe:	682b      	ldr	r3, [r5, #0]
 8006ac0:	b103      	cbz	r3, 8006ac4 <_fstat_r+0x1c>
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	bd38      	pop	{r3, r4, r5, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200002ac 	.word	0x200002ac

08006acc <_isatty_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d06      	ldr	r5, [pc, #24]	; (8006ae8 <_isatty_r+0x1c>)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fa fcd4 	bl	8001484 <_isatty>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_isatty_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_isatty_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	200002ac 	.word	0x200002ac

08006aec <_localeconv_r>:
 8006aec:	4800      	ldr	r0, [pc, #0]	; (8006af0 <_localeconv_r+0x4>)
 8006aee:	4770      	bx	lr
 8006af0:	2000016c 	.word	0x2000016c

08006af4 <_lseek_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4d07      	ldr	r5, [pc, #28]	; (8006b14 <_lseek_r+0x20>)
 8006af8:	4604      	mov	r4, r0
 8006afa:	4608      	mov	r0, r1
 8006afc:	4611      	mov	r1, r2
 8006afe:	2200      	movs	r2, #0
 8006b00:	602a      	str	r2, [r5, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f7fa fcc9 	bl	800149a <_lseek>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d102      	bne.n	8006b12 <_lseek_r+0x1e>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	b103      	cbz	r3, 8006b12 <_lseek_r+0x1e>
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	200002ac 	.word	0x200002ac

08006b18 <__ascii_mbtowc>:
 8006b18:	b082      	sub	sp, #8
 8006b1a:	b901      	cbnz	r1, 8006b1e <__ascii_mbtowc+0x6>
 8006b1c:	a901      	add	r1, sp, #4
 8006b1e:	b142      	cbz	r2, 8006b32 <__ascii_mbtowc+0x1a>
 8006b20:	b14b      	cbz	r3, 8006b36 <__ascii_mbtowc+0x1e>
 8006b22:	7813      	ldrb	r3, [r2, #0]
 8006b24:	600b      	str	r3, [r1, #0]
 8006b26:	7812      	ldrb	r2, [r2, #0]
 8006b28:	1e10      	subs	r0, r2, #0
 8006b2a:	bf18      	it	ne
 8006b2c:	2001      	movne	r0, #1
 8006b2e:	b002      	add	sp, #8
 8006b30:	4770      	bx	lr
 8006b32:	4610      	mov	r0, r2
 8006b34:	e7fb      	b.n	8006b2e <__ascii_mbtowc+0x16>
 8006b36:	f06f 0001 	mvn.w	r0, #1
 8006b3a:	e7f8      	b.n	8006b2e <__ascii_mbtowc+0x16>

08006b3c <__malloc_lock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	; (8006b44 <__malloc_lock+0x8>)
 8006b3e:	f7fe b9e2 	b.w	8004f06 <__retarget_lock_acquire_recursive>
 8006b42:	bf00      	nop
 8006b44:	200002a0 	.word	0x200002a0

08006b48 <__malloc_unlock>:
 8006b48:	4801      	ldr	r0, [pc, #4]	; (8006b50 <__malloc_unlock+0x8>)
 8006b4a:	f7fe b9dd 	b.w	8004f08 <__retarget_lock_release_recursive>
 8006b4e:	bf00      	nop
 8006b50:	200002a0 	.word	0x200002a0

08006b54 <_Balloc>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b58:	4604      	mov	r4, r0
 8006b5a:	460d      	mov	r5, r1
 8006b5c:	b976      	cbnz	r6, 8006b7c <_Balloc+0x28>
 8006b5e:	2010      	movs	r0, #16
 8006b60:	f7fe fa38 	bl	8004fd4 <malloc>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6260      	str	r0, [r4, #36]	; 0x24
 8006b68:	b920      	cbnz	r0, 8006b74 <_Balloc+0x20>
 8006b6a:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <_Balloc+0x78>)
 8006b6c:	4818      	ldr	r0, [pc, #96]	; (8006bd0 <_Balloc+0x7c>)
 8006b6e:	2166      	movs	r1, #102	; 0x66
 8006b70:	f7ff f8de 	bl	8005d30 <__assert_func>
 8006b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b78:	6006      	str	r6, [r0, #0]
 8006b7a:	60c6      	str	r6, [r0, #12]
 8006b7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b7e:	68f3      	ldr	r3, [r6, #12]
 8006b80:	b183      	cbz	r3, 8006ba4 <_Balloc+0x50>
 8006b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b8a:	b9b8      	cbnz	r0, 8006bbc <_Balloc+0x68>
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b92:	1d72      	adds	r2, r6, #5
 8006b94:	0092      	lsls	r2, r2, #2
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fb60 	bl	800725c <_calloc_r>
 8006b9c:	b160      	cbz	r0, 8006bb8 <_Balloc+0x64>
 8006b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ba2:	e00e      	b.n	8006bc2 <_Balloc+0x6e>
 8006ba4:	2221      	movs	r2, #33	; 0x21
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fb57 	bl	800725c <_calloc_r>
 8006bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb0:	60f0      	str	r0, [r6, #12]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e4      	bne.n	8006b82 <_Balloc+0x2e>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	6802      	ldr	r2, [r0, #0]
 8006bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bc8:	e7f7      	b.n	8006bba <_Balloc+0x66>
 8006bca:	bf00      	nop
 8006bcc:	08007aee 	.word	0x08007aee
 8006bd0:	08007b7b 	.word	0x08007b7b

08006bd4 <_Bfree>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bd8:	4605      	mov	r5, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b976      	cbnz	r6, 8006bfc <_Bfree+0x28>
 8006bde:	2010      	movs	r0, #16
 8006be0:	f7fe f9f8 	bl	8004fd4 <malloc>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6268      	str	r0, [r5, #36]	; 0x24
 8006be8:	b920      	cbnz	r0, 8006bf4 <_Bfree+0x20>
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <_Bfree+0x3c>)
 8006bec:	4809      	ldr	r0, [pc, #36]	; (8006c14 <_Bfree+0x40>)
 8006bee:	218a      	movs	r1, #138	; 0x8a
 8006bf0:	f7ff f89e 	bl	8005d30 <__assert_func>
 8006bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bf8:	6006      	str	r6, [r0, #0]
 8006bfa:	60c6      	str	r6, [r0, #12]
 8006bfc:	b13c      	cbz	r4, 8006c0e <_Bfree+0x3a>
 8006bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c00:	6862      	ldr	r2, [r4, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c08:	6021      	str	r1, [r4, #0]
 8006c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	08007aee 	.word	0x08007aee
 8006c14:	08007b7b 	.word	0x08007b7b

08006c18 <__multadd>:
 8006c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1c:	690d      	ldr	r5, [r1, #16]
 8006c1e:	4607      	mov	r7, r0
 8006c20:	460c      	mov	r4, r1
 8006c22:	461e      	mov	r6, r3
 8006c24:	f101 0c14 	add.w	ip, r1, #20
 8006c28:	2000      	movs	r0, #0
 8006c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c2e:	b299      	uxth	r1, r3
 8006c30:	fb02 6101 	mla	r1, r2, r1, r6
 8006c34:	0c1e      	lsrs	r6, r3, #16
 8006c36:	0c0b      	lsrs	r3, r1, #16
 8006c38:	fb02 3306 	mla	r3, r2, r6, r3
 8006c3c:	b289      	uxth	r1, r1
 8006c3e:	3001      	adds	r0, #1
 8006c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c44:	4285      	cmp	r5, r0
 8006c46:	f84c 1b04 	str.w	r1, [ip], #4
 8006c4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c4e:	dcec      	bgt.n	8006c2a <__multadd+0x12>
 8006c50:	b30e      	cbz	r6, 8006c96 <__multadd+0x7e>
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dc19      	bgt.n	8006c8c <__multadd+0x74>
 8006c58:	6861      	ldr	r1, [r4, #4]
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	3101      	adds	r1, #1
 8006c5e:	f7ff ff79 	bl	8006b54 <_Balloc>
 8006c62:	4680      	mov	r8, r0
 8006c64:	b928      	cbnz	r0, 8006c72 <__multadd+0x5a>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <__multadd+0x84>)
 8006c6a:	480d      	ldr	r0, [pc, #52]	; (8006ca0 <__multadd+0x88>)
 8006c6c:	21b5      	movs	r1, #181	; 0xb5
 8006c6e:	f7ff f85f 	bl	8005d30 <__assert_func>
 8006c72:	6922      	ldr	r2, [r4, #16]
 8006c74:	3202      	adds	r2, #2
 8006c76:	f104 010c 	add.w	r1, r4, #12
 8006c7a:	0092      	lsls	r2, r2, #2
 8006c7c:	300c      	adds	r0, #12
 8006c7e:	f7fe f9b9 	bl	8004ff4 <memcpy>
 8006c82:	4621      	mov	r1, r4
 8006c84:	4638      	mov	r0, r7
 8006c86:	f7ff ffa5 	bl	8006bd4 <_Bfree>
 8006c8a:	4644      	mov	r4, r8
 8006c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c90:	3501      	adds	r5, #1
 8006c92:	615e      	str	r6, [r3, #20]
 8006c94:	6125      	str	r5, [r4, #16]
 8006c96:	4620      	mov	r0, r4
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9c:	08007b60 	.word	0x08007b60
 8006ca0:	08007b7b 	.word	0x08007b7b

08006ca4 <__hi0bits>:
 8006ca4:	0c03      	lsrs	r3, r0, #16
 8006ca6:	041b      	lsls	r3, r3, #16
 8006ca8:	b9d3      	cbnz	r3, 8006ce0 <__hi0bits+0x3c>
 8006caa:	0400      	lsls	r0, r0, #16
 8006cac:	2310      	movs	r3, #16
 8006cae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006cb2:	bf04      	itt	eq
 8006cb4:	0200      	lsleq	r0, r0, #8
 8006cb6:	3308      	addeq	r3, #8
 8006cb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006cbc:	bf04      	itt	eq
 8006cbe:	0100      	lsleq	r0, r0, #4
 8006cc0:	3304      	addeq	r3, #4
 8006cc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006cc6:	bf04      	itt	eq
 8006cc8:	0080      	lsleq	r0, r0, #2
 8006cca:	3302      	addeq	r3, #2
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	db05      	blt.n	8006cdc <__hi0bits+0x38>
 8006cd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006cd4:	f103 0301 	add.w	r3, r3, #1
 8006cd8:	bf08      	it	eq
 8006cda:	2320      	moveq	r3, #32
 8006cdc:	4618      	mov	r0, r3
 8006cde:	4770      	bx	lr
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e7e4      	b.n	8006cae <__hi0bits+0xa>

08006ce4 <__lo0bits>:
 8006ce4:	6803      	ldr	r3, [r0, #0]
 8006ce6:	f013 0207 	ands.w	r2, r3, #7
 8006cea:	4601      	mov	r1, r0
 8006cec:	d00b      	beq.n	8006d06 <__lo0bits+0x22>
 8006cee:	07da      	lsls	r2, r3, #31
 8006cf0:	d423      	bmi.n	8006d3a <__lo0bits+0x56>
 8006cf2:	0798      	lsls	r0, r3, #30
 8006cf4:	bf49      	itett	mi
 8006cf6:	085b      	lsrmi	r3, r3, #1
 8006cf8:	089b      	lsrpl	r3, r3, #2
 8006cfa:	2001      	movmi	r0, #1
 8006cfc:	600b      	strmi	r3, [r1, #0]
 8006cfe:	bf5c      	itt	pl
 8006d00:	600b      	strpl	r3, [r1, #0]
 8006d02:	2002      	movpl	r0, #2
 8006d04:	4770      	bx	lr
 8006d06:	b298      	uxth	r0, r3
 8006d08:	b9a8      	cbnz	r0, 8006d36 <__lo0bits+0x52>
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	2010      	movs	r0, #16
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	b90a      	cbnz	r2, 8006d16 <__lo0bits+0x32>
 8006d12:	3008      	adds	r0, #8
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	071a      	lsls	r2, r3, #28
 8006d18:	bf04      	itt	eq
 8006d1a:	091b      	lsreq	r3, r3, #4
 8006d1c:	3004      	addeq	r0, #4
 8006d1e:	079a      	lsls	r2, r3, #30
 8006d20:	bf04      	itt	eq
 8006d22:	089b      	lsreq	r3, r3, #2
 8006d24:	3002      	addeq	r0, #2
 8006d26:	07da      	lsls	r2, r3, #31
 8006d28:	d403      	bmi.n	8006d32 <__lo0bits+0x4e>
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	f100 0001 	add.w	r0, r0, #1
 8006d30:	d005      	beq.n	8006d3e <__lo0bits+0x5a>
 8006d32:	600b      	str	r3, [r1, #0]
 8006d34:	4770      	bx	lr
 8006d36:	4610      	mov	r0, r2
 8006d38:	e7e9      	b.n	8006d0e <__lo0bits+0x2a>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	4770      	bx	lr
 8006d3e:	2020      	movs	r0, #32
 8006d40:	4770      	bx	lr
	...

08006d44 <__i2b>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	460c      	mov	r4, r1
 8006d48:	2101      	movs	r1, #1
 8006d4a:	f7ff ff03 	bl	8006b54 <_Balloc>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	b928      	cbnz	r0, 8006d5e <__i2b+0x1a>
 8006d52:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <__i2b+0x24>)
 8006d54:	4805      	ldr	r0, [pc, #20]	; (8006d6c <__i2b+0x28>)
 8006d56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d5a:	f7fe ffe9 	bl	8005d30 <__assert_func>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	6144      	str	r4, [r0, #20]
 8006d62:	6103      	str	r3, [r0, #16]
 8006d64:	bd10      	pop	{r4, pc}
 8006d66:	bf00      	nop
 8006d68:	08007b60 	.word	0x08007b60
 8006d6c:	08007b7b 	.word	0x08007b7b

08006d70 <__multiply>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	4691      	mov	r9, r2
 8006d76:	690a      	ldr	r2, [r1, #16]
 8006d78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	bfb8      	it	lt
 8006d80:	460b      	movlt	r3, r1
 8006d82:	460c      	mov	r4, r1
 8006d84:	bfbc      	itt	lt
 8006d86:	464c      	movlt	r4, r9
 8006d88:	4699      	movlt	r9, r3
 8006d8a:	6927      	ldr	r7, [r4, #16]
 8006d8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d90:	68a3      	ldr	r3, [r4, #8]
 8006d92:	6861      	ldr	r1, [r4, #4]
 8006d94:	eb07 060a 	add.w	r6, r7, sl
 8006d98:	42b3      	cmp	r3, r6
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	bfb8      	it	lt
 8006d9e:	3101      	addlt	r1, #1
 8006da0:	f7ff fed8 	bl	8006b54 <_Balloc>
 8006da4:	b930      	cbnz	r0, 8006db4 <__multiply+0x44>
 8006da6:	4602      	mov	r2, r0
 8006da8:	4b44      	ldr	r3, [pc, #272]	; (8006ebc <__multiply+0x14c>)
 8006daa:	4845      	ldr	r0, [pc, #276]	; (8006ec0 <__multiply+0x150>)
 8006dac:	f240 115d 	movw	r1, #349	; 0x15d
 8006db0:	f7fe ffbe 	bl	8005d30 <__assert_func>
 8006db4:	f100 0514 	add.w	r5, r0, #20
 8006db8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4543      	cmp	r3, r8
 8006dc2:	d321      	bcc.n	8006e08 <__multiply+0x98>
 8006dc4:	f104 0314 	add.w	r3, r4, #20
 8006dc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dcc:	f109 0314 	add.w	r3, r9, #20
 8006dd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006dd4:	9202      	str	r2, [sp, #8]
 8006dd6:	1b3a      	subs	r2, r7, r4
 8006dd8:	3a15      	subs	r2, #21
 8006dda:	f022 0203 	bic.w	r2, r2, #3
 8006dde:	3204      	adds	r2, #4
 8006de0:	f104 0115 	add.w	r1, r4, #21
 8006de4:	428f      	cmp	r7, r1
 8006de6:	bf38      	it	cc
 8006de8:	2204      	movcc	r2, #4
 8006dea:	9201      	str	r2, [sp, #4]
 8006dec:	9a02      	ldr	r2, [sp, #8]
 8006dee:	9303      	str	r3, [sp, #12]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d80c      	bhi.n	8006e0e <__multiply+0x9e>
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	dd03      	ble.n	8006e00 <__multiply+0x90>
 8006df8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05a      	beq.n	8006eb6 <__multiply+0x146>
 8006e00:	6106      	str	r6, [r0, #16]
 8006e02:	b005      	add	sp, #20
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	f843 2b04 	str.w	r2, [r3], #4
 8006e0c:	e7d8      	b.n	8006dc0 <__multiply+0x50>
 8006e0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e12:	f1ba 0f00 	cmp.w	sl, #0
 8006e16:	d024      	beq.n	8006e62 <__multiply+0xf2>
 8006e18:	f104 0e14 	add.w	lr, r4, #20
 8006e1c:	46a9      	mov	r9, r5
 8006e1e:	f04f 0c00 	mov.w	ip, #0
 8006e22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e26:	f8d9 1000 	ldr.w	r1, [r9]
 8006e2a:	fa1f fb82 	uxth.w	fp, r2
 8006e2e:	b289      	uxth	r1, r1
 8006e30:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e38:	f8d9 2000 	ldr.w	r2, [r9]
 8006e3c:	4461      	add	r1, ip
 8006e3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e42:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e4a:	b289      	uxth	r1, r1
 8006e4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e50:	4577      	cmp	r7, lr
 8006e52:	f849 1b04 	str.w	r1, [r9], #4
 8006e56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e5a:	d8e2      	bhi.n	8006e22 <__multiply+0xb2>
 8006e5c:	9a01      	ldr	r2, [sp, #4]
 8006e5e:	f845 c002 	str.w	ip, [r5, r2]
 8006e62:	9a03      	ldr	r2, [sp, #12]
 8006e64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	f1b9 0f00 	cmp.w	r9, #0
 8006e6e:	d020      	beq.n	8006eb2 <__multiply+0x142>
 8006e70:	6829      	ldr	r1, [r5, #0]
 8006e72:	f104 0c14 	add.w	ip, r4, #20
 8006e76:	46ae      	mov	lr, r5
 8006e78:	f04f 0a00 	mov.w	sl, #0
 8006e7c:	f8bc b000 	ldrh.w	fp, [ip]
 8006e80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e84:	fb09 220b 	mla	r2, r9, fp, r2
 8006e88:	4492      	add	sl, r2
 8006e8a:	b289      	uxth	r1, r1
 8006e8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006e90:	f84e 1b04 	str.w	r1, [lr], #4
 8006e94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e98:	f8be 1000 	ldrh.w	r1, [lr]
 8006e9c:	0c12      	lsrs	r2, r2, #16
 8006e9e:	fb09 1102 	mla	r1, r9, r2, r1
 8006ea2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006ea6:	4567      	cmp	r7, ip
 8006ea8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006eac:	d8e6      	bhi.n	8006e7c <__multiply+0x10c>
 8006eae:	9a01      	ldr	r2, [sp, #4]
 8006eb0:	50a9      	str	r1, [r5, r2]
 8006eb2:	3504      	adds	r5, #4
 8006eb4:	e79a      	b.n	8006dec <__multiply+0x7c>
 8006eb6:	3e01      	subs	r6, #1
 8006eb8:	e79c      	b.n	8006df4 <__multiply+0x84>
 8006eba:	bf00      	nop
 8006ebc:	08007b60 	.word	0x08007b60
 8006ec0:	08007b7b 	.word	0x08007b7b

08006ec4 <__pow5mult>:
 8006ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	4615      	mov	r5, r2
 8006eca:	f012 0203 	ands.w	r2, r2, #3
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	d007      	beq.n	8006ee4 <__pow5mult+0x20>
 8006ed4:	4c25      	ldr	r4, [pc, #148]	; (8006f6c <__pow5mult+0xa8>)
 8006ed6:	3a01      	subs	r2, #1
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ede:	f7ff fe9b 	bl	8006c18 <__multadd>
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	10ad      	asrs	r5, r5, #2
 8006ee6:	d03d      	beq.n	8006f64 <__pow5mult+0xa0>
 8006ee8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006eea:	b97c      	cbnz	r4, 8006f0c <__pow5mult+0x48>
 8006eec:	2010      	movs	r0, #16
 8006eee:	f7fe f871 	bl	8004fd4 <malloc>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6270      	str	r0, [r6, #36]	; 0x24
 8006ef6:	b928      	cbnz	r0, 8006f04 <__pow5mult+0x40>
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <__pow5mult+0xac>)
 8006efa:	481e      	ldr	r0, [pc, #120]	; (8006f74 <__pow5mult+0xb0>)
 8006efc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f00:	f7fe ff16 	bl	8005d30 <__assert_func>
 8006f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f08:	6004      	str	r4, [r0, #0]
 8006f0a:	60c4      	str	r4, [r0, #12]
 8006f0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f14:	b94c      	cbnz	r4, 8006f2a <__pow5mult+0x66>
 8006f16:	f240 2171 	movw	r1, #625	; 0x271
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7ff ff12 	bl	8006d44 <__i2b>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f26:	4604      	mov	r4, r0
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	f04f 0900 	mov.w	r9, #0
 8006f2e:	07eb      	lsls	r3, r5, #31
 8006f30:	d50a      	bpl.n	8006f48 <__pow5mult+0x84>
 8006f32:	4639      	mov	r1, r7
 8006f34:	4622      	mov	r2, r4
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7ff ff1a 	bl	8006d70 <__multiply>
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff fe47 	bl	8006bd4 <_Bfree>
 8006f46:	4647      	mov	r7, r8
 8006f48:	106d      	asrs	r5, r5, #1
 8006f4a:	d00b      	beq.n	8006f64 <__pow5mult+0xa0>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	b938      	cbnz	r0, 8006f60 <__pow5mult+0x9c>
 8006f50:	4622      	mov	r2, r4
 8006f52:	4621      	mov	r1, r4
 8006f54:	4630      	mov	r0, r6
 8006f56:	f7ff ff0b 	bl	8006d70 <__multiply>
 8006f5a:	6020      	str	r0, [r4, #0]
 8006f5c:	f8c0 9000 	str.w	r9, [r0]
 8006f60:	4604      	mov	r4, r0
 8006f62:	e7e4      	b.n	8006f2e <__pow5mult+0x6a>
 8006f64:	4638      	mov	r0, r7
 8006f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f6a:	bf00      	nop
 8006f6c:	08007cc8 	.word	0x08007cc8
 8006f70:	08007aee 	.word	0x08007aee
 8006f74:	08007b7b 	.word	0x08007b7b

08006f78 <__lshift>:
 8006f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	6849      	ldr	r1, [r1, #4]
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f86:	68a3      	ldr	r3, [r4, #8]
 8006f88:	4607      	mov	r7, r0
 8006f8a:	4691      	mov	r9, r2
 8006f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f90:	f108 0601 	add.w	r6, r8, #1
 8006f94:	42b3      	cmp	r3, r6
 8006f96:	db0b      	blt.n	8006fb0 <__lshift+0x38>
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff fddb 	bl	8006b54 <_Balloc>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	b948      	cbnz	r0, 8006fb6 <__lshift+0x3e>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	4b2a      	ldr	r3, [pc, #168]	; (8007050 <__lshift+0xd8>)
 8006fa6:	482b      	ldr	r0, [pc, #172]	; (8007054 <__lshift+0xdc>)
 8006fa8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006fac:	f7fe fec0 	bl	8005d30 <__assert_func>
 8006fb0:	3101      	adds	r1, #1
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	e7ee      	b.n	8006f94 <__lshift+0x1c>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f100 0114 	add.w	r1, r0, #20
 8006fbc:	f100 0210 	add.w	r2, r0, #16
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	4553      	cmp	r3, sl
 8006fc4:	db37      	blt.n	8007036 <__lshift+0xbe>
 8006fc6:	6920      	ldr	r0, [r4, #16]
 8006fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fcc:	f104 0314 	add.w	r3, r4, #20
 8006fd0:	f019 091f 	ands.w	r9, r9, #31
 8006fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006fdc:	d02f      	beq.n	800703e <__lshift+0xc6>
 8006fde:	f1c9 0e20 	rsb	lr, r9, #32
 8006fe2:	468a      	mov	sl, r1
 8006fe4:	f04f 0c00 	mov.w	ip, #0
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	fa02 f209 	lsl.w	r2, r2, r9
 8006fee:	ea42 020c 	orr.w	r2, r2, ip
 8006ff2:	f84a 2b04 	str.w	r2, [sl], #4
 8006ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffa:	4298      	cmp	r0, r3
 8006ffc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007000:	d8f2      	bhi.n	8006fe8 <__lshift+0x70>
 8007002:	1b03      	subs	r3, r0, r4
 8007004:	3b15      	subs	r3, #21
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	3304      	adds	r3, #4
 800700c:	f104 0215 	add.w	r2, r4, #21
 8007010:	4290      	cmp	r0, r2
 8007012:	bf38      	it	cc
 8007014:	2304      	movcc	r3, #4
 8007016:	f841 c003 	str.w	ip, [r1, r3]
 800701a:	f1bc 0f00 	cmp.w	ip, #0
 800701e:	d001      	beq.n	8007024 <__lshift+0xac>
 8007020:	f108 0602 	add.w	r6, r8, #2
 8007024:	3e01      	subs	r6, #1
 8007026:	4638      	mov	r0, r7
 8007028:	612e      	str	r6, [r5, #16]
 800702a:	4621      	mov	r1, r4
 800702c:	f7ff fdd2 	bl	8006bd4 <_Bfree>
 8007030:	4628      	mov	r0, r5
 8007032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007036:	f842 0f04 	str.w	r0, [r2, #4]!
 800703a:	3301      	adds	r3, #1
 800703c:	e7c1      	b.n	8006fc2 <__lshift+0x4a>
 800703e:	3904      	subs	r1, #4
 8007040:	f853 2b04 	ldr.w	r2, [r3], #4
 8007044:	f841 2f04 	str.w	r2, [r1, #4]!
 8007048:	4298      	cmp	r0, r3
 800704a:	d8f9      	bhi.n	8007040 <__lshift+0xc8>
 800704c:	e7ea      	b.n	8007024 <__lshift+0xac>
 800704e:	bf00      	nop
 8007050:	08007b60 	.word	0x08007b60
 8007054:	08007b7b 	.word	0x08007b7b

08007058 <__mcmp>:
 8007058:	b530      	push	{r4, r5, lr}
 800705a:	6902      	ldr	r2, [r0, #16]
 800705c:	690c      	ldr	r4, [r1, #16]
 800705e:	1b12      	subs	r2, r2, r4
 8007060:	d10e      	bne.n	8007080 <__mcmp+0x28>
 8007062:	f100 0314 	add.w	r3, r0, #20
 8007066:	3114      	adds	r1, #20
 8007068:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800706c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007070:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007074:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007078:	42a5      	cmp	r5, r4
 800707a:	d003      	beq.n	8007084 <__mcmp+0x2c>
 800707c:	d305      	bcc.n	800708a <__mcmp+0x32>
 800707e:	2201      	movs	r2, #1
 8007080:	4610      	mov	r0, r2
 8007082:	bd30      	pop	{r4, r5, pc}
 8007084:	4283      	cmp	r3, r0
 8007086:	d3f3      	bcc.n	8007070 <__mcmp+0x18>
 8007088:	e7fa      	b.n	8007080 <__mcmp+0x28>
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	e7f7      	b.n	8007080 <__mcmp+0x28>

08007090 <__mdiff>:
 8007090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	460c      	mov	r4, r1
 8007096:	4606      	mov	r6, r0
 8007098:	4611      	mov	r1, r2
 800709a:	4620      	mov	r0, r4
 800709c:	4690      	mov	r8, r2
 800709e:	f7ff ffdb 	bl	8007058 <__mcmp>
 80070a2:	1e05      	subs	r5, r0, #0
 80070a4:	d110      	bne.n	80070c8 <__mdiff+0x38>
 80070a6:	4629      	mov	r1, r5
 80070a8:	4630      	mov	r0, r6
 80070aa:	f7ff fd53 	bl	8006b54 <_Balloc>
 80070ae:	b930      	cbnz	r0, 80070be <__mdiff+0x2e>
 80070b0:	4b3a      	ldr	r3, [pc, #232]	; (800719c <__mdiff+0x10c>)
 80070b2:	4602      	mov	r2, r0
 80070b4:	f240 2132 	movw	r1, #562	; 0x232
 80070b8:	4839      	ldr	r0, [pc, #228]	; (80071a0 <__mdiff+0x110>)
 80070ba:	f7fe fe39 	bl	8005d30 <__assert_func>
 80070be:	2301      	movs	r3, #1
 80070c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c8:	bfa4      	itt	ge
 80070ca:	4643      	movge	r3, r8
 80070cc:	46a0      	movge	r8, r4
 80070ce:	4630      	mov	r0, r6
 80070d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070d4:	bfa6      	itte	ge
 80070d6:	461c      	movge	r4, r3
 80070d8:	2500      	movge	r5, #0
 80070da:	2501      	movlt	r5, #1
 80070dc:	f7ff fd3a 	bl	8006b54 <_Balloc>
 80070e0:	b920      	cbnz	r0, 80070ec <__mdiff+0x5c>
 80070e2:	4b2e      	ldr	r3, [pc, #184]	; (800719c <__mdiff+0x10c>)
 80070e4:	4602      	mov	r2, r0
 80070e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80070ea:	e7e5      	b.n	80070b8 <__mdiff+0x28>
 80070ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80070f0:	6926      	ldr	r6, [r4, #16]
 80070f2:	60c5      	str	r5, [r0, #12]
 80070f4:	f104 0914 	add.w	r9, r4, #20
 80070f8:	f108 0514 	add.w	r5, r8, #20
 80070fc:	f100 0e14 	add.w	lr, r0, #20
 8007100:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007104:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007108:	f108 0210 	add.w	r2, r8, #16
 800710c:	46f2      	mov	sl, lr
 800710e:	2100      	movs	r1, #0
 8007110:	f859 3b04 	ldr.w	r3, [r9], #4
 8007114:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007118:	fa1f f883 	uxth.w	r8, r3
 800711c:	fa11 f18b 	uxtah	r1, r1, fp
 8007120:	0c1b      	lsrs	r3, r3, #16
 8007122:	eba1 0808 	sub.w	r8, r1, r8
 8007126:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800712a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800712e:	fa1f f888 	uxth.w	r8, r8
 8007132:	1419      	asrs	r1, r3, #16
 8007134:	454e      	cmp	r6, r9
 8007136:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800713a:	f84a 3b04 	str.w	r3, [sl], #4
 800713e:	d8e7      	bhi.n	8007110 <__mdiff+0x80>
 8007140:	1b33      	subs	r3, r6, r4
 8007142:	3b15      	subs	r3, #21
 8007144:	f023 0303 	bic.w	r3, r3, #3
 8007148:	3304      	adds	r3, #4
 800714a:	3415      	adds	r4, #21
 800714c:	42a6      	cmp	r6, r4
 800714e:	bf38      	it	cc
 8007150:	2304      	movcc	r3, #4
 8007152:	441d      	add	r5, r3
 8007154:	4473      	add	r3, lr
 8007156:	469e      	mov	lr, r3
 8007158:	462e      	mov	r6, r5
 800715a:	4566      	cmp	r6, ip
 800715c:	d30e      	bcc.n	800717c <__mdiff+0xec>
 800715e:	f10c 0203 	add.w	r2, ip, #3
 8007162:	1b52      	subs	r2, r2, r5
 8007164:	f022 0203 	bic.w	r2, r2, #3
 8007168:	3d03      	subs	r5, #3
 800716a:	45ac      	cmp	ip, r5
 800716c:	bf38      	it	cc
 800716e:	2200      	movcc	r2, #0
 8007170:	441a      	add	r2, r3
 8007172:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007176:	b17b      	cbz	r3, 8007198 <__mdiff+0x108>
 8007178:	6107      	str	r7, [r0, #16]
 800717a:	e7a3      	b.n	80070c4 <__mdiff+0x34>
 800717c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007180:	fa11 f288 	uxtah	r2, r1, r8
 8007184:	1414      	asrs	r4, r2, #16
 8007186:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800718a:	b292      	uxth	r2, r2
 800718c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007190:	f84e 2b04 	str.w	r2, [lr], #4
 8007194:	1421      	asrs	r1, r4, #16
 8007196:	e7e0      	b.n	800715a <__mdiff+0xca>
 8007198:	3f01      	subs	r7, #1
 800719a:	e7ea      	b.n	8007172 <__mdiff+0xe2>
 800719c:	08007b60 	.word	0x08007b60
 80071a0:	08007b7b 	.word	0x08007b7b

080071a4 <__d2b>:
 80071a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071a8:	4689      	mov	r9, r1
 80071aa:	2101      	movs	r1, #1
 80071ac:	ec57 6b10 	vmov	r6, r7, d0
 80071b0:	4690      	mov	r8, r2
 80071b2:	f7ff fccf 	bl	8006b54 <_Balloc>
 80071b6:	4604      	mov	r4, r0
 80071b8:	b930      	cbnz	r0, 80071c8 <__d2b+0x24>
 80071ba:	4602      	mov	r2, r0
 80071bc:	4b25      	ldr	r3, [pc, #148]	; (8007254 <__d2b+0xb0>)
 80071be:	4826      	ldr	r0, [pc, #152]	; (8007258 <__d2b+0xb4>)
 80071c0:	f240 310a 	movw	r1, #778	; 0x30a
 80071c4:	f7fe fdb4 	bl	8005d30 <__assert_func>
 80071c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80071cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071d0:	bb35      	cbnz	r5, 8007220 <__d2b+0x7c>
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	d028      	beq.n	800722a <__d2b+0x86>
 80071d8:	4668      	mov	r0, sp
 80071da:	9600      	str	r6, [sp, #0]
 80071dc:	f7ff fd82 	bl	8006ce4 <__lo0bits>
 80071e0:	9900      	ldr	r1, [sp, #0]
 80071e2:	b300      	cbz	r0, 8007226 <__d2b+0x82>
 80071e4:	9a01      	ldr	r2, [sp, #4]
 80071e6:	f1c0 0320 	rsb	r3, r0, #32
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	430b      	orrs	r3, r1
 80071f0:	40c2      	lsrs	r2, r0
 80071f2:	6163      	str	r3, [r4, #20]
 80071f4:	9201      	str	r2, [sp, #4]
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	61a3      	str	r3, [r4, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bf14      	ite	ne
 80071fe:	2202      	movne	r2, #2
 8007200:	2201      	moveq	r2, #1
 8007202:	6122      	str	r2, [r4, #16]
 8007204:	b1d5      	cbz	r5, 800723c <__d2b+0x98>
 8007206:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800720a:	4405      	add	r5, r0
 800720c:	f8c9 5000 	str.w	r5, [r9]
 8007210:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007214:	f8c8 0000 	str.w	r0, [r8]
 8007218:	4620      	mov	r0, r4
 800721a:	b003      	add	sp, #12
 800721c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007224:	e7d5      	b.n	80071d2 <__d2b+0x2e>
 8007226:	6161      	str	r1, [r4, #20]
 8007228:	e7e5      	b.n	80071f6 <__d2b+0x52>
 800722a:	a801      	add	r0, sp, #4
 800722c:	f7ff fd5a 	bl	8006ce4 <__lo0bits>
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	6163      	str	r3, [r4, #20]
 8007234:	2201      	movs	r2, #1
 8007236:	6122      	str	r2, [r4, #16]
 8007238:	3020      	adds	r0, #32
 800723a:	e7e3      	b.n	8007204 <__d2b+0x60>
 800723c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007240:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007244:	f8c9 0000 	str.w	r0, [r9]
 8007248:	6918      	ldr	r0, [r3, #16]
 800724a:	f7ff fd2b 	bl	8006ca4 <__hi0bits>
 800724e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007252:	e7df      	b.n	8007214 <__d2b+0x70>
 8007254:	08007b60 	.word	0x08007b60
 8007258:	08007b7b 	.word	0x08007b7b

0800725c <_calloc_r>:
 800725c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800725e:	fba1 2402 	umull	r2, r4, r1, r2
 8007262:	b94c      	cbnz	r4, 8007278 <_calloc_r+0x1c>
 8007264:	4611      	mov	r1, r2
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	f7fd ff46 	bl	80050f8 <_malloc_r>
 800726c:	9a01      	ldr	r2, [sp, #4]
 800726e:	4605      	mov	r5, r0
 8007270:	b930      	cbnz	r0, 8007280 <_calloc_r+0x24>
 8007272:	4628      	mov	r0, r5
 8007274:	b003      	add	sp, #12
 8007276:	bd30      	pop	{r4, r5, pc}
 8007278:	220c      	movs	r2, #12
 800727a:	6002      	str	r2, [r0, #0]
 800727c:	2500      	movs	r5, #0
 800727e:	e7f8      	b.n	8007272 <_calloc_r+0x16>
 8007280:	4621      	mov	r1, r4
 8007282:	f7fd fec5 	bl	8005010 <memset>
 8007286:	e7f4      	b.n	8007272 <_calloc_r+0x16>

08007288 <__sfputc_r>:
 8007288:	6893      	ldr	r3, [r2, #8]
 800728a:	3b01      	subs	r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	b410      	push	{r4}
 8007290:	6093      	str	r3, [r2, #8]
 8007292:	da08      	bge.n	80072a6 <__sfputc_r+0x1e>
 8007294:	6994      	ldr	r4, [r2, #24]
 8007296:	42a3      	cmp	r3, r4
 8007298:	db01      	blt.n	800729e <__sfputc_r+0x16>
 800729a:	290a      	cmp	r1, #10
 800729c:	d103      	bne.n	80072a6 <__sfputc_r+0x1e>
 800729e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a2:	f7fe bc73 	b.w	8005b8c <__swbuf_r>
 80072a6:	6813      	ldr	r3, [r2, #0]
 80072a8:	1c58      	adds	r0, r3, #1
 80072aa:	6010      	str	r0, [r2, #0]
 80072ac:	7019      	strb	r1, [r3, #0]
 80072ae:	4608      	mov	r0, r1
 80072b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <__sfputs_r>:
 80072b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b8:	4606      	mov	r6, r0
 80072ba:	460f      	mov	r7, r1
 80072bc:	4614      	mov	r4, r2
 80072be:	18d5      	adds	r5, r2, r3
 80072c0:	42ac      	cmp	r4, r5
 80072c2:	d101      	bne.n	80072c8 <__sfputs_r+0x12>
 80072c4:	2000      	movs	r0, #0
 80072c6:	e007      	b.n	80072d8 <__sfputs_r+0x22>
 80072c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072cc:	463a      	mov	r2, r7
 80072ce:	4630      	mov	r0, r6
 80072d0:	f7ff ffda 	bl	8007288 <__sfputc_r>
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d1f3      	bne.n	80072c0 <__sfputs_r+0xa>
 80072d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072dc <_vfiprintf_r>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	460d      	mov	r5, r1
 80072e2:	b09d      	sub	sp, #116	; 0x74
 80072e4:	4614      	mov	r4, r2
 80072e6:	4698      	mov	r8, r3
 80072e8:	4606      	mov	r6, r0
 80072ea:	b118      	cbz	r0, 80072f4 <_vfiprintf_r+0x18>
 80072ec:	6983      	ldr	r3, [r0, #24]
 80072ee:	b90b      	cbnz	r3, 80072f4 <_vfiprintf_r+0x18>
 80072f0:	f7fd fd46 	bl	8004d80 <__sinit>
 80072f4:	4b89      	ldr	r3, [pc, #548]	; (800751c <_vfiprintf_r+0x240>)
 80072f6:	429d      	cmp	r5, r3
 80072f8:	d11b      	bne.n	8007332 <_vfiprintf_r+0x56>
 80072fa:	6875      	ldr	r5, [r6, #4]
 80072fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072fe:	07d9      	lsls	r1, r3, #31
 8007300:	d405      	bmi.n	800730e <_vfiprintf_r+0x32>
 8007302:	89ab      	ldrh	r3, [r5, #12]
 8007304:	059a      	lsls	r2, r3, #22
 8007306:	d402      	bmi.n	800730e <_vfiprintf_r+0x32>
 8007308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800730a:	f7fd fdfc 	bl	8004f06 <__retarget_lock_acquire_recursive>
 800730e:	89ab      	ldrh	r3, [r5, #12]
 8007310:	071b      	lsls	r3, r3, #28
 8007312:	d501      	bpl.n	8007318 <_vfiprintf_r+0x3c>
 8007314:	692b      	ldr	r3, [r5, #16]
 8007316:	b9eb      	cbnz	r3, 8007354 <_vfiprintf_r+0x78>
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f7fe fc9a 	bl	8005c54 <__swsetup_r>
 8007320:	b1c0      	cbz	r0, 8007354 <_vfiprintf_r+0x78>
 8007322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007324:	07dc      	lsls	r4, r3, #31
 8007326:	d50e      	bpl.n	8007346 <_vfiprintf_r+0x6a>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	b01d      	add	sp, #116	; 0x74
 800732e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007332:	4b7b      	ldr	r3, [pc, #492]	; (8007520 <_vfiprintf_r+0x244>)
 8007334:	429d      	cmp	r5, r3
 8007336:	d101      	bne.n	800733c <_vfiprintf_r+0x60>
 8007338:	68b5      	ldr	r5, [r6, #8]
 800733a:	e7df      	b.n	80072fc <_vfiprintf_r+0x20>
 800733c:	4b79      	ldr	r3, [pc, #484]	; (8007524 <_vfiprintf_r+0x248>)
 800733e:	429d      	cmp	r5, r3
 8007340:	bf08      	it	eq
 8007342:	68f5      	ldreq	r5, [r6, #12]
 8007344:	e7da      	b.n	80072fc <_vfiprintf_r+0x20>
 8007346:	89ab      	ldrh	r3, [r5, #12]
 8007348:	0598      	lsls	r0, r3, #22
 800734a:	d4ed      	bmi.n	8007328 <_vfiprintf_r+0x4c>
 800734c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800734e:	f7fd fddb 	bl	8004f08 <__retarget_lock_release_recursive>
 8007352:	e7e9      	b.n	8007328 <_vfiprintf_r+0x4c>
 8007354:	2300      	movs	r3, #0
 8007356:	9309      	str	r3, [sp, #36]	; 0x24
 8007358:	2320      	movs	r3, #32
 800735a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800735e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007362:	2330      	movs	r3, #48	; 0x30
 8007364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007528 <_vfiprintf_r+0x24c>
 8007368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800736c:	f04f 0901 	mov.w	r9, #1
 8007370:	4623      	mov	r3, r4
 8007372:	469a      	mov	sl, r3
 8007374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007378:	b10a      	cbz	r2, 800737e <_vfiprintf_r+0xa2>
 800737a:	2a25      	cmp	r2, #37	; 0x25
 800737c:	d1f9      	bne.n	8007372 <_vfiprintf_r+0x96>
 800737e:	ebba 0b04 	subs.w	fp, sl, r4
 8007382:	d00b      	beq.n	800739c <_vfiprintf_r+0xc0>
 8007384:	465b      	mov	r3, fp
 8007386:	4622      	mov	r2, r4
 8007388:	4629      	mov	r1, r5
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ff93 	bl	80072b6 <__sfputs_r>
 8007390:	3001      	adds	r0, #1
 8007392:	f000 80aa 	beq.w	80074ea <_vfiprintf_r+0x20e>
 8007396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007398:	445a      	add	r2, fp
 800739a:	9209      	str	r2, [sp, #36]	; 0x24
 800739c:	f89a 3000 	ldrb.w	r3, [sl]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80a2 	beq.w	80074ea <_vfiprintf_r+0x20e>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b0:	f10a 0a01 	add.w	sl, sl, #1
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	9307      	str	r3, [sp, #28]
 80073b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073bc:	931a      	str	r3, [sp, #104]	; 0x68
 80073be:	4654      	mov	r4, sl
 80073c0:	2205      	movs	r2, #5
 80073c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c6:	4858      	ldr	r0, [pc, #352]	; (8007528 <_vfiprintf_r+0x24c>)
 80073c8:	f7f8 feda 	bl	8000180 <memchr>
 80073cc:	9a04      	ldr	r2, [sp, #16]
 80073ce:	b9d8      	cbnz	r0, 8007408 <_vfiprintf_r+0x12c>
 80073d0:	06d1      	lsls	r1, r2, #27
 80073d2:	bf44      	itt	mi
 80073d4:	2320      	movmi	r3, #32
 80073d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073da:	0713      	lsls	r3, r2, #28
 80073dc:	bf44      	itt	mi
 80073de:	232b      	movmi	r3, #43	; 0x2b
 80073e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073e4:	f89a 3000 	ldrb.w	r3, [sl]
 80073e8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ea:	d015      	beq.n	8007418 <_vfiprintf_r+0x13c>
 80073ec:	9a07      	ldr	r2, [sp, #28]
 80073ee:	4654      	mov	r4, sl
 80073f0:	2000      	movs	r0, #0
 80073f2:	f04f 0c0a 	mov.w	ip, #10
 80073f6:	4621      	mov	r1, r4
 80073f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073fc:	3b30      	subs	r3, #48	; 0x30
 80073fe:	2b09      	cmp	r3, #9
 8007400:	d94e      	bls.n	80074a0 <_vfiprintf_r+0x1c4>
 8007402:	b1b0      	cbz	r0, 8007432 <_vfiprintf_r+0x156>
 8007404:	9207      	str	r2, [sp, #28]
 8007406:	e014      	b.n	8007432 <_vfiprintf_r+0x156>
 8007408:	eba0 0308 	sub.w	r3, r0, r8
 800740c:	fa09 f303 	lsl.w	r3, r9, r3
 8007410:	4313      	orrs	r3, r2
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	46a2      	mov	sl, r4
 8007416:	e7d2      	b.n	80073be <_vfiprintf_r+0xe2>
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	1d19      	adds	r1, r3, #4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	9103      	str	r1, [sp, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	bfbb      	ittet	lt
 8007424:	425b      	neglt	r3, r3
 8007426:	f042 0202 	orrlt.w	r2, r2, #2
 800742a:	9307      	strge	r3, [sp, #28]
 800742c:	9307      	strlt	r3, [sp, #28]
 800742e:	bfb8      	it	lt
 8007430:	9204      	strlt	r2, [sp, #16]
 8007432:	7823      	ldrb	r3, [r4, #0]
 8007434:	2b2e      	cmp	r3, #46	; 0x2e
 8007436:	d10c      	bne.n	8007452 <_vfiprintf_r+0x176>
 8007438:	7863      	ldrb	r3, [r4, #1]
 800743a:	2b2a      	cmp	r3, #42	; 0x2a
 800743c:	d135      	bne.n	80074aa <_vfiprintf_r+0x1ce>
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	1d1a      	adds	r2, r3, #4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	9203      	str	r2, [sp, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	bfb8      	it	lt
 800744a:	f04f 33ff 	movlt.w	r3, #4294967295
 800744e:	3402      	adds	r4, #2
 8007450:	9305      	str	r3, [sp, #20]
 8007452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007538 <_vfiprintf_r+0x25c>
 8007456:	7821      	ldrb	r1, [r4, #0]
 8007458:	2203      	movs	r2, #3
 800745a:	4650      	mov	r0, sl
 800745c:	f7f8 fe90 	bl	8000180 <memchr>
 8007460:	b140      	cbz	r0, 8007474 <_vfiprintf_r+0x198>
 8007462:	2340      	movs	r3, #64	; 0x40
 8007464:	eba0 000a 	sub.w	r0, r0, sl
 8007468:	fa03 f000 	lsl.w	r0, r3, r0
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	4303      	orrs	r3, r0
 8007470:	3401      	adds	r4, #1
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007478:	482c      	ldr	r0, [pc, #176]	; (800752c <_vfiprintf_r+0x250>)
 800747a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800747e:	2206      	movs	r2, #6
 8007480:	f7f8 fe7e 	bl	8000180 <memchr>
 8007484:	2800      	cmp	r0, #0
 8007486:	d03f      	beq.n	8007508 <_vfiprintf_r+0x22c>
 8007488:	4b29      	ldr	r3, [pc, #164]	; (8007530 <_vfiprintf_r+0x254>)
 800748a:	bb1b      	cbnz	r3, 80074d4 <_vfiprintf_r+0x1f8>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	3307      	adds	r3, #7
 8007490:	f023 0307 	bic.w	r3, r3, #7
 8007494:	3308      	adds	r3, #8
 8007496:	9303      	str	r3, [sp, #12]
 8007498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749a:	443b      	add	r3, r7
 800749c:	9309      	str	r3, [sp, #36]	; 0x24
 800749e:	e767      	b.n	8007370 <_vfiprintf_r+0x94>
 80074a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a4:	460c      	mov	r4, r1
 80074a6:	2001      	movs	r0, #1
 80074a8:	e7a5      	b.n	80073f6 <_vfiprintf_r+0x11a>
 80074aa:	2300      	movs	r3, #0
 80074ac:	3401      	adds	r4, #1
 80074ae:	9305      	str	r3, [sp, #20]
 80074b0:	4619      	mov	r1, r3
 80074b2:	f04f 0c0a 	mov.w	ip, #10
 80074b6:	4620      	mov	r0, r4
 80074b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074bc:	3a30      	subs	r2, #48	; 0x30
 80074be:	2a09      	cmp	r2, #9
 80074c0:	d903      	bls.n	80074ca <_vfiprintf_r+0x1ee>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0c5      	beq.n	8007452 <_vfiprintf_r+0x176>
 80074c6:	9105      	str	r1, [sp, #20]
 80074c8:	e7c3      	b.n	8007452 <_vfiprintf_r+0x176>
 80074ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ce:	4604      	mov	r4, r0
 80074d0:	2301      	movs	r3, #1
 80074d2:	e7f0      	b.n	80074b6 <_vfiprintf_r+0x1da>
 80074d4:	ab03      	add	r3, sp, #12
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	462a      	mov	r2, r5
 80074da:	4b16      	ldr	r3, [pc, #88]	; (8007534 <_vfiprintf_r+0x258>)
 80074dc:	a904      	add	r1, sp, #16
 80074de:	4630      	mov	r0, r6
 80074e0:	f7fd ff1e 	bl	8005320 <_printf_float>
 80074e4:	4607      	mov	r7, r0
 80074e6:	1c78      	adds	r0, r7, #1
 80074e8:	d1d6      	bne.n	8007498 <_vfiprintf_r+0x1bc>
 80074ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ec:	07d9      	lsls	r1, r3, #31
 80074ee:	d405      	bmi.n	80074fc <_vfiprintf_r+0x220>
 80074f0:	89ab      	ldrh	r3, [r5, #12]
 80074f2:	059a      	lsls	r2, r3, #22
 80074f4:	d402      	bmi.n	80074fc <_vfiprintf_r+0x220>
 80074f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074f8:	f7fd fd06 	bl	8004f08 <__retarget_lock_release_recursive>
 80074fc:	89ab      	ldrh	r3, [r5, #12]
 80074fe:	065b      	lsls	r3, r3, #25
 8007500:	f53f af12 	bmi.w	8007328 <_vfiprintf_r+0x4c>
 8007504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007506:	e711      	b.n	800732c <_vfiprintf_r+0x50>
 8007508:	ab03      	add	r3, sp, #12
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	462a      	mov	r2, r5
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <_vfiprintf_r+0x258>)
 8007510:	a904      	add	r1, sp, #16
 8007512:	4630      	mov	r0, r6
 8007514:	f7fe f9a8 	bl	8005868 <_printf_i>
 8007518:	e7e4      	b.n	80074e4 <_vfiprintf_r+0x208>
 800751a:	bf00      	nop
 800751c:	0800792c 	.word	0x0800792c
 8007520:	0800794c 	.word	0x0800794c
 8007524:	0800790c 	.word	0x0800790c
 8007528:	08007cd4 	.word	0x08007cd4
 800752c:	08007cde 	.word	0x08007cde
 8007530:	08005321 	.word	0x08005321
 8007534:	080072b7 	.word	0x080072b7
 8007538:	08007cda 	.word	0x08007cda

0800753c <_read_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d07      	ldr	r5, [pc, #28]	; (800755c <_read_r+0x20>)
 8007540:	4604      	mov	r4, r0
 8007542:	4608      	mov	r0, r1
 8007544:	4611      	mov	r1, r2
 8007546:	2200      	movs	r2, #0
 8007548:	602a      	str	r2, [r5, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	f7f9 ff45 	bl	80013da <_read>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_read_r+0x1e>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_read_r+0x1e>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	200002ac 	.word	0x200002ac

08007560 <__ascii_wctomb>:
 8007560:	b149      	cbz	r1, 8007576 <__ascii_wctomb+0x16>
 8007562:	2aff      	cmp	r2, #255	; 0xff
 8007564:	bf85      	ittet	hi
 8007566:	238a      	movhi	r3, #138	; 0x8a
 8007568:	6003      	strhi	r3, [r0, #0]
 800756a:	700a      	strbls	r2, [r1, #0]
 800756c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007570:	bf98      	it	ls
 8007572:	2001      	movls	r0, #1
 8007574:	4770      	bx	lr
 8007576:	4608      	mov	r0, r1
 8007578:	4770      	bx	lr

0800757a <abort>:
 800757a:	b508      	push	{r3, lr}
 800757c:	2006      	movs	r0, #6
 800757e:	f000 f82b 	bl	80075d8 <raise>
 8007582:	2001      	movs	r0, #1
 8007584:	f7f9 ff1f 	bl	80013c6 <_exit>

08007588 <_raise_r>:
 8007588:	291f      	cmp	r1, #31
 800758a:	b538      	push	{r3, r4, r5, lr}
 800758c:	4604      	mov	r4, r0
 800758e:	460d      	mov	r5, r1
 8007590:	d904      	bls.n	800759c <_raise_r+0x14>
 8007592:	2316      	movs	r3, #22
 8007594:	6003      	str	r3, [r0, #0]
 8007596:	f04f 30ff 	mov.w	r0, #4294967295
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800759e:	b112      	cbz	r2, 80075a6 <_raise_r+0x1e>
 80075a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075a4:	b94b      	cbnz	r3, 80075ba <_raise_r+0x32>
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 f830 	bl	800760c <_getpid_r>
 80075ac:	462a      	mov	r2, r5
 80075ae:	4601      	mov	r1, r0
 80075b0:	4620      	mov	r0, r4
 80075b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075b6:	f000 b817 	b.w	80075e8 <_kill_r>
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d00a      	beq.n	80075d4 <_raise_r+0x4c>
 80075be:	1c59      	adds	r1, r3, #1
 80075c0:	d103      	bne.n	80075ca <_raise_r+0x42>
 80075c2:	2316      	movs	r3, #22
 80075c4:	6003      	str	r3, [r0, #0]
 80075c6:	2001      	movs	r0, #1
 80075c8:	e7e7      	b.n	800759a <_raise_r+0x12>
 80075ca:	2400      	movs	r4, #0
 80075cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075d0:	4628      	mov	r0, r5
 80075d2:	4798      	blx	r3
 80075d4:	2000      	movs	r0, #0
 80075d6:	e7e0      	b.n	800759a <_raise_r+0x12>

080075d8 <raise>:
 80075d8:	4b02      	ldr	r3, [pc, #8]	; (80075e4 <raise+0xc>)
 80075da:	4601      	mov	r1, r0
 80075dc:	6818      	ldr	r0, [r3, #0]
 80075de:	f7ff bfd3 	b.w	8007588 <_raise_r>
 80075e2:	bf00      	nop
 80075e4:	20000018 	.word	0x20000018

080075e8 <_kill_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	; (8007608 <_kill_r+0x20>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	4611      	mov	r1, r2
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	f7f9 fed6 	bl	80013a6 <_kill>
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	d102      	bne.n	8007604 <_kill_r+0x1c>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	b103      	cbz	r3, 8007604 <_kill_r+0x1c>
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	bd38      	pop	{r3, r4, r5, pc}
 8007606:	bf00      	nop
 8007608:	200002ac 	.word	0x200002ac

0800760c <_getpid_r>:
 800760c:	f7f9 bec3 	b.w	8001396 <_getpid>

08007610 <_init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr

0800761c <_fini>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr
