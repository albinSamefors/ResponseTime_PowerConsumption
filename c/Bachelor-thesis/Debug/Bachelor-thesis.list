
Bachelor-thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00005b90  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000008  08005e54  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000bc  20000078  08005ec4  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000134  08005ec4  00020134  2**0
=======
  1 .text         00007e20  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  08007f60  08007f60  00017f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000008  0800868c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000010c  200001e4  08008868  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002f0  08008868  000202f0  2**0
>>>>>>> Stashed changes
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
  9 .debug_info   00011307  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000027a8  00000000  00000000  000313af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001538  00000000  00000000  00033b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001410  00000000  00000000  00035090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00022c55  00000000  00000000  000364a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012081  00000000  00000000  000590f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000dba83  00000000  00000000  0006b176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00146bf9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005fd8  00000000  00000000  00146c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
=======
  9 .debug_info   0001500f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a19  00000000  00000000  00035223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001980  00000000  00000000  00037c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001858  00000000  00000000  000395c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002394b  00000000  00000000  0003ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014ed0  00000000  00000000  0005e763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e6001  00000000  00000000  00073633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00159634  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007d34  00000000  00000000  00159684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stabstr      0000004e  00000000  00000000  001613b8  2**0
                  CONTENTS, READONLY, DEBUGGING
>>>>>>> Stashed changes

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000160:	08005cb8 	.word	0x08005cb8
=======
 8000160:	08007f48 	.word	0x08007f48
>>>>>>> Stashed changes

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08005cb8 	.word	0x08005cb8
=======
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08007f48 	.word	0x08007f48
>>>>>>> Stashed changes

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

<<<<<<< Updated upstream
08000220 <LL_AHB2_GRP1_EnableClock>:
=======
08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5c:	f3bf 8f4f 	dsb	sy
}
 8000b60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <__NVIC_SystemReset+0x24>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b6a:	4904      	ldr	r1, [pc, #16]	; (8000b7c <__NVIC_SystemReset+0x24>)
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_SystemReset+0x28>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b72:	f3bf 8f4f 	dsb	sy
}
 8000b76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <__NVIC_SystemReset+0x20>
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	05fa0004 	.word	0x05fa0004

08000b84 <LL_AHB2_GRP1_EnableClock>:
>>>>>>> Stashed changes
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< Updated upstream
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4313      	orrs	r3, r2
 8000236:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800023c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4013      	ands	r3, r2
 8000242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000244:	68fb      	ldr	r3, [r7, #12]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
	...

08000254 <main>:
=======
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <lightsleep_test>:
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_RESET);
}

void lightsleep_test(uint32_t interval_in_ms, uint32_t amount_of_loops)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
    uint32_t run_counter = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]

    while (run_counter < amount_of_loops)
 8000bc6:	e019      	b.n	8000bfc <lightsleep_test+0x44>
    {
        // Assuming you have initialized TIMER_PIN, change the pin name accordingly
        HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4810      	ldr	r0, [pc, #64]	; (8000c10 <lightsleep_test+0x58>)
 8000bce:	f001 f8df 	bl	8001d90 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <lightsleep_test+0x58>)
 8000bd8:	f001 f8da 	bl	8001d90 <HAL_GPIO_WritePin>

        // Delay using HAL_Delay which puts the CPU in sleep mode while waiting
        HAL_Delay(interval_in_ms);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fe1b 	bl	8001818 <HAL_Delay>


        HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2104      	movs	r1, #4
 8000be6:	480a      	ldr	r0, [pc, #40]	; (8000c10 <lightsleep_test+0x58>)
 8000be8:	f001 f8d2 	bl	8001d90 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2104      	movs	r1, #4
 8000bf0:	4807      	ldr	r0, [pc, #28]	; (8000c10 <lightsleep_test+0x58>)
 8000bf2:	f001 f8cd 	bl	8001d90 <HAL_GPIO_WritePin>

        run_counter++;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
    while (run_counter < amount_of_loops)
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d3e1      	bcc.n	8000bc8 <lightsleep_test+0x10>
    }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	48000800 	.word	0x48000800

08000c14 <send_settings_spi>:
        printf("DEATH\n");
    }
}


void send_settings_spi(float sleep_time, uint16_t run_amount, uint8_t run_type){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c1e:	4603      	mov	r3, r0
 8000c20:	460a      	mov	r2, r1
 8000c22:	807b      	strh	r3, [r7, #2]
 8000c24:	4613      	mov	r3, r2
 8000c26:	707b      	strb	r3, [r7, #1]
	uint16_t timeArr, amountArr, typeArr;
	uint8_t buffer[9]; // Declare a buffer to hold the data to be transmitted

	test = 1;
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <send_settings_spi+0xa8>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
	// Convert sleep_time to bytes and add to buffer
	timeArr = (uint16_t)(sleep_time * 1000);
 8000c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c32:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000cc0 <send_settings_spi+0xac>
 8000c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c3e:	ee17 3a90 	vmov	r3, s15
 8000c42:	82fb      	strh	r3, [r7, #22]
	buffer[0] = SLEEP_TIME_ADDR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	723b      	strb	r3, [r7, #8]
	buffer[1] = (uint8_t)(timeArr & 0b11111111);
 8000c48:	8afb      	ldrh	r3, [r7, #22]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	727b      	strb	r3, [r7, #9]
	buffer[2] = (uint8_t)((timeArr >> 8) & 0b11111111);
 8000c4e:	8afb      	ldrh	r3, [r7, #22]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	72bb      	strb	r3, [r7, #10]

	test = 2;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <send_settings_spi+0xa8>)
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	601a      	str	r2, [r3, #0]

	// Convert run_amount to bytes and add to buffer
	amountArr = (uint16_t)__builtin_bswap16(run_amount);
 8000c5e:	887b      	ldrh	r3, [r7, #2]
 8000c60:	ba5b      	rev16	r3, r3
 8000c62:	82bb      	strh	r3, [r7, #20]
	buffer[3] = RUN_AMOUNT_ADDR;
 8000c64:	2302      	movs	r3, #2
 8000c66:	72fb      	strb	r3, [r7, #11]
	buffer[4] = (uint8_t)(amountArr & 0b11111111);
 8000c68:	8abb      	ldrh	r3, [r7, #20]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	733b      	strb	r3, [r7, #12]
	buffer[5] = (uint8_t)((amountArr >> 8) & 0b11111111);
 8000c6e:	8abb      	ldrh	r3, [r7, #20]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	737b      	strb	r3, [r7, #13]

	test = 3;
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <send_settings_spi+0xa8>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	601a      	str	r2, [r3, #0]

	// Add run_type to buffer
	typeArr = (uint16_t)run_type;
 8000c7e:	787b      	ldrb	r3, [r7, #1]
 8000c80:	827b      	strh	r3, [r7, #18]
	buffer[6] = TEST_MODE_ADDR;
 8000c82:	2303      	movs	r3, #3
 8000c84:	73bb      	strb	r3, [r7, #14]
	buffer[7] = (uint8_t)(typeArr & 0b11111111);
 8000c86:	8a7b      	ldrh	r3, [r7, #18]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	73fb      	strb	r3, [r7, #15]
	buffer[8] = (uint8_t)((typeArr >> 8) & 0b11111111);
 8000c8c:	8a7b      	ldrh	r3, [r7, #18]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	743b      	strb	r3, [r7, #16]

	test = 4;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <send_settings_spi+0xa8>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]

	// Transmit the buffer over SPI using the hspi1 handle and wait for transmission to complete
	HAL_SPI_Transmit(&hspi1, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000c9c:	f107 0108 	add.w	r1, r7, #8
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca4:	2209      	movs	r2, #9
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <send_settings_spi+0xb0>)
 8000ca8:	f003 fa83 	bl	80041b2 <HAL_SPI_Transmit>

	test = 5;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <send_settings_spi+0xa8>)
 8000cae:	2205      	movs	r2, #5
 8000cb0:	601a      	str	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200002d4 	.word	0x200002d4
 8000cc0:	447a0000 	.word	0x447a0000
 8000cc4:	20000224 	.word	0x20000224

08000cc8 <receive_data_SPI>:

uint16_t* receive_data_SPI(uint16_t run_amount){
 8000cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ccc:	b089      	sub	sp, #36	; 0x24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	80fb      	strh	r3, [r7, #6]
 8000cd4:	466b      	mov	r3, sp
 8000cd6:	461e      	mov	r6, r3
	uint8_t bytesread[run_amount * 2];
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	0059      	lsls	r1, r3, #1
 8000cdc:	1e4b      	subs	r3, r1, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	4690      	mov	r8, r2
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4614      	mov	r4, r2
 8000d02:	461d      	mov	r5, r3
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	00eb      	lsls	r3, r5, #3
 8000d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d12:	00e2      	lsls	r2, r4, #3
 8000d14:	460b      	mov	r3, r1
 8000d16:	3307      	adds	r3, #7
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d20:	466b      	mov	r3, sp
 8000d22:	3300      	adds	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
	uint16_t *received_data = malloc(run_amount * sizeof(uint16_t));
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 fd8a 	bl	8005844 <malloc>
 8000d30:	4603      	mov	r3, r0
 8000d32:	60fb      	str	r3, [r7, #12]
	if (received_data == NULL){
		// Handle error
	}

	// Wait for the RECEIVE_READY_Pin to go high before proceeding
	while (HAL_GPIO_ReadPin(RECEIVE_READY_GPIO_Port, RECEIVE_READY_Pin) == GPIO_PIN_RESET)
 8000d34:	bf00      	nop
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	4822      	ldr	r0, [pc, #136]	; (8000dc4 <receive_data_SPI+0xfc>)
 8000d3a:	f001 f811 	bl	8001d60 <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f8      	beq.n	8000d36 <receive_data_SPI+0x6e>
	{
		// add timeout or yield to other tasks here if necessary
	}

	for (int i = 0; i < run_amount * 2; i += 2){
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	e00b      	b.n	8000d62 <receive_data_SPI+0x9a>
		HAL_SPI_Receive(&hspi1, &bytesread[i], 2, HAL_MAX_DELAY); // Receive two bytes of data over SPI
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	18d1      	adds	r1, r2, r3
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d54:	2202      	movs	r2, #2
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <receive_data_SPI+0x100>)
 8000d58:	f003 fb99 	bl	800448e <HAL_SPI_Receive>
	for (int i = 0; i < run_amount * 2; i += 2){
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	3302      	adds	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbee      	blt.n	8000d4a <receive_data_SPI+0x82>
	}

	// Process the received data and store it in received_data
	for (int i = 0; i < run_amount; i++){
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	e017      	b.n	8000da2 <receive_data_SPI+0xda>
		uint16_t data = bytesread[i * 2 + 1] << 8 | bytesread[i * 2];
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	3301      	adds	r3, #1
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	6939      	ldr	r1, [r7, #16]
 8000d86:	5ccb      	ldrb	r3, [r1, r3]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	817b      	strh	r3, [r7, #10]
		received_data[i] = data;
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	897a      	ldrh	r2, [r7, #10]
 8000d9a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < run_amount; i++){
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dbe3      	blt.n	8000d72 <receive_data_SPI+0xaa>
	}

	printf("%d\n", run_amount); // Print the number of SPI transfers made
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <receive_data_SPI+0x104>)
 8000db0:	f005 fc12 	bl	80065d8 <iprintf>
	return received_data;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	46b5      	mov	sp, r6
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3724      	adds	r7, #36	; 0x24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dc2:	bf00      	nop
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	20000224 	.word	0x20000224
 8000dcc:	08008194 	.word	0x08008194

08000dd0 <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
=======
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 800025a:	f000 fc55 	bl	8000b08 <HAL_Init>
=======
 8000dd6:	f000 fc99 	bl	800170c <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 800025e:	f000 f847 	bl	80002f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000262:	f000 f89d 	bl	80003a0 <PeriphCommonClock_Config>
=======
 8000dda:	f000 f835 	bl	8000e48 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000dde:	f000 f88b 	bl	8000ef8 <PeriphCommonClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 8000266:	f000 f96f 	bl	8000548 <MX_GPIO_Init>
  MX_I2C1_Init();
 800026a:	f000 f8b7 	bl	80003dc <MX_I2C1_Init>
  MX_RTC_Init();
 800026e:	f000 f8fb 	bl	8000468 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	2101      	movs	r1, #1
 8000276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027a:	f000 ffdb 	bl	8001234 <HAL_GPIO_WritePin>
  // Set up the STM32WB55RG to enter sleep mode
  // Enter Stop mode
  // Enable the low-power regulator
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800027e:	2101      	movs	r1, #1
 8000280:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000284:	f002 fba4 	bl	80029d0 <HAL_PWR_EnterSTOPMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_I2C_Slave_Receive_IT(&hi2c1, &data, 1) == HAL_OK)
 8000288:	2201      	movs	r2, #1
 800028a:	4912      	ldr	r1, [pc, #72]	; (80002d4 <main+0x80>)
 800028c:	4812      	ldr	r0, [pc, #72]	; (80002d8 <main+0x84>)
 800028e:	f001 f879 	bl	8001384 <HAL_I2C_Slave_Receive_IT>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d1f7      	bne.n	8000288 <main+0x34>
	  {
		  end_time = HAL_GetTick();
 8000298:	f000 fca4 	bl	8000be4 <HAL_GetTick>
 800029c:	4603      	mov	r3, r0
 800029e:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <main+0x88>)
 80002a0:	6013      	str	r3, [r2, #0]
		  blink_led();
 80002a2:	f000 f9bb 	bl	800061c <blink_led>
		  wakeup_count++;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <main+0x8c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	3301      	adds	r3, #1
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <main+0x8c>)
 80002ae:	6013      	str	r3, [r2, #0]
		  uint32_t response_time = end_time - start_time;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <main+0x88>)
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <main+0x90>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	1ad3      	subs	r3, r2, r3
 80002ba:	607b      	str	r3, [r7, #4]
		  printf("Response time: %lu ms/r/n", response_time);
 80002bc:	6879      	ldr	r1, [r7, #4]
 80002be:	480a      	ldr	r0, [pc, #40]	; (80002e8 <main+0x94>)
 80002c0:	f004 fd6c 	bl	8004d9c <iprintf>
		  printf("Wake up counter: %lu /r/n", wakeup_count);
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <main+0x8c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4619      	mov	r1, r3
 80002ca:	4808      	ldr	r0, [pc, #32]	; (80002ec <main+0x98>)
 80002cc:	f004 fd66 	bl	8004d9c <iprintf>
	  if (HAL_I2C_Slave_Receive_IT(&hi2c1, &data, 1) == HAL_OK)
 80002d0:	e7da      	b.n	8000288 <main+0x34>
 80002d2:	bf00      	nop
 80002d4:	20000118 	.word	0x20000118
 80002d8:	20000094 	.word	0x20000094
 80002dc:	20000114 	.word	0x20000114
 80002e0:	2000010c 	.word	0x2000010c
 80002e4:	20000110 	.word	0x20000110
 80002e8:	08005cd0 	.word	0x08005cd0
 80002ec:	08005cec 	.word	0x08005cec

080002f0 <SystemClock_Config>:
=======
 8000de2:	f000 f9a3 	bl	800112c <MX_GPIO_Init>
  MX_RTC_Init();
 8000de6:	f000 f8a5 	bl	8000f34 <MX_RTC_Init>
  MX_SPI1_Init();
 8000dea:	f000 f913 	bl	8001014 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000dee:	f000 f94f 	bl	8001090 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  printf("SENDING SETTINGS\n");
 8000df2:	4810      	ldr	r0, [pc, #64]	; (8000e34 <main+0x64>)
 8000df4:	f005 fc76 	bl	80066e4 <puts>
  send_settings_spi(1000, 10, 0);
 8000df8:	2100      	movs	r1, #0
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000e38 <main+0x68>
 8000e00:	f7ff ff08 	bl	8000c14 <send_settings_spi>
  printf("SETTINGS SENT, STARTING TESTS\n");
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <main+0x6c>)
 8000e06:	f005 fc6d 	bl	80066e4 <puts>
  lightsleep_test(1000, 10);
 8000e0a:	210a      	movs	r1, #10
 8000e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e10:	f7ff fed2 	bl	8000bb8 <lightsleep_test>
  printf("TESTS FINISHED, FETCHING DATA\n");
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <main+0x70>)
 8000e16:	f005 fc65 	bl	80066e4 <puts>

  uint16_t *data = receive_data_SPI(10);
 8000e1a:	200a      	movs	r0, #10
 8000e1c:	f7ff ff54 	bl	8000cc8 <receive_data_SPI>
 8000e20:	6078      	str	r0, [r7, #4]
  printf("DATA FETCHED!\n");
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <main+0x74>)
 8000e24:	f005 fc5e 	bl	80066e4 <puts>

  // Free the allocated memory for received_data
  free(data);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f004 fd13 	bl	8005854 <free>

  // Reset the MCU to simulate sys.exit() behavior
  NVIC_SystemReset();
 8000e2e:	f7ff fe93 	bl	8000b58 <__NVIC_SystemReset>
 8000e32:	bf00      	nop
 8000e34:	08008198 	.word	0x08008198
 8000e38:	447a0000 	.word	0x447a0000
 8000e3c:	080081ac 	.word	0x080081ac
 8000e40:	080081cc 	.word	0x080081cc
 8000e44:	080081ec 	.word	0x080081ec

08000e48 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b09a      	sub	sp, #104	; 0x68
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0320 	add.w	r3, r7, #32
 80002fa:	2248      	movs	r2, #72	; 0x48
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f004 fd44 	bl	8004d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]
 8000312:	615a      	str	r2, [r3, #20]
 8000314:	619a      	str	r2, [r3, #24]
=======
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09a      	sub	sp, #104	; 0x68
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2248      	movs	r2, #72	; 0x48
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 fd12 	bl	8005880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
<<<<<<< Updated upstream
 8000316:	4b21      	ldr	r3, [pc, #132]	; (800039c <SystemClock_Config+0xac>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800031e:	4a1f      	ldr	r2, [pc, #124]	; (800039c <SystemClock_Config+0xac>)
 8000320:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000324:	6013      	str	r3, [r2, #0]
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemClock_Config+0xac>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]
=======
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <SystemClock_Config+0xac>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e76:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <SystemClock_Config+0xac>)
 8000e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <SystemClock_Config+0xac>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
<<<<<<< Updated upstream
 8000332:	230b      	movs	r3, #11
 8000334:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000342:	2340      	movs	r3, #64	; 0x40
 8000344:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000346:	2305      	movs	r3, #5
 8000348:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800034a:	2300      	movs	r3, #0
 800034c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0320 	add.w	r3, r7, #32
 8000352:	4618      	mov	r0, r3
 8000354:	f002 ff16 	bl	8003184 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800035e:	f000 f975 	bl	800064c <Error_Handler>
=======
 8000e8a:	230b      	movs	r3, #11
 8000e8c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9a:	2340      	movs	r3, #64	; 0x40
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fb04 	bl	80024b8 <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000eb6:	f000 f9a9 	bl	800120c <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
<<<<<<< Updated upstream
 8000362:	236f      	movs	r3, #111	; 0x6f
 8000364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000366:	2302      	movs	r3, #2
 8000368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2101      	movs	r1, #1
 8000382:	4618      	mov	r0, r3
 8000384:	f003 fa72 	bl	800386c <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800038e:	f000 f95d 	bl	800064c <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3768      	adds	r7, #104	; 0x68
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	58000400 	.word	0x58000400

080003a0 <PeriphCommonClock_Config>:
=======
 8000eba:	236f      	movs	r3, #111	; 0x6f
 8000ebc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fe60 	bl	8002ba0 <HAL_RCC_ClockConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ee6:	f000 f991 	bl	800120c <Error_Handler>
  }
}
 8000eea:	bf00      	nop
 8000eec:	3768      	adds	r7, #104	; 0x68
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	58000400 	.word	0x58000400

08000ef8 <PeriphCommonClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
<<<<<<< Updated upstream
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b094      	sub	sp, #80	; 0x50
 80003a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003a6:	463b      	mov	r3, r7
 80003a8:	2250      	movs	r2, #80	; 0x50
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f004 fced 	bl	8004d8c <memset>
=======
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b094      	sub	sp, #80	; 0x50
 8000efc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2250      	movs	r2, #80	; 0x50
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f004 fcbb 	bl	8005880 <memset>
>>>>>>> Stashed changes

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
<<<<<<< Updated upstream
 80003b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003b8:	2300      	movs	r3, #0
 80003ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80003bc:	2300      	movs	r3, #0
 80003be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	4618      	mov	r0, r3
 80003c4:	f003 fe63 	bl	800408e <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80003ce:	f000 f93d 	bl	800064c <Error_Handler>
=======
 8000f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f10:	2300      	movs	r3, #0
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fa51 	bl	80033c2 <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000f26:	f000 f971 	bl	800120c <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
<<<<<<< Updated upstream
 80003d2:	bf00      	nop
 80003d4:	3750      	adds	r7, #80	; 0x50
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_I2C1_Init+0x7c>)
 80003e2:	4a1e      	ldr	r2, [pc, #120]	; (800045c <MX_I2C1_Init+0x80>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_I2C1_Init+0x7c>)
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <MX_I2C1_Init+0x84>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_I2C1_Init+0x7c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_I2C1_Init+0x7c>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_I2C1_Init+0x7c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003fe:	4b16      	ldr	r3, [pc, #88]	; (8000458 <MX_I2C1_Init+0x7c>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_I2C1_Init+0x7c>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040a:	4b13      	ldr	r3, [pc, #76]	; (8000458 <MX_I2C1_Init+0x7c>)
 800040c:	2200      	movs	r2, #0
 800040e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_I2C1_Init+0x7c>)
 8000412:	2200      	movs	r2, #0
 8000414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000416:	4810      	ldr	r0, [pc, #64]	; (8000458 <MX_I2C1_Init+0x7c>)
 8000418:	f000 ff24 	bl	8001264 <HAL_I2C_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000422:	f000 f913 	bl	800064c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000426:	2100      	movs	r1, #0
 8000428:	480b      	ldr	r0, [pc, #44]	; (8000458 <MX_I2C1_Init+0x7c>)
 800042a:	f002 fa29 	bl	8002880 <HAL_I2CEx_ConfigAnalogFilter>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000434:	f000 f90a 	bl	800064c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000438:	2100      	movs	r1, #0
 800043a:	4807      	ldr	r0, [pc, #28]	; (8000458 <MX_I2C1_Init+0x7c>)
 800043c:	f002 fa6b 	bl	8002916 <HAL_I2CEx_ConfigDigitalFilter>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000446:	f000 f901 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  HAL_I2C_Slave_Receive_IT(&hi2c1, &data, 1); // Start listening for data from Arduino
 800044a:	2201      	movs	r2, #1
 800044c:	4905      	ldr	r1, [pc, #20]	; (8000464 <MX_I2C1_Init+0x88>)
 800044e:	4802      	ldr	r0, [pc, #8]	; (8000458 <MX_I2C1_Init+0x7c>)
 8000450:	f000 ff98 	bl	8001384 <HAL_I2C_Slave_Receive_IT>

  /* USER CODE END I2C1_Init 2 */

}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000094 	.word	0x20000094
 800045c:	40005400 	.word	0x40005400
 8000460:	00707cbb 	.word	0x00707cbb
 8000464:	20000118 	.word	0x20000118

08000468 <MX_RTC_Init>:
=======
 8000f2a:	bf00      	nop
 8000f2c:	3750      	adds	r7, #80	; 0x50
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <MX_RTC_Init>:
>>>>>>> Stashed changes
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
<<<<<<< Updated upstream
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
=======
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
<<<<<<< Updated upstream
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800047c:	2300      	movs	r3, #0
 800047e:	603b      	str	r3, [r7, #0]
=======
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f48:	2300      	movs	r3, #0
 8000f4a:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
<<<<<<< Updated upstream
 8000480:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <MX_RTC_Init+0xd8>)
 8000482:	4a30      	ldr	r2, [pc, #192]	; (8000544 <MX_RTC_Init+0xdc>)
 8000484:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000486:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <MX_RTC_Init+0xd8>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <MX_RTC_Init+0xd8>)
 800048e:	227f      	movs	r2, #127	; 0x7f
 8000490:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000492:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <MX_RTC_Init+0xd8>)
 8000494:	22ff      	movs	r2, #255	; 0xff
 8000496:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <MX_RTC_Init+0xd8>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800049e:	4b28      	ldr	r3, [pc, #160]	; (8000540 <MX_RTC_Init+0xd8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80004a4:	4b26      	ldr	r3, [pc, #152]	; (8000540 <MX_RTC_Init+0xd8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80004aa:	4b25      	ldr	r3, [pc, #148]	; (8000540 <MX_RTC_Init+0xd8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004b0:	4823      	ldr	r0, [pc, #140]	; (8000540 <MX_RTC_Init+0xd8>)
 80004b2:	f004 f873 	bl	800459c <HAL_RTC_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80004bc:	f000 f8c6 	bl	800064c <Error_Handler>
=======
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	; (800100c <MX_RTC_Init+0xd8>)
 8000f4e:	4a30      	ldr	r2, [pc, #192]	; (8001010 <MX_RTC_Init+0xdc>)
 8000f50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <MX_RTC_Init+0xd8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f58:	4b2c      	ldr	r3, [pc, #176]	; (800100c <MX_RTC_Init+0xd8>)
 8000f5a:	227f      	movs	r2, #127	; 0x7f
 8000f5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_RTC_Init+0xd8>)
 8000f60:	22ff      	movs	r2, #255	; 0xff
 8000f62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <MX_RTC_Init+0xd8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_RTC_Init+0xd8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_RTC_Init+0xd8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <MX_RTC_Init+0xd8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f7c:	4823      	ldr	r0, [pc, #140]	; (800100c <MX_RTC_Init+0xd8>)
 8000f7e:	f002 fca7 	bl	80038d0 <HAL_RTC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000f88:	f000 f940 	bl	800120c <Error_Handler>
>>>>>>> Stashed changes

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
<<<<<<< Updated upstream
 80004c0:	2312      	movs	r3, #18
 80004c2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	4818      	ldr	r0, [pc, #96]	; (8000540 <MX_RTC_Init+0xd8>)
 80004e0:	f004 f90c 	bl	80046fc <HAL_RTC_SetTime>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80004ea:	f000 f8af 	bl	800064c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80004ee:	2304      	movs	r3, #4
 80004f0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 80004f6:	2316      	movs	r3, #22
 80004f8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80004fa:	2323      	movs	r3, #35	; 0x23
 80004fc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80004fe:	463b      	mov	r3, r7
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	480e      	ldr	r0, [pc, #56]	; (8000540 <MX_RTC_Init+0xd8>)
 8000506:	f004 f9bd 	bl	8004884 <HAL_RTC_SetDate>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8000510:	f000 f89c 	bl	800064c <Error_Handler>
=======
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <MX_RTC_Init+0xd8>)
 8000fac:	f002 fd40 	bl	8003a30 <HAL_RTC_SetTime>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000fb6:	f000 f929 	bl	800120c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000fc2:	2316      	movs	r3, #22
 8000fc4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000fc6:	2323      	movs	r3, #35	; 0x23
 8000fc8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480e      	ldr	r0, [pc, #56]	; (800100c <MX_RTC_Init+0xd8>)
 8000fd2:	f002 fdf1 	bl	8003bb8 <HAL_RTC_SetDate>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8000fdc:	f000 f916 	bl	800120c <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
<<<<<<< Updated upstream
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <MX_RTC_Init+0xd8>)
 800051a:	f004 fad1 	bl	8004ac0 <HAL_RTCEx_SetWakeUpTimer_IT>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8000524:	f000 f892 	bl	800064c <Error_Handler>
=======
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_RTC_Init+0xd8>)
 8000fe6:	f002 ff05 	bl	8003df4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8000ff0:	f000 f90c 	bl	800120c <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
<<<<<<< Updated upstream
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_RTC_Init+0xd8>)
 800052a:	f004 fbb5 	bl	8004c98 <HAL_RTCEx_SetRefClock>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000534:	f000 f88a 	bl	800064c <Error_Handler>
=======
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_RTC_Init+0xd8>)
 8000ff6:	f002 ffe9 	bl	8003fcc <HAL_RTCEx_SetRefClock>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8001000:	f000 f904 	bl	800120c <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
<<<<<<< Updated upstream
 8000538:	bf00      	nop
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000e8 	.word	0x200000e8
 8000544:	40002800 	.word	0x40002800

08000548 <MX_GPIO_Init>:
=======
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000200 	.word	0x20000200
 8001010:	40002800 	.word	0x40002800

08001014 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_SPI1_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_SPI1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_SPI1_Init+0x74>)
 8001020:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001024:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_SPI1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_SPI1_Init+0x74>)
 800102e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001032:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_SPI1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_SPI1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_SPI1_Init+0x74>)
 8001042:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001046:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_SPI1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_SPI1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_SPI1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_SPI1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_SPI1_Init+0x74>)
 8001062:	2207      	movs	r2, #7
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_SPI1_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_SPI1_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_SPI1_Init+0x74>)
 8001074:	f002 fffa 	bl	800406c <HAL_SPI_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800107e:	f000 f8c5 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000224 	.word	0x20000224
 800108c:	40013000 	.word	0x40013000

08001090 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_TIM2_Init+0x98>)
 80010b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_TIM2_Init+0x98>)
 80010b8:	221f      	movs	r2, #31
 80010ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_TIM2_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_TIM2_Init+0x98>)
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_TIM2_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_TIM2_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_TIM2_Init+0x98>)
 80010d8:	f003 fed8 	bl	8004e8c <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010e2:	f000 f893 	bl	800120c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_TIM2_Init+0x98>)
 80010f4:	f003 ff21 	bl	8004f3a <HAL_TIM_ConfigClockSource>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010fe:	f000 f885 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_TIM2_Init+0x98>)
 8001110:	f004 f8dc 	bl	80052cc <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800111a:	f000 f877 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000288 	.word	0x20000288

0800112c <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
=======
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 800055c:	2004      	movs	r0, #4
 800055e:	f7ff fe5f 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	2002      	movs	r0, #2
 8000564:	f7ff fe5c 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	2001      	movs	r0, #1
 800056a:	f7ff fe59 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2008      	movs	r0, #8
 8000570:	f7ff fe56 	bl	8000220 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2123      	movs	r1, #35	; 0x23
 8000578:	481d      	ldr	r0, [pc, #116]	; (80005f0 <MX_GPIO_Init+0xa8>)
 800057a:	f000 fe5b 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800057e:	2310      	movs	r3, #16
 8000580:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4619      	mov	r1, r3
 800058e:	4819      	ldr	r0, [pc, #100]	; (80005f4 <MX_GPIO_Init+0xac>)
 8000590:	f000 fce0 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000594:	2323      	movs	r3, #35	; 0x23
 8000596:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <MX_GPIO_Init+0xa8>)
 80005aa:	f000 fcd3 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80005c0:	230a      	movs	r3, #10
 80005c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fcc2 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 B3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 80005d0:	2303      	movs	r3, #3
 80005d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_GPIO_Init+0xb0>)
 80005e2:	f000 fcb7 	bl	8000f54 <HAL_GPIO_Init>
=======
 8001140:	2004      	movs	r0, #4
 8001142:	f7ff fd1f 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff fd1c 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	2002      	movs	r0, #2
 800114e:	f7ff fd19 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2008      	movs	r0, #8
 8001154:	f7ff fd16 	bl	8000b84 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIMER_PIN_Pin|RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2105      	movs	r1, #5
 800115c:	4828      	ldr	r0, [pc, #160]	; (8001200 <MX_GPIO_Init+0xd4>)
 800115e:	f000 fe17 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2123      	movs	r1, #35	; 0x23
 8001166:	4827      	ldr	r0, [pc, #156]	; (8001204 <MX_GPIO_Init+0xd8>)
 8001168:	f000 fe12 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TIMER_PIN_Pin RESPONSE_PIN_Pin */
  GPIO_InitStruct.Pin = TIMER_PIN_Pin|RESPONSE_PIN_Pin;
 800116c:	2305      	movs	r3, #5
 800116e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001174:	2302      	movs	r3, #2
 8001176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	481f      	ldr	r0, [pc, #124]	; (8001200 <MX_GPIO_Init+0xd4>)
 8001182:	f000 fc7d 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_PIN_Pin;
 8001186:	2302      	movs	r3, #2
 8001188:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118e:	2302      	movs	r3, #2
 8001190:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IRQ_PIN_GPIO_Port, &GPIO_InitStruct);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	481a      	ldr	r0, [pc, #104]	; (8001200 <MX_GPIO_Init+0xd4>)
 8001198:	f000 fc72 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800119c:	2310      	movs	r3, #16
 800119e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4814      	ldr	r0, [pc, #80]	; (8001200 <MX_GPIO_Init+0xd4>)
 80011ae:	f000 fc67 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80011b2:	2323      	movs	r3, #35	; 0x23
 80011b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <MX_GPIO_Init+0xd8>)
 80011c8:	f000 fc5a 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 B3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 80011cc:	2303      	movs	r3, #3
 80011ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <MX_GPIO_Init+0xdc>)
 80011de:	f000 fc4f 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECEIVE_READY_Pin */
  GPIO_InitStruct.Pin = RECEIVE_READY_Pin;
 80011e2:	2340      	movs	r3, #64	; 0x40
 80011e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(RECEIVE_READY_GPIO_Port, &GPIO_InitStruct);
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_GPIO_Init+0xd8>)
 80011f4:	f000 fc44 	bl	8001a80 <HAL_GPIO_Init>
>>>>>>> Stashed changes

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000400 	.word	0x48000400
 80005f4:	48000800 	.word	0x48000800
 80005f8:	48000c00 	.word	0x48000c00

080005fc <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called when an interrupt is received from the Arduino
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	// Record current time with HAL_GetTick()
	start_time = HAL_GetTick();
 8000604:	f000 faee 	bl	8000be4 <HAL_GetTick>
 8000608:	4603      	mov	r3, r0
 800060a:	4a03      	ldr	r2, [pc, #12]	; (8000618 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 800060c:	6013      	str	r3, [r2, #0]
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000110 	.word	0x20000110

0800061c <blink_led>:

void blink_led()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2101      	movs	r1, #1
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f000 fe04 	bl	8001234 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000630:	f000 faf0 	bl	8000c14 <HAL_Delay>
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2101      	movs	r1, #1
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fdfa 	bl	8001234 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000644:	f000 fae6 	bl	8000c14 <HAL_Delay>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <Error_Handler>:
=======
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	48000800 	.word	0x48000800
 8001204:	48000400 	.word	0x48000400
 8001208:	48000c00 	.word	0x48000c00

0800120c <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
=======
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>

08000656 <LL_RCC_EnableRTC>:
=======
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>

08001216 <LL_RCC_EnableRTC>:
>>>>>>> Stashed changes
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
<<<<<<< Updated upstream
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800065a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800065e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <LL_AHB2_GRP1_EnableClock>:
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4313      	orrs	r3, r2
 800068e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4013      	ands	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800069c:	68fb      	ldr	r3, [r7, #12]
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <LL_APB1_GRP1_EnableClock>:
=======
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800121a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_AHB2_GRP1_EnableClock>:
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4313      	orrs	r3, r2
 800124e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800125c:	68fb      	ldr	r3, [r7, #12]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_APB1_GRP1_EnableClock>:
>>>>>>> Stashed changes
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< Updated upstream
 80006aa:	b480      	push	{r7}
 80006ac:	b085      	sub	sp, #20
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4313      	orrs	r3, r2
 80006c0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <HAL_MspInit>:
=======
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001276:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4313      	orrs	r3, r2
 8001280:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001286:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c0:	68fb      	ldr	r3, [r7, #12]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
=======
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09c      	sub	sp, #112	; 0x70
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2250      	movs	r2, #80	; 0x50
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f004 fb3d 	bl	8004d8c <memset>
  if(hi2c->Instance==I2C1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <HAL_I2C_MspInit+0x94>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d12d      	bne.n	8000778 <HAL_I2C_MspInit+0x8c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800071c:	2304      	movs	r3, #4
 800071e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000720:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fcaf 	bl	800408e <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000736:	f7ff ff89 	bl	800064c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2002      	movs	r0, #2
 800073c:	f7ff ff9c 	bl	8000678 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000740:	23c0      	movs	r3, #192	; 0xc0
 8000742:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000744:	2312      	movs	r3, #18
 8000746:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000748:	2301      	movs	r3, #1
 800074a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000750:	2304      	movs	r3, #4
 8000752:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000758:	4619      	mov	r1, r3
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <HAL_I2C_MspInit+0x98>)
 800075c:	f000 fbfa 	bl	8000f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000760:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000764:	f7ff ffa1 	bl	80006aa <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	201e      	movs	r0, #30
 800076e:	f000 fb50 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000772:	201e      	movs	r0, #30
 8000774:	f000 fb67 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000778:	bf00      	nop
 800077a:	3770      	adds	r7, #112	; 0x70
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40005400 	.word	0x40005400
 8000784:	48000400 	.word	0x48000400

08000788 <HAL_RTC_MspInit>:
=======
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_RTC_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
<<<<<<< Updated upstream
 8000788:	b580      	push	{r7, lr}
 800078a:	b09c      	sub	sp, #112	; 0x70
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2250      	movs	r2, #80	; 0x50
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f004 faef 	bl	8004d8c <memset>
  if(hrtc->Instance==RTC)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <HAL_RTC_MspInit+0x9c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d131      	bne.n	800081c <HAL_RTC_MspInit+0x94>
=======
 80012dc:	b580      	push	{r7, lr}
 80012de:	b09c      	sub	sp, #112	; 0x70
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2250      	movs	r2, #80	; 0x50
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f004 fabf 	bl	8005880 <memset>
  if(hrtc->Instance==RTC)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_RTC_MspInit+0x9c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d131      	bne.n	8001370 <HAL_RTC_MspInit+0x94>
>>>>>>> Stashed changes

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
<<<<<<< Updated upstream
 80007b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 fc60 	bl	800408e <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 80007d4:	f7ff ff3a 	bl	800064c <Error_Handler>
=======
 800130c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001310:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4618      	mov	r0, r3
 800131e:	f002 f850 	bl	80033c2 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8001328:	f7ff ff70 	bl	800120c <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
<<<<<<< Updated upstream
 80007d8:	f7ff ff3d 	bl	8000656 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007e0:	f7ff ff63 	bl	80006aa <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	2002      	movs	r0, #2
 80007e6:	f7ff ff47 	bl	8000678 <LL_AHB2_GRP1_EnableClock>
=======
 800132c:	f7ff ff73 	bl	8001216 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001330:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001334:	f7ff ff99 	bl	800126a <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff ff7d 	bl	8001238 <LL_AHB2_GRP1_EnableClock>
>>>>>>> Stashed changes
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
<<<<<<< Updated upstream
 80007ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_OUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000804:	4619      	mov	r1, r3
 8000806:	4808      	ldr	r0, [pc, #32]	; (8000828 <HAL_RTC_MspInit+0xa0>)
 8000808:	f000 fba4 	bl	8000f54 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	2003      	movs	r0, #3
 8000812:	f000 fafe 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000816:	2003      	movs	r0, #3
 8000818:	f000 fb15 	bl	8000e46 <HAL_NVIC_EnableIRQ>
=======
 800133e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001342:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_OUT;
 8001350:	2300      	movs	r3, #0
 8001352:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001358:	4619      	mov	r1, r3
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <HAL_RTC_MspInit+0xa0>)
 800135c:	f000 fb90 	bl	8001a80 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2003      	movs	r0, #3
 8001366:	f000 fb56 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800136a:	2003      	movs	r0, #3
 800136c:	f000 fb6d 	bl	8001a4a <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 800081c:	bf00      	nop
 800081e:	3770      	adds	r7, #112	; 0x70
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40002800 	.word	0x40002800
 8000828:	48000400 	.word	0x48000400

0800082c <NMI_Handler>:
=======
 8001370:	bf00      	nop
 8001372:	3770      	adds	r7, #112	; 0x70
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40002800 	.word	0x40002800
 800137c:	48000400 	.word	0x48000400

08001380 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <HAL_SPI_MspInit+0x5c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d117      	bne.n	80013d2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013a6:	f7ff ff79 	bl	800129c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff ff44 	bl	8001238 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013b0:	23f0      	movs	r3, #240	; 0xf0
 80013b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c0:	2305      	movs	r3, #5
 80013c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f000 fb57 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40013000 	.word	0x40013000

080013e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f0:	d102      	bne.n	80013f8 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff ff39 	bl	800126a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
=======
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:
=======
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
=======
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:
=======
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
=======
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:
=======
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
=======
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:
=======
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
=======
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <SVC_Handler>:
=======
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
=======
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <DebugMon_Handler>:
=======
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
=======
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:
=======
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
=======
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <SysTick_Handler>:
=======
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
=======
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8000878:	f000 f9a0 	bl	8000bbc <HAL_IncTick>
=======
 800144c:	f000 f9b8 	bl	80017c0 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <RTC_WKUP_IRQHandler>:
=======
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <RTC_WKUP_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
=======
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
<<<<<<< Updated upstream
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <RTC_WKUP_IRQHandler+0x10>)
 8000886:	f004 f9d7 	bl	8004c38 <HAL_RTCEx_WakeUpTimerIRQHandler>
=======
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <RTC_WKUP_IRQHandler+0x10>)
 800145a:	f002 fd87 	bl	8003f6c <HAL_RTCEx_WakeUpTimerIRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
<<<<<<< Updated upstream
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000e8 	.word	0x200000e8

08000894 <I2C1_EV_IRQHandler>:
=======
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000200 	.word	0x20000200

08001468 <_getpid>:
void initialise_monitor_handles()
{
}
>>>>>>> Stashed changes

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <I2C1_EV_IRQHandler+0x10>)
 800089a:	f000 fdc3 	bl	8001424 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000094 	.word	0x20000094

080008a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
=======
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return 1;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_kill>:

int _kill(int pid, int sig)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001482:	f003 ff83 	bl	800538c <__errno>
 8001486:	4603      	mov	r3, r0
 8001488:	2216      	movs	r2, #22
 800148a:	601a      	str	r2, [r3, #0]
  return -1;
 800148c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <_exit>:

void _exit (int status)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ffe7 	bl	8001478 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014aa:	e7fe      	b.n	80014aa <_exit+0x12>

080014ac <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
=======
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e00a      	b.n	80008d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ba:	f3af 8000 	nop.w
 80008be:	4601      	mov	r1, r0
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	60ba      	str	r2, [r7, #8]
 80008c6:	b2ca      	uxtb	r2, r1
 80008c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbf0      	blt.n	80008ba <_read+0x12>
  }

  return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
=======
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e00a      	b.n	80014d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014be:	f3af 8000 	nop.w
 80014c2:	4601      	mov	r1, r0
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60ba      	str	r2, [r7, #8]
 80014ca:	b2ca      	uxtb	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbf0      	blt.n	80014be <_read+0x12>
  }

  return len;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e009      	b.n	8000908 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	60ba      	str	r2, [r7, #8]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbf1      	blt.n	80008f4 <_write+0x12>
  }
  return len;
 8000910:	687b      	ldr	r3, [r7, #4]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <_close>:

int _close(int file)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <_fstat>:
=======
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e009      	b.n	800150c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf1      	blt.n	80014f8 <_write+0x12>
  }
  return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_close>:

int _close(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000942:	605a      	str	r2, [r3, #4]
  return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <_isatty>:

int _isatty(int file)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
=======
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001546:	605a      	str	r2, [r3, #4]
  return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_isatty>:

int _isatty(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< Updated upstream
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <_sbrk>:
=======
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
=======
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
=======
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
=======
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f004 f9c0 	bl	8004d38 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20030000 	.word	0x20030000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	2000011c 	.word	0x2000011c
 80009ec:	20000138 	.word	0x20000138

080009f0 <SystemInit>:
=======
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f003 fee8 	bl	800538c <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20030000 	.word	0x20030000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	200002d8 	.word	0x200002d8
 80015f0:	200002f0 	.word	0x200002f0

080015f4 <SystemInit>:
>>>>>>> Stashed changes
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
=======
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
<<<<<<< Updated upstream
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemInit+0x98>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <SystemInit+0x98>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <SystemInit+0x98>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <SystemInit+0x98>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
<<<<<<< Updated upstream
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a18:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a1c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <SystemInit+0x9c>)
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a3a:	f023 0305 	bic.w	r3, r3, #5
 8000a3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a4e:	f023 0301 	bic.w	r3, r3, #1
 8000a52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <SystemInit+0xa0>)
 8000a5c:	60da      	str	r2, [r3, #12]
=======
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001620:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <SystemInit+0x9c>)
 800162e:	4013      	ands	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163e:	f023 0305 	bic.w	r3, r3, #5
 8001642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800164e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165e:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <SystemInit+0xa0>)
 8001660:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
<<<<<<< Updated upstream
 8000a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <SystemInit+0xa0>)
 8000a64:	611a      	str	r2, [r3, #16]
=======
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <SystemInit+0xa0>)
 8001668:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
<<<<<<< Updated upstream
 8000a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	faf6fefb 	.word	0xfaf6fefb
 8000a90:	22041000 	.word	0x22041000

08000a94 <CopyDataInit>:
=======
 800166a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	faf6fefb 	.word	0xfaf6fefb
 8001694:	22041000 	.word	0x22041000

08001698 <CopyDataInit>:
>>>>>>> Stashed changes
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
<<<<<<< Updated upstream
 8000a94:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a96:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a98:	3304      	adds	r3, #4

08000a9a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000a9e:	d3f9      	bcc.n	8000a94 <CopyDataInit>
  bx lr
 8000aa0:	4770      	bx	lr

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000aa2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000aa4:	3004      	adds	r0, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000aa6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>
  bx lr
 8000aaa:	4770      	bx	lr

08000aac <Reset_Handler>:
=======
 8001698:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169c:	3304      	adds	r3, #4

0800169e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80016a2:	d3f9      	bcc.n	8001698 <CopyDataInit>
  bx lr
 80016a4:	4770      	bx	lr

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80016a6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80016a8:	3004      	adds	r0, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80016aa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>
  bx lr
 80016ae:	4770      	bx	lr

080016b0 <Reset_Handler>:
>>>>>>> Stashed changes

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< Updated upstream
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab0:	f7ff ff9e 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <LoopForever+0x6>)
 8000ab6:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <LoopForever+0xa>)
 8000ab8:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <LoopForever+0xe>)
 8000aba:	2300      	movs	r3, #0
 8000abc:	f7ff ffed 	bl	8000a9a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <LoopForever+0x12>)
 8000ac2:	490c      	ldr	r1, [pc, #48]	; (8000af4 <LoopForever+0x16>)
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <LoopForever+0x1a>)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f7ff ffe7 	bl	8000a9a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <LoopForever+0x1e>)
 8000ace:	490c      	ldr	r1, [pc, #48]	; (8000b00 <LoopForever+0x22>)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f7ff ffe8 	bl	8000aa6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ad6:	f004 f935 	bl	8004d44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ada:	f7ff fbbb 	bl	8000254 <main>

08000ade <LoopForever>:

LoopForever:
  b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000078 	.word	0x20000078
 8000aec:	08005e54 	.word	0x08005e54
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000af0:	20030000 	.word	0x20030000
 8000af4:	20030000 	.word	0x20030000
 8000af8:	08005ec4 	.word	0x08005ec4
  INIT_BSS _sbss, _ebss
 8000afc:	20000078 	.word	0x20000078
 8000b00:	20000134 	.word	0x20000134

08000b04 <ADC1_IRQHandler>:
=======
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b4:	f7ff ff9e 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <LoopForever+0x6>)
 80016ba:	490c      	ldr	r1, [pc, #48]	; (80016ec <LoopForever+0xa>)
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <LoopForever+0xe>)
 80016be:	2300      	movs	r3, #0
 80016c0:	f7ff ffed 	bl	800169e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80016c4:	480b      	ldr	r0, [pc, #44]	; (80016f4 <LoopForever+0x12>)
 80016c6:	490c      	ldr	r1, [pc, #48]	; (80016f8 <LoopForever+0x16>)
 80016c8:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <LoopForever+0x1a>)
 80016ca:	2300      	movs	r3, #0
 80016cc:	f7ff ffe7 	bl	800169e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80016d0:	480b      	ldr	r0, [pc, #44]	; (8001700 <LoopForever+0x1e>)
 80016d2:	490c      	ldr	r1, [pc, #48]	; (8001704 <LoopForever+0x22>)
 80016d4:	2300      	movs	r3, #0
 80016d6:	f7ff ffe8 	bl	80016aa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016da:	f004 f827 	bl	800572c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016de:	f7ff fb77 	bl	8000dd0 <main>

080016e2 <LoopForever>:

LoopForever:
  b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   r0, =_estack
 80016e4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80016e8:	20000008 	.word	0x20000008
 80016ec:	200001e4 	.word	0x200001e4
 80016f0:	0800868c 	.word	0x0800868c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80016f4:	20030000 	.word	0x20030000
 80016f8:	20030000 	.word	0x20030000
 80016fc:	08008868 	.word	0x08008868
  INIT_BSS _sbss, _ebss
 8001700:	200001e4 	.word	0x200001e4
 8001704:	200002f0 	.word	0x200002f0

08001708 <ADC1_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< Updated upstream
 8000b04:	e7fe      	b.n	8000b04 <ADC1_IRQHandler>
	...

08000b08 <HAL_Init>:
=======
 8001708:	e7fe      	b.n	8001708 <ADC1_IRQHandler>
	...

0800170c <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	71fb      	strb	r3, [r7, #7]
=======
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_Init+0x3c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_Init+0x3c>)
 8000b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1c:	6013      	str	r3, [r2, #0]
=======
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_Init+0x3c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_Init+0x3c>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 f96c 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f80f 	bl	8000b48 <HAL_InitTick>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	e001      	b.n	8000b3a <HAL_Init+0x32>
=======
 8001722:	2003      	movs	r0, #3
 8001724:	f000 f96c 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001728:	2000      	movs	r0, #0
 800172a:	f000 f80f 	bl	800174c <HAL_InitTick>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	e001      	b.n	800173e <HAL_Init+0x32>
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
 8000b36:	f7ff fdd1 	bl	80006dc <HAL_MspInit>
=======
 800173a:	f7ff fdc8 	bl	80012ce <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58004000 	.word	0x58004000

08000b48 <HAL_InitTick>:
=======
 800173e:	79fb      	ldrb	r3, [r7, #7]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	58004000 	.word	0x58004000

0800174c <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_InitTick+0x6c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d024      	beq.n	8000ba6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b5c:	f003 f832 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8000b60:	4602      	mov	r2, r0
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_InitTick+0x6c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f974 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10f      	bne.n	8000ba0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	d809      	bhi.n	8000b9a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b86:	2200      	movs	r2, #0
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b8e:	f000 f940 	bl	8000e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <HAL_InitTick+0x70>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	e007      	b.n	8000baa <HAL_InitTick+0x62>
=======
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_InitTick+0x6c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d024      	beq.n	80017aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001760:	f001 fbca 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8001764:	4602      	mov	r2, r0
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_InitTick+0x6c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4619      	mov	r1, r3
 800176c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001770:	fbb3 f3f1 	udiv	r3, r3, r1
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f974 	bl	8001a66 <HAL_SYSTICK_Config>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10f      	bne.n	80017a4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	d809      	bhi.n	800179e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178a:	2200      	movs	r2, #0
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001792:	f000 f940 	bl	8001a16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_InitTick+0x70>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e007      	b.n	80017ae <HAL_InitTick+0x62>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e004      	b.n	8000baa <HAL_InitTick+0x62>
=======
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e004      	b.n	80017ae <HAL_InitTick+0x62>
>>>>>>> Stashed changes
      }
    }
    else
    {
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	e001      	b.n	8000baa <HAL_InitTick+0x62>
=======
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_InitTick+0x62>
>>>>>>> Stashed changes
    }
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< Updated upstream
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
=======
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000010 	.word	0x20000010
 8000bb8:	2000000c 	.word	0x2000000c

08000bbc <HAL_IncTick>:
=======
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000010 	.word	0x20000010
 80017bc:	2000000c 	.word	0x2000000c

080017c0 <HAL_IncTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000010 	.word	0x20000010
 8000be0:	20000120 	.word	0x20000120

08000be4 <HAL_GetTick>:
=======
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000010 	.word	0x20000010
 80017e4:	200002dc 	.word	0x200002dc

080017e8 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000120 	.word	0x20000120

08000bfc <HAL_GetTickPrio>:
=======
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200002dc 	.word	0x200002dc

08001800 <HAL_GetTickPrio>:
>>>>>>> Stashed changes
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
<<<<<<< Updated upstream
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTickPrio+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	2000000c 	.word	0x2000000c

08000c14 <HAL_Delay>:
=======
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTickPrio+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000000c 	.word	0x2000000c

08001818 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
<<<<<<< Updated upstream
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffe2 	bl	8000be4 <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffd2 	bl	8000be4 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000010 	.word	0x20000010

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]
=======
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffe2 	bl	80017e8 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }
>>>>>>> Stashed changes

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffd2 	bl	80017e8 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000010 	.word	0x20000010

08001860 <__NVIC_SetPriorityGrouping>:
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
<<<<<<< Updated upstream
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
=======
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
=======
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
=======
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff29 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
=======
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
=======
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8000e20:	f7ff ff40 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5f 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
=======
 8001a24:	f7ff ff40 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff90 	bl	8001954 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5f 	bl	8001900 <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
=======
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff33 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
=======
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff33 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa4 	bl	8000db8 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d005      	beq.n	8000e9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2204      	movs	r2, #4
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	e047      	b.n	8000f2e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 020e 	bic.w	r2, r2, #14
 8000eac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f003 021c 	and.w	r2, r3, #28
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000eea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00c      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f0c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	4798      	blx	r3
    }
  }
  return status;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f46:	b2db      	uxtb	r3, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_GPIO_Init>:
=======
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa4 	bl	80019bc <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
=======
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< Updated upstream
 8000f62:	e14c      	b.n	80011fe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 813e 	beq.w	80011f8 <HAL_GPIO_Init+0x2a4>
=======
 8001a8e:	e14c      	b.n	8001d2a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 813e 	beq.w	8001d24 <HAL_GPIO_Init+0x2a4>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< Updated upstream
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d005      	beq.n	8000f94 <HAL_GPIO_Init+0x40>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d130      	bne.n	8000ff6 <HAL_GPIO_Init+0xa2>
=======
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d005      	beq.n	8001ac0 <HAL_GPIO_Init+0x40>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d130      	bne.n	8001b22 <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	f003 0201 	and.w	r2, r3, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	605a      	str	r2, [r3, #4]
=======
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001af6:	2201      	movs	r2, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 0201 	and.w	r2, r3, #1
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< Updated upstream
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d017      	beq.n	8001032 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]
=======
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d017      	beq.n	8001b5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d123      	bne.n	8001086 <HAL_GPIO_Init+0x132>
=======
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d123      	bne.n	8001bb2 <HAL_GPIO_Init+0x132>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< Updated upstream
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	6939      	ldr	r1, [r7, #16]
 8001082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	08da      	lsrs	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3208      	adds	r2, #8
 8001bac:	6939      	ldr	r1, [r7, #16]
 8001bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0203 	and.w	r2, r3, #3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	601a      	str	r2, [r3, #0]
=======
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0203 	and.w	r2, r3, #3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8098 	beq.w	80011f8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80010c8:	4a54      	ldr	r2, [pc, #336]	; (800121c <HAL_GPIO_Init+0x2c8>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010f2:	d019      	beq.n	8001128 <HAL_GPIO_Init+0x1d4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a4a      	ldr	r2, [pc, #296]	; (8001220 <HAL_GPIO_Init+0x2cc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d013      	beq.n	8001124 <HAL_GPIO_Init+0x1d0>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a49      	ldr	r2, [pc, #292]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d00d      	beq.n	8001120 <HAL_GPIO_Init+0x1cc>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a48      	ldr	r2, [pc, #288]	; (8001228 <HAL_GPIO_Init+0x2d4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d007      	beq.n	800111c <HAL_GPIO_Init+0x1c8>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a47      	ldr	r2, [pc, #284]	; (800122c <HAL_GPIO_Init+0x2d8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d101      	bne.n	8001118 <HAL_GPIO_Init+0x1c4>
 8001114:	2304      	movs	r3, #4
 8001116:	e008      	b.n	800112a <HAL_GPIO_Init+0x1d6>
 8001118:	2307      	movs	r3, #7
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x1d6>
 800111c:	2303      	movs	r3, #3
 800111e:	e004      	b.n	800112a <HAL_GPIO_Init+0x1d6>
 8001120:	2302      	movs	r3, #2
 8001122:	e002      	b.n	800112a <HAL_GPIO_Init+0x1d6>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <HAL_GPIO_Init+0x1d6>
 8001128:	2300      	movs	r3, #0
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	f002 0203 	and.w	r2, r2, #3
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	4093      	lsls	r3, r2
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800113a:	4938      	ldr	r1, [pc, #224]	; (800121c <HAL_GPIO_Init+0x2c8>)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001148:	4b39      	ldr	r3, [pc, #228]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116c:	4a30      	ldr	r2, [pc, #192]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001196:	4a26      	ldr	r2, [pc, #152]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 800119e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c2:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 80011cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
=======
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8098 	beq.w	8001d24 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf4:	4a54      	ldr	r2, [pc, #336]	; (8001d48 <HAL_GPIO_Init+0x2c8>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c1e:	d019      	beq.n	8001c54 <HAL_GPIO_Init+0x1d4>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a4a      	ldr	r2, [pc, #296]	; (8001d4c <HAL_GPIO_Init+0x2cc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_GPIO_Init+0x1d0>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a49      	ldr	r2, [pc, #292]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_GPIO_Init+0x1cc>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a48      	ldr	r2, [pc, #288]	; (8001d54 <HAL_GPIO_Init+0x2d4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x1c8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a47      	ldr	r2, [pc, #284]	; (8001d58 <HAL_GPIO_Init+0x2d8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_GPIO_Init+0x1c4>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e008      	b.n	8001c56 <HAL_GPIO_Init+0x1d6>
 8001c44:	2307      	movs	r3, #7
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x1d6>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x1d6>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x1d6>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x1d6>
 8001c54:	2300      	movs	r3, #0
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c66:	4938      	ldr	r1, [pc, #224]	; (8001d48 <HAL_GPIO_Init+0x2c8>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c98:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cc2:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <HAL_GPIO_Init+0x2dc>)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	f47f aeab 	bne.w	8000f64 <HAL_GPIO_Init+0x10>
  }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40010000 	.word	0x40010000
 8001220:	48000400 	.word	0x48000400
 8001224:	48000800 	.word	0x48000800
 8001228:	48000c00 	.word	0x48000c00
 800122c:	48001000 	.word	0x48001000
 8001230:	58000800 	.word	0x58000800

08001234 <HAL_GPIO_WritePin>:
=======
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3301      	adds	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f47f aeab 	bne.w	8001a90 <HAL_GPIO_Init+0x10>
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	371c      	adds	r7, #28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	48000400 	.word	0x48000400
 8001d50:	48000800 	.word	0x48000800
 8001d54:	48000c00 	.word	0x48000c00
 8001d58:	48001000 	.word	0x48001000
 8001d5c:	58000800 	.word	0x58000800

08001d60 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
=======
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001250:	e002      	b.n	8001258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e081      	b.n	800137a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d106      	bne.n	8001290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fa2e 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2224      	movs	r2, #36	; 0x24
 8001294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	e006      	b.n	80012ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d104      	bne.n	80012fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800130c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69d9      	ldr	r1, [r3, #28]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1a      	ldr	r2, [r3, #32]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0201 	orr.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2220      	movs	r2, #32
 8001366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b20      	cmp	r3, #32
 800139c:	d139      	bne.n	8001412 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_I2C_Slave_Receive_IT+0x28>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e033      	b.n	8001414 <HAL_I2C_Slave_Receive_IT+0x90>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2222      	movs	r2, #34	; 0x22
 80013b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2220      	movs	r2, #32
 80013c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013d8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	88fa      	ldrh	r2, [r7, #6]
 80013e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_I2C_Slave_Receive_IT+0x98>)
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_I2C_Slave_Receive_IT+0x9c>)
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001404:	f248 0102 	movw	r1, #32770	; 0x8002
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f001 f953 	bl	80026b4 <I2C_Enable_IRQ>

    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001412:	2302      	movs	r3, #2
  }
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	ffff0000 	.word	0xffff0000
 8001420:	08001515 	.word	0x08001515

08001424 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	68f9      	ldr	r1, [r7, #12]
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	4798      	blx	r3
  }
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
 80014a0:	4613      	mov	r3, r2
 80014a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <I2C_Slave_ISR_IT+0x24>
 8001534:	2302      	movs	r3, #2
 8001536:	e0ec      	b.n	8001712 <I2C_Slave_ISR_IT+0x1fe>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fdbe 	bl	80020dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d04d      	beq.n	8001608 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001574:	2b00      	cmp	r3, #0
 8001576:	d047      	beq.n	8001608 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d128      	bne.n	80015d4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b28      	cmp	r3, #40	; 0x28
 800158c:	d108      	bne.n	80015a0 <I2C_Slave_ISR_IT+0x8c>
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001594:	d104      	bne.n	80015a0 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001596:	6939      	ldr	r1, [r7, #16]
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 fea9 	bl	80022f0 <I2C_ITListenCplt>
 800159e:	e032      	b.n	8001606 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b29      	cmp	r3, #41	; 0x29
 80015aa:	d10e      	bne.n	80015ca <I2C_Slave_ISR_IT+0xb6>
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015b2:	d00a      	beq.n	80015ca <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2210      	movs	r2, #16
 80015ba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f001 f804 	bl	80025ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fc61 	bl	8001e8a <I2C_ITSlaveSeqCplt>
 80015c8:	e01d      	b.n	8001606 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2210      	movs	r2, #16
 80015d0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80015d2:	e096      	b.n	8001702 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2210      	movs	r2, #16
 80015da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f043 0204 	orr.w	r2, r3, #4
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <I2C_Slave_ISR_IT+0xe4>
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	f040 8085 	bne.w	8001702 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	4619      	mov	r1, r3
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fecc 	bl	800239c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001604:	e07d      	b.n	8001702 <I2C_Slave_ISR_IT+0x1ee>
 8001606:	e07c      	b.n	8001702 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d030      	beq.n	8001676 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800161c:	2b00      	cmp	r3, #0
 800161e:	d02a      	beq.n	8001676 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d018      	beq.n	800165c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	3b01      	subs	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001652:	b29b      	uxth	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001660:	b29b      	uxth	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d14f      	bne.n	8001706 <I2C_Slave_ISR_IT+0x1f2>
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800166c:	d04b      	beq.n	8001706 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fc0b 	bl	8001e8a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001674:	e047      	b.n	8001706 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00a      	beq.n	8001698 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800168a:	2b00      	cmp	r3, #0
 800168c:	d004      	beq.n	8001698 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800168e:	6939      	ldr	r1, [r7, #16]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 fb39 	bl	8001d08 <I2C_ITAddrCplt>
 8001696:	e037      	b.n	8001708 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d031      	beq.n	8001708 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02b      	beq.n	8001708 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d018      	beq.n	80016ec <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
 80016ea:	e00d      	b.n	8001708 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f2:	d002      	beq.n	80016fa <I2C_Slave_ISR_IT+0x1e6>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fbc5 	bl	8001e8a <I2C_ITSlaveSeqCplt>
 8001700:	e002      	b.n	8001708 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001702:	bf00      	nop
 8001704:	e000      	b.n	8001708 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001706:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b088      	sub	sp, #32
 800171e:	af02      	add	r7, sp, #8
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <I2C_Master_ISR_DMA+0x1a>
 8001730:	2302      	movs	r3, #2
 8001732:	e0e1      	b.n	80018f8 <I2C_Master_ISR_DMA+0x1de>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d017      	beq.n	8001778 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001750:	2b00      	cmp	r3, #0
 8001752:	d011      	beq.n	8001778 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2210      	movs	r2, #16
 800175a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	f043 0204 	orr.w	r2, r3, #4
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001768:	2120      	movs	r1, #32
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 ffa2 	bl	80026b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 ff2a 	bl	80025ca <I2C_Flush_TXDR>
 8001776:	e0ba      	b.n	80018ee <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	09db      	lsrs	r3, r3, #7
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d072      	beq.n	800186a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800178c:	2b00      	cmp	r3, #0
 800178e:	d06c      	beq.n	800186a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800179e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d04e      	beq.n	8001848 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017b6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2bff      	cmp	r3, #255	; 0xff
 80017c0:	d906      	bls.n	80017d0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	22ff      	movs	r2, #255	; 0xff
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80017c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e010      	b.n	80017f2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017e2:	d003      	beq.n	80017ec <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e002      	b.n	80017f2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80017ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	8a79      	ldrh	r1, [r7, #18]
 80017fa:	2300      	movs	r3, #0
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 ff25 	bl	8002650 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	b29a      	uxth	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b22      	cmp	r3, #34	; 0x22
 8001822:	d108      	bne.n	8001836 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001832:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001834:	e05b      	b.n	80018ee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001844:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001846:	e052      	b.n	80018ee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001856:	d003      	beq.n	8001860 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 fad9 	bl	8001e10 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800185e:	e046      	b.n	80018ee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001860:	2140      	movs	r1, #64	; 0x40
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fd9a 	bl	800239c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001868:	e041      	b.n	80018ee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d029      	beq.n	80018ca <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	099b      	lsrs	r3, r3, #6
 800187a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800187e:	2b00      	cmp	r3, #0
 8001880:	d023      	beq.n	80018ca <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d119      	bne.n	80018c0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800189a:	d027      	beq.n	80018ec <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018a4:	d108      	bne.n	80018b8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018b4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80018b6:	e019      	b.n	80018ec <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 faa9 	bl	8001e10 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80018be:	e015      	b.n	80018ec <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fd6a 	bl	800239c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80018c8:	e010      	b.n	80018ec <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	095b      	lsrs	r3, r3, #5
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fb2f 	bl	8001f48 <I2C_ITMasterCplt>
 80018ea:	e000      	b.n	80018ee <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80018ec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af02      	add	r7, sp, #8
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800190c:	4b8c      	ldr	r3, [pc, #560]	; (8001b40 <I2C_Mem_ISR_DMA+0x240>)
 800190e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <I2C_Mem_ISR_DMA+0x1e>
 800191a:	2302      	movs	r3, #2
 800191c:	e10c      	b.n	8001b38 <I2C_Mem_ISR_DMA+0x238>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d017      	beq.n	8001962 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800193a:	2b00      	cmp	r3, #0
 800193c:	d011      	beq.n	8001962 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2210      	movs	r2, #16
 8001944:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f043 0204 	orr.w	r2, r3, #4
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001952:	2120      	movs	r1, #32
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 fead 	bl	80026b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fe35 	bl	80025ca <I2C_Flush_TXDR>
 8001960:	e0e5      	b.n	8001b2e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00f      	beq.n	800198e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	085b      	lsrs	r3, r3, #1
 8001972:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800198a:	651a      	str	r2, [r3, #80]	; 0x50
 800198c:	e0cf      	b.n	8001b2e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	09db      	lsrs	r3, r3, #7
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d05c      	beq.n	8001a54 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d056      	beq.n	8001a54 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80019a6:	2110      	movs	r1, #16
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fe83 	bl	80026b4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d048      	beq.n	8001a4a <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2bff      	cmp	r3, #255	; 0xff
 80019c0:	d910      	bls.n	80019e4 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	22ff      	movs	r2, #255	; 0xff
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	b299      	uxth	r1, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	2300      	movs	r3, #0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 fe37 	bl	8002650 <I2C_TransferConfig>
 80019e2:	e011      	b.n	8001a08 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	b299      	uxth	r1, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	2300      	movs	r3, #0
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fe24 	bl	8002650 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b22      	cmp	r3, #34	; 0x22
 8001a24:	d108      	bne.n	8001a38 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a34:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a36:	e07a      	b.n	8001b2e <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a48:	e071      	b.n	8001b2e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fca5 	bl	800239c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001a52:	e06c      	b.n	8001b2e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d056      	beq.n	8001b0e <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d050      	beq.n	8001b0e <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b22      	cmp	r3, #34	; 0x22
 8001a76:	d101      	bne.n	8001a7c <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <I2C_Mem_ISR_DMA+0x244>)
 8001a7a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2bff      	cmp	r3, #255	; 0xff
 8001a84:	d910      	bls.n	8001aa8 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	22ff      	movs	r2, #255	; 0xff
 8001a8a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	b299      	uxth	r1, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fdd5 	bl	8002650 <I2C_TransferConfig>
 8001aa6:	e011      	b.n	8001acc <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	b299      	uxth	r1, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fdc2 	bl	8002650 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b22      	cmp	r3, #34	; 0x22
 8001ae8:	d108      	bne.n	8001afc <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001afa:	e018      	b.n	8001b2e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b0a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b0c:	e00f      	b.n	8001b2e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	095b      	lsrs	r3, r3, #5
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	095b      	lsrs	r3, r3, #5
 8001b1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fa0d 	bl	8001f48 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	80002000 	.word	0x80002000
 8001b44:	80002400 	.word	0x80002400

08001b48 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <I2C_Slave_ISR_DMA+0x24>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e0c9      	b.n	8001d00 <I2C_Slave_ISR_DMA+0x1b8>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d009      	beq.n	8001b94 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 faa4 	bl	80020dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 809a 	beq.w	8001cd6 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8093 	beq.w	8001cd6 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0b9b      	lsrs	r3, r3, #14
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	0bdb      	lsrs	r3, r3, #15
 8001bc0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d07f      	beq.n	8001cc8 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0bdb      	lsrs	r3, r3, #15
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001be8:	2301      	movs	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0b9b      	lsrs	r3, r3, #14
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d128      	bne.n	8001c68 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b28      	cmp	r3, #40	; 0x28
 8001c20:	d108      	bne.n	8001c34 <I2C_Slave_ISR_DMA+0xec>
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c28:	d104      	bne.n	8001c34 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 fb5f 	bl	80022f0 <I2C_ITListenCplt>
 8001c32:	e048      	b.n	8001cc6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b29      	cmp	r3, #41	; 0x29
 8001c3e:	d10e      	bne.n	8001c5e <I2C_Slave_ISR_DMA+0x116>
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c46:	d00a      	beq.n	8001c5e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 fcba 	bl	80025ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f917 	bl	8001e8a <I2C_ITSlaveSeqCplt>
 8001c5c:	e033      	b.n	8001cc6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2210      	movs	r2, #16
 8001c64:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001c66:	e034      	b.n	8001cd2 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c82:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <I2C_Slave_ISR_DMA+0x14a>
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d11f      	bne.n	8001cd2 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b21      	cmp	r3, #33	; 0x21
 8001c96:	d002      	beq.n	8001c9e <I2C_Slave_ISR_DMA+0x156>
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b29      	cmp	r3, #41	; 0x29
 8001c9c:	d103      	bne.n	8001ca6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2221      	movs	r2, #33	; 0x21
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca4:	e008      	b.n	8001cb8 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	2b22      	cmp	r3, #34	; 0x22
 8001caa:	d002      	beq.n	8001cb2 <I2C_Slave_ISR_DMA+0x16a>
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b2a      	cmp	r3, #42	; 0x2a
 8001cb0:	d102      	bne.n	8001cb8 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2222      	movs	r2, #34	; 0x22
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fb6c 	bl	800239c <I2C_ITError>
      if (treatdmanack == 1U)
 8001cc4:	e005      	b.n	8001cd2 <I2C_Slave_ISR_DMA+0x18a>
 8001cc6:	e004      	b.n	8001cd2 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cd0:	e011      	b.n	8001cf6 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001cd2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cd4:	e00f      	b.n	8001cf6 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	08db      	lsrs	r3, r3, #3
 8001ce6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f809 	bl	8001d08 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001d1e:	2b28      	cmp	r3, #40	; 0x28
 8001d20:	d16a      	bne.n	8001df8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001d40:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d4e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001d5c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d138      	bne.n	8001dd8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001d66:	897b      	ldrh	r3, [r7, #10]
 8001d68:	09db      	lsrs	r3, r3, #7
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	89bb      	ldrh	r3, [r7, #12]
 8001d6e:	4053      	eors	r3, r2
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	f003 0306 	and.w	r3, r3, #6
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11c      	bne.n	8001db4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001d7a:	897b      	ldrh	r3, [r7, #10]
 8001d7c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d13b      	bne.n	8001e08 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001da6:	89ba      	ldrh	r2, [r7, #12]
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fb71 	bl	8001494 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001db2:	e029      	b.n	8001e08 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001db4:	893b      	ldrh	r3, [r7, #8]
 8001db6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fd01 	bl	80027c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001dca:	89ba      	ldrh	r2, [r7, #12]
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fb5f 	bl	8001494 <HAL_I2C_AddrCallback>
}
 8001dd6:	e017      	b.n	8001e08 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fcf1 	bl	80027c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001dea:	89ba      	ldrh	r2, [r7, #12]
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff fb4f 	bl	8001494 <HAL_I2C_AddrCallback>
}
 8001df6:	e007      	b.n	8001e08 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b21      	cmp	r3, #33	; 0x21
 8001e2a:	d115      	bne.n	8001e58 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2211      	movs	r2, #17
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e40:	2101      	movs	r1, #1
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fcbe 	bl	80027c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fb01 	bl	8001458 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e56:	e014      	b.n	8001e82 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2212      	movs	r2, #18
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fca8 	bl	80027c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff faf5 	bl	800146c <HAL_I2C_MasterRxCpltCallback>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	0b9b      	lsrs	r3, r3, #14
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e00d      	b.n	8001edc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	0bdb      	lsrs	r3, r3, #15
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b29      	cmp	r3, #41	; 0x29
 8001ee6:	d112      	bne.n	8001f0e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2228      	movs	r2, #40	; 0x28
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2221      	movs	r2, #33	; 0x21
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fc63 	bl	80027c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff faba 	bl	8001480 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001f0c:	e017      	b.n	8001f3e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b2a      	cmp	r3, #42	; 0x2a
 8001f18:	d111      	bne.n	8001f3e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2228      	movs	r2, #40	; 0x28
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2222      	movs	r2, #34	; 0x22
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f28:	2102      	movs	r1, #2
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fc4a 	bl	80027c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7fe fb5f 	bl	80005fc <HAL_I2C_SlaveRxCpltCallback>
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b21      	cmp	r3, #33	; 0x21
 8001f68:	d107      	bne.n	8001f7a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fc29 	bl	80027c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2211      	movs	r2, #17
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
 8001f78:	e00c      	b.n	8001f94 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b22      	cmp	r3, #34	; 0x22
 8001f84:	d106      	bne.n	8001f94 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f86:	2102      	movs	r1, #2
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fc1b 	bl	80027c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2212      	movs	r2, #18
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b4d      	ldr	r3, [pc, #308]	; (80020d4 <I2C_ITMasterCplt+0x18c>)
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4a      	ldr	r2, [pc, #296]	; (80020d8 <I2C_ITMasterCplt+0x190>)
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f043 0204 	orr.w	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b60      	cmp	r3, #96	; 0x60
 8001fda:	d10b      	bne.n	8001ff4 <I2C_ITMasterCplt+0xac>
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fae8 	bl	80025ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b60      	cmp	r3, #96	; 0x60
 800200a:	d002      	beq.n	8002012 <I2C_ITMasterCplt+0xca>
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f9bf 	bl	800239c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800201e:	e054      	b.n	80020ca <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b21      	cmp	r3, #33	; 0x21
 800202a:	d124      	bne.n	8002076 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b40      	cmp	r3, #64	; 0x40
 8002044:	d10b      	bne.n	800205e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fa34 	bl	80014c4 <HAL_I2C_MemTxCpltCallback>
}
 800205c:	e035      	b.n	80020ca <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff f9f2 	bl	8001458 <HAL_I2C_MasterTxCpltCallback>
}
 8002074:	e029      	b.n	80020ca <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b22      	cmp	r3, #34	; 0x22
 8002080:	d123      	bne.n	80020ca <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d10b      	bne.n	80020b4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fa13 	bl	80014d8 <HAL_I2C_MemRxCpltCallback>
}
 80020b2:	e00a      	b.n	80020ca <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff f9d1 	bl	800146c <HAL_I2C_MasterRxCpltCallback>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	fe00e800 	.word	0xfe00e800
 80020d8:	ffff0000 	.word	0xffff0000

080020dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2220      	movs	r2, #32
 8002100:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b21      	cmp	r3, #33	; 0x21
 8002106:	d002      	beq.n	800210e <I2C_ITSlaveCplt+0x32>
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	2b29      	cmp	r3, #41	; 0x29
 800210c:	d108      	bne.n	8002120 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800210e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fb56 	bl	80027c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2221      	movs	r2, #33	; 0x21
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
 800211e:	e00d      	b.n	800213c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2b22      	cmp	r3, #34	; 0x22
 8002124:	d002      	beq.n	800212c <I2C_ITSlaveCplt+0x50>
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2b2a      	cmp	r3, #42	; 0x2a
 800212a:	d107      	bne.n	800213c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800212c:	f248 0102 	movw	r1, #32770	; 0x8002
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fb47 	bl	80027c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2222      	movs	r2, #34	; 0x22
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800214a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b64      	ldr	r3, [pc, #400]	; (80022e8 <I2C_ITSlaveCplt+0x20c>)
 8002158:	400b      	ands	r3, r1
 800215a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fa34 	bl	80025ca <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	0b9b      	lsrs	r3, r3, #14
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d013      	beq.n	8002196 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800217c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	2b00      	cmp	r3, #0
 8002184:	d020      	beq.n	80021c8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002194:	e018      	b.n	80021c8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	0bdb      	lsrs	r3, r3, #15
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4619      	mov	r1, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f8a7 	bl	800239c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b28      	cmp	r3, #40	; 0x28
 8002258:	d141      	bne.n	80022de <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800225a:	6979      	ldr	r1, [r7, #20]
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f847 	bl	80022f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002262:	e03c      	b.n	80022de <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800226c:	d014      	beq.n	8002298 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fe0b 	bl	8001e8a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <I2C_ITSlaveCplt+0x210>)
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff f90d 	bl	80014b0 <HAL_I2C_ListenCpltCallback>
}
 8002296:	e022      	b.n	80022de <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b22      	cmp	r3, #34	; 0x22
 80022a2:	d10e      	bne.n	80022c2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe f99e 	bl	80005fc <HAL_I2C_SlaveRxCpltCallback>
}
 80022c0:	e00d      	b.n	80022de <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2220      	movs	r2, #32
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff f8d1 	bl	8001480 <HAL_I2C_SlaveTxCpltCallback>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	fe00e800 	.word	0xfe00e800
 80022ec:	ffff0000 	.word	0xffff0000

080022f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <I2C_ITListenCplt+0xa8>)
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d022      	beq.n	800236e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f043 0204 	orr.w	r2, r3, #4
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800236e:	f248 0103 	movw	r1, #32771	; 0x8003
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fa26 	bl	80027c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2210      	movs	r2, #16
 800237e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff f891 	bl	80014b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	ffff0000 	.word	0xffff0000

0800239c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ac:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a6d      	ldr	r2, [pc, #436]	; (8002570 <I2C_ITError+0x1d4>)
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b28      	cmp	r3, #40	; 0x28
 80023d2:	d005      	beq.n	80023e0 <I2C_ITError+0x44>
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b29      	cmp	r3, #41	; 0x29
 80023d8:	d002      	beq.n	80023e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b2a      	cmp	r3, #42	; 0x2a
 80023de:	d10b      	bne.n	80023f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023e0:	2103      	movs	r1, #3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f9ee 	bl	80027c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2228      	movs	r2, #40	; 0x28
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a60      	ldr	r2, [pc, #384]	; (8002574 <I2C_ITError+0x1d8>)
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34
 80023f6:	e030      	b.n	800245a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023f8:	f248 0103 	movw	r1, #32771	; 0x8003
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f9e1 	bl	80027c4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8e1 	bl	80025ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b60      	cmp	r3, #96	; 0x60
 8002412:	d01f      	beq.n	8002454 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d114      	bne.n	8002454 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b10      	cmp	r3, #16
 8002436:	d109      	bne.n	800244c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2210      	movs	r2, #16
 800243e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2220      	movs	r2, #32
 8002452:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	635a      	str	r2, [r3, #52]	; 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	2b00      	cmp	r3, #0
 8002466:	d039      	beq.n	80024dc <I2C_ITError+0x140>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b11      	cmp	r3, #17
 800246c:	d002      	beq.n	8002474 <I2C_ITError+0xd8>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b21      	cmp	r3, #33	; 0x21
 8002472:	d133      	bne.n	80024dc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002482:	d107      	bne.n	8002494 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002492:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fd4d 	bl	8000f38 <HAL_DMA_GetState>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d017      	beq.n	80024d4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	4a33      	ldr	r2, [pc, #204]	; (8002578 <I2C_ITError+0x1dc>)
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fcde 	bl	8000e7a <HAL_DMA_Abort_IT>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d04d      	beq.n	8002560 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ce:	4610      	mov	r0, r2
 80024d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024d2:	e045      	b.n	8002560 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f851 	bl	800257c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024da:	e041      	b.n	8002560 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d039      	beq.n	8002558 <I2C_ITError+0x1bc>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b12      	cmp	r3, #18
 80024e8:	d002      	beq.n	80024f0 <I2C_ITError+0x154>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b22      	cmp	r3, #34	; 0x22
 80024ee:	d133      	bne.n	8002558 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024fe:	d107      	bne.n	8002510 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800250e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fd0f 	bl	8000f38 <HAL_DMA_GetState>
 800251a:	4603      	mov	r3, r0
 800251c:	2b01      	cmp	r3, #1
 800251e:	d017      	beq.n	8002550 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <I2C_ITError+0x1dc>)
 8002526:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fca0 	bl	8000e7a <HAL_DMA_Abort_IT>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d011      	beq.n	8002564 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800254a:	4610      	mov	r0, r2
 800254c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800254e:	e009      	b.n	8002564 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f813 	bl	800257c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002556:	e005      	b.n	8002564 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f80f 	bl	800257c <I2C_TreatErrorCallback>
  }
}
 800255e:	e002      	b.n	8002566 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002564:	bf00      	nop
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	ffff0000 	.word	0xffff0000
 8002574:	08001515 	.word	0x08001515
 8002578:	08002613 	.word	0x08002613

0800257c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b60      	cmp	r3, #96	; 0x60
 800258e:	d10e      	bne.n	80025ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe ffaa 	bl	8001500 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80025ac:	e009      	b.n	80025c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe ff95 	bl	80014ec <HAL_I2C_ErrorCallback>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d103      	bne.n	80025e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2200      	movs	r2, #0
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d007      	beq.n	8002606 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	619a      	str	r2, [r3, #24]
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	2200      	movs	r2, #0
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	2200      	movs	r2, #0
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff ff9b 	bl	800257c <I2C_TreatErrorCallback>
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	817b      	strh	r3, [r7, #10]
 800265e:	4613      	mov	r3, r2
 8002660:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002668:	7a7b      	ldrb	r3, [r7, #9]
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002670:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	4313      	orrs	r3, r2
 800267a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800267e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	0d5b      	lsrs	r3, r3, #21
 800268a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <I2C_TransferConfig+0x60>)
 8002690:	430b      	orrs	r3, r1
 8002692:	43db      	mvns	r3, r3
 8002694:	ea02 0103 	and.w	r1, r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	430a      	orrs	r2, r1
 80026a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	03ff63ff 	.word	0x03ff63ff

080026b4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	4a3b      	ldr	r2, [pc, #236]	; (80027b8 <I2C_Enable_IRQ+0x104>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d032      	beq.n	8002734 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80026d2:	4a3a      	ldr	r2, [pc, #232]	; (80027bc <I2C_Enable_IRQ+0x108>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d02d      	beq.n	8002734 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80026dc:	4a38      	ldr	r2, [pc, #224]	; (80027c0 <I2C_Enable_IRQ+0x10c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d028      	beq.n	8002734 <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80026e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	da03      	bge.n	80026f2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80026f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002702:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002704:	887b      	ldrh	r3, [r7, #2]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002714:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	2b10      	cmp	r3, #16
 800271a:	d103      	bne.n	8002724 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002722:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	2b20      	cmp	r3, #32
 8002728:	d138      	bne.n	800279c <I2C_Enable_IRQ+0xe8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f043 0320 	orr.w	r3, r3, #32
 8002730:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002732:	e033      	b.n	800279c <I2C_Enable_IRQ+0xe8>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002734:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002738:	2b00      	cmp	r3, #0
 800273a:	da03      	bge.n	8002744 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002742:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002754:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002766:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d103      	bne.n	8002776 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002774:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	2b20      	cmp	r3, #32
 800277a:	d103      	bne.n	8002784 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002782:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <I2C_Enable_IRQ+0x10c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d006      	beq.n	800279c <I2C_Enable_IRQ+0xe8>
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d103      	bne.n	800279c <I2C_Enable_IRQ+0xe8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800279a:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	0800171b 	.word	0x0800171b
 80027bc:	08001b49 	.word	0x08001b49
 80027c0:	08001901 	.word	0x08001901

080027c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00f      	beq.n	80027fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80027e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027f2:	2b28      	cmp	r3, #40	; 0x28
 80027f4:	d003      	beq.n	80027fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80027fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00f      	beq.n	8002828 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800280e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800281c:	2b28      	cmp	r3, #40	; 0x28
 800281e:	d003      	beq.n	8002828 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002826:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800282c:	2b00      	cmp	r3, #0
 800282e:	da03      	bge.n	8002838 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002836:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	2b10      	cmp	r3, #16
 800283c:	d103      	bne.n	8002846 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002844:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	2b20      	cmp	r3, #32
 800284a:	d103      	bne.n	8002854 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f043 0320 	orr.w	r3, r3, #32
 8002852:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d103      	bne.n	8002862 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002860:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6819      	ldr	r1, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43da      	mvns	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	400a      	ands	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b20      	cmp	r3, #32
 8002894:	d138      	bne.n	8002908 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e032      	b.n	800290a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	; 0x24
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b20      	cmp	r3, #32
 800292a:	d139      	bne.n	80029a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002936:	2302      	movs	r3, #2
 8002938:	e033      	b.n	80029a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2224      	movs	r2, #36	; 0x24
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002968:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
<<<<<<< Updated upstream
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_PWR_EnableBkUpAccess>:
=======
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_PWR_EnableBkUpAccess>:
>>>>>>> Stashed changes
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< Updated upstream
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	58000400 	.word	0x58000400

080029d0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e2:	d104      	bne.n	80029ee <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f842 	bl	8002a70 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 f813 	bl	8002a1c <HAL_PWREx_EnterSTOP0Mode>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_PWREx_GetVoltageRange>:
=======
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	58000400 	.word	0x58000400

08001de0 <HAL_PWREx_GetVoltageRange>:
>>>>>>> Stashed changes
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< Updated upstream
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	58000400 	.word	0x58000400

08002a1c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002a2c:	f023 0307 	bic.w	r3, r3, #7
 8002a30:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002a44:	bf30      	wfi
 8002a46:	e002      	b.n	8002a4e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002a48:	bf40      	sev
    __WFE();
 8002a4a:	bf20      	wfe
    __WFE();
 8002a4c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	4a06      	ldr	r2, [pc, #24]	; (8002a6c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002a54:	f023 0304 	bic.w	r3, r3, #4
 8002a58:	6113      	str	r3, [r2, #16]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	58000400 	.word	0x58000400
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0307 	bic.w	r3, r3, #7
 8002a82:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002a9c:	bf30      	wfi
 8002a9e:	e002      	b.n	8002aa6 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002aa0:	bf40      	sev
    __WFE();
 8002aa2:	bf20      	wfe
    __WFE();
 8002aa4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	6113      	str	r3, [r2, #16]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	58000400 	.word	0x58000400
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ada:	d101      	bne.n	8002ae0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_RCC_HSE_Enable>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_RCC_HSE_Disable>:
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_HSE_IsReady>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b3a:	d101      	bne.n	8002b40 <LL_RCC_HSE_IsReady+0x18>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_RCC_HSE_IsReady+0x1a>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_RCC_HSI_Enable>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_RCC_HSI_Disable>:
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_RCC_HSI_IsReady>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d101      	bne.n	8002ba0 <LL_RCC_HSI_IsReady+0x18>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <LL_RCC_HSI_IsReady+0x1a>
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_RCC_HSI_SetCalibTrimming>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_RCC_HSI48_Enable>:
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_HSI48_Disable>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_HSI48_IsReady>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d101      	bne.n	8002c32 <LL_RCC_HSI48_IsReady+0x18>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_RCC_HSI48_IsReady+0x1a>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_LSE_Enable>:
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_LSE_Disable>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_LSE_EnableBypass>:
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_RCC_LSE_DisableBypass>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb4:	f023 0304 	bic.w	r3, r3, #4
 8002cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_RCC_LSE_IsReady>:
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d101      	bne.n	8002cde <LL_RCC_LSE_IsReady+0x18>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <LL_RCC_LSE_IsReady+0x1a>
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_RCC_LSI1_Enable>:
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_RCC_LSI1_Disable>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_LSI1_IsReady>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d101      	bne.n	8002d46 <LL_RCC_LSI1_IsReady+0x18>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <LL_RCC_LSI1_IsReady+0x1a>
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_RCC_LSI2_Enable>:
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_RCC_LSI2_Disable>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_RCC_LSI2_IsReady>:
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d101      	bne.n	8002dae <LL_RCC_LSI2_IsReady+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_RCC_LSI2_IsReady+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_RCC_LSI2_SetTrimming>:
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_MSI_Enable>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_RCC_MSI_Disable>:
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6013      	str	r3, [r2, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_MSI_IsReady>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d101      	bne.n	8002e3a <LL_RCC_MSI_IsReady+0x16>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <LL_RCC_MSI_IsReady+0x18>
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_MSI_SetRange>:
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_MSI_GetRange>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2bb0      	cmp	r3, #176	; 0xb0
 8002e84:	d901      	bls.n	8002e8a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002e86:	23b0      	movs	r3, #176	; 0xb0
 8002e88:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002e8a:	687b      	ldr	r3, [r7, #4]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_SetSysClkSource>:
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 0203 	bic.w	r2, r3, #3
 8002ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_RCC_GetSysClkSource>:
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_SetAHBPrescaler>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_C2_RCC_SetAHBPrescaler>:
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_SetAHB4Prescaler>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_RCC_SetAPB1Prescaler>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_RCC_SetAPB2Prescaler>:
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_RCC_GetAHBPrescaler>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_GetAHB4Prescaler>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_RCC_PLL_Enable>:
=======
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	58000400 	.word	0x58000400

08001dfc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e0e:	d101      	bne.n	8001e14 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_RCC_HSE_Enable>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_HSE_Disable>:
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_RCC_HSE_IsReady>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e6e:	d101      	bne.n	8001e74 <LL_RCC_HSE_IsReady+0x18>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <LL_RCC_HSE_IsReady+0x1a>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_RCC_HSI_Enable>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LL_RCC_HSI_Disable>:
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eb0:	6013      	str	r3, [r2, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_RCC_HSI_IsReady>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ece:	d101      	bne.n	8001ed4 <LL_RCC_HSI_IsReady+0x18>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <LL_RCC_HSI_IsReady+0x1a>
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_RCC_HSI48_Enable>:
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_RCC_HSI48_Disable>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_RCC_HSI48_IsReady>:
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d101      	bne.n	8001f66 <LL_RCC_HSI48_IsReady+0x18>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <LL_RCC_HSI48_IsReady+0x1a>
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_LSE_Enable>:
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_RCC_LSE_Disable>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_LSE_EnableBypass>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_RCC_LSE_DisableBypass>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_LSE_IsReady>:
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d101      	bne.n	8002012 <LL_RCC_LSE_IsReady+0x18>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <LL_RCC_LSE_IsReady+0x1a>
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_RCC_LSI1_Enable>:
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_RCC_LSI1_Disable>:
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_RCC_LSI1_IsReady>:
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b02      	cmp	r3, #2
 8002074:	d101      	bne.n	800207a <LL_RCC_LSI1_IsReady+0x18>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_RCC_LSI1_IsReady+0x1a>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RCC_LSI2_Enable>:
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_LSI2_Disable>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_RCC_LSI2_IsReady>:
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80020ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d101      	bne.n	80020e2 <LL_RCC_LSI2_IsReady+0x18>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_RCC_LSI2_IsReady+0x1a>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_RCC_LSI2_SetTrimming>:
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_RCC_MSI_Enable>:
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_RCC_MSI_Disable>:
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6013      	str	r3, [r2, #0]
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_RCC_MSI_IsReady>:
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b02      	cmp	r3, #2
 8002168:	d101      	bne.n	800216e <LL_RCC_MSI_IsReady+0x16>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <LL_RCC_MSI_IsReady+0x18>
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_RCC_MSI_SetRange>:
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_RCC_MSI_GetRange>:
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2bb0      	cmp	r3, #176	; 0xb0
 80021b8:	d901      	bls.n	80021be <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80021ba:	23b0      	movs	r3, #176	; 0xb0
 80021bc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80021be:	687b      	ldr	r3, [r7, #4]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_RCC_MSI_SetCalibTrimming>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_RCC_SetSysClkSource>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 0203 	bic.w	r2, r3, #3
 8002208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_RCC_GetSysClkSource>:
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_RCC_SetAHBPrescaler>:
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_C2_RCC_SetAHBPrescaler>:
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800226e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_RCC_SetAHB4Prescaler>:
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800229a:	f023 020f 	bic.w	r2, r3, #15
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_RCC_SetAPB1Prescaler>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_SetAPB2Prescaler>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_RCC_GetAHBPrescaler>:
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_RCC_GetAHB4Prescaler>:
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002328:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_RCC_PLL_Enable>:
>>>>>>> Stashed changes
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
<<<<<<< Updated upstream
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800300c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301a:	6013      	str	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_RCC_PLL_Disable>:
=======
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_RCC_PLL_Disable>:
>>>>>>> Stashed changes
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
<<<<<<< Updated upstream
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003038:	6013      	str	r3, [r2, #0]
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_RCC_PLL_IsReady>:
=======
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800236c:	6013      	str	r3, [r2, #0]
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_RCC_PLL_IsReady>:
>>>>>>> Stashed changes
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
<<<<<<< Updated upstream
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003056:	d101      	bne.n	800305c <LL_RCC_PLL_IsReady+0x18>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <LL_RCC_PLL_IsReady+0x1a>
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_RCC_PLL_GetN>:
=======
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800238a:	d101      	bne.n	8002390 <LL_RCC_PLL_IsReady+0x18>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <LL_RCC_PLL_IsReady+0x1a>
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_PLL_GetN>:
>>>>>>> Stashed changes
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
<<<<<<< Updated upstream
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_RCC_PLL_GetR>:
=======
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_RCC_PLL_GetR>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
<<<<<<< Updated upstream
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <LL_RCC_PLL_GetDivider>:
=======
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80023ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_RCC_PLL_GetDivider>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
<<<<<<< Updated upstream
 800309a:	b480      	push	{r7}
 800309c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_RCC_PLL_GetMainSource>:
=======
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_RCC_PLL_GetMainSource>:
>>>>>>> Stashed changes
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
<<<<<<< Updated upstream
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0303 	and.w	r3, r3, #3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_RCC_IsActiveFlag_HPRE>:
=======
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0303 	and.w	r3, r3, #3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_RCC_IsActiveFlag_HPRE>:
>>>>>>> Stashed changes
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
<<<<<<< Updated upstream
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030dc:	d101      	bne.n	80030e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_RCC_IsActiveFlag_C2HPRE>:
=======
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002410:	d101      	bne.n	8002416 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_RCC_IsActiveFlag_C2HPRE>:
>>>>>>> Stashed changes
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
<<<<<<< Updated upstream
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003102:	d101      	bne.n	8003108 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_RCC_IsActiveFlag_SHDHPRE>:
=======
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002436:	d101      	bne.n	800243c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_RCC_IsActiveFlag_SHDHPRE>:
>>>>>>> Stashed changes
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
<<<<<<< Updated upstream
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003128:	d101      	bne.n	800312e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <LL_RCC_IsActiveFlag_PPRE1>:
=======
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d101      	bne.n	8002462 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_RCC_IsActiveFlag_PPRE1>:
>>>>>>> Stashed changes
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
<<<<<<< Updated upstream
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800314c:	d101      	bne.n	8003152 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_RCC_IsActiveFlag_PPRE2>:
=======
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002480:	d101      	bne.n	8002486 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_RCC_IsActiveFlag_PPRE2>:
>>>>>>> Stashed changes
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
<<<<<<< Updated upstream
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003170:	d101      	bne.n	8003176 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_RCC_OscConfig>:
=======
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024a4:	d101      	bne.n	80024aa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b08d      	sub	sp, #52	; 0x34
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
=======
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b08d      	sub	sp, #52	; 0x34
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e363      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e363      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
<<<<<<< Updated upstream
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 808d 	beq.w	80032be <HAL_RCC_OscConfig+0x13a>
=======
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 808d 	beq.w	80025f2 <HAL_RCC_OscConfig+0x13a>
>>>>>>> Stashed changes
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80031a4:	f7ff fea1 	bl	8002eea <LL_RCC_GetSysClkSource>
 80031a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031aa:	f7ff ff82 	bl	80030b2 <LL_RCC_PLL_GetMainSource>
 80031ae:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_RCC_OscConfig+0x3e>
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d147      	bne.n	800324c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d144      	bne.n	800324c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e347      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 80024d8:	f7ff fea1 	bl	800221e <LL_RCC_GetSysClkSource>
 80024dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024de:	f7ff ff82 	bl	80023e6 <LL_RCC_PLL_GetMainSource>
 80024e2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x3e>
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d147      	bne.n	8002580 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d144      	bne.n	8002580 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e347      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< Updated upstream
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80031d2:	f7ff fe4c 	bl	8002e6e <LL_RCC_MSI_GetRange>
 80031d6:	4603      	mov	r3, r0
 80031d8:	429c      	cmp	r4, r3
 80031da:	d914      	bls.n	8003206 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fd03 	bl	8003bec <RCC_SetFlashLatencyFromMSIRange>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e336      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002506:	f7ff fe4c 	bl	80021a2 <LL_RCC_MSI_GetRange>
 800250a:	4603      	mov	r3, r0
 800250c:	429c      	cmp	r4, r3
 800250e:	d914      	bls.n	800253a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fd03 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e336      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fe26 	bl	8002e46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fe4a 	bl	8002e98 <LL_RCC_MSI_SetCalibTrimming>
 8003204:	e013      	b.n	800322e <HAL_RCC_OscConfig+0xaa>
=======
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fe26 	bl	800217a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fe4a 	bl	80021cc <LL_RCC_MSI_SetCalibTrimming>
 8002538:	e013      	b.n	8002562 <HAL_RCC_OscConfig+0xaa>
>>>>>>> Stashed changes
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fe1b 	bl	8002e46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fe3f 	bl	8002e98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fce4 	bl	8003bec <RCC_SetFlashLatencyFromMSIRange>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e317      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fe1b 	bl	800217a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fe3f 	bl	80021cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fce4 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e317      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
<<<<<<< Updated upstream
 800322e:	f000 fcc9 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003232:	4603      	mov	r3, r0
 8003234:	4aa4      	ldr	r2, [pc, #656]	; (80034c8 <HAL_RCC_OscConfig+0x344>)
 8003236:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003238:	4ba4      	ldr	r3, [pc, #656]	; (80034cc <HAL_RCC_OscConfig+0x348>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd fc83 	bl	8000b48 <HAL_InitTick>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d039      	beq.n	80032bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e308      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 8002562:	f000 fcc9 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002566:	4603      	mov	r3, r0
 8002568:	4aa4      	ldr	r2, [pc, #656]	; (80027fc <HAL_RCC_OscConfig+0x344>)
 800256a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800256c:	4ba4      	ldr	r3, [pc, #656]	; (8002800 <HAL_RCC_OscConfig+0x348>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f8eb 	bl	800174c <HAL_InitTick>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d039      	beq.n	80025f0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e308      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< Updated upstream
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01e      	beq.n	8003292 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003254:	f7ff fdc8 	bl	8002de8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003258:	f7fd fcc4 	bl	8000be4 <HAL_GetTick>
 800325c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003260:	f7fd fcc0 	bl	8000be4 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e2f5      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003272:	f7ff fdd7 	bl	8002e24 <LL_RCC_MSI_IsReady>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f1      	beq.n	8003260 <HAL_RCC_OscConfig+0xdc>
=======
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01e      	beq.n	80025c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002588:	f7ff fdc8 	bl	800211c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800258c:	f7ff f92c 	bl	80017e8 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002594:	f7ff f928 	bl	80017e8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e2f5      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80025a6:	f7ff fdd7 	bl	8002158 <LL_RCC_MSI_IsReady>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f1      	beq.n	8002594 <HAL_RCC_OscConfig+0xdc>
>>>>>>> Stashed changes
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fde0 	bl	8002e46 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fe04 	bl	8002e98 <LL_RCC_MSI_SetCalibTrimming>
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x13a>
=======
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fde0 	bl	800217a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fe04 	bl	80021cc <LL_RCC_MSI_SetCalibTrimming>
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x13a>
>>>>>>> Stashed changes

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< Updated upstream
 8003292:	f7ff fdb8 	bl	8002e06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003296:	f7fd fca5 	bl	8000be4 <HAL_GetTick>
 800329a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800329e:	f7fd fca1 	bl	8000be4 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e2d6      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80032b0:	f7ff fdb8 	bl	8002e24 <LL_RCC_MSI_IsReady>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f1      	bne.n	800329e <HAL_RCC_OscConfig+0x11a>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80032bc:	bf00      	nop
=======
 80025c6:	f7ff fdb8 	bl	800213a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ca:	f7ff f90d 	bl	80017e8 <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d2:	f7ff f909 	bl	80017e8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e2d6      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80025e4:	f7ff fdb8 	bl	8002158 <LL_RCC_MSI_IsReady>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f1      	bne.n	80025d2 <HAL_RCC_OscConfig+0x11a>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80025f0:	bf00      	nop
>>>>>>> Stashed changes
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d047      	beq.n	800335a <HAL_RCC_OscConfig+0x1d6>
=======
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d047      	beq.n	800268e <HAL_RCC_OscConfig+0x1d6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80032ca:	f7ff fe0e 	bl	8002eea <LL_RCC_GetSysClkSource>
 80032ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d0:	f7ff feef 	bl	80030b2 <LL_RCC_PLL_GetMainSource>
 80032d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_OscConfig+0x164>
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d108      	bne.n	80032f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d105      	bne.n	80032f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d134      	bne.n	800335a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e2b4      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 80025fe:	f7ff fe0e 	bl	800221e <LL_RCC_GetSysClkSource>
 8002602:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002604:	f7ff feef 	bl	80023e6 <LL_RCC_PLL_GetMainSource>
 8002608:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d005      	beq.n	800261c <HAL_RCC_OscConfig+0x164>
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d108      	bne.n	8002628 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d105      	bne.n	8002628 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d134      	bne.n	800268e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e2b4      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d102      	bne.n	8003304 <HAL_RCC_OscConfig+0x180>
 80032fe:	f7ff fbf5 	bl	8002aec <LL_RCC_HSE_Enable>
 8003302:	e001      	b.n	8003308 <HAL_RCC_OscConfig+0x184>
 8003304:	f7ff fc01 	bl	8002b0a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d012      	beq.n	8003336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fd fc68 	bl	8000be4 <HAL_GetTick>
 8003314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fd fc64 	bl	8000be4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e299      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800332a:	f7ff fbfd 	bl	8002b28 <LL_RCC_HSE_IsReady>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f1      	beq.n	8003318 <HAL_RCC_OscConfig+0x194>
 8003334:	e011      	b.n	800335a <HAL_RCC_OscConfig+0x1d6>
=======
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d102      	bne.n	8002638 <HAL_RCC_OscConfig+0x180>
 8002632:	f7ff fbf5 	bl	8001e20 <LL_RCC_HSE_Enable>
 8002636:	e001      	b.n	800263c <HAL_RCC_OscConfig+0x184>
 8002638:	f7ff fc01 	bl	8001e3e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d012      	beq.n	800266a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7ff f8d0 	bl	80017e8 <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7ff f8cc 	bl	80017e8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e299      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800265e:	f7ff fbfd 	bl	8001e5c <LL_RCC_HSE_IsReady>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f1      	beq.n	800264c <HAL_RCC_OscConfig+0x194>
 8002668:	e011      	b.n	800268e <HAL_RCC_OscConfig+0x1d6>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8003336:	f7fd fc55 	bl	8000be4 <HAL_GetTick>
 800333a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333e:	f7fd fc51 	bl	8000be4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	; 0x64
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e286      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003350:	f7ff fbea 	bl	8002b28 <LL_RCC_HSE_IsReady>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f1      	bne.n	800333e <HAL_RCC_OscConfig+0x1ba>
=======
 800266a:	f7ff f8bd 	bl	80017e8 <HAL_GetTick>
 800266e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002672:	f7ff f8b9 	bl	80017e8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b64      	cmp	r3, #100	; 0x64
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e286      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002684:	f7ff fbea 	bl	8001e5c <LL_RCC_HSE_IsReady>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f1      	bne.n	8002672 <HAL_RCC_OscConfig+0x1ba>
>>>>>>> Stashed changes
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d04c      	beq.n	8003400 <HAL_RCC_OscConfig+0x27c>
=======
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d04c      	beq.n	8002734 <HAL_RCC_OscConfig+0x27c>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8003366:	f7ff fdc0 	bl	8002eea <LL_RCC_GetSysClkSource>
 800336a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336c:	f7ff fea1 	bl	80030b2 <LL_RCC_PLL_GetMainSource>
 8003370:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b04      	cmp	r3, #4
 8003376:	d005      	beq.n	8003384 <HAL_RCC_OscConfig+0x200>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d10e      	bne.n	800339c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e266      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 800269a:	f7ff fdc0 	bl	800221e <LL_RCC_GetSysClkSource>
 800269e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a0:	f7ff fea1 	bl	80023e6 <LL_RCC_PLL_GetMainSource>
 80026a4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_OscConfig+0x200>
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d10e      	bne.n	80026d0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e266      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fc09 	bl	8002bac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800339a:	e031      	b.n	8003400 <HAL_RCC_OscConfig+0x27c>
=======
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fc09 	bl	8001ee0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80026ce:	e031      	b.n	8002734 <HAL_RCC_OscConfig+0x27c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d019      	beq.n	80033d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	f7ff fbd2 	bl	8002b4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fd fc1c 	bl	8000be4 <HAL_GetTick>
 80033ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fd fc18 	bl	8000be4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e24d      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80033c2:	f7ff fbe1 	bl	8002b88 <LL_RCC_HSI_IsReady>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f1      	beq.n	80033b0 <HAL_RCC_OscConfig+0x22c>
=======
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d019      	beq.n	800270c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	f7ff fbd2 	bl	8001e80 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7ff f884 	bl	80017e8 <HAL_GetTick>
 80026e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e4:	f7ff f880 	bl	80017e8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e24d      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80026f6:	f7ff fbe1 	bl	8001ebc <LL_RCC_HSI_IsReady>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f1      	beq.n	80026e4 <HAL_RCC_OscConfig+0x22c>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fbeb 	bl	8002bac <LL_RCC_HSI_SetCalibTrimming>
 80033d6:	e013      	b.n	8003400 <HAL_RCC_OscConfig+0x27c>
=======
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fbeb 	bl	8001ee0 <LL_RCC_HSI_SetCalibTrimming>
 800270a:	e013      	b.n	8002734 <HAL_RCC_OscConfig+0x27c>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 80033d8:	f7ff fbc7 	bl	8002b6a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd fc02 	bl	8000be4 <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fd fbfe 	bl	8000be4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e233      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80033f6:	f7ff fbc7 	bl	8002b88 <LL_RCC_HSI_IsReady>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f1      	bne.n	80033e4 <HAL_RCC_OscConfig+0x260>
=======
 800270c:	f7ff fbc7 	bl	8001e9e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff f86a 	bl	80017e8 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002718:	f7ff f866 	bl	80017e8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e233      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800272a:	f7ff fbc7 	bl	8001ebc <LL_RCC_HSI_IsReady>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f1      	bne.n	8002718 <HAL_RCC_OscConfig+0x260>
>>>>>>> Stashed changes
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
<<<<<<< Updated upstream
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80a3 	beq.w	8003560 <HAL_RCC_OscConfig+0x3dc>
=======
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a3 	beq.w	8002894 <HAL_RCC_OscConfig+0x3dc>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d076      	beq.n	8003510 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d046      	beq.n	80034bc <HAL_RCC_OscConfig+0x338>
=======
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d076      	beq.n	8002844 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d046      	beq.n	80027f0 <HAL_RCC_OscConfig+0x338>
>>>>>>> Stashed changes
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
<<<<<<< Updated upstream
 800342e:	f7ff fc7e 	bl	8002d2e <LL_RCC_LSI1_IsReady>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d113      	bne.n	8003460 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003438:	f7ff fc57 	bl	8002cea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800343c:	f7fd fbd2 	bl	8000be4 <HAL_GetTick>
 8003440:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003444:	f7fd fbce 	bl	8000be4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e203      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003456:	f7ff fc6a 	bl	8002d2e <LL_RCC_LSI1_IsReady>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f1      	beq.n	8003444 <HAL_RCC_OscConfig+0x2c0>
=======
 8002762:	f7ff fc7e 	bl	8002062 <LL_RCC_LSI1_IsReady>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d113      	bne.n	8002794 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800276c:	f7ff fc57 	bl	800201e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002770:	f7ff f83a 	bl	80017e8 <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002778:	f7ff f836 	bl	80017e8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e203      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800278a:	f7ff fc6a 	bl	8002062 <LL_RCC_LSI1_IsReady>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f1      	beq.n	8002778 <HAL_RCC_OscConfig+0x2c0>
>>>>>>> Stashed changes
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
<<<<<<< Updated upstream
 8003460:	f7ff fc77 	bl	8002d52 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fd fbbe 	bl	8000be4 <HAL_GetTick>
 8003468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800346c:	f7fd fbba 	bl	8000be4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b03      	cmp	r3, #3
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1ef      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800347e:	f7ff fc8a 	bl	8002d96 <LL_RCC_LSI2_IsReady>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f1      	beq.n	800346c <HAL_RCC_OscConfig+0x2e8>
=======
 8002794:	f7ff fc77 	bl	8002086 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7ff f826 	bl	80017e8 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027a0:	f7ff f822 	bl	80017e8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1ef      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80027b2:	f7ff fc8a 	bl	80020ca <LL_RCC_LSI2_IsReady>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f1      	beq.n	80027a0 <HAL_RCC_OscConfig+0x2e8>
>>>>>>> Stashed changes
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
<<<<<<< Updated upstream
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fc94 	bl	8002dba <LL_RCC_LSI2_SetTrimming>
=======
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fc94 	bl	80020ee <LL_RCC_LSI2_SetTrimming>
>>>>>>> Stashed changes

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
<<<<<<< Updated upstream
 8003492:	f7ff fc3b 	bl	8002d0c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fd fba5 	bl	8000be4 <HAL_GetTick>
 800349a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800349e:	f7fd fba1 	bl	8000be4 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1d6      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034b0:	f7ff fc3d 	bl	8002d2e <LL_RCC_LSI1_IsReady>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f1      	bne.n	800349e <HAL_RCC_OscConfig+0x31a>
 80034ba:	e051      	b.n	8003560 <HAL_RCC_OscConfig+0x3dc>
=======
 80027c6:	f7ff fc3b 	bl	8002040 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7ff f80d 	bl	80017e8 <HAL_GetTick>
 80027ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027d2:	f7ff f809 	bl	80017e8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1d6      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80027e4:	f7ff fc3d 	bl	8002062 <LL_RCC_LSI1_IsReady>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f1      	bne.n	80027d2 <HAL_RCC_OscConfig+0x31a>
 80027ee:	e051      	b.n	8002894 <HAL_RCC_OscConfig+0x3dc>
>>>>>>> Stashed changes
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
<<<<<<< Updated upstream
 80034bc:	f7ff fc15 	bl	8002cea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fd fb90 	bl	8000be4 <HAL_GetTick>
 80034c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034c6:	e00c      	b.n	80034e2 <HAL_RCC_OscConfig+0x35e>
 80034c8:	20000008 	.word	0x20000008
 80034cc:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034d0:	f7fd fb88 	bl	8000be4 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1bd      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034e2:	f7ff fc24 	bl	8002d2e <LL_RCC_LSI1_IsReady>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f1      	beq.n	80034d0 <HAL_RCC_OscConfig+0x34c>
=======
 80027f0:	f7ff fc15 	bl	800201e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fff8 	bl	80017e8 <HAL_GetTick>
 80027f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80027fa:	e00c      	b.n	8002816 <HAL_RCC_OscConfig+0x35e>
 80027fc:	20000008 	.word	0x20000008
 8002800:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002804:	f7fe fff0 	bl	80017e8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1bd      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002816:	f7ff fc24 	bl	8002062 <LL_RCC_LSI1_IsReady>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f1      	beq.n	8002804 <HAL_RCC_OscConfig+0x34c>
>>>>>>> Stashed changes
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
<<<<<<< Updated upstream
 80034ec:	f7ff fc42 	bl	8002d74 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034f2:	f7fd fb77 	bl	8000be4 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1ac      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003504:	f7ff fc47 	bl	8002d96 <LL_RCC_LSI2_IsReady>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f1      	bne.n	80034f2 <HAL_RCC_OscConfig+0x36e>
 800350e:	e027      	b.n	8003560 <HAL_RCC_OscConfig+0x3dc>
=======
 8002820:	f7ff fc42 	bl	80020a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002826:	f7fe ffdf 	bl	80017e8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b03      	cmp	r3, #3
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1ac      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002838:	f7ff fc47 	bl	80020ca <LL_RCC_LSI2_IsReady>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f1      	bne.n	8002826 <HAL_RCC_OscConfig+0x36e>
 8002842:	e027      	b.n	8002894 <HAL_RCC_OscConfig+0x3dc>
>>>>>>> Stashed changes
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
<<<<<<< Updated upstream
 8003510:	f7ff fc30 	bl	8002d74 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fd fb66 	bl	8000be4 <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800351c:	f7fd fb62 	bl	8000be4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b03      	cmp	r3, #3
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e197      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800352e:	f7ff fc32 	bl	8002d96 <LL_RCC_LSI2_IsReady>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f1      	bne.n	800351c <HAL_RCC_OscConfig+0x398>
=======
 8002844:	f7ff fc30 	bl	80020a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe ffce 	bl	80017e8 <HAL_GetTick>
 800284c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002850:	f7fe ffca 	bl	80017e8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b03      	cmp	r3, #3
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e197      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002862:	f7ff fc32 	bl	80020ca <LL_RCC_LSI2_IsReady>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f1      	bne.n	8002850 <HAL_RCC_OscConfig+0x398>
>>>>>>> Stashed changes
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
<<<<<<< Updated upstream
 8003538:	f7ff fbe8 	bl	8002d0c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fd fb52 	bl	8000be4 <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003544:	f7fd fb4e 	bl	8000be4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e183      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003556:	f7ff fbea 	bl	8002d2e <LL_RCC_LSI1_IsReady>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f1      	bne.n	8003544 <HAL_RCC_OscConfig+0x3c0>
=======
 800286c:	f7ff fbe8 	bl	8002040 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe ffba 	bl	80017e8 <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002878:	f7fe ffb6 	bl	80017e8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e183      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800288a:	f7ff fbea 	bl	8002062 <LL_RCC_LSI1_IsReady>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f1      	bne.n	8002878 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d05b      	beq.n	8003624 <HAL_RCC_OscConfig+0x4a0>
=======
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d05b      	beq.n	8002958 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> Stashed changes
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
<<<<<<< Updated upstream
 800356c:	4ba7      	ldr	r3, [pc, #668]	; (800380c <HAL_RCC_OscConfig+0x688>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d114      	bne.n	80035a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003578:	f7ff fa1a 	bl	80029b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357c:	f7fd fb32 	bl	8000be4 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003584:	f7fd fb2e 	bl	8000be4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e163      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003596:	4b9d      	ldr	r3, [pc, #628]	; (800380c <HAL_RCC_OscConfig+0x688>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x400>
=======
 80028a0:	4ba7      	ldr	r3, [pc, #668]	; (8002b40 <HAL_RCC_OscConfig+0x688>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d114      	bne.n	80028d6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80028ac:	f7ff fa88 	bl	8001dc0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b0:	f7fe ff9a 	bl	80017e8 <HAL_GetTick>
 80028b4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe ff96 	bl	80017e8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e163      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ca:	4b9d      	ldr	r3, [pc, #628]	; (8002b40 <HAL_RCC_OscConfig+0x688>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x400>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d102      	bne.n	80035b0 <HAL_RCC_OscConfig+0x42c>
 80035aa:	f7ff fb48 	bl	8002c3e <LL_RCC_LSE_Enable>
 80035ae:	e00c      	b.n	80035ca <HAL_RCC_OscConfig+0x446>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d104      	bne.n	80035c2 <HAL_RCC_OscConfig+0x43e>
 80035b8:	f7ff fb63 	bl	8002c82 <LL_RCC_LSE_EnableBypass>
 80035bc:	f7ff fb3f 	bl	8002c3e <LL_RCC_LSE_Enable>
 80035c0:	e003      	b.n	80035ca <HAL_RCC_OscConfig+0x446>
 80035c2:	f7ff fb4d 	bl	8002c60 <LL_RCC_LSE_Disable>
 80035c6:	f7ff fb6d 	bl	8002ca4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d014      	beq.n	80035fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fd fb07 	bl	8000be4 <HAL_GetTick>
 80035d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fd fb03 	bl	8000be4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e136      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80035f0:	f7ff fb69 	bl	8002cc6 <LL_RCC_LSE_IsReady>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ef      	beq.n	80035da <HAL_RCC_OscConfig+0x456>
 80035fa:	e013      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
=======
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_OscConfig+0x42c>
 80028de:	f7ff fb48 	bl	8001f72 <LL_RCC_LSE_Enable>
 80028e2:	e00c      	b.n	80028fe <HAL_RCC_OscConfig+0x446>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d104      	bne.n	80028f6 <HAL_RCC_OscConfig+0x43e>
 80028ec:	f7ff fb63 	bl	8001fb6 <LL_RCC_LSE_EnableBypass>
 80028f0:	f7ff fb3f 	bl	8001f72 <LL_RCC_LSE_Enable>
 80028f4:	e003      	b.n	80028fe <HAL_RCC_OscConfig+0x446>
 80028f6:	f7ff fb4d 	bl	8001f94 <LL_RCC_LSE_Disable>
 80028fa:	f7ff fb6d 	bl	8001fd8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d014      	beq.n	8002930 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002906:	f7fe ff6f 	bl	80017e8 <HAL_GetTick>
 800290a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe ff6b 	bl	80017e8 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e136      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002924:	f7ff fb69 	bl	8001ffa <LL_RCC_LSE_IsReady>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ef      	beq.n	800290e <HAL_RCC_OscConfig+0x456>
 800292e:	e013      	b.n	8002958 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80035fc:	f7fd faf2 	bl	8000be4 <HAL_GetTick>
 8003600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003602:	e00a      	b.n	800361a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fd faee 	bl	8000be4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e121      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800361a:	f7ff fb54 	bl	8002cc6 <LL_RCC_LSE_IsReady>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ef      	bne.n	8003604 <HAL_RCC_OscConfig+0x480>
=======
 8002930:	f7fe ff5a 	bl	80017e8 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe ff56 	bl	80017e8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e121      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800294e:	f7ff fb54 	bl	8001ffa <LL_RCC_LSE_IsReady>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ef      	bne.n	8002938 <HAL_RCC_OscConfig+0x480>
>>>>>>> Stashed changes
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02c      	beq.n	800368a <HAL_RCC_OscConfig+0x506>
=======
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d02c      	beq.n	80029be <HAL_RCC_OscConfig+0x506>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< Updated upstream
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d014      	beq.n	8003662 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003638:	f7ff facd 	bl	8002bd6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fd fad2 	bl	8000be4 <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003644:	f7fd face 	bl	8000be4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e103      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003656:	f7ff fae0 	bl	8002c1a <LL_RCC_HSI48_IsReady>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f1      	beq.n	8003644 <HAL_RCC_OscConfig+0x4c0>
 8003660:	e013      	b.n	800368a <HAL_RCC_OscConfig+0x506>
=======
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	d014      	beq.n	8002996 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800296c:	f7ff facd 	bl	8001f0a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe ff3a 	bl	80017e8 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002978:	f7fe ff36 	bl	80017e8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e103      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800298a:	f7ff fae0 	bl	8001f4e <LL_RCC_HSI48_IsReady>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f1      	beq.n	8002978 <HAL_RCC_OscConfig+0x4c0>
 8002994:	e013      	b.n	80029be <HAL_RCC_OscConfig+0x506>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
 8003662:	f7ff fac9 	bl	8002bf8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fd fabd 	bl	8000be4 <HAL_GetTick>
 800366a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800366e:	f7fd fab9 	bl	8000be4 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0ee      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003680:	f7ff facb 	bl	8002c1a <LL_RCC_HSI48_IsReady>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f1      	bne.n	800366e <HAL_RCC_OscConfig+0x4ea>
=======
 8002996:	f7ff fac9 	bl	8001f2c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fe ff25 	bl	80017e8 <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029a2:	f7fe ff21 	bl	80017e8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e0ee      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80029b4:	f7ff facb 	bl	8001f4e <LL_RCC_HSI48_IsReady>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f1      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> Stashed changes
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80e4 	beq.w	800385c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003694:	f7ff fc29 	bl	8002eea <LL_RCC_GetSysClkSource>
 8003698:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	f040 80b4 	bne.w	8003814 <HAL_RCC_OscConfig+0x690>
=======
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80e4 	beq.w	8002b90 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c8:	f7ff fc29 	bl	800221e <LL_RCC_GetSysClkSource>
 80029cc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	2b02      	cmp	r3, #2
 80029dc:	f040 80b4 	bne.w	8002b48 <HAL_RCC_OscConfig+0x690>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< Updated upstream
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0203 	and.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d123      	bne.n	8003702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d11c      	bne.n	8003702 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d114      	bne.n	8003702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d10d      	bne.n	8003702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d05d      	beq.n	80037be <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b0c      	cmp	r3, #12
 8003706:	d058      	beq.n	80037ba <HAL_RCC_OscConfig+0x636>
=======
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0203 	and.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d123      	bne.n	8002a36 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d11c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d114      	bne.n	8002a36 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10d      	bne.n	8002a36 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d05d      	beq.n	8002af2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	d058      	beq.n	8002aee <HAL_RCC_OscConfig+0x636>
>>>>>>> Stashed changes
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< Updated upstream
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0a1      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0a1      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 800371a:	f7ff fc84 	bl	8003026 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800371e:	f7fd fa61 	bl	8000be4 <HAL_GetTick>
 8003722:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd fa5d 	bl	8000be4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e092      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ef      	bne.n	8003726 <HAL_RCC_OscConfig+0x5a2>
=======
 8002a4e:	f7ff fc84 	bl	800235a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a52:	f7fe fec9 	bl	80017e8 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe fec5 	bl	80017e8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e092      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ef      	bne.n	8002a5a <HAL_RCC_OscConfig+0x5a2>
>>>>>>> Stashed changes
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	4b30      	ldr	r3, [pc, #192]	; (8003810 <HAL_RCC_OscConfig+0x68c>)
 800374e:	4013      	ands	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800375e:	0212      	lsls	r2, r2, #8
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003766:	4311      	orrs	r1, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003772:	430a      	orrs	r2, r1
 8003774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003778:	4313      	orrs	r3, r2
 800377a:	60cb      	str	r3, [r1, #12]
=======
 8002a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_RCC_OscConfig+0x68c>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a8c:	4311      	orrs	r1, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a92:	0212      	lsls	r2, r2, #8
 8002a94:	4311      	orrs	r1, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a9a:	4311      	orrs	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aa0:	4311      	orrs	r1, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 800377c:	f7ff fc44 	bl	8003008 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003790:	f7fd fa28 	bl	8000be4 <HAL_GetTick>
 8003794:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fd fa24 	bl	8000be4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e059      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b8:	e050      	b.n	800385c <HAL_RCC_OscConfig+0x6d8>
=======
 8002ab0:	f7ff fc44 	bl	800233c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac4:	f7fe fe90 	bl	80017e8 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fe8c 	bl	80017e8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e059      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ef      	beq.n	8002acc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aec:	e050      	b.n	8002b90 <HAL_RCC_OscConfig+0x6d8>
>>>>>>> Stashed changes
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< Updated upstream
 80037ba:	2301      	movs	r3, #1
 80037bc:	e04f      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 8002aee:	2301      	movs	r3, #1
 8002af0:	e04f      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< Updated upstream
 80037be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d147      	bne.n	800385c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037cc:	f7ff fc1c 	bl	8003008 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037e0:	f7fd fa00 	bl	8000be4 <HAL_GetTick>
 80037e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fd f9fc 	bl	8000be4 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e031      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ef      	beq.n	80037e8 <HAL_RCC_OscConfig+0x664>
 8003808:	e028      	b.n	800385c <HAL_RCC_OscConfig+0x6d8>
 800380a:	bf00      	nop
 800380c:	58000400 	.word	0x58000400
 8003810:	11c1808c 	.word	0x11c1808c
=======
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d147      	bne.n	8002b90 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b00:	f7ff fc1c 	bl	800233c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b14:	f7fe fe68 	bl	80017e8 <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fe64 	bl	80017e8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e031      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ef      	beq.n	8002b1c <HAL_RCC_OscConfig+0x664>
 8002b3c:	e028      	b.n	8002b90 <HAL_RCC_OscConfig+0x6d8>
 8002b3e:	bf00      	nop
 8002b40:	58000400 	.word	0x58000400
 8002b44:	11c1808c 	.word	0x11c1808c
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
<<<<<<< Updated upstream
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d01e      	beq.n	8003858 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	f7ff fc04 	bl	8003026 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd f9e1 	bl	8000be4 <HAL_GetTick>
 8003822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7fd f9dd 	bl	8000be4 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e012      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1ef      	bne.n	8003826 <HAL_RCC_OscConfig+0x6a2>
=======
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d01e      	beq.n	8002b8c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	f7ff fc04 	bl	800235a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fe49 	bl	80017e8 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe fe45 	bl	80017e8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e012      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ef      	bne.n	8002b5a <HAL_RCC_OscConfig+0x6a2>
>>>>>>> Stashed changes
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
<<<<<<< Updated upstream
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_OscConfig+0x6e4>)
 8003852:	4013      	ands	r3, r2
 8003854:	60cb      	str	r3, [r1, #12]
 8003856:	e001      	b.n	800385c <HAL_RCC_OscConfig+0x6d8>
=======
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_OscConfig+0x6e4>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	60cb      	str	r3, [r1, #12]
 8002b8a:	e001      	b.n	8002b90 <HAL_RCC_OscConfig+0x6d8>
>>>>>>> Stashed changes
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< Updated upstream
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x6da>
=======
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x6da>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3734      	adds	r7, #52	; 0x34
 8003862:	46bd      	mov	sp, r7
 8003864:	bd90      	pop	{r4, r7, pc}
 8003866:	bf00      	nop
 8003868:	eefefffc 	.word	0xeefefffc

0800386c <HAL_RCC_ClockConfig>:
=======
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3734      	adds	r7, #52	; 0x34
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	eefefffc 	.word	0xeefefffc

08002ba0 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
=======
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e12d      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
=======
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e12d      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8003880:	4b98      	ldr	r3, [pc, #608]	; (8003ae4 <HAL_RCC_ClockConfig+0x278>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d91b      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b95      	ldr	r3, [pc, #596]	; (8003ae4 <HAL_RCC_ClockConfig+0x278>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0207 	bic.w	r2, r3, #7
 8003896:	4993      	ldr	r1, [pc, #588]	; (8003ae4 <HAL_RCC_ClockConfig+0x278>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389e:	f7fd f9a1 	bl	8000be4 <HAL_GetTick>
 80038a2:	60f8      	str	r0, [r7, #12]
=======
 8002bb4:	4b98      	ldr	r3, [pc, #608]	; (8002e18 <HAL_RCC_ClockConfig+0x278>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d91b      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b95      	ldr	r3, [pc, #596]	; (8002e18 <HAL_RCC_ClockConfig+0x278>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	4993      	ldr	r1, [pc, #588]	; (8002e18 <HAL_RCC_ClockConfig+0x278>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fe09 	bl	80017e8 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038a6:	f7fd f99d 	bl	8000be4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e111      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b8:	4b8a      	ldr	r3, [pc, #552]	; (8003ae4 <HAL_RCC_ClockConfig+0x278>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d1ef      	bne.n	80038a6 <HAL_RCC_ClockConfig+0x3a>
=======
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bda:	f7fe fe05 	bl	80017e8 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e111      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bec:	4b8a      	ldr	r3, [pc, #552]	; (8002e18 <HAL_RCC_ClockConfig+0x278>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d1ef      	bne.n	8002bda <HAL_RCC_ClockConfig+0x3a>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fb13 	bl	8002f02 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038dc:	f7fd f982 	bl	8000be4 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038e4:	f7fd f97e 	bl	8000be4 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0f2      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038f6:	f7ff fbe8 	bl	80030ca <LL_RCC_IsActiveFlag_HPRE>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f1      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x78>
=======
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fb13 	bl	8002236 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c10:	f7fe fdea 	bl	80017e8 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c18:	f7fe fde6 	bl	80017e8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e0f2      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c2a:	f7ff fbe8 	bl	80023fe <LL_RCC_IsActiveFlag_HPRE>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f1      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x78>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
<<<<<<< Updated upstream
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fb0a 	bl	8002f2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003916:	f7fd f965 	bl	8000be4 <HAL_GetTick>
 800391a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800391e:	f7fd f961 	bl	8000be4 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e0d5      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003930:	f7ff fbdd 	bl	80030ee <LL_RCC_IsActiveFlag_C2HPRE>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f1      	beq.n	800391e <HAL_RCC_ClockConfig+0xb2>
=======
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d016      	beq.n	8002c6e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fb0a 	bl	800225e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fdcd 	bl	80017e8 <HAL_GetTick>
 8002c4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c52:	f7fe fdc9 	bl	80017e8 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0d5      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002c64:	f7ff fbdd 	bl	8002422 <LL_RCC_IsActiveFlag_C2HPRE>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f1      	beq.n	8002c52 <HAL_RCC_ClockConfig+0xb2>
>>>>>>> Stashed changes
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
<<<<<<< Updated upstream
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fb03 	bl	8002f56 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003950:	f7fd f948 	bl	8000be4 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003958:	f7fd f944 	bl	8000be4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e0b8      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800396a:	f7ff fbd3 	bl	8003114 <LL_RCC_IsActiveFlag_SHDHPRE>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f1      	beq.n	8003958 <HAL_RCC_ClockConfig+0xec>
=======
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fb03 	bl	800228a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c84:	f7fe fdb0 	bl	80017e8 <HAL_GetTick>
 8002c88:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c8c:	f7fe fdac 	bl	80017e8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0b8      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002c9e:	f7ff fbd3 	bl	8002448 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f1      	beq.n	8002c8c <HAL_RCC_ClockConfig+0xec>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d016      	beq.n	80039ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fafd 	bl	8002f84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800398a:	f7fd f92b 	bl	8000be4 <HAL_GetTick>
 800398e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003992:	f7fd f927 	bl	8000be4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e09b      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039a4:	f7ff fbc9 	bl	800313a <LL_RCC_IsActiveFlag_PPRE1>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f1      	beq.n	8003992 <HAL_RCC_ClockConfig+0x126>
=======
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d016      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fafd 	bl	80022b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cbe:	f7fe fd93 	bl	80017e8 <HAL_GetTick>
 8002cc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cc6:	f7fe fd8f 	bl	80017e8 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e09b      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002cd8:	f7ff fbc9 	bl	800246e <LL_RCC_IsActiveFlag_PPRE1>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f1      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x126>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d017      	beq.n	80039ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff faf3 	bl	8002fac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039c6:	f7fd f90d 	bl	8000be4 <HAL_GetTick>
 80039ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039ce:	f7fd f909 	bl	8000be4 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e07d      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039e0:	f7ff fbbd 	bl	800315e <LL_RCC_IsActiveFlag_PPRE2>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f1      	beq.n	80039ce <HAL_RCC_ClockConfig+0x162>
=======
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d017      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff faf3 	bl	80022e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cfa:	f7fe fd75 	bl	80017e8 <HAL_GetTick>
 8002cfe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d02:	f7fe fd71 	bl	80017e8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e07d      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d14:	f7ff fbbd 	bl	8002492 <LL_RCC_IsActiveFlag_PPRE2>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f1      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x162>
>>>>>>> Stashed changes
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d043      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x212>
=======
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d043      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x212>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d106      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80039fe:	f7ff f893 	bl	8002b28 <LL_RCC_HSE_IsReady>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11e      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e067      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
=======
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d106      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002d32:	f7ff f893 	bl	8001e5c <LL_RCC_HSE_IsReady>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d11e      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e067      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003a14:	f7ff fb16 	bl	8003044 <LL_RCC_PLL_IsReady>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d113      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e05c      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
=======
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002d48:	f7ff fb16 	bl	8002378 <LL_RCC_PLL_IsReady>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d113      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e05c      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< Updated upstream
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a2a:	f7ff f9fb 	bl	8002e24 <LL_RCC_MSI_IsReady>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d108      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e051      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
=======
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002d5e:	f7ff f9fb 	bl	8002158 <LL_RCC_MSI_IsReady>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d108      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e051      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
<<<<<<< Updated upstream
 8003a38:	f7ff f8a6 	bl	8002b88 <LL_RCC_HSI_IsReady>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e04a      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
=======
 8002d6c:	f7ff f8a6 	bl	8001ebc <LL_RCC_HSI_IsReady>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e04a      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
>>>>>>> Stashed changes
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fa39 	bl	8002ec2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a50:	f7fd f8c8 	bl	8000be4 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fd f8c4 	bl	8000be4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e036      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	f7ff fa3c 	bl	8002eea <LL_RCC_GetSysClkSource>
 8003a72:	4602      	mov	r2, r0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d1ec      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x1ec>
=======
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fa39 	bl	80021f6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fe fd30 	bl	80017e8 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe fd2c 	bl	80017e8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e036      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	f7ff fa3c 	bl	800221e <LL_RCC_GetSysClkSource>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d1ec      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x1ec>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_RCC_ClockConfig+0x278>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d21b      	bcs.n	8003ac4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8c:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <HAL_RCC_ClockConfig+0x278>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 0207 	bic.w	r2, r3, #7
 8003a94:	4913      	ldr	r1, [pc, #76]	; (8003ae4 <HAL_RCC_ClockConfig+0x278>)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fd f8a2 	bl	8000be4 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]
=======
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_ClockConfig+0x278>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d21b      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc0:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_RCC_ClockConfig+0x278>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 0207 	bic.w	r2, r3, #7
 8002dc8:	4913      	ldr	r1, [pc, #76]	; (8002e18 <HAL_RCC_ClockConfig+0x278>)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd0:	f7fe fd0a 	bl	80017e8 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003aa4:	f7fd f89e 	bl	8000be4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e012      	b.n	8003adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_ClockConfig+0x278>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d1ef      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x238>
=======
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dd8:	f7fe fd06 	bl	80017e8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e012      	b.n	8002e10 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_ClockConfig+0x278>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1ef      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x238>
>>>>>>> Stashed changes
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
<<<<<<< Updated upstream
 8003ac4:	f000 f87e 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <HAL_RCC_ClockConfig+0x27c>)
 8003acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003ace:	f7fd f895 	bl	8000bfc <HAL_GetTickPrio>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd f837 	bl	8000b48 <HAL_InitTick>
 8003ada:	4603      	mov	r3, r0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	58004000 	.word	0x58004000
 8003ae8:	20000008 	.word	0x20000008

08003aec <HAL_RCC_GetSysClockFreq>:
=======
 8002df8:	f000 f87e 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_RCC_ClockConfig+0x27c>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002e02:	f7fe fcfd 	bl	8001800 <HAL_GetTickPrio>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fc9f 	bl	800174c <HAL_InitTick>
 8002e0e:	4603      	mov	r3, r0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	58004000 	.word	0x58004000
 8002e1c:	20000008 	.word	0x20000008

08002e20 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
=======
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8003af2:	f7ff f9fa 	bl	8002eea <LL_RCC_GetSysClkSource>
 8003af6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0x28>
=======
 8002e26:	f7ff f9fa 	bl	800221e <LL_RCC_GetSysClkSource>
 8002e2a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_RCC_GetSysClockFreq+0x28>
>>>>>>> Stashed changes
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
<<<<<<< Updated upstream
 8003afe:	f7ff f9b6 	bl	8002e6e <LL_RCC_MSI_GetRange>
 8003b02:	4603      	mov	r3, r0
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4a2b      	ldr	r2, [pc, #172]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e04b      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d102      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e045      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d10a      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b26:	f7fe ffcf 	bl	8002ac8 <LL_RCC_HSE_IsEnabledDiv2>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d102      	bne.n	8003b36 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e03a      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0xc0>
=======
 8002e32:	f7ff f9b6 	bl	80021a2 <LL_RCC_MSI_GetRange>
 8002e36:	4603      	mov	r3, r0
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	4a2b      	ldr	r2, [pc, #172]	; (8002eec <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e04b      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d102      	bne.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	e045      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d10a      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e5a:	f7fe ffcf 	bl	8001dfc <LL_RCC_HSE_IsEnabledDiv2>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d102      	bne.n	8002e6a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002e64:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e03a      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xc0>
>>>>>>> Stashed changes
    }
    else
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e037      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0xc0>
=======
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	e037      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xc0>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
<<<<<<< Updated upstream
 8003b3c:	f7ff fab9 	bl	80030b2 <LL_RCC_PLL_GetMainSource>
 8003b40:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d003      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x64>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x6a>
 8003b4e:	e00d      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b52:	60bb      	str	r3, [r7, #8]
        break;
 8003b54:	e015      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b56:	f7fe ffb7 	bl	8002ac8 <LL_RCC_HSE_IsEnabledDiv2>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d102      	bne.n	8003b66 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003b60:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b62:	60bb      	str	r3, [r7, #8]
=======
 8002e70:	f7ff fab9 	bl	80023e6 <LL_RCC_PLL_GetMainSource>
 8002e74:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d003      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x64>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x6a>
 8002e82:	e00d      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002e84:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e86:	60bb      	str	r3, [r7, #8]
        break;
 8002e88:	e015      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e8a:	f7fe ffb7 	bl	8001dfc <LL_RCC_HSE_IsEnabledDiv2>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d102      	bne.n	8002e9a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e96:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
<<<<<<< Updated upstream
 8003b64:	e00d      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b68:	60bb      	str	r3, [r7, #8]
        break;
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b6c:	f7ff f97f 	bl	8002e6e <LL_RCC_MSI_GetRange>
 8003b70:	4603      	mov	r3, r0
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7e:	60bb      	str	r3, [r7, #8]
        break;
 8003b80:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003b82:	f7ff fa71 	bl	8003068 <LL_RCC_PLL_GetN>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	fb03 f402 	mul.w	r4, r3, r2
 8003b8e:	f7ff fa84 	bl	800309a <LL_RCC_PLL_GetDivider>
 8003b92:	4603      	mov	r3, r0
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	3301      	adds	r3, #1
 8003b98:	fbb4 f4f3 	udiv	r4, r4, r3
 8003b9c:	f7ff fa71 	bl	8003082 <LL_RCC_PLL_GetR>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	0f5b      	lsrs	r3, r3, #29
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003baa:	60fb      	str	r3, [r7, #12]
=======
 8002e98:	e00d      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e9c:	60bb      	str	r3, [r7, #8]
        break;
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ea0:	f7ff f97f 	bl	80021a2 <LL_RCC_MSI_GetRange>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	60bb      	str	r3, [r7, #8]
        break;
 8002eb4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002eb6:	f7ff fa71 	bl	800239c <LL_RCC_PLL_GetN>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	fb03 f402 	mul.w	r4, r3, r2
 8002ec2:	f7ff fa84 	bl	80023ce <LL_RCC_PLL_GetDivider>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	3301      	adds	r3, #1
 8002ecc:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ed0:	f7ff fa71 	bl	80023b6 <LL_RCC_PLL_GetR>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	0f5b      	lsrs	r3, r3, #29
 8002ed8:	3301      	adds	r3, #1
 8002eda:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ede:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
<<<<<<< Updated upstream
 8003bac:	68fb      	ldr	r3, [r7, #12]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd90      	pop	{r4, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	08005d74 	.word	0x08005d74
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	01e84800 	.word	0x01e84800

08003bc4 <HAL_RCC_GetHCLKFreq>:
=======
 8002ee0:	68fb      	ldr	r3, [r7, #12]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd90      	pop	{r4, r7, pc}
 8002eea:	bf00      	nop
 8002eec:	08008268 	.word	0x08008268
 8002ef0:	00f42400 	.word	0x00f42400
 8002ef4:	01e84800 	.word	0x01e84800

08002ef8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8003bc4:	b598      	push	{r3, r4, r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003bc8:	f7ff ff90 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003bcc:	4604      	mov	r4, r0
 8003bce:	f7ff fa01 	bl	8002fd4 <LL_RCC_GetAHBPrescaler>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	4a03      	ldr	r2, [pc, #12]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x24>)
 8003bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	bd98      	pop	{r3, r4, r7, pc}
 8003be8:	08005d34 	.word	0x08005d34

08003bec <RCC_SetFlashLatencyFromMSIRange>:
=======
 8002ef8:	b598      	push	{r3, r4, r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002efc:	f7ff ff90 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002f00:	4604      	mov	r4, r0
 8002f02:	f7ff fa01 	bl	8002308 <LL_RCC_GetAHBPrescaler>
 8002f06:	4603      	mov	r3, r0
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x24>)
 8002f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f14:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd98      	pop	{r3, r4, r7, pc}
 8002f1c:	08008228 	.word	0x08008228

08002f20 <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> Stashed changes
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
<<<<<<< Updated upstream
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
=======
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
<<<<<<< Updated upstream
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2bb0      	cmp	r3, #176	; 0xb0
 8003bf8:	d903      	bls.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e007      	b.n	8003c12 <RCC_SetFlashLatencyFromMSIRange+0x26>
=======
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2bb0      	cmp	r3, #176	; 0xb0
 8002f2c:	d903      	bls.n	8002f36 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e007      	b.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0x26>
>>>>>>> Stashed changes
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
<<<<<<< Updated upstream
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c10:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003c12:	f7ff f9eb 	bl	8002fec <LL_RCC_GetAHB4Prescaler>
 8003c16:	4603      	mov	r3, r0
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	0c9c      	lsrs	r4, r3, #18
 8003c36:	f7fe fee3 	bl	8002a00 <HAL_PWREx_GetVoltageRange>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 f80c 	bl	8003c5c <RCC_SetFlashLatency>
 8003c44:	4603      	mov	r3, r0
=======
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002f46:	f7ff f9eb 	bl	8002320 <LL_RCC_GetAHB4Prescaler>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	0c9c      	lsrs	r4, r3, #18
 8002f6a:	f7fe ff39 	bl	8001de0 <HAL_PWREx_GetVoltageRange>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4619      	mov	r1, r3
 8002f72:	4620      	mov	r0, r4
 8002f74:	f000 f80c 	bl	8002f90 <RCC_SetFlashLatency>
 8002f78:	4603      	mov	r3, r0
>>>>>>> Stashed changes
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
<<<<<<< Updated upstream
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd90      	pop	{r4, r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	08005d74 	.word	0x08005d74
 8003c54:	08005d34 	.word	0x08005d34
 8003c58:	431bde83 	.word	0x431bde83

08003c5c <RCC_SetFlashLatency>:
=======
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08008268 	.word	0x08008268
 8002f88:	08008228 	.word	0x08008228
 8002f8c:	431bde83 	.word	0x431bde83

08002f90 <RCC_SetFlashLatency>:
>>>>>>> Stashed changes
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
<<<<<<< Updated upstream
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b093      	sub	sp, #76	; 0x4c
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003c66:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <RCC_SetFlashLatency+0xe8>)
 8003c68:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003c72:	4a35      	ldr	r2, [pc, #212]	; (8003d48 <RCC_SetFlashLatency+0xec>)
 8003c74:	f107 031c 	add.w	r3, r7, #28
 8003c78:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003c7e:	4b33      	ldr	r3, [pc, #204]	; (8003d4c <RCC_SetFlashLatency+0xf0>)
 8003c80:	f107 040c 	add.w	r4, r7, #12
 8003c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	647b      	str	r3, [r7, #68]	; 0x44
=======
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b093      	sub	sp, #76	; 0x4c
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <RCC_SetFlashLatency+0xe8>)
 8002f9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002fa6:	4a35      	ldr	r2, [pc, #212]	; (800307c <RCC_SetFlashLatency+0xec>)
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002fb2:	4b33      	ldr	r3, [pc, #204]	; (8003080 <RCC_SetFlashLatency+0xf0>)
 8002fb4:	f107 040c 	add.w	r4, r7, #12
 8002fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> Stashed changes
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< Updated upstream
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c94:	d11a      	bne.n	8003ccc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	643b      	str	r3, [r7, #64]	; 0x40
 8003c9a:	e013      	b.n	8003cc4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	3348      	adds	r3, #72	; 0x48
 8003ca2:	443b      	add	r3, r7
 8003ca4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d807      	bhi.n	8003cbe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	3348      	adds	r3, #72	; 0x48
 8003cb4:	443b      	add	r3, r7
 8003cb6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003cba:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003cbc:	e020      	b.n	8003d00 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d9e8      	bls.n	8003c9c <RCC_SetFlashLatency+0x40>
 8003cca:	e019      	b.n	8003d00 <RCC_SetFlashLatency+0xa4>
=======
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc8:	d11a      	bne.n	8003000 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8002fce:	e013      	b.n	8002ff8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	3348      	adds	r3, #72	; 0x48
 8002fd6:	443b      	add	r3, r7
 8002fd8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d807      	bhi.n	8002ff2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	3348      	adds	r3, #72	; 0x48
 8002fe8:	443b      	add	r3, r7
 8002fea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002fee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ff0:	e020      	b.n	8003034 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d9e8      	bls.n	8002fd0 <RCC_SetFlashLatency+0x40>
 8002ffe:	e019      	b.n	8003034 <RCC_SetFlashLatency+0xa4>
>>>>>>> Stashed changes
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
<<<<<<< Updated upstream
 8003ccc:	2300      	movs	r3, #0
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd0:	e013      	b.n	8003cfa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	3348      	adds	r3, #72	; 0x48
 8003cd8:	443b      	add	r3, r7
 8003cda:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d807      	bhi.n	8003cf4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	3348      	adds	r3, #72	; 0x48
 8003cea:	443b      	add	r3, r7
 8003cec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003cf0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003cf2:	e005      	b.n	8003d00 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d9e8      	bls.n	8003cd2 <RCC_SetFlashLatency+0x76>
=======
 8003000:	2300      	movs	r3, #0
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003004:	e013      	b.n	800302e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	3348      	adds	r3, #72	; 0x48
 800300c:	443b      	add	r3, r7
 800300e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	429a      	cmp	r2, r3
 8003016:	d807      	bhi.n	8003028 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	3348      	adds	r3, #72	; 0x48
 800301e:	443b      	add	r3, r7
 8003020:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003024:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003026:	e005      	b.n	8003034 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302a:	3301      	adds	r3, #1
 800302c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003030:	2b02      	cmp	r3, #2
 8003032:	d9e8      	bls.n	8003006 <RCC_SetFlashLatency+0x76>
>>>>>>> Stashed changes
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< Updated upstream
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <RCC_SetFlashLatency+0xf4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 0207 	bic.w	r2, r3, #7
 8003d08:	4911      	ldr	r1, [pc, #68]	; (8003d50 <RCC_SetFlashLatency+0xf4>)
 8003d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d10:	f7fc ff68 	bl	8000be4 <HAL_GetTick>
 8003d14:	63b8      	str	r0, [r7, #56]	; 0x38
=======
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <RCC_SetFlashLatency+0xf4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 0207 	bic.w	r2, r3, #7
 800303c:	4911      	ldr	r1, [pc, #68]	; (8003084 <RCC_SetFlashLatency+0xf4>)
 800303e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003044:	f7fe fbd0 	bl	80017e8 <HAL_GetTick>
 8003048:	63b8      	str	r0, [r7, #56]	; 0x38
>>>>>>> Stashed changes

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< Updated upstream
 8003d16:	e008      	b.n	8003d2a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d18:	f7fc ff64 	bl	8000be4 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e007      	b.n	8003d3a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <RCC_SetFlashLatency+0xf4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d1ef      	bne.n	8003d18 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	374c      	adds	r7, #76	; 0x4c
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd90      	pop	{r4, r7, pc}
 8003d42:	bf00      	nop
 8003d44:	08005d08 	.word	0x08005d08
 8003d48:	08005d18 	.word	0x08005d18
 8003d4c:	08005d24 	.word	0x08005d24
 8003d50:	58004000 	.word	0x58004000

08003d54 <LL_RCC_LSE_IsEnabled>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <LL_RCC_LSE_IsEnabled+0x18>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <LL_RCC_LSE_IsEnabled+0x1a>
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <LL_RCC_LSE_IsReady>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d101      	bne.n	8003d90 <LL_RCC_LSE_IsReady+0x18>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <LL_RCC_LSE_IsReady+0x1a>
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <LL_RCC_SetRFWKPClockSource>:
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_RCC_SetSMPSClockSource>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f023 0203 	bic.w	r2, r3, #3
 8003dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_RCC_SetSMPSPrescaler>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_RCC_SetUSARTClockSource>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f023 0203 	bic.w	r2, r3, #3
 8003e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_RCC_SetLPUARTClockSource>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_RCC_SetI2CClockSource>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_RCC_SetLPTIMClockSource>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <LL_RCC_SetSAIClockSource>:
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_RCC_SetRNGClockSource>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <LL_RCC_SetCLK48ClockSource>:
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <LL_RCC_SetUSBClockSource>:
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ffe3 	bl	8003f36 <LL_RCC_SetCLK48ClockSource>
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <LL_RCC_SetADCClockSource>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <LL_RCC_SetRTCClockSource>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_RCC_GetRTCClockSource>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_RCC_ForceBackupDomainReset>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <LL_RCC_ReleaseBackupDomainReset>:
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800401c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_RCC_PLLSAI1_Enable>:
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004040:	6013      	str	r3, [r2, #0]
}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_RCC_PLLSAI1_Disable>:
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800405a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800405e:	6013      	str	r3, [r2, #0]
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_RCC_PLLSAI1_IsReady>:
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407c:	d101      	bne.n	8004082 <LL_RCC_PLLSAI1_IsReady+0x18>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_RCCEx_PeriphCLKConfig>:
=======
 800304a:	e008      	b.n	800305e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800304c:	f7fe fbcc 	bl	80017e8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e007      	b.n	800306e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <RCC_SetFlashLatency+0xf4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003068:	429a      	cmp	r2, r3
 800306a:	d1ef      	bne.n	800304c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	374c      	adds	r7, #76	; 0x4c
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
 8003076:	bf00      	nop
 8003078:	080081fc 	.word	0x080081fc
 800307c:	0800820c 	.word	0x0800820c
 8003080:	08008218 	.word	0x08008218
 8003084:	58004000 	.word	0x58004000

08003088 <LL_RCC_LSE_IsEnabled>:
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_RCC_LSE_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_RCC_LSE_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_RCC_LSE_IsReady>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d101      	bne.n	80030c4 <LL_RCC_LSE_IsReady+0x18>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <LL_RCC_LSE_IsReady+0x1a>
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_RCC_SetRFWKPClockSource>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_SetSMPSClockSource>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f023 0203 	bic.w	r2, r3, #3
 800310e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4313      	orrs	r3, r2
 8003116:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_RCC_SetSMPSPrescaler>:
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_RCC_SetUSARTClockSource>:
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f023 0203 	bic.w	r2, r3, #3
 8003160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_RCC_SetLPUARTClockSource>:
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800318c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_RCC_SetI2CClockSource>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80031bc:	43db      	mvns	r3, r3
 80031be:	401a      	ands	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80031c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_RCC_SetLPTIMClockSource>:
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80031e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	43db      	mvns	r3, r3
 80031f6:	401a      	ands	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	041b      	lsls	r3, r3, #16
 80031fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LL_RCC_SetSAIClockSource>:
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_RCC_SetRNGClockSource>:
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_RCC_SetCLK48ClockSource>:
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800327e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_RCC_SetUSBClockSource>:
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffe3 	bl	800326a <LL_RCC_SetCLK48ClockSource>
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <LL_RCC_SetADCClockSource>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_RCC_SetRTCClockSource>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_RCC_GetRTCClockSource>:
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_RCC_ForceBackupDomainReset>:
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003336:	bf00      	nop
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_RCC_PLLSAI1_Enable>:
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003374:	6013      	str	r3, [r2, #0]
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_RCC_PLLSAI1_Disable>:
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800338e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003392:	6013      	str	r3, [r2, #0]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <LL_RCC_PLLSAI1_IsReady>:
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b0:	d101      	bne.n	80033b6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 800408e:	b580      	push	{r7, lr}
 8004090:	b088      	sub	sp, #32
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004096:	2300      	movs	r3, #0
 8004098:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800409a:	2300      	movs	r3, #0
 800409c:	77bb      	strb	r3, [r7, #30]
=======
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b088      	sub	sp, #32
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80033ca:	2300      	movs	r3, #0
 80033cc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80033ce:	2300      	movs	r3, #0
 80033d0:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< Updated upstream
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d034      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x86>
=======
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d034      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x86>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
<<<<<<< Updated upstream
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b2:	d021      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80040b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b8:	d81b      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040be:	d01d      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80040c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c4:	d815      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ce:	d110      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x64>
=======
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033e6:	d021      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80033e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033ec:	d81b      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033f2:	d01d      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80033f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033f8:	d815      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80033fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003402:	d110      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x64>
>>>>>>> Stashed changes
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
<<<<<<< Updated upstream
 80040d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040de:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80040e0:	e00d      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x70>
=======
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800340e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003412:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003414:	e00d      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x70>
>>>>>>> Stashed changes

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
<<<<<<< Updated upstream
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f947 	bl	800437a <RCCEx_PLLSAI1_ConfigNP>
 80040ec:	4603      	mov	r3, r0
 80040ee:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040f0:	e005      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x70>
=======
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3304      	adds	r3, #4
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f947 	bl	80036ae <RCCEx_PLLSAI1_ConfigNP>
 8003420:	4603      	mov	r3, r0
 8003422:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003424:	e005      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x70>
>>>>>>> Stashed changes
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 80040f2:	2301      	movs	r3, #1
 80040f4:	77fb      	strb	r3, [r7, #31]
        break;
 80040f6:	e002      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	7ffb      	ldrb	r3, [r7, #31]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fee8 	bl	8003ede <LL_RCC_SetSAIClockSource>
 800410e:	e001      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x86>
=======
 8003426:	2301      	movs	r3, #1
 8003428:	77fb      	strb	r3, [r7, #31]
        break;
 800342a:	e002      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800342c:	bf00      	nop
 800342e:	e000      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fee8 	bl	8003212 <LL_RCC_SetSAIClockSource>
 8003442:	e001      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x86>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004110:	7ffb      	ldrb	r3, [r7, #31]
 8004112:	77bb      	strb	r3, [r7, #30]
=======
 8003444:	7ffb      	ldrb	r3, [r7, #31]
 8003446:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d046      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004120:	f7ff ff56 	bl	8003fd0 <LL_RCC_GetRTCClockSource>
 8004124:	61b8      	str	r0, [r7, #24]
=======
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003450:	2b00      	cmp	r3, #0
 8003452:	d046      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003454:	f7ff ff56 	bl	8003304 <LL_RCC_GetRTCClockSource>
 8003458:	61b8      	str	r0, [r7, #24]
>>>>>>> Stashed changes

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
<<<<<<< Updated upstream
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	429a      	cmp	r2, r3
 800412e:	d03c      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004130:	f7fe fc3e 	bl	80029b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff ff30 	bl	8003fa4 <LL_RCC_SetRTCClockSource>
 8004144:	e02e      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x116>
=======
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	429a      	cmp	r2, r3
 8003462:	d03c      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003464:	f7fe fcac 	bl	8001dc0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff30 	bl	80032d8 <LL_RCC_SetRTCClockSource>
 8003478:	e02e      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
>>>>>>> Stashed changes
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
<<<<<<< Updated upstream
 8004146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004150:	f7ff ff4b 	bl	8003fea <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004154:	f7ff ff5a 	bl	800400c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004170:	f7ff fdf0 	bl	8003d54 <LL_RCC_LSE_IsEnabled>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d114      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800417a:	f7fc fd33 	bl	8000be4 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004180:	e00b      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fc fd2f 	bl	8000be4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d902      	bls.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	77fb      	strb	r3, [r7, #31]
              break;
 8004198:	e004      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800419a:	f7ff fded 	bl	8003d78 <LL_RCC_LSE_IsReady>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d1ee      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf4>
=======
 800347a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003484:	f7ff ff4b 	bl	800331e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003488:	f7ff ff5a 	bl	8003340 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800349a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80034a4:	f7ff fdf0 	bl	8003088 <LL_RCC_LSE_IsEnabled>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d114      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ae:	f7fe f99b 	bl	80017e8 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80034b4:	e00b      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe f997 	bl	80017e8 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d902      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	77fb      	strb	r3, [r7, #31]
              break;
 80034cc:	e004      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80034ce:	f7ff fded 	bl	80030ac <LL_RCC_LSE_IsReady>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
>>>>>>> Stashed changes
          }
        }
      }

      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
 80041a6:	77bb      	strb	r3, [r7, #30]
 80041a8:	e001      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x120>
=======
 80034d8:	7ffb      	ldrb	r3, [r7, #31]
 80034da:	77bb      	strb	r3, [r7, #30]
 80034dc:	e001      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
 80041ac:	77bb      	strb	r3, [r7, #30]
=======
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x136>
=======
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x136>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fe2a 	bl	8003e18 <LL_RCC_SetUSARTClockSource>
=======
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fe2a 	bl	800314c <LL_RCC_SetUSARTClockSource>
>>>>>>> Stashed changes
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x14c>
=======
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x14c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< Updated upstream
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fe35 	bl	8003e44 <LL_RCC_SetLPUARTClockSource>
=======
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fe35 	bl	8003178 <LL_RCC_SetLPUARTClockSource>
>>>>>>> Stashed changes
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< Updated upstream
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fe5d 	bl	8003eaa <LL_RCC_SetLPTIMClockSource>
=======
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fe5d 	bl	80031de <LL_RCC_SetLPTIMClockSource>
>>>>>>> Stashed changes
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< Updated upstream
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fe52 	bl	8003eaa <LL_RCC_SetLPTIMClockSource>
=======
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fe52 	bl	80031de <LL_RCC_SetLPTIMClockSource>
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x18e>
=======
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x18e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fe2a 	bl	8003e70 <LL_RCC_SetI2CClockSource>
=======
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fe2a 	bl	80031a4 <LL_RCC_SetI2CClockSource>
>>>>>>> Stashed changes
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
=======
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fe1f 	bl	8003e70 <LL_RCC_SetI2CClockSource>
=======
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fe1f 	bl	80031a4 <LL_RCC_SetI2CClockSource>
>>>>>>> Stashed changes
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< Updated upstream
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d022      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fe8d 	bl	8003f62 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004250:	d107      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800425c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004260:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800426a:	d10b      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f8dd 	bl	8004430 <RCCEx_PLLSAI1_ConfigNQ>
 8004276:	4603      	mov	r3, r0
 8004278:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800427a:	7ffb      	ldrb	r3, [r7, #31]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004280:	7ffb      	ldrb	r3, [r7, #31]
 8004282:	77bb      	strb	r3, [r7, #30]
=======
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d022      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fe8d 	bl	8003296 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003584:	d107      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003594:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f8dd 	bl	8003764 <RCCEx_PLLSAI1_ConfigNQ>
 80035aa:	4603      	mov	r3, r0
 80035ac:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80035b4:	7ffb      	ldrb	r3, [r7, #31]
 80035b6:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< Updated upstream
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02b      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
=======
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02b      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x25a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
<<<<<<< Updated upstream
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a2:	d003      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fe2a 	bl	8003f0a <LL_RCC_SetRNGClockSource>
 80042b6:	e00a      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x240>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	2000      	movs	r0, #0
 80042c4:	f7ff fe21 	bl	8003f0a <LL_RCC_SetRNGClockSource>
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff fe34 	bl	8003f36 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80042d6:	d107      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e6:	60d3      	str	r3, [r2, #12]
=======
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d008      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fe2a 	bl	800323e <LL_RCC_SetRNGClockSource>
 80035ea:	e00a      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7ff fe21 	bl	800323e <LL_RCC_SetRNGClockSource>
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fe34 	bl	800326a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800360a:	d107      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< Updated upstream
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d022      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
=======
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d022      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< Updated upstream
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fe3d 	bl	8003f78 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004306:	d107      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004316:	60d3      	str	r3, [r2, #12]
=======
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fe3d 	bl	80032ac <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800363a:	d107      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
<<<<<<< Updated upstream
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004320:	d10b      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f8dd 	bl	80044e6 <RCCEx_PLLSAI1_ConfigNR>
 800432c:	4603      	mov	r3, r0
 800432e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004330:	7ffb      	ldrb	r3, [r7, #31]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004336:	7ffb      	ldrb	r3, [r7, #31]
 8004338:	77bb      	strb	r3, [r7, #30]
=======
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003654:	d10b      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f8dd 	bl	800381a <RCCEx_PLLSAI1_ConfigNR>
 8003660:	4603      	mov	r3, r0
 8003662:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003664:	7ffb      	ldrb	r3, [r7, #31]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800366a:	7ffb      	ldrb	r3, [r7, #31]
 800366c:	77bb      	strb	r3, [r7, #30]
>>>>>>> Stashed changes
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
<<<<<<< Updated upstream
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
=======
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d004      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
<<<<<<< Updated upstream
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fd26 	bl	8003d9c <LL_RCC_SetRFWKPClockSource>
=======
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fd26 	bl	80030d0 <LL_RCC_SetRFWKPClockSource>
>>>>>>> Stashed changes

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
<<<<<<< Updated upstream
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
=======
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d009      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
<<<<<<< Updated upstream
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fd45 	bl	8003df0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fd2c 	bl	8003dc8 <LL_RCC_SetSMPSClockSource>
=======
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fd45 	bl	8003124 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fd2c 	bl	80030fc <LL_RCC_SetSMPSClockSource>
>>>>>>> Stashed changes
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
<<<<<<< Updated upstream
 8004370:	7fbb      	ldrb	r3, [r7, #30]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <RCCEx_PLLSAI1_ConfigNP>:
=======
 80036a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <RCCEx_PLLSAI1_ConfigNP>:
>>>>>>> Stashed changes
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< Updated upstream
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]
=======
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< Updated upstream
 8004386:	f7ff fe61 	bl	800404c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800438a:	f7fc fc2b 	bl	8000be4 <HAL_GetTick>
 800438e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004390:	e009      	b.n	80043a6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004392:	f7fc fc27 	bl	8000be4 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d902      	bls.n	80043a6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	73fb      	strb	r3, [r7, #15]
      break;
 80043a4:	e004      	b.n	80043b0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043a6:	f7ff fe60 	bl	800406a <LL_RCC_PLLSAI1_IsReady>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f0      	bne.n	8004392 <RCCEx_PLLSAI1_ConfigNP+0x18>
=======
 80036ba:	f7ff fe61 	bl	8003380 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036be:	f7fe f893 	bl	80017e8 <HAL_GetTick>
 80036c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036c4:	e009      	b.n	80036da <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c6:	f7fe f88f 	bl	80017e8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d902      	bls.n	80036da <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	e004      	b.n	80036e4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036da:	f7ff fe60 	bl	800339e <LL_RCC_PLLSAI1_IsReady>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <RCCEx_PLLSAI1_ConfigNP+0x18>
>>>>>>> Stashed changes
    }
  }

  if (status == HAL_OK)
<<<<<<< Updated upstream
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d137      	bne.n	8004426 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ca:	4313      	orrs	r3, r2
 80043cc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80043ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e0:	4313      	orrs	r3, r2
 80043e2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043e4:	f7ff fe23 	bl	800402e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fc fbfc 	bl	8000be4 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043ee:	e009      	b.n	8004404 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f0:	f7fc fbf8 	bl	8000be4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d902      	bls.n	8004404 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	73fb      	strb	r3, [r7, #15]
        break;
 8004402:	e004      	b.n	800440e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004404:	f7ff fe31 	bl	800406a <LL_RCC_PLLSAI1_IsReady>
 8004408:	4603      	mov	r3, r0
 800440a:	2b01      	cmp	r3, #1
 800440c:	d1f0      	bne.n	80043f0 <RCCEx_PLLSAI1_ConfigNP+0x76>
=======
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d137      	bne.n	800375a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036fe:	4313      	orrs	r3, r2
 8003700:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003714:	4313      	orrs	r3, r2
 8003716:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003718:	f7ff fe23 	bl	8003362 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fe f864 	bl	80017e8 <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003722:	e009      	b.n	8003738 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003724:	f7fe f860 	bl	80017e8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	73fb      	strb	r3, [r7, #15]
        break;
 8003736:	e004      	b.n	8003742 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003738:	f7ff fe31 	bl	800339e <LL_RCC_PLLSAI1_IsReady>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d1f0      	bne.n	8003724 <RCCEx_PLLSAI1_ConfigNP+0x76>
>>>>>>> Stashed changes
      }
    }

    if (status == HAL_OK)
<<<<<<< Updated upstream
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d108      	bne.n	8004426 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004422:	4313      	orrs	r3, r2
 8004424:	610b      	str	r3, [r1, #16]
=======
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d108      	bne.n	800375a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003756:	4313      	orrs	r3, r2
 8003758:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
    }
  }

  return status;
<<<<<<< Updated upstream
 8004426:	7bfb      	ldrb	r3, [r7, #15]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <RCCEx_PLLSAI1_ConfigNQ>:
=======
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <RCCEx_PLLSAI1_ConfigNQ>:
>>>>>>> Stashed changes
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< Updated upstream
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	73fb      	strb	r3, [r7, #15]
=======
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< Updated upstream
 800443c:	f7ff fe06 	bl	800404c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004440:	f7fc fbd0 	bl	8000be4 <HAL_GetTick>
 8004444:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004446:	e009      	b.n	800445c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004448:	f7fc fbcc 	bl	8000be4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d902      	bls.n	800445c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	73fb      	strb	r3, [r7, #15]
      break;
 800445a:	e004      	b.n	8004466 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800445c:	f7ff fe05 	bl	800406a <LL_RCC_PLLSAI1_IsReady>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <RCCEx_PLLSAI1_ConfigNQ+0x18>
=======
 8003770:	f7ff fe06 	bl	8003380 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003774:	f7fe f838 	bl	80017e8 <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800377a:	e009      	b.n	8003790 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800377c:	f7fe f834 	bl	80017e8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	73fb      	strb	r3, [r7, #15]
      break;
 800378e:	e004      	b.n	800379a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003790:	f7ff fe05 	bl	800339e <LL_RCC_PLLSAI1_IsReady>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <RCCEx_PLLSAI1_ConfigNQ+0x18>
>>>>>>> Stashed changes
    }
  }

  if (status == HAL_OK)
<<<<<<< Updated upstream
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d137      	bne.n	80044dc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004480:	4313      	orrs	r3, r2
 8004482:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004496:	4313      	orrs	r3, r2
 8004498:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800449a:	f7ff fdc8 	bl	800402e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449e:	f7fc fba1 	bl	8000be4 <HAL_GetTick>
 80044a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044a4:	e009      	b.n	80044ba <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044a6:	f7fc fb9d 	bl	8000be4 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d902      	bls.n	80044ba <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	73fb      	strb	r3, [r7, #15]
        break;
 80044b8:	e004      	b.n	80044c4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044ba:	f7ff fdd6 	bl	800406a <LL_RCC_PLLSAI1_IsReady>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d1f0      	bne.n	80044a6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
=======
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d137      	bne.n	8003810 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80037a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b4:	4313      	orrs	r3, r2
 80037b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80037b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ca:	4313      	orrs	r3, r2
 80037cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80037ce:	f7ff fdc8 	bl	8003362 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d2:	f7fe f809 	bl	80017e8 <HAL_GetTick>
 80037d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037d8:	e009      	b.n	80037ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037da:	f7fe f805 	bl	80017e8 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d902      	bls.n	80037ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	73fb      	strb	r3, [r7, #15]
        break;
 80037ec:	e004      	b.n	80037f8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037ee:	f7ff fdd6 	bl	800339e <LL_RCC_PLLSAI1_IsReady>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d1f0      	bne.n	80037da <RCCEx_PLLSAI1_ConfigNQ+0x76>
>>>>>>> Stashed changes
      }
    }

    if (status == HAL_OK)
<<<<<<< Updated upstream
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d108      	bne.n	80044dc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044d8:	4313      	orrs	r3, r2
 80044da:	610b      	str	r3, [r1, #16]
=======
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d108      	bne.n	8003810 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800380c:	4313      	orrs	r3, r2
 800380e:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
    }
  }

  return status;
<<<<<<< Updated upstream
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <RCCEx_PLLSAI1_ConfigNR>:
=======
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <RCCEx_PLLSAI1_ConfigNR>:
>>>>>>> Stashed changes
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< Updated upstream
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
=======
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< Updated upstream
 80044f2:	f7ff fdab 	bl	800404c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044f6:	f7fc fb75 	bl	8000be4 <HAL_GetTick>
 80044fa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044fc:	e009      	b.n	8004512 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fe:	f7fc fb71 	bl	8000be4 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d902      	bls.n	8004512 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	73fb      	strb	r3, [r7, #15]
      break;
 8004510:	e004      	b.n	800451c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004512:	f7ff fdaa 	bl	800406a <LL_RCC_PLLSAI1_IsReady>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f0      	bne.n	80044fe <RCCEx_PLLSAI1_ConfigNR+0x18>
=======
 8003826:	f7ff fdab 	bl	8003380 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800382a:	f7fd ffdd 	bl	80017e8 <HAL_GetTick>
 800382e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003830:	e009      	b.n	8003846 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003832:	f7fd ffd9 	bl	80017e8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d902      	bls.n	8003846 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	e004      	b.n	8003850 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003846:	f7ff fdaa 	bl	800339e <LL_RCC_PLLSAI1_IsReady>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f0      	bne.n	8003832 <RCCEx_PLLSAI1_ConfigNR+0x18>
>>>>>>> Stashed changes
    }
  }

  if (status == HAL_OK)
<<<<<<< Updated upstream
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d137      	bne.n	8004592 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004536:	4313      	orrs	r3, r2
 8004538:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800454c:	4313      	orrs	r3, r2
 800454e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004550:	f7ff fd6d 	bl	800402e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004554:	f7fc fb46 	bl	8000be4 <HAL_GetTick>
 8004558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800455a:	e009      	b.n	8004570 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800455c:	f7fc fb42 	bl	8000be4 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d902      	bls.n	8004570 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	73fb      	strb	r3, [r7, #15]
        break;
 800456e:	e004      	b.n	800457a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004570:	f7ff fd7b 	bl	800406a <LL_RCC_PLLSAI1_IsReady>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d1f0      	bne.n	800455c <RCCEx_PLLSAI1_ConfigNR+0x76>
=======
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d137      	bne.n	80038c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800386a:	4313      	orrs	r3, r2
 800386c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003880:	4313      	orrs	r3, r2
 8003882:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003884:	f7ff fd6d 	bl	8003362 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003888:	f7fd ffae 	bl	80017e8 <HAL_GetTick>
 800388c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800388e:	e009      	b.n	80038a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003890:	f7fd ffaa 	bl	80017e8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d902      	bls.n	80038a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	73fb      	strb	r3, [r7, #15]
        break;
 80038a2:	e004      	b.n	80038ae <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038a4:	f7ff fd7b 	bl	800339e <LL_RCC_PLLSAI1_IsReady>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d1f0      	bne.n	8003890 <RCCEx_PLLSAI1_ConfigNR+0x76>
>>>>>>> Stashed changes
      }
    }

    if (status == HAL_OK)
<<<<<<< Updated upstream
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d108      	bne.n	8004592 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800458e:	4313      	orrs	r3, r2
 8004590:	610b      	str	r3, [r1, #16]
=======
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d108      	bne.n	80038c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c2:	4313      	orrs	r3, r2
 80038c4:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
    }
  }

  return status;
<<<<<<< Updated upstream
 8004592:	7bfb      	ldrb	r3, [r7, #15]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_RTC_Init>:
=======
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_RTC_Init>:
>>>>>>> Stashed changes
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
<<<<<<< Updated upstream
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
=======
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
<<<<<<< Updated upstream
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e09f      	b.n	80046ee <HAL_RTC_Init+0x152>
=======
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e09f      	b.n	8003a22 <HAL_RTC_Init+0x152>
>>>>>>> Stashed changes
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
<<<<<<< Updated upstream
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc f8e0 	bl	8000788 <HAL_RTC_MspInit>
=======
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd fcf0 	bl	80012dc <HAL_RTC_MspInit>
>>>>>>> Stashed changes
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
<<<<<<< Updated upstream
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80045d0:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <HAL_RTC_Init+0x15c>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d07e      	beq.n	80046da <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	22ca      	movs	r2, #202	; 0xca
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2253      	movs	r2, #83	; 0x53
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fa1d 	bl	8004a2c <RTC_EnterInitMode>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	22ff      	movs	r2, #255	; 0xff
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2204      	movs	r2, #4
 8004604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
 800460c:	e067      	b.n	80046de <HAL_RTC_Init+0x142>
=======
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003904:	4b49      	ldr	r3, [pc, #292]	; (8003a2c <HAL_RTC_Init+0x15c>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d07e      	beq.n	8003a0e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	22ca      	movs	r2, #202	; 0xca
 8003916:	625a      	str	r2, [r3, #36]	; 0x24
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2253      	movs	r2, #83	; 0x53
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fa1d 	bl	8003d60 <RTC_EnterInitMode>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	22ff      	movs	r2, #255	; 0xff
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2204      	movs	r2, #4
 8003938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e067      	b.n	8003a12 <HAL_RTC_Init+0x142>
>>>>>>> Stashed changes
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
<<<<<<< Updated upstream
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800461c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004620:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6899      	ldr	r1, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	68d2      	ldr	r2, [r2, #12]
 8004648:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6919      	ldr	r1, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800466c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0203 	bic.w	r2, r2, #3
 800467c:	64da      	str	r2, [r3, #76]	; 0x4c
=======
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003954:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6899      	ldr	r1, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68d2      	ldr	r2, [r2, #12]
 800397c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6919      	ldr	r1, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	041a      	lsls	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0203 	bic.w	r2, r2, #3
 80039b0:	64da      	str	r2, [r3, #76]	; 0x4c
>>>>>>> Stashed changes
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
<<<<<<< Updated upstream
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d113      	bne.n	80046cc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f99b 	bl	80049e0 <HAL_RTC_WaitForSynchro>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	22ff      	movs	r2, #255	; 0xff
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2204      	movs	r2, #4
 80046bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e010      	b.n	80046ee <HAL_RTC_Init+0x152>
=======
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d113      	bne.n	8003a00 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f99b 	bl	8003d14 <HAL_RTC_WaitForSynchro>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00d      	beq.n	8003a00 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2204      	movs	r2, #4
 80039f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e010      	b.n	8003a22 <HAL_RTC_Init+0x152>
>>>>>>> Stashed changes
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< Updated upstream
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	22ff      	movs	r2, #255	; 0xff
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e001      	b.n	80046de <HAL_RTC_Init+0x142>
=======
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	22ff      	movs	r2, #255	; 0xff
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
 8003a0c:	e001      	b.n	8003a12 <HAL_RTC_Init+0x142>
>>>>>>> Stashed changes
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
<<<<<<< Updated upstream
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40002800 	.word	0x40002800

080046fc <HAL_RTC_SetTime>:
=======
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d103      	bne.n	8003a20 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40002800 	.word	0x40002800

08003a30 <HAL_RTC_SetTime>:
>>>>>>> Stashed changes
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
<<<<<<< Updated upstream
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
=======
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
<<<<<<< Updated upstream
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_RTC_SetTime+0x1a>
 8004712:	2302      	movs	r3, #2
 8004714:	e0b2      	b.n	800487c <HAL_RTC_SetTime+0x180>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d126      	bne.n	800477a <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d102      	bne.n	8004740 <HAL_RTC_SetTime+0x44>
=======
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_RTC_SetTime+0x1a>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e0b2      	b.n	8003bb0 <HAL_RTC_SetTime+0x180>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d126      	bne.n	8003aae <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <HAL_RTC_SetTime+0x44>
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
<<<<<<< Updated upstream
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2200      	movs	r2, #0
 800473e:	70da      	strb	r2, [r3, #3]
=======
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	70da      	strb	r2, [r3, #3]
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
<<<<<<< Updated upstream
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 f99b 	bl	8004a80 <RTC_ByteToBcd2>
 800474a:	4603      	mov	r3, r0
 800474c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	785b      	ldrb	r3, [r3, #1]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f994 	bl	8004a80 <RTC_ByteToBcd2>
 8004758:	4603      	mov	r3, r0
 800475a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800475c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	789b      	ldrb	r3, [r3, #2]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f98c 	bl	8004a80 <RTC_ByteToBcd2>
 8004768:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800476a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	78db      	ldrb	r3, [r3, #3]
 8004772:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e018      	b.n	80047ac <HAL_RTC_SetTime+0xb0>
=======
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 f99b 	bl	8003db4 <RTC_ByteToBcd2>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	785b      	ldrb	r3, [r3, #1]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f994 	bl	8003db4 <RTC_ByteToBcd2>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003a90:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	789b      	ldrb	r3, [r3, #2]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f98c 	bl	8003db4 <RTC_ByteToBcd2>
 8003a9c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003a9e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	78db      	ldrb	r3, [r3, #3]
 8003aa6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e018      	b.n	8003ae0 <HAL_RTC_SetTime+0xb0>
>>>>>>> Stashed changes
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
<<<<<<< Updated upstream
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <HAL_RTC_SetTime+0x92>
=======
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <HAL_RTC_SetTime+0x92>
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
<<<<<<< Updated upstream
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2200      	movs	r2, #0
 800478c:	70da      	strb	r2, [r3, #3]
=======
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	70da      	strb	r2, [r3, #3]
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
<<<<<<< Updated upstream
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800479a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80047a0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	78db      	ldrb	r3, [r3, #3]
 80047a6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
=======
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003ace:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003ad4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	78db      	ldrb	r3, [r3, #3]
 8003ada:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
<<<<<<< Updated upstream
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	22ca      	movs	r2, #202	; 0xca
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2253      	movs	r2, #83	; 0x53
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f935 	bl	8004a2c <RTC_EnterInitMode>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00d      	beq.n	80047e4 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	22ff      	movs	r2, #255	; 0xff
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2204      	movs	r2, #4
 80047d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e04b      	b.n	800487c <HAL_RTC_SetTime+0x180>
=======
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	22ca      	movs	r2, #202	; 0xca
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2253      	movs	r2, #83	; 0x53
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f935 	bl	8003d60 <RTC_EnterInitMode>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	22ff      	movs	r2, #255	; 0xff
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2204      	movs	r2, #4
 8003b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e04b      	b.n	8003bb0 <HAL_RTC_SetTime+0x180>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
<<<<<<< Updated upstream
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80047ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047f2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004802:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6899      	ldr	r1, [r3, #8]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	431a      	orrs	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800482a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d113      	bne.n	8004862 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f8d0 	bl	80049e0 <HAL_RTC_WaitForSynchro>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	22ff      	movs	r2, #255	; 0xff
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2204      	movs	r2, #4
 8004852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e00c      	b.n	800487c <HAL_RTC_SetTime+0x180>
=======
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003b22:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b26:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b36:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d113      	bne.n	8003b96 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f8d0 	bl	8003d14 <HAL_RTC_WaitForSynchro>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2204      	movs	r2, #4
 8003b86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00c      	b.n	8003bb0 <HAL_RTC_SetTime+0x180>
>>>>>>> Stashed changes
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< Updated upstream
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	22ff      	movs	r2, #255	; 0xff
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800487a:	2300      	movs	r3, #0
  }
}
 800487c:	4618      	mov	r0, r3
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	bd90      	pop	{r4, r7, pc}

08004884 <HAL_RTC_SetDate>:
=======
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	22ff      	movs	r2, #255	; 0xff
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003bae:	2300      	movs	r3, #0
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}

08003bb8 <HAL_RTC_SetDate>:
>>>>>>> Stashed changes
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
<<<<<<< Updated upstream
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
=======
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
<<<<<<< Updated upstream
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_RTC_SetDate+0x1a>
 800489a:	2302      	movs	r3, #2
 800489c:	e09c      	b.n	80049d8 <HAL_RTC_SetDate+0x154>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10e      	bne.n	80048d2 <HAL_RTC_SetDate+0x4e>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	f023 0310 	bic.w	r3, r3, #16
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	330a      	adds	r3, #10
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	705a      	strb	r2, [r3, #1]
=======
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RTC_SetDate+0x1a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e09c      	b.n	8003d0c <HAL_RTC_SetDate+0x154>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10e      	bne.n	8003c06 <HAL_RTC_SetDate+0x4e>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	785b      	ldrb	r3, [r3, #1]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	f023 0310 	bic.w	r3, r3, #16
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	330a      	adds	r3, #10
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	705a      	strb	r2, [r3, #1]
>>>>>>> Stashed changes
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
<<<<<<< Updated upstream
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11c      	bne.n	8004912 <HAL_RTC_SetDate+0x8e>
=======
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d11c      	bne.n	8003c46 <HAL_RTC_SetDate+0x8e>
>>>>>>> Stashed changes
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
<<<<<<< Updated upstream
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	78db      	ldrb	r3, [r3, #3]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f8cf 	bl	8004a80 <RTC_ByteToBcd2>
 80048e2:	4603      	mov	r3, r0
 80048e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	785b      	ldrb	r3, [r3, #1]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f8c8 	bl	8004a80 <RTC_ByteToBcd2>
 80048f0:	4603      	mov	r3, r0
 80048f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80048f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	789b      	ldrb	r3, [r3, #2]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f8c0 	bl	8004a80 <RTC_ByteToBcd2>
 8004900:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004902:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e00e      	b.n	8004930 <HAL_RTC_SetDate+0xac>
=======
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	78db      	ldrb	r3, [r3, #3]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 f8cf 	bl	8003db4 <RTC_ByteToBcd2>
 8003c16:	4603      	mov	r3, r0
 8003c18:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f8c8 	bl	8003db4 <RTC_ByteToBcd2>
 8003c24:	4603      	mov	r3, r0
 8003c26:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c28:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	789b      	ldrb	r3, [r3, #2]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f8c0 	bl	8003db4 <RTC_ByteToBcd2>
 8003c34:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c36:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e00e      	b.n	8003c64 <HAL_RTC_SetDate+0xac>
>>>>>>> Stashed changes
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
<<<<<<< Updated upstream
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	78db      	ldrb	r3, [r3, #3]
 8004916:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800491e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004924:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
=======
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	78db      	ldrb	r3, [r3, #3]
 8003c4a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c52:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c58:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
<<<<<<< Updated upstream
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	22ca      	movs	r2, #202	; 0xca
 8004936:	625a      	str	r2, [r3, #36]	; 0x24
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2253      	movs	r2, #83	; 0x53
 800493e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f873 	bl	8004a2c <RTC_EnterInitMode>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00d      	beq.n	8004968 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	22ff      	movs	r2, #255	; 0xff
 8004952:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2204      	movs	r2, #4
 8004958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e037      	b.n	80049d8 <HAL_RTC_SetDate+0x154>
=======
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	22ca      	movs	r2, #202	; 0xca
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2253      	movs	r2, #83	; 0x53
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f873 	bl	8003d60 <RTC_EnterInitMode>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	22ff      	movs	r2, #255	; 0xff
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e037      	b.n	8003d0c <HAL_RTC_SetDate+0x154>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
<<<<<<< Updated upstream
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004972:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004976:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004986:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d113      	bne.n	80049be <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f822 	bl	80049e0 <HAL_RTC_WaitForSynchro>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00d      	beq.n	80049be <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	22ff      	movs	r2, #255	; 0xff
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2204      	movs	r2, #4
 80049ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e00c      	b.n	80049d8 <HAL_RTC_SetDate+0x154>
=======
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ca6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003caa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f822 	bl	8003d14 <HAL_RTC_WaitForSynchro>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	22ff      	movs	r2, #255	; 0xff
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e00c      	b.n	8003d0c <HAL_RTC_SetDate+0x154>
>>>>>>> Stashed changes
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< Updated upstream
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80049d6:	2300      	movs	r3, #0
  }
}
 80049d8:	4618      	mov	r0, r3
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd90      	pop	{r4, r7, pc}

080049e0 <HAL_RTC_WaitForSynchro>:
=======
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	22ff      	movs	r2, #255	; 0xff
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd90      	pop	{r4, r7, pc}

08003d14 <HAL_RTC_WaitForSynchro>:
>>>>>>> Stashed changes
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
<<<<<<< Updated upstream
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
=======
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
<<<<<<< Updated upstream
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80049f8:	f7fc f8f4 	bl	8000be4 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049fe:	e009      	b.n	8004a14 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a00:	f7fc f8f0 	bl	8000be4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a0e:	d901      	bls.n	8004a14 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e007      	b.n	8004a24 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ee      	beq.n	8004a00 <HAL_RTC_WaitForSynchro+0x20>
=======
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d2a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003d2c:	f7fd fd5c 	bl	80017e8 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d32:	e009      	b.n	8003d48 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d34:	f7fd fd58 	bl	80017e8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d42:	d901      	bls.n	8003d48 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e007      	b.n	8003d58 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0ee      	beq.n	8003d34 <HAL_RTC_WaitForSynchro+0x20>
>>>>>>> Stashed changes
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <RTC_EnterInitMode>:
=======
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <RTC_EnterInitMode>:
>>>>>>> Stashed changes
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
<<<<<<< Updated upstream
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
=======
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
<<<<<<< Updated upstream
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d119      	bne.n	8004a76 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004a4c:	f7fc f8ca 	bl	8000be4 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004a52:	e009      	b.n	8004a68 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004a54:	f7fc f8c6 	bl	8000be4 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a62:	d901      	bls.n	8004a68 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e007      	b.n	8004a78 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0ee      	beq.n	8004a54 <RTC_EnterInitMode+0x28>
=======
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d119      	bne.n	8003daa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d80:	f7fd fd32 	bl	80017e8 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d86:	e009      	b.n	8003d9c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003d88:	f7fd fd2e 	bl	80017e8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d96:	d901      	bls.n	8003d9c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e007      	b.n	8003dac <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0ee      	beq.n	8003d88 <RTC_EnterInitMode+0x28>
>>>>>>> Stashed changes
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <RTC_ByteToBcd2>:
=======
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <RTC_ByteToBcd2>:
>>>>>>> Stashed changes
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
<<<<<<< Updated upstream
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8004a92:	e005      	b.n	8004aa0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004a9a:	7afb      	ldrb	r3, [r7, #11]
 8004a9c:	3b0a      	subs	r3, #10
 8004a9e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8004aa0:	7afb      	ldrb	r3, [r7, #11]
 8004aa2:	2b09      	cmp	r3, #9
 8004aa4:	d8f6      	bhi.n	8004a94 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	b2db      	uxtb	r3, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_RTCEx_SetWakeUpTimer_IT>:
=======
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003dc6:	e005      	b.n	8003dd4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003dce:	7afb      	ldrb	r3, [r7, #11]
 8003dd0:	3b0a      	subs	r3, #10
 8003dd2:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	2b09      	cmp	r3, #9
 8003dd8:	d8f6      	bhi.n	8003dc8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	7afb      	ldrb	r3, [r7, #11]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	b2db      	uxtb	r3, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_RTCEx_SetWakeUpTimer_IT>:
>>>>>>> Stashed changes
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
<<<<<<< Updated upstream
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
=======
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
<<<<<<< Updated upstream
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e0a8      	b.n	8004c2c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	22ca      	movs	r2, #202	; 0xca
 8004af0:	625a      	str	r2, [r3, #36]	; 0x24
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2253      	movs	r2, #83	; 0x53
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d020      	beq.n	8004b4a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004b08:	f7fc f86c 	bl	8000be4 <HAL_GetTick>
 8004b0c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004b0e:	e015      	b.n	8004b3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b10:	f7fc f868 	bl	8000be4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b1e:	d90d      	bls.n	8004b3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e077      	b.n	8004c2c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e2      	bne.n	8004b10 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
=======
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0a8      	b.n	8003f60 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	22ca      	movs	r2, #202	; 0xca
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2253      	movs	r2, #83	; 0x53
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003e3c:	f7fd fcd4 	bl	80017e8 <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003e42:	e015      	b.n	8003e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e44:	f7fd fcd0 	bl	80017e8 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e52:	d90d      	bls.n	8003e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	22ff      	movs	r2, #255	; 0xff
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e077      	b.n	8003f60 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e2      	bne.n	8003e44 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
>>>>>>> Stashed changes
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
<<<<<<< Updated upstream
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b58:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004b6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004b6c:	f7fc f83a 	bl	8000be4 <HAL_GetTick>
 8004b70:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004b72:	e015      	b.n	8004ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b74:	f7fc f836 	bl	8000be4 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b82:	d90d      	bls.n	8004ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	22ff      	movs	r2, #255	; 0xff
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2203      	movs	r2, #3
 8004b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e045      	b.n	8004c2c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0e2      	beq.n	8004b74 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
=======
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003e9e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003ea0:	f7fd fca2 	bl	80017e8 <HAL_GetTick>
 8003ea4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003ea6:	e015      	b.n	8003ed4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ea8:	f7fd fc9e 	bl	80017e8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb6:	d90d      	bls.n	8003ed4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e045      	b.n	8003f60 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0e2      	beq.n	8003ea8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
>>>>>>> Stashed changes
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
<<<<<<< Updated upstream
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0207 	bic.w	r2, r2, #7
 8004bc4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6899      	ldr	r1, [r3, #8]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bdc:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bf0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c00:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c10:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	22ff      	movs	r2, #255	; 0xff
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	58000800 	.word	0x58000800

08004c38 <HAL_RTCEx_WakeUpTimerIRQHandler>:
=======
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0207 	bic.w	r2, r2, #7
 8003ef8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6899      	ldr	r1, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003f0a:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f10:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003f20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f24:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f34:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f44:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	22ff      	movs	r2, #255	; 0xff
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	58000800 	.word	0x58000800

08003f6c <HAL_RTCEx_WakeUpTimerIRQHandler>:
>>>>>>> Stashed changes
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
<<<<<<< Updated upstream
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
=======
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
>>>>>>> Stashed changes
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
<<<<<<< Updated upstream
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f818 	bl	8004c84 <HAL_RTCEx_WakeUpTimerEventCallback>
=======
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f818 	bl	8003fb8 <HAL_RTCEx_WakeUpTimerEventCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
<<<<<<< Updated upstream
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004c64:	60da      	str	r2, [r3, #12]
=======
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003f98:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
<<<<<<< Updated upstream
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004c68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004c6c:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	58000800 	.word	0x58000800

08004c84 <HAL_RTCEx_WakeUpTimerEventCallback>:
=======
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003f9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003fa0:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	58000800 	.word	0x58000800

08003fb8 <HAL_RTCEx_WakeUpTimerEventCallback>:
>>>>>>> Stashed changes
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
<<<<<<< Updated upstream
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
=======
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_RTCEx_SetRefClock>:
=======
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_RTCEx_SetRefClock>:
>>>>>>> Stashed changes
  * @brief  Enable the RTC reference clock detection.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
<<<<<<< Updated upstream
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_RTCEx_SetRefClock+0x16>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e040      	b.n	8004d30 <HAL_RTCEx_SetRefClock+0x98>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	22ca      	movs	r2, #202	; 0xca
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2253      	movs	r2, #83	; 0x53
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff feac 	bl	8004a2c <RTC_EnterInitMode>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00d      	beq.n	8004cf6 <HAL_RTCEx_SetRefClock+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	22ff      	movs	r2, #255	; 0xff
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e01c      	b.n	8004d30 <HAL_RTCEx_SetRefClock+0x98>
=======
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RTCEx_SetRefClock+0x16>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e040      	b.n	8004064 <HAL_RTCEx_SetRefClock+0x98>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	22ca      	movs	r2, #202	; 0xca
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2253      	movs	r2, #83	; 0x53
 8004000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff feac 	bl	8003d60 <RTC_EnterInitMode>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <HAL_RTCEx_SetRefClock+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	22ff      	movs	r2, #255	; 0xff
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2204      	movs	r2, #4
 800401a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e01c      	b.n	8004064 <HAL_RTCEx_SetRefClock+0x98>
>>>>>>> Stashed changes
  }
  else
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
<<<<<<< Updated upstream
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0210 	orr.w	r2, r2, #16
 8004d04:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d14:	60da      	str	r2, [r3, #12]
=======
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0210 	orr.w	r2, r2, #16
 8004038:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004048:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< Updated upstream
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	22ff      	movs	r2, #255	; 0xff
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <__errno>:
 8004d38:	4b01      	ldr	r3, [pc, #4]	; (8004d40 <__errno+0x8>)
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000014 	.word	0x20000014

08004d44 <__libc_init_array>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	4d0d      	ldr	r5, [pc, #52]	; (8004d7c <__libc_init_array+0x38>)
 8004d48:	4c0d      	ldr	r4, [pc, #52]	; (8004d80 <__libc_init_array+0x3c>)
 8004d4a:	1b64      	subs	r4, r4, r5
 8004d4c:	10a4      	asrs	r4, r4, #2
 8004d4e:	2600      	movs	r6, #0
 8004d50:	42a6      	cmp	r6, r4
 8004d52:	d109      	bne.n	8004d68 <__libc_init_array+0x24>
 8004d54:	4d0b      	ldr	r5, [pc, #44]	; (8004d84 <__libc_init_array+0x40>)
 8004d56:	4c0c      	ldr	r4, [pc, #48]	; (8004d88 <__libc_init_array+0x44>)
 8004d58:	f000 ffae 	bl	8005cb8 <_init>
 8004d5c:	1b64      	subs	r4, r4, r5
 8004d5e:	10a4      	asrs	r4, r4, #2
 8004d60:	2600      	movs	r6, #0
 8004d62:	42a6      	cmp	r6, r4
 8004d64:	d105      	bne.n	8004d72 <__libc_init_array+0x2e>
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6c:	4798      	blx	r3
 8004d6e:	3601      	adds	r6, #1
 8004d70:	e7ee      	b.n	8004d50 <__libc_init_array+0xc>
 8004d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d76:	4798      	blx	r3
 8004d78:	3601      	adds	r6, #1
 8004d7a:	e7f2      	b.n	8004d62 <__libc_init_array+0x1e>
 8004d7c:	08005e4c 	.word	0x08005e4c
 8004d80:	08005e4c 	.word	0x08005e4c
 8004d84:	08005e4c 	.word	0x08005e4c
 8004d88:	08005e50 	.word	0x08005e50

08004d8c <memset>:
 8004d8c:	4402      	add	r2, r0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memset+0xa>
 8004d94:	4770      	bx	lr
 8004d96:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9a:	e7f9      	b.n	8004d90 <memset+0x4>

08004d9c <iprintf>:
 8004d9c:	b40f      	push	{r0, r1, r2, r3}
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <iprintf+0x2c>)
 8004da0:	b513      	push	{r0, r1, r4, lr}
 8004da2:	681c      	ldr	r4, [r3, #0]
 8004da4:	b124      	cbz	r4, 8004db0 <iprintf+0x14>
 8004da6:	69a3      	ldr	r3, [r4, #24]
 8004da8:	b913      	cbnz	r3, 8004db0 <iprintf+0x14>
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 f866 	bl	8004e7c <__sinit>
 8004db0:	ab05      	add	r3, sp, #20
 8004db2:	9a04      	ldr	r2, [sp, #16]
 8004db4:	68a1      	ldr	r1, [r4, #8]
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	4620      	mov	r0, r4
 8004dba:	f000 f9bd 	bl	8005138 <_vfiprintf_r>
 8004dbe:	b002      	add	sp, #8
 8004dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc4:	b004      	add	sp, #16
 8004dc6:	4770      	bx	lr
 8004dc8:	20000014 	.word	0x20000014

08004dcc <std>:
 8004dcc:	2300      	movs	r3, #0
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8004dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dda:	6083      	str	r3, [r0, #8]
 8004ddc:	8181      	strh	r1, [r0, #12]
 8004dde:	6643      	str	r3, [r0, #100]	; 0x64
 8004de0:	81c2      	strh	r2, [r0, #14]
 8004de2:	6183      	str	r3, [r0, #24]
 8004de4:	4619      	mov	r1, r3
 8004de6:	2208      	movs	r2, #8
 8004de8:	305c      	adds	r0, #92	; 0x5c
 8004dea:	f7ff ffcf 	bl	8004d8c <memset>
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <std+0x38>)
 8004df0:	6263      	str	r3, [r4, #36]	; 0x24
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <std+0x3c>)
 8004df4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <std+0x40>)
 8004df8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <std+0x44>)
 8004dfc:	6224      	str	r4, [r4, #32]
 8004dfe:	6323      	str	r3, [r4, #48]	; 0x30
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	bf00      	nop
 8004e04:	080056e1 	.word	0x080056e1
 8004e08:	08005703 	.word	0x08005703
 8004e0c:	0800573b 	.word	0x0800573b
 8004e10:	0800575f 	.word	0x0800575f

08004e14 <_cleanup_r>:
 8004e14:	4901      	ldr	r1, [pc, #4]	; (8004e1c <_cleanup_r+0x8>)
 8004e16:	f000 b8af 	b.w	8004f78 <_fwalk_reent>
 8004e1a:	bf00      	nop
 8004e1c:	08005a39 	.word	0x08005a39

08004e20 <__sfmoreglue>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	2268      	movs	r2, #104	; 0x68
 8004e24:	1e4d      	subs	r5, r1, #1
 8004e26:	4355      	muls	r5, r2
 8004e28:	460e      	mov	r6, r1
 8004e2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e2e:	f000 f8e5 	bl	8004ffc <_malloc_r>
 8004e32:	4604      	mov	r4, r0
 8004e34:	b140      	cbz	r0, 8004e48 <__sfmoreglue+0x28>
 8004e36:	2100      	movs	r1, #0
 8004e38:	e9c0 1600 	strd	r1, r6, [r0]
 8004e3c:	300c      	adds	r0, #12
 8004e3e:	60a0      	str	r0, [r4, #8]
 8004e40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e44:	f7ff ffa2 	bl	8004d8c <memset>
 8004e48:	4620      	mov	r0, r4
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}

08004e4c <__sfp_lock_acquire>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__sfp_lock_acquire+0x8>)
 8004e4e:	f000 b8b3 	b.w	8004fb8 <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	20000125 	.word	0x20000125

08004e58 <__sfp_lock_release>:
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <__sfp_lock_release+0x8>)
 8004e5a:	f000 b8ae 	b.w	8004fba <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	20000125 	.word	0x20000125

08004e64 <__sinit_lock_acquire>:
 8004e64:	4801      	ldr	r0, [pc, #4]	; (8004e6c <__sinit_lock_acquire+0x8>)
 8004e66:	f000 b8a7 	b.w	8004fb8 <__retarget_lock_acquire_recursive>
 8004e6a:	bf00      	nop
 8004e6c:	20000126 	.word	0x20000126

08004e70 <__sinit_lock_release>:
 8004e70:	4801      	ldr	r0, [pc, #4]	; (8004e78 <__sinit_lock_release+0x8>)
 8004e72:	f000 b8a2 	b.w	8004fba <__retarget_lock_release_recursive>
 8004e76:	bf00      	nop
 8004e78:	20000126 	.word	0x20000126

08004e7c <__sinit>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	4604      	mov	r4, r0
 8004e80:	f7ff fff0 	bl	8004e64 <__sinit_lock_acquire>
 8004e84:	69a3      	ldr	r3, [r4, #24]
 8004e86:	b11b      	cbz	r3, 8004e90 <__sinit+0x14>
 8004e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8c:	f7ff bff0 	b.w	8004e70 <__sinit_lock_release>
 8004e90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e94:	6523      	str	r3, [r4, #80]	; 0x50
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <__sinit+0x68>)
 8004e98:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <__sinit+0x6c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e9e:	42a3      	cmp	r3, r4
 8004ea0:	bf04      	itt	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	61a3      	streq	r3, [r4, #24]
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 f820 	bl	8004eec <__sfp>
 8004eac:	6060      	str	r0, [r4, #4]
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f000 f81c 	bl	8004eec <__sfp>
 8004eb4:	60a0      	str	r0, [r4, #8]
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f818 	bl	8004eec <__sfp>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	60e0      	str	r0, [r4, #12]
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	6860      	ldr	r0, [r4, #4]
 8004ec4:	f7ff ff82 	bl	8004dcc <std>
 8004ec8:	68a0      	ldr	r0, [r4, #8]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	2109      	movs	r1, #9
 8004ece:	f7ff ff7d 	bl	8004dcc <std>
 8004ed2:	68e0      	ldr	r0, [r4, #12]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	2112      	movs	r1, #18
 8004ed8:	f7ff ff78 	bl	8004dcc <std>
 8004edc:	2301      	movs	r3, #1
 8004ede:	61a3      	str	r3, [r4, #24]
 8004ee0:	e7d2      	b.n	8004e88 <__sinit+0xc>
 8004ee2:	bf00      	nop
 8004ee4:	08005db4 	.word	0x08005db4
 8004ee8:	08004e15 	.word	0x08004e15

08004eec <__sfp>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	4607      	mov	r7, r0
 8004ef0:	f7ff ffac 	bl	8004e4c <__sfp_lock_acquire>
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <__sfp+0x84>)
 8004ef6:	681e      	ldr	r6, [r3, #0]
 8004ef8:	69b3      	ldr	r3, [r6, #24]
 8004efa:	b913      	cbnz	r3, 8004f02 <__sfp+0x16>
 8004efc:	4630      	mov	r0, r6
 8004efe:	f7ff ffbd 	bl	8004e7c <__sinit>
 8004f02:	3648      	adds	r6, #72	; 0x48
 8004f04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	d503      	bpl.n	8004f14 <__sfp+0x28>
 8004f0c:	6833      	ldr	r3, [r6, #0]
 8004f0e:	b30b      	cbz	r3, 8004f54 <__sfp+0x68>
 8004f10:	6836      	ldr	r6, [r6, #0]
 8004f12:	e7f7      	b.n	8004f04 <__sfp+0x18>
 8004f14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f18:	b9d5      	cbnz	r5, 8004f50 <__sfp+0x64>
 8004f1a:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <__sfp+0x88>)
 8004f1c:	60e3      	str	r3, [r4, #12]
 8004f1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f22:	6665      	str	r5, [r4, #100]	; 0x64
 8004f24:	f000 f847 	bl	8004fb6 <__retarget_lock_init_recursive>
 8004f28:	f7ff ff96 	bl	8004e58 <__sfp_lock_release>
 8004f2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f34:	6025      	str	r5, [r4, #0]
 8004f36:	61a5      	str	r5, [r4, #24]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f40:	f7ff ff24 	bl	8004d8c <memset>
 8004f44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f50:	3468      	adds	r4, #104	; 0x68
 8004f52:	e7d9      	b.n	8004f08 <__sfp+0x1c>
 8004f54:	2104      	movs	r1, #4
 8004f56:	4638      	mov	r0, r7
 8004f58:	f7ff ff62 	bl	8004e20 <__sfmoreglue>
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	6030      	str	r0, [r6, #0]
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d1d5      	bne.n	8004f10 <__sfp+0x24>
 8004f64:	f7ff ff78 	bl	8004e58 <__sfp_lock_release>
 8004f68:	230c      	movs	r3, #12
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	e7ee      	b.n	8004f4c <__sfp+0x60>
 8004f6e:	bf00      	nop
 8004f70:	08005db4 	.word	0x08005db4
 8004f74:	ffff0001 	.word	0xffff0001

08004f78 <_fwalk_reent>:
 8004f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	4606      	mov	r6, r0
 8004f7e:	4688      	mov	r8, r1
 8004f80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f84:	2700      	movs	r7, #0
 8004f86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f8a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f8e:	d505      	bpl.n	8004f9c <_fwalk_reent+0x24>
 8004f90:	6824      	ldr	r4, [r4, #0]
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d1f7      	bne.n	8004f86 <_fwalk_reent+0xe>
 8004f96:	4638      	mov	r0, r7
 8004f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9c:	89ab      	ldrh	r3, [r5, #12]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d907      	bls.n	8004fb2 <_fwalk_reent+0x3a>
 8004fa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	d003      	beq.n	8004fb2 <_fwalk_reent+0x3a>
 8004faa:	4629      	mov	r1, r5
 8004fac:	4630      	mov	r0, r6
 8004fae:	47c0      	blx	r8
 8004fb0:	4307      	orrs	r7, r0
 8004fb2:	3568      	adds	r5, #104	; 0x68
 8004fb4:	e7e9      	b.n	8004f8a <_fwalk_reent+0x12>

08004fb6 <__retarget_lock_init_recursive>:
 8004fb6:	4770      	bx	lr

08004fb8 <__retarget_lock_acquire_recursive>:
 8004fb8:	4770      	bx	lr

08004fba <__retarget_lock_release_recursive>:
 8004fba:	4770      	bx	lr

08004fbc <sbrk_aligned>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4e0e      	ldr	r6, [pc, #56]	; (8004ff8 <sbrk_aligned+0x3c>)
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	6831      	ldr	r1, [r6, #0]
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	b911      	cbnz	r1, 8004fce <sbrk_aligned+0x12>
 8004fc8:	f000 fb7a 	bl	80056c0 <_sbrk_r>
 8004fcc:	6030      	str	r0, [r6, #0]
 8004fce:	4621      	mov	r1, r4
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	f000 fb75 	bl	80056c0 <_sbrk_r>
 8004fd6:	1c43      	adds	r3, r0, #1
 8004fd8:	d00a      	beq.n	8004ff0 <sbrk_aligned+0x34>
 8004fda:	1cc4      	adds	r4, r0, #3
 8004fdc:	f024 0403 	bic.w	r4, r4, #3
 8004fe0:	42a0      	cmp	r0, r4
 8004fe2:	d007      	beq.n	8004ff4 <sbrk_aligned+0x38>
 8004fe4:	1a21      	subs	r1, r4, r0
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 fb6a 	bl	80056c0 <_sbrk_r>
 8004fec:	3001      	adds	r0, #1
 8004fee:	d101      	bne.n	8004ff4 <sbrk_aligned+0x38>
 8004ff0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	2000012c 	.word	0x2000012c

08004ffc <_malloc_r>:
 8004ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005000:	1ccd      	adds	r5, r1, #3
 8005002:	f025 0503 	bic.w	r5, r5, #3
 8005006:	3508      	adds	r5, #8
 8005008:	2d0c      	cmp	r5, #12
 800500a:	bf38      	it	cc
 800500c:	250c      	movcc	r5, #12
 800500e:	2d00      	cmp	r5, #0
 8005010:	4607      	mov	r7, r0
 8005012:	db01      	blt.n	8005018 <_malloc_r+0x1c>
 8005014:	42a9      	cmp	r1, r5
 8005016:	d905      	bls.n	8005024 <_malloc_r+0x28>
 8005018:	230c      	movs	r3, #12
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	2600      	movs	r6, #0
 800501e:	4630      	mov	r0, r6
 8005020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005024:	4e2e      	ldr	r6, [pc, #184]	; (80050e0 <_malloc_r+0xe4>)
 8005026:	f000 fdbb 	bl	8005ba0 <__malloc_lock>
 800502a:	6833      	ldr	r3, [r6, #0]
 800502c:	461c      	mov	r4, r3
 800502e:	bb34      	cbnz	r4, 800507e <_malloc_r+0x82>
 8005030:	4629      	mov	r1, r5
 8005032:	4638      	mov	r0, r7
 8005034:	f7ff ffc2 	bl	8004fbc <sbrk_aligned>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	4604      	mov	r4, r0
 800503c:	d14d      	bne.n	80050da <_malloc_r+0xde>
 800503e:	6834      	ldr	r4, [r6, #0]
 8005040:	4626      	mov	r6, r4
 8005042:	2e00      	cmp	r6, #0
 8005044:	d140      	bne.n	80050c8 <_malloc_r+0xcc>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	4631      	mov	r1, r6
 800504a:	4638      	mov	r0, r7
 800504c:	eb04 0803 	add.w	r8, r4, r3
 8005050:	f000 fb36 	bl	80056c0 <_sbrk_r>
 8005054:	4580      	cmp	r8, r0
 8005056:	d13a      	bne.n	80050ce <_malloc_r+0xd2>
 8005058:	6821      	ldr	r1, [r4, #0]
 800505a:	3503      	adds	r5, #3
 800505c:	1a6d      	subs	r5, r5, r1
 800505e:	f025 0503 	bic.w	r5, r5, #3
 8005062:	3508      	adds	r5, #8
 8005064:	2d0c      	cmp	r5, #12
 8005066:	bf38      	it	cc
 8005068:	250c      	movcc	r5, #12
 800506a:	4629      	mov	r1, r5
 800506c:	4638      	mov	r0, r7
 800506e:	f7ff ffa5 	bl	8004fbc <sbrk_aligned>
 8005072:	3001      	adds	r0, #1
 8005074:	d02b      	beq.n	80050ce <_malloc_r+0xd2>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	442b      	add	r3, r5
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	e00e      	b.n	800509c <_malloc_r+0xa0>
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	1b52      	subs	r2, r2, r5
 8005082:	d41e      	bmi.n	80050c2 <_malloc_r+0xc6>
 8005084:	2a0b      	cmp	r2, #11
 8005086:	d916      	bls.n	80050b6 <_malloc_r+0xba>
 8005088:	1961      	adds	r1, r4, r5
 800508a:	42a3      	cmp	r3, r4
 800508c:	6025      	str	r5, [r4, #0]
 800508e:	bf18      	it	ne
 8005090:	6059      	strne	r1, [r3, #4]
 8005092:	6863      	ldr	r3, [r4, #4]
 8005094:	bf08      	it	eq
 8005096:	6031      	streq	r1, [r6, #0]
 8005098:	5162      	str	r2, [r4, r5]
 800509a:	604b      	str	r3, [r1, #4]
 800509c:	4638      	mov	r0, r7
 800509e:	f104 060b 	add.w	r6, r4, #11
 80050a2:	f000 fd83 	bl	8005bac <__malloc_unlock>
 80050a6:	f026 0607 	bic.w	r6, r6, #7
 80050aa:	1d23      	adds	r3, r4, #4
 80050ac:	1af2      	subs	r2, r6, r3
 80050ae:	d0b6      	beq.n	800501e <_malloc_r+0x22>
 80050b0:	1b9b      	subs	r3, r3, r6
 80050b2:	50a3      	str	r3, [r4, r2]
 80050b4:	e7b3      	b.n	800501e <_malloc_r+0x22>
 80050b6:	6862      	ldr	r2, [r4, #4]
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	bf0c      	ite	eq
 80050bc:	6032      	streq	r2, [r6, #0]
 80050be:	605a      	strne	r2, [r3, #4]
 80050c0:	e7ec      	b.n	800509c <_malloc_r+0xa0>
 80050c2:	4623      	mov	r3, r4
 80050c4:	6864      	ldr	r4, [r4, #4]
 80050c6:	e7b2      	b.n	800502e <_malloc_r+0x32>
 80050c8:	4634      	mov	r4, r6
 80050ca:	6876      	ldr	r6, [r6, #4]
 80050cc:	e7b9      	b.n	8005042 <_malloc_r+0x46>
 80050ce:	230c      	movs	r3, #12
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	4638      	mov	r0, r7
 80050d4:	f000 fd6a 	bl	8005bac <__malloc_unlock>
 80050d8:	e7a1      	b.n	800501e <_malloc_r+0x22>
 80050da:	6025      	str	r5, [r4, #0]
 80050dc:	e7de      	b.n	800509c <_malloc_r+0xa0>
 80050de:	bf00      	nop
 80050e0:	20000128 	.word	0x20000128

080050e4 <__sfputc_r>:
 80050e4:	6893      	ldr	r3, [r2, #8]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	b410      	push	{r4}
 80050ec:	6093      	str	r3, [r2, #8]
 80050ee:	da08      	bge.n	8005102 <__sfputc_r+0x1e>
 80050f0:	6994      	ldr	r4, [r2, #24]
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	db01      	blt.n	80050fa <__sfputc_r+0x16>
 80050f6:	290a      	cmp	r1, #10
 80050f8:	d103      	bne.n	8005102 <__sfputc_r+0x1e>
 80050fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050fe:	f000 bb33 	b.w	8005768 <__swbuf_r>
 8005102:	6813      	ldr	r3, [r2, #0]
 8005104:	1c58      	adds	r0, r3, #1
 8005106:	6010      	str	r0, [r2, #0]
 8005108:	7019      	strb	r1, [r3, #0]
 800510a:	4608      	mov	r0, r1
 800510c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005110:	4770      	bx	lr

08005112 <__sfputs_r>:
 8005112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005114:	4606      	mov	r6, r0
 8005116:	460f      	mov	r7, r1
 8005118:	4614      	mov	r4, r2
 800511a:	18d5      	adds	r5, r2, r3
 800511c:	42ac      	cmp	r4, r5
 800511e:	d101      	bne.n	8005124 <__sfputs_r+0x12>
 8005120:	2000      	movs	r0, #0
 8005122:	e007      	b.n	8005134 <__sfputs_r+0x22>
 8005124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005128:	463a      	mov	r2, r7
 800512a:	4630      	mov	r0, r6
 800512c:	f7ff ffda 	bl	80050e4 <__sfputc_r>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d1f3      	bne.n	800511c <__sfputs_r+0xa>
 8005134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005138 <_vfiprintf_r>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	460d      	mov	r5, r1
 800513e:	b09d      	sub	sp, #116	; 0x74
 8005140:	4614      	mov	r4, r2
 8005142:	4698      	mov	r8, r3
 8005144:	4606      	mov	r6, r0
 8005146:	b118      	cbz	r0, 8005150 <_vfiprintf_r+0x18>
 8005148:	6983      	ldr	r3, [r0, #24]
 800514a:	b90b      	cbnz	r3, 8005150 <_vfiprintf_r+0x18>
 800514c:	f7ff fe96 	bl	8004e7c <__sinit>
 8005150:	4b89      	ldr	r3, [pc, #548]	; (8005378 <_vfiprintf_r+0x240>)
 8005152:	429d      	cmp	r5, r3
 8005154:	d11b      	bne.n	800518e <_vfiprintf_r+0x56>
 8005156:	6875      	ldr	r5, [r6, #4]
 8005158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800515a:	07d9      	lsls	r1, r3, #31
 800515c:	d405      	bmi.n	800516a <_vfiprintf_r+0x32>
 800515e:	89ab      	ldrh	r3, [r5, #12]
 8005160:	059a      	lsls	r2, r3, #22
 8005162:	d402      	bmi.n	800516a <_vfiprintf_r+0x32>
 8005164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005166:	f7ff ff27 	bl	8004fb8 <__retarget_lock_acquire_recursive>
 800516a:	89ab      	ldrh	r3, [r5, #12]
 800516c:	071b      	lsls	r3, r3, #28
 800516e:	d501      	bpl.n	8005174 <_vfiprintf_r+0x3c>
 8005170:	692b      	ldr	r3, [r5, #16]
 8005172:	b9eb      	cbnz	r3, 80051b0 <_vfiprintf_r+0x78>
 8005174:	4629      	mov	r1, r5
 8005176:	4630      	mov	r0, r6
 8005178:	f000 fb5a 	bl	8005830 <__swsetup_r>
 800517c:	b1c0      	cbz	r0, 80051b0 <_vfiprintf_r+0x78>
 800517e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005180:	07dc      	lsls	r4, r3, #31
 8005182:	d50e      	bpl.n	80051a2 <_vfiprintf_r+0x6a>
 8005184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005188:	b01d      	add	sp, #116	; 0x74
 800518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518e:	4b7b      	ldr	r3, [pc, #492]	; (800537c <_vfiprintf_r+0x244>)
 8005190:	429d      	cmp	r5, r3
 8005192:	d101      	bne.n	8005198 <_vfiprintf_r+0x60>
 8005194:	68b5      	ldr	r5, [r6, #8]
 8005196:	e7df      	b.n	8005158 <_vfiprintf_r+0x20>
 8005198:	4b79      	ldr	r3, [pc, #484]	; (8005380 <_vfiprintf_r+0x248>)
 800519a:	429d      	cmp	r5, r3
 800519c:	bf08      	it	eq
 800519e:	68f5      	ldreq	r5, [r6, #12]
 80051a0:	e7da      	b.n	8005158 <_vfiprintf_r+0x20>
 80051a2:	89ab      	ldrh	r3, [r5, #12]
 80051a4:	0598      	lsls	r0, r3, #22
 80051a6:	d4ed      	bmi.n	8005184 <_vfiprintf_r+0x4c>
 80051a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051aa:	f7ff ff06 	bl	8004fba <__retarget_lock_release_recursive>
 80051ae:	e7e9      	b.n	8005184 <_vfiprintf_r+0x4c>
 80051b0:	2300      	movs	r3, #0
 80051b2:	9309      	str	r3, [sp, #36]	; 0x24
 80051b4:	2320      	movs	r3, #32
 80051b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80051be:	2330      	movs	r3, #48	; 0x30
 80051c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005384 <_vfiprintf_r+0x24c>
 80051c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051c8:	f04f 0901 	mov.w	r9, #1
 80051cc:	4623      	mov	r3, r4
 80051ce:	469a      	mov	sl, r3
 80051d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051d4:	b10a      	cbz	r2, 80051da <_vfiprintf_r+0xa2>
 80051d6:	2a25      	cmp	r2, #37	; 0x25
 80051d8:	d1f9      	bne.n	80051ce <_vfiprintf_r+0x96>
 80051da:	ebba 0b04 	subs.w	fp, sl, r4
 80051de:	d00b      	beq.n	80051f8 <_vfiprintf_r+0xc0>
 80051e0:	465b      	mov	r3, fp
 80051e2:	4622      	mov	r2, r4
 80051e4:	4629      	mov	r1, r5
 80051e6:	4630      	mov	r0, r6
 80051e8:	f7ff ff93 	bl	8005112 <__sfputs_r>
 80051ec:	3001      	adds	r0, #1
 80051ee:	f000 80aa 	beq.w	8005346 <_vfiprintf_r+0x20e>
 80051f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051f4:	445a      	add	r2, fp
 80051f6:	9209      	str	r2, [sp, #36]	; 0x24
 80051f8:	f89a 3000 	ldrb.w	r3, [sl]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80a2 	beq.w	8005346 <_vfiprintf_r+0x20e>
 8005202:	2300      	movs	r3, #0
 8005204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800520c:	f10a 0a01 	add.w	sl, sl, #1
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	9307      	str	r3, [sp, #28]
 8005214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005218:	931a      	str	r3, [sp, #104]	; 0x68
 800521a:	4654      	mov	r4, sl
 800521c:	2205      	movs	r2, #5
 800521e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005222:	4858      	ldr	r0, [pc, #352]	; (8005384 <_vfiprintf_r+0x24c>)
 8005224:	f7fa ffac 	bl	8000180 <memchr>
 8005228:	9a04      	ldr	r2, [sp, #16]
 800522a:	b9d8      	cbnz	r0, 8005264 <_vfiprintf_r+0x12c>
 800522c:	06d1      	lsls	r1, r2, #27
 800522e:	bf44      	itt	mi
 8005230:	2320      	movmi	r3, #32
 8005232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005236:	0713      	lsls	r3, r2, #28
 8005238:	bf44      	itt	mi
 800523a:	232b      	movmi	r3, #43	; 0x2b
 800523c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005240:	f89a 3000 	ldrb.w	r3, [sl]
 8005244:	2b2a      	cmp	r3, #42	; 0x2a
 8005246:	d015      	beq.n	8005274 <_vfiprintf_r+0x13c>
 8005248:	9a07      	ldr	r2, [sp, #28]
 800524a:	4654      	mov	r4, sl
 800524c:	2000      	movs	r0, #0
 800524e:	f04f 0c0a 	mov.w	ip, #10
 8005252:	4621      	mov	r1, r4
 8005254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005258:	3b30      	subs	r3, #48	; 0x30
 800525a:	2b09      	cmp	r3, #9
 800525c:	d94e      	bls.n	80052fc <_vfiprintf_r+0x1c4>
 800525e:	b1b0      	cbz	r0, 800528e <_vfiprintf_r+0x156>
 8005260:	9207      	str	r2, [sp, #28]
 8005262:	e014      	b.n	800528e <_vfiprintf_r+0x156>
 8005264:	eba0 0308 	sub.w	r3, r0, r8
 8005268:	fa09 f303 	lsl.w	r3, r9, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	9304      	str	r3, [sp, #16]
 8005270:	46a2      	mov	sl, r4
 8005272:	e7d2      	b.n	800521a <_vfiprintf_r+0xe2>
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	1d19      	adds	r1, r3, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	9103      	str	r1, [sp, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	bfbb      	ittet	lt
 8005280:	425b      	neglt	r3, r3
 8005282:	f042 0202 	orrlt.w	r2, r2, #2
 8005286:	9307      	strge	r3, [sp, #28]
 8005288:	9307      	strlt	r3, [sp, #28]
 800528a:	bfb8      	it	lt
 800528c:	9204      	strlt	r2, [sp, #16]
 800528e:	7823      	ldrb	r3, [r4, #0]
 8005290:	2b2e      	cmp	r3, #46	; 0x2e
 8005292:	d10c      	bne.n	80052ae <_vfiprintf_r+0x176>
 8005294:	7863      	ldrb	r3, [r4, #1]
 8005296:	2b2a      	cmp	r3, #42	; 0x2a
 8005298:	d135      	bne.n	8005306 <_vfiprintf_r+0x1ce>
 800529a:	9b03      	ldr	r3, [sp, #12]
 800529c:	1d1a      	adds	r2, r3, #4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	9203      	str	r2, [sp, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bfb8      	it	lt
 80052a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052aa:	3402      	adds	r4, #2
 80052ac:	9305      	str	r3, [sp, #20]
 80052ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005394 <_vfiprintf_r+0x25c>
 80052b2:	7821      	ldrb	r1, [r4, #0]
 80052b4:	2203      	movs	r2, #3
 80052b6:	4650      	mov	r0, sl
 80052b8:	f7fa ff62 	bl	8000180 <memchr>
 80052bc:	b140      	cbz	r0, 80052d0 <_vfiprintf_r+0x198>
 80052be:	2340      	movs	r3, #64	; 0x40
 80052c0:	eba0 000a 	sub.w	r0, r0, sl
 80052c4:	fa03 f000 	lsl.w	r0, r3, r0
 80052c8:	9b04      	ldr	r3, [sp, #16]
 80052ca:	4303      	orrs	r3, r0
 80052cc:	3401      	adds	r4, #1
 80052ce:	9304      	str	r3, [sp, #16]
 80052d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d4:	482c      	ldr	r0, [pc, #176]	; (8005388 <_vfiprintf_r+0x250>)
 80052d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052da:	2206      	movs	r2, #6
 80052dc:	f7fa ff50 	bl	8000180 <memchr>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d03f      	beq.n	8005364 <_vfiprintf_r+0x22c>
 80052e4:	4b29      	ldr	r3, [pc, #164]	; (800538c <_vfiprintf_r+0x254>)
 80052e6:	bb1b      	cbnz	r3, 8005330 <_vfiprintf_r+0x1f8>
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	3307      	adds	r3, #7
 80052ec:	f023 0307 	bic.w	r3, r3, #7
 80052f0:	3308      	adds	r3, #8
 80052f2:	9303      	str	r3, [sp, #12]
 80052f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f6:	443b      	add	r3, r7
 80052f8:	9309      	str	r3, [sp, #36]	; 0x24
 80052fa:	e767      	b.n	80051cc <_vfiprintf_r+0x94>
 80052fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005300:	460c      	mov	r4, r1
 8005302:	2001      	movs	r0, #1
 8005304:	e7a5      	b.n	8005252 <_vfiprintf_r+0x11a>
 8005306:	2300      	movs	r3, #0
 8005308:	3401      	adds	r4, #1
 800530a:	9305      	str	r3, [sp, #20]
 800530c:	4619      	mov	r1, r3
 800530e:	f04f 0c0a 	mov.w	ip, #10
 8005312:	4620      	mov	r0, r4
 8005314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005318:	3a30      	subs	r2, #48	; 0x30
 800531a:	2a09      	cmp	r2, #9
 800531c:	d903      	bls.n	8005326 <_vfiprintf_r+0x1ee>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0c5      	beq.n	80052ae <_vfiprintf_r+0x176>
 8005322:	9105      	str	r1, [sp, #20]
 8005324:	e7c3      	b.n	80052ae <_vfiprintf_r+0x176>
 8005326:	fb0c 2101 	mla	r1, ip, r1, r2
 800532a:	4604      	mov	r4, r0
 800532c:	2301      	movs	r3, #1
 800532e:	e7f0      	b.n	8005312 <_vfiprintf_r+0x1da>
 8005330:	ab03      	add	r3, sp, #12
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	462a      	mov	r2, r5
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <_vfiprintf_r+0x258>)
 8005338:	a904      	add	r1, sp, #16
 800533a:	4630      	mov	r0, r6
 800533c:	f3af 8000 	nop.w
 8005340:	4607      	mov	r7, r0
 8005342:	1c78      	adds	r0, r7, #1
 8005344:	d1d6      	bne.n	80052f4 <_vfiprintf_r+0x1bc>
 8005346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005348:	07d9      	lsls	r1, r3, #31
 800534a:	d405      	bmi.n	8005358 <_vfiprintf_r+0x220>
 800534c:	89ab      	ldrh	r3, [r5, #12]
 800534e:	059a      	lsls	r2, r3, #22
 8005350:	d402      	bmi.n	8005358 <_vfiprintf_r+0x220>
 8005352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005354:	f7ff fe31 	bl	8004fba <__retarget_lock_release_recursive>
 8005358:	89ab      	ldrh	r3, [r5, #12]
 800535a:	065b      	lsls	r3, r3, #25
 800535c:	f53f af12 	bmi.w	8005184 <_vfiprintf_r+0x4c>
 8005360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005362:	e711      	b.n	8005188 <_vfiprintf_r+0x50>
 8005364:	ab03      	add	r3, sp, #12
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	462a      	mov	r2, r5
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <_vfiprintf_r+0x258>)
 800536c:	a904      	add	r1, sp, #16
 800536e:	4630      	mov	r0, r6
 8005370:	f000 f880 	bl	8005474 <_printf_i>
 8005374:	e7e4      	b.n	8005340 <_vfiprintf_r+0x208>
 8005376:	bf00      	nop
 8005378:	08005dd8 	.word	0x08005dd8
 800537c:	08005df8 	.word	0x08005df8
 8005380:	08005db8 	.word	0x08005db8
 8005384:	08005e18 	.word	0x08005e18
 8005388:	08005e22 	.word	0x08005e22
 800538c:	00000000 	.word	0x00000000
 8005390:	08005113 	.word	0x08005113
 8005394:	08005e1e 	.word	0x08005e1e

08005398 <_printf_common>:
 8005398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	4616      	mov	r6, r2
 800539e:	4699      	mov	r9, r3
 80053a0:	688a      	ldr	r2, [r1, #8]
 80053a2:	690b      	ldr	r3, [r1, #16]
 80053a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	bfb8      	it	lt
 80053ac:	4613      	movlt	r3, r2
 80053ae:	6033      	str	r3, [r6, #0]
 80053b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053b4:	4607      	mov	r7, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	b10a      	cbz	r2, 80053be <_printf_common+0x26>
 80053ba:	3301      	adds	r3, #1
 80053bc:	6033      	str	r3, [r6, #0]
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	0699      	lsls	r1, r3, #26
 80053c2:	bf42      	ittt	mi
 80053c4:	6833      	ldrmi	r3, [r6, #0]
 80053c6:	3302      	addmi	r3, #2
 80053c8:	6033      	strmi	r3, [r6, #0]
 80053ca:	6825      	ldr	r5, [r4, #0]
 80053cc:	f015 0506 	ands.w	r5, r5, #6
 80053d0:	d106      	bne.n	80053e0 <_printf_common+0x48>
 80053d2:	f104 0a19 	add.w	sl, r4, #25
 80053d6:	68e3      	ldr	r3, [r4, #12]
 80053d8:	6832      	ldr	r2, [r6, #0]
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	42ab      	cmp	r3, r5
 80053de:	dc26      	bgt.n	800542e <_printf_common+0x96>
 80053e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e4:	1e13      	subs	r3, r2, #0
 80053e6:	6822      	ldr	r2, [r4, #0]
 80053e8:	bf18      	it	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	0692      	lsls	r2, r2, #26
 80053ee:	d42b      	bmi.n	8005448 <_printf_common+0xb0>
 80053f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f4:	4649      	mov	r1, r9
 80053f6:	4638      	mov	r0, r7
 80053f8:	47c0      	blx	r8
 80053fa:	3001      	adds	r0, #1
 80053fc:	d01e      	beq.n	800543c <_printf_common+0xa4>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	68e5      	ldr	r5, [r4, #12]
 8005402:	6832      	ldr	r2, [r6, #0]
 8005404:	f003 0306 	and.w	r3, r3, #6
 8005408:	2b04      	cmp	r3, #4
 800540a:	bf08      	it	eq
 800540c:	1aad      	subeq	r5, r5, r2
 800540e:	68a3      	ldr	r3, [r4, #8]
 8005410:	6922      	ldr	r2, [r4, #16]
 8005412:	bf0c      	ite	eq
 8005414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005418:	2500      	movne	r5, #0
 800541a:	4293      	cmp	r3, r2
 800541c:	bfc4      	itt	gt
 800541e:	1a9b      	subgt	r3, r3, r2
 8005420:	18ed      	addgt	r5, r5, r3
 8005422:	2600      	movs	r6, #0
 8005424:	341a      	adds	r4, #26
 8005426:	42b5      	cmp	r5, r6
 8005428:	d11a      	bne.n	8005460 <_printf_common+0xc8>
 800542a:	2000      	movs	r0, #0
 800542c:	e008      	b.n	8005440 <_printf_common+0xa8>
 800542e:	2301      	movs	r3, #1
 8005430:	4652      	mov	r2, sl
 8005432:	4649      	mov	r1, r9
 8005434:	4638      	mov	r0, r7
 8005436:	47c0      	blx	r8
 8005438:	3001      	adds	r0, #1
 800543a:	d103      	bne.n	8005444 <_printf_common+0xac>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005444:	3501      	adds	r5, #1
 8005446:	e7c6      	b.n	80053d6 <_printf_common+0x3e>
 8005448:	18e1      	adds	r1, r4, r3
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	2030      	movs	r0, #48	; 0x30
 800544e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005452:	4422      	add	r2, r4
 8005454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800545c:	3302      	adds	r3, #2
 800545e:	e7c7      	b.n	80053f0 <_printf_common+0x58>
 8005460:	2301      	movs	r3, #1
 8005462:	4622      	mov	r2, r4
 8005464:	4649      	mov	r1, r9
 8005466:	4638      	mov	r0, r7
 8005468:	47c0      	blx	r8
 800546a:	3001      	adds	r0, #1
 800546c:	d0e6      	beq.n	800543c <_printf_common+0xa4>
 800546e:	3601      	adds	r6, #1
 8005470:	e7d9      	b.n	8005426 <_printf_common+0x8e>
	...

08005474 <_printf_i>:
 8005474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	7e0f      	ldrb	r7, [r1, #24]
 800547a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800547c:	2f78      	cmp	r7, #120	; 0x78
 800547e:	4691      	mov	r9, r2
 8005480:	4680      	mov	r8, r0
 8005482:	460c      	mov	r4, r1
 8005484:	469a      	mov	sl, r3
 8005486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800548a:	d807      	bhi.n	800549c <_printf_i+0x28>
 800548c:	2f62      	cmp	r7, #98	; 0x62
 800548e:	d80a      	bhi.n	80054a6 <_printf_i+0x32>
 8005490:	2f00      	cmp	r7, #0
 8005492:	f000 80d8 	beq.w	8005646 <_printf_i+0x1d2>
 8005496:	2f58      	cmp	r7, #88	; 0x58
 8005498:	f000 80a3 	beq.w	80055e2 <_printf_i+0x16e>
 800549c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a4:	e03a      	b.n	800551c <_printf_i+0xa8>
 80054a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054aa:	2b15      	cmp	r3, #21
 80054ac:	d8f6      	bhi.n	800549c <_printf_i+0x28>
 80054ae:	a101      	add	r1, pc, #4	; (adr r1, 80054b4 <_printf_i+0x40>)
 80054b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b4:	0800550d 	.word	0x0800550d
 80054b8:	08005521 	.word	0x08005521
 80054bc:	0800549d 	.word	0x0800549d
 80054c0:	0800549d 	.word	0x0800549d
 80054c4:	0800549d 	.word	0x0800549d
 80054c8:	0800549d 	.word	0x0800549d
 80054cc:	08005521 	.word	0x08005521
 80054d0:	0800549d 	.word	0x0800549d
 80054d4:	0800549d 	.word	0x0800549d
 80054d8:	0800549d 	.word	0x0800549d
 80054dc:	0800549d 	.word	0x0800549d
 80054e0:	0800562d 	.word	0x0800562d
 80054e4:	08005551 	.word	0x08005551
 80054e8:	0800560f 	.word	0x0800560f
 80054ec:	0800549d 	.word	0x0800549d
 80054f0:	0800549d 	.word	0x0800549d
 80054f4:	0800564f 	.word	0x0800564f
 80054f8:	0800549d 	.word	0x0800549d
 80054fc:	08005551 	.word	0x08005551
 8005500:	0800549d 	.word	0x0800549d
 8005504:	0800549d 	.word	0x0800549d
 8005508:	08005617 	.word	0x08005617
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	1d1a      	adds	r2, r3, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	602a      	str	r2, [r5, #0]
 8005514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800551c:	2301      	movs	r3, #1
 800551e:	e0a3      	b.n	8005668 <_printf_i+0x1f4>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	6829      	ldr	r1, [r5, #0]
 8005524:	0606      	lsls	r6, r0, #24
 8005526:	f101 0304 	add.w	r3, r1, #4
 800552a:	d50a      	bpl.n	8005542 <_printf_i+0xce>
 800552c:	680e      	ldr	r6, [r1, #0]
 800552e:	602b      	str	r3, [r5, #0]
 8005530:	2e00      	cmp	r6, #0
 8005532:	da03      	bge.n	800553c <_printf_i+0xc8>
 8005534:	232d      	movs	r3, #45	; 0x2d
 8005536:	4276      	negs	r6, r6
 8005538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800553c:	485e      	ldr	r0, [pc, #376]	; (80056b8 <_printf_i+0x244>)
 800553e:	230a      	movs	r3, #10
 8005540:	e019      	b.n	8005576 <_printf_i+0x102>
 8005542:	680e      	ldr	r6, [r1, #0]
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800554a:	bf18      	it	ne
 800554c:	b236      	sxthne	r6, r6
 800554e:	e7ef      	b.n	8005530 <_printf_i+0xbc>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	6820      	ldr	r0, [r4, #0]
 8005554:	1d19      	adds	r1, r3, #4
 8005556:	6029      	str	r1, [r5, #0]
 8005558:	0601      	lsls	r1, r0, #24
 800555a:	d501      	bpl.n	8005560 <_printf_i+0xec>
 800555c:	681e      	ldr	r6, [r3, #0]
 800555e:	e002      	b.n	8005566 <_printf_i+0xf2>
 8005560:	0646      	lsls	r6, r0, #25
 8005562:	d5fb      	bpl.n	800555c <_printf_i+0xe8>
 8005564:	881e      	ldrh	r6, [r3, #0]
 8005566:	4854      	ldr	r0, [pc, #336]	; (80056b8 <_printf_i+0x244>)
 8005568:	2f6f      	cmp	r7, #111	; 0x6f
 800556a:	bf0c      	ite	eq
 800556c:	2308      	moveq	r3, #8
 800556e:	230a      	movne	r3, #10
 8005570:	2100      	movs	r1, #0
 8005572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005576:	6865      	ldr	r5, [r4, #4]
 8005578:	60a5      	str	r5, [r4, #8]
 800557a:	2d00      	cmp	r5, #0
 800557c:	bfa2      	ittt	ge
 800557e:	6821      	ldrge	r1, [r4, #0]
 8005580:	f021 0104 	bicge.w	r1, r1, #4
 8005584:	6021      	strge	r1, [r4, #0]
 8005586:	b90e      	cbnz	r6, 800558c <_printf_i+0x118>
 8005588:	2d00      	cmp	r5, #0
 800558a:	d04d      	beq.n	8005628 <_printf_i+0x1b4>
 800558c:	4615      	mov	r5, r2
 800558e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005592:	fb03 6711 	mls	r7, r3, r1, r6
 8005596:	5dc7      	ldrb	r7, [r0, r7]
 8005598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800559c:	4637      	mov	r7, r6
 800559e:	42bb      	cmp	r3, r7
 80055a0:	460e      	mov	r6, r1
 80055a2:	d9f4      	bls.n	800558e <_printf_i+0x11a>
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d10b      	bne.n	80055c0 <_printf_i+0x14c>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	07de      	lsls	r6, r3, #31
 80055ac:	d508      	bpl.n	80055c0 <_printf_i+0x14c>
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	6861      	ldr	r1, [r4, #4]
 80055b2:	4299      	cmp	r1, r3
 80055b4:	bfde      	ittt	le
 80055b6:	2330      	movle	r3, #48	; 0x30
 80055b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80055c0:	1b52      	subs	r2, r2, r5
 80055c2:	6122      	str	r2, [r4, #16]
 80055c4:	f8cd a000 	str.w	sl, [sp]
 80055c8:	464b      	mov	r3, r9
 80055ca:	aa03      	add	r2, sp, #12
 80055cc:	4621      	mov	r1, r4
 80055ce:	4640      	mov	r0, r8
 80055d0:	f7ff fee2 	bl	8005398 <_printf_common>
 80055d4:	3001      	adds	r0, #1
 80055d6:	d14c      	bne.n	8005672 <_printf_i+0x1fe>
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055dc:	b004      	add	sp, #16
 80055de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e2:	4835      	ldr	r0, [pc, #212]	; (80056b8 <_printf_i+0x244>)
 80055e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055e8:	6829      	ldr	r1, [r5, #0]
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80055f0:	6029      	str	r1, [r5, #0]
 80055f2:	061d      	lsls	r5, r3, #24
 80055f4:	d514      	bpl.n	8005620 <_printf_i+0x1ac>
 80055f6:	07df      	lsls	r7, r3, #31
 80055f8:	bf44      	itt	mi
 80055fa:	f043 0320 	orrmi.w	r3, r3, #32
 80055fe:	6023      	strmi	r3, [r4, #0]
 8005600:	b91e      	cbnz	r6, 800560a <_printf_i+0x196>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	f023 0320 	bic.w	r3, r3, #32
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	2310      	movs	r3, #16
 800560c:	e7b0      	b.n	8005570 <_printf_i+0xfc>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	f043 0320 	orr.w	r3, r3, #32
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	2378      	movs	r3, #120	; 0x78
 8005618:	4828      	ldr	r0, [pc, #160]	; (80056bc <_printf_i+0x248>)
 800561a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800561e:	e7e3      	b.n	80055e8 <_printf_i+0x174>
 8005620:	0659      	lsls	r1, r3, #25
 8005622:	bf48      	it	mi
 8005624:	b2b6      	uxthmi	r6, r6
 8005626:	e7e6      	b.n	80055f6 <_printf_i+0x182>
 8005628:	4615      	mov	r5, r2
 800562a:	e7bb      	b.n	80055a4 <_printf_i+0x130>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	6826      	ldr	r6, [r4, #0]
 8005630:	6961      	ldr	r1, [r4, #20]
 8005632:	1d18      	adds	r0, r3, #4
 8005634:	6028      	str	r0, [r5, #0]
 8005636:	0635      	lsls	r5, r6, #24
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	d501      	bpl.n	8005640 <_printf_i+0x1cc>
 800563c:	6019      	str	r1, [r3, #0]
 800563e:	e002      	b.n	8005646 <_printf_i+0x1d2>
 8005640:	0670      	lsls	r0, r6, #25
 8005642:	d5fb      	bpl.n	800563c <_printf_i+0x1c8>
 8005644:	8019      	strh	r1, [r3, #0]
 8005646:	2300      	movs	r3, #0
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	4615      	mov	r5, r2
 800564c:	e7ba      	b.n	80055c4 <_printf_i+0x150>
 800564e:	682b      	ldr	r3, [r5, #0]
 8005650:	1d1a      	adds	r2, r3, #4
 8005652:	602a      	str	r2, [r5, #0]
 8005654:	681d      	ldr	r5, [r3, #0]
 8005656:	6862      	ldr	r2, [r4, #4]
 8005658:	2100      	movs	r1, #0
 800565a:	4628      	mov	r0, r5
 800565c:	f7fa fd90 	bl	8000180 <memchr>
 8005660:	b108      	cbz	r0, 8005666 <_printf_i+0x1f2>
 8005662:	1b40      	subs	r0, r0, r5
 8005664:	6060      	str	r0, [r4, #4]
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	6123      	str	r3, [r4, #16]
 800566a:	2300      	movs	r3, #0
 800566c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005670:	e7a8      	b.n	80055c4 <_printf_i+0x150>
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	462a      	mov	r2, r5
 8005676:	4649      	mov	r1, r9
 8005678:	4640      	mov	r0, r8
 800567a:	47d0      	blx	sl
 800567c:	3001      	adds	r0, #1
 800567e:	d0ab      	beq.n	80055d8 <_printf_i+0x164>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	079b      	lsls	r3, r3, #30
 8005684:	d413      	bmi.n	80056ae <_printf_i+0x23a>
 8005686:	68e0      	ldr	r0, [r4, #12]
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	4298      	cmp	r0, r3
 800568c:	bfb8      	it	lt
 800568e:	4618      	movlt	r0, r3
 8005690:	e7a4      	b.n	80055dc <_printf_i+0x168>
 8005692:	2301      	movs	r3, #1
 8005694:	4632      	mov	r2, r6
 8005696:	4649      	mov	r1, r9
 8005698:	4640      	mov	r0, r8
 800569a:	47d0      	blx	sl
 800569c:	3001      	adds	r0, #1
 800569e:	d09b      	beq.n	80055d8 <_printf_i+0x164>
 80056a0:	3501      	adds	r5, #1
 80056a2:	68e3      	ldr	r3, [r4, #12]
 80056a4:	9903      	ldr	r1, [sp, #12]
 80056a6:	1a5b      	subs	r3, r3, r1
 80056a8:	42ab      	cmp	r3, r5
 80056aa:	dcf2      	bgt.n	8005692 <_printf_i+0x21e>
 80056ac:	e7eb      	b.n	8005686 <_printf_i+0x212>
 80056ae:	2500      	movs	r5, #0
 80056b0:	f104 0619 	add.w	r6, r4, #25
 80056b4:	e7f5      	b.n	80056a2 <_printf_i+0x22e>
 80056b6:	bf00      	nop
 80056b8:	08005e29 	.word	0x08005e29
 80056bc:	08005e3a 	.word	0x08005e3a

080056c0 <_sbrk_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d06      	ldr	r5, [pc, #24]	; (80056dc <_sbrk_r+0x1c>)
 80056c4:	2300      	movs	r3, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fb f95a 	bl	8000984 <_sbrk>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_sbrk_r+0x1a>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_sbrk_r+0x1a>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000130 	.word	0x20000130

080056e0 <__sread>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	460c      	mov	r4, r1
 80056e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e8:	f000 fab2 	bl	8005c50 <_read_r>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	bfab      	itete	ge
 80056f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056f2:	89a3      	ldrhlt	r3, [r4, #12]
 80056f4:	181b      	addge	r3, r3, r0
 80056f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056fa:	bfac      	ite	ge
 80056fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80056fe:	81a3      	strhlt	r3, [r4, #12]
 8005700:	bd10      	pop	{r4, pc}

08005702 <__swrite>:
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	461f      	mov	r7, r3
 8005708:	898b      	ldrh	r3, [r1, #12]
 800570a:	05db      	lsls	r3, r3, #23
 800570c:	4605      	mov	r5, r0
 800570e:	460c      	mov	r4, r1
 8005710:	4616      	mov	r6, r2
 8005712:	d505      	bpl.n	8005720 <__swrite+0x1e>
 8005714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005718:	2302      	movs	r3, #2
 800571a:	2200      	movs	r2, #0
 800571c:	f000 f9c8 	bl	8005ab0 <_lseek_r>
 8005720:	89a3      	ldrh	r3, [r4, #12]
 8005722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800572a:	81a3      	strh	r3, [r4, #12]
 800572c:	4632      	mov	r2, r6
 800572e:	463b      	mov	r3, r7
 8005730:	4628      	mov	r0, r5
 8005732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	f000 b869 	b.w	800580c <_write_r>

0800573a <__sseek>:
 800573a:	b510      	push	{r4, lr}
 800573c:	460c      	mov	r4, r1
 800573e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005742:	f000 f9b5 	bl	8005ab0 <_lseek_r>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	bf15      	itete	ne
 800574c:	6560      	strne	r0, [r4, #84]	; 0x54
 800574e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005756:	81a3      	strheq	r3, [r4, #12]
 8005758:	bf18      	it	ne
 800575a:	81a3      	strhne	r3, [r4, #12]
 800575c:	bd10      	pop	{r4, pc}

0800575e <__sclose>:
 800575e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005762:	f000 b8d3 	b.w	800590c <_close_r>
	...

08005768 <__swbuf_r>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	460e      	mov	r6, r1
 800576c:	4614      	mov	r4, r2
 800576e:	4605      	mov	r5, r0
 8005770:	b118      	cbz	r0, 800577a <__swbuf_r+0x12>
 8005772:	6983      	ldr	r3, [r0, #24]
 8005774:	b90b      	cbnz	r3, 800577a <__swbuf_r+0x12>
 8005776:	f7ff fb81 	bl	8004e7c <__sinit>
 800577a:	4b21      	ldr	r3, [pc, #132]	; (8005800 <__swbuf_r+0x98>)
 800577c:	429c      	cmp	r4, r3
 800577e:	d12b      	bne.n	80057d8 <__swbuf_r+0x70>
 8005780:	686c      	ldr	r4, [r5, #4]
 8005782:	69a3      	ldr	r3, [r4, #24]
 8005784:	60a3      	str	r3, [r4, #8]
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	071a      	lsls	r2, r3, #28
 800578a:	d52f      	bpl.n	80057ec <__swbuf_r+0x84>
 800578c:	6923      	ldr	r3, [r4, #16]
 800578e:	b36b      	cbz	r3, 80057ec <__swbuf_r+0x84>
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	6820      	ldr	r0, [r4, #0]
 8005794:	1ac0      	subs	r0, r0, r3
 8005796:	6963      	ldr	r3, [r4, #20]
 8005798:	b2f6      	uxtb	r6, r6
 800579a:	4283      	cmp	r3, r0
 800579c:	4637      	mov	r7, r6
 800579e:	dc04      	bgt.n	80057aa <__swbuf_r+0x42>
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f948 	bl	8005a38 <_fflush_r>
 80057a8:	bb30      	cbnz	r0, 80057f8 <__swbuf_r+0x90>
 80057aa:	68a3      	ldr	r3, [r4, #8]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	60a3      	str	r3, [r4, #8]
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	6022      	str	r2, [r4, #0]
 80057b6:	701e      	strb	r6, [r3, #0]
 80057b8:	6963      	ldr	r3, [r4, #20]
 80057ba:	3001      	adds	r0, #1
 80057bc:	4283      	cmp	r3, r0
 80057be:	d004      	beq.n	80057ca <__swbuf_r+0x62>
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	07db      	lsls	r3, r3, #31
 80057c4:	d506      	bpl.n	80057d4 <__swbuf_r+0x6c>
 80057c6:	2e0a      	cmp	r6, #10
 80057c8:	d104      	bne.n	80057d4 <__swbuf_r+0x6c>
 80057ca:	4621      	mov	r1, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 f933 	bl	8005a38 <_fflush_r>
 80057d2:	b988      	cbnz	r0, 80057f8 <__swbuf_r+0x90>
 80057d4:	4638      	mov	r0, r7
 80057d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <__swbuf_r+0x9c>)
 80057da:	429c      	cmp	r4, r3
 80057dc:	d101      	bne.n	80057e2 <__swbuf_r+0x7a>
 80057de:	68ac      	ldr	r4, [r5, #8]
 80057e0:	e7cf      	b.n	8005782 <__swbuf_r+0x1a>
 80057e2:	4b09      	ldr	r3, [pc, #36]	; (8005808 <__swbuf_r+0xa0>)
 80057e4:	429c      	cmp	r4, r3
 80057e6:	bf08      	it	eq
 80057e8:	68ec      	ldreq	r4, [r5, #12]
 80057ea:	e7ca      	b.n	8005782 <__swbuf_r+0x1a>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 f81e 	bl	8005830 <__swsetup_r>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d0cb      	beq.n	8005790 <__swbuf_r+0x28>
 80057f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80057fc:	e7ea      	b.n	80057d4 <__swbuf_r+0x6c>
 80057fe:	bf00      	nop
 8005800:	08005dd8 	.word	0x08005dd8
 8005804:	08005df8 	.word	0x08005df8
 8005808:	08005db8 	.word	0x08005db8

0800580c <_write_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4d07      	ldr	r5, [pc, #28]	; (800582c <_write_r+0x20>)
 8005810:	4604      	mov	r4, r0
 8005812:	4608      	mov	r0, r1
 8005814:	4611      	mov	r1, r2
 8005816:	2200      	movs	r2, #0
 8005818:	602a      	str	r2, [r5, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	f7fb f861 	bl	80008e2 <_write>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_write_r+0x1e>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_write_r+0x1e>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	20000130 	.word	0x20000130

08005830 <__swsetup_r>:
 8005830:	4b32      	ldr	r3, [pc, #200]	; (80058fc <__swsetup_r+0xcc>)
 8005832:	b570      	push	{r4, r5, r6, lr}
 8005834:	681d      	ldr	r5, [r3, #0]
 8005836:	4606      	mov	r6, r0
 8005838:	460c      	mov	r4, r1
 800583a:	b125      	cbz	r5, 8005846 <__swsetup_r+0x16>
 800583c:	69ab      	ldr	r3, [r5, #24]
 800583e:	b913      	cbnz	r3, 8005846 <__swsetup_r+0x16>
 8005840:	4628      	mov	r0, r5
 8005842:	f7ff fb1b 	bl	8004e7c <__sinit>
 8005846:	4b2e      	ldr	r3, [pc, #184]	; (8005900 <__swsetup_r+0xd0>)
 8005848:	429c      	cmp	r4, r3
 800584a:	d10f      	bne.n	800586c <__swsetup_r+0x3c>
 800584c:	686c      	ldr	r4, [r5, #4]
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005854:	0719      	lsls	r1, r3, #28
 8005856:	d42c      	bmi.n	80058b2 <__swsetup_r+0x82>
 8005858:	06dd      	lsls	r5, r3, #27
 800585a:	d411      	bmi.n	8005880 <__swsetup_r+0x50>
 800585c:	2309      	movs	r3, #9
 800585e:	6033      	str	r3, [r6, #0]
 8005860:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800586a:	e03e      	b.n	80058ea <__swsetup_r+0xba>
 800586c:	4b25      	ldr	r3, [pc, #148]	; (8005904 <__swsetup_r+0xd4>)
 800586e:	429c      	cmp	r4, r3
 8005870:	d101      	bne.n	8005876 <__swsetup_r+0x46>
 8005872:	68ac      	ldr	r4, [r5, #8]
 8005874:	e7eb      	b.n	800584e <__swsetup_r+0x1e>
 8005876:	4b24      	ldr	r3, [pc, #144]	; (8005908 <__swsetup_r+0xd8>)
 8005878:	429c      	cmp	r4, r3
 800587a:	bf08      	it	eq
 800587c:	68ec      	ldreq	r4, [r5, #12]
 800587e:	e7e6      	b.n	800584e <__swsetup_r+0x1e>
 8005880:	0758      	lsls	r0, r3, #29
 8005882:	d512      	bpl.n	80058aa <__swsetup_r+0x7a>
 8005884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005886:	b141      	cbz	r1, 800589a <__swsetup_r+0x6a>
 8005888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800588c:	4299      	cmp	r1, r3
 800588e:	d002      	beq.n	8005896 <__swsetup_r+0x66>
 8005890:	4630      	mov	r0, r6
 8005892:	f000 f991 	bl	8005bb8 <_free_r>
 8005896:	2300      	movs	r3, #0
 8005898:	6363      	str	r3, [r4, #52]	; 0x34
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058a0:	81a3      	strh	r3, [r4, #12]
 80058a2:	2300      	movs	r3, #0
 80058a4:	6063      	str	r3, [r4, #4]
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f043 0308 	orr.w	r3, r3, #8
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	6923      	ldr	r3, [r4, #16]
 80058b4:	b94b      	cbnz	r3, 80058ca <__swsetup_r+0x9a>
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c0:	d003      	beq.n	80058ca <__swsetup_r+0x9a>
 80058c2:	4621      	mov	r1, r4
 80058c4:	4630      	mov	r0, r6
 80058c6:	f000 f92b 	bl	8005b20 <__smakebuf_r>
 80058ca:	89a0      	ldrh	r0, [r4, #12]
 80058cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058d0:	f010 0301 	ands.w	r3, r0, #1
 80058d4:	d00a      	beq.n	80058ec <__swsetup_r+0xbc>
 80058d6:	2300      	movs	r3, #0
 80058d8:	60a3      	str	r3, [r4, #8]
 80058da:	6963      	ldr	r3, [r4, #20]
 80058dc:	425b      	negs	r3, r3
 80058de:	61a3      	str	r3, [r4, #24]
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	b943      	cbnz	r3, 80058f6 <__swsetup_r+0xc6>
 80058e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058e8:	d1ba      	bne.n	8005860 <__swsetup_r+0x30>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	0781      	lsls	r1, r0, #30
 80058ee:	bf58      	it	pl
 80058f0:	6963      	ldrpl	r3, [r4, #20]
 80058f2:	60a3      	str	r3, [r4, #8]
 80058f4:	e7f4      	b.n	80058e0 <__swsetup_r+0xb0>
 80058f6:	2000      	movs	r0, #0
 80058f8:	e7f7      	b.n	80058ea <__swsetup_r+0xba>
 80058fa:	bf00      	nop
 80058fc:	20000014 	.word	0x20000014
 8005900:	08005dd8 	.word	0x08005dd8
 8005904:	08005df8 	.word	0x08005df8
 8005908:	08005db8 	.word	0x08005db8

0800590c <_close_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d06      	ldr	r5, [pc, #24]	; (8005928 <_close_r+0x1c>)
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	602b      	str	r3, [r5, #0]
 8005918:	f7fa ffff 	bl	800091a <_close>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_close_r+0x1a>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_close_r+0x1a>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20000130 	.word	0x20000130

0800592c <__sflush_r>:
 800592c:	898a      	ldrh	r2, [r1, #12]
 800592e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005932:	4605      	mov	r5, r0
 8005934:	0710      	lsls	r0, r2, #28
 8005936:	460c      	mov	r4, r1
 8005938:	d458      	bmi.n	80059ec <__sflush_r+0xc0>
 800593a:	684b      	ldr	r3, [r1, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	dc05      	bgt.n	800594c <__sflush_r+0x20>
 8005940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	dc02      	bgt.n	800594c <__sflush_r+0x20>
 8005946:	2000      	movs	r0, #0
 8005948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800594c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800594e:	2e00      	cmp	r6, #0
 8005950:	d0f9      	beq.n	8005946 <__sflush_r+0x1a>
 8005952:	2300      	movs	r3, #0
 8005954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005958:	682f      	ldr	r7, [r5, #0]
 800595a:	602b      	str	r3, [r5, #0]
 800595c:	d032      	beq.n	80059c4 <__sflush_r+0x98>
 800595e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	075a      	lsls	r2, r3, #29
 8005964:	d505      	bpl.n	8005972 <__sflush_r+0x46>
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	1ac0      	subs	r0, r0, r3
 800596a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800596c:	b10b      	cbz	r3, 8005972 <__sflush_r+0x46>
 800596e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005970:	1ac0      	subs	r0, r0, r3
 8005972:	2300      	movs	r3, #0
 8005974:	4602      	mov	r2, r0
 8005976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005978:	6a21      	ldr	r1, [r4, #32]
 800597a:	4628      	mov	r0, r5
 800597c:	47b0      	blx	r6
 800597e:	1c43      	adds	r3, r0, #1
 8005980:	89a3      	ldrh	r3, [r4, #12]
 8005982:	d106      	bne.n	8005992 <__sflush_r+0x66>
 8005984:	6829      	ldr	r1, [r5, #0]
 8005986:	291d      	cmp	r1, #29
 8005988:	d82c      	bhi.n	80059e4 <__sflush_r+0xb8>
 800598a:	4a2a      	ldr	r2, [pc, #168]	; (8005a34 <__sflush_r+0x108>)
 800598c:	40ca      	lsrs	r2, r1
 800598e:	07d6      	lsls	r6, r2, #31
 8005990:	d528      	bpl.n	80059e4 <__sflush_r+0xb8>
 8005992:	2200      	movs	r2, #0
 8005994:	6062      	str	r2, [r4, #4]
 8005996:	04d9      	lsls	r1, r3, #19
 8005998:	6922      	ldr	r2, [r4, #16]
 800599a:	6022      	str	r2, [r4, #0]
 800599c:	d504      	bpl.n	80059a8 <__sflush_r+0x7c>
 800599e:	1c42      	adds	r2, r0, #1
 80059a0:	d101      	bne.n	80059a6 <__sflush_r+0x7a>
 80059a2:	682b      	ldr	r3, [r5, #0]
 80059a4:	b903      	cbnz	r3, 80059a8 <__sflush_r+0x7c>
 80059a6:	6560      	str	r0, [r4, #84]	; 0x54
 80059a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059aa:	602f      	str	r7, [r5, #0]
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d0ca      	beq.n	8005946 <__sflush_r+0x1a>
 80059b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059b4:	4299      	cmp	r1, r3
 80059b6:	d002      	beq.n	80059be <__sflush_r+0x92>
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 f8fd 	bl	8005bb8 <_free_r>
 80059be:	2000      	movs	r0, #0
 80059c0:	6360      	str	r0, [r4, #52]	; 0x34
 80059c2:	e7c1      	b.n	8005948 <__sflush_r+0x1c>
 80059c4:	6a21      	ldr	r1, [r4, #32]
 80059c6:	2301      	movs	r3, #1
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b0      	blx	r6
 80059cc:	1c41      	adds	r1, r0, #1
 80059ce:	d1c7      	bne.n	8005960 <__sflush_r+0x34>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0c4      	beq.n	8005960 <__sflush_r+0x34>
 80059d6:	2b1d      	cmp	r3, #29
 80059d8:	d001      	beq.n	80059de <__sflush_r+0xb2>
 80059da:	2b16      	cmp	r3, #22
 80059dc:	d101      	bne.n	80059e2 <__sflush_r+0xb6>
 80059de:	602f      	str	r7, [r5, #0]
 80059e0:	e7b1      	b.n	8005946 <__sflush_r+0x1a>
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e8:	81a3      	strh	r3, [r4, #12]
 80059ea:	e7ad      	b.n	8005948 <__sflush_r+0x1c>
 80059ec:	690f      	ldr	r7, [r1, #16]
 80059ee:	2f00      	cmp	r7, #0
 80059f0:	d0a9      	beq.n	8005946 <__sflush_r+0x1a>
 80059f2:	0793      	lsls	r3, r2, #30
 80059f4:	680e      	ldr	r6, [r1, #0]
 80059f6:	bf08      	it	eq
 80059f8:	694b      	ldreq	r3, [r1, #20]
 80059fa:	600f      	str	r7, [r1, #0]
 80059fc:	bf18      	it	ne
 80059fe:	2300      	movne	r3, #0
 8005a00:	eba6 0807 	sub.w	r8, r6, r7
 8005a04:	608b      	str	r3, [r1, #8]
 8005a06:	f1b8 0f00 	cmp.w	r8, #0
 8005a0a:	dd9c      	ble.n	8005946 <__sflush_r+0x1a>
 8005a0c:	6a21      	ldr	r1, [r4, #32]
 8005a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a10:	4643      	mov	r3, r8
 8005a12:	463a      	mov	r2, r7
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b0      	blx	r6
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	dc06      	bgt.n	8005a2a <__sflush_r+0xfe>
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a28:	e78e      	b.n	8005948 <__sflush_r+0x1c>
 8005a2a:	4407      	add	r7, r0
 8005a2c:	eba8 0800 	sub.w	r8, r8, r0
 8005a30:	e7e9      	b.n	8005a06 <__sflush_r+0xda>
 8005a32:	bf00      	nop
 8005a34:	20400001 	.word	0x20400001

08005a38 <_fflush_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	690b      	ldr	r3, [r1, #16]
 8005a3c:	4605      	mov	r5, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	b913      	cbnz	r3, 8005a48 <_fflush_r+0x10>
 8005a42:	2500      	movs	r5, #0
 8005a44:	4628      	mov	r0, r5
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	b118      	cbz	r0, 8005a52 <_fflush_r+0x1a>
 8005a4a:	6983      	ldr	r3, [r0, #24]
 8005a4c:	b90b      	cbnz	r3, 8005a52 <_fflush_r+0x1a>
 8005a4e:	f7ff fa15 	bl	8004e7c <__sinit>
 8005a52:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <_fflush_r+0x6c>)
 8005a54:	429c      	cmp	r4, r3
 8005a56:	d11b      	bne.n	8005a90 <_fflush_r+0x58>
 8005a58:	686c      	ldr	r4, [r5, #4]
 8005a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0ef      	beq.n	8005a42 <_fflush_r+0xa>
 8005a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a64:	07d0      	lsls	r0, r2, #31
 8005a66:	d404      	bmi.n	8005a72 <_fflush_r+0x3a>
 8005a68:	0599      	lsls	r1, r3, #22
 8005a6a:	d402      	bmi.n	8005a72 <_fflush_r+0x3a>
 8005a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6e:	f7ff faa3 	bl	8004fb8 <__retarget_lock_acquire_recursive>
 8005a72:	4628      	mov	r0, r5
 8005a74:	4621      	mov	r1, r4
 8005a76:	f7ff ff59 	bl	800592c <__sflush_r>
 8005a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a7c:	07da      	lsls	r2, r3, #31
 8005a7e:	4605      	mov	r5, r0
 8005a80:	d4e0      	bmi.n	8005a44 <_fflush_r+0xc>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	d4dd      	bmi.n	8005a44 <_fflush_r+0xc>
 8005a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a8a:	f7ff fa96 	bl	8004fba <__retarget_lock_release_recursive>
 8005a8e:	e7d9      	b.n	8005a44 <_fflush_r+0xc>
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <_fflush_r+0x70>)
 8005a92:	429c      	cmp	r4, r3
 8005a94:	d101      	bne.n	8005a9a <_fflush_r+0x62>
 8005a96:	68ac      	ldr	r4, [r5, #8]
 8005a98:	e7df      	b.n	8005a5a <_fflush_r+0x22>
 8005a9a:	4b04      	ldr	r3, [pc, #16]	; (8005aac <_fflush_r+0x74>)
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	bf08      	it	eq
 8005aa0:	68ec      	ldreq	r4, [r5, #12]
 8005aa2:	e7da      	b.n	8005a5a <_fflush_r+0x22>
 8005aa4:	08005dd8 	.word	0x08005dd8
 8005aa8:	08005df8 	.word	0x08005df8
 8005aac:	08005db8 	.word	0x08005db8

08005ab0 <_lseek_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d07      	ldr	r5, [pc, #28]	; (8005ad0 <_lseek_r+0x20>)
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	4611      	mov	r1, r2
 8005aba:	2200      	movs	r2, #0
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f7fa ff52 	bl	8000968 <_lseek>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_lseek_r+0x1e>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_lseek_r+0x1e>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	20000130 	.word	0x20000130

08005ad4 <__swhatbuf_r>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	460e      	mov	r6, r1
 8005ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005adc:	2900      	cmp	r1, #0
 8005ade:	b096      	sub	sp, #88	; 0x58
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	461d      	mov	r5, r3
 8005ae4:	da08      	bge.n	8005af8 <__swhatbuf_r+0x24>
 8005ae6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	602a      	str	r2, [r5, #0]
 8005aee:	061a      	lsls	r2, r3, #24
 8005af0:	d410      	bmi.n	8005b14 <__swhatbuf_r+0x40>
 8005af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005af6:	e00e      	b.n	8005b16 <__swhatbuf_r+0x42>
 8005af8:	466a      	mov	r2, sp
 8005afa:	f000 f8bb 	bl	8005c74 <_fstat_r>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	dbf1      	blt.n	8005ae6 <__swhatbuf_r+0x12>
 8005b02:	9a01      	ldr	r2, [sp, #4]
 8005b04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b0c:	425a      	negs	r2, r3
 8005b0e:	415a      	adcs	r2, r3
 8005b10:	602a      	str	r2, [r5, #0]
 8005b12:	e7ee      	b.n	8005af2 <__swhatbuf_r+0x1e>
 8005b14:	2340      	movs	r3, #64	; 0x40
 8005b16:	2000      	movs	r0, #0
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	b016      	add	sp, #88	; 0x58
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b20 <__smakebuf_r>:
 8005b20:	898b      	ldrh	r3, [r1, #12]
 8005b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b24:	079d      	lsls	r5, r3, #30
 8005b26:	4606      	mov	r6, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	d507      	bpl.n	8005b3c <__smakebuf_r+0x1c>
 8005b2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	2301      	movs	r3, #1
 8005b36:	6163      	str	r3, [r4, #20]
 8005b38:	b002      	add	sp, #8
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	ab01      	add	r3, sp, #4
 8005b3e:	466a      	mov	r2, sp
 8005b40:	f7ff ffc8 	bl	8005ad4 <__swhatbuf_r>
 8005b44:	9900      	ldr	r1, [sp, #0]
 8005b46:	4605      	mov	r5, r0
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7ff fa57 	bl	8004ffc <_malloc_r>
 8005b4e:	b948      	cbnz	r0, 8005b64 <__smakebuf_r+0x44>
 8005b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b54:	059a      	lsls	r2, r3, #22
 8005b56:	d4ef      	bmi.n	8005b38 <__smakebuf_r+0x18>
 8005b58:	f023 0303 	bic.w	r3, r3, #3
 8005b5c:	f043 0302 	orr.w	r3, r3, #2
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	e7e3      	b.n	8005b2c <__smakebuf_r+0xc>
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <__smakebuf_r+0x7c>)
 8005b66:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	6020      	str	r0, [r4, #0]
 8005b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b70:	81a3      	strh	r3, [r4, #12]
 8005b72:	9b00      	ldr	r3, [sp, #0]
 8005b74:	6163      	str	r3, [r4, #20]
 8005b76:	9b01      	ldr	r3, [sp, #4]
 8005b78:	6120      	str	r0, [r4, #16]
 8005b7a:	b15b      	cbz	r3, 8005b94 <__smakebuf_r+0x74>
 8005b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b80:	4630      	mov	r0, r6
 8005b82:	f000 f889 	bl	8005c98 <_isatty_r>
 8005b86:	b128      	cbz	r0, 8005b94 <__smakebuf_r+0x74>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	89a0      	ldrh	r0, [r4, #12]
 8005b96:	4305      	orrs	r5, r0
 8005b98:	81a5      	strh	r5, [r4, #12]
 8005b9a:	e7cd      	b.n	8005b38 <__smakebuf_r+0x18>
 8005b9c:	08004e15 	.word	0x08004e15

08005ba0 <__malloc_lock>:
 8005ba0:	4801      	ldr	r0, [pc, #4]	; (8005ba8 <__malloc_lock+0x8>)
 8005ba2:	f7ff ba09 	b.w	8004fb8 <__retarget_lock_acquire_recursive>
 8005ba6:	bf00      	nop
 8005ba8:	20000124 	.word	0x20000124

08005bac <__malloc_unlock>:
 8005bac:	4801      	ldr	r0, [pc, #4]	; (8005bb4 <__malloc_unlock+0x8>)
 8005bae:	f7ff ba04 	b.w	8004fba <__retarget_lock_release_recursive>
 8005bb2:	bf00      	nop
 8005bb4:	20000124 	.word	0x20000124

08005bb8 <_free_r>:
 8005bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bba:	2900      	cmp	r1, #0
 8005bbc:	d044      	beq.n	8005c48 <_free_r+0x90>
 8005bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc2:	9001      	str	r0, [sp, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f1a1 0404 	sub.w	r4, r1, #4
 8005bca:	bfb8      	it	lt
 8005bcc:	18e4      	addlt	r4, r4, r3
 8005bce:	f7ff ffe7 	bl	8005ba0 <__malloc_lock>
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <_free_r+0x94>)
 8005bd4:	9801      	ldr	r0, [sp, #4]
 8005bd6:	6813      	ldr	r3, [r2, #0]
 8005bd8:	b933      	cbnz	r3, 8005be8 <_free_r+0x30>
 8005bda:	6063      	str	r3, [r4, #4]
 8005bdc:	6014      	str	r4, [r2, #0]
 8005bde:	b003      	add	sp, #12
 8005be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005be4:	f7ff bfe2 	b.w	8005bac <__malloc_unlock>
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	d908      	bls.n	8005bfe <_free_r+0x46>
 8005bec:	6825      	ldr	r5, [r4, #0]
 8005bee:	1961      	adds	r1, r4, r5
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	bf01      	itttt	eq
 8005bf4:	6819      	ldreq	r1, [r3, #0]
 8005bf6:	685b      	ldreq	r3, [r3, #4]
 8005bf8:	1949      	addeq	r1, r1, r5
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	e7ed      	b.n	8005bda <_free_r+0x22>
 8005bfe:	461a      	mov	r2, r3
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	b10b      	cbz	r3, 8005c08 <_free_r+0x50>
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d9fa      	bls.n	8005bfe <_free_r+0x46>
 8005c08:	6811      	ldr	r1, [r2, #0]
 8005c0a:	1855      	adds	r5, r2, r1
 8005c0c:	42a5      	cmp	r5, r4
 8005c0e:	d10b      	bne.n	8005c28 <_free_r+0x70>
 8005c10:	6824      	ldr	r4, [r4, #0]
 8005c12:	4421      	add	r1, r4
 8005c14:	1854      	adds	r4, r2, r1
 8005c16:	42a3      	cmp	r3, r4
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	d1e0      	bne.n	8005bde <_free_r+0x26>
 8005c1c:	681c      	ldr	r4, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	6053      	str	r3, [r2, #4]
 8005c22:	4421      	add	r1, r4
 8005c24:	6011      	str	r1, [r2, #0]
 8005c26:	e7da      	b.n	8005bde <_free_r+0x26>
 8005c28:	d902      	bls.n	8005c30 <_free_r+0x78>
 8005c2a:	230c      	movs	r3, #12
 8005c2c:	6003      	str	r3, [r0, #0]
 8005c2e:	e7d6      	b.n	8005bde <_free_r+0x26>
 8005c30:	6825      	ldr	r5, [r4, #0]
 8005c32:	1961      	adds	r1, r4, r5
 8005c34:	428b      	cmp	r3, r1
 8005c36:	bf04      	itt	eq
 8005c38:	6819      	ldreq	r1, [r3, #0]
 8005c3a:	685b      	ldreq	r3, [r3, #4]
 8005c3c:	6063      	str	r3, [r4, #4]
 8005c3e:	bf04      	itt	eq
 8005c40:	1949      	addeq	r1, r1, r5
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	6054      	str	r4, [r2, #4]
 8005c46:	e7ca      	b.n	8005bde <_free_r+0x26>
 8005c48:	b003      	add	sp, #12
 8005c4a:	bd30      	pop	{r4, r5, pc}
 8005c4c:	20000128 	.word	0x20000128

08005c50 <_read_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d07      	ldr	r5, [pc, #28]	; (8005c70 <_read_r+0x20>)
 8005c54:	4604      	mov	r4, r0
 8005c56:	4608      	mov	r0, r1
 8005c58:	4611      	mov	r1, r2
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	602a      	str	r2, [r5, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fa fe22 	bl	80008a8 <_read>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_read_r+0x1e>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_read_r+0x1e>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	20000130 	.word	0x20000130

08005c74 <_fstat_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4d07      	ldr	r5, [pc, #28]	; (8005c94 <_fstat_r+0x20>)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	602b      	str	r3, [r5, #0]
 8005c82:	f7fa fe56 	bl	8000932 <_fstat>
 8005c86:	1c43      	adds	r3, r0, #1
 8005c88:	d102      	bne.n	8005c90 <_fstat_r+0x1c>
 8005c8a:	682b      	ldr	r3, [r5, #0]
 8005c8c:	b103      	cbz	r3, 8005c90 <_fstat_r+0x1c>
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	bd38      	pop	{r3, r4, r5, pc}
 8005c92:	bf00      	nop
 8005c94:	20000130 	.word	0x20000130

08005c98 <_isatty_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4d06      	ldr	r5, [pc, #24]	; (8005cb4 <_isatty_r+0x1c>)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	4608      	mov	r0, r1
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	f7fa fe55 	bl	8000952 <_isatty>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_isatty_r+0x1a>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_isatty_r+0x1a>
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	20000130 	.word	0x20000130

08005cb8 <_init>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	bf00      	nop
 8005cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cbe:	bc08      	pop	{r3}
 8005cc0:	469e      	mov	lr, r3
 8005cc2:	4770      	bx	lr

08005cc4 <_fini>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr
=======
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	22ff      	movs	r2, #255	; 0xff
 8004050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e095      	b.n	80041aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408e:	d009      	beq.n	80040a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
 8004096:	e005      	b.n	80040a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd f95e 	bl	8001380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e4:	d902      	bls.n	80040ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e002      	b.n	80040f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040fa:	d007      	beq.n	800410c <HAL_SPI_Init+0xa0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004104:	d002      	beq.n	800410c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	ea42 0103 	orr.w	r1, r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	f003 0204 	and.w	r2, r3, #4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004188:	ea42 0103 	orr.w	r1, r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b088      	sub	sp, #32
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_SPI_Transmit+0x22>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e158      	b.n	8004486 <HAL_SPI_Transmit+0x2d4>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041dc:	f7fd fb04 	bl	80017e8 <HAL_GetTick>
 80041e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d002      	beq.n	80041f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
 80041f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041f6:	e13d      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_SPI_Transmit+0x52>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004208:	e134      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2203      	movs	r2, #3
 800420e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004254:	d10f      	bne.n	8004276 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d007      	beq.n	8004294 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800429c:	d94b      	bls.n	8004336 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Transmit+0xfa>
 80042a6:	8afb      	ldrh	r3, [r7, #22]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d13e      	bne.n	800432a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	1c9a      	adds	r2, r3, #2
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042d0:	e02b      	b.n	800432a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d112      	bne.n	8004306 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004304:	e011      	b.n	800432a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004306:	f7fd fa6f 	bl	80017e8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d803      	bhi.n	800431e <HAL_SPI_Transmit+0x16c>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431c:	d102      	bne.n	8004324 <HAL_SPI_Transmit+0x172>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004328:	e0a4      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1ce      	bne.n	80042d2 <HAL_SPI_Transmit+0x120>
 8004334:	e07c      	b.n	8004430 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_SPI_Transmit+0x192>
 800433e:	8afb      	ldrh	r3, [r7, #22]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d170      	bne.n	8004426 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d912      	bls.n	8004374 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b02      	subs	r3, #2
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004372:	e058      	b.n	8004426 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	7812      	ldrb	r2, [r2, #0]
 8004380:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800439a:	e044      	b.n	8004426 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d12b      	bne.n	8004402 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d912      	bls.n	80043da <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b02      	subs	r3, #2
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d8:	e025      	b.n	8004426 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004400:	e011      	b.n	8004426 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004402:	f7fd f9f1 	bl	80017e8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d803      	bhi.n	800441a <HAL_SPI_Transmit+0x268>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004418:	d102      	bne.n	8004420 <HAL_SPI_Transmit+0x26e>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004424:	e026      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1b5      	bne.n	800439c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fce3 	bl	8004e00 <SPI_EndRxTxTransaction>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e000      	b.n	8004474 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004484:	7ffb      	ldrb	r3, [r7, #31]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b088      	sub	sp, #32
 8004492:	af02      	add	r7, sp, #8
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044aa:	d112      	bne.n	80044d2 <HAL_SPI_Receive+0x44>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10e      	bne.n	80044d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2204      	movs	r2, #4
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f910 	bl	80046ee <HAL_SPI_TransmitReceive>
 80044ce:	4603      	mov	r3, r0
 80044d0:	e109      	b.n	80046e6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_SPI_Receive+0x52>
 80044dc:	2302      	movs	r3, #2
 80044de:	e102      	b.n	80046e6 <HAL_SPI_Receive+0x258>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e8:	f7fd f97e 	bl	80017e8 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d002      	beq.n	8004500 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
 80044fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044fe:	e0e9      	b.n	80046d4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_SPI_Receive+0x7e>
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004510:	e0e0      	b.n	80046d4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2204      	movs	r2, #4
 8004516:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	88fa      	ldrh	r2, [r7, #6]
 800452a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800455c:	d908      	bls.n	8004570 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	e007      	b.n	8004580 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800457e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	d10f      	bne.n	80045aa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004598:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045d0:	d867      	bhi.n	80046a2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045d2:	e030      	b.n	8004636 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d117      	bne.n	8004612 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f103 020c 	add.w	r2, r3, #12
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	7812      	ldrb	r2, [r2, #0]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004610:	e011      	b.n	8004636 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004612:	f7fd f8e9 	bl	80017e8 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d803      	bhi.n	800462a <HAL_SPI_Receive+0x19c>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004628:	d102      	bne.n	8004630 <HAL_SPI_Receive+0x1a2>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004634:	e04e      	b.n	80046d4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1c8      	bne.n	80045d4 <HAL_SPI_Receive+0x146>
 8004642:	e034      	b.n	80046ae <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d115      	bne.n	800467e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	b292      	uxth	r2, r2
 800465e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	1c9a      	adds	r2, r3, #2
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800467c:	e011      	b.n	80046a2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467e:	f7fd f8b3 	bl	80017e8 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d803      	bhi.n	8004696 <HAL_SPI_Receive+0x208>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004694:	d102      	bne.n	800469c <HAL_SPI_Receive+0x20e>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046a0:	e018      	b.n	80046d4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ca      	bne.n	8004644 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fb4c 	bl	8004d50 <SPI_EndRxTransaction>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]
 80046d0:	e000      	b.n	80046d4 <HAL_SPI_Receive+0x246>
  }

error :
 80046d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b08a      	sub	sp, #40	; 0x28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046fc:	2301      	movs	r3, #1
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x26>
 8004710:	2302      	movs	r3, #2
 8004712:	e1fb      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x41e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800471c:	f7fd f864 	bl	80017e8 <HAL_GetTick>
 8004720:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004728:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004730:	887b      	ldrh	r3, [r7, #2]
 8004732:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004738:	7efb      	ldrb	r3, [r7, #27]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d00e      	beq.n	800475c <HAL_SPI_TransmitReceive+0x6e>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004744:	d106      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x66>
 800474e:	7efb      	ldrb	r3, [r7, #27]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d003      	beq.n	800475c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800475a:	e1cd      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_SPI_TransmitReceive+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_TransmitReceive+0x80>
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004774:	e1c0      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b04      	cmp	r3, #4
 8004780:	d003      	beq.n	800478a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2205      	movs	r2, #5
 8004786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	887a      	ldrh	r2, [r7, #2]
 800479a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	887a      	ldrh	r2, [r7, #2]
 80047a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	887a      	ldrh	r2, [r7, #2]
 80047b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047cc:	d802      	bhi.n	80047d4 <HAL_SPI_TransmitReceive+0xe6>
 80047ce:	8a3b      	ldrh	r3, [r7, #16]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d908      	bls.n	80047e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	e007      	b.n	80047f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d007      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800481c:	d97c      	bls.n	8004918 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_TransmitReceive+0x13e>
 8004826:	8a7b      	ldrh	r3, [r7, #18]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d169      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	1c9a      	adds	r2, r3, #2
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004850:	e056      	b.n	8004900 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b02      	cmp	r3, #2
 800485e:	d11b      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x1aa>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_SPI_TransmitReceive+0x1aa>
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	2b01      	cmp	r3, #1
 800486e:	d113      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	881a      	ldrh	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	1c9a      	adds	r2, r3, #2
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d11c      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x1f2>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	b292      	uxth	r2, r2
 80048be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	1c9a      	adds	r2, r3, #2
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048dc:	2301      	movs	r3, #1
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048e0:	f7fc ff82 	bl	80017e8 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d807      	bhi.n	8004900 <HAL_SPI_TransmitReceive+0x212>
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f6:	d003      	beq.n	8004900 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048fe:	e0fb      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1a3      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x164>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d19d      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x164>
 8004916:	e0df      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x23a>
 8004920:	8a7b      	ldrh	r3, [r7, #18]
 8004922:	2b01      	cmp	r3, #1
 8004924:	f040 80cb 	bne.w	8004abe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d912      	bls.n	8004958 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	1c9a      	adds	r2, r3, #2
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b02      	subs	r3, #2
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004956:	e0b2      	b.n	8004abe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800497e:	e09e      	b.n	8004abe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d134      	bne.n	80049f8 <HAL_SPI_TransmitReceive+0x30a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02f      	beq.n	80049f8 <HAL_SPI_TransmitReceive+0x30a>
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2b01      	cmp	r3, #1
 800499c:	d12c      	bne.n	80049f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d912      	bls.n	80049ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b02      	subs	r3, #2
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049cc:	e012      	b.n	80049f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d148      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x3aa>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d042      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d923      	bls.n	8004a66 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	b292      	uxth	r2, r2
 8004a2a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	1c9a      	adds	r2, r3, #2
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b02      	subs	r3, #2
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d81f      	bhi.n	8004a94 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	e016      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f103 020c 	add.w	r2, r3, #12
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	7812      	ldrb	r2, [r2, #0]
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a94:	2301      	movs	r3, #1
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a98:	f7fc fea6 	bl	80017e8 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d803      	bhi.n	8004ab0 <HAL_SPI_TransmitReceive+0x3c2>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aae:	d102      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x3c8>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004abc:	e01c      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f47f af5b 	bne.w	8004980 <HAL_SPI_TransmitReceive+0x292>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f47f af54 	bne.w	8004980 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f98f 	bl	8004e00 <SPI_EndRxTxTransaction>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	661a      	str	r2, [r3, #96]	; 0x60
 8004af4:	e000      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b24:	f7fc fe60 	bl	80017e8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4413      	add	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b34:	f7fc fe58 	bl	80017e8 <HAL_GetTick>
 8004b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3a:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	0d1b      	lsrs	r3, r3, #20
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4a:	e054      	b.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b52:	d050      	beq.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b54:	f7fc fe48 	bl	80017e8 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d902      	bls.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d13d      	bne.n	8004be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b82:	d111      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8c:	d004      	beq.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d107      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d10f      	bne.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e017      	b.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d19b      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000008 	.word	0x20000008

08004c24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c36:	f7fc fdd7 	bl	80017e8 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	4413      	add	r3, r2
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c46:	f7fc fdcf 	bl	80017e8 <HAL_GetTick>
 8004c4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c54:	4b3d      	ldr	r3, [pc, #244]	; (8004d4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00da      	lsls	r2, r3, #3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	0d1b      	lsrs	r3, r3, #20
 8004c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c6c:	e060      	b.n	8004d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c74:	d107      	bne.n	8004c86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8c:	d050      	beq.n	8004d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c8e:	f7fc fdab 	bl	80017e8 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d902      	bls.n	8004ca4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d13d      	bne.n	8004d20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cbc:	d111      	bne.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc6:	d004      	beq.n	8004cd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d107      	bne.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cea:	d10f      	bne.n	8004d0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e010      	b.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d196      	bne.n	8004c6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3728      	adds	r7, #40	; 0x28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000008 	.word	0x20000008

08004d50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d64:	d111      	bne.n	8004d8a <SPI_EndRxTransaction+0x3a>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6e:	d004      	beq.n	8004d7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d78:	d107      	bne.n	8004d8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2180      	movs	r1, #128	; 0x80
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff febd 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e023      	b.n	8004df8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004db8:	d11d      	bne.n	8004df6 <SPI_EndRxTransaction+0xa6>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc2:	d004      	beq.n	8004dce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dcc:	d113      	bne.n	8004df6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff ff22 	bl	8004c24 <SPI_WaitFifoStateUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e000      	b.n	8004df8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff ff03 	bl	8004c24 <SPI_WaitFifoStateUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e027      	b.n	8004e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff fe68 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e014      	b.n	8004e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7ff fedc 	bl	8004c24 <SPI_WaitFifoStateUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e000      	b.n	8004e84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e049      	b.n	8004f32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fc fa94 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f000 f8fe 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_ConfigClockSource+0x1c>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e0b6      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x18a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004f74:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f80:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f92:	d03e      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xd8>
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	f200 8087 	bhi.w	80050aa <HAL_TIM_ConfigClockSource+0x170>
 8004f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa0:	f000 8086 	beq.w	80050b0 <HAL_TIM_ConfigClockSource+0x176>
 8004fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa8:	d87f      	bhi.n	80050aa <HAL_TIM_ConfigClockSource+0x170>
 8004faa:	2b70      	cmp	r3, #112	; 0x70
 8004fac:	d01a      	beq.n	8004fe4 <HAL_TIM_ConfigClockSource+0xaa>
 8004fae:	2b70      	cmp	r3, #112	; 0x70
 8004fb0:	d87b      	bhi.n	80050aa <HAL_TIM_ConfigClockSource+0x170>
 8004fb2:	2b60      	cmp	r3, #96	; 0x60
 8004fb4:	d050      	beq.n	8005058 <HAL_TIM_ConfigClockSource+0x11e>
 8004fb6:	2b60      	cmp	r3, #96	; 0x60
 8004fb8:	d877      	bhi.n	80050aa <HAL_TIM_ConfigClockSource+0x170>
 8004fba:	2b50      	cmp	r3, #80	; 0x50
 8004fbc:	d03c      	beq.n	8005038 <HAL_TIM_ConfigClockSource+0xfe>
 8004fbe:	2b50      	cmp	r3, #80	; 0x50
 8004fc0:	d873      	bhi.n	80050aa <HAL_TIM_ConfigClockSource+0x170>
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d058      	beq.n	8005078 <HAL_TIM_ConfigClockSource+0x13e>
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d86f      	bhi.n	80050aa <HAL_TIM_ConfigClockSource+0x170>
 8004fca:	2b30      	cmp	r3, #48	; 0x30
 8004fcc:	d064      	beq.n	8005098 <HAL_TIM_ConfigClockSource+0x15e>
 8004fce:	2b30      	cmp	r3, #48	; 0x30
 8004fd0:	d86b      	bhi.n	80050aa <HAL_TIM_ConfigClockSource+0x170>
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d060      	beq.n	8005098 <HAL_TIM_ConfigClockSource+0x15e>
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d867      	bhi.n	80050aa <HAL_TIM_ConfigClockSource+0x170>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d05c      	beq.n	8005098 <HAL_TIM_ConfigClockSource+0x15e>
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d05a      	beq.n	8005098 <HAL_TIM_ConfigClockSource+0x15e>
 8004fe2:	e062      	b.n	80050aa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6899      	ldr	r1, [r3, #8]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f000 f94a 	bl	800528c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005006:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	609a      	str	r2, [r3, #8]
      break;
 8005010:	e04f      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6899      	ldr	r1, [r3, #8]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f000 f933 	bl	800528c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005034:	609a      	str	r2, [r3, #8]
      break;
 8005036:	e03c      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	6859      	ldr	r1, [r3, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	461a      	mov	r2, r3
 8005046:	f000 f8a5 	bl	8005194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2150      	movs	r1, #80	; 0x50
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f8fe 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8005056:	e02c      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	6859      	ldr	r1, [r3, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	461a      	mov	r2, r3
 8005066:	f000 f8c4 	bl	80051f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2160      	movs	r1, #96	; 0x60
 8005070:	4618      	mov	r0, r3
 8005072:	f000 f8ee 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8005076:	e01c      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	461a      	mov	r2, r3
 8005086:	f000 f885 	bl	8005194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2140      	movs	r1, #64	; 0x40
 8005090:	4618      	mov	r0, r3
 8005092:	f000 f8de 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8005096:	e00c      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f000 f8d5 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 80050a8:	e003      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
      break;
 80050ae:	e000      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a2a      	ldr	r2, [pc, #168]	; (8005188 <TIM_Base_SetConfig+0xbc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0x20>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d108      	bne.n	80050fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a21      	ldr	r2, [pc, #132]	; (8005188 <TIM_Base_SetConfig+0xbc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00b      	beq.n	800511e <TIM_Base_SetConfig+0x52>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510c:	d007      	beq.n	800511e <TIM_Base_SetConfig+0x52>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1e      	ldr	r2, [pc, #120]	; (800518c <TIM_Base_SetConfig+0xc0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_Base_SetConfig+0x52>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <TIM_Base_SetConfig+0xc4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d108      	bne.n	8005130 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a0c      	ldr	r2, [pc, #48]	; (8005188 <TIM_Base_SetConfig+0xbc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_Base_SetConfig+0xa0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a0b      	ldr	r2, [pc, #44]	; (800518c <TIM_Base_SetConfig+0xc0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0xa0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <TIM_Base_SetConfig+0xc4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800

08005194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 030a 	bic.w	r3, r3, #10
 80051d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b087      	sub	sp, #28
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0210 	bic.w	r2, r3, #16
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800521c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	031b      	lsls	r3, r3, #12
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800522e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	f043 0307 	orr.w	r3, r3, #7
 8005278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	609a      	str	r2, [r3, #8]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	609a      	str	r2, [r3, #8]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e04a      	b.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d108      	bne.n	8005320 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a12      	ldr	r2, [pc, #72]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d10c      	bne.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4313      	orrs	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40012c00 	.word	0x40012c00

0800538c <__errno>:
 800538c:	4b01      	ldr	r3, [pc, #4]	; (8005394 <__errno+0x8>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000014 	.word	0x20000014

08005398 <__sflush_r>:
 8005398:	898a      	ldrh	r2, [r1, #12]
 800539a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539e:	4605      	mov	r5, r0
 80053a0:	0710      	lsls	r0, r2, #28
 80053a2:	460c      	mov	r4, r1
 80053a4:	d458      	bmi.n	8005458 <__sflush_r+0xc0>
 80053a6:	684b      	ldr	r3, [r1, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dc05      	bgt.n	80053b8 <__sflush_r+0x20>
 80053ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	dc02      	bgt.n	80053b8 <__sflush_r+0x20>
 80053b2:	2000      	movs	r0, #0
 80053b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ba:	2e00      	cmp	r6, #0
 80053bc:	d0f9      	beq.n	80053b2 <__sflush_r+0x1a>
 80053be:	2300      	movs	r3, #0
 80053c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053c4:	682f      	ldr	r7, [r5, #0]
 80053c6:	602b      	str	r3, [r5, #0]
 80053c8:	d032      	beq.n	8005430 <__sflush_r+0x98>
 80053ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053cc:	89a3      	ldrh	r3, [r4, #12]
 80053ce:	075a      	lsls	r2, r3, #29
 80053d0:	d505      	bpl.n	80053de <__sflush_r+0x46>
 80053d2:	6863      	ldr	r3, [r4, #4]
 80053d4:	1ac0      	subs	r0, r0, r3
 80053d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053d8:	b10b      	cbz	r3, 80053de <__sflush_r+0x46>
 80053da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053dc:	1ac0      	subs	r0, r0, r3
 80053de:	2300      	movs	r3, #0
 80053e0:	4602      	mov	r2, r0
 80053e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053e4:	6a21      	ldr	r1, [r4, #32]
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b0      	blx	r6
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	d106      	bne.n	80053fe <__sflush_r+0x66>
 80053f0:	6829      	ldr	r1, [r5, #0]
 80053f2:	291d      	cmp	r1, #29
 80053f4:	d82c      	bhi.n	8005450 <__sflush_r+0xb8>
 80053f6:	4a2a      	ldr	r2, [pc, #168]	; (80054a0 <__sflush_r+0x108>)
 80053f8:	40ca      	lsrs	r2, r1
 80053fa:	07d6      	lsls	r6, r2, #31
 80053fc:	d528      	bpl.n	8005450 <__sflush_r+0xb8>
 80053fe:	2200      	movs	r2, #0
 8005400:	6062      	str	r2, [r4, #4]
 8005402:	04d9      	lsls	r1, r3, #19
 8005404:	6922      	ldr	r2, [r4, #16]
 8005406:	6022      	str	r2, [r4, #0]
 8005408:	d504      	bpl.n	8005414 <__sflush_r+0x7c>
 800540a:	1c42      	adds	r2, r0, #1
 800540c:	d101      	bne.n	8005412 <__sflush_r+0x7a>
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	b903      	cbnz	r3, 8005414 <__sflush_r+0x7c>
 8005412:	6560      	str	r0, [r4, #84]	; 0x54
 8005414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005416:	602f      	str	r7, [r5, #0]
 8005418:	2900      	cmp	r1, #0
 800541a:	d0ca      	beq.n	80053b2 <__sflush_r+0x1a>
 800541c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005420:	4299      	cmp	r1, r3
 8005422:	d002      	beq.n	800542a <__sflush_r+0x92>
 8005424:	4628      	mov	r0, r5
 8005426:	f000 fa33 	bl	8005890 <_free_r>
 800542a:	2000      	movs	r0, #0
 800542c:	6360      	str	r0, [r4, #52]	; 0x34
 800542e:	e7c1      	b.n	80053b4 <__sflush_r+0x1c>
 8005430:	6a21      	ldr	r1, [r4, #32]
 8005432:	2301      	movs	r3, #1
 8005434:	4628      	mov	r0, r5
 8005436:	47b0      	blx	r6
 8005438:	1c41      	adds	r1, r0, #1
 800543a:	d1c7      	bne.n	80053cc <__sflush_r+0x34>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0c4      	beq.n	80053cc <__sflush_r+0x34>
 8005442:	2b1d      	cmp	r3, #29
 8005444:	d001      	beq.n	800544a <__sflush_r+0xb2>
 8005446:	2b16      	cmp	r3, #22
 8005448:	d101      	bne.n	800544e <__sflush_r+0xb6>
 800544a:	602f      	str	r7, [r5, #0]
 800544c:	e7b1      	b.n	80053b2 <__sflush_r+0x1a>
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005454:	81a3      	strh	r3, [r4, #12]
 8005456:	e7ad      	b.n	80053b4 <__sflush_r+0x1c>
 8005458:	690f      	ldr	r7, [r1, #16]
 800545a:	2f00      	cmp	r7, #0
 800545c:	d0a9      	beq.n	80053b2 <__sflush_r+0x1a>
 800545e:	0793      	lsls	r3, r2, #30
 8005460:	680e      	ldr	r6, [r1, #0]
 8005462:	bf08      	it	eq
 8005464:	694b      	ldreq	r3, [r1, #20]
 8005466:	600f      	str	r7, [r1, #0]
 8005468:	bf18      	it	ne
 800546a:	2300      	movne	r3, #0
 800546c:	eba6 0807 	sub.w	r8, r6, r7
 8005470:	608b      	str	r3, [r1, #8]
 8005472:	f1b8 0f00 	cmp.w	r8, #0
 8005476:	dd9c      	ble.n	80053b2 <__sflush_r+0x1a>
 8005478:	6a21      	ldr	r1, [r4, #32]
 800547a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800547c:	4643      	mov	r3, r8
 800547e:	463a      	mov	r2, r7
 8005480:	4628      	mov	r0, r5
 8005482:	47b0      	blx	r6
 8005484:	2800      	cmp	r0, #0
 8005486:	dc06      	bgt.n	8005496 <__sflush_r+0xfe>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548e:	81a3      	strh	r3, [r4, #12]
 8005490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005494:	e78e      	b.n	80053b4 <__sflush_r+0x1c>
 8005496:	4407      	add	r7, r0
 8005498:	eba8 0800 	sub.w	r8, r8, r0
 800549c:	e7e9      	b.n	8005472 <__sflush_r+0xda>
 800549e:	bf00      	nop
 80054a0:	20400001 	.word	0x20400001

080054a4 <_fflush_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	690b      	ldr	r3, [r1, #16]
 80054a8:	4605      	mov	r5, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	b913      	cbnz	r3, 80054b4 <_fflush_r+0x10>
 80054ae:	2500      	movs	r5, #0
 80054b0:	4628      	mov	r0, r5
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	b118      	cbz	r0, 80054be <_fflush_r+0x1a>
 80054b6:	6983      	ldr	r3, [r0, #24]
 80054b8:	b90b      	cbnz	r3, 80054be <_fflush_r+0x1a>
 80054ba:	f000 f887 	bl	80055cc <__sinit>
 80054be:	4b14      	ldr	r3, [pc, #80]	; (8005510 <_fflush_r+0x6c>)
 80054c0:	429c      	cmp	r4, r3
 80054c2:	d11b      	bne.n	80054fc <_fflush_r+0x58>
 80054c4:	686c      	ldr	r4, [r5, #4]
 80054c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0ef      	beq.n	80054ae <_fflush_r+0xa>
 80054ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054d0:	07d0      	lsls	r0, r2, #31
 80054d2:	d404      	bmi.n	80054de <_fflush_r+0x3a>
 80054d4:	0599      	lsls	r1, r3, #22
 80054d6:	d402      	bmi.n	80054de <_fflush_r+0x3a>
 80054d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054da:	f000 f94c 	bl	8005776 <__retarget_lock_acquire_recursive>
 80054de:	4628      	mov	r0, r5
 80054e0:	4621      	mov	r1, r4
 80054e2:	f7ff ff59 	bl	8005398 <__sflush_r>
 80054e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054e8:	07da      	lsls	r2, r3, #31
 80054ea:	4605      	mov	r5, r0
 80054ec:	d4e0      	bmi.n	80054b0 <_fflush_r+0xc>
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	059b      	lsls	r3, r3, #22
 80054f2:	d4dd      	bmi.n	80054b0 <_fflush_r+0xc>
 80054f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054f6:	f000 f93f 	bl	8005778 <__retarget_lock_release_recursive>
 80054fa:	e7d9      	b.n	80054b0 <_fflush_r+0xc>
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <_fflush_r+0x70>)
 80054fe:	429c      	cmp	r4, r3
 8005500:	d101      	bne.n	8005506 <_fflush_r+0x62>
 8005502:	68ac      	ldr	r4, [r5, #8]
 8005504:	e7df      	b.n	80054c6 <_fflush_r+0x22>
 8005506:	4b04      	ldr	r3, [pc, #16]	; (8005518 <_fflush_r+0x74>)
 8005508:	429c      	cmp	r4, r3
 800550a:	bf08      	it	eq
 800550c:	68ec      	ldreq	r4, [r5, #12]
 800550e:	e7da      	b.n	80054c6 <_fflush_r+0x22>
 8005510:	080082c8 	.word	0x080082c8
 8005514:	080082e8 	.word	0x080082e8
 8005518:	080082a8 	.word	0x080082a8

0800551c <std>:
 800551c:	2300      	movs	r3, #0
 800551e:	b510      	push	{r4, lr}
 8005520:	4604      	mov	r4, r0
 8005522:	e9c0 3300 	strd	r3, r3, [r0]
 8005526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800552a:	6083      	str	r3, [r0, #8]
 800552c:	8181      	strh	r1, [r0, #12]
 800552e:	6643      	str	r3, [r0, #100]	; 0x64
 8005530:	81c2      	strh	r2, [r0, #14]
 8005532:	6183      	str	r3, [r0, #24]
 8005534:	4619      	mov	r1, r3
 8005536:	2208      	movs	r2, #8
 8005538:	305c      	adds	r0, #92	; 0x5c
 800553a:	f000 f9a1 	bl	8005880 <memset>
 800553e:	4b05      	ldr	r3, [pc, #20]	; (8005554 <std+0x38>)
 8005540:	6263      	str	r3, [r4, #36]	; 0x24
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <std+0x3c>)
 8005544:	62a3      	str	r3, [r4, #40]	; 0x28
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <std+0x40>)
 8005548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <std+0x44>)
 800554c:	6224      	str	r4, [r4, #32]
 800554e:	6323      	str	r3, [r4, #48]	; 0x30
 8005550:	bd10      	pop	{r4, pc}
 8005552:	bf00      	nop
 8005554:	08006715 	.word	0x08006715
 8005558:	08006737 	.word	0x08006737
 800555c:	0800676f 	.word	0x0800676f
 8005560:	08006793 	.word	0x08006793

08005564 <_cleanup_r>:
 8005564:	4901      	ldr	r1, [pc, #4]	; (800556c <_cleanup_r+0x8>)
 8005566:	f000 b8c1 	b.w	80056ec <_fwalk_reent>
 800556a:	bf00      	nop
 800556c:	080054a5 	.word	0x080054a5

08005570 <__sfmoreglue>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	2268      	movs	r2, #104	; 0x68
 8005574:	1e4d      	subs	r5, r1, #1
 8005576:	4355      	muls	r5, r2
 8005578:	460e      	mov	r6, r1
 800557a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800557e:	f000 f9f3 	bl	8005968 <_malloc_r>
 8005582:	4604      	mov	r4, r0
 8005584:	b140      	cbz	r0, 8005598 <__sfmoreglue+0x28>
 8005586:	2100      	movs	r1, #0
 8005588:	e9c0 1600 	strd	r1, r6, [r0]
 800558c:	300c      	adds	r0, #12
 800558e:	60a0      	str	r0, [r4, #8]
 8005590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005594:	f000 f974 	bl	8005880 <memset>
 8005598:	4620      	mov	r0, r4
 800559a:	bd70      	pop	{r4, r5, r6, pc}

0800559c <__sfp_lock_acquire>:
 800559c:	4801      	ldr	r0, [pc, #4]	; (80055a4 <__sfp_lock_acquire+0x8>)
 800559e:	f000 b8ea 	b.w	8005776 <__retarget_lock_acquire_recursive>
 80055a2:	bf00      	nop
 80055a4:	200002e1 	.word	0x200002e1

080055a8 <__sfp_lock_release>:
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <__sfp_lock_release+0x8>)
 80055aa:	f000 b8e5 	b.w	8005778 <__retarget_lock_release_recursive>
 80055ae:	bf00      	nop
 80055b0:	200002e1 	.word	0x200002e1

080055b4 <__sinit_lock_acquire>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__sinit_lock_acquire+0x8>)
 80055b6:	f000 b8de 	b.w	8005776 <__retarget_lock_acquire_recursive>
 80055ba:	bf00      	nop
 80055bc:	200002e2 	.word	0x200002e2

080055c0 <__sinit_lock_release>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__sinit_lock_release+0x8>)
 80055c2:	f000 b8d9 	b.w	8005778 <__retarget_lock_release_recursive>
 80055c6:	bf00      	nop
 80055c8:	200002e2 	.word	0x200002e2

080055cc <__sinit>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	4604      	mov	r4, r0
 80055d0:	f7ff fff0 	bl	80055b4 <__sinit_lock_acquire>
 80055d4:	69a3      	ldr	r3, [r4, #24]
 80055d6:	b11b      	cbz	r3, 80055e0 <__sinit+0x14>
 80055d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055dc:	f7ff bff0 	b.w	80055c0 <__sinit_lock_release>
 80055e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055e4:	6523      	str	r3, [r4, #80]	; 0x50
 80055e6:	4b13      	ldr	r3, [pc, #76]	; (8005634 <__sinit+0x68>)
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <__sinit+0x6c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	bf04      	itt	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	61a3      	streq	r3, [r4, #24]
 80055f6:	4620      	mov	r0, r4
 80055f8:	f000 f820 	bl	800563c <__sfp>
 80055fc:	6060      	str	r0, [r4, #4]
 80055fe:	4620      	mov	r0, r4
 8005600:	f000 f81c 	bl	800563c <__sfp>
 8005604:	60a0      	str	r0, [r4, #8]
 8005606:	4620      	mov	r0, r4
 8005608:	f000 f818 	bl	800563c <__sfp>
 800560c:	2200      	movs	r2, #0
 800560e:	60e0      	str	r0, [r4, #12]
 8005610:	2104      	movs	r1, #4
 8005612:	6860      	ldr	r0, [r4, #4]
 8005614:	f7ff ff82 	bl	800551c <std>
 8005618:	68a0      	ldr	r0, [r4, #8]
 800561a:	2201      	movs	r2, #1
 800561c:	2109      	movs	r1, #9
 800561e:	f7ff ff7d 	bl	800551c <std>
 8005622:	68e0      	ldr	r0, [r4, #12]
 8005624:	2202      	movs	r2, #2
 8005626:	2112      	movs	r1, #18
 8005628:	f7ff ff78 	bl	800551c <std>
 800562c:	2301      	movs	r3, #1
 800562e:	61a3      	str	r3, [r4, #24]
 8005630:	e7d2      	b.n	80055d8 <__sinit+0xc>
 8005632:	bf00      	nop
 8005634:	08008308 	.word	0x08008308
 8005638:	08005565 	.word	0x08005565

0800563c <__sfp>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	4607      	mov	r7, r0
 8005640:	f7ff ffac 	bl	800559c <__sfp_lock_acquire>
 8005644:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <__sfp+0x84>)
 8005646:	681e      	ldr	r6, [r3, #0]
 8005648:	69b3      	ldr	r3, [r6, #24]
 800564a:	b913      	cbnz	r3, 8005652 <__sfp+0x16>
 800564c:	4630      	mov	r0, r6
 800564e:	f7ff ffbd 	bl	80055cc <__sinit>
 8005652:	3648      	adds	r6, #72	; 0x48
 8005654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005658:	3b01      	subs	r3, #1
 800565a:	d503      	bpl.n	8005664 <__sfp+0x28>
 800565c:	6833      	ldr	r3, [r6, #0]
 800565e:	b30b      	cbz	r3, 80056a4 <__sfp+0x68>
 8005660:	6836      	ldr	r6, [r6, #0]
 8005662:	e7f7      	b.n	8005654 <__sfp+0x18>
 8005664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005668:	b9d5      	cbnz	r5, 80056a0 <__sfp+0x64>
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <__sfp+0x88>)
 800566c:	60e3      	str	r3, [r4, #12]
 800566e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005672:	6665      	str	r5, [r4, #100]	; 0x64
 8005674:	f000 f87e 	bl	8005774 <__retarget_lock_init_recursive>
 8005678:	f7ff ff96 	bl	80055a8 <__sfp_lock_release>
 800567c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005684:	6025      	str	r5, [r4, #0]
 8005686:	61a5      	str	r5, [r4, #24]
 8005688:	2208      	movs	r2, #8
 800568a:	4629      	mov	r1, r5
 800568c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005690:	f000 f8f6 	bl	8005880 <memset>
 8005694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800569c:	4620      	mov	r0, r4
 800569e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a0:	3468      	adds	r4, #104	; 0x68
 80056a2:	e7d9      	b.n	8005658 <__sfp+0x1c>
 80056a4:	2104      	movs	r1, #4
 80056a6:	4638      	mov	r0, r7
 80056a8:	f7ff ff62 	bl	8005570 <__sfmoreglue>
 80056ac:	4604      	mov	r4, r0
 80056ae:	6030      	str	r0, [r6, #0]
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d1d5      	bne.n	8005660 <__sfp+0x24>
 80056b4:	f7ff ff78 	bl	80055a8 <__sfp_lock_release>
 80056b8:	230c      	movs	r3, #12
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	e7ee      	b.n	800569c <__sfp+0x60>
 80056be:	bf00      	nop
 80056c0:	08008308 	.word	0x08008308
 80056c4:	ffff0001 	.word	0xffff0001

080056c8 <fiprintf>:
 80056c8:	b40e      	push	{r1, r2, r3}
 80056ca:	b503      	push	{r0, r1, lr}
 80056cc:	4601      	mov	r1, r0
 80056ce:	ab03      	add	r3, sp, #12
 80056d0:	4805      	ldr	r0, [pc, #20]	; (80056e8 <fiprintf+0x20>)
 80056d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80056d6:	6800      	ldr	r0, [r0, #0]
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	f000 f9e3 	bl	8005aa4 <_vfiprintf_r>
 80056de:	b002      	add	sp, #8
 80056e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056e4:	b003      	add	sp, #12
 80056e6:	4770      	bx	lr
 80056e8:	20000014 	.word	0x20000014

080056ec <_fwalk_reent>:
 80056ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f0:	4606      	mov	r6, r0
 80056f2:	4688      	mov	r8, r1
 80056f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056f8:	2700      	movs	r7, #0
 80056fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056fe:	f1b9 0901 	subs.w	r9, r9, #1
 8005702:	d505      	bpl.n	8005710 <_fwalk_reent+0x24>
 8005704:	6824      	ldr	r4, [r4, #0]
 8005706:	2c00      	cmp	r4, #0
 8005708:	d1f7      	bne.n	80056fa <_fwalk_reent+0xe>
 800570a:	4638      	mov	r0, r7
 800570c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005710:	89ab      	ldrh	r3, [r5, #12]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d907      	bls.n	8005726 <_fwalk_reent+0x3a>
 8005716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800571a:	3301      	adds	r3, #1
 800571c:	d003      	beq.n	8005726 <_fwalk_reent+0x3a>
 800571e:	4629      	mov	r1, r5
 8005720:	4630      	mov	r0, r6
 8005722:	47c0      	blx	r8
 8005724:	4307      	orrs	r7, r0
 8005726:	3568      	adds	r5, #104	; 0x68
 8005728:	e7e9      	b.n	80056fe <_fwalk_reent+0x12>
	...

0800572c <__libc_init_array>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4d0d      	ldr	r5, [pc, #52]	; (8005764 <__libc_init_array+0x38>)
 8005730:	4c0d      	ldr	r4, [pc, #52]	; (8005768 <__libc_init_array+0x3c>)
 8005732:	1b64      	subs	r4, r4, r5
 8005734:	10a4      	asrs	r4, r4, #2
 8005736:	2600      	movs	r6, #0
 8005738:	42a6      	cmp	r6, r4
 800573a:	d109      	bne.n	8005750 <__libc_init_array+0x24>
 800573c:	4d0b      	ldr	r5, [pc, #44]	; (800576c <__libc_init_array+0x40>)
 800573e:	4c0c      	ldr	r4, [pc, #48]	; (8005770 <__libc_init_array+0x44>)
 8005740:	f002 fc02 	bl	8007f48 <_init>
 8005744:	1b64      	subs	r4, r4, r5
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	2600      	movs	r6, #0
 800574a:	42a6      	cmp	r6, r4
 800574c:	d105      	bne.n	800575a <__libc_init_array+0x2e>
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	f855 3b04 	ldr.w	r3, [r5], #4
 8005754:	4798      	blx	r3
 8005756:	3601      	adds	r6, #1
 8005758:	e7ee      	b.n	8005738 <__libc_init_array+0xc>
 800575a:	f855 3b04 	ldr.w	r3, [r5], #4
 800575e:	4798      	blx	r3
 8005760:	3601      	adds	r6, #1
 8005762:	e7f2      	b.n	800574a <__libc_init_array+0x1e>
 8005764:	08008684 	.word	0x08008684
 8005768:	08008684 	.word	0x08008684
 800576c:	08008684 	.word	0x08008684
 8005770:	08008688 	.word	0x08008688

08005774 <__retarget_lock_init_recursive>:
 8005774:	4770      	bx	lr

08005776 <__retarget_lock_acquire_recursive>:
 8005776:	4770      	bx	lr

08005778 <__retarget_lock_release_recursive>:
 8005778:	4770      	bx	lr

0800577a <__swhatbuf_r>:
 800577a:	b570      	push	{r4, r5, r6, lr}
 800577c:	460e      	mov	r6, r1
 800577e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005782:	2900      	cmp	r1, #0
 8005784:	b096      	sub	sp, #88	; 0x58
 8005786:	4614      	mov	r4, r2
 8005788:	461d      	mov	r5, r3
 800578a:	da08      	bge.n	800579e <__swhatbuf_r+0x24>
 800578c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	602a      	str	r2, [r5, #0]
 8005794:	061a      	lsls	r2, r3, #24
 8005796:	d410      	bmi.n	80057ba <__swhatbuf_r+0x40>
 8005798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800579c:	e00e      	b.n	80057bc <__swhatbuf_r+0x42>
 800579e:	466a      	mov	r2, sp
 80057a0:	f001 ff78 	bl	8007694 <_fstat_r>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	dbf1      	blt.n	800578c <__swhatbuf_r+0x12>
 80057a8:	9a01      	ldr	r2, [sp, #4]
 80057aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057b2:	425a      	negs	r2, r3
 80057b4:	415a      	adcs	r2, r3
 80057b6:	602a      	str	r2, [r5, #0]
 80057b8:	e7ee      	b.n	8005798 <__swhatbuf_r+0x1e>
 80057ba:	2340      	movs	r3, #64	; 0x40
 80057bc:	2000      	movs	r0, #0
 80057be:	6023      	str	r3, [r4, #0]
 80057c0:	b016      	add	sp, #88	; 0x58
 80057c2:	bd70      	pop	{r4, r5, r6, pc}

080057c4 <__smakebuf_r>:
 80057c4:	898b      	ldrh	r3, [r1, #12]
 80057c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057c8:	079d      	lsls	r5, r3, #30
 80057ca:	4606      	mov	r6, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	d507      	bpl.n	80057e0 <__smakebuf_r+0x1c>
 80057d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	6123      	str	r3, [r4, #16]
 80057d8:	2301      	movs	r3, #1
 80057da:	6163      	str	r3, [r4, #20]
 80057dc:	b002      	add	sp, #8
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	ab01      	add	r3, sp, #4
 80057e2:	466a      	mov	r2, sp
 80057e4:	f7ff ffc9 	bl	800577a <__swhatbuf_r>
 80057e8:	9900      	ldr	r1, [sp, #0]
 80057ea:	4605      	mov	r5, r0
 80057ec:	4630      	mov	r0, r6
 80057ee:	f000 f8bb 	bl	8005968 <_malloc_r>
 80057f2:	b948      	cbnz	r0, 8005808 <__smakebuf_r+0x44>
 80057f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f8:	059a      	lsls	r2, r3, #22
 80057fa:	d4ef      	bmi.n	80057dc <__smakebuf_r+0x18>
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	81a3      	strh	r3, [r4, #12]
 8005806:	e7e3      	b.n	80057d0 <__smakebuf_r+0xc>
 8005808:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <__smakebuf_r+0x7c>)
 800580a:	62b3      	str	r3, [r6, #40]	; 0x28
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	6020      	str	r0, [r4, #0]
 8005810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	9b00      	ldr	r3, [sp, #0]
 8005818:	6163      	str	r3, [r4, #20]
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	6120      	str	r0, [r4, #16]
 800581e:	b15b      	cbz	r3, 8005838 <__smakebuf_r+0x74>
 8005820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005824:	4630      	mov	r0, r6
 8005826:	f001 ff47 	bl	80076b8 <_isatty_r>
 800582a:	b128      	cbz	r0, 8005838 <__smakebuf_r+0x74>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	89a0      	ldrh	r0, [r4, #12]
 800583a:	4305      	orrs	r5, r0
 800583c:	81a5      	strh	r5, [r4, #12]
 800583e:	e7cd      	b.n	80057dc <__smakebuf_r+0x18>
 8005840:	08005565 	.word	0x08005565

08005844 <malloc>:
 8005844:	4b02      	ldr	r3, [pc, #8]	; (8005850 <malloc+0xc>)
 8005846:	4601      	mov	r1, r0
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	f000 b88d 	b.w	8005968 <_malloc_r>
 800584e:	bf00      	nop
 8005850:	20000014 	.word	0x20000014

08005854 <free>:
 8005854:	4b02      	ldr	r3, [pc, #8]	; (8005860 <free+0xc>)
 8005856:	4601      	mov	r1, r0
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f000 b819 	b.w	8005890 <_free_r>
 800585e:	bf00      	nop
 8005860:	20000014 	.word	0x20000014

08005864 <memcpy>:
 8005864:	440a      	add	r2, r1
 8005866:	4291      	cmp	r1, r2
 8005868:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800586c:	d100      	bne.n	8005870 <memcpy+0xc>
 800586e:	4770      	bx	lr
 8005870:	b510      	push	{r4, lr}
 8005872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800587a:	4291      	cmp	r1, r2
 800587c:	d1f9      	bne.n	8005872 <memcpy+0xe>
 800587e:	bd10      	pop	{r4, pc}

08005880 <memset>:
 8005880:	4402      	add	r2, r0
 8005882:	4603      	mov	r3, r0
 8005884:	4293      	cmp	r3, r2
 8005886:	d100      	bne.n	800588a <memset+0xa>
 8005888:	4770      	bx	lr
 800588a:	f803 1b01 	strb.w	r1, [r3], #1
 800588e:	e7f9      	b.n	8005884 <memset+0x4>

08005890 <_free_r>:
 8005890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005892:	2900      	cmp	r1, #0
 8005894:	d044      	beq.n	8005920 <_free_r+0x90>
 8005896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589a:	9001      	str	r0, [sp, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f1a1 0404 	sub.w	r4, r1, #4
 80058a2:	bfb8      	it	lt
 80058a4:	18e4      	addlt	r4, r4, r3
 80058a6:	f001 ff3f 	bl	8007728 <__malloc_lock>
 80058aa:	4a1e      	ldr	r2, [pc, #120]	; (8005924 <_free_r+0x94>)
 80058ac:	9801      	ldr	r0, [sp, #4]
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	b933      	cbnz	r3, 80058c0 <_free_r+0x30>
 80058b2:	6063      	str	r3, [r4, #4]
 80058b4:	6014      	str	r4, [r2, #0]
 80058b6:	b003      	add	sp, #12
 80058b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058bc:	f001 bf3a 	b.w	8007734 <__malloc_unlock>
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	d908      	bls.n	80058d6 <_free_r+0x46>
 80058c4:	6825      	ldr	r5, [r4, #0]
 80058c6:	1961      	adds	r1, r4, r5
 80058c8:	428b      	cmp	r3, r1
 80058ca:	bf01      	itttt	eq
 80058cc:	6819      	ldreq	r1, [r3, #0]
 80058ce:	685b      	ldreq	r3, [r3, #4]
 80058d0:	1949      	addeq	r1, r1, r5
 80058d2:	6021      	streq	r1, [r4, #0]
 80058d4:	e7ed      	b.n	80058b2 <_free_r+0x22>
 80058d6:	461a      	mov	r2, r3
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	b10b      	cbz	r3, 80058e0 <_free_r+0x50>
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d9fa      	bls.n	80058d6 <_free_r+0x46>
 80058e0:	6811      	ldr	r1, [r2, #0]
 80058e2:	1855      	adds	r5, r2, r1
 80058e4:	42a5      	cmp	r5, r4
 80058e6:	d10b      	bne.n	8005900 <_free_r+0x70>
 80058e8:	6824      	ldr	r4, [r4, #0]
 80058ea:	4421      	add	r1, r4
 80058ec:	1854      	adds	r4, r2, r1
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	6011      	str	r1, [r2, #0]
 80058f2:	d1e0      	bne.n	80058b6 <_free_r+0x26>
 80058f4:	681c      	ldr	r4, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	6053      	str	r3, [r2, #4]
 80058fa:	4421      	add	r1, r4
 80058fc:	6011      	str	r1, [r2, #0]
 80058fe:	e7da      	b.n	80058b6 <_free_r+0x26>
 8005900:	d902      	bls.n	8005908 <_free_r+0x78>
 8005902:	230c      	movs	r3, #12
 8005904:	6003      	str	r3, [r0, #0]
 8005906:	e7d6      	b.n	80058b6 <_free_r+0x26>
 8005908:	6825      	ldr	r5, [r4, #0]
 800590a:	1961      	adds	r1, r4, r5
 800590c:	428b      	cmp	r3, r1
 800590e:	bf04      	itt	eq
 8005910:	6819      	ldreq	r1, [r3, #0]
 8005912:	685b      	ldreq	r3, [r3, #4]
 8005914:	6063      	str	r3, [r4, #4]
 8005916:	bf04      	itt	eq
 8005918:	1949      	addeq	r1, r1, r5
 800591a:	6021      	streq	r1, [r4, #0]
 800591c:	6054      	str	r4, [r2, #4]
 800591e:	e7ca      	b.n	80058b6 <_free_r+0x26>
 8005920:	b003      	add	sp, #12
 8005922:	bd30      	pop	{r4, r5, pc}
 8005924:	200002e4 	.word	0x200002e4

08005928 <sbrk_aligned>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	4e0e      	ldr	r6, [pc, #56]	; (8005964 <sbrk_aligned+0x3c>)
 800592c:	460c      	mov	r4, r1
 800592e:	6831      	ldr	r1, [r6, #0]
 8005930:	4605      	mov	r5, r0
 8005932:	b911      	cbnz	r1, 800593a <sbrk_aligned+0x12>
 8005934:	f000 fede 	bl	80066f4 <_sbrk_r>
 8005938:	6030      	str	r0, [r6, #0]
 800593a:	4621      	mov	r1, r4
 800593c:	4628      	mov	r0, r5
 800593e:	f000 fed9 	bl	80066f4 <_sbrk_r>
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	d00a      	beq.n	800595c <sbrk_aligned+0x34>
 8005946:	1cc4      	adds	r4, r0, #3
 8005948:	f024 0403 	bic.w	r4, r4, #3
 800594c:	42a0      	cmp	r0, r4
 800594e:	d007      	beq.n	8005960 <sbrk_aligned+0x38>
 8005950:	1a21      	subs	r1, r4, r0
 8005952:	4628      	mov	r0, r5
 8005954:	f000 fece 	bl	80066f4 <_sbrk_r>
 8005958:	3001      	adds	r0, #1
 800595a:	d101      	bne.n	8005960 <sbrk_aligned+0x38>
 800595c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005960:	4620      	mov	r0, r4
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	200002e8 	.word	0x200002e8

08005968 <_malloc_r>:
 8005968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596c:	1ccd      	adds	r5, r1, #3
 800596e:	f025 0503 	bic.w	r5, r5, #3
 8005972:	3508      	adds	r5, #8
 8005974:	2d0c      	cmp	r5, #12
 8005976:	bf38      	it	cc
 8005978:	250c      	movcc	r5, #12
 800597a:	2d00      	cmp	r5, #0
 800597c:	4607      	mov	r7, r0
 800597e:	db01      	blt.n	8005984 <_malloc_r+0x1c>
 8005980:	42a9      	cmp	r1, r5
 8005982:	d905      	bls.n	8005990 <_malloc_r+0x28>
 8005984:	230c      	movs	r3, #12
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	2600      	movs	r6, #0
 800598a:	4630      	mov	r0, r6
 800598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005990:	4e2e      	ldr	r6, [pc, #184]	; (8005a4c <_malloc_r+0xe4>)
 8005992:	f001 fec9 	bl	8007728 <__malloc_lock>
 8005996:	6833      	ldr	r3, [r6, #0]
 8005998:	461c      	mov	r4, r3
 800599a:	bb34      	cbnz	r4, 80059ea <_malloc_r+0x82>
 800599c:	4629      	mov	r1, r5
 800599e:	4638      	mov	r0, r7
 80059a0:	f7ff ffc2 	bl	8005928 <sbrk_aligned>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	4604      	mov	r4, r0
 80059a8:	d14d      	bne.n	8005a46 <_malloc_r+0xde>
 80059aa:	6834      	ldr	r4, [r6, #0]
 80059ac:	4626      	mov	r6, r4
 80059ae:	2e00      	cmp	r6, #0
 80059b0:	d140      	bne.n	8005a34 <_malloc_r+0xcc>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	4631      	mov	r1, r6
 80059b6:	4638      	mov	r0, r7
 80059b8:	eb04 0803 	add.w	r8, r4, r3
 80059bc:	f000 fe9a 	bl	80066f4 <_sbrk_r>
 80059c0:	4580      	cmp	r8, r0
 80059c2:	d13a      	bne.n	8005a3a <_malloc_r+0xd2>
 80059c4:	6821      	ldr	r1, [r4, #0]
 80059c6:	3503      	adds	r5, #3
 80059c8:	1a6d      	subs	r5, r5, r1
 80059ca:	f025 0503 	bic.w	r5, r5, #3
 80059ce:	3508      	adds	r5, #8
 80059d0:	2d0c      	cmp	r5, #12
 80059d2:	bf38      	it	cc
 80059d4:	250c      	movcc	r5, #12
 80059d6:	4629      	mov	r1, r5
 80059d8:	4638      	mov	r0, r7
 80059da:	f7ff ffa5 	bl	8005928 <sbrk_aligned>
 80059de:	3001      	adds	r0, #1
 80059e0:	d02b      	beq.n	8005a3a <_malloc_r+0xd2>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	442b      	add	r3, r5
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	e00e      	b.n	8005a08 <_malloc_r+0xa0>
 80059ea:	6822      	ldr	r2, [r4, #0]
 80059ec:	1b52      	subs	r2, r2, r5
 80059ee:	d41e      	bmi.n	8005a2e <_malloc_r+0xc6>
 80059f0:	2a0b      	cmp	r2, #11
 80059f2:	d916      	bls.n	8005a22 <_malloc_r+0xba>
 80059f4:	1961      	adds	r1, r4, r5
 80059f6:	42a3      	cmp	r3, r4
 80059f8:	6025      	str	r5, [r4, #0]
 80059fa:	bf18      	it	ne
 80059fc:	6059      	strne	r1, [r3, #4]
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	bf08      	it	eq
 8005a02:	6031      	streq	r1, [r6, #0]
 8005a04:	5162      	str	r2, [r4, r5]
 8005a06:	604b      	str	r3, [r1, #4]
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f104 060b 	add.w	r6, r4, #11
 8005a0e:	f001 fe91 	bl	8007734 <__malloc_unlock>
 8005a12:	f026 0607 	bic.w	r6, r6, #7
 8005a16:	1d23      	adds	r3, r4, #4
 8005a18:	1af2      	subs	r2, r6, r3
 8005a1a:	d0b6      	beq.n	800598a <_malloc_r+0x22>
 8005a1c:	1b9b      	subs	r3, r3, r6
 8005a1e:	50a3      	str	r3, [r4, r2]
 8005a20:	e7b3      	b.n	800598a <_malloc_r+0x22>
 8005a22:	6862      	ldr	r2, [r4, #4]
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	bf0c      	ite	eq
 8005a28:	6032      	streq	r2, [r6, #0]
 8005a2a:	605a      	strne	r2, [r3, #4]
 8005a2c:	e7ec      	b.n	8005a08 <_malloc_r+0xa0>
 8005a2e:	4623      	mov	r3, r4
 8005a30:	6864      	ldr	r4, [r4, #4]
 8005a32:	e7b2      	b.n	800599a <_malloc_r+0x32>
 8005a34:	4634      	mov	r4, r6
 8005a36:	6876      	ldr	r6, [r6, #4]
 8005a38:	e7b9      	b.n	80059ae <_malloc_r+0x46>
 8005a3a:	230c      	movs	r3, #12
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f001 fe78 	bl	8007734 <__malloc_unlock>
 8005a44:	e7a1      	b.n	800598a <_malloc_r+0x22>
 8005a46:	6025      	str	r5, [r4, #0]
 8005a48:	e7de      	b.n	8005a08 <_malloc_r+0xa0>
 8005a4a:	bf00      	nop
 8005a4c:	200002e4 	.word	0x200002e4

08005a50 <__sfputc_r>:
 8005a50:	6893      	ldr	r3, [r2, #8]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	b410      	push	{r4}
 8005a58:	6093      	str	r3, [r2, #8]
 8005a5a:	da08      	bge.n	8005a6e <__sfputc_r+0x1e>
 8005a5c:	6994      	ldr	r4, [r2, #24]
 8005a5e:	42a3      	cmp	r3, r4
 8005a60:	db01      	blt.n	8005a66 <__sfputc_r+0x16>
 8005a62:	290a      	cmp	r1, #10
 8005a64:	d103      	bne.n	8005a6e <__sfputc_r+0x1e>
 8005a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a6a:	f000 be97 	b.w	800679c <__swbuf_r>
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	1c58      	adds	r0, r3, #1
 8005a72:	6010      	str	r0, [r2, #0]
 8005a74:	7019      	strb	r1, [r3, #0]
 8005a76:	4608      	mov	r0, r1
 8005a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <__sfputs_r>:
 8005a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a80:	4606      	mov	r6, r0
 8005a82:	460f      	mov	r7, r1
 8005a84:	4614      	mov	r4, r2
 8005a86:	18d5      	adds	r5, r2, r3
 8005a88:	42ac      	cmp	r4, r5
 8005a8a:	d101      	bne.n	8005a90 <__sfputs_r+0x12>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	e007      	b.n	8005aa0 <__sfputs_r+0x22>
 8005a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a94:	463a      	mov	r2, r7
 8005a96:	4630      	mov	r0, r6
 8005a98:	f7ff ffda 	bl	8005a50 <__sfputc_r>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d1f3      	bne.n	8005a88 <__sfputs_r+0xa>
 8005aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005aa4 <_vfiprintf_r>:
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	b09d      	sub	sp, #116	; 0x74
 8005aac:	4614      	mov	r4, r2
 8005aae:	4698      	mov	r8, r3
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	b118      	cbz	r0, 8005abc <_vfiprintf_r+0x18>
 8005ab4:	6983      	ldr	r3, [r0, #24]
 8005ab6:	b90b      	cbnz	r3, 8005abc <_vfiprintf_r+0x18>
 8005ab8:	f7ff fd88 	bl	80055cc <__sinit>
 8005abc:	4b89      	ldr	r3, [pc, #548]	; (8005ce4 <_vfiprintf_r+0x240>)
 8005abe:	429d      	cmp	r5, r3
 8005ac0:	d11b      	bne.n	8005afa <_vfiprintf_r+0x56>
 8005ac2:	6875      	ldr	r5, [r6, #4]
 8005ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ac6:	07d9      	lsls	r1, r3, #31
 8005ac8:	d405      	bmi.n	8005ad6 <_vfiprintf_r+0x32>
 8005aca:	89ab      	ldrh	r3, [r5, #12]
 8005acc:	059a      	lsls	r2, r3, #22
 8005ace:	d402      	bmi.n	8005ad6 <_vfiprintf_r+0x32>
 8005ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ad2:	f7ff fe50 	bl	8005776 <__retarget_lock_acquire_recursive>
 8005ad6:	89ab      	ldrh	r3, [r5, #12]
 8005ad8:	071b      	lsls	r3, r3, #28
 8005ada:	d501      	bpl.n	8005ae0 <_vfiprintf_r+0x3c>
 8005adc:	692b      	ldr	r3, [r5, #16]
 8005ade:	b9eb      	cbnz	r3, 8005b1c <_vfiprintf_r+0x78>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f000 febe 	bl	8006864 <__swsetup_r>
 8005ae8:	b1c0      	cbz	r0, 8005b1c <_vfiprintf_r+0x78>
 8005aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aec:	07dc      	lsls	r4, r3, #31
 8005aee:	d50e      	bpl.n	8005b0e <_vfiprintf_r+0x6a>
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005af4:	b01d      	add	sp, #116	; 0x74
 8005af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afa:	4b7b      	ldr	r3, [pc, #492]	; (8005ce8 <_vfiprintf_r+0x244>)
 8005afc:	429d      	cmp	r5, r3
 8005afe:	d101      	bne.n	8005b04 <_vfiprintf_r+0x60>
 8005b00:	68b5      	ldr	r5, [r6, #8]
 8005b02:	e7df      	b.n	8005ac4 <_vfiprintf_r+0x20>
 8005b04:	4b79      	ldr	r3, [pc, #484]	; (8005cec <_vfiprintf_r+0x248>)
 8005b06:	429d      	cmp	r5, r3
 8005b08:	bf08      	it	eq
 8005b0a:	68f5      	ldreq	r5, [r6, #12]
 8005b0c:	e7da      	b.n	8005ac4 <_vfiprintf_r+0x20>
 8005b0e:	89ab      	ldrh	r3, [r5, #12]
 8005b10:	0598      	lsls	r0, r3, #22
 8005b12:	d4ed      	bmi.n	8005af0 <_vfiprintf_r+0x4c>
 8005b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b16:	f7ff fe2f 	bl	8005778 <__retarget_lock_release_recursive>
 8005b1a:	e7e9      	b.n	8005af0 <_vfiprintf_r+0x4c>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b20:	2320      	movs	r3, #32
 8005b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b2a:	2330      	movs	r3, #48	; 0x30
 8005b2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005cf0 <_vfiprintf_r+0x24c>
 8005b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b34:	f04f 0901 	mov.w	r9, #1
 8005b38:	4623      	mov	r3, r4
 8005b3a:	469a      	mov	sl, r3
 8005b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b40:	b10a      	cbz	r2, 8005b46 <_vfiprintf_r+0xa2>
 8005b42:	2a25      	cmp	r2, #37	; 0x25
 8005b44:	d1f9      	bne.n	8005b3a <_vfiprintf_r+0x96>
 8005b46:	ebba 0b04 	subs.w	fp, sl, r4
 8005b4a:	d00b      	beq.n	8005b64 <_vfiprintf_r+0xc0>
 8005b4c:	465b      	mov	r3, fp
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4629      	mov	r1, r5
 8005b52:	4630      	mov	r0, r6
 8005b54:	f7ff ff93 	bl	8005a7e <__sfputs_r>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	f000 80aa 	beq.w	8005cb2 <_vfiprintf_r+0x20e>
 8005b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b60:	445a      	add	r2, fp
 8005b62:	9209      	str	r2, [sp, #36]	; 0x24
 8005b64:	f89a 3000 	ldrb.w	r3, [sl]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80a2 	beq.w	8005cb2 <_vfiprintf_r+0x20e>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b78:	f10a 0a01 	add.w	sl, sl, #1
 8005b7c:	9304      	str	r3, [sp, #16]
 8005b7e:	9307      	str	r3, [sp, #28]
 8005b80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b84:	931a      	str	r3, [sp, #104]	; 0x68
 8005b86:	4654      	mov	r4, sl
 8005b88:	2205      	movs	r2, #5
 8005b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b8e:	4858      	ldr	r0, [pc, #352]	; (8005cf0 <_vfiprintf_r+0x24c>)
 8005b90:	f7fa faf6 	bl	8000180 <memchr>
 8005b94:	9a04      	ldr	r2, [sp, #16]
 8005b96:	b9d8      	cbnz	r0, 8005bd0 <_vfiprintf_r+0x12c>
 8005b98:	06d1      	lsls	r1, r2, #27
 8005b9a:	bf44      	itt	mi
 8005b9c:	2320      	movmi	r3, #32
 8005b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ba2:	0713      	lsls	r3, r2, #28
 8005ba4:	bf44      	itt	mi
 8005ba6:	232b      	movmi	r3, #43	; 0x2b
 8005ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bac:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bb2:	d015      	beq.n	8005be0 <_vfiprintf_r+0x13c>
 8005bb4:	9a07      	ldr	r2, [sp, #28]
 8005bb6:	4654      	mov	r4, sl
 8005bb8:	2000      	movs	r0, #0
 8005bba:	f04f 0c0a 	mov.w	ip, #10
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bc4:	3b30      	subs	r3, #48	; 0x30
 8005bc6:	2b09      	cmp	r3, #9
 8005bc8:	d94e      	bls.n	8005c68 <_vfiprintf_r+0x1c4>
 8005bca:	b1b0      	cbz	r0, 8005bfa <_vfiprintf_r+0x156>
 8005bcc:	9207      	str	r2, [sp, #28]
 8005bce:	e014      	b.n	8005bfa <_vfiprintf_r+0x156>
 8005bd0:	eba0 0308 	sub.w	r3, r0, r8
 8005bd4:	fa09 f303 	lsl.w	r3, r9, r3
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	9304      	str	r3, [sp, #16]
 8005bdc:	46a2      	mov	sl, r4
 8005bde:	e7d2      	b.n	8005b86 <_vfiprintf_r+0xe2>
 8005be0:	9b03      	ldr	r3, [sp, #12]
 8005be2:	1d19      	adds	r1, r3, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	9103      	str	r1, [sp, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bfbb      	ittet	lt
 8005bec:	425b      	neglt	r3, r3
 8005bee:	f042 0202 	orrlt.w	r2, r2, #2
 8005bf2:	9307      	strge	r3, [sp, #28]
 8005bf4:	9307      	strlt	r3, [sp, #28]
 8005bf6:	bfb8      	it	lt
 8005bf8:	9204      	strlt	r2, [sp, #16]
 8005bfa:	7823      	ldrb	r3, [r4, #0]
 8005bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8005bfe:	d10c      	bne.n	8005c1a <_vfiprintf_r+0x176>
 8005c00:	7863      	ldrb	r3, [r4, #1]
 8005c02:	2b2a      	cmp	r3, #42	; 0x2a
 8005c04:	d135      	bne.n	8005c72 <_vfiprintf_r+0x1ce>
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	1d1a      	adds	r2, r3, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	9203      	str	r2, [sp, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bfb8      	it	lt
 8005c12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c16:	3402      	adds	r4, #2
 8005c18:	9305      	str	r3, [sp, #20]
 8005c1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d00 <_vfiprintf_r+0x25c>
 8005c1e:	7821      	ldrb	r1, [r4, #0]
 8005c20:	2203      	movs	r2, #3
 8005c22:	4650      	mov	r0, sl
 8005c24:	f7fa faac 	bl	8000180 <memchr>
 8005c28:	b140      	cbz	r0, 8005c3c <_vfiprintf_r+0x198>
 8005c2a:	2340      	movs	r3, #64	; 0x40
 8005c2c:	eba0 000a 	sub.w	r0, r0, sl
 8005c30:	fa03 f000 	lsl.w	r0, r3, r0
 8005c34:	9b04      	ldr	r3, [sp, #16]
 8005c36:	4303      	orrs	r3, r0
 8005c38:	3401      	adds	r4, #1
 8005c3a:	9304      	str	r3, [sp, #16]
 8005c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c40:	482c      	ldr	r0, [pc, #176]	; (8005cf4 <_vfiprintf_r+0x250>)
 8005c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c46:	2206      	movs	r2, #6
 8005c48:	f7fa fa9a 	bl	8000180 <memchr>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	d03f      	beq.n	8005cd0 <_vfiprintf_r+0x22c>
 8005c50:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <_vfiprintf_r+0x254>)
 8005c52:	bb1b      	cbnz	r3, 8005c9c <_vfiprintf_r+0x1f8>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	3307      	adds	r3, #7
 8005c58:	f023 0307 	bic.w	r3, r3, #7
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	9303      	str	r3, [sp, #12]
 8005c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c62:	443b      	add	r3, r7
 8005c64:	9309      	str	r3, [sp, #36]	; 0x24
 8005c66:	e767      	b.n	8005b38 <_vfiprintf_r+0x94>
 8005c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	2001      	movs	r0, #1
 8005c70:	e7a5      	b.n	8005bbe <_vfiprintf_r+0x11a>
 8005c72:	2300      	movs	r3, #0
 8005c74:	3401      	adds	r4, #1
 8005c76:	9305      	str	r3, [sp, #20]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f04f 0c0a 	mov.w	ip, #10
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c84:	3a30      	subs	r2, #48	; 0x30
 8005c86:	2a09      	cmp	r2, #9
 8005c88:	d903      	bls.n	8005c92 <_vfiprintf_r+0x1ee>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0c5      	beq.n	8005c1a <_vfiprintf_r+0x176>
 8005c8e:	9105      	str	r1, [sp, #20]
 8005c90:	e7c3      	b.n	8005c1a <_vfiprintf_r+0x176>
 8005c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c96:	4604      	mov	r4, r0
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e7f0      	b.n	8005c7e <_vfiprintf_r+0x1da>
 8005c9c:	ab03      	add	r3, sp, #12
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	462a      	mov	r2, r5
 8005ca2:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <_vfiprintf_r+0x258>)
 8005ca4:	a904      	add	r1, sp, #16
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f000 f8cc 	bl	8005e44 <_printf_float>
 8005cac:	4607      	mov	r7, r0
 8005cae:	1c78      	adds	r0, r7, #1
 8005cb0:	d1d6      	bne.n	8005c60 <_vfiprintf_r+0x1bc>
 8005cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cb4:	07d9      	lsls	r1, r3, #31
 8005cb6:	d405      	bmi.n	8005cc4 <_vfiprintf_r+0x220>
 8005cb8:	89ab      	ldrh	r3, [r5, #12]
 8005cba:	059a      	lsls	r2, r3, #22
 8005cbc:	d402      	bmi.n	8005cc4 <_vfiprintf_r+0x220>
 8005cbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cc0:	f7ff fd5a 	bl	8005778 <__retarget_lock_release_recursive>
 8005cc4:	89ab      	ldrh	r3, [r5, #12]
 8005cc6:	065b      	lsls	r3, r3, #25
 8005cc8:	f53f af12 	bmi.w	8005af0 <_vfiprintf_r+0x4c>
 8005ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cce:	e711      	b.n	8005af4 <_vfiprintf_r+0x50>
 8005cd0:	ab03      	add	r3, sp, #12
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	462a      	mov	r2, r5
 8005cd6:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <_vfiprintf_r+0x258>)
 8005cd8:	a904      	add	r1, sp, #16
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f000 fb56 	bl	800638c <_printf_i>
 8005ce0:	e7e4      	b.n	8005cac <_vfiprintf_r+0x208>
 8005ce2:	bf00      	nop
 8005ce4:	080082c8 	.word	0x080082c8
 8005ce8:	080082e8 	.word	0x080082e8
 8005cec:	080082a8 	.word	0x080082a8
 8005cf0:	0800830c 	.word	0x0800830c
 8005cf4:	08008316 	.word	0x08008316
 8005cf8:	08005e45 	.word	0x08005e45
 8005cfc:	08005a7f 	.word	0x08005a7f
 8005d00:	08008312 	.word	0x08008312

08005d04 <__cvt>:
 8005d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	ec55 4b10 	vmov	r4, r5, d0
 8005d0c:	2d00      	cmp	r5, #0
 8005d0e:	460e      	mov	r6, r1
 8005d10:	4619      	mov	r1, r3
 8005d12:	462b      	mov	r3, r5
 8005d14:	bfbb      	ittet	lt
 8005d16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d1a:	461d      	movlt	r5, r3
 8005d1c:	2300      	movge	r3, #0
 8005d1e:	232d      	movlt	r3, #45	; 0x2d
 8005d20:	700b      	strb	r3, [r1, #0]
 8005d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d28:	4691      	mov	r9, r2
 8005d2a:	f023 0820 	bic.w	r8, r3, #32
 8005d2e:	bfbc      	itt	lt
 8005d30:	4622      	movlt	r2, r4
 8005d32:	4614      	movlt	r4, r2
 8005d34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d38:	d005      	beq.n	8005d46 <__cvt+0x42>
 8005d3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d3e:	d100      	bne.n	8005d42 <__cvt+0x3e>
 8005d40:	3601      	adds	r6, #1
 8005d42:	2102      	movs	r1, #2
 8005d44:	e000      	b.n	8005d48 <__cvt+0x44>
 8005d46:	2103      	movs	r1, #3
 8005d48:	ab03      	add	r3, sp, #12
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	ab02      	add	r3, sp, #8
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	ec45 4b10 	vmov	d0, r4, r5
 8005d54:	4653      	mov	r3, sl
 8005d56:	4632      	mov	r2, r6
 8005d58:	f000 feae 	bl	8006ab8 <_dtoa_r>
 8005d5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d60:	4607      	mov	r7, r0
 8005d62:	d102      	bne.n	8005d6a <__cvt+0x66>
 8005d64:	f019 0f01 	tst.w	r9, #1
 8005d68:	d022      	beq.n	8005db0 <__cvt+0xac>
 8005d6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d6e:	eb07 0906 	add.w	r9, r7, r6
 8005d72:	d110      	bne.n	8005d96 <__cvt+0x92>
 8005d74:	783b      	ldrb	r3, [r7, #0]
 8005d76:	2b30      	cmp	r3, #48	; 0x30
 8005d78:	d10a      	bne.n	8005d90 <__cvt+0x8c>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4620      	mov	r0, r4
 8005d80:	4629      	mov	r1, r5
 8005d82:	f7fa fe79 	bl	8000a78 <__aeabi_dcmpeq>
 8005d86:	b918      	cbnz	r0, 8005d90 <__cvt+0x8c>
 8005d88:	f1c6 0601 	rsb	r6, r6, #1
 8005d8c:	f8ca 6000 	str.w	r6, [sl]
 8005d90:	f8da 3000 	ldr.w	r3, [sl]
 8005d94:	4499      	add	r9, r3
 8005d96:	2200      	movs	r2, #0
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	f7fa fe6b 	bl	8000a78 <__aeabi_dcmpeq>
 8005da2:	b108      	cbz	r0, 8005da8 <__cvt+0xa4>
 8005da4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005da8:	2230      	movs	r2, #48	; 0x30
 8005daa:	9b03      	ldr	r3, [sp, #12]
 8005dac:	454b      	cmp	r3, r9
 8005dae:	d307      	bcc.n	8005dc0 <__cvt+0xbc>
 8005db0:	9b03      	ldr	r3, [sp, #12]
 8005db2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005db4:	1bdb      	subs	r3, r3, r7
 8005db6:	4638      	mov	r0, r7
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	b004      	add	sp, #16
 8005dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc0:	1c59      	adds	r1, r3, #1
 8005dc2:	9103      	str	r1, [sp, #12]
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e7f0      	b.n	8005daa <__cvt+0xa6>

08005dc8 <__exponent>:
 8005dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	bfb8      	it	lt
 8005dd0:	4249      	neglt	r1, r1
 8005dd2:	f803 2b02 	strb.w	r2, [r3], #2
 8005dd6:	bfb4      	ite	lt
 8005dd8:	222d      	movlt	r2, #45	; 0x2d
 8005dda:	222b      	movge	r2, #43	; 0x2b
 8005ddc:	2909      	cmp	r1, #9
 8005dde:	7042      	strb	r2, [r0, #1]
 8005de0:	dd2a      	ble.n	8005e38 <__exponent+0x70>
 8005de2:	f10d 0407 	add.w	r4, sp, #7
 8005de6:	46a4      	mov	ip, r4
 8005de8:	270a      	movs	r7, #10
 8005dea:	46a6      	mov	lr, r4
 8005dec:	460a      	mov	r2, r1
 8005dee:	fb91 f6f7 	sdiv	r6, r1, r7
 8005df2:	fb07 1516 	mls	r5, r7, r6, r1
 8005df6:	3530      	adds	r5, #48	; 0x30
 8005df8:	2a63      	cmp	r2, #99	; 0x63
 8005dfa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005dfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e02:	4631      	mov	r1, r6
 8005e04:	dcf1      	bgt.n	8005dea <__exponent+0x22>
 8005e06:	3130      	adds	r1, #48	; 0x30
 8005e08:	f1ae 0502 	sub.w	r5, lr, #2
 8005e0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e10:	1c44      	adds	r4, r0, #1
 8005e12:	4629      	mov	r1, r5
 8005e14:	4561      	cmp	r1, ip
 8005e16:	d30a      	bcc.n	8005e2e <__exponent+0x66>
 8005e18:	f10d 0209 	add.w	r2, sp, #9
 8005e1c:	eba2 020e 	sub.w	r2, r2, lr
 8005e20:	4565      	cmp	r5, ip
 8005e22:	bf88      	it	hi
 8005e24:	2200      	movhi	r2, #0
 8005e26:	4413      	add	r3, r2
 8005e28:	1a18      	subs	r0, r3, r0
 8005e2a:	b003      	add	sp, #12
 8005e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e36:	e7ed      	b.n	8005e14 <__exponent+0x4c>
 8005e38:	2330      	movs	r3, #48	; 0x30
 8005e3a:	3130      	adds	r1, #48	; 0x30
 8005e3c:	7083      	strb	r3, [r0, #2]
 8005e3e:	70c1      	strb	r1, [r0, #3]
 8005e40:	1d03      	adds	r3, r0, #4
 8005e42:	e7f1      	b.n	8005e28 <__exponent+0x60>

08005e44 <_printf_float>:
 8005e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e48:	ed2d 8b02 	vpush	{d8}
 8005e4c:	b08d      	sub	sp, #52	; 0x34
 8005e4e:	460c      	mov	r4, r1
 8005e50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e54:	4616      	mov	r6, r2
 8005e56:	461f      	mov	r7, r3
 8005e58:	4605      	mov	r5, r0
 8005e5a:	f001 fc3d 	bl	80076d8 <_localeconv_r>
 8005e5e:	f8d0 a000 	ldr.w	sl, [r0]
 8005e62:	4650      	mov	r0, sl
 8005e64:	f7fa f9dc 	bl	8000220 <strlen>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	9305      	str	r3, [sp, #20]
 8005e70:	f8d8 3000 	ldr.w	r3, [r8]
 8005e74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e78:	3307      	adds	r3, #7
 8005e7a:	f023 0307 	bic.w	r3, r3, #7
 8005e7e:	f103 0208 	add.w	r2, r3, #8
 8005e82:	f8c8 2000 	str.w	r2, [r8]
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e96:	9307      	str	r3, [sp, #28]
 8005e98:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e9c:	ee08 0a10 	vmov	s16, r0
 8005ea0:	4b9f      	ldr	r3, [pc, #636]	; (8006120 <_printf_float+0x2dc>)
 8005ea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eaa:	f7fa fe17 	bl	8000adc <__aeabi_dcmpun>
 8005eae:	bb88      	cbnz	r0, 8005f14 <_printf_float+0xd0>
 8005eb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eb4:	4b9a      	ldr	r3, [pc, #616]	; (8006120 <_printf_float+0x2dc>)
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eba:	f7fa fdf1 	bl	8000aa0 <__aeabi_dcmple>
 8005ebe:	bb48      	cbnz	r0, 8005f14 <_printf_float+0xd0>
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	f7fa fde0 	bl	8000a8c <__aeabi_dcmplt>
 8005ecc:	b110      	cbz	r0, 8005ed4 <_printf_float+0x90>
 8005ece:	232d      	movs	r3, #45	; 0x2d
 8005ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed4:	4b93      	ldr	r3, [pc, #588]	; (8006124 <_printf_float+0x2e0>)
 8005ed6:	4894      	ldr	r0, [pc, #592]	; (8006128 <_printf_float+0x2e4>)
 8005ed8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005edc:	bf94      	ite	ls
 8005ede:	4698      	movls	r8, r3
 8005ee0:	4680      	movhi	r8, r0
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	6123      	str	r3, [r4, #16]
 8005ee6:	9b05      	ldr	r3, [sp, #20]
 8005ee8:	f023 0204 	bic.w	r2, r3, #4
 8005eec:	6022      	str	r2, [r4, #0]
 8005eee:	f04f 0900 	mov.w	r9, #0
 8005ef2:	9700      	str	r7, [sp, #0]
 8005ef4:	4633      	mov	r3, r6
 8005ef6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4628      	mov	r0, r5
 8005efc:	f000 f9d8 	bl	80062b0 <_printf_common>
 8005f00:	3001      	adds	r0, #1
 8005f02:	f040 8090 	bne.w	8006026 <_printf_float+0x1e2>
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f0a:	b00d      	add	sp, #52	; 0x34
 8005f0c:	ecbd 8b02 	vpop	{d8}
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa fdde 	bl	8000adc <__aeabi_dcmpun>
 8005f20:	b140      	cbz	r0, 8005f34 <_printf_float+0xf0>
 8005f22:	464b      	mov	r3, r9
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bfbc      	itt	lt
 8005f28:	232d      	movlt	r3, #45	; 0x2d
 8005f2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f2e:	487f      	ldr	r0, [pc, #508]	; (800612c <_printf_float+0x2e8>)
 8005f30:	4b7f      	ldr	r3, [pc, #508]	; (8006130 <_printf_float+0x2ec>)
 8005f32:	e7d1      	b.n	8005ed8 <_printf_float+0x94>
 8005f34:	6863      	ldr	r3, [r4, #4]
 8005f36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f3a:	9206      	str	r2, [sp, #24]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	d13f      	bne.n	8005fc0 <_printf_float+0x17c>
 8005f40:	2306      	movs	r3, #6
 8005f42:	6063      	str	r3, [r4, #4]
 8005f44:	9b05      	ldr	r3, [sp, #20]
 8005f46:	6861      	ldr	r1, [r4, #4]
 8005f48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9303      	str	r3, [sp, #12]
 8005f50:	ab0a      	add	r3, sp, #40	; 0x28
 8005f52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f56:	ab09      	add	r3, sp, #36	; 0x24
 8005f58:	ec49 8b10 	vmov	d0, r8, r9
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	6022      	str	r2, [r4, #0]
 8005f60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f64:	4628      	mov	r0, r5
 8005f66:	f7ff fecd 	bl	8005d04 <__cvt>
 8005f6a:	9b06      	ldr	r3, [sp, #24]
 8005f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f6e:	2b47      	cmp	r3, #71	; 0x47
 8005f70:	4680      	mov	r8, r0
 8005f72:	d108      	bne.n	8005f86 <_printf_float+0x142>
 8005f74:	1cc8      	adds	r0, r1, #3
 8005f76:	db02      	blt.n	8005f7e <_printf_float+0x13a>
 8005f78:	6863      	ldr	r3, [r4, #4]
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	dd41      	ble.n	8006002 <_printf_float+0x1be>
 8005f7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f82:	fa5f fb8b 	uxtb.w	fp, fp
 8005f86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f8a:	d820      	bhi.n	8005fce <_printf_float+0x18a>
 8005f8c:	3901      	subs	r1, #1
 8005f8e:	465a      	mov	r2, fp
 8005f90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f94:	9109      	str	r1, [sp, #36]	; 0x24
 8005f96:	f7ff ff17 	bl	8005dc8 <__exponent>
 8005f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f9c:	1813      	adds	r3, r2, r0
 8005f9e:	2a01      	cmp	r2, #1
 8005fa0:	4681      	mov	r9, r0
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	dc02      	bgt.n	8005fac <_printf_float+0x168>
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	07d2      	lsls	r2, r2, #31
 8005faa:	d501      	bpl.n	8005fb0 <_printf_float+0x16c>
 8005fac:	3301      	adds	r3, #1
 8005fae:	6123      	str	r3, [r4, #16]
 8005fb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d09c      	beq.n	8005ef2 <_printf_float+0xae>
 8005fb8:	232d      	movs	r3, #45	; 0x2d
 8005fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fbe:	e798      	b.n	8005ef2 <_printf_float+0xae>
 8005fc0:	9a06      	ldr	r2, [sp, #24]
 8005fc2:	2a47      	cmp	r2, #71	; 0x47
 8005fc4:	d1be      	bne.n	8005f44 <_printf_float+0x100>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1bc      	bne.n	8005f44 <_printf_float+0x100>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e7b9      	b.n	8005f42 <_printf_float+0xfe>
 8005fce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fd2:	d118      	bne.n	8006006 <_printf_float+0x1c2>
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	dd0b      	ble.n	8005ff2 <_printf_float+0x1ae>
 8005fda:	6121      	str	r1, [r4, #16]
 8005fdc:	b913      	cbnz	r3, 8005fe4 <_printf_float+0x1a0>
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	07d0      	lsls	r0, r2, #31
 8005fe2:	d502      	bpl.n	8005fea <_printf_float+0x1a6>
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	440b      	add	r3, r1
 8005fe8:	6123      	str	r3, [r4, #16]
 8005fea:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fec:	f04f 0900 	mov.w	r9, #0
 8005ff0:	e7de      	b.n	8005fb0 <_printf_float+0x16c>
 8005ff2:	b913      	cbnz	r3, 8005ffa <_printf_float+0x1b6>
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	07d2      	lsls	r2, r2, #31
 8005ff8:	d501      	bpl.n	8005ffe <_printf_float+0x1ba>
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	e7f4      	b.n	8005fe8 <_printf_float+0x1a4>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e7f2      	b.n	8005fe8 <_printf_float+0x1a4>
 8006002:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006008:	4299      	cmp	r1, r3
 800600a:	db05      	blt.n	8006018 <_printf_float+0x1d4>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	6121      	str	r1, [r4, #16]
 8006010:	07d8      	lsls	r0, r3, #31
 8006012:	d5ea      	bpl.n	8005fea <_printf_float+0x1a6>
 8006014:	1c4b      	adds	r3, r1, #1
 8006016:	e7e7      	b.n	8005fe8 <_printf_float+0x1a4>
 8006018:	2900      	cmp	r1, #0
 800601a:	bfd4      	ite	le
 800601c:	f1c1 0202 	rsble	r2, r1, #2
 8006020:	2201      	movgt	r2, #1
 8006022:	4413      	add	r3, r2
 8006024:	e7e0      	b.n	8005fe8 <_printf_float+0x1a4>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	055a      	lsls	r2, r3, #21
 800602a:	d407      	bmi.n	800603c <_printf_float+0x1f8>
 800602c:	6923      	ldr	r3, [r4, #16]
 800602e:	4642      	mov	r2, r8
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	d12c      	bne.n	8006094 <_printf_float+0x250>
 800603a:	e764      	b.n	8005f06 <_printf_float+0xc2>
 800603c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006040:	f240 80e0 	bls.w	8006204 <_printf_float+0x3c0>
 8006044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006048:	2200      	movs	r2, #0
 800604a:	2300      	movs	r3, #0
 800604c:	f7fa fd14 	bl	8000a78 <__aeabi_dcmpeq>
 8006050:	2800      	cmp	r0, #0
 8006052:	d034      	beq.n	80060be <_printf_float+0x27a>
 8006054:	4a37      	ldr	r2, [pc, #220]	; (8006134 <_printf_float+0x2f0>)
 8006056:	2301      	movs	r3, #1
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	f43f af51 	beq.w	8005f06 <_printf_float+0xc2>
 8006064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006068:	429a      	cmp	r2, r3
 800606a:	db02      	blt.n	8006072 <_printf_float+0x22e>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	07d8      	lsls	r0, r3, #31
 8006070:	d510      	bpl.n	8006094 <_printf_float+0x250>
 8006072:	ee18 3a10 	vmov	r3, s16
 8006076:	4652      	mov	r2, sl
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	f43f af41 	beq.w	8005f06 <_printf_float+0xc2>
 8006084:	f04f 0800 	mov.w	r8, #0
 8006088:	f104 091a 	add.w	r9, r4, #26
 800608c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608e:	3b01      	subs	r3, #1
 8006090:	4543      	cmp	r3, r8
 8006092:	dc09      	bgt.n	80060a8 <_printf_float+0x264>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	079b      	lsls	r3, r3, #30
 8006098:	f100 8105 	bmi.w	80062a6 <_printf_float+0x462>
 800609c:	68e0      	ldr	r0, [r4, #12]
 800609e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060a0:	4298      	cmp	r0, r3
 80060a2:	bfb8      	it	lt
 80060a4:	4618      	movlt	r0, r3
 80060a6:	e730      	b.n	8005f0a <_printf_float+0xc6>
 80060a8:	2301      	movs	r3, #1
 80060aa:	464a      	mov	r2, r9
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	f43f af27 	beq.w	8005f06 <_printf_float+0xc2>
 80060b8:	f108 0801 	add.w	r8, r8, #1
 80060bc:	e7e6      	b.n	800608c <_printf_float+0x248>
 80060be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	dc39      	bgt.n	8006138 <_printf_float+0x2f4>
 80060c4:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <_printf_float+0x2f0>)
 80060c6:	2301      	movs	r3, #1
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f af19 	beq.w	8005f06 <_printf_float+0xc2>
 80060d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d8:	4313      	orrs	r3, r2
 80060da:	d102      	bne.n	80060e2 <_printf_float+0x29e>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	07d9      	lsls	r1, r3, #31
 80060e0:	d5d8      	bpl.n	8006094 <_printf_float+0x250>
 80060e2:	ee18 3a10 	vmov	r3, s16
 80060e6:	4652      	mov	r2, sl
 80060e8:	4631      	mov	r1, r6
 80060ea:	4628      	mov	r0, r5
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	f43f af09 	beq.w	8005f06 <_printf_float+0xc2>
 80060f4:	f04f 0900 	mov.w	r9, #0
 80060f8:	f104 0a1a 	add.w	sl, r4, #26
 80060fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fe:	425b      	negs	r3, r3
 8006100:	454b      	cmp	r3, r9
 8006102:	dc01      	bgt.n	8006108 <_printf_float+0x2c4>
 8006104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006106:	e792      	b.n	800602e <_printf_float+0x1ea>
 8006108:	2301      	movs	r3, #1
 800610a:	4652      	mov	r2, sl
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f aef7 	beq.w	8005f06 <_printf_float+0xc2>
 8006118:	f109 0901 	add.w	r9, r9, #1
 800611c:	e7ee      	b.n	80060fc <_printf_float+0x2b8>
 800611e:	bf00      	nop
 8006120:	7fefffff 	.word	0x7fefffff
 8006124:	0800831d 	.word	0x0800831d
 8006128:	08008321 	.word	0x08008321
 800612c:	08008329 	.word	0x08008329
 8006130:	08008325 	.word	0x08008325
 8006134:	0800832d 	.word	0x0800832d
 8006138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800613a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800613c:	429a      	cmp	r2, r3
 800613e:	bfa8      	it	ge
 8006140:	461a      	movge	r2, r3
 8006142:	2a00      	cmp	r2, #0
 8006144:	4691      	mov	r9, r2
 8006146:	dc37      	bgt.n	80061b8 <_printf_float+0x374>
 8006148:	f04f 0b00 	mov.w	fp, #0
 800614c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006150:	f104 021a 	add.w	r2, r4, #26
 8006154:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006156:	9305      	str	r3, [sp, #20]
 8006158:	eba3 0309 	sub.w	r3, r3, r9
 800615c:	455b      	cmp	r3, fp
 800615e:	dc33      	bgt.n	80061c8 <_printf_float+0x384>
 8006160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006164:	429a      	cmp	r2, r3
 8006166:	db3b      	blt.n	80061e0 <_printf_float+0x39c>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	07da      	lsls	r2, r3, #31
 800616c:	d438      	bmi.n	80061e0 <_printf_float+0x39c>
 800616e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006170:	9a05      	ldr	r2, [sp, #20]
 8006172:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006174:	1a9a      	subs	r2, r3, r2
 8006176:	eba3 0901 	sub.w	r9, r3, r1
 800617a:	4591      	cmp	r9, r2
 800617c:	bfa8      	it	ge
 800617e:	4691      	movge	r9, r2
 8006180:	f1b9 0f00 	cmp.w	r9, #0
 8006184:	dc35      	bgt.n	80061f2 <_printf_float+0x3ae>
 8006186:	f04f 0800 	mov.w	r8, #0
 800618a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800618e:	f104 0a1a 	add.w	sl, r4, #26
 8006192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	eba3 0309 	sub.w	r3, r3, r9
 800619c:	4543      	cmp	r3, r8
 800619e:	f77f af79 	ble.w	8006094 <_printf_float+0x250>
 80061a2:	2301      	movs	r3, #1
 80061a4:	4652      	mov	r2, sl
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	f43f aeaa 	beq.w	8005f06 <_printf_float+0xc2>
 80061b2:	f108 0801 	add.w	r8, r8, #1
 80061b6:	e7ec      	b.n	8006192 <_printf_float+0x34e>
 80061b8:	4613      	mov	r3, r2
 80061ba:	4631      	mov	r1, r6
 80061bc:	4642      	mov	r2, r8
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	d1c0      	bne.n	8006148 <_printf_float+0x304>
 80061c6:	e69e      	b.n	8005f06 <_printf_float+0xc2>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	9205      	str	r2, [sp, #20]
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	f43f ae97 	beq.w	8005f06 <_printf_float+0xc2>
 80061d8:	9a05      	ldr	r2, [sp, #20]
 80061da:	f10b 0b01 	add.w	fp, fp, #1
 80061de:	e7b9      	b.n	8006154 <_printf_float+0x310>
 80061e0:	ee18 3a10 	vmov	r3, s16
 80061e4:	4652      	mov	r2, sl
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	d1be      	bne.n	800616e <_printf_float+0x32a>
 80061f0:	e689      	b.n	8005f06 <_printf_float+0xc2>
 80061f2:	9a05      	ldr	r2, [sp, #20]
 80061f4:	464b      	mov	r3, r9
 80061f6:	4442      	add	r2, r8
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	d1c1      	bne.n	8006186 <_printf_float+0x342>
 8006202:	e680      	b.n	8005f06 <_printf_float+0xc2>
 8006204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006206:	2a01      	cmp	r2, #1
 8006208:	dc01      	bgt.n	800620e <_printf_float+0x3ca>
 800620a:	07db      	lsls	r3, r3, #31
 800620c:	d538      	bpl.n	8006280 <_printf_float+0x43c>
 800620e:	2301      	movs	r3, #1
 8006210:	4642      	mov	r2, r8
 8006212:	4631      	mov	r1, r6
 8006214:	4628      	mov	r0, r5
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	f43f ae74 	beq.w	8005f06 <_printf_float+0xc2>
 800621e:	ee18 3a10 	vmov	r3, s16
 8006222:	4652      	mov	r2, sl
 8006224:	4631      	mov	r1, r6
 8006226:	4628      	mov	r0, r5
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	f43f ae6b 	beq.w	8005f06 <_printf_float+0xc2>
 8006230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006234:	2200      	movs	r2, #0
 8006236:	2300      	movs	r3, #0
 8006238:	f7fa fc1e 	bl	8000a78 <__aeabi_dcmpeq>
 800623c:	b9d8      	cbnz	r0, 8006276 <_printf_float+0x432>
 800623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006240:	f108 0201 	add.w	r2, r8, #1
 8006244:	3b01      	subs	r3, #1
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	d10e      	bne.n	800626e <_printf_float+0x42a>
 8006250:	e659      	b.n	8005f06 <_printf_float+0xc2>
 8006252:	2301      	movs	r3, #1
 8006254:	4652      	mov	r2, sl
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	f43f ae52 	beq.w	8005f06 <_printf_float+0xc2>
 8006262:	f108 0801 	add.w	r8, r8, #1
 8006266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006268:	3b01      	subs	r3, #1
 800626a:	4543      	cmp	r3, r8
 800626c:	dcf1      	bgt.n	8006252 <_printf_float+0x40e>
 800626e:	464b      	mov	r3, r9
 8006270:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006274:	e6dc      	b.n	8006030 <_printf_float+0x1ec>
 8006276:	f04f 0800 	mov.w	r8, #0
 800627a:	f104 0a1a 	add.w	sl, r4, #26
 800627e:	e7f2      	b.n	8006266 <_printf_float+0x422>
 8006280:	2301      	movs	r3, #1
 8006282:	4642      	mov	r2, r8
 8006284:	e7df      	b.n	8006246 <_printf_float+0x402>
 8006286:	2301      	movs	r3, #1
 8006288:	464a      	mov	r2, r9
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	f43f ae38 	beq.w	8005f06 <_printf_float+0xc2>
 8006296:	f108 0801 	add.w	r8, r8, #1
 800629a:	68e3      	ldr	r3, [r4, #12]
 800629c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800629e:	1a5b      	subs	r3, r3, r1
 80062a0:	4543      	cmp	r3, r8
 80062a2:	dcf0      	bgt.n	8006286 <_printf_float+0x442>
 80062a4:	e6fa      	b.n	800609c <_printf_float+0x258>
 80062a6:	f04f 0800 	mov.w	r8, #0
 80062aa:	f104 0919 	add.w	r9, r4, #25
 80062ae:	e7f4      	b.n	800629a <_printf_float+0x456>

080062b0 <_printf_common>:
 80062b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b4:	4616      	mov	r6, r2
 80062b6:	4699      	mov	r9, r3
 80062b8:	688a      	ldr	r2, [r1, #8]
 80062ba:	690b      	ldr	r3, [r1, #16]
 80062bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062c0:	4293      	cmp	r3, r2
 80062c2:	bfb8      	it	lt
 80062c4:	4613      	movlt	r3, r2
 80062c6:	6033      	str	r3, [r6, #0]
 80062c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062cc:	4607      	mov	r7, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	b10a      	cbz	r2, 80062d6 <_printf_common+0x26>
 80062d2:	3301      	adds	r3, #1
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	0699      	lsls	r1, r3, #26
 80062da:	bf42      	ittt	mi
 80062dc:	6833      	ldrmi	r3, [r6, #0]
 80062de:	3302      	addmi	r3, #2
 80062e0:	6033      	strmi	r3, [r6, #0]
 80062e2:	6825      	ldr	r5, [r4, #0]
 80062e4:	f015 0506 	ands.w	r5, r5, #6
 80062e8:	d106      	bne.n	80062f8 <_printf_common+0x48>
 80062ea:	f104 0a19 	add.w	sl, r4, #25
 80062ee:	68e3      	ldr	r3, [r4, #12]
 80062f0:	6832      	ldr	r2, [r6, #0]
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	42ab      	cmp	r3, r5
 80062f6:	dc26      	bgt.n	8006346 <_printf_common+0x96>
 80062f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062fc:	1e13      	subs	r3, r2, #0
 80062fe:	6822      	ldr	r2, [r4, #0]
 8006300:	bf18      	it	ne
 8006302:	2301      	movne	r3, #1
 8006304:	0692      	lsls	r2, r2, #26
 8006306:	d42b      	bmi.n	8006360 <_printf_common+0xb0>
 8006308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800630c:	4649      	mov	r1, r9
 800630e:	4638      	mov	r0, r7
 8006310:	47c0      	blx	r8
 8006312:	3001      	adds	r0, #1
 8006314:	d01e      	beq.n	8006354 <_printf_common+0xa4>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	68e5      	ldr	r5, [r4, #12]
 800631a:	6832      	ldr	r2, [r6, #0]
 800631c:	f003 0306 	and.w	r3, r3, #6
 8006320:	2b04      	cmp	r3, #4
 8006322:	bf08      	it	eq
 8006324:	1aad      	subeq	r5, r5, r2
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	6922      	ldr	r2, [r4, #16]
 800632a:	bf0c      	ite	eq
 800632c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006330:	2500      	movne	r5, #0
 8006332:	4293      	cmp	r3, r2
 8006334:	bfc4      	itt	gt
 8006336:	1a9b      	subgt	r3, r3, r2
 8006338:	18ed      	addgt	r5, r5, r3
 800633a:	2600      	movs	r6, #0
 800633c:	341a      	adds	r4, #26
 800633e:	42b5      	cmp	r5, r6
 8006340:	d11a      	bne.n	8006378 <_printf_common+0xc8>
 8006342:	2000      	movs	r0, #0
 8006344:	e008      	b.n	8006358 <_printf_common+0xa8>
 8006346:	2301      	movs	r3, #1
 8006348:	4652      	mov	r2, sl
 800634a:	4649      	mov	r1, r9
 800634c:	4638      	mov	r0, r7
 800634e:	47c0      	blx	r8
 8006350:	3001      	adds	r0, #1
 8006352:	d103      	bne.n	800635c <_printf_common+0xac>
 8006354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635c:	3501      	adds	r5, #1
 800635e:	e7c6      	b.n	80062ee <_printf_common+0x3e>
 8006360:	18e1      	adds	r1, r4, r3
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	2030      	movs	r0, #48	; 0x30
 8006366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800636a:	4422      	add	r2, r4
 800636c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006374:	3302      	adds	r3, #2
 8006376:	e7c7      	b.n	8006308 <_printf_common+0x58>
 8006378:	2301      	movs	r3, #1
 800637a:	4622      	mov	r2, r4
 800637c:	4649      	mov	r1, r9
 800637e:	4638      	mov	r0, r7
 8006380:	47c0      	blx	r8
 8006382:	3001      	adds	r0, #1
 8006384:	d0e6      	beq.n	8006354 <_printf_common+0xa4>
 8006386:	3601      	adds	r6, #1
 8006388:	e7d9      	b.n	800633e <_printf_common+0x8e>
	...

0800638c <_printf_i>:
 800638c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	7e0f      	ldrb	r7, [r1, #24]
 8006392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006394:	2f78      	cmp	r7, #120	; 0x78
 8006396:	4691      	mov	r9, r2
 8006398:	4680      	mov	r8, r0
 800639a:	460c      	mov	r4, r1
 800639c:	469a      	mov	sl, r3
 800639e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063a2:	d807      	bhi.n	80063b4 <_printf_i+0x28>
 80063a4:	2f62      	cmp	r7, #98	; 0x62
 80063a6:	d80a      	bhi.n	80063be <_printf_i+0x32>
 80063a8:	2f00      	cmp	r7, #0
 80063aa:	f000 80d8 	beq.w	800655e <_printf_i+0x1d2>
 80063ae:	2f58      	cmp	r7, #88	; 0x58
 80063b0:	f000 80a3 	beq.w	80064fa <_printf_i+0x16e>
 80063b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063bc:	e03a      	b.n	8006434 <_printf_i+0xa8>
 80063be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063c2:	2b15      	cmp	r3, #21
 80063c4:	d8f6      	bhi.n	80063b4 <_printf_i+0x28>
 80063c6:	a101      	add	r1, pc, #4	; (adr r1, 80063cc <_printf_i+0x40>)
 80063c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063cc:	08006425 	.word	0x08006425
 80063d0:	08006439 	.word	0x08006439
 80063d4:	080063b5 	.word	0x080063b5
 80063d8:	080063b5 	.word	0x080063b5
 80063dc:	080063b5 	.word	0x080063b5
 80063e0:	080063b5 	.word	0x080063b5
 80063e4:	08006439 	.word	0x08006439
 80063e8:	080063b5 	.word	0x080063b5
 80063ec:	080063b5 	.word	0x080063b5
 80063f0:	080063b5 	.word	0x080063b5
 80063f4:	080063b5 	.word	0x080063b5
 80063f8:	08006545 	.word	0x08006545
 80063fc:	08006469 	.word	0x08006469
 8006400:	08006527 	.word	0x08006527
 8006404:	080063b5 	.word	0x080063b5
 8006408:	080063b5 	.word	0x080063b5
 800640c:	08006567 	.word	0x08006567
 8006410:	080063b5 	.word	0x080063b5
 8006414:	08006469 	.word	0x08006469
 8006418:	080063b5 	.word	0x080063b5
 800641c:	080063b5 	.word	0x080063b5
 8006420:	0800652f 	.word	0x0800652f
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	1d1a      	adds	r2, r3, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	602a      	str	r2, [r5, #0]
 800642c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006434:	2301      	movs	r3, #1
 8006436:	e0a3      	b.n	8006580 <_printf_i+0x1f4>
 8006438:	6820      	ldr	r0, [r4, #0]
 800643a:	6829      	ldr	r1, [r5, #0]
 800643c:	0606      	lsls	r6, r0, #24
 800643e:	f101 0304 	add.w	r3, r1, #4
 8006442:	d50a      	bpl.n	800645a <_printf_i+0xce>
 8006444:	680e      	ldr	r6, [r1, #0]
 8006446:	602b      	str	r3, [r5, #0]
 8006448:	2e00      	cmp	r6, #0
 800644a:	da03      	bge.n	8006454 <_printf_i+0xc8>
 800644c:	232d      	movs	r3, #45	; 0x2d
 800644e:	4276      	negs	r6, r6
 8006450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006454:	485e      	ldr	r0, [pc, #376]	; (80065d0 <_printf_i+0x244>)
 8006456:	230a      	movs	r3, #10
 8006458:	e019      	b.n	800648e <_printf_i+0x102>
 800645a:	680e      	ldr	r6, [r1, #0]
 800645c:	602b      	str	r3, [r5, #0]
 800645e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006462:	bf18      	it	ne
 8006464:	b236      	sxthne	r6, r6
 8006466:	e7ef      	b.n	8006448 <_printf_i+0xbc>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	6820      	ldr	r0, [r4, #0]
 800646c:	1d19      	adds	r1, r3, #4
 800646e:	6029      	str	r1, [r5, #0]
 8006470:	0601      	lsls	r1, r0, #24
 8006472:	d501      	bpl.n	8006478 <_printf_i+0xec>
 8006474:	681e      	ldr	r6, [r3, #0]
 8006476:	e002      	b.n	800647e <_printf_i+0xf2>
 8006478:	0646      	lsls	r6, r0, #25
 800647a:	d5fb      	bpl.n	8006474 <_printf_i+0xe8>
 800647c:	881e      	ldrh	r6, [r3, #0]
 800647e:	4854      	ldr	r0, [pc, #336]	; (80065d0 <_printf_i+0x244>)
 8006480:	2f6f      	cmp	r7, #111	; 0x6f
 8006482:	bf0c      	ite	eq
 8006484:	2308      	moveq	r3, #8
 8006486:	230a      	movne	r3, #10
 8006488:	2100      	movs	r1, #0
 800648a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800648e:	6865      	ldr	r5, [r4, #4]
 8006490:	60a5      	str	r5, [r4, #8]
 8006492:	2d00      	cmp	r5, #0
 8006494:	bfa2      	ittt	ge
 8006496:	6821      	ldrge	r1, [r4, #0]
 8006498:	f021 0104 	bicge.w	r1, r1, #4
 800649c:	6021      	strge	r1, [r4, #0]
 800649e:	b90e      	cbnz	r6, 80064a4 <_printf_i+0x118>
 80064a0:	2d00      	cmp	r5, #0
 80064a2:	d04d      	beq.n	8006540 <_printf_i+0x1b4>
 80064a4:	4615      	mov	r5, r2
 80064a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80064aa:	fb03 6711 	mls	r7, r3, r1, r6
 80064ae:	5dc7      	ldrb	r7, [r0, r7]
 80064b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064b4:	4637      	mov	r7, r6
 80064b6:	42bb      	cmp	r3, r7
 80064b8:	460e      	mov	r6, r1
 80064ba:	d9f4      	bls.n	80064a6 <_printf_i+0x11a>
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d10b      	bne.n	80064d8 <_printf_i+0x14c>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	07de      	lsls	r6, r3, #31
 80064c4:	d508      	bpl.n	80064d8 <_printf_i+0x14c>
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	6861      	ldr	r1, [r4, #4]
 80064ca:	4299      	cmp	r1, r3
 80064cc:	bfde      	ittt	le
 80064ce:	2330      	movle	r3, #48	; 0x30
 80064d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80064d8:	1b52      	subs	r2, r2, r5
 80064da:	6122      	str	r2, [r4, #16]
 80064dc:	f8cd a000 	str.w	sl, [sp]
 80064e0:	464b      	mov	r3, r9
 80064e2:	aa03      	add	r2, sp, #12
 80064e4:	4621      	mov	r1, r4
 80064e6:	4640      	mov	r0, r8
 80064e8:	f7ff fee2 	bl	80062b0 <_printf_common>
 80064ec:	3001      	adds	r0, #1
 80064ee:	d14c      	bne.n	800658a <_printf_i+0x1fe>
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f4:	b004      	add	sp, #16
 80064f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fa:	4835      	ldr	r0, [pc, #212]	; (80065d0 <_printf_i+0x244>)
 80064fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006500:	6829      	ldr	r1, [r5, #0]
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	f851 6b04 	ldr.w	r6, [r1], #4
 8006508:	6029      	str	r1, [r5, #0]
 800650a:	061d      	lsls	r5, r3, #24
 800650c:	d514      	bpl.n	8006538 <_printf_i+0x1ac>
 800650e:	07df      	lsls	r7, r3, #31
 8006510:	bf44      	itt	mi
 8006512:	f043 0320 	orrmi.w	r3, r3, #32
 8006516:	6023      	strmi	r3, [r4, #0]
 8006518:	b91e      	cbnz	r6, 8006522 <_printf_i+0x196>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	f023 0320 	bic.w	r3, r3, #32
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	2310      	movs	r3, #16
 8006524:	e7b0      	b.n	8006488 <_printf_i+0xfc>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	f043 0320 	orr.w	r3, r3, #32
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	2378      	movs	r3, #120	; 0x78
 8006530:	4828      	ldr	r0, [pc, #160]	; (80065d4 <_printf_i+0x248>)
 8006532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006536:	e7e3      	b.n	8006500 <_printf_i+0x174>
 8006538:	0659      	lsls	r1, r3, #25
 800653a:	bf48      	it	mi
 800653c:	b2b6      	uxthmi	r6, r6
 800653e:	e7e6      	b.n	800650e <_printf_i+0x182>
 8006540:	4615      	mov	r5, r2
 8006542:	e7bb      	b.n	80064bc <_printf_i+0x130>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	6826      	ldr	r6, [r4, #0]
 8006548:	6961      	ldr	r1, [r4, #20]
 800654a:	1d18      	adds	r0, r3, #4
 800654c:	6028      	str	r0, [r5, #0]
 800654e:	0635      	lsls	r5, r6, #24
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	d501      	bpl.n	8006558 <_printf_i+0x1cc>
 8006554:	6019      	str	r1, [r3, #0]
 8006556:	e002      	b.n	800655e <_printf_i+0x1d2>
 8006558:	0670      	lsls	r0, r6, #25
 800655a:	d5fb      	bpl.n	8006554 <_printf_i+0x1c8>
 800655c:	8019      	strh	r1, [r3, #0]
 800655e:	2300      	movs	r3, #0
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	4615      	mov	r5, r2
 8006564:	e7ba      	b.n	80064dc <_printf_i+0x150>
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	1d1a      	adds	r2, r3, #4
 800656a:	602a      	str	r2, [r5, #0]
 800656c:	681d      	ldr	r5, [r3, #0]
 800656e:	6862      	ldr	r2, [r4, #4]
 8006570:	2100      	movs	r1, #0
 8006572:	4628      	mov	r0, r5
 8006574:	f7f9 fe04 	bl	8000180 <memchr>
 8006578:	b108      	cbz	r0, 800657e <_printf_i+0x1f2>
 800657a:	1b40      	subs	r0, r0, r5
 800657c:	6060      	str	r0, [r4, #4]
 800657e:	6863      	ldr	r3, [r4, #4]
 8006580:	6123      	str	r3, [r4, #16]
 8006582:	2300      	movs	r3, #0
 8006584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006588:	e7a8      	b.n	80064dc <_printf_i+0x150>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	462a      	mov	r2, r5
 800658e:	4649      	mov	r1, r9
 8006590:	4640      	mov	r0, r8
 8006592:	47d0      	blx	sl
 8006594:	3001      	adds	r0, #1
 8006596:	d0ab      	beq.n	80064f0 <_printf_i+0x164>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	079b      	lsls	r3, r3, #30
 800659c:	d413      	bmi.n	80065c6 <_printf_i+0x23a>
 800659e:	68e0      	ldr	r0, [r4, #12]
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	4298      	cmp	r0, r3
 80065a4:	bfb8      	it	lt
 80065a6:	4618      	movlt	r0, r3
 80065a8:	e7a4      	b.n	80064f4 <_printf_i+0x168>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4632      	mov	r2, r6
 80065ae:	4649      	mov	r1, r9
 80065b0:	4640      	mov	r0, r8
 80065b2:	47d0      	blx	sl
 80065b4:	3001      	adds	r0, #1
 80065b6:	d09b      	beq.n	80064f0 <_printf_i+0x164>
 80065b8:	3501      	adds	r5, #1
 80065ba:	68e3      	ldr	r3, [r4, #12]
 80065bc:	9903      	ldr	r1, [sp, #12]
 80065be:	1a5b      	subs	r3, r3, r1
 80065c0:	42ab      	cmp	r3, r5
 80065c2:	dcf2      	bgt.n	80065aa <_printf_i+0x21e>
 80065c4:	e7eb      	b.n	800659e <_printf_i+0x212>
 80065c6:	2500      	movs	r5, #0
 80065c8:	f104 0619 	add.w	r6, r4, #25
 80065cc:	e7f5      	b.n	80065ba <_printf_i+0x22e>
 80065ce:	bf00      	nop
 80065d0:	0800832f 	.word	0x0800832f
 80065d4:	08008340 	.word	0x08008340

080065d8 <iprintf>:
 80065d8:	b40f      	push	{r0, r1, r2, r3}
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <iprintf+0x2c>)
 80065dc:	b513      	push	{r0, r1, r4, lr}
 80065de:	681c      	ldr	r4, [r3, #0]
 80065e0:	b124      	cbz	r4, 80065ec <iprintf+0x14>
 80065e2:	69a3      	ldr	r3, [r4, #24]
 80065e4:	b913      	cbnz	r3, 80065ec <iprintf+0x14>
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7fe fff0 	bl	80055cc <__sinit>
 80065ec:	ab05      	add	r3, sp, #20
 80065ee:	9a04      	ldr	r2, [sp, #16]
 80065f0:	68a1      	ldr	r1, [r4, #8]
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7ff fa55 	bl	8005aa4 <_vfiprintf_r>
 80065fa:	b002      	add	sp, #8
 80065fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006600:	b004      	add	sp, #16
 8006602:	4770      	bx	lr
 8006604:	20000014 	.word	0x20000014

08006608 <_puts_r>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	460e      	mov	r6, r1
 800660c:	4605      	mov	r5, r0
 800660e:	b118      	cbz	r0, 8006618 <_puts_r+0x10>
 8006610:	6983      	ldr	r3, [r0, #24]
 8006612:	b90b      	cbnz	r3, 8006618 <_puts_r+0x10>
 8006614:	f7fe ffda 	bl	80055cc <__sinit>
 8006618:	69ab      	ldr	r3, [r5, #24]
 800661a:	68ac      	ldr	r4, [r5, #8]
 800661c:	b913      	cbnz	r3, 8006624 <_puts_r+0x1c>
 800661e:	4628      	mov	r0, r5
 8006620:	f7fe ffd4 	bl	80055cc <__sinit>
 8006624:	4b2c      	ldr	r3, [pc, #176]	; (80066d8 <_puts_r+0xd0>)
 8006626:	429c      	cmp	r4, r3
 8006628:	d120      	bne.n	800666c <_puts_r+0x64>
 800662a:	686c      	ldr	r4, [r5, #4]
 800662c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800662e:	07db      	lsls	r3, r3, #31
 8006630:	d405      	bmi.n	800663e <_puts_r+0x36>
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	0598      	lsls	r0, r3, #22
 8006636:	d402      	bmi.n	800663e <_puts_r+0x36>
 8006638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800663a:	f7ff f89c 	bl	8005776 <__retarget_lock_acquire_recursive>
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	0719      	lsls	r1, r3, #28
 8006642:	d51d      	bpl.n	8006680 <_puts_r+0x78>
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	b1db      	cbz	r3, 8006680 <_puts_r+0x78>
 8006648:	3e01      	subs	r6, #1
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006650:	3b01      	subs	r3, #1
 8006652:	60a3      	str	r3, [r4, #8]
 8006654:	bb39      	cbnz	r1, 80066a6 <_puts_r+0x9e>
 8006656:	2b00      	cmp	r3, #0
 8006658:	da38      	bge.n	80066cc <_puts_r+0xc4>
 800665a:	4622      	mov	r2, r4
 800665c:	210a      	movs	r1, #10
 800665e:	4628      	mov	r0, r5
 8006660:	f000 f89c 	bl	800679c <__swbuf_r>
 8006664:	3001      	adds	r0, #1
 8006666:	d011      	beq.n	800668c <_puts_r+0x84>
 8006668:	250a      	movs	r5, #10
 800666a:	e011      	b.n	8006690 <_puts_r+0x88>
 800666c:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <_puts_r+0xd4>)
 800666e:	429c      	cmp	r4, r3
 8006670:	d101      	bne.n	8006676 <_puts_r+0x6e>
 8006672:	68ac      	ldr	r4, [r5, #8]
 8006674:	e7da      	b.n	800662c <_puts_r+0x24>
 8006676:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <_puts_r+0xd8>)
 8006678:	429c      	cmp	r4, r3
 800667a:	bf08      	it	eq
 800667c:	68ec      	ldreq	r4, [r5, #12]
 800667e:	e7d5      	b.n	800662c <_puts_r+0x24>
 8006680:	4621      	mov	r1, r4
 8006682:	4628      	mov	r0, r5
 8006684:	f000 f8ee 	bl	8006864 <__swsetup_r>
 8006688:	2800      	cmp	r0, #0
 800668a:	d0dd      	beq.n	8006648 <_puts_r+0x40>
 800668c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006692:	07da      	lsls	r2, r3, #31
 8006694:	d405      	bmi.n	80066a2 <_puts_r+0x9a>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	059b      	lsls	r3, r3, #22
 800669a:	d402      	bmi.n	80066a2 <_puts_r+0x9a>
 800669c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800669e:	f7ff f86b 	bl	8005778 <__retarget_lock_release_recursive>
 80066a2:	4628      	mov	r0, r5
 80066a4:	bd70      	pop	{r4, r5, r6, pc}
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	da04      	bge.n	80066b4 <_puts_r+0xac>
 80066aa:	69a2      	ldr	r2, [r4, #24]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	dc06      	bgt.n	80066be <_puts_r+0xb6>
 80066b0:	290a      	cmp	r1, #10
 80066b2:	d004      	beq.n	80066be <_puts_r+0xb6>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	7019      	strb	r1, [r3, #0]
 80066bc:	e7c5      	b.n	800664a <_puts_r+0x42>
 80066be:	4622      	mov	r2, r4
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 f86b 	bl	800679c <__swbuf_r>
 80066c6:	3001      	adds	r0, #1
 80066c8:	d1bf      	bne.n	800664a <_puts_r+0x42>
 80066ca:	e7df      	b.n	800668c <_puts_r+0x84>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	250a      	movs	r5, #10
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	6022      	str	r2, [r4, #0]
 80066d4:	701d      	strb	r5, [r3, #0]
 80066d6:	e7db      	b.n	8006690 <_puts_r+0x88>
 80066d8:	080082c8 	.word	0x080082c8
 80066dc:	080082e8 	.word	0x080082e8
 80066e0:	080082a8 	.word	0x080082a8

080066e4 <puts>:
 80066e4:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <puts+0xc>)
 80066e6:	4601      	mov	r1, r0
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	f7ff bf8d 	b.w	8006608 <_puts_r>
 80066ee:	bf00      	nop
 80066f0:	20000014 	.word	0x20000014

080066f4 <_sbrk_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	4d06      	ldr	r5, [pc, #24]	; (8006710 <_sbrk_r+0x1c>)
 80066f8:	2300      	movs	r3, #0
 80066fa:	4604      	mov	r4, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	602b      	str	r3, [r5, #0]
 8006700:	f7fa ff42 	bl	8001588 <_sbrk>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_sbrk_r+0x1a>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_sbrk_r+0x1a>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	200002ec 	.word	0x200002ec

08006714 <__sread>:
 8006714:	b510      	push	{r4, lr}
 8006716:	460c      	mov	r4, r1
 8006718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671c:	f001 fbaa 	bl	8007e74 <_read_r>
 8006720:	2800      	cmp	r0, #0
 8006722:	bfab      	itete	ge
 8006724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006726:	89a3      	ldrhlt	r3, [r4, #12]
 8006728:	181b      	addge	r3, r3, r0
 800672a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800672e:	bfac      	ite	ge
 8006730:	6563      	strge	r3, [r4, #84]	; 0x54
 8006732:	81a3      	strhlt	r3, [r4, #12]
 8006734:	bd10      	pop	{r4, pc}

08006736 <__swrite>:
 8006736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673a:	461f      	mov	r7, r3
 800673c:	898b      	ldrh	r3, [r1, #12]
 800673e:	05db      	lsls	r3, r3, #23
 8006740:	4605      	mov	r5, r0
 8006742:	460c      	mov	r4, r1
 8006744:	4616      	mov	r6, r2
 8006746:	d505      	bpl.n	8006754 <__swrite+0x1e>
 8006748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674c:	2302      	movs	r3, #2
 800674e:	2200      	movs	r2, #0
 8006750:	f000 ffc6 	bl	80076e0 <_lseek_r>
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800675a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800675e:	81a3      	strh	r3, [r4, #12]
 8006760:	4632      	mov	r2, r6
 8006762:	463b      	mov	r3, r7
 8006764:	4628      	mov	r0, r5
 8006766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800676a:	f000 b869 	b.w	8006840 <_write_r>

0800676e <__sseek>:
 800676e:	b510      	push	{r4, lr}
 8006770:	460c      	mov	r4, r1
 8006772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006776:	f000 ffb3 	bl	80076e0 <_lseek_r>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	bf15      	itete	ne
 8006780:	6560      	strne	r0, [r4, #84]	; 0x54
 8006782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800678a:	81a3      	strheq	r3, [r4, #12]
 800678c:	bf18      	it	ne
 800678e:	81a3      	strhne	r3, [r4, #12]
 8006790:	bd10      	pop	{r4, pc}

08006792 <__sclose>:
 8006792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006796:	f000 b8f1 	b.w	800697c <_close_r>
	...

0800679c <__swbuf_r>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	460e      	mov	r6, r1
 80067a0:	4614      	mov	r4, r2
 80067a2:	4605      	mov	r5, r0
 80067a4:	b118      	cbz	r0, 80067ae <__swbuf_r+0x12>
 80067a6:	6983      	ldr	r3, [r0, #24]
 80067a8:	b90b      	cbnz	r3, 80067ae <__swbuf_r+0x12>
 80067aa:	f7fe ff0f 	bl	80055cc <__sinit>
 80067ae:	4b21      	ldr	r3, [pc, #132]	; (8006834 <__swbuf_r+0x98>)
 80067b0:	429c      	cmp	r4, r3
 80067b2:	d12b      	bne.n	800680c <__swbuf_r+0x70>
 80067b4:	686c      	ldr	r4, [r5, #4]
 80067b6:	69a3      	ldr	r3, [r4, #24]
 80067b8:	60a3      	str	r3, [r4, #8]
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	071a      	lsls	r2, r3, #28
 80067be:	d52f      	bpl.n	8006820 <__swbuf_r+0x84>
 80067c0:	6923      	ldr	r3, [r4, #16]
 80067c2:	b36b      	cbz	r3, 8006820 <__swbuf_r+0x84>
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	6820      	ldr	r0, [r4, #0]
 80067c8:	1ac0      	subs	r0, r0, r3
 80067ca:	6963      	ldr	r3, [r4, #20]
 80067cc:	b2f6      	uxtb	r6, r6
 80067ce:	4283      	cmp	r3, r0
 80067d0:	4637      	mov	r7, r6
 80067d2:	dc04      	bgt.n	80067de <__swbuf_r+0x42>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4628      	mov	r0, r5
 80067d8:	f7fe fe64 	bl	80054a4 <_fflush_r>
 80067dc:	bb30      	cbnz	r0, 800682c <__swbuf_r+0x90>
 80067de:	68a3      	ldr	r3, [r4, #8]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	60a3      	str	r3, [r4, #8]
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	6022      	str	r2, [r4, #0]
 80067ea:	701e      	strb	r6, [r3, #0]
 80067ec:	6963      	ldr	r3, [r4, #20]
 80067ee:	3001      	adds	r0, #1
 80067f0:	4283      	cmp	r3, r0
 80067f2:	d004      	beq.n	80067fe <__swbuf_r+0x62>
 80067f4:	89a3      	ldrh	r3, [r4, #12]
 80067f6:	07db      	lsls	r3, r3, #31
 80067f8:	d506      	bpl.n	8006808 <__swbuf_r+0x6c>
 80067fa:	2e0a      	cmp	r6, #10
 80067fc:	d104      	bne.n	8006808 <__swbuf_r+0x6c>
 80067fe:	4621      	mov	r1, r4
 8006800:	4628      	mov	r0, r5
 8006802:	f7fe fe4f 	bl	80054a4 <_fflush_r>
 8006806:	b988      	cbnz	r0, 800682c <__swbuf_r+0x90>
 8006808:	4638      	mov	r0, r7
 800680a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <__swbuf_r+0x9c>)
 800680e:	429c      	cmp	r4, r3
 8006810:	d101      	bne.n	8006816 <__swbuf_r+0x7a>
 8006812:	68ac      	ldr	r4, [r5, #8]
 8006814:	e7cf      	b.n	80067b6 <__swbuf_r+0x1a>
 8006816:	4b09      	ldr	r3, [pc, #36]	; (800683c <__swbuf_r+0xa0>)
 8006818:	429c      	cmp	r4, r3
 800681a:	bf08      	it	eq
 800681c:	68ec      	ldreq	r4, [r5, #12]
 800681e:	e7ca      	b.n	80067b6 <__swbuf_r+0x1a>
 8006820:	4621      	mov	r1, r4
 8006822:	4628      	mov	r0, r5
 8006824:	f000 f81e 	bl	8006864 <__swsetup_r>
 8006828:	2800      	cmp	r0, #0
 800682a:	d0cb      	beq.n	80067c4 <__swbuf_r+0x28>
 800682c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006830:	e7ea      	b.n	8006808 <__swbuf_r+0x6c>
 8006832:	bf00      	nop
 8006834:	080082c8 	.word	0x080082c8
 8006838:	080082e8 	.word	0x080082e8
 800683c:	080082a8 	.word	0x080082a8

08006840 <_write_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d07      	ldr	r5, [pc, #28]	; (8006860 <_write_r+0x20>)
 8006844:	4604      	mov	r4, r0
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	2200      	movs	r2, #0
 800684c:	602a      	str	r2, [r5, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f7fa fe49 	bl	80014e6 <_write>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_write_r+0x1e>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_write_r+0x1e>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	200002ec 	.word	0x200002ec

08006864 <__swsetup_r>:
 8006864:	4b32      	ldr	r3, [pc, #200]	; (8006930 <__swsetup_r+0xcc>)
 8006866:	b570      	push	{r4, r5, r6, lr}
 8006868:	681d      	ldr	r5, [r3, #0]
 800686a:	4606      	mov	r6, r0
 800686c:	460c      	mov	r4, r1
 800686e:	b125      	cbz	r5, 800687a <__swsetup_r+0x16>
 8006870:	69ab      	ldr	r3, [r5, #24]
 8006872:	b913      	cbnz	r3, 800687a <__swsetup_r+0x16>
 8006874:	4628      	mov	r0, r5
 8006876:	f7fe fea9 	bl	80055cc <__sinit>
 800687a:	4b2e      	ldr	r3, [pc, #184]	; (8006934 <__swsetup_r+0xd0>)
 800687c:	429c      	cmp	r4, r3
 800687e:	d10f      	bne.n	80068a0 <__swsetup_r+0x3c>
 8006880:	686c      	ldr	r4, [r5, #4]
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006888:	0719      	lsls	r1, r3, #28
 800688a:	d42c      	bmi.n	80068e6 <__swsetup_r+0x82>
 800688c:	06dd      	lsls	r5, r3, #27
 800688e:	d411      	bmi.n	80068b4 <__swsetup_r+0x50>
 8006890:	2309      	movs	r3, #9
 8006892:	6033      	str	r3, [r6, #0]
 8006894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800689e:	e03e      	b.n	800691e <__swsetup_r+0xba>
 80068a0:	4b25      	ldr	r3, [pc, #148]	; (8006938 <__swsetup_r+0xd4>)
 80068a2:	429c      	cmp	r4, r3
 80068a4:	d101      	bne.n	80068aa <__swsetup_r+0x46>
 80068a6:	68ac      	ldr	r4, [r5, #8]
 80068a8:	e7eb      	b.n	8006882 <__swsetup_r+0x1e>
 80068aa:	4b24      	ldr	r3, [pc, #144]	; (800693c <__swsetup_r+0xd8>)
 80068ac:	429c      	cmp	r4, r3
 80068ae:	bf08      	it	eq
 80068b0:	68ec      	ldreq	r4, [r5, #12]
 80068b2:	e7e6      	b.n	8006882 <__swsetup_r+0x1e>
 80068b4:	0758      	lsls	r0, r3, #29
 80068b6:	d512      	bpl.n	80068de <__swsetup_r+0x7a>
 80068b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ba:	b141      	cbz	r1, 80068ce <__swsetup_r+0x6a>
 80068bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068c0:	4299      	cmp	r1, r3
 80068c2:	d002      	beq.n	80068ca <__swsetup_r+0x66>
 80068c4:	4630      	mov	r0, r6
 80068c6:	f7fe ffe3 	bl	8005890 <_free_r>
 80068ca:	2300      	movs	r3, #0
 80068cc:	6363      	str	r3, [r4, #52]	; 0x34
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	2300      	movs	r3, #0
 80068d8:	6063      	str	r3, [r4, #4]
 80068da:	6923      	ldr	r3, [r4, #16]
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	89a3      	ldrh	r3, [r4, #12]
 80068e0:	f043 0308 	orr.w	r3, r3, #8
 80068e4:	81a3      	strh	r3, [r4, #12]
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	b94b      	cbnz	r3, 80068fe <__swsetup_r+0x9a>
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f4:	d003      	beq.n	80068fe <__swsetup_r+0x9a>
 80068f6:	4621      	mov	r1, r4
 80068f8:	4630      	mov	r0, r6
 80068fa:	f7fe ff63 	bl	80057c4 <__smakebuf_r>
 80068fe:	89a0      	ldrh	r0, [r4, #12]
 8006900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006904:	f010 0301 	ands.w	r3, r0, #1
 8006908:	d00a      	beq.n	8006920 <__swsetup_r+0xbc>
 800690a:	2300      	movs	r3, #0
 800690c:	60a3      	str	r3, [r4, #8]
 800690e:	6963      	ldr	r3, [r4, #20]
 8006910:	425b      	negs	r3, r3
 8006912:	61a3      	str	r3, [r4, #24]
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	b943      	cbnz	r3, 800692a <__swsetup_r+0xc6>
 8006918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800691c:	d1ba      	bne.n	8006894 <__swsetup_r+0x30>
 800691e:	bd70      	pop	{r4, r5, r6, pc}
 8006920:	0781      	lsls	r1, r0, #30
 8006922:	bf58      	it	pl
 8006924:	6963      	ldrpl	r3, [r4, #20]
 8006926:	60a3      	str	r3, [r4, #8]
 8006928:	e7f4      	b.n	8006914 <__swsetup_r+0xb0>
 800692a:	2000      	movs	r0, #0
 800692c:	e7f7      	b.n	800691e <__swsetup_r+0xba>
 800692e:	bf00      	nop
 8006930:	20000014 	.word	0x20000014
 8006934:	080082c8 	.word	0x080082c8
 8006938:	080082e8 	.word	0x080082e8
 800693c:	080082a8 	.word	0x080082a8

08006940 <__assert_func>:
 8006940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006942:	4614      	mov	r4, r2
 8006944:	461a      	mov	r2, r3
 8006946:	4b09      	ldr	r3, [pc, #36]	; (800696c <__assert_func+0x2c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4605      	mov	r5, r0
 800694c:	68d8      	ldr	r0, [r3, #12]
 800694e:	b14c      	cbz	r4, 8006964 <__assert_func+0x24>
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <__assert_func+0x30>)
 8006952:	9100      	str	r1, [sp, #0]
 8006954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006958:	4906      	ldr	r1, [pc, #24]	; (8006974 <__assert_func+0x34>)
 800695a:	462b      	mov	r3, r5
 800695c:	f7fe feb4 	bl	80056c8 <fiprintf>
 8006960:	f001 faa7 	bl	8007eb2 <abort>
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <__assert_func+0x38>)
 8006966:	461c      	mov	r4, r3
 8006968:	e7f3      	b.n	8006952 <__assert_func+0x12>
 800696a:	bf00      	nop
 800696c:	20000014 	.word	0x20000014
 8006970:	08008351 	.word	0x08008351
 8006974:	0800835e 	.word	0x0800835e
 8006978:	0800838c 	.word	0x0800838c

0800697c <_close_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d06      	ldr	r5, [pc, #24]	; (8006998 <_close_r+0x1c>)
 8006980:	2300      	movs	r3, #0
 8006982:	4604      	mov	r4, r0
 8006984:	4608      	mov	r0, r1
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	f7fa fdc9 	bl	800151e <_close>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_close_r+0x1a>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_close_r+0x1a>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	200002ec 	.word	0x200002ec

0800699c <quorem>:
 800699c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	6903      	ldr	r3, [r0, #16]
 80069a2:	690c      	ldr	r4, [r1, #16]
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	4607      	mov	r7, r0
 80069a8:	f2c0 8081 	blt.w	8006aae <quorem+0x112>
 80069ac:	3c01      	subs	r4, #1
 80069ae:	f101 0814 	add.w	r8, r1, #20
 80069b2:	f100 0514 	add.w	r5, r0, #20
 80069b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069c4:	3301      	adds	r3, #1
 80069c6:	429a      	cmp	r2, r3
 80069c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80069d4:	d331      	bcc.n	8006a3a <quorem+0x9e>
 80069d6:	f04f 0e00 	mov.w	lr, #0
 80069da:	4640      	mov	r0, r8
 80069dc:	46ac      	mov	ip, r5
 80069de:	46f2      	mov	sl, lr
 80069e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80069e4:	b293      	uxth	r3, r2
 80069e6:	fb06 e303 	mla	r3, r6, r3, lr
 80069ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	ebaa 0303 	sub.w	r3, sl, r3
 80069f4:	f8dc a000 	ldr.w	sl, [ip]
 80069f8:	0c12      	lsrs	r2, r2, #16
 80069fa:	fa13 f38a 	uxtah	r3, r3, sl
 80069fe:	fb06 e202 	mla	r2, r6, r2, lr
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	9b00      	ldr	r3, [sp, #0]
 8006a06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a14:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a18:	4581      	cmp	r9, r0
 8006a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a1e:	f84c 3b04 	str.w	r3, [ip], #4
 8006a22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a26:	d2db      	bcs.n	80069e0 <quorem+0x44>
 8006a28:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a2c:	b92b      	cbnz	r3, 8006a3a <quorem+0x9e>
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	3b04      	subs	r3, #4
 8006a32:	429d      	cmp	r5, r3
 8006a34:	461a      	mov	r2, r3
 8006a36:	d32e      	bcc.n	8006a96 <quorem+0xfa>
 8006a38:	613c      	str	r4, [r7, #16]
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	f001 f902 	bl	8007c44 <__mcmp>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	db24      	blt.n	8006a8e <quorem+0xf2>
 8006a44:	3601      	adds	r6, #1
 8006a46:	4628      	mov	r0, r5
 8006a48:	f04f 0c00 	mov.w	ip, #0
 8006a4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a50:	f8d0 e000 	ldr.w	lr, [r0]
 8006a54:	b293      	uxth	r3, r2
 8006a56:	ebac 0303 	sub.w	r3, ip, r3
 8006a5a:	0c12      	lsrs	r2, r2, #16
 8006a5c:	fa13 f38e 	uxtah	r3, r3, lr
 8006a60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a6e:	45c1      	cmp	r9, r8
 8006a70:	f840 3b04 	str.w	r3, [r0], #4
 8006a74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a78:	d2e8      	bcs.n	8006a4c <quorem+0xb0>
 8006a7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a82:	b922      	cbnz	r2, 8006a8e <quorem+0xf2>
 8006a84:	3b04      	subs	r3, #4
 8006a86:	429d      	cmp	r5, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	d30a      	bcc.n	8006aa2 <quorem+0x106>
 8006a8c:	613c      	str	r4, [r7, #16]
 8006a8e:	4630      	mov	r0, r6
 8006a90:	b003      	add	sp, #12
 8006a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	3b04      	subs	r3, #4
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	d1cc      	bne.n	8006a38 <quorem+0x9c>
 8006a9e:	3c01      	subs	r4, #1
 8006aa0:	e7c7      	b.n	8006a32 <quorem+0x96>
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	3b04      	subs	r3, #4
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	d1f0      	bne.n	8006a8c <quorem+0xf0>
 8006aaa:	3c01      	subs	r4, #1
 8006aac:	e7eb      	b.n	8006a86 <quorem+0xea>
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e7ee      	b.n	8006a90 <quorem+0xf4>
 8006ab2:	0000      	movs	r0, r0
 8006ab4:	0000      	movs	r0, r0
	...

08006ab8 <_dtoa_r>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	ed2d 8b04 	vpush	{d8-d9}
 8006ac0:	ec57 6b10 	vmov	r6, r7, d0
 8006ac4:	b093      	sub	sp, #76	; 0x4c
 8006ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006acc:	9106      	str	r1, [sp, #24]
 8006ace:	ee10 aa10 	vmov	sl, s0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ad8:	46bb      	mov	fp, r7
 8006ada:	b975      	cbnz	r5, 8006afa <_dtoa_r+0x42>
 8006adc:	2010      	movs	r0, #16
 8006ade:	f7fe feb1 	bl	8005844 <malloc>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8006ae6:	b920      	cbnz	r0, 8006af2 <_dtoa_r+0x3a>
 8006ae8:	4ba7      	ldr	r3, [pc, #668]	; (8006d88 <_dtoa_r+0x2d0>)
 8006aea:	21ea      	movs	r1, #234	; 0xea
 8006aec:	48a7      	ldr	r0, [pc, #668]	; (8006d8c <_dtoa_r+0x2d4>)
 8006aee:	f7ff ff27 	bl	8006940 <__assert_func>
 8006af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006af6:	6005      	str	r5, [r0, #0]
 8006af8:	60c5      	str	r5, [r0, #12]
 8006afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006afc:	6819      	ldr	r1, [r3, #0]
 8006afe:	b151      	cbz	r1, 8006b16 <_dtoa_r+0x5e>
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	604a      	str	r2, [r1, #4]
 8006b04:	2301      	movs	r3, #1
 8006b06:	4093      	lsls	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 fe58 	bl	80077c0 <_Bfree>
 8006b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	1e3b      	subs	r3, r7, #0
 8006b18:	bfaa      	itet	ge
 8006b1a:	2300      	movge	r3, #0
 8006b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b20:	f8c8 3000 	strge.w	r3, [r8]
 8006b24:	4b9a      	ldr	r3, [pc, #616]	; (8006d90 <_dtoa_r+0x2d8>)
 8006b26:	bfbc      	itt	lt
 8006b28:	2201      	movlt	r2, #1
 8006b2a:	f8c8 2000 	strlt.w	r2, [r8]
 8006b2e:	ea33 030b 	bics.w	r3, r3, fp
 8006b32:	d11b      	bne.n	8006b6c <_dtoa_r+0xb4>
 8006b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b36:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b40:	4333      	orrs	r3, r6
 8006b42:	f000 8592 	beq.w	800766a <_dtoa_r+0xbb2>
 8006b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b48:	b963      	cbnz	r3, 8006b64 <_dtoa_r+0xac>
 8006b4a:	4b92      	ldr	r3, [pc, #584]	; (8006d94 <_dtoa_r+0x2dc>)
 8006b4c:	e022      	b.n	8006b94 <_dtoa_r+0xdc>
 8006b4e:	4b92      	ldr	r3, [pc, #584]	; (8006d98 <_dtoa_r+0x2e0>)
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	3308      	adds	r3, #8
 8006b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	9801      	ldr	r0, [sp, #4]
 8006b5a:	b013      	add	sp, #76	; 0x4c
 8006b5c:	ecbd 8b04 	vpop	{d8-d9}
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	4b8b      	ldr	r3, [pc, #556]	; (8006d94 <_dtoa_r+0x2dc>)
 8006b66:	9301      	str	r3, [sp, #4]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	e7f3      	b.n	8006b54 <_dtoa_r+0x9c>
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4650      	mov	r0, sl
 8006b72:	4659      	mov	r1, fp
 8006b74:	f7f9 ff80 	bl	8000a78 <__aeabi_dcmpeq>
 8006b78:	ec4b ab19 	vmov	d9, sl, fp
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	b158      	cbz	r0, 8006b98 <_dtoa_r+0xe0>
 8006b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b82:	2301      	movs	r3, #1
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 856b 	beq.w	8007664 <_dtoa_r+0xbac>
 8006b8e:	4883      	ldr	r0, [pc, #524]	; (8006d9c <_dtoa_r+0x2e4>)
 8006b90:	6018      	str	r0, [r3, #0]
 8006b92:	1e43      	subs	r3, r0, #1
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	e7df      	b.n	8006b58 <_dtoa_r+0xa0>
 8006b98:	ec4b ab10 	vmov	d0, sl, fp
 8006b9c:	aa10      	add	r2, sp, #64	; 0x40
 8006b9e:	a911      	add	r1, sp, #68	; 0x44
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f001 f8f5 	bl	8007d90 <__d2b>
 8006ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006baa:	ee08 0a10 	vmov	s16, r0
 8006bae:	2d00      	cmp	r5, #0
 8006bb0:	f000 8084 	beq.w	8006cbc <_dtoa_r+0x204>
 8006bb4:	ee19 3a90 	vmov	r3, s19
 8006bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006bc0:	4656      	mov	r6, sl
 8006bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006bce:	4b74      	ldr	r3, [pc, #464]	; (8006da0 <_dtoa_r+0x2e8>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	f7f9 fb2f 	bl	8000238 <__aeabi_dsub>
 8006bda:	a365      	add	r3, pc, #404	; (adr r3, 8006d70 <_dtoa_r+0x2b8>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f7f9 fce2 	bl	80005a8 <__aeabi_dmul>
 8006be4:	a364      	add	r3, pc, #400	; (adr r3, 8006d78 <_dtoa_r+0x2c0>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7f9 fb27 	bl	800023c <__adddf3>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	460f      	mov	r7, r1
 8006bf4:	f7f9 fc6e 	bl	80004d4 <__aeabi_i2d>
 8006bf8:	a361      	add	r3, pc, #388	; (adr r3, 8006d80 <_dtoa_r+0x2c8>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fcd3 	bl	80005a8 <__aeabi_dmul>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4630      	mov	r0, r6
 8006c08:	4639      	mov	r1, r7
 8006c0a:	f7f9 fb17 	bl	800023c <__adddf3>
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	f7f9 ff79 	bl	8000b08 <__aeabi_d2iz>
 8006c16:	2200      	movs	r2, #0
 8006c18:	9000      	str	r0, [sp, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	4639      	mov	r1, r7
 8006c20:	f7f9 ff34 	bl	8000a8c <__aeabi_dcmplt>
 8006c24:	b150      	cbz	r0, 8006c3c <_dtoa_r+0x184>
 8006c26:	9800      	ldr	r0, [sp, #0]
 8006c28:	f7f9 fc54 	bl	80004d4 <__aeabi_i2d>
 8006c2c:	4632      	mov	r2, r6
 8006c2e:	463b      	mov	r3, r7
 8006c30:	f7f9 ff22 	bl	8000a78 <__aeabi_dcmpeq>
 8006c34:	b910      	cbnz	r0, 8006c3c <_dtoa_r+0x184>
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	9b00      	ldr	r3, [sp, #0]
 8006c3e:	2b16      	cmp	r3, #22
 8006c40:	d85a      	bhi.n	8006cf8 <_dtoa_r+0x240>
 8006c42:	9a00      	ldr	r2, [sp, #0]
 8006c44:	4b57      	ldr	r3, [pc, #348]	; (8006da4 <_dtoa_r+0x2ec>)
 8006c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	ec51 0b19 	vmov	r0, r1, d9
 8006c52:	f7f9 ff1b 	bl	8000a8c <__aeabi_dcmplt>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d050      	beq.n	8006cfc <_dtoa_r+0x244>
 8006c5a:	9b00      	ldr	r3, [sp, #0]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	2300      	movs	r3, #0
 8006c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c66:	1b5d      	subs	r5, r3, r5
 8006c68:	1e6b      	subs	r3, r5, #1
 8006c6a:	9305      	str	r3, [sp, #20]
 8006c6c:	bf45      	ittet	mi
 8006c6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c72:	9304      	strmi	r3, [sp, #16]
 8006c74:	2300      	movpl	r3, #0
 8006c76:	2300      	movmi	r3, #0
 8006c78:	bf4c      	ite	mi
 8006c7a:	9305      	strmi	r3, [sp, #20]
 8006c7c:	9304      	strpl	r3, [sp, #16]
 8006c7e:	9b00      	ldr	r3, [sp, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	db3d      	blt.n	8006d00 <_dtoa_r+0x248>
 8006c84:	9b05      	ldr	r3, [sp, #20]
 8006c86:	9a00      	ldr	r2, [sp, #0]
 8006c88:	920a      	str	r2, [sp, #40]	; 0x28
 8006c8a:	4413      	add	r3, r2
 8006c8c:	9305      	str	r3, [sp, #20]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	9307      	str	r3, [sp, #28]
 8006c92:	9b06      	ldr	r3, [sp, #24]
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	f200 8089 	bhi.w	8006dac <_dtoa_r+0x2f4>
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	bfc4      	itt	gt
 8006c9e:	3b04      	subgt	r3, #4
 8006ca0:	9306      	strgt	r3, [sp, #24]
 8006ca2:	9b06      	ldr	r3, [sp, #24]
 8006ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8006ca8:	bfcc      	ite	gt
 8006caa:	2500      	movgt	r5, #0
 8006cac:	2501      	movle	r5, #1
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	f200 8087 	bhi.w	8006dc2 <_dtoa_r+0x30a>
 8006cb4:	e8df f003 	tbb	[pc, r3]
 8006cb8:	59383a2d 	.word	0x59383a2d
 8006cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006cc0:	441d      	add	r5, r3
 8006cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	bfc1      	itttt	gt
 8006cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006cd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006cda:	bfda      	itte	le
 8006cdc:	f1c3 0320 	rsble	r3, r3, #32
 8006ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8006ce4:	4318      	orrgt	r0, r3
 8006ce6:	f7f9 fbe5 	bl	80004b4 <__aeabi_ui2d>
 8006cea:	2301      	movs	r3, #1
 8006cec:	4606      	mov	r6, r0
 8006cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006cf2:	3d01      	subs	r5, #1
 8006cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8006cf6:	e76a      	b.n	8006bce <_dtoa_r+0x116>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e7b2      	b.n	8006c62 <_dtoa_r+0x1aa>
 8006cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006cfe:	e7b1      	b.n	8006c64 <_dtoa_r+0x1ac>
 8006d00:	9b04      	ldr	r3, [sp, #16]
 8006d02:	9a00      	ldr	r2, [sp, #0]
 8006d04:	1a9b      	subs	r3, r3, r2
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	4253      	negs	r3, r2
 8006d0a:	9307      	str	r3, [sp, #28]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d10:	e7bf      	b.n	8006c92 <_dtoa_r+0x1da>
 8006d12:	2300      	movs	r3, #0
 8006d14:	9308      	str	r3, [sp, #32]
 8006d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dc55      	bgt.n	8006dc8 <_dtoa_r+0x310>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d22:	461a      	mov	r2, r3
 8006d24:	9209      	str	r2, [sp, #36]	; 0x24
 8006d26:	e00c      	b.n	8006d42 <_dtoa_r+0x28a>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e7f3      	b.n	8006d14 <_dtoa_r+0x25c>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d30:	9308      	str	r3, [sp, #32]
 8006d32:	9b00      	ldr	r3, [sp, #0]
 8006d34:	4413      	add	r3, r2
 8006d36:	9302      	str	r3, [sp, #8]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	9303      	str	r3, [sp, #12]
 8006d3e:	bfb8      	it	lt
 8006d40:	2301      	movlt	r3, #1
 8006d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d44:	2200      	movs	r2, #0
 8006d46:	6042      	str	r2, [r0, #4]
 8006d48:	2204      	movs	r2, #4
 8006d4a:	f102 0614 	add.w	r6, r2, #20
 8006d4e:	429e      	cmp	r6, r3
 8006d50:	6841      	ldr	r1, [r0, #4]
 8006d52:	d93d      	bls.n	8006dd0 <_dtoa_r+0x318>
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 fcf3 	bl	8007740 <_Balloc>
 8006d5a:	9001      	str	r0, [sp, #4]
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d13b      	bne.n	8006dd8 <_dtoa_r+0x320>
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <_dtoa_r+0x2f0>)
 8006d62:	4602      	mov	r2, r0
 8006d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d68:	e6c0      	b.n	8006aec <_dtoa_r+0x34>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e7df      	b.n	8006d2e <_dtoa_r+0x276>
 8006d6e:	bf00      	nop
 8006d70:	636f4361 	.word	0x636f4361
 8006d74:	3fd287a7 	.word	0x3fd287a7
 8006d78:	8b60c8b3 	.word	0x8b60c8b3
 8006d7c:	3fc68a28 	.word	0x3fc68a28
 8006d80:	509f79fb 	.word	0x509f79fb
 8006d84:	3fd34413 	.word	0x3fd34413
 8006d88:	0800849b 	.word	0x0800849b
 8006d8c:	080084b2 	.word	0x080084b2
 8006d90:	7ff00000 	.word	0x7ff00000
 8006d94:	08008497 	.word	0x08008497
 8006d98:	0800848e 	.word	0x0800848e
 8006d9c:	0800832e 	.word	0x0800832e
 8006da0:	3ff80000 	.word	0x3ff80000
 8006da4:	080085b0 	.word	0x080085b0
 8006da8:	0800850d 	.word	0x0800850d
 8006dac:	2501      	movs	r5, #1
 8006dae:	2300      	movs	r3, #0
 8006db0:	9306      	str	r3, [sp, #24]
 8006db2:	9508      	str	r5, [sp, #32]
 8006db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2312      	movs	r3, #18
 8006dc0:	e7b0      	b.n	8006d24 <_dtoa_r+0x26c>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	9308      	str	r3, [sp, #32]
 8006dc6:	e7f5      	b.n	8006db4 <_dtoa_r+0x2fc>
 8006dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dce:	e7b8      	b.n	8006d42 <_dtoa_r+0x28a>
 8006dd0:	3101      	adds	r1, #1
 8006dd2:	6041      	str	r1, [r0, #4]
 8006dd4:	0052      	lsls	r2, r2, #1
 8006dd6:	e7b8      	b.n	8006d4a <_dtoa_r+0x292>
 8006dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dda:	9a01      	ldr	r2, [sp, #4]
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	2b0e      	cmp	r3, #14
 8006de2:	f200 809d 	bhi.w	8006f20 <_dtoa_r+0x468>
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	f000 809a 	beq.w	8006f20 <_dtoa_r+0x468>
 8006dec:	9b00      	ldr	r3, [sp, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dd32      	ble.n	8006e58 <_dtoa_r+0x3a0>
 8006df2:	4ab7      	ldr	r2, [pc, #732]	; (80070d0 <_dtoa_r+0x618>)
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e00:	9b00      	ldr	r3, [sp, #0]
 8006e02:	05d8      	lsls	r0, r3, #23
 8006e04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e08:	d516      	bpl.n	8006e38 <_dtoa_r+0x380>
 8006e0a:	4bb2      	ldr	r3, [pc, #712]	; (80070d4 <_dtoa_r+0x61c>)
 8006e0c:	ec51 0b19 	vmov	r0, r1, d9
 8006e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e14:	f7f9 fcf2 	bl	80007fc <__aeabi_ddiv>
 8006e18:	f007 070f 	and.w	r7, r7, #15
 8006e1c:	4682      	mov	sl, r0
 8006e1e:	468b      	mov	fp, r1
 8006e20:	2503      	movs	r5, #3
 8006e22:	4eac      	ldr	r6, [pc, #688]	; (80070d4 <_dtoa_r+0x61c>)
 8006e24:	b957      	cbnz	r7, 8006e3c <_dtoa_r+0x384>
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	f7f9 fce5 	bl	80007fc <__aeabi_ddiv>
 8006e32:	4682      	mov	sl, r0
 8006e34:	468b      	mov	fp, r1
 8006e36:	e028      	b.n	8006e8a <_dtoa_r+0x3d2>
 8006e38:	2502      	movs	r5, #2
 8006e3a:	e7f2      	b.n	8006e22 <_dtoa_r+0x36a>
 8006e3c:	07f9      	lsls	r1, r7, #31
 8006e3e:	d508      	bpl.n	8006e52 <_dtoa_r+0x39a>
 8006e40:	4640      	mov	r0, r8
 8006e42:	4649      	mov	r1, r9
 8006e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e48:	f7f9 fbae 	bl	80005a8 <__aeabi_dmul>
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	4680      	mov	r8, r0
 8006e50:	4689      	mov	r9, r1
 8006e52:	107f      	asrs	r7, r7, #1
 8006e54:	3608      	adds	r6, #8
 8006e56:	e7e5      	b.n	8006e24 <_dtoa_r+0x36c>
 8006e58:	f000 809b 	beq.w	8006f92 <_dtoa_r+0x4da>
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	4f9d      	ldr	r7, [pc, #628]	; (80070d4 <_dtoa_r+0x61c>)
 8006e60:	425e      	negs	r6, r3
 8006e62:	4b9b      	ldr	r3, [pc, #620]	; (80070d0 <_dtoa_r+0x618>)
 8006e64:	f006 020f 	and.w	r2, r6, #15
 8006e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	ec51 0b19 	vmov	r0, r1, d9
 8006e74:	f7f9 fb98 	bl	80005a8 <__aeabi_dmul>
 8006e78:	1136      	asrs	r6, r6, #4
 8006e7a:	4682      	mov	sl, r0
 8006e7c:	468b      	mov	fp, r1
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2502      	movs	r5, #2
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	d17a      	bne.n	8006f7c <_dtoa_r+0x4c4>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1d3      	bne.n	8006e32 <_dtoa_r+0x37a>
 8006e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8082 	beq.w	8006f96 <_dtoa_r+0x4de>
 8006e92:	4b91      	ldr	r3, [pc, #580]	; (80070d8 <_dtoa_r+0x620>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	4650      	mov	r0, sl
 8006e98:	4659      	mov	r1, fp
 8006e9a:	f7f9 fdf7 	bl	8000a8c <__aeabi_dcmplt>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d079      	beq.n	8006f96 <_dtoa_r+0x4de>
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d076      	beq.n	8006f96 <_dtoa_r+0x4de>
 8006ea8:	9b02      	ldr	r3, [sp, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	dd36      	ble.n	8006f1c <_dtoa_r+0x464>
 8006eae:	9b00      	ldr	r3, [sp, #0]
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	4659      	mov	r1, fp
 8006eb4:	1e5f      	subs	r7, r3, #1
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4b88      	ldr	r3, [pc, #544]	; (80070dc <_dtoa_r+0x624>)
 8006eba:	f7f9 fb75 	bl	80005a8 <__aeabi_dmul>
 8006ebe:	9e02      	ldr	r6, [sp, #8]
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	468b      	mov	fp, r1
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f7f9 fb04 	bl	80004d4 <__aeabi_i2d>
 8006ecc:	4652      	mov	r2, sl
 8006ece:	465b      	mov	r3, fp
 8006ed0:	f7f9 fb6a 	bl	80005a8 <__aeabi_dmul>
 8006ed4:	4b82      	ldr	r3, [pc, #520]	; (80070e0 <_dtoa_r+0x628>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f7f9 f9b0 	bl	800023c <__adddf3>
 8006edc:	46d0      	mov	r8, sl
 8006ede:	46d9      	mov	r9, fp
 8006ee0:	4682      	mov	sl, r0
 8006ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ee6:	2e00      	cmp	r6, #0
 8006ee8:	d158      	bne.n	8006f9c <_dtoa_r+0x4e4>
 8006eea:	4b7e      	ldr	r3, [pc, #504]	; (80070e4 <_dtoa_r+0x62c>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	4640      	mov	r0, r8
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	f7f9 f9a1 	bl	8000238 <__aeabi_dsub>
 8006ef6:	4652      	mov	r2, sl
 8006ef8:	465b      	mov	r3, fp
 8006efa:	4680      	mov	r8, r0
 8006efc:	4689      	mov	r9, r1
 8006efe:	f7f9 fde3 	bl	8000ac8 <__aeabi_dcmpgt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f040 8295 	bne.w	8007432 <_dtoa_r+0x97a>
 8006f08:	4652      	mov	r2, sl
 8006f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f0e:	4640      	mov	r0, r8
 8006f10:	4649      	mov	r1, r9
 8006f12:	f7f9 fdbb 	bl	8000a8c <__aeabi_dcmplt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f040 8289 	bne.w	800742e <_dtoa_r+0x976>
 8006f1c:	ec5b ab19 	vmov	sl, fp, d9
 8006f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f2c0 8148 	blt.w	80071b8 <_dtoa_r+0x700>
 8006f28:	9a00      	ldr	r2, [sp, #0]
 8006f2a:	2a0e      	cmp	r2, #14
 8006f2c:	f300 8144 	bgt.w	80071b8 <_dtoa_r+0x700>
 8006f30:	4b67      	ldr	r3, [pc, #412]	; (80070d0 <_dtoa_r+0x618>)
 8006f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f280 80d5 	bge.w	80070ec <_dtoa_r+0x634>
 8006f42:	9b03      	ldr	r3, [sp, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f300 80d1 	bgt.w	80070ec <_dtoa_r+0x634>
 8006f4a:	f040 826f 	bne.w	800742c <_dtoa_r+0x974>
 8006f4e:	4b65      	ldr	r3, [pc, #404]	; (80070e4 <_dtoa_r+0x62c>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	4640      	mov	r0, r8
 8006f54:	4649      	mov	r1, r9
 8006f56:	f7f9 fb27 	bl	80005a8 <__aeabi_dmul>
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	465b      	mov	r3, fp
 8006f5e:	f7f9 fda9 	bl	8000ab4 <__aeabi_dcmpge>
 8006f62:	9e03      	ldr	r6, [sp, #12]
 8006f64:	4637      	mov	r7, r6
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f040 8245 	bne.w	80073f6 <_dtoa_r+0x93e>
 8006f6c:	9d01      	ldr	r5, [sp, #4]
 8006f6e:	2331      	movs	r3, #49	; 0x31
 8006f70:	f805 3b01 	strb.w	r3, [r5], #1
 8006f74:	9b00      	ldr	r3, [sp, #0]
 8006f76:	3301      	adds	r3, #1
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	e240      	b.n	80073fe <_dtoa_r+0x946>
 8006f7c:	07f2      	lsls	r2, r6, #31
 8006f7e:	d505      	bpl.n	8006f8c <_dtoa_r+0x4d4>
 8006f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f84:	f7f9 fb10 	bl	80005a8 <__aeabi_dmul>
 8006f88:	3501      	adds	r5, #1
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	1076      	asrs	r6, r6, #1
 8006f8e:	3708      	adds	r7, #8
 8006f90:	e777      	b.n	8006e82 <_dtoa_r+0x3ca>
 8006f92:	2502      	movs	r5, #2
 8006f94:	e779      	b.n	8006e8a <_dtoa_r+0x3d2>
 8006f96:	9f00      	ldr	r7, [sp, #0]
 8006f98:	9e03      	ldr	r6, [sp, #12]
 8006f9a:	e794      	b.n	8006ec6 <_dtoa_r+0x40e>
 8006f9c:	9901      	ldr	r1, [sp, #4]
 8006f9e:	4b4c      	ldr	r3, [pc, #304]	; (80070d0 <_dtoa_r+0x618>)
 8006fa0:	4431      	add	r1, r6
 8006fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8006fa4:	9908      	ldr	r1, [sp, #32]
 8006fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fae:	2900      	cmp	r1, #0
 8006fb0:	d043      	beq.n	800703a <_dtoa_r+0x582>
 8006fb2:	494d      	ldr	r1, [pc, #308]	; (80070e8 <_dtoa_r+0x630>)
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	f7f9 fc21 	bl	80007fc <__aeabi_ddiv>
 8006fba:	4652      	mov	r2, sl
 8006fbc:	465b      	mov	r3, fp
 8006fbe:	f7f9 f93b 	bl	8000238 <__aeabi_dsub>
 8006fc2:	9d01      	ldr	r5, [sp, #4]
 8006fc4:	4682      	mov	sl, r0
 8006fc6:	468b      	mov	fp, r1
 8006fc8:	4649      	mov	r1, r9
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f7f9 fd9c 	bl	8000b08 <__aeabi_d2iz>
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	f7f9 fa7f 	bl	80004d4 <__aeabi_i2d>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4640      	mov	r0, r8
 8006fdc:	4649      	mov	r1, r9
 8006fde:	f7f9 f92b 	bl	8000238 <__aeabi_dsub>
 8006fe2:	3630      	adds	r6, #48	; 0x30
 8006fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	465b      	mov	r3, fp
 8006fec:	4680      	mov	r8, r0
 8006fee:	4689      	mov	r9, r1
 8006ff0:	f7f9 fd4c 	bl	8000a8c <__aeabi_dcmplt>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d163      	bne.n	80070c0 <_dtoa_r+0x608>
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	4936      	ldr	r1, [pc, #216]	; (80070d8 <_dtoa_r+0x620>)
 8006ffe:	2000      	movs	r0, #0
 8007000:	f7f9 f91a 	bl	8000238 <__aeabi_dsub>
 8007004:	4652      	mov	r2, sl
 8007006:	465b      	mov	r3, fp
 8007008:	f7f9 fd40 	bl	8000a8c <__aeabi_dcmplt>
 800700c:	2800      	cmp	r0, #0
 800700e:	f040 80b5 	bne.w	800717c <_dtoa_r+0x6c4>
 8007012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007014:	429d      	cmp	r5, r3
 8007016:	d081      	beq.n	8006f1c <_dtoa_r+0x464>
 8007018:	4b30      	ldr	r3, [pc, #192]	; (80070dc <_dtoa_r+0x624>)
 800701a:	2200      	movs	r2, #0
 800701c:	4650      	mov	r0, sl
 800701e:	4659      	mov	r1, fp
 8007020:	f7f9 fac2 	bl	80005a8 <__aeabi_dmul>
 8007024:	4b2d      	ldr	r3, [pc, #180]	; (80070dc <_dtoa_r+0x624>)
 8007026:	4682      	mov	sl, r0
 8007028:	468b      	mov	fp, r1
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	2200      	movs	r2, #0
 8007030:	f7f9 faba 	bl	80005a8 <__aeabi_dmul>
 8007034:	4680      	mov	r8, r0
 8007036:	4689      	mov	r9, r1
 8007038:	e7c6      	b.n	8006fc8 <_dtoa_r+0x510>
 800703a:	4650      	mov	r0, sl
 800703c:	4659      	mov	r1, fp
 800703e:	f7f9 fab3 	bl	80005a8 <__aeabi_dmul>
 8007042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007044:	9d01      	ldr	r5, [sp, #4]
 8007046:	930f      	str	r3, [sp, #60]	; 0x3c
 8007048:	4682      	mov	sl, r0
 800704a:	468b      	mov	fp, r1
 800704c:	4649      	mov	r1, r9
 800704e:	4640      	mov	r0, r8
 8007050:	f7f9 fd5a 	bl	8000b08 <__aeabi_d2iz>
 8007054:	4606      	mov	r6, r0
 8007056:	f7f9 fa3d 	bl	80004d4 <__aeabi_i2d>
 800705a:	3630      	adds	r6, #48	; 0x30
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4640      	mov	r0, r8
 8007062:	4649      	mov	r1, r9
 8007064:	f7f9 f8e8 	bl	8000238 <__aeabi_dsub>
 8007068:	f805 6b01 	strb.w	r6, [r5], #1
 800706c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800706e:	429d      	cmp	r5, r3
 8007070:	4680      	mov	r8, r0
 8007072:	4689      	mov	r9, r1
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	d124      	bne.n	80070c4 <_dtoa_r+0x60c>
 800707a:	4b1b      	ldr	r3, [pc, #108]	; (80070e8 <_dtoa_r+0x630>)
 800707c:	4650      	mov	r0, sl
 800707e:	4659      	mov	r1, fp
 8007080:	f7f9 f8dc 	bl	800023c <__adddf3>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 fd1c 	bl	8000ac8 <__aeabi_dcmpgt>
 8007090:	2800      	cmp	r0, #0
 8007092:	d173      	bne.n	800717c <_dtoa_r+0x6c4>
 8007094:	4652      	mov	r2, sl
 8007096:	465b      	mov	r3, fp
 8007098:	4913      	ldr	r1, [pc, #76]	; (80070e8 <_dtoa_r+0x630>)
 800709a:	2000      	movs	r0, #0
 800709c:	f7f9 f8cc 	bl	8000238 <__aeabi_dsub>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 fcf0 	bl	8000a8c <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f43f af35 	beq.w	8006f1c <_dtoa_r+0x464>
 80070b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80070b4:	1e6b      	subs	r3, r5, #1
 80070b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070bc:	2b30      	cmp	r3, #48	; 0x30
 80070be:	d0f8      	beq.n	80070b2 <_dtoa_r+0x5fa>
 80070c0:	9700      	str	r7, [sp, #0]
 80070c2:	e049      	b.n	8007158 <_dtoa_r+0x6a0>
 80070c4:	4b05      	ldr	r3, [pc, #20]	; (80070dc <_dtoa_r+0x624>)
 80070c6:	f7f9 fa6f 	bl	80005a8 <__aeabi_dmul>
 80070ca:	4680      	mov	r8, r0
 80070cc:	4689      	mov	r9, r1
 80070ce:	e7bd      	b.n	800704c <_dtoa_r+0x594>
 80070d0:	080085b0 	.word	0x080085b0
 80070d4:	08008588 	.word	0x08008588
 80070d8:	3ff00000 	.word	0x3ff00000
 80070dc:	40240000 	.word	0x40240000
 80070e0:	401c0000 	.word	0x401c0000
 80070e4:	40140000 	.word	0x40140000
 80070e8:	3fe00000 	.word	0x3fe00000
 80070ec:	9d01      	ldr	r5, [sp, #4]
 80070ee:	4656      	mov	r6, sl
 80070f0:	465f      	mov	r7, fp
 80070f2:	4642      	mov	r2, r8
 80070f4:	464b      	mov	r3, r9
 80070f6:	4630      	mov	r0, r6
 80070f8:	4639      	mov	r1, r7
 80070fa:	f7f9 fb7f 	bl	80007fc <__aeabi_ddiv>
 80070fe:	f7f9 fd03 	bl	8000b08 <__aeabi_d2iz>
 8007102:	4682      	mov	sl, r0
 8007104:	f7f9 f9e6 	bl	80004d4 <__aeabi_i2d>
 8007108:	4642      	mov	r2, r8
 800710a:	464b      	mov	r3, r9
 800710c:	f7f9 fa4c 	bl	80005a8 <__aeabi_dmul>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4630      	mov	r0, r6
 8007116:	4639      	mov	r1, r7
 8007118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800711c:	f7f9 f88c 	bl	8000238 <__aeabi_dsub>
 8007120:	f805 6b01 	strb.w	r6, [r5], #1
 8007124:	9e01      	ldr	r6, [sp, #4]
 8007126:	9f03      	ldr	r7, [sp, #12]
 8007128:	1bae      	subs	r6, r5, r6
 800712a:	42b7      	cmp	r7, r6
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	d135      	bne.n	800719e <_dtoa_r+0x6e6>
 8007132:	f7f9 f883 	bl	800023c <__adddf3>
 8007136:	4642      	mov	r2, r8
 8007138:	464b      	mov	r3, r9
 800713a:	4606      	mov	r6, r0
 800713c:	460f      	mov	r7, r1
 800713e:	f7f9 fcc3 	bl	8000ac8 <__aeabi_dcmpgt>
 8007142:	b9d0      	cbnz	r0, 800717a <_dtoa_r+0x6c2>
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	4630      	mov	r0, r6
 800714a:	4639      	mov	r1, r7
 800714c:	f7f9 fc94 	bl	8000a78 <__aeabi_dcmpeq>
 8007150:	b110      	cbz	r0, 8007158 <_dtoa_r+0x6a0>
 8007152:	f01a 0f01 	tst.w	sl, #1
 8007156:	d110      	bne.n	800717a <_dtoa_r+0x6c2>
 8007158:	4620      	mov	r0, r4
 800715a:	ee18 1a10 	vmov	r1, s16
 800715e:	f000 fb2f 	bl	80077c0 <_Bfree>
 8007162:	2300      	movs	r3, #0
 8007164:	9800      	ldr	r0, [sp, #0]
 8007166:	702b      	strb	r3, [r5, #0]
 8007168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800716a:	3001      	adds	r0, #1
 800716c:	6018      	str	r0, [r3, #0]
 800716e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007170:	2b00      	cmp	r3, #0
 8007172:	f43f acf1 	beq.w	8006b58 <_dtoa_r+0xa0>
 8007176:	601d      	str	r5, [r3, #0]
 8007178:	e4ee      	b.n	8006b58 <_dtoa_r+0xa0>
 800717a:	9f00      	ldr	r7, [sp, #0]
 800717c:	462b      	mov	r3, r5
 800717e:	461d      	mov	r5, r3
 8007180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007184:	2a39      	cmp	r2, #57	; 0x39
 8007186:	d106      	bne.n	8007196 <_dtoa_r+0x6de>
 8007188:	9a01      	ldr	r2, [sp, #4]
 800718a:	429a      	cmp	r2, r3
 800718c:	d1f7      	bne.n	800717e <_dtoa_r+0x6c6>
 800718e:	9901      	ldr	r1, [sp, #4]
 8007190:	2230      	movs	r2, #48	; 0x30
 8007192:	3701      	adds	r7, #1
 8007194:	700a      	strb	r2, [r1, #0]
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	3201      	adds	r2, #1
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	e790      	b.n	80070c0 <_dtoa_r+0x608>
 800719e:	4ba6      	ldr	r3, [pc, #664]	; (8007438 <_dtoa_r+0x980>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	f7f9 fa01 	bl	80005a8 <__aeabi_dmul>
 80071a6:	2200      	movs	r2, #0
 80071a8:	2300      	movs	r3, #0
 80071aa:	4606      	mov	r6, r0
 80071ac:	460f      	mov	r7, r1
 80071ae:	f7f9 fc63 	bl	8000a78 <__aeabi_dcmpeq>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d09d      	beq.n	80070f2 <_dtoa_r+0x63a>
 80071b6:	e7cf      	b.n	8007158 <_dtoa_r+0x6a0>
 80071b8:	9a08      	ldr	r2, [sp, #32]
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	f000 80d7 	beq.w	800736e <_dtoa_r+0x8b6>
 80071c0:	9a06      	ldr	r2, [sp, #24]
 80071c2:	2a01      	cmp	r2, #1
 80071c4:	f300 80ba 	bgt.w	800733c <_dtoa_r+0x884>
 80071c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ca:	2a00      	cmp	r2, #0
 80071cc:	f000 80b2 	beq.w	8007334 <_dtoa_r+0x87c>
 80071d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071d4:	9e07      	ldr	r6, [sp, #28]
 80071d6:	9d04      	ldr	r5, [sp, #16]
 80071d8:	9a04      	ldr	r2, [sp, #16]
 80071da:	441a      	add	r2, r3
 80071dc:	9204      	str	r2, [sp, #16]
 80071de:	9a05      	ldr	r2, [sp, #20]
 80071e0:	2101      	movs	r1, #1
 80071e2:	441a      	add	r2, r3
 80071e4:	4620      	mov	r0, r4
 80071e6:	9205      	str	r2, [sp, #20]
 80071e8:	f000 fba2 	bl	8007930 <__i2b>
 80071ec:	4607      	mov	r7, r0
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	dd0c      	ble.n	800720c <_dtoa_r+0x754>
 80071f2:	9b05      	ldr	r3, [sp, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dd09      	ble.n	800720c <_dtoa_r+0x754>
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	9a04      	ldr	r2, [sp, #16]
 80071fc:	bfa8      	it	ge
 80071fe:	462b      	movge	r3, r5
 8007200:	1ad2      	subs	r2, r2, r3
 8007202:	9204      	str	r2, [sp, #16]
 8007204:	9a05      	ldr	r2, [sp, #20]
 8007206:	1aed      	subs	r5, r5, r3
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	9305      	str	r3, [sp, #20]
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	b31b      	cbz	r3, 8007258 <_dtoa_r+0x7a0>
 8007210:	9b08      	ldr	r3, [sp, #32]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80af 	beq.w	8007376 <_dtoa_r+0x8be>
 8007218:	2e00      	cmp	r6, #0
 800721a:	dd13      	ble.n	8007244 <_dtoa_r+0x78c>
 800721c:	4639      	mov	r1, r7
 800721e:	4632      	mov	r2, r6
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fc45 	bl	8007ab0 <__pow5mult>
 8007226:	ee18 2a10 	vmov	r2, s16
 800722a:	4601      	mov	r1, r0
 800722c:	4607      	mov	r7, r0
 800722e:	4620      	mov	r0, r4
 8007230:	f000 fb94 	bl	800795c <__multiply>
 8007234:	ee18 1a10 	vmov	r1, s16
 8007238:	4680      	mov	r8, r0
 800723a:	4620      	mov	r0, r4
 800723c:	f000 fac0 	bl	80077c0 <_Bfree>
 8007240:	ee08 8a10 	vmov	s16, r8
 8007244:	9b07      	ldr	r3, [sp, #28]
 8007246:	1b9a      	subs	r2, r3, r6
 8007248:	d006      	beq.n	8007258 <_dtoa_r+0x7a0>
 800724a:	ee18 1a10 	vmov	r1, s16
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fc2e 	bl	8007ab0 <__pow5mult>
 8007254:	ee08 0a10 	vmov	s16, r0
 8007258:	2101      	movs	r1, #1
 800725a:	4620      	mov	r0, r4
 800725c:	f000 fb68 	bl	8007930 <__i2b>
 8007260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	4606      	mov	r6, r0
 8007266:	f340 8088 	ble.w	800737a <_dtoa_r+0x8c2>
 800726a:	461a      	mov	r2, r3
 800726c:	4601      	mov	r1, r0
 800726e:	4620      	mov	r0, r4
 8007270:	f000 fc1e 	bl	8007ab0 <__pow5mult>
 8007274:	9b06      	ldr	r3, [sp, #24]
 8007276:	2b01      	cmp	r3, #1
 8007278:	4606      	mov	r6, r0
 800727a:	f340 8081 	ble.w	8007380 <_dtoa_r+0x8c8>
 800727e:	f04f 0800 	mov.w	r8, #0
 8007282:	6933      	ldr	r3, [r6, #16]
 8007284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007288:	6918      	ldr	r0, [r3, #16]
 800728a:	f000 fb01 	bl	8007890 <__hi0bits>
 800728e:	f1c0 0020 	rsb	r0, r0, #32
 8007292:	9b05      	ldr	r3, [sp, #20]
 8007294:	4418      	add	r0, r3
 8007296:	f010 001f 	ands.w	r0, r0, #31
 800729a:	f000 8092 	beq.w	80073c2 <_dtoa_r+0x90a>
 800729e:	f1c0 0320 	rsb	r3, r0, #32
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	f340 808a 	ble.w	80073bc <_dtoa_r+0x904>
 80072a8:	f1c0 001c 	rsb	r0, r0, #28
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	4403      	add	r3, r0
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	9b05      	ldr	r3, [sp, #20]
 80072b4:	4403      	add	r3, r0
 80072b6:	4405      	add	r5, r0
 80072b8:	9305      	str	r3, [sp, #20]
 80072ba:	9b04      	ldr	r3, [sp, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dd07      	ble.n	80072d0 <_dtoa_r+0x818>
 80072c0:	ee18 1a10 	vmov	r1, s16
 80072c4:	461a      	mov	r2, r3
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 fc4c 	bl	8007b64 <__lshift>
 80072cc:	ee08 0a10 	vmov	s16, r0
 80072d0:	9b05      	ldr	r3, [sp, #20]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dd05      	ble.n	80072e2 <_dtoa_r+0x82a>
 80072d6:	4631      	mov	r1, r6
 80072d8:	461a      	mov	r2, r3
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fc42 	bl	8007b64 <__lshift>
 80072e0:	4606      	mov	r6, r0
 80072e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d06e      	beq.n	80073c6 <_dtoa_r+0x90e>
 80072e8:	ee18 0a10 	vmov	r0, s16
 80072ec:	4631      	mov	r1, r6
 80072ee:	f000 fca9 	bl	8007c44 <__mcmp>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	da67      	bge.n	80073c6 <_dtoa_r+0x90e>
 80072f6:	9b00      	ldr	r3, [sp, #0]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	ee18 1a10 	vmov	r1, s16
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	220a      	movs	r2, #10
 8007302:	2300      	movs	r3, #0
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fa7d 	bl	8007804 <__multadd>
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	ee08 0a10 	vmov	s16, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 81b1 	beq.w	8007678 <_dtoa_r+0xbc0>
 8007316:	2300      	movs	r3, #0
 8007318:	4639      	mov	r1, r7
 800731a:	220a      	movs	r2, #10
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fa71 	bl	8007804 <__multadd>
 8007322:	9b02      	ldr	r3, [sp, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	4607      	mov	r7, r0
 8007328:	f300 808e 	bgt.w	8007448 <_dtoa_r+0x990>
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	2b02      	cmp	r3, #2
 8007330:	dc51      	bgt.n	80073d6 <_dtoa_r+0x91e>
 8007332:	e089      	b.n	8007448 <_dtoa_r+0x990>
 8007334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800733a:	e74b      	b.n	80071d4 <_dtoa_r+0x71c>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	1e5e      	subs	r6, r3, #1
 8007340:	9b07      	ldr	r3, [sp, #28]
 8007342:	42b3      	cmp	r3, r6
 8007344:	bfbf      	itttt	lt
 8007346:	9b07      	ldrlt	r3, [sp, #28]
 8007348:	9607      	strlt	r6, [sp, #28]
 800734a:	1af2      	sublt	r2, r6, r3
 800734c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800734e:	bfb6      	itet	lt
 8007350:	189b      	addlt	r3, r3, r2
 8007352:	1b9e      	subge	r6, r3, r6
 8007354:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	bfb8      	it	lt
 800735a:	2600      	movlt	r6, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	bfb7      	itett	lt
 8007360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007368:	1a9d      	sublt	r5, r3, r2
 800736a:	2300      	movlt	r3, #0
 800736c:	e734      	b.n	80071d8 <_dtoa_r+0x720>
 800736e:	9e07      	ldr	r6, [sp, #28]
 8007370:	9d04      	ldr	r5, [sp, #16]
 8007372:	9f08      	ldr	r7, [sp, #32]
 8007374:	e73b      	b.n	80071ee <_dtoa_r+0x736>
 8007376:	9a07      	ldr	r2, [sp, #28]
 8007378:	e767      	b.n	800724a <_dtoa_r+0x792>
 800737a:	9b06      	ldr	r3, [sp, #24]
 800737c:	2b01      	cmp	r3, #1
 800737e:	dc18      	bgt.n	80073b2 <_dtoa_r+0x8fa>
 8007380:	f1ba 0f00 	cmp.w	sl, #0
 8007384:	d115      	bne.n	80073b2 <_dtoa_r+0x8fa>
 8007386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800738a:	b993      	cbnz	r3, 80073b2 <_dtoa_r+0x8fa>
 800738c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007390:	0d1b      	lsrs	r3, r3, #20
 8007392:	051b      	lsls	r3, r3, #20
 8007394:	b183      	cbz	r3, 80073b8 <_dtoa_r+0x900>
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	3301      	adds	r3, #1
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	9b05      	ldr	r3, [sp, #20]
 800739e:	3301      	adds	r3, #1
 80073a0:	9305      	str	r3, [sp, #20]
 80073a2:	f04f 0801 	mov.w	r8, #1
 80073a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f47f af6a 	bne.w	8007282 <_dtoa_r+0x7ca>
 80073ae:	2001      	movs	r0, #1
 80073b0:	e76f      	b.n	8007292 <_dtoa_r+0x7da>
 80073b2:	f04f 0800 	mov.w	r8, #0
 80073b6:	e7f6      	b.n	80073a6 <_dtoa_r+0x8ee>
 80073b8:	4698      	mov	r8, r3
 80073ba:	e7f4      	b.n	80073a6 <_dtoa_r+0x8ee>
 80073bc:	f43f af7d 	beq.w	80072ba <_dtoa_r+0x802>
 80073c0:	4618      	mov	r0, r3
 80073c2:	301c      	adds	r0, #28
 80073c4:	e772      	b.n	80072ac <_dtoa_r+0x7f4>
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dc37      	bgt.n	800743c <_dtoa_r+0x984>
 80073cc:	9b06      	ldr	r3, [sp, #24]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	dd34      	ble.n	800743c <_dtoa_r+0x984>
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	9302      	str	r3, [sp, #8]
 80073d6:	9b02      	ldr	r3, [sp, #8]
 80073d8:	b96b      	cbnz	r3, 80073f6 <_dtoa_r+0x93e>
 80073da:	4631      	mov	r1, r6
 80073dc:	2205      	movs	r2, #5
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 fa10 	bl	8007804 <__multadd>
 80073e4:	4601      	mov	r1, r0
 80073e6:	4606      	mov	r6, r0
 80073e8:	ee18 0a10 	vmov	r0, s16
 80073ec:	f000 fc2a 	bl	8007c44 <__mcmp>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f73f adbb 	bgt.w	8006f6c <_dtoa_r+0x4b4>
 80073f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f8:	9d01      	ldr	r5, [sp, #4]
 80073fa:	43db      	mvns	r3, r3
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	f04f 0800 	mov.w	r8, #0
 8007402:	4631      	mov	r1, r6
 8007404:	4620      	mov	r0, r4
 8007406:	f000 f9db 	bl	80077c0 <_Bfree>
 800740a:	2f00      	cmp	r7, #0
 800740c:	f43f aea4 	beq.w	8007158 <_dtoa_r+0x6a0>
 8007410:	f1b8 0f00 	cmp.w	r8, #0
 8007414:	d005      	beq.n	8007422 <_dtoa_r+0x96a>
 8007416:	45b8      	cmp	r8, r7
 8007418:	d003      	beq.n	8007422 <_dtoa_r+0x96a>
 800741a:	4641      	mov	r1, r8
 800741c:	4620      	mov	r0, r4
 800741e:	f000 f9cf 	bl	80077c0 <_Bfree>
 8007422:	4639      	mov	r1, r7
 8007424:	4620      	mov	r0, r4
 8007426:	f000 f9cb 	bl	80077c0 <_Bfree>
 800742a:	e695      	b.n	8007158 <_dtoa_r+0x6a0>
 800742c:	2600      	movs	r6, #0
 800742e:	4637      	mov	r7, r6
 8007430:	e7e1      	b.n	80073f6 <_dtoa_r+0x93e>
 8007432:	9700      	str	r7, [sp, #0]
 8007434:	4637      	mov	r7, r6
 8007436:	e599      	b.n	8006f6c <_dtoa_r+0x4b4>
 8007438:	40240000 	.word	0x40240000
 800743c:	9b08      	ldr	r3, [sp, #32]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80ca 	beq.w	80075d8 <_dtoa_r+0xb20>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	9302      	str	r3, [sp, #8]
 8007448:	2d00      	cmp	r5, #0
 800744a:	dd05      	ble.n	8007458 <_dtoa_r+0x9a0>
 800744c:	4639      	mov	r1, r7
 800744e:	462a      	mov	r2, r5
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fb87 	bl	8007b64 <__lshift>
 8007456:	4607      	mov	r7, r0
 8007458:	f1b8 0f00 	cmp.w	r8, #0
 800745c:	d05b      	beq.n	8007516 <_dtoa_r+0xa5e>
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4620      	mov	r0, r4
 8007462:	f000 f96d 	bl	8007740 <_Balloc>
 8007466:	4605      	mov	r5, r0
 8007468:	b928      	cbnz	r0, 8007476 <_dtoa_r+0x9be>
 800746a:	4b87      	ldr	r3, [pc, #540]	; (8007688 <_dtoa_r+0xbd0>)
 800746c:	4602      	mov	r2, r0
 800746e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007472:	f7ff bb3b 	b.w	8006aec <_dtoa_r+0x34>
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	3202      	adds	r2, #2
 800747a:	0092      	lsls	r2, r2, #2
 800747c:	f107 010c 	add.w	r1, r7, #12
 8007480:	300c      	adds	r0, #12
 8007482:	f7fe f9ef 	bl	8005864 <memcpy>
 8007486:	2201      	movs	r2, #1
 8007488:	4629      	mov	r1, r5
 800748a:	4620      	mov	r0, r4
 800748c:	f000 fb6a 	bl	8007b64 <__lshift>
 8007490:	9b01      	ldr	r3, [sp, #4]
 8007492:	f103 0901 	add.w	r9, r3, #1
 8007496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800749a:	4413      	add	r3, r2
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	f00a 0301 	and.w	r3, sl, #1
 80074a2:	46b8      	mov	r8, r7
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	4607      	mov	r7, r0
 80074a8:	4631      	mov	r1, r6
 80074aa:	ee18 0a10 	vmov	r0, s16
 80074ae:	f7ff fa75 	bl	800699c <quorem>
 80074b2:	4641      	mov	r1, r8
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80074ba:	ee18 0a10 	vmov	r0, s16
 80074be:	f000 fbc1 	bl	8007c44 <__mcmp>
 80074c2:	463a      	mov	r2, r7
 80074c4:	9003      	str	r0, [sp, #12]
 80074c6:	4631      	mov	r1, r6
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fbd7 	bl	8007c7c <__mdiff>
 80074ce:	68c2      	ldr	r2, [r0, #12]
 80074d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80074d4:	4605      	mov	r5, r0
 80074d6:	bb02      	cbnz	r2, 800751a <_dtoa_r+0xa62>
 80074d8:	4601      	mov	r1, r0
 80074da:	ee18 0a10 	vmov	r0, s16
 80074de:	f000 fbb1 	bl	8007c44 <__mcmp>
 80074e2:	4602      	mov	r2, r0
 80074e4:	4629      	mov	r1, r5
 80074e6:	4620      	mov	r0, r4
 80074e8:	9207      	str	r2, [sp, #28]
 80074ea:	f000 f969 	bl	80077c0 <_Bfree>
 80074ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80074f2:	ea43 0102 	orr.w	r1, r3, r2
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	430b      	orrs	r3, r1
 80074fa:	464d      	mov	r5, r9
 80074fc:	d10f      	bne.n	800751e <_dtoa_r+0xa66>
 80074fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007502:	d02a      	beq.n	800755a <_dtoa_r+0xaa2>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	dd02      	ble.n	8007510 <_dtoa_r+0xa58>
 800750a:	9b02      	ldr	r3, [sp, #8]
 800750c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007510:	f88b a000 	strb.w	sl, [fp]
 8007514:	e775      	b.n	8007402 <_dtoa_r+0x94a>
 8007516:	4638      	mov	r0, r7
 8007518:	e7ba      	b.n	8007490 <_dtoa_r+0x9d8>
 800751a:	2201      	movs	r2, #1
 800751c:	e7e2      	b.n	80074e4 <_dtoa_r+0xa2c>
 800751e:	9b03      	ldr	r3, [sp, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	db04      	blt.n	800752e <_dtoa_r+0xa76>
 8007524:	9906      	ldr	r1, [sp, #24]
 8007526:	430b      	orrs	r3, r1
 8007528:	9904      	ldr	r1, [sp, #16]
 800752a:	430b      	orrs	r3, r1
 800752c:	d122      	bne.n	8007574 <_dtoa_r+0xabc>
 800752e:	2a00      	cmp	r2, #0
 8007530:	ddee      	ble.n	8007510 <_dtoa_r+0xa58>
 8007532:	ee18 1a10 	vmov	r1, s16
 8007536:	2201      	movs	r2, #1
 8007538:	4620      	mov	r0, r4
 800753a:	f000 fb13 	bl	8007b64 <__lshift>
 800753e:	4631      	mov	r1, r6
 8007540:	ee08 0a10 	vmov	s16, r0
 8007544:	f000 fb7e 	bl	8007c44 <__mcmp>
 8007548:	2800      	cmp	r0, #0
 800754a:	dc03      	bgt.n	8007554 <_dtoa_r+0xa9c>
 800754c:	d1e0      	bne.n	8007510 <_dtoa_r+0xa58>
 800754e:	f01a 0f01 	tst.w	sl, #1
 8007552:	d0dd      	beq.n	8007510 <_dtoa_r+0xa58>
 8007554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007558:	d1d7      	bne.n	800750a <_dtoa_r+0xa52>
 800755a:	2339      	movs	r3, #57	; 0x39
 800755c:	f88b 3000 	strb.w	r3, [fp]
 8007560:	462b      	mov	r3, r5
 8007562:	461d      	mov	r5, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800756a:	2a39      	cmp	r2, #57	; 0x39
 800756c:	d071      	beq.n	8007652 <_dtoa_r+0xb9a>
 800756e:	3201      	adds	r2, #1
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	e746      	b.n	8007402 <_dtoa_r+0x94a>
 8007574:	2a00      	cmp	r2, #0
 8007576:	dd07      	ble.n	8007588 <_dtoa_r+0xad0>
 8007578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800757c:	d0ed      	beq.n	800755a <_dtoa_r+0xaa2>
 800757e:	f10a 0301 	add.w	r3, sl, #1
 8007582:	f88b 3000 	strb.w	r3, [fp]
 8007586:	e73c      	b.n	8007402 <_dtoa_r+0x94a>
 8007588:	9b05      	ldr	r3, [sp, #20]
 800758a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800758e:	4599      	cmp	r9, r3
 8007590:	d047      	beq.n	8007622 <_dtoa_r+0xb6a>
 8007592:	ee18 1a10 	vmov	r1, s16
 8007596:	2300      	movs	r3, #0
 8007598:	220a      	movs	r2, #10
 800759a:	4620      	mov	r0, r4
 800759c:	f000 f932 	bl	8007804 <__multadd>
 80075a0:	45b8      	cmp	r8, r7
 80075a2:	ee08 0a10 	vmov	s16, r0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	f04f 020a 	mov.w	r2, #10
 80075ae:	4641      	mov	r1, r8
 80075b0:	4620      	mov	r0, r4
 80075b2:	d106      	bne.n	80075c2 <_dtoa_r+0xb0a>
 80075b4:	f000 f926 	bl	8007804 <__multadd>
 80075b8:	4680      	mov	r8, r0
 80075ba:	4607      	mov	r7, r0
 80075bc:	f109 0901 	add.w	r9, r9, #1
 80075c0:	e772      	b.n	80074a8 <_dtoa_r+0x9f0>
 80075c2:	f000 f91f 	bl	8007804 <__multadd>
 80075c6:	4639      	mov	r1, r7
 80075c8:	4680      	mov	r8, r0
 80075ca:	2300      	movs	r3, #0
 80075cc:	220a      	movs	r2, #10
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 f918 	bl	8007804 <__multadd>
 80075d4:	4607      	mov	r7, r0
 80075d6:	e7f1      	b.n	80075bc <_dtoa_r+0xb04>
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	9302      	str	r3, [sp, #8]
 80075dc:	9d01      	ldr	r5, [sp, #4]
 80075de:	ee18 0a10 	vmov	r0, s16
 80075e2:	4631      	mov	r1, r6
 80075e4:	f7ff f9da 	bl	800699c <quorem>
 80075e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	f805 ab01 	strb.w	sl, [r5], #1
 80075f2:	1aea      	subs	r2, r5, r3
 80075f4:	9b02      	ldr	r3, [sp, #8]
 80075f6:	4293      	cmp	r3, r2
 80075f8:	dd09      	ble.n	800760e <_dtoa_r+0xb56>
 80075fa:	ee18 1a10 	vmov	r1, s16
 80075fe:	2300      	movs	r3, #0
 8007600:	220a      	movs	r2, #10
 8007602:	4620      	mov	r0, r4
 8007604:	f000 f8fe 	bl	8007804 <__multadd>
 8007608:	ee08 0a10 	vmov	s16, r0
 800760c:	e7e7      	b.n	80075de <_dtoa_r+0xb26>
 800760e:	9b02      	ldr	r3, [sp, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	bfc8      	it	gt
 8007614:	461d      	movgt	r5, r3
 8007616:	9b01      	ldr	r3, [sp, #4]
 8007618:	bfd8      	it	le
 800761a:	2501      	movle	r5, #1
 800761c:	441d      	add	r5, r3
 800761e:	f04f 0800 	mov.w	r8, #0
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	2201      	movs	r2, #1
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fa9b 	bl	8007b64 <__lshift>
 800762e:	4631      	mov	r1, r6
 8007630:	ee08 0a10 	vmov	s16, r0
 8007634:	f000 fb06 	bl	8007c44 <__mcmp>
 8007638:	2800      	cmp	r0, #0
 800763a:	dc91      	bgt.n	8007560 <_dtoa_r+0xaa8>
 800763c:	d102      	bne.n	8007644 <_dtoa_r+0xb8c>
 800763e:	f01a 0f01 	tst.w	sl, #1
 8007642:	d18d      	bne.n	8007560 <_dtoa_r+0xaa8>
 8007644:	462b      	mov	r3, r5
 8007646:	461d      	mov	r5, r3
 8007648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800764c:	2a30      	cmp	r2, #48	; 0x30
 800764e:	d0fa      	beq.n	8007646 <_dtoa_r+0xb8e>
 8007650:	e6d7      	b.n	8007402 <_dtoa_r+0x94a>
 8007652:	9a01      	ldr	r2, [sp, #4]
 8007654:	429a      	cmp	r2, r3
 8007656:	d184      	bne.n	8007562 <_dtoa_r+0xaaa>
 8007658:	9b00      	ldr	r3, [sp, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	2331      	movs	r3, #49	; 0x31
 8007660:	7013      	strb	r3, [r2, #0]
 8007662:	e6ce      	b.n	8007402 <_dtoa_r+0x94a>
 8007664:	4b09      	ldr	r3, [pc, #36]	; (800768c <_dtoa_r+0xbd4>)
 8007666:	f7ff ba95 	b.w	8006b94 <_dtoa_r+0xdc>
 800766a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800766c:	2b00      	cmp	r3, #0
 800766e:	f47f aa6e 	bne.w	8006b4e <_dtoa_r+0x96>
 8007672:	4b07      	ldr	r3, [pc, #28]	; (8007690 <_dtoa_r+0xbd8>)
 8007674:	f7ff ba8e 	b.w	8006b94 <_dtoa_r+0xdc>
 8007678:	9b02      	ldr	r3, [sp, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	dcae      	bgt.n	80075dc <_dtoa_r+0xb24>
 800767e:	9b06      	ldr	r3, [sp, #24]
 8007680:	2b02      	cmp	r3, #2
 8007682:	f73f aea8 	bgt.w	80073d6 <_dtoa_r+0x91e>
 8007686:	e7a9      	b.n	80075dc <_dtoa_r+0xb24>
 8007688:	0800850d 	.word	0x0800850d
 800768c:	0800832d 	.word	0x0800832d
 8007690:	0800848e 	.word	0x0800848e

08007694 <_fstat_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d07      	ldr	r5, [pc, #28]	; (80076b4 <_fstat_r+0x20>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	f7f9 ff48 	bl	8001536 <_fstat>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d102      	bne.n	80076b0 <_fstat_r+0x1c>
 80076aa:	682b      	ldr	r3, [r5, #0]
 80076ac:	b103      	cbz	r3, 80076b0 <_fstat_r+0x1c>
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	bd38      	pop	{r3, r4, r5, pc}
 80076b2:	bf00      	nop
 80076b4:	200002ec 	.word	0x200002ec

080076b8 <_isatty_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d06      	ldr	r5, [pc, #24]	; (80076d4 <_isatty_r+0x1c>)
 80076bc:	2300      	movs	r3, #0
 80076be:	4604      	mov	r4, r0
 80076c0:	4608      	mov	r0, r1
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	f7f9 ff47 	bl	8001556 <_isatty>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_isatty_r+0x1a>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_isatty_r+0x1a>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	200002ec 	.word	0x200002ec

080076d8 <_localeconv_r>:
 80076d8:	4800      	ldr	r0, [pc, #0]	; (80076dc <_localeconv_r+0x4>)
 80076da:	4770      	bx	lr
 80076dc:	20000168 	.word	0x20000168

080076e0 <_lseek_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4d07      	ldr	r5, [pc, #28]	; (8007700 <_lseek_r+0x20>)
 80076e4:	4604      	mov	r4, r0
 80076e6:	4608      	mov	r0, r1
 80076e8:	4611      	mov	r1, r2
 80076ea:	2200      	movs	r2, #0
 80076ec:	602a      	str	r2, [r5, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	f7f9 ff3c 	bl	800156c <_lseek>
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	d102      	bne.n	80076fe <_lseek_r+0x1e>
 80076f8:	682b      	ldr	r3, [r5, #0]
 80076fa:	b103      	cbz	r3, 80076fe <_lseek_r+0x1e>
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	bd38      	pop	{r3, r4, r5, pc}
 8007700:	200002ec 	.word	0x200002ec

08007704 <__ascii_mbtowc>:
 8007704:	b082      	sub	sp, #8
 8007706:	b901      	cbnz	r1, 800770a <__ascii_mbtowc+0x6>
 8007708:	a901      	add	r1, sp, #4
 800770a:	b142      	cbz	r2, 800771e <__ascii_mbtowc+0x1a>
 800770c:	b14b      	cbz	r3, 8007722 <__ascii_mbtowc+0x1e>
 800770e:	7813      	ldrb	r3, [r2, #0]
 8007710:	600b      	str	r3, [r1, #0]
 8007712:	7812      	ldrb	r2, [r2, #0]
 8007714:	1e10      	subs	r0, r2, #0
 8007716:	bf18      	it	ne
 8007718:	2001      	movne	r0, #1
 800771a:	b002      	add	sp, #8
 800771c:	4770      	bx	lr
 800771e:	4610      	mov	r0, r2
 8007720:	e7fb      	b.n	800771a <__ascii_mbtowc+0x16>
 8007722:	f06f 0001 	mvn.w	r0, #1
 8007726:	e7f8      	b.n	800771a <__ascii_mbtowc+0x16>

08007728 <__malloc_lock>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__malloc_lock+0x8>)
 800772a:	f7fe b824 	b.w	8005776 <__retarget_lock_acquire_recursive>
 800772e:	bf00      	nop
 8007730:	200002e0 	.word	0x200002e0

08007734 <__malloc_unlock>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__malloc_unlock+0x8>)
 8007736:	f7fe b81f 	b.w	8005778 <__retarget_lock_release_recursive>
 800773a:	bf00      	nop
 800773c:	200002e0 	.word	0x200002e0

08007740 <_Balloc>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007744:	4604      	mov	r4, r0
 8007746:	460d      	mov	r5, r1
 8007748:	b976      	cbnz	r6, 8007768 <_Balloc+0x28>
 800774a:	2010      	movs	r0, #16
 800774c:	f7fe f87a 	bl	8005844 <malloc>
 8007750:	4602      	mov	r2, r0
 8007752:	6260      	str	r0, [r4, #36]	; 0x24
 8007754:	b920      	cbnz	r0, 8007760 <_Balloc+0x20>
 8007756:	4b18      	ldr	r3, [pc, #96]	; (80077b8 <_Balloc+0x78>)
 8007758:	4818      	ldr	r0, [pc, #96]	; (80077bc <_Balloc+0x7c>)
 800775a:	2166      	movs	r1, #102	; 0x66
 800775c:	f7ff f8f0 	bl	8006940 <__assert_func>
 8007760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007764:	6006      	str	r6, [r0, #0]
 8007766:	60c6      	str	r6, [r0, #12]
 8007768:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800776a:	68f3      	ldr	r3, [r6, #12]
 800776c:	b183      	cbz	r3, 8007790 <_Balloc+0x50>
 800776e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007776:	b9b8      	cbnz	r0, 80077a8 <_Balloc+0x68>
 8007778:	2101      	movs	r1, #1
 800777a:	fa01 f605 	lsl.w	r6, r1, r5
 800777e:	1d72      	adds	r2, r6, #5
 8007780:	0092      	lsls	r2, r2, #2
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fb60 	bl	8007e48 <_calloc_r>
 8007788:	b160      	cbz	r0, 80077a4 <_Balloc+0x64>
 800778a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800778e:	e00e      	b.n	80077ae <_Balloc+0x6e>
 8007790:	2221      	movs	r2, #33	; 0x21
 8007792:	2104      	movs	r1, #4
 8007794:	4620      	mov	r0, r4
 8007796:	f000 fb57 	bl	8007e48 <_calloc_r>
 800779a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800779c:	60f0      	str	r0, [r6, #12]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e4      	bne.n	800776e <_Balloc+0x2e>
 80077a4:	2000      	movs	r0, #0
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	6802      	ldr	r2, [r0, #0]
 80077aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ae:	2300      	movs	r3, #0
 80077b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077b4:	e7f7      	b.n	80077a6 <_Balloc+0x66>
 80077b6:	bf00      	nop
 80077b8:	0800849b 	.word	0x0800849b
 80077bc:	08008528 	.word	0x08008528

080077c0 <_Bfree>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077c4:	4605      	mov	r5, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	b976      	cbnz	r6, 80077e8 <_Bfree+0x28>
 80077ca:	2010      	movs	r0, #16
 80077cc:	f7fe f83a 	bl	8005844 <malloc>
 80077d0:	4602      	mov	r2, r0
 80077d2:	6268      	str	r0, [r5, #36]	; 0x24
 80077d4:	b920      	cbnz	r0, 80077e0 <_Bfree+0x20>
 80077d6:	4b09      	ldr	r3, [pc, #36]	; (80077fc <_Bfree+0x3c>)
 80077d8:	4809      	ldr	r0, [pc, #36]	; (8007800 <_Bfree+0x40>)
 80077da:	218a      	movs	r1, #138	; 0x8a
 80077dc:	f7ff f8b0 	bl	8006940 <__assert_func>
 80077e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077e4:	6006      	str	r6, [r0, #0]
 80077e6:	60c6      	str	r6, [r0, #12]
 80077e8:	b13c      	cbz	r4, 80077fa <_Bfree+0x3a>
 80077ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077ec:	6862      	ldr	r2, [r4, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077f4:	6021      	str	r1, [r4, #0]
 80077f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	0800849b 	.word	0x0800849b
 8007800:	08008528 	.word	0x08008528

08007804 <__multadd>:
 8007804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007808:	690d      	ldr	r5, [r1, #16]
 800780a:	4607      	mov	r7, r0
 800780c:	460c      	mov	r4, r1
 800780e:	461e      	mov	r6, r3
 8007810:	f101 0c14 	add.w	ip, r1, #20
 8007814:	2000      	movs	r0, #0
 8007816:	f8dc 3000 	ldr.w	r3, [ip]
 800781a:	b299      	uxth	r1, r3
 800781c:	fb02 6101 	mla	r1, r2, r1, r6
 8007820:	0c1e      	lsrs	r6, r3, #16
 8007822:	0c0b      	lsrs	r3, r1, #16
 8007824:	fb02 3306 	mla	r3, r2, r6, r3
 8007828:	b289      	uxth	r1, r1
 800782a:	3001      	adds	r0, #1
 800782c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007830:	4285      	cmp	r5, r0
 8007832:	f84c 1b04 	str.w	r1, [ip], #4
 8007836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800783a:	dcec      	bgt.n	8007816 <__multadd+0x12>
 800783c:	b30e      	cbz	r6, 8007882 <__multadd+0x7e>
 800783e:	68a3      	ldr	r3, [r4, #8]
 8007840:	42ab      	cmp	r3, r5
 8007842:	dc19      	bgt.n	8007878 <__multadd+0x74>
 8007844:	6861      	ldr	r1, [r4, #4]
 8007846:	4638      	mov	r0, r7
 8007848:	3101      	adds	r1, #1
 800784a:	f7ff ff79 	bl	8007740 <_Balloc>
 800784e:	4680      	mov	r8, r0
 8007850:	b928      	cbnz	r0, 800785e <__multadd+0x5a>
 8007852:	4602      	mov	r2, r0
 8007854:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <__multadd+0x84>)
 8007856:	480d      	ldr	r0, [pc, #52]	; (800788c <__multadd+0x88>)
 8007858:	21b5      	movs	r1, #181	; 0xb5
 800785a:	f7ff f871 	bl	8006940 <__assert_func>
 800785e:	6922      	ldr	r2, [r4, #16]
 8007860:	3202      	adds	r2, #2
 8007862:	f104 010c 	add.w	r1, r4, #12
 8007866:	0092      	lsls	r2, r2, #2
 8007868:	300c      	adds	r0, #12
 800786a:	f7fd fffb 	bl	8005864 <memcpy>
 800786e:	4621      	mov	r1, r4
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff ffa5 	bl	80077c0 <_Bfree>
 8007876:	4644      	mov	r4, r8
 8007878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800787c:	3501      	adds	r5, #1
 800787e:	615e      	str	r6, [r3, #20]
 8007880:	6125      	str	r5, [r4, #16]
 8007882:	4620      	mov	r0, r4
 8007884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007888:	0800850d 	.word	0x0800850d
 800788c:	08008528 	.word	0x08008528

08007890 <__hi0bits>:
 8007890:	0c03      	lsrs	r3, r0, #16
 8007892:	041b      	lsls	r3, r3, #16
 8007894:	b9d3      	cbnz	r3, 80078cc <__hi0bits+0x3c>
 8007896:	0400      	lsls	r0, r0, #16
 8007898:	2310      	movs	r3, #16
 800789a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800789e:	bf04      	itt	eq
 80078a0:	0200      	lsleq	r0, r0, #8
 80078a2:	3308      	addeq	r3, #8
 80078a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078a8:	bf04      	itt	eq
 80078aa:	0100      	lsleq	r0, r0, #4
 80078ac:	3304      	addeq	r3, #4
 80078ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078b2:	bf04      	itt	eq
 80078b4:	0080      	lsleq	r0, r0, #2
 80078b6:	3302      	addeq	r3, #2
 80078b8:	2800      	cmp	r0, #0
 80078ba:	db05      	blt.n	80078c8 <__hi0bits+0x38>
 80078bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078c0:	f103 0301 	add.w	r3, r3, #1
 80078c4:	bf08      	it	eq
 80078c6:	2320      	moveq	r3, #32
 80078c8:	4618      	mov	r0, r3
 80078ca:	4770      	bx	lr
 80078cc:	2300      	movs	r3, #0
 80078ce:	e7e4      	b.n	800789a <__hi0bits+0xa>

080078d0 <__lo0bits>:
 80078d0:	6803      	ldr	r3, [r0, #0]
 80078d2:	f013 0207 	ands.w	r2, r3, #7
 80078d6:	4601      	mov	r1, r0
 80078d8:	d00b      	beq.n	80078f2 <__lo0bits+0x22>
 80078da:	07da      	lsls	r2, r3, #31
 80078dc:	d423      	bmi.n	8007926 <__lo0bits+0x56>
 80078de:	0798      	lsls	r0, r3, #30
 80078e0:	bf49      	itett	mi
 80078e2:	085b      	lsrmi	r3, r3, #1
 80078e4:	089b      	lsrpl	r3, r3, #2
 80078e6:	2001      	movmi	r0, #1
 80078e8:	600b      	strmi	r3, [r1, #0]
 80078ea:	bf5c      	itt	pl
 80078ec:	600b      	strpl	r3, [r1, #0]
 80078ee:	2002      	movpl	r0, #2
 80078f0:	4770      	bx	lr
 80078f2:	b298      	uxth	r0, r3
 80078f4:	b9a8      	cbnz	r0, 8007922 <__lo0bits+0x52>
 80078f6:	0c1b      	lsrs	r3, r3, #16
 80078f8:	2010      	movs	r0, #16
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	b90a      	cbnz	r2, 8007902 <__lo0bits+0x32>
 80078fe:	3008      	adds	r0, #8
 8007900:	0a1b      	lsrs	r3, r3, #8
 8007902:	071a      	lsls	r2, r3, #28
 8007904:	bf04      	itt	eq
 8007906:	091b      	lsreq	r3, r3, #4
 8007908:	3004      	addeq	r0, #4
 800790a:	079a      	lsls	r2, r3, #30
 800790c:	bf04      	itt	eq
 800790e:	089b      	lsreq	r3, r3, #2
 8007910:	3002      	addeq	r0, #2
 8007912:	07da      	lsls	r2, r3, #31
 8007914:	d403      	bmi.n	800791e <__lo0bits+0x4e>
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	f100 0001 	add.w	r0, r0, #1
 800791c:	d005      	beq.n	800792a <__lo0bits+0x5a>
 800791e:	600b      	str	r3, [r1, #0]
 8007920:	4770      	bx	lr
 8007922:	4610      	mov	r0, r2
 8007924:	e7e9      	b.n	80078fa <__lo0bits+0x2a>
 8007926:	2000      	movs	r0, #0
 8007928:	4770      	bx	lr
 800792a:	2020      	movs	r0, #32
 800792c:	4770      	bx	lr
	...

08007930 <__i2b>:
 8007930:	b510      	push	{r4, lr}
 8007932:	460c      	mov	r4, r1
 8007934:	2101      	movs	r1, #1
 8007936:	f7ff ff03 	bl	8007740 <_Balloc>
 800793a:	4602      	mov	r2, r0
 800793c:	b928      	cbnz	r0, 800794a <__i2b+0x1a>
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <__i2b+0x24>)
 8007940:	4805      	ldr	r0, [pc, #20]	; (8007958 <__i2b+0x28>)
 8007942:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007946:	f7fe fffb 	bl	8006940 <__assert_func>
 800794a:	2301      	movs	r3, #1
 800794c:	6144      	str	r4, [r0, #20]
 800794e:	6103      	str	r3, [r0, #16]
 8007950:	bd10      	pop	{r4, pc}
 8007952:	bf00      	nop
 8007954:	0800850d 	.word	0x0800850d
 8007958:	08008528 	.word	0x08008528

0800795c <__multiply>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	4691      	mov	r9, r2
 8007962:	690a      	ldr	r2, [r1, #16]
 8007964:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007968:	429a      	cmp	r2, r3
 800796a:	bfb8      	it	lt
 800796c:	460b      	movlt	r3, r1
 800796e:	460c      	mov	r4, r1
 8007970:	bfbc      	itt	lt
 8007972:	464c      	movlt	r4, r9
 8007974:	4699      	movlt	r9, r3
 8007976:	6927      	ldr	r7, [r4, #16]
 8007978:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800797c:	68a3      	ldr	r3, [r4, #8]
 800797e:	6861      	ldr	r1, [r4, #4]
 8007980:	eb07 060a 	add.w	r6, r7, sl
 8007984:	42b3      	cmp	r3, r6
 8007986:	b085      	sub	sp, #20
 8007988:	bfb8      	it	lt
 800798a:	3101      	addlt	r1, #1
 800798c:	f7ff fed8 	bl	8007740 <_Balloc>
 8007990:	b930      	cbnz	r0, 80079a0 <__multiply+0x44>
 8007992:	4602      	mov	r2, r0
 8007994:	4b44      	ldr	r3, [pc, #272]	; (8007aa8 <__multiply+0x14c>)
 8007996:	4845      	ldr	r0, [pc, #276]	; (8007aac <__multiply+0x150>)
 8007998:	f240 115d 	movw	r1, #349	; 0x15d
 800799c:	f7fe ffd0 	bl	8006940 <__assert_func>
 80079a0:	f100 0514 	add.w	r5, r0, #20
 80079a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079a8:	462b      	mov	r3, r5
 80079aa:	2200      	movs	r2, #0
 80079ac:	4543      	cmp	r3, r8
 80079ae:	d321      	bcc.n	80079f4 <__multiply+0x98>
 80079b0:	f104 0314 	add.w	r3, r4, #20
 80079b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079b8:	f109 0314 	add.w	r3, r9, #20
 80079bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079c0:	9202      	str	r2, [sp, #8]
 80079c2:	1b3a      	subs	r2, r7, r4
 80079c4:	3a15      	subs	r2, #21
 80079c6:	f022 0203 	bic.w	r2, r2, #3
 80079ca:	3204      	adds	r2, #4
 80079cc:	f104 0115 	add.w	r1, r4, #21
 80079d0:	428f      	cmp	r7, r1
 80079d2:	bf38      	it	cc
 80079d4:	2204      	movcc	r2, #4
 80079d6:	9201      	str	r2, [sp, #4]
 80079d8:	9a02      	ldr	r2, [sp, #8]
 80079da:	9303      	str	r3, [sp, #12]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d80c      	bhi.n	80079fa <__multiply+0x9e>
 80079e0:	2e00      	cmp	r6, #0
 80079e2:	dd03      	ble.n	80079ec <__multiply+0x90>
 80079e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d05a      	beq.n	8007aa2 <__multiply+0x146>
 80079ec:	6106      	str	r6, [r0, #16]
 80079ee:	b005      	add	sp, #20
 80079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f4:	f843 2b04 	str.w	r2, [r3], #4
 80079f8:	e7d8      	b.n	80079ac <__multiply+0x50>
 80079fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80079fe:	f1ba 0f00 	cmp.w	sl, #0
 8007a02:	d024      	beq.n	8007a4e <__multiply+0xf2>
 8007a04:	f104 0e14 	add.w	lr, r4, #20
 8007a08:	46a9      	mov	r9, r5
 8007a0a:	f04f 0c00 	mov.w	ip, #0
 8007a0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a12:	f8d9 1000 	ldr.w	r1, [r9]
 8007a16:	fa1f fb82 	uxth.w	fp, r2
 8007a1a:	b289      	uxth	r1, r1
 8007a1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a24:	f8d9 2000 	ldr.w	r2, [r9]
 8007a28:	4461      	add	r1, ip
 8007a2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a36:	b289      	uxth	r1, r1
 8007a38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a3c:	4577      	cmp	r7, lr
 8007a3e:	f849 1b04 	str.w	r1, [r9], #4
 8007a42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a46:	d8e2      	bhi.n	8007a0e <__multiply+0xb2>
 8007a48:	9a01      	ldr	r2, [sp, #4]
 8007a4a:	f845 c002 	str.w	ip, [r5, r2]
 8007a4e:	9a03      	ldr	r2, [sp, #12]
 8007a50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a54:	3304      	adds	r3, #4
 8007a56:	f1b9 0f00 	cmp.w	r9, #0
 8007a5a:	d020      	beq.n	8007a9e <__multiply+0x142>
 8007a5c:	6829      	ldr	r1, [r5, #0]
 8007a5e:	f104 0c14 	add.w	ip, r4, #20
 8007a62:	46ae      	mov	lr, r5
 8007a64:	f04f 0a00 	mov.w	sl, #0
 8007a68:	f8bc b000 	ldrh.w	fp, [ip]
 8007a6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a70:	fb09 220b 	mla	r2, r9, fp, r2
 8007a74:	4492      	add	sl, r2
 8007a76:	b289      	uxth	r1, r1
 8007a78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007a7c:	f84e 1b04 	str.w	r1, [lr], #4
 8007a80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a84:	f8be 1000 	ldrh.w	r1, [lr]
 8007a88:	0c12      	lsrs	r2, r2, #16
 8007a8a:	fb09 1102 	mla	r1, r9, r2, r1
 8007a8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007a92:	4567      	cmp	r7, ip
 8007a94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a98:	d8e6      	bhi.n	8007a68 <__multiply+0x10c>
 8007a9a:	9a01      	ldr	r2, [sp, #4]
 8007a9c:	50a9      	str	r1, [r5, r2]
 8007a9e:	3504      	adds	r5, #4
 8007aa0:	e79a      	b.n	80079d8 <__multiply+0x7c>
 8007aa2:	3e01      	subs	r6, #1
 8007aa4:	e79c      	b.n	80079e0 <__multiply+0x84>
 8007aa6:	bf00      	nop
 8007aa8:	0800850d 	.word	0x0800850d
 8007aac:	08008528 	.word	0x08008528

08007ab0 <__pow5mult>:
 8007ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	f012 0203 	ands.w	r2, r2, #3
 8007aba:	4606      	mov	r6, r0
 8007abc:	460f      	mov	r7, r1
 8007abe:	d007      	beq.n	8007ad0 <__pow5mult+0x20>
 8007ac0:	4c25      	ldr	r4, [pc, #148]	; (8007b58 <__pow5mult+0xa8>)
 8007ac2:	3a01      	subs	r2, #1
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007aca:	f7ff fe9b 	bl	8007804 <__multadd>
 8007ace:	4607      	mov	r7, r0
 8007ad0:	10ad      	asrs	r5, r5, #2
 8007ad2:	d03d      	beq.n	8007b50 <__pow5mult+0xa0>
 8007ad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ad6:	b97c      	cbnz	r4, 8007af8 <__pow5mult+0x48>
 8007ad8:	2010      	movs	r0, #16
 8007ada:	f7fd feb3 	bl	8005844 <malloc>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6270      	str	r0, [r6, #36]	; 0x24
 8007ae2:	b928      	cbnz	r0, 8007af0 <__pow5mult+0x40>
 8007ae4:	4b1d      	ldr	r3, [pc, #116]	; (8007b5c <__pow5mult+0xac>)
 8007ae6:	481e      	ldr	r0, [pc, #120]	; (8007b60 <__pow5mult+0xb0>)
 8007ae8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007aec:	f7fe ff28 	bl	8006940 <__assert_func>
 8007af0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007af4:	6004      	str	r4, [r0, #0]
 8007af6:	60c4      	str	r4, [r0, #12]
 8007af8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007afc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b00:	b94c      	cbnz	r4, 8007b16 <__pow5mult+0x66>
 8007b02:	f240 2171 	movw	r1, #625	; 0x271
 8007b06:	4630      	mov	r0, r6
 8007b08:	f7ff ff12 	bl	8007930 <__i2b>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b12:	4604      	mov	r4, r0
 8007b14:	6003      	str	r3, [r0, #0]
 8007b16:	f04f 0900 	mov.w	r9, #0
 8007b1a:	07eb      	lsls	r3, r5, #31
 8007b1c:	d50a      	bpl.n	8007b34 <__pow5mult+0x84>
 8007b1e:	4639      	mov	r1, r7
 8007b20:	4622      	mov	r2, r4
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ff1a 	bl	800795c <__multiply>
 8007b28:	4639      	mov	r1, r7
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff fe47 	bl	80077c0 <_Bfree>
 8007b32:	4647      	mov	r7, r8
 8007b34:	106d      	asrs	r5, r5, #1
 8007b36:	d00b      	beq.n	8007b50 <__pow5mult+0xa0>
 8007b38:	6820      	ldr	r0, [r4, #0]
 8007b3a:	b938      	cbnz	r0, 8007b4c <__pow5mult+0x9c>
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7ff ff0b 	bl	800795c <__multiply>
 8007b46:	6020      	str	r0, [r4, #0]
 8007b48:	f8c0 9000 	str.w	r9, [r0]
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	e7e4      	b.n	8007b1a <__pow5mult+0x6a>
 8007b50:	4638      	mov	r0, r7
 8007b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b56:	bf00      	nop
 8007b58:	08008678 	.word	0x08008678
 8007b5c:	0800849b 	.word	0x0800849b
 8007b60:	08008528 	.word	0x08008528

08007b64 <__lshift>:
 8007b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6849      	ldr	r1, [r1, #4]
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	4607      	mov	r7, r0
 8007b76:	4691      	mov	r9, r2
 8007b78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b7c:	f108 0601 	add.w	r6, r8, #1
 8007b80:	42b3      	cmp	r3, r6
 8007b82:	db0b      	blt.n	8007b9c <__lshift+0x38>
 8007b84:	4638      	mov	r0, r7
 8007b86:	f7ff fddb 	bl	8007740 <_Balloc>
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	b948      	cbnz	r0, 8007ba2 <__lshift+0x3e>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	4b2a      	ldr	r3, [pc, #168]	; (8007c3c <__lshift+0xd8>)
 8007b92:	482b      	ldr	r0, [pc, #172]	; (8007c40 <__lshift+0xdc>)
 8007b94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b98:	f7fe fed2 	bl	8006940 <__assert_func>
 8007b9c:	3101      	adds	r1, #1
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	e7ee      	b.n	8007b80 <__lshift+0x1c>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f100 0114 	add.w	r1, r0, #20
 8007ba8:	f100 0210 	add.w	r2, r0, #16
 8007bac:	4618      	mov	r0, r3
 8007bae:	4553      	cmp	r3, sl
 8007bb0:	db37      	blt.n	8007c22 <__lshift+0xbe>
 8007bb2:	6920      	ldr	r0, [r4, #16]
 8007bb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bb8:	f104 0314 	add.w	r3, r4, #20
 8007bbc:	f019 091f 	ands.w	r9, r9, #31
 8007bc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bc8:	d02f      	beq.n	8007c2a <__lshift+0xc6>
 8007bca:	f1c9 0e20 	rsb	lr, r9, #32
 8007bce:	468a      	mov	sl, r1
 8007bd0:	f04f 0c00 	mov.w	ip, #0
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	fa02 f209 	lsl.w	r2, r2, r9
 8007bda:	ea42 020c 	orr.w	r2, r2, ip
 8007bde:	f84a 2b04 	str.w	r2, [sl], #4
 8007be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be6:	4298      	cmp	r0, r3
 8007be8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007bec:	d8f2      	bhi.n	8007bd4 <__lshift+0x70>
 8007bee:	1b03      	subs	r3, r0, r4
 8007bf0:	3b15      	subs	r3, #21
 8007bf2:	f023 0303 	bic.w	r3, r3, #3
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	f104 0215 	add.w	r2, r4, #21
 8007bfc:	4290      	cmp	r0, r2
 8007bfe:	bf38      	it	cc
 8007c00:	2304      	movcc	r3, #4
 8007c02:	f841 c003 	str.w	ip, [r1, r3]
 8007c06:	f1bc 0f00 	cmp.w	ip, #0
 8007c0a:	d001      	beq.n	8007c10 <__lshift+0xac>
 8007c0c:	f108 0602 	add.w	r6, r8, #2
 8007c10:	3e01      	subs	r6, #1
 8007c12:	4638      	mov	r0, r7
 8007c14:	612e      	str	r6, [r5, #16]
 8007c16:	4621      	mov	r1, r4
 8007c18:	f7ff fdd2 	bl	80077c0 <_Bfree>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c22:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c26:	3301      	adds	r3, #1
 8007c28:	e7c1      	b.n	8007bae <__lshift+0x4a>
 8007c2a:	3904      	subs	r1, #4
 8007c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c30:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c34:	4298      	cmp	r0, r3
 8007c36:	d8f9      	bhi.n	8007c2c <__lshift+0xc8>
 8007c38:	e7ea      	b.n	8007c10 <__lshift+0xac>
 8007c3a:	bf00      	nop
 8007c3c:	0800850d 	.word	0x0800850d
 8007c40:	08008528 	.word	0x08008528

08007c44 <__mcmp>:
 8007c44:	b530      	push	{r4, r5, lr}
 8007c46:	6902      	ldr	r2, [r0, #16]
 8007c48:	690c      	ldr	r4, [r1, #16]
 8007c4a:	1b12      	subs	r2, r2, r4
 8007c4c:	d10e      	bne.n	8007c6c <__mcmp+0x28>
 8007c4e:	f100 0314 	add.w	r3, r0, #20
 8007c52:	3114      	adds	r1, #20
 8007c54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c64:	42a5      	cmp	r5, r4
 8007c66:	d003      	beq.n	8007c70 <__mcmp+0x2c>
 8007c68:	d305      	bcc.n	8007c76 <__mcmp+0x32>
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	bd30      	pop	{r4, r5, pc}
 8007c70:	4283      	cmp	r3, r0
 8007c72:	d3f3      	bcc.n	8007c5c <__mcmp+0x18>
 8007c74:	e7fa      	b.n	8007c6c <__mcmp+0x28>
 8007c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c7a:	e7f7      	b.n	8007c6c <__mcmp+0x28>

08007c7c <__mdiff>:
 8007c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	460c      	mov	r4, r1
 8007c82:	4606      	mov	r6, r0
 8007c84:	4611      	mov	r1, r2
 8007c86:	4620      	mov	r0, r4
 8007c88:	4690      	mov	r8, r2
 8007c8a:	f7ff ffdb 	bl	8007c44 <__mcmp>
 8007c8e:	1e05      	subs	r5, r0, #0
 8007c90:	d110      	bne.n	8007cb4 <__mdiff+0x38>
 8007c92:	4629      	mov	r1, r5
 8007c94:	4630      	mov	r0, r6
 8007c96:	f7ff fd53 	bl	8007740 <_Balloc>
 8007c9a:	b930      	cbnz	r0, 8007caa <__mdiff+0x2e>
 8007c9c:	4b3a      	ldr	r3, [pc, #232]	; (8007d88 <__mdiff+0x10c>)
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	f240 2132 	movw	r1, #562	; 0x232
 8007ca4:	4839      	ldr	r0, [pc, #228]	; (8007d8c <__mdiff+0x110>)
 8007ca6:	f7fe fe4b 	bl	8006940 <__assert_func>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	bfa4      	itt	ge
 8007cb6:	4643      	movge	r3, r8
 8007cb8:	46a0      	movge	r8, r4
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cc0:	bfa6      	itte	ge
 8007cc2:	461c      	movge	r4, r3
 8007cc4:	2500      	movge	r5, #0
 8007cc6:	2501      	movlt	r5, #1
 8007cc8:	f7ff fd3a 	bl	8007740 <_Balloc>
 8007ccc:	b920      	cbnz	r0, 8007cd8 <__mdiff+0x5c>
 8007cce:	4b2e      	ldr	r3, [pc, #184]	; (8007d88 <__mdiff+0x10c>)
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cd6:	e7e5      	b.n	8007ca4 <__mdiff+0x28>
 8007cd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cdc:	6926      	ldr	r6, [r4, #16]
 8007cde:	60c5      	str	r5, [r0, #12]
 8007ce0:	f104 0914 	add.w	r9, r4, #20
 8007ce4:	f108 0514 	add.w	r5, r8, #20
 8007ce8:	f100 0e14 	add.w	lr, r0, #20
 8007cec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007cf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007cf4:	f108 0210 	add.w	r2, r8, #16
 8007cf8:	46f2      	mov	sl, lr
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d04:	fa1f f883 	uxth.w	r8, r3
 8007d08:	fa11 f18b 	uxtah	r1, r1, fp
 8007d0c:	0c1b      	lsrs	r3, r3, #16
 8007d0e:	eba1 0808 	sub.w	r8, r1, r8
 8007d12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d1a:	fa1f f888 	uxth.w	r8, r8
 8007d1e:	1419      	asrs	r1, r3, #16
 8007d20:	454e      	cmp	r6, r9
 8007d22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d26:	f84a 3b04 	str.w	r3, [sl], #4
 8007d2a:	d8e7      	bhi.n	8007cfc <__mdiff+0x80>
 8007d2c:	1b33      	subs	r3, r6, r4
 8007d2e:	3b15      	subs	r3, #21
 8007d30:	f023 0303 	bic.w	r3, r3, #3
 8007d34:	3304      	adds	r3, #4
 8007d36:	3415      	adds	r4, #21
 8007d38:	42a6      	cmp	r6, r4
 8007d3a:	bf38      	it	cc
 8007d3c:	2304      	movcc	r3, #4
 8007d3e:	441d      	add	r5, r3
 8007d40:	4473      	add	r3, lr
 8007d42:	469e      	mov	lr, r3
 8007d44:	462e      	mov	r6, r5
 8007d46:	4566      	cmp	r6, ip
 8007d48:	d30e      	bcc.n	8007d68 <__mdiff+0xec>
 8007d4a:	f10c 0203 	add.w	r2, ip, #3
 8007d4e:	1b52      	subs	r2, r2, r5
 8007d50:	f022 0203 	bic.w	r2, r2, #3
 8007d54:	3d03      	subs	r5, #3
 8007d56:	45ac      	cmp	ip, r5
 8007d58:	bf38      	it	cc
 8007d5a:	2200      	movcc	r2, #0
 8007d5c:	441a      	add	r2, r3
 8007d5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d62:	b17b      	cbz	r3, 8007d84 <__mdiff+0x108>
 8007d64:	6107      	str	r7, [r0, #16]
 8007d66:	e7a3      	b.n	8007cb0 <__mdiff+0x34>
 8007d68:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d6c:	fa11 f288 	uxtah	r2, r1, r8
 8007d70:	1414      	asrs	r4, r2, #16
 8007d72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d76:	b292      	uxth	r2, r2
 8007d78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d7c:	f84e 2b04 	str.w	r2, [lr], #4
 8007d80:	1421      	asrs	r1, r4, #16
 8007d82:	e7e0      	b.n	8007d46 <__mdiff+0xca>
 8007d84:	3f01      	subs	r7, #1
 8007d86:	e7ea      	b.n	8007d5e <__mdiff+0xe2>
 8007d88:	0800850d 	.word	0x0800850d
 8007d8c:	08008528 	.word	0x08008528

08007d90 <__d2b>:
 8007d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	4689      	mov	r9, r1
 8007d96:	2101      	movs	r1, #1
 8007d98:	ec57 6b10 	vmov	r6, r7, d0
 8007d9c:	4690      	mov	r8, r2
 8007d9e:	f7ff fccf 	bl	8007740 <_Balloc>
 8007da2:	4604      	mov	r4, r0
 8007da4:	b930      	cbnz	r0, 8007db4 <__d2b+0x24>
 8007da6:	4602      	mov	r2, r0
 8007da8:	4b25      	ldr	r3, [pc, #148]	; (8007e40 <__d2b+0xb0>)
 8007daa:	4826      	ldr	r0, [pc, #152]	; (8007e44 <__d2b+0xb4>)
 8007dac:	f240 310a 	movw	r1, #778	; 0x30a
 8007db0:	f7fe fdc6 	bl	8006940 <__assert_func>
 8007db4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007db8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007dbc:	bb35      	cbnz	r5, 8007e0c <__d2b+0x7c>
 8007dbe:	2e00      	cmp	r6, #0
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	d028      	beq.n	8007e16 <__d2b+0x86>
 8007dc4:	4668      	mov	r0, sp
 8007dc6:	9600      	str	r6, [sp, #0]
 8007dc8:	f7ff fd82 	bl	80078d0 <__lo0bits>
 8007dcc:	9900      	ldr	r1, [sp, #0]
 8007dce:	b300      	cbz	r0, 8007e12 <__d2b+0x82>
 8007dd0:	9a01      	ldr	r2, [sp, #4]
 8007dd2:	f1c0 0320 	rsb	r3, r0, #32
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	40c2      	lsrs	r2, r0
 8007dde:	6163      	str	r3, [r4, #20]
 8007de0:	9201      	str	r2, [sp, #4]
 8007de2:	9b01      	ldr	r3, [sp, #4]
 8007de4:	61a3      	str	r3, [r4, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bf14      	ite	ne
 8007dea:	2202      	movne	r2, #2
 8007dec:	2201      	moveq	r2, #1
 8007dee:	6122      	str	r2, [r4, #16]
 8007df0:	b1d5      	cbz	r5, 8007e28 <__d2b+0x98>
 8007df2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007df6:	4405      	add	r5, r0
 8007df8:	f8c9 5000 	str.w	r5, [r9]
 8007dfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e00:	f8c8 0000 	str.w	r0, [r8]
 8007e04:	4620      	mov	r0, r4
 8007e06:	b003      	add	sp, #12
 8007e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e10:	e7d5      	b.n	8007dbe <__d2b+0x2e>
 8007e12:	6161      	str	r1, [r4, #20]
 8007e14:	e7e5      	b.n	8007de2 <__d2b+0x52>
 8007e16:	a801      	add	r0, sp, #4
 8007e18:	f7ff fd5a 	bl	80078d0 <__lo0bits>
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	6163      	str	r3, [r4, #20]
 8007e20:	2201      	movs	r2, #1
 8007e22:	6122      	str	r2, [r4, #16]
 8007e24:	3020      	adds	r0, #32
 8007e26:	e7e3      	b.n	8007df0 <__d2b+0x60>
 8007e28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e30:	f8c9 0000 	str.w	r0, [r9]
 8007e34:	6918      	ldr	r0, [r3, #16]
 8007e36:	f7ff fd2b 	bl	8007890 <__hi0bits>
 8007e3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e3e:	e7df      	b.n	8007e00 <__d2b+0x70>
 8007e40:	0800850d 	.word	0x0800850d
 8007e44:	08008528 	.word	0x08008528

08007e48 <_calloc_r>:
 8007e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e4a:	fba1 2402 	umull	r2, r4, r1, r2
 8007e4e:	b94c      	cbnz	r4, 8007e64 <_calloc_r+0x1c>
 8007e50:	4611      	mov	r1, r2
 8007e52:	9201      	str	r2, [sp, #4]
 8007e54:	f7fd fd88 	bl	8005968 <_malloc_r>
 8007e58:	9a01      	ldr	r2, [sp, #4]
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	b930      	cbnz	r0, 8007e6c <_calloc_r+0x24>
 8007e5e:	4628      	mov	r0, r5
 8007e60:	b003      	add	sp, #12
 8007e62:	bd30      	pop	{r4, r5, pc}
 8007e64:	220c      	movs	r2, #12
 8007e66:	6002      	str	r2, [r0, #0]
 8007e68:	2500      	movs	r5, #0
 8007e6a:	e7f8      	b.n	8007e5e <_calloc_r+0x16>
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	f7fd fd07 	bl	8005880 <memset>
 8007e72:	e7f4      	b.n	8007e5e <_calloc_r+0x16>

08007e74 <_read_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4d07      	ldr	r5, [pc, #28]	; (8007e94 <_read_r+0x20>)
 8007e78:	4604      	mov	r4, r0
 8007e7a:	4608      	mov	r0, r1
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	602a      	str	r2, [r5, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f7f9 fb12 	bl	80014ac <_read>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_read_r+0x1e>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_read_r+0x1e>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	200002ec 	.word	0x200002ec

08007e98 <__ascii_wctomb>:
 8007e98:	b149      	cbz	r1, 8007eae <__ascii_wctomb+0x16>
 8007e9a:	2aff      	cmp	r2, #255	; 0xff
 8007e9c:	bf85      	ittet	hi
 8007e9e:	238a      	movhi	r3, #138	; 0x8a
 8007ea0:	6003      	strhi	r3, [r0, #0]
 8007ea2:	700a      	strbls	r2, [r1, #0]
 8007ea4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007ea8:	bf98      	it	ls
 8007eaa:	2001      	movls	r0, #1
 8007eac:	4770      	bx	lr
 8007eae:	4608      	mov	r0, r1
 8007eb0:	4770      	bx	lr

08007eb2 <abort>:
 8007eb2:	b508      	push	{r3, lr}
 8007eb4:	2006      	movs	r0, #6
 8007eb6:	f000 f82b 	bl	8007f10 <raise>
 8007eba:	2001      	movs	r0, #1
 8007ebc:	f7f9 faec 	bl	8001498 <_exit>

08007ec0 <_raise_r>:
 8007ec0:	291f      	cmp	r1, #31
 8007ec2:	b538      	push	{r3, r4, r5, lr}
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	d904      	bls.n	8007ed4 <_raise_r+0x14>
 8007eca:	2316      	movs	r3, #22
 8007ecc:	6003      	str	r3, [r0, #0]
 8007ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ed6:	b112      	cbz	r2, 8007ede <_raise_r+0x1e>
 8007ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007edc:	b94b      	cbnz	r3, 8007ef2 <_raise_r+0x32>
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 f830 	bl	8007f44 <_getpid_r>
 8007ee4:	462a      	mov	r2, r5
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	4620      	mov	r0, r4
 8007eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eee:	f000 b817 	b.w	8007f20 <_kill_r>
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d00a      	beq.n	8007f0c <_raise_r+0x4c>
 8007ef6:	1c59      	adds	r1, r3, #1
 8007ef8:	d103      	bne.n	8007f02 <_raise_r+0x42>
 8007efa:	2316      	movs	r3, #22
 8007efc:	6003      	str	r3, [r0, #0]
 8007efe:	2001      	movs	r0, #1
 8007f00:	e7e7      	b.n	8007ed2 <_raise_r+0x12>
 8007f02:	2400      	movs	r4, #0
 8007f04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f08:	4628      	mov	r0, r5
 8007f0a:	4798      	blx	r3
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e7e0      	b.n	8007ed2 <_raise_r+0x12>

08007f10 <raise>:
 8007f10:	4b02      	ldr	r3, [pc, #8]	; (8007f1c <raise+0xc>)
 8007f12:	4601      	mov	r1, r0
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	f7ff bfd3 	b.w	8007ec0 <_raise_r>
 8007f1a:	bf00      	nop
 8007f1c:	20000014 	.word	0x20000014

08007f20 <_kill_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d07      	ldr	r5, [pc, #28]	; (8007f40 <_kill_r+0x20>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	602b      	str	r3, [r5, #0]
 8007f2e:	f7f9 faa3 	bl	8001478 <_kill>
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	d102      	bne.n	8007f3c <_kill_r+0x1c>
 8007f36:	682b      	ldr	r3, [r5, #0]
 8007f38:	b103      	cbz	r3, 8007f3c <_kill_r+0x1c>
 8007f3a:	6023      	str	r3, [r4, #0]
 8007f3c:	bd38      	pop	{r3, r4, r5, pc}
 8007f3e:	bf00      	nop
 8007f40:	200002ec 	.word	0x200002ec

08007f44 <_getpid_r>:
 8007f44:	f7f9 ba90 	b.w	8001468 <_getpid>

08007f48 <_init>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	bf00      	nop
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr

08007f54 <_fini>:
 8007f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f56:	bf00      	nop
 8007f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5a:	bc08      	pop	{r3}
 8007f5c:	469e      	mov	lr, r3
 8007f5e:	4770      	bx	lr
>>>>>>> Stashed changes
