
Bachelor-thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08007b00  08007b00  00017b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000008  08008218  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e8  200001e8  080083f8  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002d0  080083f8  000202d0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012b21  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002639  00000000  00000000  00032d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001750  00000000  00000000  00035378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001648  00000000  00000000  00036ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00022a4e  00000000  00000000  00038110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001231e  00000000  00000000  0005ab5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000de789  00000000  00000000  0006ce7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0014b605  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000734c  00000000  00000000  0014b658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stabstr      0000004e  00000000  00000000  001529a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08007ae8 	.word	0x08007ae8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	08007ae8 	.word	0x08007ae8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <send_start_signal>:
    printf("Fastest response time us:       %f\n", min);
    printf("Slowest response time us:       %f\n", max);
    printf("--------------------------------------------------------\n");
}

void send_start_signal(){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2101      	movs	r1, #1
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <send_start_signal+0x1c>)
 8000b96:	f001 f89b 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TIMER_PIN_GPIO_Port, TIMER_PIN_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <send_start_signal+0x1c>)
 8000ba0:	f001 f896 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	48000800 	.word	0x48000800

08000bac <send_stop_signal>:
void send_stop_signal(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <send_stop_signal+0x1c>)
 8000bb6:	f001 f88b 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESPONSE_PIN_GPIO_Port, RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <send_stop_signal+0x1c>)
 8000bc0:	f001 f886 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	48000800 	.word	0x48000800

08000bcc <lightsleep_test>:

void lightsleep_test(uint32_t interval_in_ms, uint32_t amount_of_loops)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    uint32_t run_counter = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
    HAL_SuspendTick();
 8000bda:	f000 fdc1 	bl	8001760 <HAL_SuspendTick>
    HAL_TIM_Base_Init(&htim2);
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <lightsleep_test+0x44>)
 8000be0:	f003 fdb8 	bl	8004754 <HAL_TIM_Base_Init>
    while (run_counter < amount_of_loops)
 8000be4:	e00b      	b.n	8000bfe <lightsleep_test+0x32>
    {
        // Assuming you have initialized TIMER_PIN, change the pin name accordingly
        send_start_signal();
 8000be6:	f7ff ffd1 	bl	8000b8c <send_start_signal>
        HAL_TIM_Base_Start_IT(&htim2);
 8000bea:	4809      	ldr	r0, [pc, #36]	; (8000c10 <lightsleep_test+0x44>)
 8000bec:	f003 fe0a 	bl	8004804 <HAL_TIM_Base_Start_IT>
        HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f001 f8b8 	bl	8001d68 <HAL_PWR_EnterSTOPMode>
        run_counter++;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
    while (run_counter < amount_of_loops)
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3ef      	bcc.n	8000be6 <lightsleep_test+0x1a>
    }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000268 	.word	0x20000268

08000c14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c24:	d10b      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x2a>
		HAL_ResumeTick();
 8000c26:	f000 fdab 	bl	8001780 <HAL_ResumeTick>
		SystemClock_Config();
 8000c2a:	f000 f949 	bl	8000ec0 <SystemClock_Config>
		send_stop_signal();
 8000c2e:	f7ff ffbd 	bl	8000bac <send_stop_signal>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c34:	f003 fe34 	bl	80048a0 <HAL_TIM_Base_Stop_IT>
		HAL_Delay(10);
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f000 fd6d 	bl	8001718 <HAL_Delay>
	}
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000268 	.word	0x20000268

08000c4c <send16Bit>:
        printf("DEATH\n");
    }
}


_Bool send16Bit(uint16_t *send){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2, 10) == HAL_OK){
 8000c54:	230a      	movs	r3, #10
 8000c56:	2202      	movs	r2, #2
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <send16Bit+0x28>)
 8000c5c:	f002 ff0d 	bl	8003a7a <HAL_SPI_Transmit>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <send16Bit+0x1e>
		return true;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e000      	b.n	8000c6c <send16Bit+0x20>
	}
	return false;
 8000c6a:	2300      	movs	r3, #0

}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000204 	.word	0x20000204

08000c78 <send_settings_spi>:
	if(HAL_SPI_Receive(&hspi1, (uint8_t*)readInto, 2, 10) == HAL_OK){
		return true;
	}
	return false;
}
void send_settings_spi(uint16_t sleep_time, uint16_t run_amount, uint16_t run_type){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	460b      	mov	r3, r1
 8000c84:	80bb      	strh	r3, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	807b      	strh	r3, [r7, #2]
	uint16_t var = 32;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef sendSleepTimeReady = HAL_SPI_Transmit(&hspi1, &SLEEP_TIME_ADDR, 1, 10);
 8000c8e:	230a      	movs	r3, #10
 8000c90:	2201      	movs	r2, #1
 8000c92:	4925      	ldr	r1, [pc, #148]	; (8000d28 <send_settings_spi+0xb0>)
 8000c94:	4825      	ldr	r0, [pc, #148]	; (8000d2c <send_settings_spi+0xb4>)
 8000c96:	f002 fef0 	bl	8003a7a <HAL_SPI_Transmit>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	737b      	strb	r3, [r7, #13]
	if(sendSleepTimeReady == HAL_OK){
 8000c9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10c      	bne.n	8000cbe <send_settings_spi+0x46>
		if(!send16Bit(&sleep_time)){
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffd0 	bl	8000c4c <send16Bit>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f083 0301 	eor.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <send_settings_spi+0x46>
			printf("COULD NOT SEND SLEEP TIME");
 8000cb8:	481d      	ldr	r0, [pc, #116]	; (8000d30 <send_settings_spi+0xb8>)
 8000cba:	f005 f969 	bl	8005f90 <iprintf>
		}
	}
	else{
		//
	}
	HAL_StatusTypeDef sendRunAmountReady = HAL_SPI_Transmit(&hspi1, &RUN_AMOUNT_ADDR, 1, 10);
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	491c      	ldr	r1, [pc, #112]	; (8000d34 <send_settings_spi+0xbc>)
 8000cc4:	4819      	ldr	r0, [pc, #100]	; (8000d2c <send_settings_spi+0xb4>)
 8000cc6:	f002 fed8 	bl	8003a7a <HAL_SPI_Transmit>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	733b      	strb	r3, [r7, #12]
	if(sendRunAmountReady == HAL_OK){
 8000cce:	7b3b      	ldrb	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10c      	bne.n	8000cee <send_settings_spi+0x76>
		if(!send16Bit(&run_amount)){
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ffb8 	bl	8000c4c <send16Bit>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f083 0301 	eor.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <send_settings_spi+0x76>
			printf("COULD NOT SEND RUN AMOUNT");
 8000ce8:	4813      	ldr	r0, [pc, #76]	; (8000d38 <send_settings_spi+0xc0>)
 8000cea:	f005 f951 	bl	8005f90 <iprintf>
		}
	}
	HAL_StatusTypeDef sendRunTypeReady = HAL_SPI_Transmit(&hspi1, &TEST_MODE_ADDR, 1, 10);
 8000cee:	230a      	movs	r3, #10
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4912      	ldr	r1, [pc, #72]	; (8000d3c <send_settings_spi+0xc4>)
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <send_settings_spi+0xb4>)
 8000cf6:	f002 fec0 	bl	8003a7a <HAL_SPI_Transmit>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	72fb      	strb	r3, [r7, #11]
	if(sendRunTypeReady == HAL_OK){
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10c      	bne.n	8000d1e <send_settings_spi+0xa6>
		if(!send16Bit(&run_type)){
 8000d04:	1cbb      	adds	r3, r7, #2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffa0 	bl	8000c4c <send16Bit>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f083 0301 	eor.w	r3, r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <send_settings_spi+0xa6>
			printf("COULD NOT SEND RUN TYPE");
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <send_settings_spi+0xc8>)
 8000d1a:	f005 f939 	bl	8005f90 <iprintf>
		}
	}

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000204 	.word	0x20000204
 8000d30:	08007d30 	.word	0x08007d30
 8000d34:	20000009 	.word	0x20000009
 8000d38:	08007d4c 	.word	0x08007d4c
 8000d3c:	2000000a 	.word	0x2000000a
 8000d40:	08007d68 	.word	0x08007d68

08000d44 <receive_data_SPI>:

uint16_t* receive_data_SPI(uint16_t run_amount){
 8000d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d48:	b089      	sub	sp, #36	; 0x24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	80fb      	strh	r3, [r7, #6]
 8000d50:	466b      	mov	r3, sp
 8000d52:	461e      	mov	r6, r3
	uint8_t bytesread[run_amount * 2];
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	0059      	lsls	r1, r3, #1
 8000d58:	1e4b      	subs	r3, r1, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	2300      	movs	r3, #0
 8000d60:	4690      	mov	r8, r2
 8000d62:	4699      	mov	r9, r3
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d78:	460a      	mov	r2, r1
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	4614      	mov	r4, r2
 8000d7e:	461d      	mov	r5, r3
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	00eb      	lsls	r3, r5, #3
 8000d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d8e:	00e2      	lsls	r2, r4, #3
 8000d90:	460b      	mov	r3, r1
 8000d92:	3307      	adds	r3, #7
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	ebad 0d03 	sub.w	sp, sp, r3
 8000d9c:	466b      	mov	r3, sp
 8000d9e:	3300      	adds	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
	uint16_t *received_data = malloc(run_amount * sizeof(uint16_t));
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 fb82 	bl	80054b0 <malloc>
 8000dac:	4603      	mov	r3, r0
 8000dae:	60fb      	str	r3, [r7, #12]
	if (received_data == NULL){
		// Handle error
	}

	// Wait for the RECEIVE_READY_Pin to go high before proceeding
	while (HAL_GPIO_ReadPin(RECEIVE_READY_GPIO_Port, RECEIVE_READY_Pin) == GPIO_PIN_RESET)
 8000db0:	bf00      	nop
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <receive_data_SPI+0xfc>)
 8000db6:	f000 ff73 	bl	8001ca0 <HAL_GPIO_ReadPin>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f8      	beq.n	8000db2 <receive_data_SPI+0x6e>
	{
		// add timeout or yield to other tasks here if necessary
	}

	for (int i = 0; i < run_amount * 2; i += 2){
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	e00b      	b.n	8000dde <receive_data_SPI+0x9a>
		HAL_SPI_Receive(&hspi1, &bytesread[i], 2, HAL_MAX_DELAY); // Receive two bytes of data over SPI
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	18d1      	adds	r1, r2, r3
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	481c      	ldr	r0, [pc, #112]	; (8000e44 <receive_data_SPI+0x100>)
 8000dd4:	f002 ffbf 	bl	8003d56 <HAL_SPI_Receive>
	for (int i = 0; i < run_amount * 2; i += 2){
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbee      	blt.n	8000dc6 <receive_data_SPI+0x82>
	}

	// Process the received data and store it in received_data
	for (int i = 0; i < run_amount; i++){
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	e017      	b.n	8000e1e <receive_data_SPI+0xda>
		uint16_t data = bytesread[i * 2 + 1] << 8 | bytesread[i * 2];
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	3301      	adds	r3, #1
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	5cd3      	ldrb	r3, [r2, r3]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	5ccb      	ldrb	r3, [r1, r3]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	817b      	strh	r3, [r7, #10]
		received_data[i] = data;
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	897a      	ldrh	r2, [r7, #10]
 8000e16:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < run_amount; i++){
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dbe3      	blt.n	8000dee <receive_data_SPI+0xaa>
	}

	printf("%d\n", run_amount); // Print the number of SPI transfers made
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <receive_data_SPI+0x104>)
 8000e2c:	f005 f8b0 	bl	8005f90 <iprintf>
	return received_data;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	46b5      	mov	sp, r6
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3724      	adds	r7, #36	; 0x24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e3e:	bf00      	nop
 8000e40:	48000400 	.word	0x48000400
 8000e44:	20000204 	.word	0x20000204
 8000e48:	08007d80 	.word	0x08007d80

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e52:	f000 fbdb 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e56:	f000 f833 	bl	8000ec0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e5a:	f000 f887 	bl	8000f6c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5e:	f000 f92d 	bl	80010bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e62:	f000 f8a1 	bl	8000fa8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e66:	f000 f8db 	bl	8001020 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	201c      	movs	r0, #28
 8000e70:	f000 fd71 	bl	8001956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e74:	201c      	movs	r0, #28
 8000e76:	f000 fd88 	bl	800198a <HAL_NVIC_EnableIRQ>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 while(!finished)
 8000e7a:	e017      	b.n	8000eac <main+0x60>
	 {
		 send_settings_spi(1000, 10, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	210a      	movs	r1, #10
 8000e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e84:	f7ff fef8 	bl	8000c78 <send_settings_spi>
		 HAL_Delay(10);
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f000 fc45 	bl	8001718 <HAL_Delay>
		 lightsleep_test(1000, 10);
 8000e8e:	210a      	movs	r1, #10
 8000e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e94:	f7ff fe9a 	bl	8000bcc <lightsleep_test>
		 uint16_t *data = receive_data_SPI(10);
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f7ff ff53 	bl	8000d44 <receive_data_SPI>
 8000e9e:	6078      	str	r0, [r7, #4]
	     // Free the allocated memory for received_data
		 free(data);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f004 fb0d 	bl	80054c0 <free>
		 finished = true;
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <main+0x70>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
	 while(!finished)
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <main+0x70>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f083 0301 	eor.w	r3, r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1e0      	bne.n	8000e7c <main+0x30>
 8000eba:	e7f7      	b.n	8000eac <main+0x60>
 8000ebc:	200002b4 	.word	0x200002b4

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09a      	sub	sp, #104	; 0x68
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2248      	movs	r2, #72	; 0x48
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 fb0c 	bl	80054ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <SystemClock_Config+0xa8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <SystemClock_Config+0xa8>)
 8000ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <SystemClock_Config+0xa8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f02:	2303      	movs	r3, #3
 8000f04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f12:	2340      	movs	r3, #64	; 0x40
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fafc 	bl	800251c <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f2a:	f000 f941 	bl	80011b0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f2e:	236f      	movs	r3, #111	; 0x6f
 8000f30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f32:	2302      	movs	r3, #2
 8000f34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fe58 	bl	8002c04 <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f5a:	f000 f929 	bl	80011b0 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3768      	adds	r7, #104	; 0x68
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	58000400 	.word	0x58000400

08000f6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2250      	movs	r2, #80	; 0x50
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fab7 	bl	80054ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f82:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fa49 	bl	8003426 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000f9a:	f000 f909 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	; 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fae:	4a1b      	ldr	r2, [pc, #108]	; (800101c <MX_SPI1_Init+0x74>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_SPI1_Init+0x70>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_SPI1_Init+0x70>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_SPI1_Init+0x70>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_SPI1_Init+0x70>)
 8001000:	2208      	movs	r2, #8
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_SPI1_Init+0x70>)
 8001006:	f002 fc95 	bl	8003934 <HAL_SPI_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8001010:	f000 f8ce 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000204 	.word	0x20000204
 800101c:	40013000 	.word	0x40013000

08001020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001040:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001044:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001048:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800104c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001056:	f240 32e7 	movw	r2, #999	; 0x3e7
 800105a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_TIM2_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_TIM2_Init+0x98>)
 800106a:	f003 fb73 	bl	8004754 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001074:	f000 f89c 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001086:	f003 fd59 	bl	8004b3c <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001090:	f000 f88e 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_TIM2_Init+0x98>)
 80010a2:	f003 ff3d 	bl	8004f20 <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80010ac:	f000 f880 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000268 	.word	0x20000268

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	2004      	movs	r0, #4
 80010d2:	f7ff fd41 	bl	8000b58 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fd3e 	bl	8000b58 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	2002      	movs	r0, #2
 80010de:	f7ff fd3b 	bl	8000b58 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	2008      	movs	r0, #8
 80010e4:	f7ff fd38 	bl	8000b58 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIMER_PIN_Pin|RESPONSE_PIN_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2105      	movs	r1, #5
 80010ec:	482d      	ldr	r0, [pc, #180]	; (80011a4 <MX_GPIO_Init+0xe8>)
 80010ee:	f000 fdef 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2133      	movs	r1, #51	; 0x33
 80010f6:	482c      	ldr	r0, [pc, #176]	; (80011a8 <MX_GPIO_Init+0xec>)
 80010f8:	f000 fdea 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TIMER_PIN_Pin RESPONSE_PIN_Pin */
  GPIO_InitStruct.Pin = TIMER_PIN_Pin|RESPONSE_PIN_Pin;
 80010fc:	2305      	movs	r3, #5
 80010fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001104:	2302      	movs	r3, #2
 8001106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4619      	mov	r1, r3
 8001110:	4824      	ldr	r0, [pc, #144]	; (80011a4 <MX_GPIO_Init+0xe8>)
 8001112:	f000 fc55 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_PIN_Pin */
  GPIO_InitStruct.Pin = IRQ_PIN_Pin;
 8001116:	2302      	movs	r3, #2
 8001118:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001120:	2302      	movs	r3, #2
 8001122:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IRQ_PIN_GPIO_Port, &GPIO_InitStruct);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	481e      	ldr	r0, [pc, #120]	; (80011a4 <MX_GPIO_Init+0xe8>)
 800112a:	f000 fc49 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112e:	2310      	movs	r3, #16
 8001130:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4819      	ldr	r0, [pc, #100]	; (80011a4 <MX_GPIO_Init+0xe8>)
 8001140:	f000 fc3e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin CHIP_SELECT_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|CHIP_SELECT_Pin|LD1_Pin;
 8001144:	2333      	movs	r3, #51	; 0x33
 8001146:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <MX_GPIO_Init+0xec>)
 800115a:	f000 fc31 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 B3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 800115e:	2303      	movs	r3, #3
 8001160:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <MX_GPIO_Init+0xf0>)
 8001170:	f000 fc26 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECEIVE_READY_Pin */
  GPIO_InitStruct.Pin = RECEIVE_READY_Pin;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(RECEIVE_READY_GPIO_Port, &GPIO_InitStruct);
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <MX_GPIO_Init+0xec>)
 8001186:	f000 fc1b 	bl	80019c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2007      	movs	r0, #7
 8001190:	f000 fbe1 	bl	8001956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001194:	2007      	movs	r0, #7
 8001196:	f000 fbf8 	bl	800198a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000400 	.word	0x48000400
 80011ac:	48000c00 	.word	0x48000c00

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>

080011ba <LL_AHB2_GRP1_EnableClock>:
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4013      	ands	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4313      	orrs	r3, r2
 8001202:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001210:	68fb      	ldr	r3, [r7, #12]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800122c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4313      	orrs	r3, r2
 8001234:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4013      	ands	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_SPI_MspInit+0x5c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d117      	bne.n	80012b2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001282:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001286:	f7ff ffca 	bl	800121e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff ff95 	bl	80011ba <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001290:	23f0      	movs	r3, #240	; 0xf0
 8001292:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012a0:	2305      	movs	r3, #5
 80012a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f000 fb87 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40013000 	.word	0x40013000

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d0:	d10a      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff ff8a 	bl	80011ec <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	201c      	movs	r0, #28
 80012de:	f000 fb3a 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e2:	201c      	movs	r0, #28
 80012e4:	f000 fb51 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133c:	f000 f9c0 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_PIN_Pin);
 8001348:	2002      	movs	r0, #2
 800134a:	f000 fcd9 	bl	8001d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <TIM2_IRQHandler+0x10>)
 800135a:	f003 fad0 	bl	80048fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000268 	.word	0x20000268

08001368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_kill>:

int _kill(int pid, int sig)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001382:	f003 fe4b 	bl	800501c <__errno>
 8001386:	4603      	mov	r3, r0
 8001388:	2216      	movs	r2, #22
 800138a:	601a      	str	r2, [r3, #0]
  return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_exit>:

void _exit (int status)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ffe7 	bl	8001378 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013aa:	e7fe      	b.n	80013aa <_exit+0x12>

080013ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e00a      	b.n	80013d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013be:	f3af 8000 	nop.w
 80013c2:	4601      	mov	r1, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbf0      	blt.n	80013be <_read+0x12>
  }

  return len;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e009      	b.n	800140c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60ba      	str	r2, [r7, #8]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf1      	blt.n	80013f8 <_write+0x12>
  }
  return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_close>:

int _close(int file)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001446:	605a      	str	r2, [r3, #4]
  return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_isatty>:

int _isatty(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f003 fdb0 	bl	800501c <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20030000 	.word	0x20030000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	200002b8 	.word	0x200002b8
 80014f0:	200002d0 	.word	0x200002d0

080014f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <SystemInit+0x98>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a23      	ldr	r2, [pc, #140]	; (800158c <SystemInit+0x98>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001520:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <SystemInit+0x9c>)
 800152e:	4013      	ands	r3, r2
 8001530:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153e:	f023 0305 	bic.w	r3, r3, #5
 8001542:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800154e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <SystemInit+0xa0>)
 8001560:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <SystemInit+0xa0>)
 8001568:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001578:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	faf6fefb 	.word	0xfaf6fefb
 8001594:	22041000 	.word	0x22041000

08001598 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001598:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159c:	3304      	adds	r3, #4

0800159e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015a2:	d3f9      	bcc.n	8001598 <CopyDataInit>
  bx lr
 80015a4:	4770      	bx	lr

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015a6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015a8:	3004      	adds	r0, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015aa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>
  bx lr
 80015ae:	4770      	bx	lr

080015b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b4:	f7ff ff9e 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <LoopForever+0x6>)
 80015ba:	490c      	ldr	r1, [pc, #48]	; (80015ec <LoopForever+0xa>)
 80015bc:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <LoopForever+0xe>)
 80015be:	2300      	movs	r3, #0
 80015c0:	f7ff ffed 	bl	800159e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <LoopForever+0x12>)
 80015c6:	490c      	ldr	r1, [pc, #48]	; (80015f8 <LoopForever+0x16>)
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <LoopForever+0x1a>)
 80015ca:	2300      	movs	r3, #0
 80015cc:	f7ff ffe7 	bl	800159e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <LoopForever+0x1e>)
 80015d2:	490c      	ldr	r1, [pc, #48]	; (8001604 <LoopForever+0x22>)
 80015d4:	2300      	movs	r3, #0
 80015d6:	f7ff ffe8 	bl	80015aa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015da:	f003 fedd 	bl	8005398 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015de:	f7ff fc35 	bl	8000e4c <main>

080015e2 <LoopForever>:

LoopForever:
  b LoopForever
 80015e2:	e7fe      	b.n	80015e2 <LoopForever>
  ldr   r0, =_estack
 80015e4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80015e8:	20000008 	.word	0x20000008
 80015ec:	200001e8 	.word	0x200001e8
 80015f0:	08008218 	.word	0x08008218
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80015f4:	20030000 	.word	0x20030000
 80015f8:	20030000 	.word	0x20030000
 80015fc:	080083f8 	.word	0x080083f8
  INIT_BSS _sbss, _ebss
 8001600:	200001e8 	.word	0x200001e8
 8001604:	200002d0 	.word	0x200002d0

08001608 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_Init+0x3c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_Init+0x3c>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001622:	2003      	movs	r0, #3
 8001624:	f000 f98c 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001628:	2000      	movs	r0, #0
 800162a:	f000 f80f 	bl	800164c <HAL_InitTick>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	e001      	b.n	800163e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800163a:	f7ff fe09 	bl	8001250 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800163e:	79fb      	ldrb	r3, [r7, #7]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	58004000 	.word	0x58004000

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_InitTick+0x6c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d024      	beq.n	80016aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001660:	f001 fc7c 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_InitTick+0x6c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4619      	mov	r1, r3
 800166c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001670:	fbb3 f3f1 	udiv	r3, r3, r1
 8001674:	fbb2 f3f3 	udiv	r3, r2, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f994 	bl	80019a6 <HAL_SYSTICK_Config>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10f      	bne.n	80016a4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	d809      	bhi.n	800169e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168a:	2200      	movs	r2, #0
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001692:	f000 f960 	bl	8001956 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_InitTick+0x70>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e007      	b.n	80016ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e004      	b.n	80016ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e001      	b.n	80016ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000014 	.word	0x20000014
 80016bc:	20000010 	.word	0x20000010

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000014 	.word	0x20000014
 80016e4:	200002bc 	.word	0x200002bc

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200002bc 	.word	0x200002bc

08001700 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTickPrio+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000010 	.word	0x20000010

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffe2 	bl	80016e8 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffd2 	bl	80016e8 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000014 	.word	0x20000014

08001760 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_SuspendTick+0x1c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_SuspendTick+0x1c>)
 800176a:	f023 0302 	bic.w	r3, r3, #2
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_ResumeTick+0x1c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_ResumeTick+0x1c>)
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff29 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff40 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff33 	bl	8001804 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa4 	bl	80018fc <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e14c      	b.n	8001c6a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 813e 	beq.w	8001c64 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d005      	beq.n	8001a00 <HAL_GPIO_Init+0x40>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 0201 	and.w	r2, r3, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d017      	beq.n	8001a9e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d123      	bne.n	8001af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	6939      	ldr	r1, [r7, #16]
 8001aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0203 	and.w	r2, r3, #3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8098 	beq.w	8001c64 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b34:	4a54      	ldr	r2, [pc, #336]	; (8001c88 <HAL_GPIO_Init+0x2c8>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b5e:	d019      	beq.n	8001b94 <HAL_GPIO_Init+0x1d4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a4a      	ldr	r2, [pc, #296]	; (8001c8c <HAL_GPIO_Init+0x2cc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d013      	beq.n	8001b90 <HAL_GPIO_Init+0x1d0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a49      	ldr	r2, [pc, #292]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00d      	beq.n	8001b8c <HAL_GPIO_Init+0x1cc>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a48      	ldr	r2, [pc, #288]	; (8001c94 <HAL_GPIO_Init+0x2d4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0x1c8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a47      	ldr	r2, [pc, #284]	; (8001c98 <HAL_GPIO_Init+0x2d8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_GPIO_Init+0x1c4>
 8001b80:	2304      	movs	r3, #4
 8001b82:	e008      	b.n	8001b96 <HAL_GPIO_Init+0x1d6>
 8001b84:	2307      	movs	r3, #7
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x1d6>
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e004      	b.n	8001b96 <HAL_GPIO_Init+0x1d6>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_Init+0x1d6>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_GPIO_Init+0x1d6>
 8001b94:	2300      	movs	r3, #0
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	f002 0203 	and.w	r2, r2, #3
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	4093      	lsls	r3, r2
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ba6:	4938      	ldr	r1, [pc, #224]	; (8001c88 <HAL_GPIO_Init+0x2c8>)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bb4:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bd8:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c02:	4a26      	ldr	r2, [pc, #152]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_GPIO_Init+0x2dc>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f47f aeab 	bne.w	80019d0 <HAL_GPIO_Init+0x10>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	48000400 	.word	0x48000400
 8001c90:	48000800 	.word	0x48000800
 8001c94:	48000c00 	.word	0x48000c00
 8001c98:	48001000 	.word	0x48001000
 8001c9c:	58000800 	.word	0x58000800

08001ca0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	e001      	b.n	8001cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f806 	bl	8001d30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	58000800 	.word	0x58000800

08001d30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	58000400 	.word	0x58000400

08001d68 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d7a:	d104      	bne.n	8001d86 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f842 	bl	8001e08 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f813 	bl	8001db4 <HAL_PWREx_EnterSTOP0Mode>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	58000400 	.word	0x58000400

08001db4 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001dc4:	f023 0307 	bic.w	r3, r3, #7
 8001dc8:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001ddc:	bf30      	wfi
 8001dde:	e002      	b.n	8001de6 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001de0:	bf40      	sev
    __WFE();
 8001de2:	bf20      	wfe
    __WFE();
 8001de4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6113      	str	r3, [r2, #16]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	58000400 	.word	0x58000400
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 0307 	bic.w	r3, r3, #7
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001e34:	bf30      	wfi
 8001e36:	e002      	b.n	8001e3e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001e38:	bf40      	sev
    __WFE();
 8001e3a:	bf20      	wfe
    __WFE();
 8001e3c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6113      	str	r3, [r2, #16]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	58000400 	.word	0x58000400
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e72:	d101      	bne.n	8001e78 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ed2:	d101      	bne.n	8001ed8 <LL_RCC_HSE_IsReady+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_RCC_HSE_IsReady+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f32:	d101      	bne.n	8001f38 <LL_RCC_HSI_IsReady+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <LL_RCC_HSI_IsReady+0x1a>
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d101      	bne.n	8001fca <LL_RCC_HSI48_IsReady+0x18>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_RCC_HSI48_IsReady+0x1a>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d101      	bne.n	8002076 <LL_RCC_LSE_IsReady+0x18>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <LL_RCC_LSE_IsReady+0x1a>
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d101      	bne.n	80020de <LL_RCC_LSI1_IsReady+0x18>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <LL_RCC_LSI1_IsReady+0x1a>
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80020ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b08      	cmp	r3, #8
 8002140:	d101      	bne.n	8002146 <LL_RCC_LSI2_IsReady+0x18>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <LL_RCC_LSI2_IsReady+0x1a>
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002162:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d101      	bne.n	80021d2 <LL_RCC_MSI_IsReady+0x16>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_RCC_MSI_IsReady+0x18>
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002216:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2bb0      	cmp	r3, #176	; 0xb0
 800221c:	d901      	bls.n	8002222 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800221e:	23b0      	movs	r3, #176	; 0xb0
 8002220:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002222:	687b      	ldr	r3, [r7, #4]
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 0203 	bic.w	r2, r3, #3
 800226c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022fe:	f023 020f 	bic.w	r2, r3, #15
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800232e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d0:	6013      	str	r3, [r2, #0]
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ee:	d101      	bne.n	80023f4 <LL_RCC_PLL_IsReady+0x18>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <LL_RCC_PLL_IsReady+0x1a>
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0303 	and.w	r3, r3, #3
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d101      	bne.n	800247a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800249a:	d101      	bne.n	80024a0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d101      	bne.n	80024c6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024e4:	d101      	bne.n	80024ea <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002504:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002508:	d101      	bne.n	800250e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b08d      	sub	sp, #52	; 0x34
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e363      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 808d 	beq.w	8002656 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253c:	f7ff fea1 	bl	8002282 <LL_RCC_GetSysClkSource>
 8002540:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002542:	f7ff ff82 	bl	800244a <LL_RCC_PLL_GetMainSource>
 8002546:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x3e>
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	2b0c      	cmp	r3, #12
 8002552:	d147      	bne.n	80025e4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	2b01      	cmp	r3, #1
 8002558:	d144      	bne.n	80025e4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e347      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800256a:	f7ff fe4c 	bl	8002206 <LL_RCC_MSI_GetRange>
 800256e:	4603      	mov	r3, r0
 8002570:	429c      	cmp	r4, r3
 8002572:	d914      	bls.n	800259e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fd03 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e336      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe26 	bl	80021de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fe4a 	bl	8002230 <LL_RCC_MSI_SetCalibTrimming>
 800259c:	e013      	b.n	80025c6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fe1b 	bl	80021de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fe3f 	bl	8002230 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fce4 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e317      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025c6:	f000 fcc9 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4aa4      	ldr	r2, [pc, #656]	; (8002860 <HAL_RCC_OscConfig+0x344>)
 80025ce:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025d0:	4ba4      	ldr	r3, [pc, #656]	; (8002864 <HAL_RCC_OscConfig+0x348>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff f839 	bl	800164c <HAL_InitTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d039      	beq.n	8002654 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e308      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01e      	beq.n	800262a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ec:	f7ff fdc8 	bl	8002180 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025f0:	f7ff f87a 	bl	80016e8 <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f8:	f7ff f876 	bl	80016e8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e2f5      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800260a:	f7ff fdd7 	bl	80021bc <LL_RCC_MSI_IsReady>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f1      	beq.n	80025f8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fde0 	bl	80021de <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fe04 	bl	8002230 <LL_RCC_MSI_SetCalibTrimming>
 8002628:	e015      	b.n	8002656 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800262a:	f7ff fdb8 	bl	800219e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800262e:	f7ff f85b 	bl	80016e8 <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002636:	f7ff f857 	bl	80016e8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e2d6      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002648:	f7ff fdb8 	bl	80021bc <LL_RCC_MSI_IsReady>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f1      	bne.n	8002636 <HAL_RCC_OscConfig+0x11a>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002654:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d047      	beq.n	80026f2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002662:	f7ff fe0e 	bl	8002282 <LL_RCC_GetSysClkSource>
 8002666:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002668:	f7ff feef 	bl	800244a <LL_RCC_PLL_GetMainSource>
 800266c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x164>
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d108      	bne.n	800268c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d134      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e2b4      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d102      	bne.n	800269c <HAL_RCC_OscConfig+0x180>
 8002696:	f7ff fbf5 	bl	8001e84 <LL_RCC_HSE_Enable>
 800269a:	e001      	b.n	80026a0 <HAL_RCC_OscConfig+0x184>
 800269c:	f7ff fc01 	bl	8001ea2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d012      	beq.n	80026ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7ff f81e 	bl	80016e8 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff f81a 	bl	80016e8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e299      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80026c2:	f7ff fbfd 	bl	8001ec0 <LL_RCC_HSE_IsReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f1      	beq.n	80026b0 <HAL_RCC_OscConfig+0x194>
 80026cc:	e011      	b.n	80026f2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7ff f80b 	bl	80016e8 <HAL_GetTick>
 80026d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d6:	f7ff f807 	bl	80016e8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b64      	cmp	r3, #100	; 0x64
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e286      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80026e8:	f7ff fbea 	bl	8001ec0 <LL_RCC_HSE_IsReady>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f1      	bne.n	80026d6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04c      	beq.n	8002798 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	f7ff fdc0 	bl	8002282 <LL_RCC_GetSysClkSource>
 8002702:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002704:	f7ff fea1 	bl	800244a <LL_RCC_PLL_GetMainSource>
 8002708:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d005      	beq.n	800271c <HAL_RCC_OscConfig+0x200>
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d10e      	bne.n	8002734 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d10b      	bne.n	8002734 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e266      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fc09 	bl	8001f44 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002732:	e031      	b.n	8002798 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d019      	beq.n	8002770 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	f7ff fbd2 	bl	8001ee4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe ffd2 	bl	80016e8 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002748:	f7fe ffce 	bl	80016e8 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e24d      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800275a:	f7ff fbe1 	bl	8001f20 <LL_RCC_HSI_IsReady>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f1      	beq.n	8002748 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fbeb 	bl	8001f44 <LL_RCC_HSI_SetCalibTrimming>
 800276e:	e013      	b.n	8002798 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002770:	f7ff fbc7 	bl	8001f02 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe ffb8 	bl	80016e8 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277c:	f7fe ffb4 	bl	80016e8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e233      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800278e:	f7ff fbc7 	bl	8001f20 <LL_RCC_HSI_IsReady>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f1      	bne.n	800277c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a3 	beq.w	80028f8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d076      	beq.n	80028a8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d046      	beq.n	8002854 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80027c6:	f7ff fc7e 	bl	80020c6 <LL_RCC_LSI1_IsReady>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d113      	bne.n	80027f8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80027d0:	f7ff fc57 	bl	8002082 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027d4:	f7fe ff88 	bl	80016e8 <HAL_GetTick>
 80027d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027dc:	f7fe ff84 	bl	80016e8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e203      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80027ee:	f7ff fc6a 	bl	80020c6 <LL_RCC_LSI1_IsReady>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f1      	beq.n	80027dc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80027f8:	f7ff fc77 	bl	80020ea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe ff74 	bl	80016e8 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002804:	f7fe ff70 	bl	80016e8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b03      	cmp	r3, #3
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1ef      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002816:	f7ff fc8a 	bl	800212e <LL_RCC_LSI2_IsReady>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f1      	beq.n	8002804 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fc94 	bl	8002152 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800282a:	f7ff fc3b 	bl	80020a4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe ff5b 	bl	80016e8 <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002836:	f7fe ff57 	bl	80016e8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1d6      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002848:	f7ff fc3d 	bl	80020c6 <LL_RCC_LSI1_IsReady>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f1      	bne.n	8002836 <HAL_RCC_OscConfig+0x31a>
 8002852:	e051      	b.n	80028f8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002854:	f7ff fc15 	bl	8002082 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe ff46 	bl	80016e8 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800285e:	e00c      	b.n	800287a <HAL_RCC_OscConfig+0x35e>
 8002860:	2000000c 	.word	0x2000000c
 8002864:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002868:	f7fe ff3e 	bl	80016e8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1bd      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800287a:	f7ff fc24 	bl	80020c6 <LL_RCC_LSI1_IsReady>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f1      	beq.n	8002868 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002884:	f7ff fc42 	bl	800210c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800288a:	f7fe ff2d 	bl	80016e8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1ac      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800289c:	f7ff fc47 	bl	800212e <LL_RCC_LSI2_IsReady>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f1      	bne.n	800288a <HAL_RCC_OscConfig+0x36e>
 80028a6:	e027      	b.n	80028f8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80028a8:	f7ff fc30 	bl	800210c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fe ff1c 	bl	80016e8 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028b4:	f7fe ff18 	bl	80016e8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e197      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80028c6:	f7ff fc32 	bl	800212e <LL_RCC_LSI2_IsReady>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f1      	bne.n	80028b4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80028d0:	f7ff fbe8 	bl	80020a4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe ff08 	bl	80016e8 <HAL_GetTick>
 80028d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028dc:	f7fe ff04 	bl	80016e8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e183      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80028ee:	f7ff fbea 	bl	80020c6 <LL_RCC_LSI1_IsReady>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f1      	bne.n	80028dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d05b      	beq.n	80029bc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002904:	4ba7      	ldr	r3, [pc, #668]	; (8002ba4 <HAL_RCC_OscConfig+0x688>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d114      	bne.n	800293a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002910:	f7ff fa1a 	bl	8001d48 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002914:	f7fe fee8 	bl	80016e8 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7fe fee4 	bl	80016e8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e163      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292e:	4b9d      	ldr	r3, [pc, #628]	; (8002ba4 <HAL_RCC_OscConfig+0x688>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d102      	bne.n	8002948 <HAL_RCC_OscConfig+0x42c>
 8002942:	f7ff fb48 	bl	8001fd6 <LL_RCC_LSE_Enable>
 8002946:	e00c      	b.n	8002962 <HAL_RCC_OscConfig+0x446>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d104      	bne.n	800295a <HAL_RCC_OscConfig+0x43e>
 8002950:	f7ff fb63 	bl	800201a <LL_RCC_LSE_EnableBypass>
 8002954:	f7ff fb3f 	bl	8001fd6 <LL_RCC_LSE_Enable>
 8002958:	e003      	b.n	8002962 <HAL_RCC_OscConfig+0x446>
 800295a:	f7ff fb4d 	bl	8001ff8 <LL_RCC_LSE_Disable>
 800295e:	f7ff fb6d 	bl	800203c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d014      	beq.n	8002994 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296a:	f7fe febd 	bl	80016e8 <HAL_GetTick>
 800296e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe feb9 	bl	80016e8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e136      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002988:	f7ff fb69 	bl	800205e <LL_RCC_LSE_IsReady>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0ef      	beq.n	8002972 <HAL_RCC_OscConfig+0x456>
 8002992:	e013      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe fea8 	bl	80016e8 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fe fea4 	bl	80016e8 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e121      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80029b2:	f7ff fb54 	bl	800205e <LL_RCC_LSE_IsReady>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ef      	bne.n	800299c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d014      	beq.n	80029fa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029d0:	f7ff facd 	bl	8001f6e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fe88 	bl	80016e8 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029dc:	f7fe fe84 	bl	80016e8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e103      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80029ee:	f7ff fae0 	bl	8001fb2 <LL_RCC_HSI48_IsReady>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f1      	beq.n	80029dc <HAL_RCC_OscConfig+0x4c0>
 80029f8:	e013      	b.n	8002a22 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029fa:	f7ff fac9 	bl	8001f90 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fe73 	bl	80016e8 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a06:	f7fe fe6f 	bl	80016e8 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0ee      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a18:	f7ff facb 	bl	8001fb2 <LL_RCC_HSI48_IsReady>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f1      	bne.n	8002a06 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80e4 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2c:	f7ff fc29 	bl	8002282 <LL_RCC_GetSysClkSource>
 8002a30:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	f040 80b4 	bne.w	8002bac <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0203 	and.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d123      	bne.n	8002a9a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d11c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d114      	bne.n	8002a9a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d10d      	bne.n	8002a9a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d05d      	beq.n	8002b56 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d058      	beq.n	8002b52 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0a1      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ab2:	f7ff fc84 	bl	80023be <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab6:	f7fe fe17 	bl	80016e8 <HAL_GetTick>
 8002aba:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe fe13 	bl	80016e8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e092      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ef      	bne.n	8002abe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_RCC_OscConfig+0x68c>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002af0:	4311      	orrs	r1, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af6:	0212      	lsls	r2, r2, #8
 8002af8:	4311      	orrs	r1, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b04:	4311      	orrs	r1, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b14:	f7ff fc44 	bl	80023a0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b28:	f7fe fdde 	bl	80016e8 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe fdda 	bl	80016e8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e059      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ef      	beq.n	8002b30 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b50:	e050      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e04f      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d147      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b64:	f7ff fc1c 	bl	80023a0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b78:	f7fe fdb6 	bl	80016e8 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fdb2 	bl	80016e8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e031      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <HAL_RCC_OscConfig+0x664>
 8002ba0:	e028      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6d8>
 8002ba2:	bf00      	nop
 8002ba4:	58000400 	.word	0x58000400
 8002ba8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d01e      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	f7ff fc04 	bl	80023be <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fd97 	bl	80016e8 <HAL_GetTick>
 8002bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fd93 	bl	80016e8 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e012      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ef      	bne.n	8002bbe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_OscConfig+0x6e4>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]
 8002bee:	e001      	b.n	8002bf4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3734      	adds	r7, #52	; 0x34
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd90      	pop	{r4, r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	eefefffc 	.word	0xeefefffc

08002c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e12d      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b98      	ldr	r3, [pc, #608]	; (8002e7c <HAL_RCC_ClockConfig+0x278>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d91b      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b95      	ldr	r3, [pc, #596]	; (8002e7c <HAL_RCC_ClockConfig+0x278>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 0207 	bic.w	r2, r3, #7
 8002c2e:	4993      	ldr	r1, [pc, #588]	; (8002e7c <HAL_RCC_ClockConfig+0x278>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c36:	f7fe fd57 	bl	80016e8 <HAL_GetTick>
 8002c3a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c3e:	f7fe fd53 	bl	80016e8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e111      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c50:	4b8a      	ldr	r3, [pc, #552]	; (8002e7c <HAL_RCC_ClockConfig+0x278>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d1ef      	bne.n	8002c3e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d016      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fb13 	bl	800229a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c74:	f7fe fd38 	bl	80016e8 <HAL_GetTick>
 8002c78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c7c:	f7fe fd34 	bl	80016e8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e0f2      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002c8e:	f7ff fbe8 	bl	8002462 <LL_RCC_IsActiveFlag_HPRE>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f1      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d016      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fb0a 	bl	80022c2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cae:	f7fe fd1b 	bl	80016e8 <HAL_GetTick>
 8002cb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cb6:	f7fe fd17 	bl	80016e8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0d5      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cc8:	f7ff fbdd 	bl	8002486 <LL_RCC_IsActiveFlag_C2HPRE>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f1      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d016      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fb03 	bl	80022ee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ce8:	f7fe fcfe 	bl	80016e8 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cf0:	f7fe fcfa 	bl	80016e8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0b8      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d02:	f7ff fbd3 	bl	80024ac <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f1      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d016      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fafd 	bl	800231c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d22:	f7fe fce1 	bl	80016e8 <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d2a:	f7fe fcdd 	bl	80016e8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e09b      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d3c:	f7ff fbc9 	bl	80024d2 <LL_RCC_IsActiveFlag_PPRE1>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f1      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d017      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff faf3 	bl	8002344 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fcc3 	bl	80016e8 <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d66:	f7fe fcbf 	bl	80016e8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e07d      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d78:	f7ff fbbd 	bl	80024f6 <LL_RCC_IsActiveFlag_PPRE2>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f1      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d043      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d106      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002d96:	f7ff f893 	bl	8001ec0 <LL_RCC_HSE_IsReady>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d11e      	bne.n	8002dde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e067      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002dac:	f7ff fb16 	bl	80023dc <LL_RCC_PLL_IsReady>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d113      	bne.n	8002dde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e05c      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002dc2:	f7ff f9fb 	bl	80021bc <LL_RCC_MSI_IsReady>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d108      	bne.n	8002dde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e051      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002dd0:	f7ff f8a6 	bl	8001f20 <LL_RCC_HSI_IsReady>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e04a      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fa39 	bl	800225a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe fc7e 	bl	80016e8 <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe fc7a 	bl	80016e8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e036      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	f7ff fa3c 	bl	8002282 <LL_RCC_GetSysClkSource>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d1ec      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCC_ClockConfig+0x278>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d21b      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_RCC_ClockConfig+0x278>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 0207 	bic.w	r2, r3, #7
 8002e2c:	4913      	ldr	r1, [pc, #76]	; (8002e7c <HAL_RCC_ClockConfig+0x278>)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e34:	f7fe fc58 	bl	80016e8 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e3c:	f7fe fc54 	bl	80016e8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e012      	b.n	8002e74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_ClockConfig+0x278>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1ef      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e5c:	f000 f87e 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_RCC_ClockConfig+0x27c>)
 8002e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002e66:	f7fe fc4b 	bl	8001700 <HAL_GetTickPrio>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe fbed 	bl	800164c <HAL_InitTick>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	58004000 	.word	0x58004000
 8002e80:	2000000c 	.word	0x2000000c

08002e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8a:	f7ff f9fa 	bl	8002282 <LL_RCC_GetSysClkSource>
 8002e8e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002e96:	f7ff f9b6 	bl	8002206 <LL_RCC_MSI_GetRange>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e04b      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d102      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eb2:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e045      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ebe:	f7fe ffcf 	bl	8001e60 <LL_RCC_HSE_IsEnabledDiv2>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d102      	bne.n	8002ece <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e03a      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e037      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002ed4:	f7ff fab9 	bl	800244a <LL_RCC_PLL_GetMainSource>
 8002ed8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d003      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x64>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x6a>
 8002ee6:	e00d      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eea:	60bb      	str	r3, [r7, #8]
        break;
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002eee:	f7fe ffb7 	bl	8001e60 <LL_RCC_HSE_IsEnabledDiv2>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002efa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002efc:	e00d      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f00:	60bb      	str	r3, [r7, #8]
        break;
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f04:	f7ff f97f 	bl	8002206 <LL_RCC_MSI_GetRange>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	60bb      	str	r3, [r7, #8]
        break;
 8002f18:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002f1a:	f7ff fa71 	bl	8002400 <LL_RCC_PLL_GetN>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	fb03 f402 	mul.w	r4, r3, r2
 8002f26:	f7ff fa84 	bl	8002432 <LL_RCC_PLL_GetDivider>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	3301      	adds	r3, #1
 8002f30:	fbb4 f4f3 	udiv	r4, r4, r3
 8002f34:	f7ff fa71 	bl	800241a <LL_RCC_PLL_GetR>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	0f5b      	lsrs	r3, r3, #29
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f42:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002f44:	68fb      	ldr	r3, [r7, #12]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	08007df0 	.word	0x08007df0
 8002f54:	00f42400 	.word	0x00f42400
 8002f58:	01e84800 	.word	0x01e84800

08002f5c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f5c:	b598      	push	{r3, r4, r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002f60:	f7ff ff90 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002f64:	4604      	mov	r4, r0
 8002f66:	f7ff fa01 	bl	800236c <LL_RCC_GetAHBPrescaler>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	4a03      	ldr	r2, [pc, #12]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x24>)
 8002f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f78:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd98      	pop	{r3, r4, r7, pc}
 8002f80:	08007db0 	.word	0x08007db0

08002f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2bb0      	cmp	r3, #176	; 0xb0
 8002f90:	d903      	bls.n	8002f9a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e007      	b.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002faa:	f7ff f9eb 	bl	8002384 <LL_RCC_GetAHB4Prescaler>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	0c9c      	lsrs	r4, r3, #18
 8002fce:	f7fe fee3 	bl	8001d98 <HAL_PWREx_GetVoltageRange>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f000 f80c 	bl	8002ff4 <RCC_SetFlashLatency>
 8002fdc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd90      	pop	{r4, r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	08007df0 	.word	0x08007df0
 8002fec:	08007db0 	.word	0x08007db0
 8002ff0:	431bde83 	.word	0x431bde83

08002ff4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b093      	sub	sp, #76	; 0x4c
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002ffe:	4b37      	ldr	r3, [pc, #220]	; (80030dc <RCC_SetFlashLatency+0xe8>)
 8003000:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800300a:	4a35      	ldr	r2, [pc, #212]	; (80030e0 <RCC_SetFlashLatency+0xec>)
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	ca07      	ldmia	r2, {r0, r1, r2}
 8003012:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003016:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <RCC_SetFlashLatency+0xf0>)
 8003018:	f107 040c 	add.w	r4, r7, #12
 800301c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800301e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003022:	2300      	movs	r3, #0
 8003024:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302c:	d11a      	bne.n	8003064 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800302e:	2300      	movs	r3, #0
 8003030:	643b      	str	r3, [r7, #64]	; 0x40
 8003032:	e013      	b.n	800305c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	3348      	adds	r3, #72	; 0x48
 800303a:	443b      	add	r3, r7
 800303c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	d807      	bhi.n	8003056 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	3348      	adds	r3, #72	; 0x48
 800304c:	443b      	add	r3, r7
 800304e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003052:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003054:	e020      	b.n	8003098 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003058:	3301      	adds	r3, #1
 800305a:	643b      	str	r3, [r7, #64]	; 0x40
 800305c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305e:	2b03      	cmp	r3, #3
 8003060:	d9e8      	bls.n	8003034 <RCC_SetFlashLatency+0x40>
 8003062:	e019      	b.n	8003098 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003064:	2300      	movs	r3, #0
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003068:	e013      	b.n	8003092 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	3348      	adds	r3, #72	; 0x48
 8003070:	443b      	add	r3, r7
 8003072:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	d807      	bhi.n	800308c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800307c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3348      	adds	r3, #72	; 0x48
 8003082:	443b      	add	r3, r7
 8003084:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003088:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800308a:	e005      	b.n	8003098 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800308c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308e:	3301      	adds	r3, #1
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	2b02      	cmp	r3, #2
 8003096:	d9e8      	bls.n	800306a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003098:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <RCC_SetFlashLatency+0xf4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 0207 	bic.w	r2, r3, #7
 80030a0:	4911      	ldr	r1, [pc, #68]	; (80030e8 <RCC_SetFlashLatency+0xf4>)
 80030a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030a8:	f7fe fb1e 	bl	80016e8 <HAL_GetTick>
 80030ac:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80030ae:	e008      	b.n	80030c2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030b0:	f7fe fb1a 	bl	80016e8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e007      	b.n	80030d2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80030c2:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <RCC_SetFlashLatency+0xf4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1ef      	bne.n	80030b0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	374c      	adds	r7, #76	; 0x4c
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}
 80030da:	bf00      	nop
 80030dc:	08007d84 	.word	0x08007d84
 80030e0:	08007d94 	.word	0x08007d94
 80030e4:	08007da0 	.word	0x08007da0
 80030e8:	58004000 	.word	0x58004000

080030ec <LL_RCC_LSE_IsEnabled>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <LL_RCC_LSE_IsEnabled+0x18>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <LL_RCC_LSE_IsEnabled+0x1a>
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_RCC_LSE_IsReady>:
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b02      	cmp	r3, #2
 8003122:	d101      	bne.n	8003128 <LL_RCC_LSE_IsReady+0x18>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <LL_RCC_LSE_IsReady+0x1a>
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_RCC_SetRFWKPClockSource>:
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800313c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003144:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_RCC_SetSMPSClockSource>:
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4313      	orrs	r3, r2
 800317a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_RCC_SetSMPSPrescaler>:
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800319a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_RCC_SetUSARTClockSource>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80031b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f023 0203 	bic.w	r2, r3, #3
 80031c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_RCC_SetLPUARTClockSource>:
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_RCC_SetI2CClockSource>:
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003214:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003220:	43db      	mvns	r3, r3
 8003222:	401a      	ands	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800322c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <LL_RCC_SetLPTIMClockSource>:
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800324a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	041b      	lsls	r3, r3, #16
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_RCC_SetSAIClockSource>:
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800327e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800328a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_RCC_SetRNGClockSource>:
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80032b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <LL_RCC_SetCLK48ClockSource>:
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80032d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_RCC_SetUSBClockSource>:
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ffe3 	bl	80032ce <LL_RCC_SetCLK48ClockSource>
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <LL_RCC_SetADCClockSource>:
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_RCC_SetRTCClockSource>:
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_RCC_GetRTCClockSource>:
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_RCC_ForceBackupDomainReset>:
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_RCC_PLLSAI1_Enable>:
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033d8:	6013      	str	r3, [r2, #0]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_RCC_PLLSAI1_Disable>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033f6:	6013      	str	r3, [r2, #0]
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <LL_RCC_PLLSAI1_IsReady>:
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003414:	d101      	bne.n	800341a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b088      	sub	sp, #32
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800342e:	2300      	movs	r3, #0
 8003430:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003432:	2300      	movs	r3, #0
 8003434:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d034      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800344a:	d021      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800344c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003450:	d81b      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003456:	d01d      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800345c:	d815      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003466:	d110      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003476:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003478:	e00d      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f947 	bl	8003712 <RCCEx_PLLSAI1_ConfigNP>
 8003484:	4603      	mov	r3, r0
 8003486:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003488:	e005      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	77fb      	strb	r3, [r7, #31]
        break;
 800348e:	e002      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003496:	7ffb      	ldrb	r3, [r7, #31]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fee8 	bl	8003276 <LL_RCC_SetSAIClockSource>
 80034a6:	e001      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	7ffb      	ldrb	r3, [r7, #31]
 80034aa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d046      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80034b8:	f7ff ff56 	bl	8003368 <LL_RCC_GetRTCClockSource>
 80034bc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d03c      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80034c8:	f7fe fc3e 	bl	8001d48 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ff30 	bl	800333c <LL_RCC_SetRTCClockSource>
 80034dc:	e02e      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80034de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80034e8:	f7ff ff4b 	bl	8003382 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80034ec:	f7ff ff5a 	bl	80033a4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80034fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003508:	f7ff fdf0 	bl	80030ec <LL_RCC_LSE_IsEnabled>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d114      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003512:	f7fe f8e9 	bl	80016e8 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003518:	e00b      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe f8e5 	bl	80016e8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d902      	bls.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	77fb      	strb	r3, [r7, #31]
              break;
 8003530:	e004      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003532:	f7ff fded 	bl	8003110 <LL_RCC_LSE_IsReady>
 8003536:	4603      	mov	r3, r0
 8003538:	2b01      	cmp	r3, #1
 800353a:	d1ee      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800353c:	7ffb      	ldrb	r3, [r7, #31]
 800353e:	77bb      	strb	r3, [r7, #30]
 8003540:	e001      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	7ffb      	ldrb	r3, [r7, #31]
 8003544:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fe2a 	bl	80031b0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fe35 	bl	80031dc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	d004      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fe5d 	bl	8003242 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d004      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fe52 	bl	8003242 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fe2a 	bl	8003208 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d004      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fe1f 	bl	8003208 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d022      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fe8d 	bl	80032fa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e8:	d107      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80035ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003602:	d10b      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f8dd 	bl	80037c8 <RCCEx_PLLSAI1_ConfigNQ>
 800360e:	4603      	mov	r3, r0
 8003610:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003612:	7ffb      	ldrb	r3, [r7, #31]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003618:	7ffb      	ldrb	r3, [r7, #31]
 800361a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02b      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d008      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363a:	d003      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fe2a 	bl	80032a2 <LL_RCC_SetRNGClockSource>
 800364e:	e00a      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	2000      	movs	r0, #0
 800365c:	f7ff fe21 	bl	80032a2 <LL_RCC_SetRNGClockSource>
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7ff fe34 	bl	80032ce <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800366e:	d107      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d022      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fe3d 	bl	8003310 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800369e:	d107      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ae:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b8:	d10b      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f8dd 	bl	800387e <RCCEx_PLLSAI1_ConfigNR>
 80036c4:	4603      	mov	r3, r0
 80036c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80036ce:	7ffb      	ldrb	r3, [r7, #31]
 80036d0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fd26 	bl	8003134 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fd45 	bl	8003188 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fd2c 	bl	8003160 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003708:	7fbb      	ldrb	r3, [r7, #30]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800371e:	f7ff fe61 	bl	80033e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003722:	f7fd ffe1 	bl	80016e8 <HAL_GetTick>
 8003726:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003728:	e009      	b.n	800373e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800372a:	f7fd ffdd 	bl	80016e8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d902      	bls.n	800373e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e004      	b.n	8003748 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800373e:	f7ff fe60 	bl	8003402 <LL_RCC_PLLSAI1_IsReady>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d137      	bne.n	80037be <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800374e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003762:	4313      	orrs	r3, r2
 8003764:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003778:	4313      	orrs	r3, r2
 800377a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800377c:	f7ff fe23 	bl	80033c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003780:	f7fd ffb2 	bl	80016e8 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003786:	e009      	b.n	800379c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003788:	f7fd ffae 	bl	80016e8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d902      	bls.n	800379c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	73fb      	strb	r3, [r7, #15]
        break;
 800379a:	e004      	b.n	80037a6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800379c:	f7ff fe31 	bl	8003402 <LL_RCC_PLLSAI1_IsReady>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d1f0      	bne.n	8003788 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d108      	bne.n	80037be <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ba:	4313      	orrs	r3, r2
 80037bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80037d4:	f7ff fe06 	bl	80033e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037d8:	f7fd ff86 	bl	80016e8 <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037de:	e009      	b.n	80037f4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037e0:	f7fd ff82 	bl	80016e8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d902      	bls.n	80037f4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	73fb      	strb	r3, [r7, #15]
      break;
 80037f2:	e004      	b.n	80037fe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037f4:	f7ff fe05 	bl	8003402 <LL_RCC_PLLSAI1_IsReady>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d137      	bne.n	8003874 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003818:	4313      	orrs	r3, r2
 800381a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800381c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800382e:	4313      	orrs	r3, r2
 8003830:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003832:	f7ff fdc8 	bl	80033c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003836:	f7fd ff57 	bl	80016e8 <HAL_GetTick>
 800383a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800383c:	e009      	b.n	8003852 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800383e:	f7fd ff53 	bl	80016e8 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d902      	bls.n	8003852 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	73fb      	strb	r3, [r7, #15]
        break;
 8003850:	e004      	b.n	800385c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003852:	f7ff fdd6 	bl	8003402 <LL_RCC_PLLSAI1_IsReady>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d1f0      	bne.n	800383e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003870:	4313      	orrs	r3, r2
 8003872:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800388a:	f7ff fdab 	bl	80033e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800388e:	f7fd ff2b 	bl	80016e8 <HAL_GetTick>
 8003892:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003894:	e009      	b.n	80038aa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003896:	f7fd ff27 	bl	80016e8 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d902      	bls.n	80038aa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	73fb      	strb	r3, [r7, #15]
      break;
 80038a8:	e004      	b.n	80038b4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038aa:	f7ff fdaa 	bl	8003402 <LL_RCC_PLLSAI1_IsReady>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d137      	bne.n	800392a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ce:	4313      	orrs	r3, r2
 80038d0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80038d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e4:	4313      	orrs	r3, r2
 80038e6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80038e8:	f7ff fd6d 	bl	80033c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ec:	f7fd fefc 	bl	80016e8 <HAL_GetTick>
 80038f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038f2:	e009      	b.n	8003908 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f4:	f7fd fef8 	bl	80016e8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d902      	bls.n	8003908 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	73fb      	strb	r3, [r7, #15]
        break;
 8003906:	e004      	b.n	8003912 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003908:	f7ff fd7b 	bl	8003402 <LL_RCC_PLLSAI1_IsReady>
 800390c:	4603      	mov	r3, r0
 800390e:	2b01      	cmp	r3, #1
 8003910:	d1f0      	bne.n	80038f4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d108      	bne.n	800392a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e095      	b.n	8003a72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003956:	d009      	beq.n	800396c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
 800395e:	e005      	b.n	800396c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fc6a 	bl	8001260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ac:	d902      	bls.n	80039b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e002      	b.n	80039ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039c2:	d007      	beq.n	80039d4 <HAL_SPI_Init+0xa0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a16:	ea42 0103 	orr.w	r1, r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	f003 0204 	and.w	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a50:	ea42 0103 	orr.w	r1, r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b088      	sub	sp, #32
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_SPI_Transmit+0x22>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e158      	b.n	8003d4e <HAL_SPI_Transmit+0x2d4>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aa4:	f7fd fe20 	bl	80016e8 <HAL_GetTick>
 8003aa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
 8003abc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003abe:	e13d      	b.n	8003d3c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_SPI_Transmit+0x52>
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ad0:	e134      	b.n	8003d3c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	88fa      	ldrh	r2, [r7, #6]
 8003af0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d10f      	bne.n	8003b3e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d007      	beq.n	8003b5c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b64:	d94b      	bls.n	8003bfe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_SPI_Transmit+0xfa>
 8003b6e:	8afb      	ldrh	r3, [r7, #22]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d13e      	bne.n	8003bf2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	881a      	ldrh	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	1c9a      	adds	r2, r3, #2
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b98:	e02b      	b.n	8003bf2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d112      	bne.n	8003bce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	881a      	ldrh	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	1c9a      	adds	r2, r3, #2
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bcc:	e011      	b.n	8003bf2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bce:	f7fd fd8b 	bl	80016e8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d803      	bhi.n	8003be6 <HAL_SPI_Transmit+0x16c>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be4:	d102      	bne.n	8003bec <HAL_SPI_Transmit+0x172>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bf0:	e0a4      	b.n	8003d3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ce      	bne.n	8003b9a <HAL_SPI_Transmit+0x120>
 8003bfc:	e07c      	b.n	8003cf8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_SPI_Transmit+0x192>
 8003c06:	8afb      	ldrh	r3, [r7, #22]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d170      	bne.n	8003cee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d912      	bls.n	8003c3c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	881a      	ldrh	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	1c9a      	adds	r2, r3, #2
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b02      	subs	r3, #2
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c3a:	e058      	b.n	8003cee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	7812      	ldrb	r2, [r2, #0]
 8003c48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c62:	e044      	b.n	8003cee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d12b      	bne.n	8003cca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d912      	bls.n	8003ca2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	881a      	ldrh	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	1c9a      	adds	r2, r3, #2
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b02      	subs	r3, #2
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ca0:	e025      	b.n	8003cee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	330c      	adds	r3, #12
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cc8:	e011      	b.n	8003cee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cca:	f7fd fd0d 	bl	80016e8 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d803      	bhi.n	8003ce2 <HAL_SPI_Transmit+0x268>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce0:	d102      	bne.n	8003ce8 <HAL_SPI_Transmit+0x26e>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cec:	e026      	b.n	8003d3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1b5      	bne.n	8003c64 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	6839      	ldr	r1, [r7, #0]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fce3 	bl	80046c8 <SPI_EndRxTxTransaction>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e000      	b.n	8003d3c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003d3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b088      	sub	sp, #32
 8003d5a:	af02      	add	r7, sp, #8
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d72:	d112      	bne.n	8003d9a <HAL_SPI_Receive+0x44>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10e      	bne.n	8003d9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2204      	movs	r2, #4
 8003d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f910 	bl	8003fb6 <HAL_SPI_TransmitReceive>
 8003d96:	4603      	mov	r3, r0
 8003d98:	e109      	b.n	8003fae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_SPI_Receive+0x52>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e102      	b.n	8003fae <HAL_SPI_Receive+0x258>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003db0:	f7fd fc9a 	bl	80016e8 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d002      	beq.n	8003dc8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dc6:	e0e9      	b.n	8003f9c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_SPI_Receive+0x7e>
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dd8:	e0e0      	b.n	8003f9c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e24:	d908      	bls.n	8003e38 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	e007      	b.n	8003e48 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e46:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e50:	d10f      	bne.n	8003e72 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d007      	beq.n	8003e90 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e98:	d867      	bhi.n	8003f6a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e9a:	e030      	b.n	8003efe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d117      	bne.n	8003eda <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f103 020c 	add.w	r2, r3, #12
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ed8:	e011      	b.n	8003efe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eda:	f7fd fc05 	bl	80016e8 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d803      	bhi.n	8003ef2 <HAL_SPI_Receive+0x19c>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef0:	d102      	bne.n	8003ef8 <HAL_SPI_Receive+0x1a2>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003efc:	e04e      	b.n	8003f9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1c8      	bne.n	8003e9c <HAL_SPI_Receive+0x146>
 8003f0a:	e034      	b.n	8003f76 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d115      	bne.n	8003f46 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	b292      	uxth	r2, r2
 8003f26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f44:	e011      	b.n	8003f6a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f46:	f7fd fbcf 	bl	80016e8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d803      	bhi.n	8003f5e <HAL_SPI_Receive+0x208>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5c:	d102      	bne.n	8003f64 <HAL_SPI_Receive+0x20e>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f68:	e018      	b.n	8003f9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ca      	bne.n	8003f0c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fb4c 	bl	8004618 <SPI_EndRxTransaction>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
 8003f98:	e000      	b.n	8003f9c <HAL_SPI_Receive+0x246>
  }

error :
 8003f9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b08a      	sub	sp, #40	; 0x28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x26>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e1fb      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x41e>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fe4:	f7fd fb80 	bl	80016e8 <HAL_GetTick>
 8003fe8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ff0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ffc:	887b      	ldrh	r3, [r7, #2]
 8003ffe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004000:	7efb      	ldrb	r3, [r7, #27]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d00e      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x6e>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800400c:	d106      	bne.n	800401c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <HAL_SPI_TransmitReceive+0x66>
 8004016:	7efb      	ldrb	r3, [r7, #27]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d003      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800401c:	2302      	movs	r3, #2
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004022:	e1cd      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x80>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x80>
 8004030:	887b      	ldrh	r3, [r7, #2]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800403c:	e1c0      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b04      	cmp	r3, #4
 8004048:	d003      	beq.n	8004052 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2205      	movs	r2, #5
 800404e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	887a      	ldrh	r2, [r7, #2]
 8004062:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	887a      	ldrh	r2, [r7, #2]
 800406a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	887a      	ldrh	r2, [r7, #2]
 8004078:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	887a      	ldrh	r2, [r7, #2]
 800407e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004094:	d802      	bhi.n	800409c <HAL_SPI_TransmitReceive+0xe6>
 8004096:	8a3b      	ldrh	r3, [r7, #16]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d908      	bls.n	80040ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	e007      	b.n	80040be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d007      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e4:	d97c      	bls.n	80041e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_SPI_TransmitReceive+0x13e>
 80040ee:	8a7b      	ldrh	r3, [r7, #18]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d169      	bne.n	80041c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004118:	e056      	b.n	80041c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b02      	cmp	r3, #2
 8004126:	d11b      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x1aa>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d016      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x1aa>
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	2b01      	cmp	r3, #1
 8004136:	d113      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d11c      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x1f2>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d016      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	b292      	uxth	r2, r2
 8004186:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041a4:	2301      	movs	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041a8:	f7fd fa9e 	bl	80016e8 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d807      	bhi.n	80041c8 <HAL_SPI_TransmitReceive+0x212>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041be:	d003      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041c6:	e0fb      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1a3      	bne.n	800411a <HAL_SPI_TransmitReceive+0x164>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d19d      	bne.n	800411a <HAL_SPI_TransmitReceive+0x164>
 80041de:	e0df      	b.n	80043a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x23a>
 80041e8:	8a7b      	ldrh	r3, [r7, #18]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	f040 80cb 	bne.w	8004386 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d912      	bls.n	8004220 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	881a      	ldrh	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	1c9a      	adds	r2, r3, #2
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b02      	subs	r3, #2
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800421e:	e0b2      	b.n	8004386 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	7812      	ldrb	r2, [r2, #0]
 800422c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004246:	e09e      	b.n	8004386 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b02      	cmp	r3, #2
 8004254:	d134      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x30a>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d02f      	beq.n	80042c0 <HAL_SPI_TransmitReceive+0x30a>
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	2b01      	cmp	r3, #1
 8004264:	d12c      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d912      	bls.n	8004296 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	881a      	ldrh	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b02      	subs	r3, #2
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004294:	e012      	b.n	80042bc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	7812      	ldrb	r2, [r2, #0]
 80042a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d148      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x3aa>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d042      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d923      	bls.n	800432e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	b292      	uxth	r2, r2
 80042f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	1c9a      	adds	r2, r3, #2
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b02      	subs	r3, #2
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d81f      	bhi.n	800435c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	e016      	b.n	800435c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f103 020c 	add.w	r2, r3, #12
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	7812      	ldrb	r2, [r2, #0]
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800435c:	2301      	movs	r3, #1
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004360:	f7fd f9c2 	bl	80016e8 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436c:	429a      	cmp	r2, r3
 800436e:	d803      	bhi.n	8004378 <HAL_SPI_TransmitReceive+0x3c2>
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004376:	d102      	bne.n	800437e <HAL_SPI_TransmitReceive+0x3c8>
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	2b00      	cmp	r3, #0
 800437c:	d103      	bne.n	8004386 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004384:	e01c      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	f47f af5b 	bne.w	8004248 <HAL_SPI_TransmitReceive+0x292>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	f47f af54 	bne.w	8004248 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f98f 	bl	80046c8 <SPI_EndRxTxTransaction>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60
 80043bc:	e000      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80043be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043ec:	f7fd f97c 	bl	80016e8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043fc:	f7fd f974 	bl	80016e8 <HAL_GetTick>
 8004400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004402:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	015b      	lsls	r3, r3, #5
 8004408:	0d1b      	lsrs	r3, r3, #20
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004412:	e054      	b.n	80044be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800441a:	d050      	beq.n	80044be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800441c:	f7fd f964 	bl	80016e8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	429a      	cmp	r2, r3
 800442a:	d902      	bls.n	8004432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d13d      	bne.n	80044ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444a:	d111      	bne.n	8004470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004454:	d004      	beq.n	8004460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445e:	d107      	bne.n	8004470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800446e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004478:	d10f      	bne.n	800449a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e017      	b.n	80044de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4013      	ands	r3, r2
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	bf0c      	ite	eq
 80044ce:	2301      	moveq	r3, #1
 80044d0:	2300      	movne	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d19b      	bne.n	8004414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	2000000c 	.word	0x2000000c

080044ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044fe:	f7fd f8f3 	bl	80016e8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	4413      	add	r3, r2
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800450e:	f7fd f8eb 	bl	80016e8 <HAL_GetTick>
 8004512:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800451c:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	00da      	lsls	r2, r3, #3
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	0d1b      	lsrs	r3, r3, #20
 800452c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004534:	e060      	b.n	80045f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800453c:	d107      	bne.n	800454e <SPI_WaitFifoStateUntilTimeout+0x62>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800454c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004554:	d050      	beq.n	80045f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004556:	f7fd f8c7 	bl	80016e8 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004562:	429a      	cmp	r2, r3
 8004564:	d902      	bls.n	800456c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	2b00      	cmp	r3, #0
 800456a:	d13d      	bne.n	80045e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800457a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004584:	d111      	bne.n	80045aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458e:	d004      	beq.n	800459a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004598:	d107      	bne.n	80045aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b2:	d10f      	bne.n	80045d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e010      	b.n	800460a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d196      	bne.n	8004536 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3728      	adds	r7, #40	; 0x28
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	2000000c 	.word	0x2000000c

08004618 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462c:	d111      	bne.n	8004652 <SPI_EndRxTransaction+0x3a>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004636:	d004      	beq.n	8004642 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004640:	d107      	bne.n	8004652 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004650:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2200      	movs	r2, #0
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f7ff febd 	bl	80043dc <SPI_WaitFlagStateUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e023      	b.n	80046c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004680:	d11d      	bne.n	80046be <SPI_EndRxTransaction+0xa6>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468a:	d004      	beq.n	8004696 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004694:	d113      	bne.n	80046be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2200      	movs	r2, #0
 800469e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff ff22 	bl	80044ec <SPI_WaitFifoStateUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	f043 0220 	orr.w	r2, r3, #32
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e000      	b.n	80046c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff ff03 	bl	80044ec <SPI_WaitFifoStateUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e027      	b.n	800474c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	2180      	movs	r1, #128	; 0x80
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fe68 	bl	80043dc <SPI_WaitFlagStateUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e014      	b.n	800474c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff fedc 	bl	80044ec <SPI_WaitFifoStateUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e000      	b.n	800474c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e049      	b.n	80047fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc fda0 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f000 fac4 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d001      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e036      	b.n	800488a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a17      	ldr	r2, [pc, #92]	; (8004898 <HAL_TIM_Base_Start_IT+0x94>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x44>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004846:	d115      	bne.n	8004874 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <HAL_TIM_Base_Start_IT+0x98>)
 8004850:	4013      	ands	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b06      	cmp	r3, #6
 8004858:	d015      	beq.n	8004886 <HAL_TIM_Base_Start_IT+0x82>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d011      	beq.n	8004886 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	e008      	b.n	8004886 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e000      	b.n	8004888 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40012c00 	.word	0x40012c00
 800489c:	00010007 	.word	0x00010007

080048a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	f241 1311 	movw	r3, #4369	; 0x1111
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <HAL_TIM_Base_Stop_IT+0x48>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	f240 4344 	movw	r3, #1092	; 0x444
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_Base_Stop_IT+0x48>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b02      	cmp	r3, #2
 8004912:	d122      	bne.n	800495a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b02      	cmp	r3, #2
 8004920:	d11b      	bne.n	800495a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f06f 0202 	mvn.w	r2, #2
 800492a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f9ce 	bl	8004ce2 <HAL_TIM_IC_CaptureCallback>
 8004946:	e005      	b.n	8004954 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f9c0 	bl	8004cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f9d1 	bl	8004cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b04      	cmp	r3, #4
 8004966:	d122      	bne.n	80049ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b04      	cmp	r3, #4
 8004974:	d11b      	bne.n	80049ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0204 	mvn.w	r2, #4
 800497e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f9a4 	bl	8004ce2 <HAL_TIM_IC_CaptureCallback>
 800499a:	e005      	b.n	80049a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f996 	bl	8004cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f9a7 	bl	8004cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d122      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d11b      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0208 	mvn.w	r2, #8
 80049d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2204      	movs	r2, #4
 80049d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f97a 	bl	8004ce2 <HAL_TIM_IC_CaptureCallback>
 80049ee:	e005      	b.n	80049fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f96c 	bl	8004cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f97d 	bl	8004cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d122      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	2b10      	cmp	r3, #16
 8004a1c:	d11b      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0210 	mvn.w	r2, #16
 8004a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f950 	bl	8004ce2 <HAL_TIM_IC_CaptureCallback>
 8004a42:	e005      	b.n	8004a50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f942 	bl	8004cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f953 	bl	8004cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10e      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d107      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f06f 0201 	mvn.w	r2, #1
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fc f8c9 	bl	8000c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8c:	2b80      	cmp	r3, #128	; 0x80
 8004a8e:	d10e      	bne.n	8004aae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9a:	2b80      	cmp	r3, #128	; 0x80
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 faa3 	bl	8004ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abc:	d10e      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	2b80      	cmp	r3, #128	; 0x80
 8004aca:	d107      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa96 	bl	8005008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f901 	bl	8004d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d10e      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d107      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0220 	mvn.w	r2, #32
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa56 	bl	8004fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_TIM_ConfigClockSource+0x1c>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e0b6      	b.n	8004cc6 <HAL_TIM_ConfigClockSource+0x18a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b94:	d03e      	beq.n	8004c14 <HAL_TIM_ConfigClockSource+0xd8>
 8004b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9a:	f200 8087 	bhi.w	8004cac <HAL_TIM_ConfigClockSource+0x170>
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	f000 8086 	beq.w	8004cb2 <HAL_TIM_ConfigClockSource+0x176>
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004baa:	d87f      	bhi.n	8004cac <HAL_TIM_ConfigClockSource+0x170>
 8004bac:	2b70      	cmp	r3, #112	; 0x70
 8004bae:	d01a      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0xaa>
 8004bb0:	2b70      	cmp	r3, #112	; 0x70
 8004bb2:	d87b      	bhi.n	8004cac <HAL_TIM_ConfigClockSource+0x170>
 8004bb4:	2b60      	cmp	r3, #96	; 0x60
 8004bb6:	d050      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x11e>
 8004bb8:	2b60      	cmp	r3, #96	; 0x60
 8004bba:	d877      	bhi.n	8004cac <HAL_TIM_ConfigClockSource+0x170>
 8004bbc:	2b50      	cmp	r3, #80	; 0x50
 8004bbe:	d03c      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0xfe>
 8004bc0:	2b50      	cmp	r3, #80	; 0x50
 8004bc2:	d873      	bhi.n	8004cac <HAL_TIM_ConfigClockSource+0x170>
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d058      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x13e>
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d86f      	bhi.n	8004cac <HAL_TIM_ConfigClockSource+0x170>
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d064      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x15e>
 8004bd0:	2b30      	cmp	r3, #48	; 0x30
 8004bd2:	d86b      	bhi.n	8004cac <HAL_TIM_ConfigClockSource+0x170>
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d060      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x15e>
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d867      	bhi.n	8004cac <HAL_TIM_ConfigClockSource+0x170>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d05c      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x15e>
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d05a      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x15e>
 8004be4:	e062      	b.n	8004cac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6899      	ldr	r1, [r3, #8]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f000 f973 	bl	8004ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	609a      	str	r2, [r3, #8]
      break;
 8004c12:	e04f      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	6899      	ldr	r1, [r3, #8]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f000 f95c 	bl	8004ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c36:	609a      	str	r2, [r3, #8]
      break;
 8004c38:	e03c      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f000 f8ce 	bl	8004de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2150      	movs	r1, #80	; 0x50
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f927 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004c58:	e02c      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6859      	ldr	r1, [r3, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f000 f8ed 	bl	8004e46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2160      	movs	r1, #96	; 0x60
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f917 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004c78:	e01c      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f000 f8ae 	bl	8004de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2140      	movs	r1, #64	; 0x40
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 f907 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004c98:	e00c      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f000 f8fe 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004caa:	e003      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb0:	e000      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <TIM_Base_SetConfig+0xbc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_Base_SetConfig+0x20>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3e:	d108      	bne.n	8004d52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a21      	ldr	r2, [pc, #132]	; (8004ddc <TIM_Base_SetConfig+0xbc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00b      	beq.n	8004d72 <TIM_Base_SetConfig+0x52>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d007      	beq.n	8004d72 <TIM_Base_SetConfig+0x52>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <TIM_Base_SetConfig+0xc0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d003      	beq.n	8004d72 <TIM_Base_SetConfig+0x52>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <TIM_Base_SetConfig+0xc4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d108      	bne.n	8004d84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a0c      	ldr	r2, [pc, #48]	; (8004ddc <TIM_Base_SetConfig+0xbc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <TIM_Base_SetConfig+0xa0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <TIM_Base_SetConfig+0xc0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0xa0>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <TIM_Base_SetConfig+0xc4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800

08004de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 030a 	bic.w	r3, r3, #10
 8004e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f023 0210 	bic.w	r2, r3, #16
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f043 0307 	orr.w	r3, r3, #7
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	609a      	str	r2, [r3, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e04a      	b.n	8004fce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d108      	bne.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a12      	ldr	r2, [pc, #72]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa0:	d10c      	bne.n	8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00

08004fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <__errno>:
 800501c:	4b01      	ldr	r3, [pc, #4]	; (8005024 <__errno+0x8>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000018 	.word	0x20000018

08005028 <__sflush_r>:
 8005028:	898a      	ldrh	r2, [r1, #12]
 800502a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800502e:	4605      	mov	r5, r0
 8005030:	0710      	lsls	r0, r2, #28
 8005032:	460c      	mov	r4, r1
 8005034:	d458      	bmi.n	80050e8 <__sflush_r+0xc0>
 8005036:	684b      	ldr	r3, [r1, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	dc05      	bgt.n	8005048 <__sflush_r+0x20>
 800503c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	dc02      	bgt.n	8005048 <__sflush_r+0x20>
 8005042:	2000      	movs	r0, #0
 8005044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800504a:	2e00      	cmp	r6, #0
 800504c:	d0f9      	beq.n	8005042 <__sflush_r+0x1a>
 800504e:	2300      	movs	r3, #0
 8005050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005054:	682f      	ldr	r7, [r5, #0]
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	d032      	beq.n	80050c0 <__sflush_r+0x98>
 800505a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	075a      	lsls	r2, r3, #29
 8005060:	d505      	bpl.n	800506e <__sflush_r+0x46>
 8005062:	6863      	ldr	r3, [r4, #4]
 8005064:	1ac0      	subs	r0, r0, r3
 8005066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005068:	b10b      	cbz	r3, 800506e <__sflush_r+0x46>
 800506a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800506c:	1ac0      	subs	r0, r0, r3
 800506e:	2300      	movs	r3, #0
 8005070:	4602      	mov	r2, r0
 8005072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005074:	6a21      	ldr	r1, [r4, #32]
 8005076:	4628      	mov	r0, r5
 8005078:	47b0      	blx	r6
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	d106      	bne.n	800508e <__sflush_r+0x66>
 8005080:	6829      	ldr	r1, [r5, #0]
 8005082:	291d      	cmp	r1, #29
 8005084:	d82c      	bhi.n	80050e0 <__sflush_r+0xb8>
 8005086:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <__sflush_r+0x108>)
 8005088:	40ca      	lsrs	r2, r1
 800508a:	07d6      	lsls	r6, r2, #31
 800508c:	d528      	bpl.n	80050e0 <__sflush_r+0xb8>
 800508e:	2200      	movs	r2, #0
 8005090:	6062      	str	r2, [r4, #4]
 8005092:	04d9      	lsls	r1, r3, #19
 8005094:	6922      	ldr	r2, [r4, #16]
 8005096:	6022      	str	r2, [r4, #0]
 8005098:	d504      	bpl.n	80050a4 <__sflush_r+0x7c>
 800509a:	1c42      	adds	r2, r0, #1
 800509c:	d101      	bne.n	80050a2 <__sflush_r+0x7a>
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	b903      	cbnz	r3, 80050a4 <__sflush_r+0x7c>
 80050a2:	6560      	str	r0, [r4, #84]	; 0x54
 80050a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050a6:	602f      	str	r7, [r5, #0]
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d0ca      	beq.n	8005042 <__sflush_r+0x1a>
 80050ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050b0:	4299      	cmp	r1, r3
 80050b2:	d002      	beq.n	80050ba <__sflush_r+0x92>
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 fa21 	bl	80054fc <_free_r>
 80050ba:	2000      	movs	r0, #0
 80050bc:	6360      	str	r0, [r4, #52]	; 0x34
 80050be:	e7c1      	b.n	8005044 <__sflush_r+0x1c>
 80050c0:	6a21      	ldr	r1, [r4, #32]
 80050c2:	2301      	movs	r3, #1
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b0      	blx	r6
 80050c8:	1c41      	adds	r1, r0, #1
 80050ca:	d1c7      	bne.n	800505c <__sflush_r+0x34>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0c4      	beq.n	800505c <__sflush_r+0x34>
 80050d2:	2b1d      	cmp	r3, #29
 80050d4:	d001      	beq.n	80050da <__sflush_r+0xb2>
 80050d6:	2b16      	cmp	r3, #22
 80050d8:	d101      	bne.n	80050de <__sflush_r+0xb6>
 80050da:	602f      	str	r7, [r5, #0]
 80050dc:	e7b1      	b.n	8005042 <__sflush_r+0x1a>
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	e7ad      	b.n	8005044 <__sflush_r+0x1c>
 80050e8:	690f      	ldr	r7, [r1, #16]
 80050ea:	2f00      	cmp	r7, #0
 80050ec:	d0a9      	beq.n	8005042 <__sflush_r+0x1a>
 80050ee:	0793      	lsls	r3, r2, #30
 80050f0:	680e      	ldr	r6, [r1, #0]
 80050f2:	bf08      	it	eq
 80050f4:	694b      	ldreq	r3, [r1, #20]
 80050f6:	600f      	str	r7, [r1, #0]
 80050f8:	bf18      	it	ne
 80050fa:	2300      	movne	r3, #0
 80050fc:	eba6 0807 	sub.w	r8, r6, r7
 8005100:	608b      	str	r3, [r1, #8]
 8005102:	f1b8 0f00 	cmp.w	r8, #0
 8005106:	dd9c      	ble.n	8005042 <__sflush_r+0x1a>
 8005108:	6a21      	ldr	r1, [r4, #32]
 800510a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800510c:	4643      	mov	r3, r8
 800510e:	463a      	mov	r2, r7
 8005110:	4628      	mov	r0, r5
 8005112:	47b0      	blx	r6
 8005114:	2800      	cmp	r0, #0
 8005116:	dc06      	bgt.n	8005126 <__sflush_r+0xfe>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511e:	81a3      	strh	r3, [r4, #12]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005124:	e78e      	b.n	8005044 <__sflush_r+0x1c>
 8005126:	4407      	add	r7, r0
 8005128:	eba8 0800 	sub.w	r8, r8, r0
 800512c:	e7e9      	b.n	8005102 <__sflush_r+0xda>
 800512e:	bf00      	nop
 8005130:	20400001 	.word	0x20400001

08005134 <_fflush_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	4605      	mov	r5, r0
 800513a:	460c      	mov	r4, r1
 800513c:	b913      	cbnz	r3, 8005144 <_fflush_r+0x10>
 800513e:	2500      	movs	r5, #0
 8005140:	4628      	mov	r0, r5
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	b118      	cbz	r0, 800514e <_fflush_r+0x1a>
 8005146:	6983      	ldr	r3, [r0, #24]
 8005148:	b90b      	cbnz	r3, 800514e <_fflush_r+0x1a>
 800514a:	f000 f887 	bl	800525c <__sinit>
 800514e:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <_fflush_r+0x6c>)
 8005150:	429c      	cmp	r4, r3
 8005152:	d11b      	bne.n	800518c <_fflush_r+0x58>
 8005154:	686c      	ldr	r4, [r5, #4]
 8005156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0ef      	beq.n	800513e <_fflush_r+0xa>
 800515e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005160:	07d0      	lsls	r0, r2, #31
 8005162:	d404      	bmi.n	800516e <_fflush_r+0x3a>
 8005164:	0599      	lsls	r1, r3, #22
 8005166:	d402      	bmi.n	800516e <_fflush_r+0x3a>
 8005168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800516a:	f000 f93a 	bl	80053e2 <__retarget_lock_acquire_recursive>
 800516e:	4628      	mov	r0, r5
 8005170:	4621      	mov	r1, r4
 8005172:	f7ff ff59 	bl	8005028 <__sflush_r>
 8005176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005178:	07da      	lsls	r2, r3, #31
 800517a:	4605      	mov	r5, r0
 800517c:	d4e0      	bmi.n	8005140 <_fflush_r+0xc>
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	059b      	lsls	r3, r3, #22
 8005182:	d4dd      	bmi.n	8005140 <_fflush_r+0xc>
 8005184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005186:	f000 f92d 	bl	80053e4 <__retarget_lock_release_recursive>
 800518a:	e7d9      	b.n	8005140 <_fflush_r+0xc>
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <_fflush_r+0x70>)
 800518e:	429c      	cmp	r4, r3
 8005190:	d101      	bne.n	8005196 <_fflush_r+0x62>
 8005192:	68ac      	ldr	r4, [r5, #8]
 8005194:	e7df      	b.n	8005156 <_fflush_r+0x22>
 8005196:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <_fflush_r+0x74>)
 8005198:	429c      	cmp	r4, r3
 800519a:	bf08      	it	eq
 800519c:	68ec      	ldreq	r4, [r5, #12]
 800519e:	e7da      	b.n	8005156 <_fflush_r+0x22>
 80051a0:	08007e50 	.word	0x08007e50
 80051a4:	08007e70 	.word	0x08007e70
 80051a8:	08007e30 	.word	0x08007e30

080051ac <std>:
 80051ac:	2300      	movs	r3, #0
 80051ae:	b510      	push	{r4, lr}
 80051b0:	4604      	mov	r4, r0
 80051b2:	e9c0 3300 	strd	r3, r3, [r0]
 80051b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ba:	6083      	str	r3, [r0, #8]
 80051bc:	8181      	strh	r1, [r0, #12]
 80051be:	6643      	str	r3, [r0, #100]	; 0x64
 80051c0:	81c2      	strh	r2, [r0, #14]
 80051c2:	6183      	str	r3, [r0, #24]
 80051c4:	4619      	mov	r1, r3
 80051c6:	2208      	movs	r2, #8
 80051c8:	305c      	adds	r0, #92	; 0x5c
 80051ca:	f000 f98f 	bl	80054ec <memset>
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <std+0x38>)
 80051d0:	6263      	str	r3, [r4, #36]	; 0x24
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <std+0x3c>)
 80051d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <std+0x40>)
 80051d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <std+0x44>)
 80051dc:	6224      	str	r4, [r4, #32]
 80051de:	6323      	str	r3, [r4, #48]	; 0x30
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	bf00      	nop
 80051e4:	08005fe1 	.word	0x08005fe1
 80051e8:	08006003 	.word	0x08006003
 80051ec:	0800603b 	.word	0x0800603b
 80051f0:	0800605f 	.word	0x0800605f

080051f4 <_cleanup_r>:
 80051f4:	4901      	ldr	r1, [pc, #4]	; (80051fc <_cleanup_r+0x8>)
 80051f6:	f000 b8af 	b.w	8005358 <_fwalk_reent>
 80051fa:	bf00      	nop
 80051fc:	08005135 	.word	0x08005135

08005200 <__sfmoreglue>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	2268      	movs	r2, #104	; 0x68
 8005204:	1e4d      	subs	r5, r1, #1
 8005206:	4355      	muls	r5, r2
 8005208:	460e      	mov	r6, r1
 800520a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800520e:	f000 f9e1 	bl	80055d4 <_malloc_r>
 8005212:	4604      	mov	r4, r0
 8005214:	b140      	cbz	r0, 8005228 <__sfmoreglue+0x28>
 8005216:	2100      	movs	r1, #0
 8005218:	e9c0 1600 	strd	r1, r6, [r0]
 800521c:	300c      	adds	r0, #12
 800521e:	60a0      	str	r0, [r4, #8]
 8005220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005224:	f000 f962 	bl	80054ec <memset>
 8005228:	4620      	mov	r0, r4
 800522a:	bd70      	pop	{r4, r5, r6, pc}

0800522c <__sfp_lock_acquire>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__sfp_lock_acquire+0x8>)
 800522e:	f000 b8d8 	b.w	80053e2 <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	200002c1 	.word	0x200002c1

08005238 <__sfp_lock_release>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__sfp_lock_release+0x8>)
 800523a:	f000 b8d3 	b.w	80053e4 <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	200002c1 	.word	0x200002c1

08005244 <__sinit_lock_acquire>:
 8005244:	4801      	ldr	r0, [pc, #4]	; (800524c <__sinit_lock_acquire+0x8>)
 8005246:	f000 b8cc 	b.w	80053e2 <__retarget_lock_acquire_recursive>
 800524a:	bf00      	nop
 800524c:	200002c2 	.word	0x200002c2

08005250 <__sinit_lock_release>:
 8005250:	4801      	ldr	r0, [pc, #4]	; (8005258 <__sinit_lock_release+0x8>)
 8005252:	f000 b8c7 	b.w	80053e4 <__retarget_lock_release_recursive>
 8005256:	bf00      	nop
 8005258:	200002c2 	.word	0x200002c2

0800525c <__sinit>:
 800525c:	b510      	push	{r4, lr}
 800525e:	4604      	mov	r4, r0
 8005260:	f7ff fff0 	bl	8005244 <__sinit_lock_acquire>
 8005264:	69a3      	ldr	r3, [r4, #24]
 8005266:	b11b      	cbz	r3, 8005270 <__sinit+0x14>
 8005268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800526c:	f7ff bff0 	b.w	8005250 <__sinit_lock_release>
 8005270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005274:	6523      	str	r3, [r4, #80]	; 0x50
 8005276:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <__sinit+0x68>)
 8005278:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <__sinit+0x6c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	62a2      	str	r2, [r4, #40]	; 0x28
 800527e:	42a3      	cmp	r3, r4
 8005280:	bf04      	itt	eq
 8005282:	2301      	moveq	r3, #1
 8005284:	61a3      	streq	r3, [r4, #24]
 8005286:	4620      	mov	r0, r4
 8005288:	f000 f820 	bl	80052cc <__sfp>
 800528c:	6060      	str	r0, [r4, #4]
 800528e:	4620      	mov	r0, r4
 8005290:	f000 f81c 	bl	80052cc <__sfp>
 8005294:	60a0      	str	r0, [r4, #8]
 8005296:	4620      	mov	r0, r4
 8005298:	f000 f818 	bl	80052cc <__sfp>
 800529c:	2200      	movs	r2, #0
 800529e:	60e0      	str	r0, [r4, #12]
 80052a0:	2104      	movs	r1, #4
 80052a2:	6860      	ldr	r0, [r4, #4]
 80052a4:	f7ff ff82 	bl	80051ac <std>
 80052a8:	68a0      	ldr	r0, [r4, #8]
 80052aa:	2201      	movs	r2, #1
 80052ac:	2109      	movs	r1, #9
 80052ae:	f7ff ff7d 	bl	80051ac <std>
 80052b2:	68e0      	ldr	r0, [r4, #12]
 80052b4:	2202      	movs	r2, #2
 80052b6:	2112      	movs	r1, #18
 80052b8:	f7ff ff78 	bl	80051ac <std>
 80052bc:	2301      	movs	r3, #1
 80052be:	61a3      	str	r3, [r4, #24]
 80052c0:	e7d2      	b.n	8005268 <__sinit+0xc>
 80052c2:	bf00      	nop
 80052c4:	08007e90 	.word	0x08007e90
 80052c8:	080051f5 	.word	0x080051f5

080052cc <__sfp>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	4607      	mov	r7, r0
 80052d0:	f7ff ffac 	bl	800522c <__sfp_lock_acquire>
 80052d4:	4b1e      	ldr	r3, [pc, #120]	; (8005350 <__sfp+0x84>)
 80052d6:	681e      	ldr	r6, [r3, #0]
 80052d8:	69b3      	ldr	r3, [r6, #24]
 80052da:	b913      	cbnz	r3, 80052e2 <__sfp+0x16>
 80052dc:	4630      	mov	r0, r6
 80052de:	f7ff ffbd 	bl	800525c <__sinit>
 80052e2:	3648      	adds	r6, #72	; 0x48
 80052e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	d503      	bpl.n	80052f4 <__sfp+0x28>
 80052ec:	6833      	ldr	r3, [r6, #0]
 80052ee:	b30b      	cbz	r3, 8005334 <__sfp+0x68>
 80052f0:	6836      	ldr	r6, [r6, #0]
 80052f2:	e7f7      	b.n	80052e4 <__sfp+0x18>
 80052f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052f8:	b9d5      	cbnz	r5, 8005330 <__sfp+0x64>
 80052fa:	4b16      	ldr	r3, [pc, #88]	; (8005354 <__sfp+0x88>)
 80052fc:	60e3      	str	r3, [r4, #12]
 80052fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005302:	6665      	str	r5, [r4, #100]	; 0x64
 8005304:	f000 f86c 	bl	80053e0 <__retarget_lock_init_recursive>
 8005308:	f7ff ff96 	bl	8005238 <__sfp_lock_release>
 800530c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005314:	6025      	str	r5, [r4, #0]
 8005316:	61a5      	str	r5, [r4, #24]
 8005318:	2208      	movs	r2, #8
 800531a:	4629      	mov	r1, r5
 800531c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005320:	f000 f8e4 	bl	80054ec <memset>
 8005324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800532c:	4620      	mov	r0, r4
 800532e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005330:	3468      	adds	r4, #104	; 0x68
 8005332:	e7d9      	b.n	80052e8 <__sfp+0x1c>
 8005334:	2104      	movs	r1, #4
 8005336:	4638      	mov	r0, r7
 8005338:	f7ff ff62 	bl	8005200 <__sfmoreglue>
 800533c:	4604      	mov	r4, r0
 800533e:	6030      	str	r0, [r6, #0]
 8005340:	2800      	cmp	r0, #0
 8005342:	d1d5      	bne.n	80052f0 <__sfp+0x24>
 8005344:	f7ff ff78 	bl	8005238 <__sfp_lock_release>
 8005348:	230c      	movs	r3, #12
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	e7ee      	b.n	800532c <__sfp+0x60>
 800534e:	bf00      	nop
 8005350:	08007e90 	.word	0x08007e90
 8005354:	ffff0001 	.word	0xffff0001

08005358 <_fwalk_reent>:
 8005358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800535c:	4606      	mov	r6, r0
 800535e:	4688      	mov	r8, r1
 8005360:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005364:	2700      	movs	r7, #0
 8005366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800536a:	f1b9 0901 	subs.w	r9, r9, #1
 800536e:	d505      	bpl.n	800537c <_fwalk_reent+0x24>
 8005370:	6824      	ldr	r4, [r4, #0]
 8005372:	2c00      	cmp	r4, #0
 8005374:	d1f7      	bne.n	8005366 <_fwalk_reent+0xe>
 8005376:	4638      	mov	r0, r7
 8005378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800537c:	89ab      	ldrh	r3, [r5, #12]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d907      	bls.n	8005392 <_fwalk_reent+0x3a>
 8005382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005386:	3301      	adds	r3, #1
 8005388:	d003      	beq.n	8005392 <_fwalk_reent+0x3a>
 800538a:	4629      	mov	r1, r5
 800538c:	4630      	mov	r0, r6
 800538e:	47c0      	blx	r8
 8005390:	4307      	orrs	r7, r0
 8005392:	3568      	adds	r5, #104	; 0x68
 8005394:	e7e9      	b.n	800536a <_fwalk_reent+0x12>
	...

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4d0d      	ldr	r5, [pc, #52]	; (80053d0 <__libc_init_array+0x38>)
 800539c:	4c0d      	ldr	r4, [pc, #52]	; (80053d4 <__libc_init_array+0x3c>)
 800539e:	1b64      	subs	r4, r4, r5
 80053a0:	10a4      	asrs	r4, r4, #2
 80053a2:	2600      	movs	r6, #0
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	4d0b      	ldr	r5, [pc, #44]	; (80053d8 <__libc_init_array+0x40>)
 80053aa:	4c0c      	ldr	r4, [pc, #48]	; (80053dc <__libc_init_array+0x44>)
 80053ac:	f002 fb9c 	bl	8007ae8 <_init>
 80053b0:	1b64      	subs	r4, r4, r5
 80053b2:	10a4      	asrs	r4, r4, #2
 80053b4:	2600      	movs	r6, #0
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c0:	4798      	blx	r3
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ca:	4798      	blx	r3
 80053cc:	3601      	adds	r6, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	08008210 	.word	0x08008210
 80053d4:	08008210 	.word	0x08008210
 80053d8:	08008210 	.word	0x08008210
 80053dc:	08008214 	.word	0x08008214

080053e0 <__retarget_lock_init_recursive>:
 80053e0:	4770      	bx	lr

080053e2 <__retarget_lock_acquire_recursive>:
 80053e2:	4770      	bx	lr

080053e4 <__retarget_lock_release_recursive>:
 80053e4:	4770      	bx	lr

080053e6 <__swhatbuf_r>:
 80053e6:	b570      	push	{r4, r5, r6, lr}
 80053e8:	460e      	mov	r6, r1
 80053ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ee:	2900      	cmp	r1, #0
 80053f0:	b096      	sub	sp, #88	; 0x58
 80053f2:	4614      	mov	r4, r2
 80053f4:	461d      	mov	r5, r3
 80053f6:	da08      	bge.n	800540a <__swhatbuf_r+0x24>
 80053f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	602a      	str	r2, [r5, #0]
 8005400:	061a      	lsls	r2, r3, #24
 8005402:	d410      	bmi.n	8005426 <__swhatbuf_r+0x40>
 8005404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005408:	e00e      	b.n	8005428 <__swhatbuf_r+0x42>
 800540a:	466a      	mov	r2, sp
 800540c:	f001 fdb8 	bl	8006f80 <_fstat_r>
 8005410:	2800      	cmp	r0, #0
 8005412:	dbf1      	blt.n	80053f8 <__swhatbuf_r+0x12>
 8005414:	9a01      	ldr	r2, [sp, #4]
 8005416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800541a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800541e:	425a      	negs	r2, r3
 8005420:	415a      	adcs	r2, r3
 8005422:	602a      	str	r2, [r5, #0]
 8005424:	e7ee      	b.n	8005404 <__swhatbuf_r+0x1e>
 8005426:	2340      	movs	r3, #64	; 0x40
 8005428:	2000      	movs	r0, #0
 800542a:	6023      	str	r3, [r4, #0]
 800542c:	b016      	add	sp, #88	; 0x58
 800542e:	bd70      	pop	{r4, r5, r6, pc}

08005430 <__smakebuf_r>:
 8005430:	898b      	ldrh	r3, [r1, #12]
 8005432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005434:	079d      	lsls	r5, r3, #30
 8005436:	4606      	mov	r6, r0
 8005438:	460c      	mov	r4, r1
 800543a:	d507      	bpl.n	800544c <__smakebuf_r+0x1c>
 800543c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	2301      	movs	r3, #1
 8005446:	6163      	str	r3, [r4, #20]
 8005448:	b002      	add	sp, #8
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	ab01      	add	r3, sp, #4
 800544e:	466a      	mov	r2, sp
 8005450:	f7ff ffc9 	bl	80053e6 <__swhatbuf_r>
 8005454:	9900      	ldr	r1, [sp, #0]
 8005456:	4605      	mov	r5, r0
 8005458:	4630      	mov	r0, r6
 800545a:	f000 f8bb 	bl	80055d4 <_malloc_r>
 800545e:	b948      	cbnz	r0, 8005474 <__smakebuf_r+0x44>
 8005460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005464:	059a      	lsls	r2, r3, #22
 8005466:	d4ef      	bmi.n	8005448 <__smakebuf_r+0x18>
 8005468:	f023 0303 	bic.w	r3, r3, #3
 800546c:	f043 0302 	orr.w	r3, r3, #2
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	e7e3      	b.n	800543c <__smakebuf_r+0xc>
 8005474:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <__smakebuf_r+0x7c>)
 8005476:	62b3      	str	r3, [r6, #40]	; 0x28
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	6020      	str	r0, [r4, #0]
 800547c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005480:	81a3      	strh	r3, [r4, #12]
 8005482:	9b00      	ldr	r3, [sp, #0]
 8005484:	6163      	str	r3, [r4, #20]
 8005486:	9b01      	ldr	r3, [sp, #4]
 8005488:	6120      	str	r0, [r4, #16]
 800548a:	b15b      	cbz	r3, 80054a4 <__smakebuf_r+0x74>
 800548c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005490:	4630      	mov	r0, r6
 8005492:	f001 fd87 	bl	8006fa4 <_isatty_r>
 8005496:	b128      	cbz	r0, 80054a4 <__smakebuf_r+0x74>
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	81a3      	strh	r3, [r4, #12]
 80054a4:	89a0      	ldrh	r0, [r4, #12]
 80054a6:	4305      	orrs	r5, r0
 80054a8:	81a5      	strh	r5, [r4, #12]
 80054aa:	e7cd      	b.n	8005448 <__smakebuf_r+0x18>
 80054ac:	080051f5 	.word	0x080051f5

080054b0 <malloc>:
 80054b0:	4b02      	ldr	r3, [pc, #8]	; (80054bc <malloc+0xc>)
 80054b2:	4601      	mov	r1, r0
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	f000 b88d 	b.w	80055d4 <_malloc_r>
 80054ba:	bf00      	nop
 80054bc:	20000018 	.word	0x20000018

080054c0 <free>:
 80054c0:	4b02      	ldr	r3, [pc, #8]	; (80054cc <free+0xc>)
 80054c2:	4601      	mov	r1, r0
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f000 b819 	b.w	80054fc <_free_r>
 80054ca:	bf00      	nop
 80054cc:	20000018 	.word	0x20000018

080054d0 <memcpy>:
 80054d0:	440a      	add	r2, r1
 80054d2:	4291      	cmp	r1, r2
 80054d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054d8:	d100      	bne.n	80054dc <memcpy+0xc>
 80054da:	4770      	bx	lr
 80054dc:	b510      	push	{r4, lr}
 80054de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e6:	4291      	cmp	r1, r2
 80054e8:	d1f9      	bne.n	80054de <memcpy+0xe>
 80054ea:	bd10      	pop	{r4, pc}

080054ec <memset>:
 80054ec:	4402      	add	r2, r0
 80054ee:	4603      	mov	r3, r0
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d100      	bne.n	80054f6 <memset+0xa>
 80054f4:	4770      	bx	lr
 80054f6:	f803 1b01 	strb.w	r1, [r3], #1
 80054fa:	e7f9      	b.n	80054f0 <memset+0x4>

080054fc <_free_r>:
 80054fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054fe:	2900      	cmp	r1, #0
 8005500:	d044      	beq.n	800558c <_free_r+0x90>
 8005502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005506:	9001      	str	r0, [sp, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f1a1 0404 	sub.w	r4, r1, #4
 800550e:	bfb8      	it	lt
 8005510:	18e4      	addlt	r4, r4, r3
 8005512:	f001 fd7f 	bl	8007014 <__malloc_lock>
 8005516:	4a1e      	ldr	r2, [pc, #120]	; (8005590 <_free_r+0x94>)
 8005518:	9801      	ldr	r0, [sp, #4]
 800551a:	6813      	ldr	r3, [r2, #0]
 800551c:	b933      	cbnz	r3, 800552c <_free_r+0x30>
 800551e:	6063      	str	r3, [r4, #4]
 8005520:	6014      	str	r4, [r2, #0]
 8005522:	b003      	add	sp, #12
 8005524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005528:	f001 bd7a 	b.w	8007020 <__malloc_unlock>
 800552c:	42a3      	cmp	r3, r4
 800552e:	d908      	bls.n	8005542 <_free_r+0x46>
 8005530:	6825      	ldr	r5, [r4, #0]
 8005532:	1961      	adds	r1, r4, r5
 8005534:	428b      	cmp	r3, r1
 8005536:	bf01      	itttt	eq
 8005538:	6819      	ldreq	r1, [r3, #0]
 800553a:	685b      	ldreq	r3, [r3, #4]
 800553c:	1949      	addeq	r1, r1, r5
 800553e:	6021      	streq	r1, [r4, #0]
 8005540:	e7ed      	b.n	800551e <_free_r+0x22>
 8005542:	461a      	mov	r2, r3
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	b10b      	cbz	r3, 800554c <_free_r+0x50>
 8005548:	42a3      	cmp	r3, r4
 800554a:	d9fa      	bls.n	8005542 <_free_r+0x46>
 800554c:	6811      	ldr	r1, [r2, #0]
 800554e:	1855      	adds	r5, r2, r1
 8005550:	42a5      	cmp	r5, r4
 8005552:	d10b      	bne.n	800556c <_free_r+0x70>
 8005554:	6824      	ldr	r4, [r4, #0]
 8005556:	4421      	add	r1, r4
 8005558:	1854      	adds	r4, r2, r1
 800555a:	42a3      	cmp	r3, r4
 800555c:	6011      	str	r1, [r2, #0]
 800555e:	d1e0      	bne.n	8005522 <_free_r+0x26>
 8005560:	681c      	ldr	r4, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	6053      	str	r3, [r2, #4]
 8005566:	4421      	add	r1, r4
 8005568:	6011      	str	r1, [r2, #0]
 800556a:	e7da      	b.n	8005522 <_free_r+0x26>
 800556c:	d902      	bls.n	8005574 <_free_r+0x78>
 800556e:	230c      	movs	r3, #12
 8005570:	6003      	str	r3, [r0, #0]
 8005572:	e7d6      	b.n	8005522 <_free_r+0x26>
 8005574:	6825      	ldr	r5, [r4, #0]
 8005576:	1961      	adds	r1, r4, r5
 8005578:	428b      	cmp	r3, r1
 800557a:	bf04      	itt	eq
 800557c:	6819      	ldreq	r1, [r3, #0]
 800557e:	685b      	ldreq	r3, [r3, #4]
 8005580:	6063      	str	r3, [r4, #4]
 8005582:	bf04      	itt	eq
 8005584:	1949      	addeq	r1, r1, r5
 8005586:	6021      	streq	r1, [r4, #0]
 8005588:	6054      	str	r4, [r2, #4]
 800558a:	e7ca      	b.n	8005522 <_free_r+0x26>
 800558c:	b003      	add	sp, #12
 800558e:	bd30      	pop	{r4, r5, pc}
 8005590:	200002c4 	.word	0x200002c4

08005594 <sbrk_aligned>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	4e0e      	ldr	r6, [pc, #56]	; (80055d0 <sbrk_aligned+0x3c>)
 8005598:	460c      	mov	r4, r1
 800559a:	6831      	ldr	r1, [r6, #0]
 800559c:	4605      	mov	r5, r0
 800559e:	b911      	cbnz	r1, 80055a6 <sbrk_aligned+0x12>
 80055a0:	f000 fd0e 	bl	8005fc0 <_sbrk_r>
 80055a4:	6030      	str	r0, [r6, #0]
 80055a6:	4621      	mov	r1, r4
 80055a8:	4628      	mov	r0, r5
 80055aa:	f000 fd09 	bl	8005fc0 <_sbrk_r>
 80055ae:	1c43      	adds	r3, r0, #1
 80055b0:	d00a      	beq.n	80055c8 <sbrk_aligned+0x34>
 80055b2:	1cc4      	adds	r4, r0, #3
 80055b4:	f024 0403 	bic.w	r4, r4, #3
 80055b8:	42a0      	cmp	r0, r4
 80055ba:	d007      	beq.n	80055cc <sbrk_aligned+0x38>
 80055bc:	1a21      	subs	r1, r4, r0
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 fcfe 	bl	8005fc0 <_sbrk_r>
 80055c4:	3001      	adds	r0, #1
 80055c6:	d101      	bne.n	80055cc <sbrk_aligned+0x38>
 80055c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055cc:	4620      	mov	r0, r4
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	200002c8 	.word	0x200002c8

080055d4 <_malloc_r>:
 80055d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d8:	1ccd      	adds	r5, r1, #3
 80055da:	f025 0503 	bic.w	r5, r5, #3
 80055de:	3508      	adds	r5, #8
 80055e0:	2d0c      	cmp	r5, #12
 80055e2:	bf38      	it	cc
 80055e4:	250c      	movcc	r5, #12
 80055e6:	2d00      	cmp	r5, #0
 80055e8:	4607      	mov	r7, r0
 80055ea:	db01      	blt.n	80055f0 <_malloc_r+0x1c>
 80055ec:	42a9      	cmp	r1, r5
 80055ee:	d905      	bls.n	80055fc <_malloc_r+0x28>
 80055f0:	230c      	movs	r3, #12
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	2600      	movs	r6, #0
 80055f6:	4630      	mov	r0, r6
 80055f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055fc:	4e2e      	ldr	r6, [pc, #184]	; (80056b8 <_malloc_r+0xe4>)
 80055fe:	f001 fd09 	bl	8007014 <__malloc_lock>
 8005602:	6833      	ldr	r3, [r6, #0]
 8005604:	461c      	mov	r4, r3
 8005606:	bb34      	cbnz	r4, 8005656 <_malloc_r+0x82>
 8005608:	4629      	mov	r1, r5
 800560a:	4638      	mov	r0, r7
 800560c:	f7ff ffc2 	bl	8005594 <sbrk_aligned>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	4604      	mov	r4, r0
 8005614:	d14d      	bne.n	80056b2 <_malloc_r+0xde>
 8005616:	6834      	ldr	r4, [r6, #0]
 8005618:	4626      	mov	r6, r4
 800561a:	2e00      	cmp	r6, #0
 800561c:	d140      	bne.n	80056a0 <_malloc_r+0xcc>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	4631      	mov	r1, r6
 8005622:	4638      	mov	r0, r7
 8005624:	eb04 0803 	add.w	r8, r4, r3
 8005628:	f000 fcca 	bl	8005fc0 <_sbrk_r>
 800562c:	4580      	cmp	r8, r0
 800562e:	d13a      	bne.n	80056a6 <_malloc_r+0xd2>
 8005630:	6821      	ldr	r1, [r4, #0]
 8005632:	3503      	adds	r5, #3
 8005634:	1a6d      	subs	r5, r5, r1
 8005636:	f025 0503 	bic.w	r5, r5, #3
 800563a:	3508      	adds	r5, #8
 800563c:	2d0c      	cmp	r5, #12
 800563e:	bf38      	it	cc
 8005640:	250c      	movcc	r5, #12
 8005642:	4629      	mov	r1, r5
 8005644:	4638      	mov	r0, r7
 8005646:	f7ff ffa5 	bl	8005594 <sbrk_aligned>
 800564a:	3001      	adds	r0, #1
 800564c:	d02b      	beq.n	80056a6 <_malloc_r+0xd2>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	442b      	add	r3, r5
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	e00e      	b.n	8005674 <_malloc_r+0xa0>
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	1b52      	subs	r2, r2, r5
 800565a:	d41e      	bmi.n	800569a <_malloc_r+0xc6>
 800565c:	2a0b      	cmp	r2, #11
 800565e:	d916      	bls.n	800568e <_malloc_r+0xba>
 8005660:	1961      	adds	r1, r4, r5
 8005662:	42a3      	cmp	r3, r4
 8005664:	6025      	str	r5, [r4, #0]
 8005666:	bf18      	it	ne
 8005668:	6059      	strne	r1, [r3, #4]
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	bf08      	it	eq
 800566e:	6031      	streq	r1, [r6, #0]
 8005670:	5162      	str	r2, [r4, r5]
 8005672:	604b      	str	r3, [r1, #4]
 8005674:	4638      	mov	r0, r7
 8005676:	f104 060b 	add.w	r6, r4, #11
 800567a:	f001 fcd1 	bl	8007020 <__malloc_unlock>
 800567e:	f026 0607 	bic.w	r6, r6, #7
 8005682:	1d23      	adds	r3, r4, #4
 8005684:	1af2      	subs	r2, r6, r3
 8005686:	d0b6      	beq.n	80055f6 <_malloc_r+0x22>
 8005688:	1b9b      	subs	r3, r3, r6
 800568a:	50a3      	str	r3, [r4, r2]
 800568c:	e7b3      	b.n	80055f6 <_malloc_r+0x22>
 800568e:	6862      	ldr	r2, [r4, #4]
 8005690:	42a3      	cmp	r3, r4
 8005692:	bf0c      	ite	eq
 8005694:	6032      	streq	r2, [r6, #0]
 8005696:	605a      	strne	r2, [r3, #4]
 8005698:	e7ec      	b.n	8005674 <_malloc_r+0xa0>
 800569a:	4623      	mov	r3, r4
 800569c:	6864      	ldr	r4, [r4, #4]
 800569e:	e7b2      	b.n	8005606 <_malloc_r+0x32>
 80056a0:	4634      	mov	r4, r6
 80056a2:	6876      	ldr	r6, [r6, #4]
 80056a4:	e7b9      	b.n	800561a <_malloc_r+0x46>
 80056a6:	230c      	movs	r3, #12
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	4638      	mov	r0, r7
 80056ac:	f001 fcb8 	bl	8007020 <__malloc_unlock>
 80056b0:	e7a1      	b.n	80055f6 <_malloc_r+0x22>
 80056b2:	6025      	str	r5, [r4, #0]
 80056b4:	e7de      	b.n	8005674 <_malloc_r+0xa0>
 80056b6:	bf00      	nop
 80056b8:	200002c4 	.word	0x200002c4

080056bc <__cvt>:
 80056bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	ec55 4b10 	vmov	r4, r5, d0
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	460e      	mov	r6, r1
 80056c8:	4619      	mov	r1, r3
 80056ca:	462b      	mov	r3, r5
 80056cc:	bfbb      	ittet	lt
 80056ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056d2:	461d      	movlt	r5, r3
 80056d4:	2300      	movge	r3, #0
 80056d6:	232d      	movlt	r3, #45	; 0x2d
 80056d8:	700b      	strb	r3, [r1, #0]
 80056da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056e0:	4691      	mov	r9, r2
 80056e2:	f023 0820 	bic.w	r8, r3, #32
 80056e6:	bfbc      	itt	lt
 80056e8:	4622      	movlt	r2, r4
 80056ea:	4614      	movlt	r4, r2
 80056ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056f0:	d005      	beq.n	80056fe <__cvt+0x42>
 80056f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056f6:	d100      	bne.n	80056fa <__cvt+0x3e>
 80056f8:	3601      	adds	r6, #1
 80056fa:	2102      	movs	r1, #2
 80056fc:	e000      	b.n	8005700 <__cvt+0x44>
 80056fe:	2103      	movs	r1, #3
 8005700:	ab03      	add	r3, sp, #12
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	ab02      	add	r3, sp, #8
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	ec45 4b10 	vmov	d0, r4, r5
 800570c:	4653      	mov	r3, sl
 800570e:	4632      	mov	r2, r6
 8005710:	f000 fe36 	bl	8006380 <_dtoa_r>
 8005714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005718:	4607      	mov	r7, r0
 800571a:	d102      	bne.n	8005722 <__cvt+0x66>
 800571c:	f019 0f01 	tst.w	r9, #1
 8005720:	d022      	beq.n	8005768 <__cvt+0xac>
 8005722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005726:	eb07 0906 	add.w	r9, r7, r6
 800572a:	d110      	bne.n	800574e <__cvt+0x92>
 800572c:	783b      	ldrb	r3, [r7, #0]
 800572e:	2b30      	cmp	r3, #48	; 0x30
 8005730:	d10a      	bne.n	8005748 <__cvt+0x8c>
 8005732:	2200      	movs	r2, #0
 8005734:	2300      	movs	r3, #0
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	f7fb f99d 	bl	8000a78 <__aeabi_dcmpeq>
 800573e:	b918      	cbnz	r0, 8005748 <__cvt+0x8c>
 8005740:	f1c6 0601 	rsb	r6, r6, #1
 8005744:	f8ca 6000 	str.w	r6, [sl]
 8005748:	f8da 3000 	ldr.w	r3, [sl]
 800574c:	4499      	add	r9, r3
 800574e:	2200      	movs	r2, #0
 8005750:	2300      	movs	r3, #0
 8005752:	4620      	mov	r0, r4
 8005754:	4629      	mov	r1, r5
 8005756:	f7fb f98f 	bl	8000a78 <__aeabi_dcmpeq>
 800575a:	b108      	cbz	r0, 8005760 <__cvt+0xa4>
 800575c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005760:	2230      	movs	r2, #48	; 0x30
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	454b      	cmp	r3, r9
 8005766:	d307      	bcc.n	8005778 <__cvt+0xbc>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800576c:	1bdb      	subs	r3, r3, r7
 800576e:	4638      	mov	r0, r7
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	b004      	add	sp, #16
 8005774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	9103      	str	r1, [sp, #12]
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e7f0      	b.n	8005762 <__cvt+0xa6>

08005780 <__exponent>:
 8005780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005782:	4603      	mov	r3, r0
 8005784:	2900      	cmp	r1, #0
 8005786:	bfb8      	it	lt
 8005788:	4249      	neglt	r1, r1
 800578a:	f803 2b02 	strb.w	r2, [r3], #2
 800578e:	bfb4      	ite	lt
 8005790:	222d      	movlt	r2, #45	; 0x2d
 8005792:	222b      	movge	r2, #43	; 0x2b
 8005794:	2909      	cmp	r1, #9
 8005796:	7042      	strb	r2, [r0, #1]
 8005798:	dd2a      	ble.n	80057f0 <__exponent+0x70>
 800579a:	f10d 0407 	add.w	r4, sp, #7
 800579e:	46a4      	mov	ip, r4
 80057a0:	270a      	movs	r7, #10
 80057a2:	46a6      	mov	lr, r4
 80057a4:	460a      	mov	r2, r1
 80057a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80057aa:	fb07 1516 	mls	r5, r7, r6, r1
 80057ae:	3530      	adds	r5, #48	; 0x30
 80057b0:	2a63      	cmp	r2, #99	; 0x63
 80057b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80057b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057ba:	4631      	mov	r1, r6
 80057bc:	dcf1      	bgt.n	80057a2 <__exponent+0x22>
 80057be:	3130      	adds	r1, #48	; 0x30
 80057c0:	f1ae 0502 	sub.w	r5, lr, #2
 80057c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057c8:	1c44      	adds	r4, r0, #1
 80057ca:	4629      	mov	r1, r5
 80057cc:	4561      	cmp	r1, ip
 80057ce:	d30a      	bcc.n	80057e6 <__exponent+0x66>
 80057d0:	f10d 0209 	add.w	r2, sp, #9
 80057d4:	eba2 020e 	sub.w	r2, r2, lr
 80057d8:	4565      	cmp	r5, ip
 80057da:	bf88      	it	hi
 80057dc:	2200      	movhi	r2, #0
 80057de:	4413      	add	r3, r2
 80057e0:	1a18      	subs	r0, r3, r0
 80057e2:	b003      	add	sp, #12
 80057e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057ee:	e7ed      	b.n	80057cc <__exponent+0x4c>
 80057f0:	2330      	movs	r3, #48	; 0x30
 80057f2:	3130      	adds	r1, #48	; 0x30
 80057f4:	7083      	strb	r3, [r0, #2]
 80057f6:	70c1      	strb	r1, [r0, #3]
 80057f8:	1d03      	adds	r3, r0, #4
 80057fa:	e7f1      	b.n	80057e0 <__exponent+0x60>

080057fc <_printf_float>:
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	ed2d 8b02 	vpush	{d8}
 8005804:	b08d      	sub	sp, #52	; 0x34
 8005806:	460c      	mov	r4, r1
 8005808:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800580c:	4616      	mov	r6, r2
 800580e:	461f      	mov	r7, r3
 8005810:	4605      	mov	r5, r0
 8005812:	f001 fbd7 	bl	8006fc4 <_localeconv_r>
 8005816:	f8d0 a000 	ldr.w	sl, [r0]
 800581a:	4650      	mov	r0, sl
 800581c:	f7fa fd00 	bl	8000220 <strlen>
 8005820:	2300      	movs	r3, #0
 8005822:	930a      	str	r3, [sp, #40]	; 0x28
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	9305      	str	r3, [sp, #20]
 8005828:	f8d8 3000 	ldr.w	r3, [r8]
 800582c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005830:	3307      	adds	r3, #7
 8005832:	f023 0307 	bic.w	r3, r3, #7
 8005836:	f103 0208 	add.w	r2, r3, #8
 800583a:	f8c8 2000 	str.w	r2, [r8]
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005846:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800584a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800584e:	9307      	str	r3, [sp, #28]
 8005850:	f8cd 8018 	str.w	r8, [sp, #24]
 8005854:	ee08 0a10 	vmov	s16, r0
 8005858:	4b9f      	ldr	r3, [pc, #636]	; (8005ad8 <_printf_float+0x2dc>)
 800585a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800585e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005862:	f7fb f93b 	bl	8000adc <__aeabi_dcmpun>
 8005866:	bb88      	cbnz	r0, 80058cc <_printf_float+0xd0>
 8005868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800586c:	4b9a      	ldr	r3, [pc, #616]	; (8005ad8 <_printf_float+0x2dc>)
 800586e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005872:	f7fb f915 	bl	8000aa0 <__aeabi_dcmple>
 8005876:	bb48      	cbnz	r0, 80058cc <_printf_float+0xd0>
 8005878:	2200      	movs	r2, #0
 800587a:	2300      	movs	r3, #0
 800587c:	4640      	mov	r0, r8
 800587e:	4649      	mov	r1, r9
 8005880:	f7fb f904 	bl	8000a8c <__aeabi_dcmplt>
 8005884:	b110      	cbz	r0, 800588c <_printf_float+0x90>
 8005886:	232d      	movs	r3, #45	; 0x2d
 8005888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588c:	4b93      	ldr	r3, [pc, #588]	; (8005adc <_printf_float+0x2e0>)
 800588e:	4894      	ldr	r0, [pc, #592]	; (8005ae0 <_printf_float+0x2e4>)
 8005890:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005894:	bf94      	ite	ls
 8005896:	4698      	movls	r8, r3
 8005898:	4680      	movhi	r8, r0
 800589a:	2303      	movs	r3, #3
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	9b05      	ldr	r3, [sp, #20]
 80058a0:	f023 0204 	bic.w	r2, r3, #4
 80058a4:	6022      	str	r2, [r4, #0]
 80058a6:	f04f 0900 	mov.w	r9, #0
 80058aa:	9700      	str	r7, [sp, #0]
 80058ac:	4633      	mov	r3, r6
 80058ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 f9d8 	bl	8005c68 <_printf_common>
 80058b8:	3001      	adds	r0, #1
 80058ba:	f040 8090 	bne.w	80059de <_printf_float+0x1e2>
 80058be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c2:	b00d      	add	sp, #52	; 0x34
 80058c4:	ecbd 8b02 	vpop	{d8}
 80058c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058cc:	4642      	mov	r2, r8
 80058ce:	464b      	mov	r3, r9
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fb f902 	bl	8000adc <__aeabi_dcmpun>
 80058d8:	b140      	cbz	r0, 80058ec <_printf_float+0xf0>
 80058da:	464b      	mov	r3, r9
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bfbc      	itt	lt
 80058e0:	232d      	movlt	r3, #45	; 0x2d
 80058e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058e6:	487f      	ldr	r0, [pc, #508]	; (8005ae4 <_printf_float+0x2e8>)
 80058e8:	4b7f      	ldr	r3, [pc, #508]	; (8005ae8 <_printf_float+0x2ec>)
 80058ea:	e7d1      	b.n	8005890 <_printf_float+0x94>
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058f2:	9206      	str	r2, [sp, #24]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	d13f      	bne.n	8005978 <_printf_float+0x17c>
 80058f8:	2306      	movs	r3, #6
 80058fa:	6063      	str	r3, [r4, #4]
 80058fc:	9b05      	ldr	r3, [sp, #20]
 80058fe:	6861      	ldr	r1, [r4, #4]
 8005900:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005904:	2300      	movs	r3, #0
 8005906:	9303      	str	r3, [sp, #12]
 8005908:	ab0a      	add	r3, sp, #40	; 0x28
 800590a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800590e:	ab09      	add	r3, sp, #36	; 0x24
 8005910:	ec49 8b10 	vmov	d0, r8, r9
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	6022      	str	r2, [r4, #0]
 8005918:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800591c:	4628      	mov	r0, r5
 800591e:	f7ff fecd 	bl	80056bc <__cvt>
 8005922:	9b06      	ldr	r3, [sp, #24]
 8005924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005926:	2b47      	cmp	r3, #71	; 0x47
 8005928:	4680      	mov	r8, r0
 800592a:	d108      	bne.n	800593e <_printf_float+0x142>
 800592c:	1cc8      	adds	r0, r1, #3
 800592e:	db02      	blt.n	8005936 <_printf_float+0x13a>
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	4299      	cmp	r1, r3
 8005934:	dd41      	ble.n	80059ba <_printf_float+0x1be>
 8005936:	f1ab 0b02 	sub.w	fp, fp, #2
 800593a:	fa5f fb8b 	uxtb.w	fp, fp
 800593e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005942:	d820      	bhi.n	8005986 <_printf_float+0x18a>
 8005944:	3901      	subs	r1, #1
 8005946:	465a      	mov	r2, fp
 8005948:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800594c:	9109      	str	r1, [sp, #36]	; 0x24
 800594e:	f7ff ff17 	bl	8005780 <__exponent>
 8005952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005954:	1813      	adds	r3, r2, r0
 8005956:	2a01      	cmp	r2, #1
 8005958:	4681      	mov	r9, r0
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	dc02      	bgt.n	8005964 <_printf_float+0x168>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	07d2      	lsls	r2, r2, #31
 8005962:	d501      	bpl.n	8005968 <_printf_float+0x16c>
 8005964:	3301      	adds	r3, #1
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800596c:	2b00      	cmp	r3, #0
 800596e:	d09c      	beq.n	80058aa <_printf_float+0xae>
 8005970:	232d      	movs	r3, #45	; 0x2d
 8005972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005976:	e798      	b.n	80058aa <_printf_float+0xae>
 8005978:	9a06      	ldr	r2, [sp, #24]
 800597a:	2a47      	cmp	r2, #71	; 0x47
 800597c:	d1be      	bne.n	80058fc <_printf_float+0x100>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1bc      	bne.n	80058fc <_printf_float+0x100>
 8005982:	2301      	movs	r3, #1
 8005984:	e7b9      	b.n	80058fa <_printf_float+0xfe>
 8005986:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800598a:	d118      	bne.n	80059be <_printf_float+0x1c2>
 800598c:	2900      	cmp	r1, #0
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	dd0b      	ble.n	80059aa <_printf_float+0x1ae>
 8005992:	6121      	str	r1, [r4, #16]
 8005994:	b913      	cbnz	r3, 800599c <_printf_float+0x1a0>
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	07d0      	lsls	r0, r2, #31
 800599a:	d502      	bpl.n	80059a2 <_printf_float+0x1a6>
 800599c:	3301      	adds	r3, #1
 800599e:	440b      	add	r3, r1
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80059a4:	f04f 0900 	mov.w	r9, #0
 80059a8:	e7de      	b.n	8005968 <_printf_float+0x16c>
 80059aa:	b913      	cbnz	r3, 80059b2 <_printf_float+0x1b6>
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	07d2      	lsls	r2, r2, #31
 80059b0:	d501      	bpl.n	80059b6 <_printf_float+0x1ba>
 80059b2:	3302      	adds	r3, #2
 80059b4:	e7f4      	b.n	80059a0 <_printf_float+0x1a4>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e7f2      	b.n	80059a0 <_printf_float+0x1a4>
 80059ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c0:	4299      	cmp	r1, r3
 80059c2:	db05      	blt.n	80059d0 <_printf_float+0x1d4>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	6121      	str	r1, [r4, #16]
 80059c8:	07d8      	lsls	r0, r3, #31
 80059ca:	d5ea      	bpl.n	80059a2 <_printf_float+0x1a6>
 80059cc:	1c4b      	adds	r3, r1, #1
 80059ce:	e7e7      	b.n	80059a0 <_printf_float+0x1a4>
 80059d0:	2900      	cmp	r1, #0
 80059d2:	bfd4      	ite	le
 80059d4:	f1c1 0202 	rsble	r2, r1, #2
 80059d8:	2201      	movgt	r2, #1
 80059da:	4413      	add	r3, r2
 80059dc:	e7e0      	b.n	80059a0 <_printf_float+0x1a4>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	055a      	lsls	r2, r3, #21
 80059e2:	d407      	bmi.n	80059f4 <_printf_float+0x1f8>
 80059e4:	6923      	ldr	r3, [r4, #16]
 80059e6:	4642      	mov	r2, r8
 80059e8:	4631      	mov	r1, r6
 80059ea:	4628      	mov	r0, r5
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	d12c      	bne.n	8005a4c <_printf_float+0x250>
 80059f2:	e764      	b.n	80058be <_printf_float+0xc2>
 80059f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059f8:	f240 80e0 	bls.w	8005bbc <_printf_float+0x3c0>
 80059fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a00:	2200      	movs	r2, #0
 8005a02:	2300      	movs	r3, #0
 8005a04:	f7fb f838 	bl	8000a78 <__aeabi_dcmpeq>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d034      	beq.n	8005a76 <_printf_float+0x27a>
 8005a0c:	4a37      	ldr	r2, [pc, #220]	; (8005aec <_printf_float+0x2f0>)
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f af51 	beq.w	80058be <_printf_float+0xc2>
 8005a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a20:	429a      	cmp	r2, r3
 8005a22:	db02      	blt.n	8005a2a <_printf_float+0x22e>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	07d8      	lsls	r0, r3, #31
 8005a28:	d510      	bpl.n	8005a4c <_printf_float+0x250>
 8005a2a:	ee18 3a10 	vmov	r3, s16
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af41 	beq.w	80058be <_printf_float+0xc2>
 8005a3c:	f04f 0800 	mov.w	r8, #0
 8005a40:	f104 091a 	add.w	r9, r4, #26
 8005a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	4543      	cmp	r3, r8
 8005a4a:	dc09      	bgt.n	8005a60 <_printf_float+0x264>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	079b      	lsls	r3, r3, #30
 8005a50:	f100 8105 	bmi.w	8005c5e <_printf_float+0x462>
 8005a54:	68e0      	ldr	r0, [r4, #12]
 8005a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a58:	4298      	cmp	r0, r3
 8005a5a:	bfb8      	it	lt
 8005a5c:	4618      	movlt	r0, r3
 8005a5e:	e730      	b.n	80058c2 <_printf_float+0xc6>
 8005a60:	2301      	movs	r3, #1
 8005a62:	464a      	mov	r2, r9
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f af27 	beq.w	80058be <_printf_float+0xc2>
 8005a70:	f108 0801 	add.w	r8, r8, #1
 8005a74:	e7e6      	b.n	8005a44 <_printf_float+0x248>
 8005a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dc39      	bgt.n	8005af0 <_printf_float+0x2f4>
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <_printf_float+0x2f0>)
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	f43f af19 	beq.w	80058be <_printf_float+0xc2>
 8005a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a90:	4313      	orrs	r3, r2
 8005a92:	d102      	bne.n	8005a9a <_printf_float+0x29e>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	07d9      	lsls	r1, r3, #31
 8005a98:	d5d8      	bpl.n	8005a4c <_printf_float+0x250>
 8005a9a:	ee18 3a10 	vmov	r3, s16
 8005a9e:	4652      	mov	r2, sl
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	47b8      	blx	r7
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	f43f af09 	beq.w	80058be <_printf_float+0xc2>
 8005aac:	f04f 0900 	mov.w	r9, #0
 8005ab0:	f104 0a1a 	add.w	sl, r4, #26
 8005ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab6:	425b      	negs	r3, r3
 8005ab8:	454b      	cmp	r3, r9
 8005aba:	dc01      	bgt.n	8005ac0 <_printf_float+0x2c4>
 8005abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005abe:	e792      	b.n	80059e6 <_printf_float+0x1ea>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f aef7 	beq.w	80058be <_printf_float+0xc2>
 8005ad0:	f109 0901 	add.w	r9, r9, #1
 8005ad4:	e7ee      	b.n	8005ab4 <_printf_float+0x2b8>
 8005ad6:	bf00      	nop
 8005ad8:	7fefffff 	.word	0x7fefffff
 8005adc:	08007e94 	.word	0x08007e94
 8005ae0:	08007e98 	.word	0x08007e98
 8005ae4:	08007ea0 	.word	0x08007ea0
 8005ae8:	08007e9c 	.word	0x08007e9c
 8005aec:	08007ea4 	.word	0x08007ea4
 8005af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005af4:	429a      	cmp	r2, r3
 8005af6:	bfa8      	it	ge
 8005af8:	461a      	movge	r2, r3
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	4691      	mov	r9, r2
 8005afe:	dc37      	bgt.n	8005b70 <_printf_float+0x374>
 8005b00:	f04f 0b00 	mov.w	fp, #0
 8005b04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b08:	f104 021a 	add.w	r2, r4, #26
 8005b0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	eba3 0309 	sub.w	r3, r3, r9
 8005b14:	455b      	cmp	r3, fp
 8005b16:	dc33      	bgt.n	8005b80 <_printf_float+0x384>
 8005b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	db3b      	blt.n	8005b98 <_printf_float+0x39c>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	07da      	lsls	r2, r3, #31
 8005b24:	d438      	bmi.n	8005b98 <_printf_float+0x39c>
 8005b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b28:	9a05      	ldr	r2, [sp, #20]
 8005b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b2c:	1a9a      	subs	r2, r3, r2
 8005b2e:	eba3 0901 	sub.w	r9, r3, r1
 8005b32:	4591      	cmp	r9, r2
 8005b34:	bfa8      	it	ge
 8005b36:	4691      	movge	r9, r2
 8005b38:	f1b9 0f00 	cmp.w	r9, #0
 8005b3c:	dc35      	bgt.n	8005baa <_printf_float+0x3ae>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b46:	f104 0a1a 	add.w	sl, r4, #26
 8005b4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	eba3 0309 	sub.w	r3, r3, r9
 8005b54:	4543      	cmp	r3, r8
 8005b56:	f77f af79 	ble.w	8005a4c <_printf_float+0x250>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4652      	mov	r2, sl
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	f43f aeaa 	beq.w	80058be <_printf_float+0xc2>
 8005b6a:	f108 0801 	add.w	r8, r8, #1
 8005b6e:	e7ec      	b.n	8005b4a <_printf_float+0x34e>
 8005b70:	4613      	mov	r3, r2
 8005b72:	4631      	mov	r1, r6
 8005b74:	4642      	mov	r2, r8
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d1c0      	bne.n	8005b00 <_printf_float+0x304>
 8005b7e:	e69e      	b.n	80058be <_printf_float+0xc2>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	9205      	str	r2, [sp, #20]
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f ae97 	beq.w	80058be <_printf_float+0xc2>
 8005b90:	9a05      	ldr	r2, [sp, #20]
 8005b92:	f10b 0b01 	add.w	fp, fp, #1
 8005b96:	e7b9      	b.n	8005b0c <_printf_float+0x310>
 8005b98:	ee18 3a10 	vmov	r3, s16
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d1be      	bne.n	8005b26 <_printf_float+0x32a>
 8005ba8:	e689      	b.n	80058be <_printf_float+0xc2>
 8005baa:	9a05      	ldr	r2, [sp, #20]
 8005bac:	464b      	mov	r3, r9
 8005bae:	4442      	add	r2, r8
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d1c1      	bne.n	8005b3e <_printf_float+0x342>
 8005bba:	e680      	b.n	80058be <_printf_float+0xc2>
 8005bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bbe:	2a01      	cmp	r2, #1
 8005bc0:	dc01      	bgt.n	8005bc6 <_printf_float+0x3ca>
 8005bc2:	07db      	lsls	r3, r3, #31
 8005bc4:	d538      	bpl.n	8005c38 <_printf_float+0x43c>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4642      	mov	r2, r8
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b8      	blx	r7
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	f43f ae74 	beq.w	80058be <_printf_float+0xc2>
 8005bd6:	ee18 3a10 	vmov	r3, s16
 8005bda:	4652      	mov	r2, sl
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f ae6b 	beq.w	80058be <_printf_float+0xc2>
 8005be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bec:	2200      	movs	r2, #0
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f7fa ff42 	bl	8000a78 <__aeabi_dcmpeq>
 8005bf4:	b9d8      	cbnz	r0, 8005c2e <_printf_float+0x432>
 8005bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf8:	f108 0201 	add.w	r2, r8, #1
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	d10e      	bne.n	8005c26 <_printf_float+0x42a>
 8005c08:	e659      	b.n	80058be <_printf_float+0xc2>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	f43f ae52 	beq.w	80058be <_printf_float+0xc2>
 8005c1a:	f108 0801 	add.w	r8, r8, #1
 8005c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c20:	3b01      	subs	r3, #1
 8005c22:	4543      	cmp	r3, r8
 8005c24:	dcf1      	bgt.n	8005c0a <_printf_float+0x40e>
 8005c26:	464b      	mov	r3, r9
 8005c28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c2c:	e6dc      	b.n	80059e8 <_printf_float+0x1ec>
 8005c2e:	f04f 0800 	mov.w	r8, #0
 8005c32:	f104 0a1a 	add.w	sl, r4, #26
 8005c36:	e7f2      	b.n	8005c1e <_printf_float+0x422>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4642      	mov	r2, r8
 8005c3c:	e7df      	b.n	8005bfe <_printf_float+0x402>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	464a      	mov	r2, r9
 8005c42:	4631      	mov	r1, r6
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f43f ae38 	beq.w	80058be <_printf_float+0xc2>
 8005c4e:	f108 0801 	add.w	r8, r8, #1
 8005c52:	68e3      	ldr	r3, [r4, #12]
 8005c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c56:	1a5b      	subs	r3, r3, r1
 8005c58:	4543      	cmp	r3, r8
 8005c5a:	dcf0      	bgt.n	8005c3e <_printf_float+0x442>
 8005c5c:	e6fa      	b.n	8005a54 <_printf_float+0x258>
 8005c5e:	f04f 0800 	mov.w	r8, #0
 8005c62:	f104 0919 	add.w	r9, r4, #25
 8005c66:	e7f4      	b.n	8005c52 <_printf_float+0x456>

08005c68 <_printf_common>:
 8005c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	4699      	mov	r9, r3
 8005c70:	688a      	ldr	r2, [r1, #8]
 8005c72:	690b      	ldr	r3, [r1, #16]
 8005c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bfb8      	it	lt
 8005c7c:	4613      	movlt	r3, r2
 8005c7e:	6033      	str	r3, [r6, #0]
 8005c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c84:	4607      	mov	r7, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	b10a      	cbz	r2, 8005c8e <_printf_common+0x26>
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	0699      	lsls	r1, r3, #26
 8005c92:	bf42      	ittt	mi
 8005c94:	6833      	ldrmi	r3, [r6, #0]
 8005c96:	3302      	addmi	r3, #2
 8005c98:	6033      	strmi	r3, [r6, #0]
 8005c9a:	6825      	ldr	r5, [r4, #0]
 8005c9c:	f015 0506 	ands.w	r5, r5, #6
 8005ca0:	d106      	bne.n	8005cb0 <_printf_common+0x48>
 8005ca2:	f104 0a19 	add.w	sl, r4, #25
 8005ca6:	68e3      	ldr	r3, [r4, #12]
 8005ca8:	6832      	ldr	r2, [r6, #0]
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	42ab      	cmp	r3, r5
 8005cae:	dc26      	bgt.n	8005cfe <_printf_common+0x96>
 8005cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cb4:	1e13      	subs	r3, r2, #0
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	bf18      	it	ne
 8005cba:	2301      	movne	r3, #1
 8005cbc:	0692      	lsls	r2, r2, #26
 8005cbe:	d42b      	bmi.n	8005d18 <_printf_common+0xb0>
 8005cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c0      	blx	r8
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d01e      	beq.n	8005d0c <_printf_common+0xa4>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	68e5      	ldr	r5, [r4, #12]
 8005cd2:	6832      	ldr	r2, [r6, #0]
 8005cd4:	f003 0306 	and.w	r3, r3, #6
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	bf08      	it	eq
 8005cdc:	1aad      	subeq	r5, r5, r2
 8005cde:	68a3      	ldr	r3, [r4, #8]
 8005ce0:	6922      	ldr	r2, [r4, #16]
 8005ce2:	bf0c      	ite	eq
 8005ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce8:	2500      	movne	r5, #0
 8005cea:	4293      	cmp	r3, r2
 8005cec:	bfc4      	itt	gt
 8005cee:	1a9b      	subgt	r3, r3, r2
 8005cf0:	18ed      	addgt	r5, r5, r3
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	341a      	adds	r4, #26
 8005cf6:	42b5      	cmp	r5, r6
 8005cf8:	d11a      	bne.n	8005d30 <_printf_common+0xc8>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e008      	b.n	8005d10 <_printf_common+0xa8>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4652      	mov	r2, sl
 8005d02:	4649      	mov	r1, r9
 8005d04:	4638      	mov	r0, r7
 8005d06:	47c0      	blx	r8
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d103      	bne.n	8005d14 <_printf_common+0xac>
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d14:	3501      	adds	r5, #1
 8005d16:	e7c6      	b.n	8005ca6 <_printf_common+0x3e>
 8005d18:	18e1      	adds	r1, r4, r3
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	2030      	movs	r0, #48	; 0x30
 8005d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d22:	4422      	add	r2, r4
 8005d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	e7c7      	b.n	8005cc0 <_printf_common+0x58>
 8005d30:	2301      	movs	r3, #1
 8005d32:	4622      	mov	r2, r4
 8005d34:	4649      	mov	r1, r9
 8005d36:	4638      	mov	r0, r7
 8005d38:	47c0      	blx	r8
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d0e6      	beq.n	8005d0c <_printf_common+0xa4>
 8005d3e:	3601      	adds	r6, #1
 8005d40:	e7d9      	b.n	8005cf6 <_printf_common+0x8e>
	...

08005d44 <_printf_i>:
 8005d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	7e0f      	ldrb	r7, [r1, #24]
 8005d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d4c:	2f78      	cmp	r7, #120	; 0x78
 8005d4e:	4691      	mov	r9, r2
 8005d50:	4680      	mov	r8, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	469a      	mov	sl, r3
 8005d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d5a:	d807      	bhi.n	8005d6c <_printf_i+0x28>
 8005d5c:	2f62      	cmp	r7, #98	; 0x62
 8005d5e:	d80a      	bhi.n	8005d76 <_printf_i+0x32>
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	f000 80d8 	beq.w	8005f16 <_printf_i+0x1d2>
 8005d66:	2f58      	cmp	r7, #88	; 0x58
 8005d68:	f000 80a3 	beq.w	8005eb2 <_printf_i+0x16e>
 8005d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d74:	e03a      	b.n	8005dec <_printf_i+0xa8>
 8005d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d7a:	2b15      	cmp	r3, #21
 8005d7c:	d8f6      	bhi.n	8005d6c <_printf_i+0x28>
 8005d7e:	a101      	add	r1, pc, #4	; (adr r1, 8005d84 <_printf_i+0x40>)
 8005d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d84:	08005ddd 	.word	0x08005ddd
 8005d88:	08005df1 	.word	0x08005df1
 8005d8c:	08005d6d 	.word	0x08005d6d
 8005d90:	08005d6d 	.word	0x08005d6d
 8005d94:	08005d6d 	.word	0x08005d6d
 8005d98:	08005d6d 	.word	0x08005d6d
 8005d9c:	08005df1 	.word	0x08005df1
 8005da0:	08005d6d 	.word	0x08005d6d
 8005da4:	08005d6d 	.word	0x08005d6d
 8005da8:	08005d6d 	.word	0x08005d6d
 8005dac:	08005d6d 	.word	0x08005d6d
 8005db0:	08005efd 	.word	0x08005efd
 8005db4:	08005e21 	.word	0x08005e21
 8005db8:	08005edf 	.word	0x08005edf
 8005dbc:	08005d6d 	.word	0x08005d6d
 8005dc0:	08005d6d 	.word	0x08005d6d
 8005dc4:	08005f1f 	.word	0x08005f1f
 8005dc8:	08005d6d 	.word	0x08005d6d
 8005dcc:	08005e21 	.word	0x08005e21
 8005dd0:	08005d6d 	.word	0x08005d6d
 8005dd4:	08005d6d 	.word	0x08005d6d
 8005dd8:	08005ee7 	.word	0x08005ee7
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	1d1a      	adds	r2, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	602a      	str	r2, [r5, #0]
 8005de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dec:	2301      	movs	r3, #1
 8005dee:	e0a3      	b.n	8005f38 <_printf_i+0x1f4>
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	6829      	ldr	r1, [r5, #0]
 8005df4:	0606      	lsls	r6, r0, #24
 8005df6:	f101 0304 	add.w	r3, r1, #4
 8005dfa:	d50a      	bpl.n	8005e12 <_printf_i+0xce>
 8005dfc:	680e      	ldr	r6, [r1, #0]
 8005dfe:	602b      	str	r3, [r5, #0]
 8005e00:	2e00      	cmp	r6, #0
 8005e02:	da03      	bge.n	8005e0c <_printf_i+0xc8>
 8005e04:	232d      	movs	r3, #45	; 0x2d
 8005e06:	4276      	negs	r6, r6
 8005e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0c:	485e      	ldr	r0, [pc, #376]	; (8005f88 <_printf_i+0x244>)
 8005e0e:	230a      	movs	r3, #10
 8005e10:	e019      	b.n	8005e46 <_printf_i+0x102>
 8005e12:	680e      	ldr	r6, [r1, #0]
 8005e14:	602b      	str	r3, [r5, #0]
 8005e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e1a:	bf18      	it	ne
 8005e1c:	b236      	sxthne	r6, r6
 8005e1e:	e7ef      	b.n	8005e00 <_printf_i+0xbc>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	6820      	ldr	r0, [r4, #0]
 8005e24:	1d19      	adds	r1, r3, #4
 8005e26:	6029      	str	r1, [r5, #0]
 8005e28:	0601      	lsls	r1, r0, #24
 8005e2a:	d501      	bpl.n	8005e30 <_printf_i+0xec>
 8005e2c:	681e      	ldr	r6, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <_printf_i+0xf2>
 8005e30:	0646      	lsls	r6, r0, #25
 8005e32:	d5fb      	bpl.n	8005e2c <_printf_i+0xe8>
 8005e34:	881e      	ldrh	r6, [r3, #0]
 8005e36:	4854      	ldr	r0, [pc, #336]	; (8005f88 <_printf_i+0x244>)
 8005e38:	2f6f      	cmp	r7, #111	; 0x6f
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2308      	moveq	r3, #8
 8005e3e:	230a      	movne	r3, #10
 8005e40:	2100      	movs	r1, #0
 8005e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e46:	6865      	ldr	r5, [r4, #4]
 8005e48:	60a5      	str	r5, [r4, #8]
 8005e4a:	2d00      	cmp	r5, #0
 8005e4c:	bfa2      	ittt	ge
 8005e4e:	6821      	ldrge	r1, [r4, #0]
 8005e50:	f021 0104 	bicge.w	r1, r1, #4
 8005e54:	6021      	strge	r1, [r4, #0]
 8005e56:	b90e      	cbnz	r6, 8005e5c <_printf_i+0x118>
 8005e58:	2d00      	cmp	r5, #0
 8005e5a:	d04d      	beq.n	8005ef8 <_printf_i+0x1b4>
 8005e5c:	4615      	mov	r5, r2
 8005e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e62:	fb03 6711 	mls	r7, r3, r1, r6
 8005e66:	5dc7      	ldrb	r7, [r0, r7]
 8005e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e6c:	4637      	mov	r7, r6
 8005e6e:	42bb      	cmp	r3, r7
 8005e70:	460e      	mov	r6, r1
 8005e72:	d9f4      	bls.n	8005e5e <_printf_i+0x11a>
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d10b      	bne.n	8005e90 <_printf_i+0x14c>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	07de      	lsls	r6, r3, #31
 8005e7c:	d508      	bpl.n	8005e90 <_printf_i+0x14c>
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	6861      	ldr	r1, [r4, #4]
 8005e82:	4299      	cmp	r1, r3
 8005e84:	bfde      	ittt	le
 8005e86:	2330      	movle	r3, #48	; 0x30
 8005e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e90:	1b52      	subs	r2, r2, r5
 8005e92:	6122      	str	r2, [r4, #16]
 8005e94:	f8cd a000 	str.w	sl, [sp]
 8005e98:	464b      	mov	r3, r9
 8005e9a:	aa03      	add	r2, sp, #12
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	f7ff fee2 	bl	8005c68 <_printf_common>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d14c      	bne.n	8005f42 <_printf_i+0x1fe>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eac:	b004      	add	sp, #16
 8005eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb2:	4835      	ldr	r0, [pc, #212]	; (8005f88 <_printf_i+0x244>)
 8005eb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005eb8:	6829      	ldr	r1, [r5, #0]
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ec0:	6029      	str	r1, [r5, #0]
 8005ec2:	061d      	lsls	r5, r3, #24
 8005ec4:	d514      	bpl.n	8005ef0 <_printf_i+0x1ac>
 8005ec6:	07df      	lsls	r7, r3, #31
 8005ec8:	bf44      	itt	mi
 8005eca:	f043 0320 	orrmi.w	r3, r3, #32
 8005ece:	6023      	strmi	r3, [r4, #0]
 8005ed0:	b91e      	cbnz	r6, 8005eda <_printf_i+0x196>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	f023 0320 	bic.w	r3, r3, #32
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	2310      	movs	r3, #16
 8005edc:	e7b0      	b.n	8005e40 <_printf_i+0xfc>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f043 0320 	orr.w	r3, r3, #32
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	2378      	movs	r3, #120	; 0x78
 8005ee8:	4828      	ldr	r0, [pc, #160]	; (8005f8c <_printf_i+0x248>)
 8005eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eee:	e7e3      	b.n	8005eb8 <_printf_i+0x174>
 8005ef0:	0659      	lsls	r1, r3, #25
 8005ef2:	bf48      	it	mi
 8005ef4:	b2b6      	uxthmi	r6, r6
 8005ef6:	e7e6      	b.n	8005ec6 <_printf_i+0x182>
 8005ef8:	4615      	mov	r5, r2
 8005efa:	e7bb      	b.n	8005e74 <_printf_i+0x130>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	6826      	ldr	r6, [r4, #0]
 8005f00:	6961      	ldr	r1, [r4, #20]
 8005f02:	1d18      	adds	r0, r3, #4
 8005f04:	6028      	str	r0, [r5, #0]
 8005f06:	0635      	lsls	r5, r6, #24
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	d501      	bpl.n	8005f10 <_printf_i+0x1cc>
 8005f0c:	6019      	str	r1, [r3, #0]
 8005f0e:	e002      	b.n	8005f16 <_printf_i+0x1d2>
 8005f10:	0670      	lsls	r0, r6, #25
 8005f12:	d5fb      	bpl.n	8005f0c <_printf_i+0x1c8>
 8005f14:	8019      	strh	r1, [r3, #0]
 8005f16:	2300      	movs	r3, #0
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	4615      	mov	r5, r2
 8005f1c:	e7ba      	b.n	8005e94 <_printf_i+0x150>
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	1d1a      	adds	r2, r3, #4
 8005f22:	602a      	str	r2, [r5, #0]
 8005f24:	681d      	ldr	r5, [r3, #0]
 8005f26:	6862      	ldr	r2, [r4, #4]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f7fa f928 	bl	8000180 <memchr>
 8005f30:	b108      	cbz	r0, 8005f36 <_printf_i+0x1f2>
 8005f32:	1b40      	subs	r0, r0, r5
 8005f34:	6060      	str	r0, [r4, #4]
 8005f36:	6863      	ldr	r3, [r4, #4]
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f40:	e7a8      	b.n	8005e94 <_printf_i+0x150>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	462a      	mov	r2, r5
 8005f46:	4649      	mov	r1, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	47d0      	blx	sl
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d0ab      	beq.n	8005ea8 <_printf_i+0x164>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	079b      	lsls	r3, r3, #30
 8005f54:	d413      	bmi.n	8005f7e <_printf_i+0x23a>
 8005f56:	68e0      	ldr	r0, [r4, #12]
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	4298      	cmp	r0, r3
 8005f5c:	bfb8      	it	lt
 8005f5e:	4618      	movlt	r0, r3
 8005f60:	e7a4      	b.n	8005eac <_printf_i+0x168>
 8005f62:	2301      	movs	r3, #1
 8005f64:	4632      	mov	r2, r6
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	47d0      	blx	sl
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d09b      	beq.n	8005ea8 <_printf_i+0x164>
 8005f70:	3501      	adds	r5, #1
 8005f72:	68e3      	ldr	r3, [r4, #12]
 8005f74:	9903      	ldr	r1, [sp, #12]
 8005f76:	1a5b      	subs	r3, r3, r1
 8005f78:	42ab      	cmp	r3, r5
 8005f7a:	dcf2      	bgt.n	8005f62 <_printf_i+0x21e>
 8005f7c:	e7eb      	b.n	8005f56 <_printf_i+0x212>
 8005f7e:	2500      	movs	r5, #0
 8005f80:	f104 0619 	add.w	r6, r4, #25
 8005f84:	e7f5      	b.n	8005f72 <_printf_i+0x22e>
 8005f86:	bf00      	nop
 8005f88:	08007ea6 	.word	0x08007ea6
 8005f8c:	08007eb7 	.word	0x08007eb7

08005f90 <iprintf>:
 8005f90:	b40f      	push	{r0, r1, r2, r3}
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <iprintf+0x2c>)
 8005f94:	b513      	push	{r0, r1, r4, lr}
 8005f96:	681c      	ldr	r4, [r3, #0]
 8005f98:	b124      	cbz	r4, 8005fa4 <iprintf+0x14>
 8005f9a:	69a3      	ldr	r3, [r4, #24]
 8005f9c:	b913      	cbnz	r3, 8005fa4 <iprintf+0x14>
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f7ff f95c 	bl	800525c <__sinit>
 8005fa4:	ab05      	add	r3, sp, #20
 8005fa6:	9a04      	ldr	r2, [sp, #16]
 8005fa8:	68a1      	ldr	r1, [r4, #8]
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	4620      	mov	r0, r4
 8005fae:	f001 fc01 	bl	80077b4 <_vfiprintf_r>
 8005fb2:	b002      	add	sp, #8
 8005fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb8:	b004      	add	sp, #16
 8005fba:	4770      	bx	lr
 8005fbc:	20000018 	.word	0x20000018

08005fc0 <_sbrk_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d06      	ldr	r5, [pc, #24]	; (8005fdc <_sbrk_r+0x1c>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	f7fb fa5c 	bl	8001488 <_sbrk>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_sbrk_r+0x1a>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_sbrk_r+0x1a>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200002cc 	.word	0x200002cc

08005fe0 <__sread>:
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe8:	f001 fd14 	bl	8007a14 <_read_r>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	bfab      	itete	ge
 8005ff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ff4:	181b      	addge	r3, r3, r0
 8005ff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ffa:	bfac      	ite	ge
 8005ffc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ffe:	81a3      	strhlt	r3, [r4, #12]
 8006000:	bd10      	pop	{r4, pc}

08006002 <__swrite>:
 8006002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006006:	461f      	mov	r7, r3
 8006008:	898b      	ldrh	r3, [r1, #12]
 800600a:	05db      	lsls	r3, r3, #23
 800600c:	4605      	mov	r5, r0
 800600e:	460c      	mov	r4, r1
 8006010:	4616      	mov	r6, r2
 8006012:	d505      	bpl.n	8006020 <__swrite+0x1e>
 8006014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006018:	2302      	movs	r3, #2
 800601a:	2200      	movs	r2, #0
 800601c:	f000 ffd6 	bl	8006fcc <_lseek_r>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800602a:	81a3      	strh	r3, [r4, #12]
 800602c:	4632      	mov	r2, r6
 800602e:	463b      	mov	r3, r7
 8006030:	4628      	mov	r0, r5
 8006032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006036:	f000 b869 	b.w	800610c <_write_r>

0800603a <__sseek>:
 800603a:	b510      	push	{r4, lr}
 800603c:	460c      	mov	r4, r1
 800603e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006042:	f000 ffc3 	bl	8006fcc <_lseek_r>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	bf15      	itete	ne
 800604c:	6560      	strne	r0, [r4, #84]	; 0x54
 800604e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006056:	81a3      	strheq	r3, [r4, #12]
 8006058:	bf18      	it	ne
 800605a:	81a3      	strhne	r3, [r4, #12]
 800605c:	bd10      	pop	{r4, pc}

0800605e <__sclose>:
 800605e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006062:	f000 b8f1 	b.w	8006248 <_close_r>
	...

08006068 <__swbuf_r>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	460e      	mov	r6, r1
 800606c:	4614      	mov	r4, r2
 800606e:	4605      	mov	r5, r0
 8006070:	b118      	cbz	r0, 800607a <__swbuf_r+0x12>
 8006072:	6983      	ldr	r3, [r0, #24]
 8006074:	b90b      	cbnz	r3, 800607a <__swbuf_r+0x12>
 8006076:	f7ff f8f1 	bl	800525c <__sinit>
 800607a:	4b21      	ldr	r3, [pc, #132]	; (8006100 <__swbuf_r+0x98>)
 800607c:	429c      	cmp	r4, r3
 800607e:	d12b      	bne.n	80060d8 <__swbuf_r+0x70>
 8006080:	686c      	ldr	r4, [r5, #4]
 8006082:	69a3      	ldr	r3, [r4, #24]
 8006084:	60a3      	str	r3, [r4, #8]
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	071a      	lsls	r2, r3, #28
 800608a:	d52f      	bpl.n	80060ec <__swbuf_r+0x84>
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	b36b      	cbz	r3, 80060ec <__swbuf_r+0x84>
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	6820      	ldr	r0, [r4, #0]
 8006094:	1ac0      	subs	r0, r0, r3
 8006096:	6963      	ldr	r3, [r4, #20]
 8006098:	b2f6      	uxtb	r6, r6
 800609a:	4283      	cmp	r3, r0
 800609c:	4637      	mov	r7, r6
 800609e:	dc04      	bgt.n	80060aa <__swbuf_r+0x42>
 80060a0:	4621      	mov	r1, r4
 80060a2:	4628      	mov	r0, r5
 80060a4:	f7ff f846 	bl	8005134 <_fflush_r>
 80060a8:	bb30      	cbnz	r0, 80060f8 <__swbuf_r+0x90>
 80060aa:	68a3      	ldr	r3, [r4, #8]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	60a3      	str	r3, [r4, #8]
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	6022      	str	r2, [r4, #0]
 80060b6:	701e      	strb	r6, [r3, #0]
 80060b8:	6963      	ldr	r3, [r4, #20]
 80060ba:	3001      	adds	r0, #1
 80060bc:	4283      	cmp	r3, r0
 80060be:	d004      	beq.n	80060ca <__swbuf_r+0x62>
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	07db      	lsls	r3, r3, #31
 80060c4:	d506      	bpl.n	80060d4 <__swbuf_r+0x6c>
 80060c6:	2e0a      	cmp	r6, #10
 80060c8:	d104      	bne.n	80060d4 <__swbuf_r+0x6c>
 80060ca:	4621      	mov	r1, r4
 80060cc:	4628      	mov	r0, r5
 80060ce:	f7ff f831 	bl	8005134 <_fflush_r>
 80060d2:	b988      	cbnz	r0, 80060f8 <__swbuf_r+0x90>
 80060d4:	4638      	mov	r0, r7
 80060d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <__swbuf_r+0x9c>)
 80060da:	429c      	cmp	r4, r3
 80060dc:	d101      	bne.n	80060e2 <__swbuf_r+0x7a>
 80060de:	68ac      	ldr	r4, [r5, #8]
 80060e0:	e7cf      	b.n	8006082 <__swbuf_r+0x1a>
 80060e2:	4b09      	ldr	r3, [pc, #36]	; (8006108 <__swbuf_r+0xa0>)
 80060e4:	429c      	cmp	r4, r3
 80060e6:	bf08      	it	eq
 80060e8:	68ec      	ldreq	r4, [r5, #12]
 80060ea:	e7ca      	b.n	8006082 <__swbuf_r+0x1a>
 80060ec:	4621      	mov	r1, r4
 80060ee:	4628      	mov	r0, r5
 80060f0:	f000 f81e 	bl	8006130 <__swsetup_r>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d0cb      	beq.n	8006090 <__swbuf_r+0x28>
 80060f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80060fc:	e7ea      	b.n	80060d4 <__swbuf_r+0x6c>
 80060fe:	bf00      	nop
 8006100:	08007e50 	.word	0x08007e50
 8006104:	08007e70 	.word	0x08007e70
 8006108:	08007e30 	.word	0x08007e30

0800610c <_write_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d07      	ldr	r5, [pc, #28]	; (800612c <_write_r+0x20>)
 8006110:	4604      	mov	r4, r0
 8006112:	4608      	mov	r0, r1
 8006114:	4611      	mov	r1, r2
 8006116:	2200      	movs	r2, #0
 8006118:	602a      	str	r2, [r5, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	f7fb f963 	bl	80013e6 <_write>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_write_r+0x1e>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_write_r+0x1e>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	200002cc 	.word	0x200002cc

08006130 <__swsetup_r>:
 8006130:	4b32      	ldr	r3, [pc, #200]	; (80061fc <__swsetup_r+0xcc>)
 8006132:	b570      	push	{r4, r5, r6, lr}
 8006134:	681d      	ldr	r5, [r3, #0]
 8006136:	4606      	mov	r6, r0
 8006138:	460c      	mov	r4, r1
 800613a:	b125      	cbz	r5, 8006146 <__swsetup_r+0x16>
 800613c:	69ab      	ldr	r3, [r5, #24]
 800613e:	b913      	cbnz	r3, 8006146 <__swsetup_r+0x16>
 8006140:	4628      	mov	r0, r5
 8006142:	f7ff f88b 	bl	800525c <__sinit>
 8006146:	4b2e      	ldr	r3, [pc, #184]	; (8006200 <__swsetup_r+0xd0>)
 8006148:	429c      	cmp	r4, r3
 800614a:	d10f      	bne.n	800616c <__swsetup_r+0x3c>
 800614c:	686c      	ldr	r4, [r5, #4]
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006154:	0719      	lsls	r1, r3, #28
 8006156:	d42c      	bmi.n	80061b2 <__swsetup_r+0x82>
 8006158:	06dd      	lsls	r5, r3, #27
 800615a:	d411      	bmi.n	8006180 <__swsetup_r+0x50>
 800615c:	2309      	movs	r3, #9
 800615e:	6033      	str	r3, [r6, #0]
 8006160:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800616a:	e03e      	b.n	80061ea <__swsetup_r+0xba>
 800616c:	4b25      	ldr	r3, [pc, #148]	; (8006204 <__swsetup_r+0xd4>)
 800616e:	429c      	cmp	r4, r3
 8006170:	d101      	bne.n	8006176 <__swsetup_r+0x46>
 8006172:	68ac      	ldr	r4, [r5, #8]
 8006174:	e7eb      	b.n	800614e <__swsetup_r+0x1e>
 8006176:	4b24      	ldr	r3, [pc, #144]	; (8006208 <__swsetup_r+0xd8>)
 8006178:	429c      	cmp	r4, r3
 800617a:	bf08      	it	eq
 800617c:	68ec      	ldreq	r4, [r5, #12]
 800617e:	e7e6      	b.n	800614e <__swsetup_r+0x1e>
 8006180:	0758      	lsls	r0, r3, #29
 8006182:	d512      	bpl.n	80061aa <__swsetup_r+0x7a>
 8006184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006186:	b141      	cbz	r1, 800619a <__swsetup_r+0x6a>
 8006188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800618c:	4299      	cmp	r1, r3
 800618e:	d002      	beq.n	8006196 <__swsetup_r+0x66>
 8006190:	4630      	mov	r0, r6
 8006192:	f7ff f9b3 	bl	80054fc <_free_r>
 8006196:	2300      	movs	r3, #0
 8006198:	6363      	str	r3, [r4, #52]	; 0x34
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	2300      	movs	r3, #0
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f043 0308 	orr.w	r3, r3, #8
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	b94b      	cbnz	r3, 80061ca <__swsetup_r+0x9a>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c0:	d003      	beq.n	80061ca <__swsetup_r+0x9a>
 80061c2:	4621      	mov	r1, r4
 80061c4:	4630      	mov	r0, r6
 80061c6:	f7ff f933 	bl	8005430 <__smakebuf_r>
 80061ca:	89a0      	ldrh	r0, [r4, #12]
 80061cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061d0:	f010 0301 	ands.w	r3, r0, #1
 80061d4:	d00a      	beq.n	80061ec <__swsetup_r+0xbc>
 80061d6:	2300      	movs	r3, #0
 80061d8:	60a3      	str	r3, [r4, #8]
 80061da:	6963      	ldr	r3, [r4, #20]
 80061dc:	425b      	negs	r3, r3
 80061de:	61a3      	str	r3, [r4, #24]
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	b943      	cbnz	r3, 80061f6 <__swsetup_r+0xc6>
 80061e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061e8:	d1ba      	bne.n	8006160 <__swsetup_r+0x30>
 80061ea:	bd70      	pop	{r4, r5, r6, pc}
 80061ec:	0781      	lsls	r1, r0, #30
 80061ee:	bf58      	it	pl
 80061f0:	6963      	ldrpl	r3, [r4, #20]
 80061f2:	60a3      	str	r3, [r4, #8]
 80061f4:	e7f4      	b.n	80061e0 <__swsetup_r+0xb0>
 80061f6:	2000      	movs	r0, #0
 80061f8:	e7f7      	b.n	80061ea <__swsetup_r+0xba>
 80061fa:	bf00      	nop
 80061fc:	20000018 	.word	0x20000018
 8006200:	08007e50 	.word	0x08007e50
 8006204:	08007e70 	.word	0x08007e70
 8006208:	08007e30 	.word	0x08007e30

0800620c <__assert_func>:
 800620c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800620e:	4614      	mov	r4, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4b09      	ldr	r3, [pc, #36]	; (8006238 <__assert_func+0x2c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4605      	mov	r5, r0
 8006218:	68d8      	ldr	r0, [r3, #12]
 800621a:	b14c      	cbz	r4, 8006230 <__assert_func+0x24>
 800621c:	4b07      	ldr	r3, [pc, #28]	; (800623c <__assert_func+0x30>)
 800621e:	9100      	str	r1, [sp, #0]
 8006220:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006224:	4906      	ldr	r1, [pc, #24]	; (8006240 <__assert_func+0x34>)
 8006226:	462b      	mov	r3, r5
 8006228:	f000 fe98 	bl	8006f5c <fiprintf>
 800622c:	f001 fc11 	bl	8007a52 <abort>
 8006230:	4b04      	ldr	r3, [pc, #16]	; (8006244 <__assert_func+0x38>)
 8006232:	461c      	mov	r4, r3
 8006234:	e7f3      	b.n	800621e <__assert_func+0x12>
 8006236:	bf00      	nop
 8006238:	20000018 	.word	0x20000018
 800623c:	08007ec8 	.word	0x08007ec8
 8006240:	08007ed5 	.word	0x08007ed5
 8006244:	08007f03 	.word	0x08007f03

08006248 <_close_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d06      	ldr	r5, [pc, #24]	; (8006264 <_close_r+0x1c>)
 800624c:	2300      	movs	r3, #0
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fb f8e3 	bl	800141e <_close>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_close_r+0x1a>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_close_r+0x1a>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	200002cc 	.word	0x200002cc

08006268 <quorem>:
 8006268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	6903      	ldr	r3, [r0, #16]
 800626e:	690c      	ldr	r4, [r1, #16]
 8006270:	42a3      	cmp	r3, r4
 8006272:	4607      	mov	r7, r0
 8006274:	f2c0 8081 	blt.w	800637a <quorem+0x112>
 8006278:	3c01      	subs	r4, #1
 800627a:	f101 0814 	add.w	r8, r1, #20
 800627e:	f100 0514 	add.w	r5, r0, #20
 8006282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800628c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006290:	3301      	adds	r3, #1
 8006292:	429a      	cmp	r2, r3
 8006294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800629c:	fbb2 f6f3 	udiv	r6, r2, r3
 80062a0:	d331      	bcc.n	8006306 <quorem+0x9e>
 80062a2:	f04f 0e00 	mov.w	lr, #0
 80062a6:	4640      	mov	r0, r8
 80062a8:	46ac      	mov	ip, r5
 80062aa:	46f2      	mov	sl, lr
 80062ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80062b0:	b293      	uxth	r3, r2
 80062b2:	fb06 e303 	mla	r3, r6, r3, lr
 80062b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ebaa 0303 	sub.w	r3, sl, r3
 80062c0:	f8dc a000 	ldr.w	sl, [ip]
 80062c4:	0c12      	lsrs	r2, r2, #16
 80062c6:	fa13 f38a 	uxtah	r3, r3, sl
 80062ca:	fb06 e202 	mla	r2, r6, r2, lr
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	9b00      	ldr	r3, [sp, #0]
 80062d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062d6:	b292      	uxth	r2, r2
 80062d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80062e4:	4581      	cmp	r9, r0
 80062e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ea:	f84c 3b04 	str.w	r3, [ip], #4
 80062ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062f2:	d2db      	bcs.n	80062ac <quorem+0x44>
 80062f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80062f8:	b92b      	cbnz	r3, 8006306 <quorem+0x9e>
 80062fa:	9b01      	ldr	r3, [sp, #4]
 80062fc:	3b04      	subs	r3, #4
 80062fe:	429d      	cmp	r5, r3
 8006300:	461a      	mov	r2, r3
 8006302:	d32e      	bcc.n	8006362 <quorem+0xfa>
 8006304:	613c      	str	r4, [r7, #16]
 8006306:	4638      	mov	r0, r7
 8006308:	f001 f912 	bl	8007530 <__mcmp>
 800630c:	2800      	cmp	r0, #0
 800630e:	db24      	blt.n	800635a <quorem+0xf2>
 8006310:	3601      	adds	r6, #1
 8006312:	4628      	mov	r0, r5
 8006314:	f04f 0c00 	mov.w	ip, #0
 8006318:	f858 2b04 	ldr.w	r2, [r8], #4
 800631c:	f8d0 e000 	ldr.w	lr, [r0]
 8006320:	b293      	uxth	r3, r2
 8006322:	ebac 0303 	sub.w	r3, ip, r3
 8006326:	0c12      	lsrs	r2, r2, #16
 8006328:	fa13 f38e 	uxtah	r3, r3, lr
 800632c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006334:	b29b      	uxth	r3, r3
 8006336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800633a:	45c1      	cmp	r9, r8
 800633c:	f840 3b04 	str.w	r3, [r0], #4
 8006340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006344:	d2e8      	bcs.n	8006318 <quorem+0xb0>
 8006346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800634a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800634e:	b922      	cbnz	r2, 800635a <quorem+0xf2>
 8006350:	3b04      	subs	r3, #4
 8006352:	429d      	cmp	r5, r3
 8006354:	461a      	mov	r2, r3
 8006356:	d30a      	bcc.n	800636e <quorem+0x106>
 8006358:	613c      	str	r4, [r7, #16]
 800635a:	4630      	mov	r0, r6
 800635c:	b003      	add	sp, #12
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	3b04      	subs	r3, #4
 8006366:	2a00      	cmp	r2, #0
 8006368:	d1cc      	bne.n	8006304 <quorem+0x9c>
 800636a:	3c01      	subs	r4, #1
 800636c:	e7c7      	b.n	80062fe <quorem+0x96>
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	3b04      	subs	r3, #4
 8006372:	2a00      	cmp	r2, #0
 8006374:	d1f0      	bne.n	8006358 <quorem+0xf0>
 8006376:	3c01      	subs	r4, #1
 8006378:	e7eb      	b.n	8006352 <quorem+0xea>
 800637a:	2000      	movs	r0, #0
 800637c:	e7ee      	b.n	800635c <quorem+0xf4>
	...

08006380 <_dtoa_r>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	ed2d 8b04 	vpush	{d8-d9}
 8006388:	ec57 6b10 	vmov	r6, r7, d0
 800638c:	b093      	sub	sp, #76	; 0x4c
 800638e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006394:	9106      	str	r1, [sp, #24]
 8006396:	ee10 aa10 	vmov	sl, s0
 800639a:	4604      	mov	r4, r0
 800639c:	9209      	str	r2, [sp, #36]	; 0x24
 800639e:	930c      	str	r3, [sp, #48]	; 0x30
 80063a0:	46bb      	mov	fp, r7
 80063a2:	b975      	cbnz	r5, 80063c2 <_dtoa_r+0x42>
 80063a4:	2010      	movs	r0, #16
 80063a6:	f7ff f883 	bl	80054b0 <malloc>
 80063aa:	4602      	mov	r2, r0
 80063ac:	6260      	str	r0, [r4, #36]	; 0x24
 80063ae:	b920      	cbnz	r0, 80063ba <_dtoa_r+0x3a>
 80063b0:	4ba7      	ldr	r3, [pc, #668]	; (8006650 <_dtoa_r+0x2d0>)
 80063b2:	21ea      	movs	r1, #234	; 0xea
 80063b4:	48a7      	ldr	r0, [pc, #668]	; (8006654 <_dtoa_r+0x2d4>)
 80063b6:	f7ff ff29 	bl	800620c <__assert_func>
 80063ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063be:	6005      	str	r5, [r0, #0]
 80063c0:	60c5      	str	r5, [r0, #12]
 80063c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c4:	6819      	ldr	r1, [r3, #0]
 80063c6:	b151      	cbz	r1, 80063de <_dtoa_r+0x5e>
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	604a      	str	r2, [r1, #4]
 80063cc:	2301      	movs	r3, #1
 80063ce:	4093      	lsls	r3, r2
 80063d0:	608b      	str	r3, [r1, #8]
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 fe6a 	bl	80070ac <_Bfree>
 80063d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	1e3b      	subs	r3, r7, #0
 80063e0:	bfaa      	itet	ge
 80063e2:	2300      	movge	r3, #0
 80063e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80063e8:	f8c8 3000 	strge.w	r3, [r8]
 80063ec:	4b9a      	ldr	r3, [pc, #616]	; (8006658 <_dtoa_r+0x2d8>)
 80063ee:	bfbc      	itt	lt
 80063f0:	2201      	movlt	r2, #1
 80063f2:	f8c8 2000 	strlt.w	r2, [r8]
 80063f6:	ea33 030b 	bics.w	r3, r3, fp
 80063fa:	d11b      	bne.n	8006434 <_dtoa_r+0xb4>
 80063fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006408:	4333      	orrs	r3, r6
 800640a:	f000 8592 	beq.w	8006f32 <_dtoa_r+0xbb2>
 800640e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006410:	b963      	cbnz	r3, 800642c <_dtoa_r+0xac>
 8006412:	4b92      	ldr	r3, [pc, #584]	; (800665c <_dtoa_r+0x2dc>)
 8006414:	e022      	b.n	800645c <_dtoa_r+0xdc>
 8006416:	4b92      	ldr	r3, [pc, #584]	; (8006660 <_dtoa_r+0x2e0>)
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	3308      	adds	r3, #8
 800641c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	9801      	ldr	r0, [sp, #4]
 8006422:	b013      	add	sp, #76	; 0x4c
 8006424:	ecbd 8b04 	vpop	{d8-d9}
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	4b8b      	ldr	r3, [pc, #556]	; (800665c <_dtoa_r+0x2dc>)
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	3303      	adds	r3, #3
 8006432:	e7f3      	b.n	800641c <_dtoa_r+0x9c>
 8006434:	2200      	movs	r2, #0
 8006436:	2300      	movs	r3, #0
 8006438:	4650      	mov	r0, sl
 800643a:	4659      	mov	r1, fp
 800643c:	f7fa fb1c 	bl	8000a78 <__aeabi_dcmpeq>
 8006440:	ec4b ab19 	vmov	d9, sl, fp
 8006444:	4680      	mov	r8, r0
 8006446:	b158      	cbz	r0, 8006460 <_dtoa_r+0xe0>
 8006448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800644a:	2301      	movs	r3, #1
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 856b 	beq.w	8006f2c <_dtoa_r+0xbac>
 8006456:	4883      	ldr	r0, [pc, #524]	; (8006664 <_dtoa_r+0x2e4>)
 8006458:	6018      	str	r0, [r3, #0]
 800645a:	1e43      	subs	r3, r0, #1
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	e7df      	b.n	8006420 <_dtoa_r+0xa0>
 8006460:	ec4b ab10 	vmov	d0, sl, fp
 8006464:	aa10      	add	r2, sp, #64	; 0x40
 8006466:	a911      	add	r1, sp, #68	; 0x44
 8006468:	4620      	mov	r0, r4
 800646a:	f001 f907 	bl	800767c <__d2b>
 800646e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006472:	ee08 0a10 	vmov	s16, r0
 8006476:	2d00      	cmp	r5, #0
 8006478:	f000 8084 	beq.w	8006584 <_dtoa_r+0x204>
 800647c:	ee19 3a90 	vmov	r3, s19
 8006480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006484:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006488:	4656      	mov	r6, sl
 800648a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800648e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006492:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006496:	4b74      	ldr	r3, [pc, #464]	; (8006668 <_dtoa_r+0x2e8>)
 8006498:	2200      	movs	r2, #0
 800649a:	4630      	mov	r0, r6
 800649c:	4639      	mov	r1, r7
 800649e:	f7f9 fecb 	bl	8000238 <__aeabi_dsub>
 80064a2:	a365      	add	r3, pc, #404	; (adr r3, 8006638 <_dtoa_r+0x2b8>)
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f7fa f87e 	bl	80005a8 <__aeabi_dmul>
 80064ac:	a364      	add	r3, pc, #400	; (adr r3, 8006640 <_dtoa_r+0x2c0>)
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f7f9 fec3 	bl	800023c <__adddf3>
 80064b6:	4606      	mov	r6, r0
 80064b8:	4628      	mov	r0, r5
 80064ba:	460f      	mov	r7, r1
 80064bc:	f7fa f80a 	bl	80004d4 <__aeabi_i2d>
 80064c0:	a361      	add	r3, pc, #388	; (adr r3, 8006648 <_dtoa_r+0x2c8>)
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7fa f86f 	bl	80005a8 <__aeabi_dmul>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4630      	mov	r0, r6
 80064d0:	4639      	mov	r1, r7
 80064d2:	f7f9 feb3 	bl	800023c <__adddf3>
 80064d6:	4606      	mov	r6, r0
 80064d8:	460f      	mov	r7, r1
 80064da:	f7fa fb15 	bl	8000b08 <__aeabi_d2iz>
 80064de:	2200      	movs	r2, #0
 80064e0:	9000      	str	r0, [sp, #0]
 80064e2:	2300      	movs	r3, #0
 80064e4:	4630      	mov	r0, r6
 80064e6:	4639      	mov	r1, r7
 80064e8:	f7fa fad0 	bl	8000a8c <__aeabi_dcmplt>
 80064ec:	b150      	cbz	r0, 8006504 <_dtoa_r+0x184>
 80064ee:	9800      	ldr	r0, [sp, #0]
 80064f0:	f7f9 fff0 	bl	80004d4 <__aeabi_i2d>
 80064f4:	4632      	mov	r2, r6
 80064f6:	463b      	mov	r3, r7
 80064f8:	f7fa fabe 	bl	8000a78 <__aeabi_dcmpeq>
 80064fc:	b910      	cbnz	r0, 8006504 <_dtoa_r+0x184>
 80064fe:	9b00      	ldr	r3, [sp, #0]
 8006500:	3b01      	subs	r3, #1
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	9b00      	ldr	r3, [sp, #0]
 8006506:	2b16      	cmp	r3, #22
 8006508:	d85a      	bhi.n	80065c0 <_dtoa_r+0x240>
 800650a:	9a00      	ldr	r2, [sp, #0]
 800650c:	4b57      	ldr	r3, [pc, #348]	; (800666c <_dtoa_r+0x2ec>)
 800650e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	ec51 0b19 	vmov	r0, r1, d9
 800651a:	f7fa fab7 	bl	8000a8c <__aeabi_dcmplt>
 800651e:	2800      	cmp	r0, #0
 8006520:	d050      	beq.n	80065c4 <_dtoa_r+0x244>
 8006522:	9b00      	ldr	r3, [sp, #0]
 8006524:	3b01      	subs	r3, #1
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	2300      	movs	r3, #0
 800652a:	930b      	str	r3, [sp, #44]	; 0x2c
 800652c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800652e:	1b5d      	subs	r5, r3, r5
 8006530:	1e6b      	subs	r3, r5, #1
 8006532:	9305      	str	r3, [sp, #20]
 8006534:	bf45      	ittet	mi
 8006536:	f1c5 0301 	rsbmi	r3, r5, #1
 800653a:	9304      	strmi	r3, [sp, #16]
 800653c:	2300      	movpl	r3, #0
 800653e:	2300      	movmi	r3, #0
 8006540:	bf4c      	ite	mi
 8006542:	9305      	strmi	r3, [sp, #20]
 8006544:	9304      	strpl	r3, [sp, #16]
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	db3d      	blt.n	80065c8 <_dtoa_r+0x248>
 800654c:	9b05      	ldr	r3, [sp, #20]
 800654e:	9a00      	ldr	r2, [sp, #0]
 8006550:	920a      	str	r2, [sp, #40]	; 0x28
 8006552:	4413      	add	r3, r2
 8006554:	9305      	str	r3, [sp, #20]
 8006556:	2300      	movs	r3, #0
 8006558:	9307      	str	r3, [sp, #28]
 800655a:	9b06      	ldr	r3, [sp, #24]
 800655c:	2b09      	cmp	r3, #9
 800655e:	f200 8089 	bhi.w	8006674 <_dtoa_r+0x2f4>
 8006562:	2b05      	cmp	r3, #5
 8006564:	bfc4      	itt	gt
 8006566:	3b04      	subgt	r3, #4
 8006568:	9306      	strgt	r3, [sp, #24]
 800656a:	9b06      	ldr	r3, [sp, #24]
 800656c:	f1a3 0302 	sub.w	r3, r3, #2
 8006570:	bfcc      	ite	gt
 8006572:	2500      	movgt	r5, #0
 8006574:	2501      	movle	r5, #1
 8006576:	2b03      	cmp	r3, #3
 8006578:	f200 8087 	bhi.w	800668a <_dtoa_r+0x30a>
 800657c:	e8df f003 	tbb	[pc, r3]
 8006580:	59383a2d 	.word	0x59383a2d
 8006584:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006588:	441d      	add	r5, r3
 800658a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800658e:	2b20      	cmp	r3, #32
 8006590:	bfc1      	itttt	gt
 8006592:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006596:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800659a:	fa0b f303 	lslgt.w	r3, fp, r3
 800659e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065a2:	bfda      	itte	le
 80065a4:	f1c3 0320 	rsble	r3, r3, #32
 80065a8:	fa06 f003 	lslle.w	r0, r6, r3
 80065ac:	4318      	orrgt	r0, r3
 80065ae:	f7f9 ff81 	bl	80004b4 <__aeabi_ui2d>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4606      	mov	r6, r0
 80065b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065ba:	3d01      	subs	r5, #1
 80065bc:	930e      	str	r3, [sp, #56]	; 0x38
 80065be:	e76a      	b.n	8006496 <_dtoa_r+0x116>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e7b2      	b.n	800652a <_dtoa_r+0x1aa>
 80065c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80065c6:	e7b1      	b.n	800652c <_dtoa_r+0x1ac>
 80065c8:	9b04      	ldr	r3, [sp, #16]
 80065ca:	9a00      	ldr	r2, [sp, #0]
 80065cc:	1a9b      	subs	r3, r3, r2
 80065ce:	9304      	str	r3, [sp, #16]
 80065d0:	4253      	negs	r3, r2
 80065d2:	9307      	str	r3, [sp, #28]
 80065d4:	2300      	movs	r3, #0
 80065d6:	930a      	str	r3, [sp, #40]	; 0x28
 80065d8:	e7bf      	b.n	800655a <_dtoa_r+0x1da>
 80065da:	2300      	movs	r3, #0
 80065dc:	9308      	str	r3, [sp, #32]
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dc55      	bgt.n	8006690 <_dtoa_r+0x310>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065ea:	461a      	mov	r2, r3
 80065ec:	9209      	str	r2, [sp, #36]	; 0x24
 80065ee:	e00c      	b.n	800660a <_dtoa_r+0x28a>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e7f3      	b.n	80065dc <_dtoa_r+0x25c>
 80065f4:	2300      	movs	r3, #0
 80065f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065f8:	9308      	str	r3, [sp, #32]
 80065fa:	9b00      	ldr	r3, [sp, #0]
 80065fc:	4413      	add	r3, r2
 80065fe:	9302      	str	r3, [sp, #8]
 8006600:	3301      	adds	r3, #1
 8006602:	2b01      	cmp	r3, #1
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	bfb8      	it	lt
 8006608:	2301      	movlt	r3, #1
 800660a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800660c:	2200      	movs	r2, #0
 800660e:	6042      	str	r2, [r0, #4]
 8006610:	2204      	movs	r2, #4
 8006612:	f102 0614 	add.w	r6, r2, #20
 8006616:	429e      	cmp	r6, r3
 8006618:	6841      	ldr	r1, [r0, #4]
 800661a:	d93d      	bls.n	8006698 <_dtoa_r+0x318>
 800661c:	4620      	mov	r0, r4
 800661e:	f000 fd05 	bl	800702c <_Balloc>
 8006622:	9001      	str	r0, [sp, #4]
 8006624:	2800      	cmp	r0, #0
 8006626:	d13b      	bne.n	80066a0 <_dtoa_r+0x320>
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <_dtoa_r+0x2f0>)
 800662a:	4602      	mov	r2, r0
 800662c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006630:	e6c0      	b.n	80063b4 <_dtoa_r+0x34>
 8006632:	2301      	movs	r3, #1
 8006634:	e7df      	b.n	80065f6 <_dtoa_r+0x276>
 8006636:	bf00      	nop
 8006638:	636f4361 	.word	0x636f4361
 800663c:	3fd287a7 	.word	0x3fd287a7
 8006640:	8b60c8b3 	.word	0x8b60c8b3
 8006644:	3fc68a28 	.word	0x3fc68a28
 8006648:	509f79fb 	.word	0x509f79fb
 800664c:	3fd34413 	.word	0x3fd34413
 8006650:	08008012 	.word	0x08008012
 8006654:	08008029 	.word	0x08008029
 8006658:	7ff00000 	.word	0x7ff00000
 800665c:	0800800e 	.word	0x0800800e
 8006660:	08008005 	.word	0x08008005
 8006664:	08007ea5 	.word	0x08007ea5
 8006668:	3ff80000 	.word	0x3ff80000
 800666c:	08008128 	.word	0x08008128
 8006670:	08008084 	.word	0x08008084
 8006674:	2501      	movs	r5, #1
 8006676:	2300      	movs	r3, #0
 8006678:	9306      	str	r3, [sp, #24]
 800667a:	9508      	str	r5, [sp, #32]
 800667c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006680:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	2312      	movs	r3, #18
 8006688:	e7b0      	b.n	80065ec <_dtoa_r+0x26c>
 800668a:	2301      	movs	r3, #1
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	e7f5      	b.n	800667c <_dtoa_r+0x2fc>
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006696:	e7b8      	b.n	800660a <_dtoa_r+0x28a>
 8006698:	3101      	adds	r1, #1
 800669a:	6041      	str	r1, [r0, #4]
 800669c:	0052      	lsls	r2, r2, #1
 800669e:	e7b8      	b.n	8006612 <_dtoa_r+0x292>
 80066a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066a2:	9a01      	ldr	r2, [sp, #4]
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	2b0e      	cmp	r3, #14
 80066aa:	f200 809d 	bhi.w	80067e8 <_dtoa_r+0x468>
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	f000 809a 	beq.w	80067e8 <_dtoa_r+0x468>
 80066b4:	9b00      	ldr	r3, [sp, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	dd32      	ble.n	8006720 <_dtoa_r+0x3a0>
 80066ba:	4ab7      	ldr	r2, [pc, #732]	; (8006998 <_dtoa_r+0x618>)
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	05d8      	lsls	r0, r3, #23
 80066cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80066d0:	d516      	bpl.n	8006700 <_dtoa_r+0x380>
 80066d2:	4bb2      	ldr	r3, [pc, #712]	; (800699c <_dtoa_r+0x61c>)
 80066d4:	ec51 0b19 	vmov	r0, r1, d9
 80066d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066dc:	f7fa f88e 	bl	80007fc <__aeabi_ddiv>
 80066e0:	f007 070f 	and.w	r7, r7, #15
 80066e4:	4682      	mov	sl, r0
 80066e6:	468b      	mov	fp, r1
 80066e8:	2503      	movs	r5, #3
 80066ea:	4eac      	ldr	r6, [pc, #688]	; (800699c <_dtoa_r+0x61c>)
 80066ec:	b957      	cbnz	r7, 8006704 <_dtoa_r+0x384>
 80066ee:	4642      	mov	r2, r8
 80066f0:	464b      	mov	r3, r9
 80066f2:	4650      	mov	r0, sl
 80066f4:	4659      	mov	r1, fp
 80066f6:	f7fa f881 	bl	80007fc <__aeabi_ddiv>
 80066fa:	4682      	mov	sl, r0
 80066fc:	468b      	mov	fp, r1
 80066fe:	e028      	b.n	8006752 <_dtoa_r+0x3d2>
 8006700:	2502      	movs	r5, #2
 8006702:	e7f2      	b.n	80066ea <_dtoa_r+0x36a>
 8006704:	07f9      	lsls	r1, r7, #31
 8006706:	d508      	bpl.n	800671a <_dtoa_r+0x39a>
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006710:	f7f9 ff4a 	bl	80005a8 <__aeabi_dmul>
 8006714:	3501      	adds	r5, #1
 8006716:	4680      	mov	r8, r0
 8006718:	4689      	mov	r9, r1
 800671a:	107f      	asrs	r7, r7, #1
 800671c:	3608      	adds	r6, #8
 800671e:	e7e5      	b.n	80066ec <_dtoa_r+0x36c>
 8006720:	f000 809b 	beq.w	800685a <_dtoa_r+0x4da>
 8006724:	9b00      	ldr	r3, [sp, #0]
 8006726:	4f9d      	ldr	r7, [pc, #628]	; (800699c <_dtoa_r+0x61c>)
 8006728:	425e      	negs	r6, r3
 800672a:	4b9b      	ldr	r3, [pc, #620]	; (8006998 <_dtoa_r+0x618>)
 800672c:	f006 020f 	and.w	r2, r6, #15
 8006730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	ec51 0b19 	vmov	r0, r1, d9
 800673c:	f7f9 ff34 	bl	80005a8 <__aeabi_dmul>
 8006740:	1136      	asrs	r6, r6, #4
 8006742:	4682      	mov	sl, r0
 8006744:	468b      	mov	fp, r1
 8006746:	2300      	movs	r3, #0
 8006748:	2502      	movs	r5, #2
 800674a:	2e00      	cmp	r6, #0
 800674c:	d17a      	bne.n	8006844 <_dtoa_r+0x4c4>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1d3      	bne.n	80066fa <_dtoa_r+0x37a>
 8006752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8082 	beq.w	800685e <_dtoa_r+0x4de>
 800675a:	4b91      	ldr	r3, [pc, #580]	; (80069a0 <_dtoa_r+0x620>)
 800675c:	2200      	movs	r2, #0
 800675e:	4650      	mov	r0, sl
 8006760:	4659      	mov	r1, fp
 8006762:	f7fa f993 	bl	8000a8c <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	d079      	beq.n	800685e <_dtoa_r+0x4de>
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d076      	beq.n	800685e <_dtoa_r+0x4de>
 8006770:	9b02      	ldr	r3, [sp, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	dd36      	ble.n	80067e4 <_dtoa_r+0x464>
 8006776:	9b00      	ldr	r3, [sp, #0]
 8006778:	4650      	mov	r0, sl
 800677a:	4659      	mov	r1, fp
 800677c:	1e5f      	subs	r7, r3, #1
 800677e:	2200      	movs	r2, #0
 8006780:	4b88      	ldr	r3, [pc, #544]	; (80069a4 <_dtoa_r+0x624>)
 8006782:	f7f9 ff11 	bl	80005a8 <__aeabi_dmul>
 8006786:	9e02      	ldr	r6, [sp, #8]
 8006788:	4682      	mov	sl, r0
 800678a:	468b      	mov	fp, r1
 800678c:	3501      	adds	r5, #1
 800678e:	4628      	mov	r0, r5
 8006790:	f7f9 fea0 	bl	80004d4 <__aeabi_i2d>
 8006794:	4652      	mov	r2, sl
 8006796:	465b      	mov	r3, fp
 8006798:	f7f9 ff06 	bl	80005a8 <__aeabi_dmul>
 800679c:	4b82      	ldr	r3, [pc, #520]	; (80069a8 <_dtoa_r+0x628>)
 800679e:	2200      	movs	r2, #0
 80067a0:	f7f9 fd4c 	bl	800023c <__adddf3>
 80067a4:	46d0      	mov	r8, sl
 80067a6:	46d9      	mov	r9, fp
 80067a8:	4682      	mov	sl, r0
 80067aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80067ae:	2e00      	cmp	r6, #0
 80067b0:	d158      	bne.n	8006864 <_dtoa_r+0x4e4>
 80067b2:	4b7e      	ldr	r3, [pc, #504]	; (80069ac <_dtoa_r+0x62c>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	4640      	mov	r0, r8
 80067b8:	4649      	mov	r1, r9
 80067ba:	f7f9 fd3d 	bl	8000238 <__aeabi_dsub>
 80067be:	4652      	mov	r2, sl
 80067c0:	465b      	mov	r3, fp
 80067c2:	4680      	mov	r8, r0
 80067c4:	4689      	mov	r9, r1
 80067c6:	f7fa f97f 	bl	8000ac8 <__aeabi_dcmpgt>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f040 8295 	bne.w	8006cfa <_dtoa_r+0x97a>
 80067d0:	4652      	mov	r2, sl
 80067d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067d6:	4640      	mov	r0, r8
 80067d8:	4649      	mov	r1, r9
 80067da:	f7fa f957 	bl	8000a8c <__aeabi_dcmplt>
 80067de:	2800      	cmp	r0, #0
 80067e0:	f040 8289 	bne.w	8006cf6 <_dtoa_r+0x976>
 80067e4:	ec5b ab19 	vmov	sl, fp, d9
 80067e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f2c0 8148 	blt.w	8006a80 <_dtoa_r+0x700>
 80067f0:	9a00      	ldr	r2, [sp, #0]
 80067f2:	2a0e      	cmp	r2, #14
 80067f4:	f300 8144 	bgt.w	8006a80 <_dtoa_r+0x700>
 80067f8:	4b67      	ldr	r3, [pc, #412]	; (8006998 <_dtoa_r+0x618>)
 80067fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	f280 80d5 	bge.w	80069b4 <_dtoa_r+0x634>
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f300 80d1 	bgt.w	80069b4 <_dtoa_r+0x634>
 8006812:	f040 826f 	bne.w	8006cf4 <_dtoa_r+0x974>
 8006816:	4b65      	ldr	r3, [pc, #404]	; (80069ac <_dtoa_r+0x62c>)
 8006818:	2200      	movs	r2, #0
 800681a:	4640      	mov	r0, r8
 800681c:	4649      	mov	r1, r9
 800681e:	f7f9 fec3 	bl	80005a8 <__aeabi_dmul>
 8006822:	4652      	mov	r2, sl
 8006824:	465b      	mov	r3, fp
 8006826:	f7fa f945 	bl	8000ab4 <__aeabi_dcmpge>
 800682a:	9e03      	ldr	r6, [sp, #12]
 800682c:	4637      	mov	r7, r6
 800682e:	2800      	cmp	r0, #0
 8006830:	f040 8245 	bne.w	8006cbe <_dtoa_r+0x93e>
 8006834:	9d01      	ldr	r5, [sp, #4]
 8006836:	2331      	movs	r3, #49	; 0x31
 8006838:	f805 3b01 	strb.w	r3, [r5], #1
 800683c:	9b00      	ldr	r3, [sp, #0]
 800683e:	3301      	adds	r3, #1
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	e240      	b.n	8006cc6 <_dtoa_r+0x946>
 8006844:	07f2      	lsls	r2, r6, #31
 8006846:	d505      	bpl.n	8006854 <_dtoa_r+0x4d4>
 8006848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684c:	f7f9 feac 	bl	80005a8 <__aeabi_dmul>
 8006850:	3501      	adds	r5, #1
 8006852:	2301      	movs	r3, #1
 8006854:	1076      	asrs	r6, r6, #1
 8006856:	3708      	adds	r7, #8
 8006858:	e777      	b.n	800674a <_dtoa_r+0x3ca>
 800685a:	2502      	movs	r5, #2
 800685c:	e779      	b.n	8006752 <_dtoa_r+0x3d2>
 800685e:	9f00      	ldr	r7, [sp, #0]
 8006860:	9e03      	ldr	r6, [sp, #12]
 8006862:	e794      	b.n	800678e <_dtoa_r+0x40e>
 8006864:	9901      	ldr	r1, [sp, #4]
 8006866:	4b4c      	ldr	r3, [pc, #304]	; (8006998 <_dtoa_r+0x618>)
 8006868:	4431      	add	r1, r6
 800686a:	910d      	str	r1, [sp, #52]	; 0x34
 800686c:	9908      	ldr	r1, [sp, #32]
 800686e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006876:	2900      	cmp	r1, #0
 8006878:	d043      	beq.n	8006902 <_dtoa_r+0x582>
 800687a:	494d      	ldr	r1, [pc, #308]	; (80069b0 <_dtoa_r+0x630>)
 800687c:	2000      	movs	r0, #0
 800687e:	f7f9 ffbd 	bl	80007fc <__aeabi_ddiv>
 8006882:	4652      	mov	r2, sl
 8006884:	465b      	mov	r3, fp
 8006886:	f7f9 fcd7 	bl	8000238 <__aeabi_dsub>
 800688a:	9d01      	ldr	r5, [sp, #4]
 800688c:	4682      	mov	sl, r0
 800688e:	468b      	mov	fp, r1
 8006890:	4649      	mov	r1, r9
 8006892:	4640      	mov	r0, r8
 8006894:	f7fa f938 	bl	8000b08 <__aeabi_d2iz>
 8006898:	4606      	mov	r6, r0
 800689a:	f7f9 fe1b 	bl	80004d4 <__aeabi_i2d>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4640      	mov	r0, r8
 80068a4:	4649      	mov	r1, r9
 80068a6:	f7f9 fcc7 	bl	8000238 <__aeabi_dsub>
 80068aa:	3630      	adds	r6, #48	; 0x30
 80068ac:	f805 6b01 	strb.w	r6, [r5], #1
 80068b0:	4652      	mov	r2, sl
 80068b2:	465b      	mov	r3, fp
 80068b4:	4680      	mov	r8, r0
 80068b6:	4689      	mov	r9, r1
 80068b8:	f7fa f8e8 	bl	8000a8c <__aeabi_dcmplt>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d163      	bne.n	8006988 <_dtoa_r+0x608>
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	4936      	ldr	r1, [pc, #216]	; (80069a0 <_dtoa_r+0x620>)
 80068c6:	2000      	movs	r0, #0
 80068c8:	f7f9 fcb6 	bl	8000238 <__aeabi_dsub>
 80068cc:	4652      	mov	r2, sl
 80068ce:	465b      	mov	r3, fp
 80068d0:	f7fa f8dc 	bl	8000a8c <__aeabi_dcmplt>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	f040 80b5 	bne.w	8006a44 <_dtoa_r+0x6c4>
 80068da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068dc:	429d      	cmp	r5, r3
 80068de:	d081      	beq.n	80067e4 <_dtoa_r+0x464>
 80068e0:	4b30      	ldr	r3, [pc, #192]	; (80069a4 <_dtoa_r+0x624>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	4650      	mov	r0, sl
 80068e6:	4659      	mov	r1, fp
 80068e8:	f7f9 fe5e 	bl	80005a8 <__aeabi_dmul>
 80068ec:	4b2d      	ldr	r3, [pc, #180]	; (80069a4 <_dtoa_r+0x624>)
 80068ee:	4682      	mov	sl, r0
 80068f0:	468b      	mov	fp, r1
 80068f2:	4640      	mov	r0, r8
 80068f4:	4649      	mov	r1, r9
 80068f6:	2200      	movs	r2, #0
 80068f8:	f7f9 fe56 	bl	80005a8 <__aeabi_dmul>
 80068fc:	4680      	mov	r8, r0
 80068fe:	4689      	mov	r9, r1
 8006900:	e7c6      	b.n	8006890 <_dtoa_r+0x510>
 8006902:	4650      	mov	r0, sl
 8006904:	4659      	mov	r1, fp
 8006906:	f7f9 fe4f 	bl	80005a8 <__aeabi_dmul>
 800690a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800690c:	9d01      	ldr	r5, [sp, #4]
 800690e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006910:	4682      	mov	sl, r0
 8006912:	468b      	mov	fp, r1
 8006914:	4649      	mov	r1, r9
 8006916:	4640      	mov	r0, r8
 8006918:	f7fa f8f6 	bl	8000b08 <__aeabi_d2iz>
 800691c:	4606      	mov	r6, r0
 800691e:	f7f9 fdd9 	bl	80004d4 <__aeabi_i2d>
 8006922:	3630      	adds	r6, #48	; 0x30
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4640      	mov	r0, r8
 800692a:	4649      	mov	r1, r9
 800692c:	f7f9 fc84 	bl	8000238 <__aeabi_dsub>
 8006930:	f805 6b01 	strb.w	r6, [r5], #1
 8006934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006936:	429d      	cmp	r5, r3
 8006938:	4680      	mov	r8, r0
 800693a:	4689      	mov	r9, r1
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	d124      	bne.n	800698c <_dtoa_r+0x60c>
 8006942:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <_dtoa_r+0x630>)
 8006944:	4650      	mov	r0, sl
 8006946:	4659      	mov	r1, fp
 8006948:	f7f9 fc78 	bl	800023c <__adddf3>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7fa f8b8 	bl	8000ac8 <__aeabi_dcmpgt>
 8006958:	2800      	cmp	r0, #0
 800695a:	d173      	bne.n	8006a44 <_dtoa_r+0x6c4>
 800695c:	4652      	mov	r2, sl
 800695e:	465b      	mov	r3, fp
 8006960:	4913      	ldr	r1, [pc, #76]	; (80069b0 <_dtoa_r+0x630>)
 8006962:	2000      	movs	r0, #0
 8006964:	f7f9 fc68 	bl	8000238 <__aeabi_dsub>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4640      	mov	r0, r8
 800696e:	4649      	mov	r1, r9
 8006970:	f7fa f88c 	bl	8000a8c <__aeabi_dcmplt>
 8006974:	2800      	cmp	r0, #0
 8006976:	f43f af35 	beq.w	80067e4 <_dtoa_r+0x464>
 800697a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800697c:	1e6b      	subs	r3, r5, #1
 800697e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006980:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006984:	2b30      	cmp	r3, #48	; 0x30
 8006986:	d0f8      	beq.n	800697a <_dtoa_r+0x5fa>
 8006988:	9700      	str	r7, [sp, #0]
 800698a:	e049      	b.n	8006a20 <_dtoa_r+0x6a0>
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <_dtoa_r+0x624>)
 800698e:	f7f9 fe0b 	bl	80005a8 <__aeabi_dmul>
 8006992:	4680      	mov	r8, r0
 8006994:	4689      	mov	r9, r1
 8006996:	e7bd      	b.n	8006914 <_dtoa_r+0x594>
 8006998:	08008128 	.word	0x08008128
 800699c:	08008100 	.word	0x08008100
 80069a0:	3ff00000 	.word	0x3ff00000
 80069a4:	40240000 	.word	0x40240000
 80069a8:	401c0000 	.word	0x401c0000
 80069ac:	40140000 	.word	0x40140000
 80069b0:	3fe00000 	.word	0x3fe00000
 80069b4:	9d01      	ldr	r5, [sp, #4]
 80069b6:	4656      	mov	r6, sl
 80069b8:	465f      	mov	r7, fp
 80069ba:	4642      	mov	r2, r8
 80069bc:	464b      	mov	r3, r9
 80069be:	4630      	mov	r0, r6
 80069c0:	4639      	mov	r1, r7
 80069c2:	f7f9 ff1b 	bl	80007fc <__aeabi_ddiv>
 80069c6:	f7fa f89f 	bl	8000b08 <__aeabi_d2iz>
 80069ca:	4682      	mov	sl, r0
 80069cc:	f7f9 fd82 	bl	80004d4 <__aeabi_i2d>
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	f7f9 fde8 	bl	80005a8 <__aeabi_dmul>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4630      	mov	r0, r6
 80069de:	4639      	mov	r1, r7
 80069e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80069e4:	f7f9 fc28 	bl	8000238 <__aeabi_dsub>
 80069e8:	f805 6b01 	strb.w	r6, [r5], #1
 80069ec:	9e01      	ldr	r6, [sp, #4]
 80069ee:	9f03      	ldr	r7, [sp, #12]
 80069f0:	1bae      	subs	r6, r5, r6
 80069f2:	42b7      	cmp	r7, r6
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	d135      	bne.n	8006a66 <_dtoa_r+0x6e6>
 80069fa:	f7f9 fc1f 	bl	800023c <__adddf3>
 80069fe:	4642      	mov	r2, r8
 8006a00:	464b      	mov	r3, r9
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	f7fa f85f 	bl	8000ac8 <__aeabi_dcmpgt>
 8006a0a:	b9d0      	cbnz	r0, 8006a42 <_dtoa_r+0x6c2>
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	464b      	mov	r3, r9
 8006a10:	4630      	mov	r0, r6
 8006a12:	4639      	mov	r1, r7
 8006a14:	f7fa f830 	bl	8000a78 <__aeabi_dcmpeq>
 8006a18:	b110      	cbz	r0, 8006a20 <_dtoa_r+0x6a0>
 8006a1a:	f01a 0f01 	tst.w	sl, #1
 8006a1e:	d110      	bne.n	8006a42 <_dtoa_r+0x6c2>
 8006a20:	4620      	mov	r0, r4
 8006a22:	ee18 1a10 	vmov	r1, s16
 8006a26:	f000 fb41 	bl	80070ac <_Bfree>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9800      	ldr	r0, [sp, #0]
 8006a2e:	702b      	strb	r3, [r5, #0]
 8006a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a32:	3001      	adds	r0, #1
 8006a34:	6018      	str	r0, [r3, #0]
 8006a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f43f acf1 	beq.w	8006420 <_dtoa_r+0xa0>
 8006a3e:	601d      	str	r5, [r3, #0]
 8006a40:	e4ee      	b.n	8006420 <_dtoa_r+0xa0>
 8006a42:	9f00      	ldr	r7, [sp, #0]
 8006a44:	462b      	mov	r3, r5
 8006a46:	461d      	mov	r5, r3
 8006a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a4c:	2a39      	cmp	r2, #57	; 0x39
 8006a4e:	d106      	bne.n	8006a5e <_dtoa_r+0x6de>
 8006a50:	9a01      	ldr	r2, [sp, #4]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d1f7      	bne.n	8006a46 <_dtoa_r+0x6c6>
 8006a56:	9901      	ldr	r1, [sp, #4]
 8006a58:	2230      	movs	r2, #48	; 0x30
 8006a5a:	3701      	adds	r7, #1
 8006a5c:	700a      	strb	r2, [r1, #0]
 8006a5e:	781a      	ldrb	r2, [r3, #0]
 8006a60:	3201      	adds	r2, #1
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	e790      	b.n	8006988 <_dtoa_r+0x608>
 8006a66:	4ba6      	ldr	r3, [pc, #664]	; (8006d00 <_dtoa_r+0x980>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f7f9 fd9d 	bl	80005a8 <__aeabi_dmul>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2300      	movs	r3, #0
 8006a72:	4606      	mov	r6, r0
 8006a74:	460f      	mov	r7, r1
 8006a76:	f7f9 ffff 	bl	8000a78 <__aeabi_dcmpeq>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d09d      	beq.n	80069ba <_dtoa_r+0x63a>
 8006a7e:	e7cf      	b.n	8006a20 <_dtoa_r+0x6a0>
 8006a80:	9a08      	ldr	r2, [sp, #32]
 8006a82:	2a00      	cmp	r2, #0
 8006a84:	f000 80d7 	beq.w	8006c36 <_dtoa_r+0x8b6>
 8006a88:	9a06      	ldr	r2, [sp, #24]
 8006a8a:	2a01      	cmp	r2, #1
 8006a8c:	f300 80ba 	bgt.w	8006c04 <_dtoa_r+0x884>
 8006a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	f000 80b2 	beq.w	8006bfc <_dtoa_r+0x87c>
 8006a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a9c:	9e07      	ldr	r6, [sp, #28]
 8006a9e:	9d04      	ldr	r5, [sp, #16]
 8006aa0:	9a04      	ldr	r2, [sp, #16]
 8006aa2:	441a      	add	r2, r3
 8006aa4:	9204      	str	r2, [sp, #16]
 8006aa6:	9a05      	ldr	r2, [sp, #20]
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	441a      	add	r2, r3
 8006aac:	4620      	mov	r0, r4
 8006aae:	9205      	str	r2, [sp, #20]
 8006ab0:	f000 fbb4 	bl	800721c <__i2b>
 8006ab4:	4607      	mov	r7, r0
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	dd0c      	ble.n	8006ad4 <_dtoa_r+0x754>
 8006aba:	9b05      	ldr	r3, [sp, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	dd09      	ble.n	8006ad4 <_dtoa_r+0x754>
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	9a04      	ldr	r2, [sp, #16]
 8006ac4:	bfa8      	it	ge
 8006ac6:	462b      	movge	r3, r5
 8006ac8:	1ad2      	subs	r2, r2, r3
 8006aca:	9204      	str	r2, [sp, #16]
 8006acc:	9a05      	ldr	r2, [sp, #20]
 8006ace:	1aed      	subs	r5, r5, r3
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	9305      	str	r3, [sp, #20]
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	b31b      	cbz	r3, 8006b20 <_dtoa_r+0x7a0>
 8006ad8:	9b08      	ldr	r3, [sp, #32]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80af 	beq.w	8006c3e <_dtoa_r+0x8be>
 8006ae0:	2e00      	cmp	r6, #0
 8006ae2:	dd13      	ble.n	8006b0c <_dtoa_r+0x78c>
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fc57 	bl	800739c <__pow5mult>
 8006aee:	ee18 2a10 	vmov	r2, s16
 8006af2:	4601      	mov	r1, r0
 8006af4:	4607      	mov	r7, r0
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 fba6 	bl	8007248 <__multiply>
 8006afc:	ee18 1a10 	vmov	r1, s16
 8006b00:	4680      	mov	r8, r0
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fad2 	bl	80070ac <_Bfree>
 8006b08:	ee08 8a10 	vmov	s16, r8
 8006b0c:	9b07      	ldr	r3, [sp, #28]
 8006b0e:	1b9a      	subs	r2, r3, r6
 8006b10:	d006      	beq.n	8006b20 <_dtoa_r+0x7a0>
 8006b12:	ee18 1a10 	vmov	r1, s16
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 fc40 	bl	800739c <__pow5mult>
 8006b1c:	ee08 0a10 	vmov	s16, r0
 8006b20:	2101      	movs	r1, #1
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 fb7a 	bl	800721c <__i2b>
 8006b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	f340 8088 	ble.w	8006c42 <_dtoa_r+0x8c2>
 8006b32:	461a      	mov	r2, r3
 8006b34:	4601      	mov	r1, r0
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 fc30 	bl	800739c <__pow5mult>
 8006b3c:	9b06      	ldr	r3, [sp, #24]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	4606      	mov	r6, r0
 8006b42:	f340 8081 	ble.w	8006c48 <_dtoa_r+0x8c8>
 8006b46:	f04f 0800 	mov.w	r8, #0
 8006b4a:	6933      	ldr	r3, [r6, #16]
 8006b4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b50:	6918      	ldr	r0, [r3, #16]
 8006b52:	f000 fb13 	bl	800717c <__hi0bits>
 8006b56:	f1c0 0020 	rsb	r0, r0, #32
 8006b5a:	9b05      	ldr	r3, [sp, #20]
 8006b5c:	4418      	add	r0, r3
 8006b5e:	f010 001f 	ands.w	r0, r0, #31
 8006b62:	f000 8092 	beq.w	8006c8a <_dtoa_r+0x90a>
 8006b66:	f1c0 0320 	rsb	r3, r0, #32
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	f340 808a 	ble.w	8006c84 <_dtoa_r+0x904>
 8006b70:	f1c0 001c 	rsb	r0, r0, #28
 8006b74:	9b04      	ldr	r3, [sp, #16]
 8006b76:	4403      	add	r3, r0
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	9b05      	ldr	r3, [sp, #20]
 8006b7c:	4403      	add	r3, r0
 8006b7e:	4405      	add	r5, r0
 8006b80:	9305      	str	r3, [sp, #20]
 8006b82:	9b04      	ldr	r3, [sp, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dd07      	ble.n	8006b98 <_dtoa_r+0x818>
 8006b88:	ee18 1a10 	vmov	r1, s16
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 fc5e 	bl	8007450 <__lshift>
 8006b94:	ee08 0a10 	vmov	s16, r0
 8006b98:	9b05      	ldr	r3, [sp, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	dd05      	ble.n	8006baa <_dtoa_r+0x82a>
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fc54 	bl	8007450 <__lshift>
 8006ba8:	4606      	mov	r6, r0
 8006baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d06e      	beq.n	8006c8e <_dtoa_r+0x90e>
 8006bb0:	ee18 0a10 	vmov	r0, s16
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	f000 fcbb 	bl	8007530 <__mcmp>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	da67      	bge.n	8006c8e <_dtoa_r+0x90e>
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	ee18 1a10 	vmov	r1, s16
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	220a      	movs	r2, #10
 8006bca:	2300      	movs	r3, #0
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fa8f 	bl	80070f0 <__multadd>
 8006bd2:	9b08      	ldr	r3, [sp, #32]
 8006bd4:	ee08 0a10 	vmov	s16, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 81b1 	beq.w	8006f40 <_dtoa_r+0xbc0>
 8006bde:	2300      	movs	r3, #0
 8006be0:	4639      	mov	r1, r7
 8006be2:	220a      	movs	r2, #10
 8006be4:	4620      	mov	r0, r4
 8006be6:	f000 fa83 	bl	80070f0 <__multadd>
 8006bea:	9b02      	ldr	r3, [sp, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	4607      	mov	r7, r0
 8006bf0:	f300 808e 	bgt.w	8006d10 <_dtoa_r+0x990>
 8006bf4:	9b06      	ldr	r3, [sp, #24]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	dc51      	bgt.n	8006c9e <_dtoa_r+0x91e>
 8006bfa:	e089      	b.n	8006d10 <_dtoa_r+0x990>
 8006bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c02:	e74b      	b.n	8006a9c <_dtoa_r+0x71c>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	1e5e      	subs	r6, r3, #1
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	42b3      	cmp	r3, r6
 8006c0c:	bfbf      	itttt	lt
 8006c0e:	9b07      	ldrlt	r3, [sp, #28]
 8006c10:	9607      	strlt	r6, [sp, #28]
 8006c12:	1af2      	sublt	r2, r6, r3
 8006c14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c16:	bfb6      	itet	lt
 8006c18:	189b      	addlt	r3, r3, r2
 8006c1a:	1b9e      	subge	r6, r3, r6
 8006c1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	bfb8      	it	lt
 8006c22:	2600      	movlt	r6, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bfb7      	itett	lt
 8006c28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c30:	1a9d      	sublt	r5, r3, r2
 8006c32:	2300      	movlt	r3, #0
 8006c34:	e734      	b.n	8006aa0 <_dtoa_r+0x720>
 8006c36:	9e07      	ldr	r6, [sp, #28]
 8006c38:	9d04      	ldr	r5, [sp, #16]
 8006c3a:	9f08      	ldr	r7, [sp, #32]
 8006c3c:	e73b      	b.n	8006ab6 <_dtoa_r+0x736>
 8006c3e:	9a07      	ldr	r2, [sp, #28]
 8006c40:	e767      	b.n	8006b12 <_dtoa_r+0x792>
 8006c42:	9b06      	ldr	r3, [sp, #24]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	dc18      	bgt.n	8006c7a <_dtoa_r+0x8fa>
 8006c48:	f1ba 0f00 	cmp.w	sl, #0
 8006c4c:	d115      	bne.n	8006c7a <_dtoa_r+0x8fa>
 8006c4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c52:	b993      	cbnz	r3, 8006c7a <_dtoa_r+0x8fa>
 8006c54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c58:	0d1b      	lsrs	r3, r3, #20
 8006c5a:	051b      	lsls	r3, r3, #20
 8006c5c:	b183      	cbz	r3, 8006c80 <_dtoa_r+0x900>
 8006c5e:	9b04      	ldr	r3, [sp, #16]
 8006c60:	3301      	adds	r3, #1
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	9b05      	ldr	r3, [sp, #20]
 8006c66:	3301      	adds	r3, #1
 8006c68:	9305      	str	r3, [sp, #20]
 8006c6a:	f04f 0801 	mov.w	r8, #1
 8006c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f47f af6a 	bne.w	8006b4a <_dtoa_r+0x7ca>
 8006c76:	2001      	movs	r0, #1
 8006c78:	e76f      	b.n	8006b5a <_dtoa_r+0x7da>
 8006c7a:	f04f 0800 	mov.w	r8, #0
 8006c7e:	e7f6      	b.n	8006c6e <_dtoa_r+0x8ee>
 8006c80:	4698      	mov	r8, r3
 8006c82:	e7f4      	b.n	8006c6e <_dtoa_r+0x8ee>
 8006c84:	f43f af7d 	beq.w	8006b82 <_dtoa_r+0x802>
 8006c88:	4618      	mov	r0, r3
 8006c8a:	301c      	adds	r0, #28
 8006c8c:	e772      	b.n	8006b74 <_dtoa_r+0x7f4>
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc37      	bgt.n	8006d04 <_dtoa_r+0x984>
 8006c94:	9b06      	ldr	r3, [sp, #24]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	dd34      	ble.n	8006d04 <_dtoa_r+0x984>
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	9302      	str	r3, [sp, #8]
 8006c9e:	9b02      	ldr	r3, [sp, #8]
 8006ca0:	b96b      	cbnz	r3, 8006cbe <_dtoa_r+0x93e>
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	2205      	movs	r2, #5
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 fa22 	bl	80070f0 <__multadd>
 8006cac:	4601      	mov	r1, r0
 8006cae:	4606      	mov	r6, r0
 8006cb0:	ee18 0a10 	vmov	r0, s16
 8006cb4:	f000 fc3c 	bl	8007530 <__mcmp>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f73f adbb 	bgt.w	8006834 <_dtoa_r+0x4b4>
 8006cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc0:	9d01      	ldr	r5, [sp, #4]
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 f9ed 	bl	80070ac <_Bfree>
 8006cd2:	2f00      	cmp	r7, #0
 8006cd4:	f43f aea4 	beq.w	8006a20 <_dtoa_r+0x6a0>
 8006cd8:	f1b8 0f00 	cmp.w	r8, #0
 8006cdc:	d005      	beq.n	8006cea <_dtoa_r+0x96a>
 8006cde:	45b8      	cmp	r8, r7
 8006ce0:	d003      	beq.n	8006cea <_dtoa_r+0x96a>
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 f9e1 	bl	80070ac <_Bfree>
 8006cea:	4639      	mov	r1, r7
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 f9dd 	bl	80070ac <_Bfree>
 8006cf2:	e695      	b.n	8006a20 <_dtoa_r+0x6a0>
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	4637      	mov	r7, r6
 8006cf8:	e7e1      	b.n	8006cbe <_dtoa_r+0x93e>
 8006cfa:	9700      	str	r7, [sp, #0]
 8006cfc:	4637      	mov	r7, r6
 8006cfe:	e599      	b.n	8006834 <_dtoa_r+0x4b4>
 8006d00:	40240000 	.word	0x40240000
 8006d04:	9b08      	ldr	r3, [sp, #32]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80ca 	beq.w	8006ea0 <_dtoa_r+0xb20>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	9302      	str	r3, [sp, #8]
 8006d10:	2d00      	cmp	r5, #0
 8006d12:	dd05      	ble.n	8006d20 <_dtoa_r+0x9a0>
 8006d14:	4639      	mov	r1, r7
 8006d16:	462a      	mov	r2, r5
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fb99 	bl	8007450 <__lshift>
 8006d1e:	4607      	mov	r7, r0
 8006d20:	f1b8 0f00 	cmp.w	r8, #0
 8006d24:	d05b      	beq.n	8006dde <_dtoa_r+0xa5e>
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 f97f 	bl	800702c <_Balloc>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	b928      	cbnz	r0, 8006d3e <_dtoa_r+0x9be>
 8006d32:	4b87      	ldr	r3, [pc, #540]	; (8006f50 <_dtoa_r+0xbd0>)
 8006d34:	4602      	mov	r2, r0
 8006d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d3a:	f7ff bb3b 	b.w	80063b4 <_dtoa_r+0x34>
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	3202      	adds	r2, #2
 8006d42:	0092      	lsls	r2, r2, #2
 8006d44:	f107 010c 	add.w	r1, r7, #12
 8006d48:	300c      	adds	r0, #12
 8006d4a:	f7fe fbc1 	bl	80054d0 <memcpy>
 8006d4e:	2201      	movs	r2, #1
 8006d50:	4629      	mov	r1, r5
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 fb7c 	bl	8007450 <__lshift>
 8006d58:	9b01      	ldr	r3, [sp, #4]
 8006d5a:	f103 0901 	add.w	r9, r3, #1
 8006d5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d62:	4413      	add	r3, r2
 8006d64:	9305      	str	r3, [sp, #20]
 8006d66:	f00a 0301 	and.w	r3, sl, #1
 8006d6a:	46b8      	mov	r8, r7
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	4607      	mov	r7, r0
 8006d70:	4631      	mov	r1, r6
 8006d72:	ee18 0a10 	vmov	r0, s16
 8006d76:	f7ff fa77 	bl	8006268 <quorem>
 8006d7a:	4641      	mov	r1, r8
 8006d7c:	9002      	str	r0, [sp, #8]
 8006d7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d82:	ee18 0a10 	vmov	r0, s16
 8006d86:	f000 fbd3 	bl	8007530 <__mcmp>
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	9003      	str	r0, [sp, #12]
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fbe9 	bl	8007568 <__mdiff>
 8006d96:	68c2      	ldr	r2, [r0, #12]
 8006d98:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	bb02      	cbnz	r2, 8006de2 <_dtoa_r+0xa62>
 8006da0:	4601      	mov	r1, r0
 8006da2:	ee18 0a10 	vmov	r0, s16
 8006da6:	f000 fbc3 	bl	8007530 <__mcmp>
 8006daa:	4602      	mov	r2, r0
 8006dac:	4629      	mov	r1, r5
 8006dae:	4620      	mov	r0, r4
 8006db0:	9207      	str	r2, [sp, #28]
 8006db2:	f000 f97b 	bl	80070ac <_Bfree>
 8006db6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006dba:	ea43 0102 	orr.w	r1, r3, r2
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	464d      	mov	r5, r9
 8006dc4:	d10f      	bne.n	8006de6 <_dtoa_r+0xa66>
 8006dc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006dca:	d02a      	beq.n	8006e22 <_dtoa_r+0xaa2>
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dd02      	ble.n	8006dd8 <_dtoa_r+0xa58>
 8006dd2:	9b02      	ldr	r3, [sp, #8]
 8006dd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006dd8:	f88b a000 	strb.w	sl, [fp]
 8006ddc:	e775      	b.n	8006cca <_dtoa_r+0x94a>
 8006dde:	4638      	mov	r0, r7
 8006de0:	e7ba      	b.n	8006d58 <_dtoa_r+0x9d8>
 8006de2:	2201      	movs	r2, #1
 8006de4:	e7e2      	b.n	8006dac <_dtoa_r+0xa2c>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	db04      	blt.n	8006df6 <_dtoa_r+0xa76>
 8006dec:	9906      	ldr	r1, [sp, #24]
 8006dee:	430b      	orrs	r3, r1
 8006df0:	9904      	ldr	r1, [sp, #16]
 8006df2:	430b      	orrs	r3, r1
 8006df4:	d122      	bne.n	8006e3c <_dtoa_r+0xabc>
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	ddee      	ble.n	8006dd8 <_dtoa_r+0xa58>
 8006dfa:	ee18 1a10 	vmov	r1, s16
 8006dfe:	2201      	movs	r2, #1
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 fb25 	bl	8007450 <__lshift>
 8006e06:	4631      	mov	r1, r6
 8006e08:	ee08 0a10 	vmov	s16, r0
 8006e0c:	f000 fb90 	bl	8007530 <__mcmp>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	dc03      	bgt.n	8006e1c <_dtoa_r+0xa9c>
 8006e14:	d1e0      	bne.n	8006dd8 <_dtoa_r+0xa58>
 8006e16:	f01a 0f01 	tst.w	sl, #1
 8006e1a:	d0dd      	beq.n	8006dd8 <_dtoa_r+0xa58>
 8006e1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e20:	d1d7      	bne.n	8006dd2 <_dtoa_r+0xa52>
 8006e22:	2339      	movs	r3, #57	; 0x39
 8006e24:	f88b 3000 	strb.w	r3, [fp]
 8006e28:	462b      	mov	r3, r5
 8006e2a:	461d      	mov	r5, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e32:	2a39      	cmp	r2, #57	; 0x39
 8006e34:	d071      	beq.n	8006f1a <_dtoa_r+0xb9a>
 8006e36:	3201      	adds	r2, #1
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	e746      	b.n	8006cca <_dtoa_r+0x94a>
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	dd07      	ble.n	8006e50 <_dtoa_r+0xad0>
 8006e40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e44:	d0ed      	beq.n	8006e22 <_dtoa_r+0xaa2>
 8006e46:	f10a 0301 	add.w	r3, sl, #1
 8006e4a:	f88b 3000 	strb.w	r3, [fp]
 8006e4e:	e73c      	b.n	8006cca <_dtoa_r+0x94a>
 8006e50:	9b05      	ldr	r3, [sp, #20]
 8006e52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e56:	4599      	cmp	r9, r3
 8006e58:	d047      	beq.n	8006eea <_dtoa_r+0xb6a>
 8006e5a:	ee18 1a10 	vmov	r1, s16
 8006e5e:	2300      	movs	r3, #0
 8006e60:	220a      	movs	r2, #10
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f944 	bl	80070f0 <__multadd>
 8006e68:	45b8      	cmp	r8, r7
 8006e6a:	ee08 0a10 	vmov	s16, r0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	f04f 020a 	mov.w	r2, #10
 8006e76:	4641      	mov	r1, r8
 8006e78:	4620      	mov	r0, r4
 8006e7a:	d106      	bne.n	8006e8a <_dtoa_r+0xb0a>
 8006e7c:	f000 f938 	bl	80070f0 <__multadd>
 8006e80:	4680      	mov	r8, r0
 8006e82:	4607      	mov	r7, r0
 8006e84:	f109 0901 	add.w	r9, r9, #1
 8006e88:	e772      	b.n	8006d70 <_dtoa_r+0x9f0>
 8006e8a:	f000 f931 	bl	80070f0 <__multadd>
 8006e8e:	4639      	mov	r1, r7
 8006e90:	4680      	mov	r8, r0
 8006e92:	2300      	movs	r3, #0
 8006e94:	220a      	movs	r2, #10
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 f92a 	bl	80070f0 <__multadd>
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	e7f1      	b.n	8006e84 <_dtoa_r+0xb04>
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	9302      	str	r3, [sp, #8]
 8006ea4:	9d01      	ldr	r5, [sp, #4]
 8006ea6:	ee18 0a10 	vmov	r0, s16
 8006eaa:	4631      	mov	r1, r6
 8006eac:	f7ff f9dc 	bl	8006268 <quorem>
 8006eb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eb4:	9b01      	ldr	r3, [sp, #4]
 8006eb6:	f805 ab01 	strb.w	sl, [r5], #1
 8006eba:	1aea      	subs	r2, r5, r3
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	dd09      	ble.n	8006ed6 <_dtoa_r+0xb56>
 8006ec2:	ee18 1a10 	vmov	r1, s16
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	220a      	movs	r2, #10
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f000 f910 	bl	80070f0 <__multadd>
 8006ed0:	ee08 0a10 	vmov	s16, r0
 8006ed4:	e7e7      	b.n	8006ea6 <_dtoa_r+0xb26>
 8006ed6:	9b02      	ldr	r3, [sp, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bfc8      	it	gt
 8006edc:	461d      	movgt	r5, r3
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	bfd8      	it	le
 8006ee2:	2501      	movle	r5, #1
 8006ee4:	441d      	add	r5, r3
 8006ee6:	f04f 0800 	mov.w	r8, #0
 8006eea:	ee18 1a10 	vmov	r1, s16
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 faad 	bl	8007450 <__lshift>
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	ee08 0a10 	vmov	s16, r0
 8006efc:	f000 fb18 	bl	8007530 <__mcmp>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	dc91      	bgt.n	8006e28 <_dtoa_r+0xaa8>
 8006f04:	d102      	bne.n	8006f0c <_dtoa_r+0xb8c>
 8006f06:	f01a 0f01 	tst.w	sl, #1
 8006f0a:	d18d      	bne.n	8006e28 <_dtoa_r+0xaa8>
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	461d      	mov	r5, r3
 8006f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f14:	2a30      	cmp	r2, #48	; 0x30
 8006f16:	d0fa      	beq.n	8006f0e <_dtoa_r+0xb8e>
 8006f18:	e6d7      	b.n	8006cca <_dtoa_r+0x94a>
 8006f1a:	9a01      	ldr	r2, [sp, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d184      	bne.n	8006e2a <_dtoa_r+0xaaa>
 8006f20:	9b00      	ldr	r3, [sp, #0]
 8006f22:	3301      	adds	r3, #1
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	2331      	movs	r3, #49	; 0x31
 8006f28:	7013      	strb	r3, [r2, #0]
 8006f2a:	e6ce      	b.n	8006cca <_dtoa_r+0x94a>
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <_dtoa_r+0xbd4>)
 8006f2e:	f7ff ba95 	b.w	800645c <_dtoa_r+0xdc>
 8006f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f47f aa6e 	bne.w	8006416 <_dtoa_r+0x96>
 8006f3a:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <_dtoa_r+0xbd8>)
 8006f3c:	f7ff ba8e 	b.w	800645c <_dtoa_r+0xdc>
 8006f40:	9b02      	ldr	r3, [sp, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	dcae      	bgt.n	8006ea4 <_dtoa_r+0xb24>
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	f73f aea8 	bgt.w	8006c9e <_dtoa_r+0x91e>
 8006f4e:	e7a9      	b.n	8006ea4 <_dtoa_r+0xb24>
 8006f50:	08008084 	.word	0x08008084
 8006f54:	08007ea4 	.word	0x08007ea4
 8006f58:	08008005 	.word	0x08008005

08006f5c <fiprintf>:
 8006f5c:	b40e      	push	{r1, r2, r3}
 8006f5e:	b503      	push	{r0, r1, lr}
 8006f60:	4601      	mov	r1, r0
 8006f62:	ab03      	add	r3, sp, #12
 8006f64:	4805      	ldr	r0, [pc, #20]	; (8006f7c <fiprintf+0x20>)
 8006f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	f000 fc21 	bl	80077b4 <_vfiprintf_r>
 8006f72:	b002      	add	sp, #8
 8006f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f78:	b003      	add	sp, #12
 8006f7a:	4770      	bx	lr
 8006f7c:	20000018 	.word	0x20000018

08006f80 <_fstat_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d07      	ldr	r5, [pc, #28]	; (8006fa0 <_fstat_r+0x20>)
 8006f84:	2300      	movs	r3, #0
 8006f86:	4604      	mov	r4, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	f7fa fa52 	bl	8001436 <_fstat>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	d102      	bne.n	8006f9c <_fstat_r+0x1c>
 8006f96:	682b      	ldr	r3, [r5, #0]
 8006f98:	b103      	cbz	r3, 8006f9c <_fstat_r+0x1c>
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200002cc 	.word	0x200002cc

08006fa4 <_isatty_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d06      	ldr	r5, [pc, #24]	; (8006fc0 <_isatty_r+0x1c>)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	602b      	str	r3, [r5, #0]
 8006fb0:	f7fa fa51 	bl	8001456 <_isatty>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_isatty_r+0x1a>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_isatty_r+0x1a>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	200002cc 	.word	0x200002cc

08006fc4 <_localeconv_r>:
 8006fc4:	4800      	ldr	r0, [pc, #0]	; (8006fc8 <_localeconv_r+0x4>)
 8006fc6:	4770      	bx	lr
 8006fc8:	2000016c 	.word	0x2000016c

08006fcc <_lseek_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d07      	ldr	r5, [pc, #28]	; (8006fec <_lseek_r+0x20>)
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f7fa fa46 	bl	800146c <_lseek>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_lseek_r+0x1e>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_lseek_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	200002cc 	.word	0x200002cc

08006ff0 <__ascii_mbtowc>:
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	b901      	cbnz	r1, 8006ff6 <__ascii_mbtowc+0x6>
 8006ff4:	a901      	add	r1, sp, #4
 8006ff6:	b142      	cbz	r2, 800700a <__ascii_mbtowc+0x1a>
 8006ff8:	b14b      	cbz	r3, 800700e <__ascii_mbtowc+0x1e>
 8006ffa:	7813      	ldrb	r3, [r2, #0]
 8006ffc:	600b      	str	r3, [r1, #0]
 8006ffe:	7812      	ldrb	r2, [r2, #0]
 8007000:	1e10      	subs	r0, r2, #0
 8007002:	bf18      	it	ne
 8007004:	2001      	movne	r0, #1
 8007006:	b002      	add	sp, #8
 8007008:	4770      	bx	lr
 800700a:	4610      	mov	r0, r2
 800700c:	e7fb      	b.n	8007006 <__ascii_mbtowc+0x16>
 800700e:	f06f 0001 	mvn.w	r0, #1
 8007012:	e7f8      	b.n	8007006 <__ascii_mbtowc+0x16>

08007014 <__malloc_lock>:
 8007014:	4801      	ldr	r0, [pc, #4]	; (800701c <__malloc_lock+0x8>)
 8007016:	f7fe b9e4 	b.w	80053e2 <__retarget_lock_acquire_recursive>
 800701a:	bf00      	nop
 800701c:	200002c0 	.word	0x200002c0

08007020 <__malloc_unlock>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__malloc_unlock+0x8>)
 8007022:	f7fe b9df 	b.w	80053e4 <__retarget_lock_release_recursive>
 8007026:	bf00      	nop
 8007028:	200002c0 	.word	0x200002c0

0800702c <_Balloc>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007030:	4604      	mov	r4, r0
 8007032:	460d      	mov	r5, r1
 8007034:	b976      	cbnz	r6, 8007054 <_Balloc+0x28>
 8007036:	2010      	movs	r0, #16
 8007038:	f7fe fa3a 	bl	80054b0 <malloc>
 800703c:	4602      	mov	r2, r0
 800703e:	6260      	str	r0, [r4, #36]	; 0x24
 8007040:	b920      	cbnz	r0, 800704c <_Balloc+0x20>
 8007042:	4b18      	ldr	r3, [pc, #96]	; (80070a4 <_Balloc+0x78>)
 8007044:	4818      	ldr	r0, [pc, #96]	; (80070a8 <_Balloc+0x7c>)
 8007046:	2166      	movs	r1, #102	; 0x66
 8007048:	f7ff f8e0 	bl	800620c <__assert_func>
 800704c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007050:	6006      	str	r6, [r0, #0]
 8007052:	60c6      	str	r6, [r0, #12]
 8007054:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007056:	68f3      	ldr	r3, [r6, #12]
 8007058:	b183      	cbz	r3, 800707c <_Balloc+0x50>
 800705a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007062:	b9b8      	cbnz	r0, 8007094 <_Balloc+0x68>
 8007064:	2101      	movs	r1, #1
 8007066:	fa01 f605 	lsl.w	r6, r1, r5
 800706a:	1d72      	adds	r2, r6, #5
 800706c:	0092      	lsls	r2, r2, #2
 800706e:	4620      	mov	r0, r4
 8007070:	f000 fb60 	bl	8007734 <_calloc_r>
 8007074:	b160      	cbz	r0, 8007090 <_Balloc+0x64>
 8007076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800707a:	e00e      	b.n	800709a <_Balloc+0x6e>
 800707c:	2221      	movs	r2, #33	; 0x21
 800707e:	2104      	movs	r1, #4
 8007080:	4620      	mov	r0, r4
 8007082:	f000 fb57 	bl	8007734 <_calloc_r>
 8007086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007088:	60f0      	str	r0, [r6, #12]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e4      	bne.n	800705a <_Balloc+0x2e>
 8007090:	2000      	movs	r0, #0
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	6802      	ldr	r2, [r0, #0]
 8007096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800709a:	2300      	movs	r3, #0
 800709c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070a0:	e7f7      	b.n	8007092 <_Balloc+0x66>
 80070a2:	bf00      	nop
 80070a4:	08008012 	.word	0x08008012
 80070a8:	0800809f 	.word	0x0800809f

080070ac <_Bfree>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070b0:	4605      	mov	r5, r0
 80070b2:	460c      	mov	r4, r1
 80070b4:	b976      	cbnz	r6, 80070d4 <_Bfree+0x28>
 80070b6:	2010      	movs	r0, #16
 80070b8:	f7fe f9fa 	bl	80054b0 <malloc>
 80070bc:	4602      	mov	r2, r0
 80070be:	6268      	str	r0, [r5, #36]	; 0x24
 80070c0:	b920      	cbnz	r0, 80070cc <_Bfree+0x20>
 80070c2:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <_Bfree+0x3c>)
 80070c4:	4809      	ldr	r0, [pc, #36]	; (80070ec <_Bfree+0x40>)
 80070c6:	218a      	movs	r1, #138	; 0x8a
 80070c8:	f7ff f8a0 	bl	800620c <__assert_func>
 80070cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070d0:	6006      	str	r6, [r0, #0]
 80070d2:	60c6      	str	r6, [r0, #12]
 80070d4:	b13c      	cbz	r4, 80070e6 <_Bfree+0x3a>
 80070d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070d8:	6862      	ldr	r2, [r4, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070e0:	6021      	str	r1, [r4, #0]
 80070e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	08008012 	.word	0x08008012
 80070ec:	0800809f 	.word	0x0800809f

080070f0 <__multadd>:
 80070f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f4:	690d      	ldr	r5, [r1, #16]
 80070f6:	4607      	mov	r7, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	461e      	mov	r6, r3
 80070fc:	f101 0c14 	add.w	ip, r1, #20
 8007100:	2000      	movs	r0, #0
 8007102:	f8dc 3000 	ldr.w	r3, [ip]
 8007106:	b299      	uxth	r1, r3
 8007108:	fb02 6101 	mla	r1, r2, r1, r6
 800710c:	0c1e      	lsrs	r6, r3, #16
 800710e:	0c0b      	lsrs	r3, r1, #16
 8007110:	fb02 3306 	mla	r3, r2, r6, r3
 8007114:	b289      	uxth	r1, r1
 8007116:	3001      	adds	r0, #1
 8007118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800711c:	4285      	cmp	r5, r0
 800711e:	f84c 1b04 	str.w	r1, [ip], #4
 8007122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007126:	dcec      	bgt.n	8007102 <__multadd+0x12>
 8007128:	b30e      	cbz	r6, 800716e <__multadd+0x7e>
 800712a:	68a3      	ldr	r3, [r4, #8]
 800712c:	42ab      	cmp	r3, r5
 800712e:	dc19      	bgt.n	8007164 <__multadd+0x74>
 8007130:	6861      	ldr	r1, [r4, #4]
 8007132:	4638      	mov	r0, r7
 8007134:	3101      	adds	r1, #1
 8007136:	f7ff ff79 	bl	800702c <_Balloc>
 800713a:	4680      	mov	r8, r0
 800713c:	b928      	cbnz	r0, 800714a <__multadd+0x5a>
 800713e:	4602      	mov	r2, r0
 8007140:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <__multadd+0x84>)
 8007142:	480d      	ldr	r0, [pc, #52]	; (8007178 <__multadd+0x88>)
 8007144:	21b5      	movs	r1, #181	; 0xb5
 8007146:	f7ff f861 	bl	800620c <__assert_func>
 800714a:	6922      	ldr	r2, [r4, #16]
 800714c:	3202      	adds	r2, #2
 800714e:	f104 010c 	add.w	r1, r4, #12
 8007152:	0092      	lsls	r2, r2, #2
 8007154:	300c      	adds	r0, #12
 8007156:	f7fe f9bb 	bl	80054d0 <memcpy>
 800715a:	4621      	mov	r1, r4
 800715c:	4638      	mov	r0, r7
 800715e:	f7ff ffa5 	bl	80070ac <_Bfree>
 8007162:	4644      	mov	r4, r8
 8007164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007168:	3501      	adds	r5, #1
 800716a:	615e      	str	r6, [r3, #20]
 800716c:	6125      	str	r5, [r4, #16]
 800716e:	4620      	mov	r0, r4
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	08008084 	.word	0x08008084
 8007178:	0800809f 	.word	0x0800809f

0800717c <__hi0bits>:
 800717c:	0c03      	lsrs	r3, r0, #16
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	b9d3      	cbnz	r3, 80071b8 <__hi0bits+0x3c>
 8007182:	0400      	lsls	r0, r0, #16
 8007184:	2310      	movs	r3, #16
 8007186:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800718a:	bf04      	itt	eq
 800718c:	0200      	lsleq	r0, r0, #8
 800718e:	3308      	addeq	r3, #8
 8007190:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007194:	bf04      	itt	eq
 8007196:	0100      	lsleq	r0, r0, #4
 8007198:	3304      	addeq	r3, #4
 800719a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800719e:	bf04      	itt	eq
 80071a0:	0080      	lsleq	r0, r0, #2
 80071a2:	3302      	addeq	r3, #2
 80071a4:	2800      	cmp	r0, #0
 80071a6:	db05      	blt.n	80071b4 <__hi0bits+0x38>
 80071a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071ac:	f103 0301 	add.w	r3, r3, #1
 80071b0:	bf08      	it	eq
 80071b2:	2320      	moveq	r3, #32
 80071b4:	4618      	mov	r0, r3
 80071b6:	4770      	bx	lr
 80071b8:	2300      	movs	r3, #0
 80071ba:	e7e4      	b.n	8007186 <__hi0bits+0xa>

080071bc <__lo0bits>:
 80071bc:	6803      	ldr	r3, [r0, #0]
 80071be:	f013 0207 	ands.w	r2, r3, #7
 80071c2:	4601      	mov	r1, r0
 80071c4:	d00b      	beq.n	80071de <__lo0bits+0x22>
 80071c6:	07da      	lsls	r2, r3, #31
 80071c8:	d423      	bmi.n	8007212 <__lo0bits+0x56>
 80071ca:	0798      	lsls	r0, r3, #30
 80071cc:	bf49      	itett	mi
 80071ce:	085b      	lsrmi	r3, r3, #1
 80071d0:	089b      	lsrpl	r3, r3, #2
 80071d2:	2001      	movmi	r0, #1
 80071d4:	600b      	strmi	r3, [r1, #0]
 80071d6:	bf5c      	itt	pl
 80071d8:	600b      	strpl	r3, [r1, #0]
 80071da:	2002      	movpl	r0, #2
 80071dc:	4770      	bx	lr
 80071de:	b298      	uxth	r0, r3
 80071e0:	b9a8      	cbnz	r0, 800720e <__lo0bits+0x52>
 80071e2:	0c1b      	lsrs	r3, r3, #16
 80071e4:	2010      	movs	r0, #16
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	b90a      	cbnz	r2, 80071ee <__lo0bits+0x32>
 80071ea:	3008      	adds	r0, #8
 80071ec:	0a1b      	lsrs	r3, r3, #8
 80071ee:	071a      	lsls	r2, r3, #28
 80071f0:	bf04      	itt	eq
 80071f2:	091b      	lsreq	r3, r3, #4
 80071f4:	3004      	addeq	r0, #4
 80071f6:	079a      	lsls	r2, r3, #30
 80071f8:	bf04      	itt	eq
 80071fa:	089b      	lsreq	r3, r3, #2
 80071fc:	3002      	addeq	r0, #2
 80071fe:	07da      	lsls	r2, r3, #31
 8007200:	d403      	bmi.n	800720a <__lo0bits+0x4e>
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	f100 0001 	add.w	r0, r0, #1
 8007208:	d005      	beq.n	8007216 <__lo0bits+0x5a>
 800720a:	600b      	str	r3, [r1, #0]
 800720c:	4770      	bx	lr
 800720e:	4610      	mov	r0, r2
 8007210:	e7e9      	b.n	80071e6 <__lo0bits+0x2a>
 8007212:	2000      	movs	r0, #0
 8007214:	4770      	bx	lr
 8007216:	2020      	movs	r0, #32
 8007218:	4770      	bx	lr
	...

0800721c <__i2b>:
 800721c:	b510      	push	{r4, lr}
 800721e:	460c      	mov	r4, r1
 8007220:	2101      	movs	r1, #1
 8007222:	f7ff ff03 	bl	800702c <_Balloc>
 8007226:	4602      	mov	r2, r0
 8007228:	b928      	cbnz	r0, 8007236 <__i2b+0x1a>
 800722a:	4b05      	ldr	r3, [pc, #20]	; (8007240 <__i2b+0x24>)
 800722c:	4805      	ldr	r0, [pc, #20]	; (8007244 <__i2b+0x28>)
 800722e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007232:	f7fe ffeb 	bl	800620c <__assert_func>
 8007236:	2301      	movs	r3, #1
 8007238:	6144      	str	r4, [r0, #20]
 800723a:	6103      	str	r3, [r0, #16]
 800723c:	bd10      	pop	{r4, pc}
 800723e:	bf00      	nop
 8007240:	08008084 	.word	0x08008084
 8007244:	0800809f 	.word	0x0800809f

08007248 <__multiply>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	4691      	mov	r9, r2
 800724e:	690a      	ldr	r2, [r1, #16]
 8007250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007254:	429a      	cmp	r2, r3
 8007256:	bfb8      	it	lt
 8007258:	460b      	movlt	r3, r1
 800725a:	460c      	mov	r4, r1
 800725c:	bfbc      	itt	lt
 800725e:	464c      	movlt	r4, r9
 8007260:	4699      	movlt	r9, r3
 8007262:	6927      	ldr	r7, [r4, #16]
 8007264:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007268:	68a3      	ldr	r3, [r4, #8]
 800726a:	6861      	ldr	r1, [r4, #4]
 800726c:	eb07 060a 	add.w	r6, r7, sl
 8007270:	42b3      	cmp	r3, r6
 8007272:	b085      	sub	sp, #20
 8007274:	bfb8      	it	lt
 8007276:	3101      	addlt	r1, #1
 8007278:	f7ff fed8 	bl	800702c <_Balloc>
 800727c:	b930      	cbnz	r0, 800728c <__multiply+0x44>
 800727e:	4602      	mov	r2, r0
 8007280:	4b44      	ldr	r3, [pc, #272]	; (8007394 <__multiply+0x14c>)
 8007282:	4845      	ldr	r0, [pc, #276]	; (8007398 <__multiply+0x150>)
 8007284:	f240 115d 	movw	r1, #349	; 0x15d
 8007288:	f7fe ffc0 	bl	800620c <__assert_func>
 800728c:	f100 0514 	add.w	r5, r0, #20
 8007290:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007294:	462b      	mov	r3, r5
 8007296:	2200      	movs	r2, #0
 8007298:	4543      	cmp	r3, r8
 800729a:	d321      	bcc.n	80072e0 <__multiply+0x98>
 800729c:	f104 0314 	add.w	r3, r4, #20
 80072a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072a4:	f109 0314 	add.w	r3, r9, #20
 80072a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072ac:	9202      	str	r2, [sp, #8]
 80072ae:	1b3a      	subs	r2, r7, r4
 80072b0:	3a15      	subs	r2, #21
 80072b2:	f022 0203 	bic.w	r2, r2, #3
 80072b6:	3204      	adds	r2, #4
 80072b8:	f104 0115 	add.w	r1, r4, #21
 80072bc:	428f      	cmp	r7, r1
 80072be:	bf38      	it	cc
 80072c0:	2204      	movcc	r2, #4
 80072c2:	9201      	str	r2, [sp, #4]
 80072c4:	9a02      	ldr	r2, [sp, #8]
 80072c6:	9303      	str	r3, [sp, #12]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d80c      	bhi.n	80072e6 <__multiply+0x9e>
 80072cc:	2e00      	cmp	r6, #0
 80072ce:	dd03      	ble.n	80072d8 <__multiply+0x90>
 80072d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d05a      	beq.n	800738e <__multiply+0x146>
 80072d8:	6106      	str	r6, [r0, #16]
 80072da:	b005      	add	sp, #20
 80072dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e0:	f843 2b04 	str.w	r2, [r3], #4
 80072e4:	e7d8      	b.n	8007298 <__multiply+0x50>
 80072e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80072ea:	f1ba 0f00 	cmp.w	sl, #0
 80072ee:	d024      	beq.n	800733a <__multiply+0xf2>
 80072f0:	f104 0e14 	add.w	lr, r4, #20
 80072f4:	46a9      	mov	r9, r5
 80072f6:	f04f 0c00 	mov.w	ip, #0
 80072fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072fe:	f8d9 1000 	ldr.w	r1, [r9]
 8007302:	fa1f fb82 	uxth.w	fp, r2
 8007306:	b289      	uxth	r1, r1
 8007308:	fb0a 110b 	mla	r1, sl, fp, r1
 800730c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007310:	f8d9 2000 	ldr.w	r2, [r9]
 8007314:	4461      	add	r1, ip
 8007316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800731a:	fb0a c20b 	mla	r2, sl, fp, ip
 800731e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007322:	b289      	uxth	r1, r1
 8007324:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007328:	4577      	cmp	r7, lr
 800732a:	f849 1b04 	str.w	r1, [r9], #4
 800732e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007332:	d8e2      	bhi.n	80072fa <__multiply+0xb2>
 8007334:	9a01      	ldr	r2, [sp, #4]
 8007336:	f845 c002 	str.w	ip, [r5, r2]
 800733a:	9a03      	ldr	r2, [sp, #12]
 800733c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007340:	3304      	adds	r3, #4
 8007342:	f1b9 0f00 	cmp.w	r9, #0
 8007346:	d020      	beq.n	800738a <__multiply+0x142>
 8007348:	6829      	ldr	r1, [r5, #0]
 800734a:	f104 0c14 	add.w	ip, r4, #20
 800734e:	46ae      	mov	lr, r5
 8007350:	f04f 0a00 	mov.w	sl, #0
 8007354:	f8bc b000 	ldrh.w	fp, [ip]
 8007358:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800735c:	fb09 220b 	mla	r2, r9, fp, r2
 8007360:	4492      	add	sl, r2
 8007362:	b289      	uxth	r1, r1
 8007364:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007368:	f84e 1b04 	str.w	r1, [lr], #4
 800736c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007370:	f8be 1000 	ldrh.w	r1, [lr]
 8007374:	0c12      	lsrs	r2, r2, #16
 8007376:	fb09 1102 	mla	r1, r9, r2, r1
 800737a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800737e:	4567      	cmp	r7, ip
 8007380:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007384:	d8e6      	bhi.n	8007354 <__multiply+0x10c>
 8007386:	9a01      	ldr	r2, [sp, #4]
 8007388:	50a9      	str	r1, [r5, r2]
 800738a:	3504      	adds	r5, #4
 800738c:	e79a      	b.n	80072c4 <__multiply+0x7c>
 800738e:	3e01      	subs	r6, #1
 8007390:	e79c      	b.n	80072cc <__multiply+0x84>
 8007392:	bf00      	nop
 8007394:	08008084 	.word	0x08008084
 8007398:	0800809f 	.word	0x0800809f

0800739c <__pow5mult>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	4615      	mov	r5, r2
 80073a2:	f012 0203 	ands.w	r2, r2, #3
 80073a6:	4606      	mov	r6, r0
 80073a8:	460f      	mov	r7, r1
 80073aa:	d007      	beq.n	80073bc <__pow5mult+0x20>
 80073ac:	4c25      	ldr	r4, [pc, #148]	; (8007444 <__pow5mult+0xa8>)
 80073ae:	3a01      	subs	r2, #1
 80073b0:	2300      	movs	r3, #0
 80073b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073b6:	f7ff fe9b 	bl	80070f0 <__multadd>
 80073ba:	4607      	mov	r7, r0
 80073bc:	10ad      	asrs	r5, r5, #2
 80073be:	d03d      	beq.n	800743c <__pow5mult+0xa0>
 80073c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073c2:	b97c      	cbnz	r4, 80073e4 <__pow5mult+0x48>
 80073c4:	2010      	movs	r0, #16
 80073c6:	f7fe f873 	bl	80054b0 <malloc>
 80073ca:	4602      	mov	r2, r0
 80073cc:	6270      	str	r0, [r6, #36]	; 0x24
 80073ce:	b928      	cbnz	r0, 80073dc <__pow5mult+0x40>
 80073d0:	4b1d      	ldr	r3, [pc, #116]	; (8007448 <__pow5mult+0xac>)
 80073d2:	481e      	ldr	r0, [pc, #120]	; (800744c <__pow5mult+0xb0>)
 80073d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073d8:	f7fe ff18 	bl	800620c <__assert_func>
 80073dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073e0:	6004      	str	r4, [r0, #0]
 80073e2:	60c4      	str	r4, [r0, #12]
 80073e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073ec:	b94c      	cbnz	r4, 8007402 <__pow5mult+0x66>
 80073ee:	f240 2171 	movw	r1, #625	; 0x271
 80073f2:	4630      	mov	r0, r6
 80073f4:	f7ff ff12 	bl	800721c <__i2b>
 80073f8:	2300      	movs	r3, #0
 80073fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80073fe:	4604      	mov	r4, r0
 8007400:	6003      	str	r3, [r0, #0]
 8007402:	f04f 0900 	mov.w	r9, #0
 8007406:	07eb      	lsls	r3, r5, #31
 8007408:	d50a      	bpl.n	8007420 <__pow5mult+0x84>
 800740a:	4639      	mov	r1, r7
 800740c:	4622      	mov	r2, r4
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ff1a 	bl	8007248 <__multiply>
 8007414:	4639      	mov	r1, r7
 8007416:	4680      	mov	r8, r0
 8007418:	4630      	mov	r0, r6
 800741a:	f7ff fe47 	bl	80070ac <_Bfree>
 800741e:	4647      	mov	r7, r8
 8007420:	106d      	asrs	r5, r5, #1
 8007422:	d00b      	beq.n	800743c <__pow5mult+0xa0>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	b938      	cbnz	r0, 8007438 <__pow5mult+0x9c>
 8007428:	4622      	mov	r2, r4
 800742a:	4621      	mov	r1, r4
 800742c:	4630      	mov	r0, r6
 800742e:	f7ff ff0b 	bl	8007248 <__multiply>
 8007432:	6020      	str	r0, [r4, #0]
 8007434:	f8c0 9000 	str.w	r9, [r0]
 8007438:	4604      	mov	r4, r0
 800743a:	e7e4      	b.n	8007406 <__pow5mult+0x6a>
 800743c:	4638      	mov	r0, r7
 800743e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007442:	bf00      	nop
 8007444:	080081f0 	.word	0x080081f0
 8007448:	08008012 	.word	0x08008012
 800744c:	0800809f 	.word	0x0800809f

08007450 <__lshift>:
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	460c      	mov	r4, r1
 8007456:	6849      	ldr	r1, [r1, #4]
 8007458:	6923      	ldr	r3, [r4, #16]
 800745a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	4607      	mov	r7, r0
 8007462:	4691      	mov	r9, r2
 8007464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007468:	f108 0601 	add.w	r6, r8, #1
 800746c:	42b3      	cmp	r3, r6
 800746e:	db0b      	blt.n	8007488 <__lshift+0x38>
 8007470:	4638      	mov	r0, r7
 8007472:	f7ff fddb 	bl	800702c <_Balloc>
 8007476:	4605      	mov	r5, r0
 8007478:	b948      	cbnz	r0, 800748e <__lshift+0x3e>
 800747a:	4602      	mov	r2, r0
 800747c:	4b2a      	ldr	r3, [pc, #168]	; (8007528 <__lshift+0xd8>)
 800747e:	482b      	ldr	r0, [pc, #172]	; (800752c <__lshift+0xdc>)
 8007480:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007484:	f7fe fec2 	bl	800620c <__assert_func>
 8007488:	3101      	adds	r1, #1
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	e7ee      	b.n	800746c <__lshift+0x1c>
 800748e:	2300      	movs	r3, #0
 8007490:	f100 0114 	add.w	r1, r0, #20
 8007494:	f100 0210 	add.w	r2, r0, #16
 8007498:	4618      	mov	r0, r3
 800749a:	4553      	cmp	r3, sl
 800749c:	db37      	blt.n	800750e <__lshift+0xbe>
 800749e:	6920      	ldr	r0, [r4, #16]
 80074a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074a4:	f104 0314 	add.w	r3, r4, #20
 80074a8:	f019 091f 	ands.w	r9, r9, #31
 80074ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074b4:	d02f      	beq.n	8007516 <__lshift+0xc6>
 80074b6:	f1c9 0e20 	rsb	lr, r9, #32
 80074ba:	468a      	mov	sl, r1
 80074bc:	f04f 0c00 	mov.w	ip, #0
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	fa02 f209 	lsl.w	r2, r2, r9
 80074c6:	ea42 020c 	orr.w	r2, r2, ip
 80074ca:	f84a 2b04 	str.w	r2, [sl], #4
 80074ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d2:	4298      	cmp	r0, r3
 80074d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80074d8:	d8f2      	bhi.n	80074c0 <__lshift+0x70>
 80074da:	1b03      	subs	r3, r0, r4
 80074dc:	3b15      	subs	r3, #21
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	3304      	adds	r3, #4
 80074e4:	f104 0215 	add.w	r2, r4, #21
 80074e8:	4290      	cmp	r0, r2
 80074ea:	bf38      	it	cc
 80074ec:	2304      	movcc	r3, #4
 80074ee:	f841 c003 	str.w	ip, [r1, r3]
 80074f2:	f1bc 0f00 	cmp.w	ip, #0
 80074f6:	d001      	beq.n	80074fc <__lshift+0xac>
 80074f8:	f108 0602 	add.w	r6, r8, #2
 80074fc:	3e01      	subs	r6, #1
 80074fe:	4638      	mov	r0, r7
 8007500:	612e      	str	r6, [r5, #16]
 8007502:	4621      	mov	r1, r4
 8007504:	f7ff fdd2 	bl	80070ac <_Bfree>
 8007508:	4628      	mov	r0, r5
 800750a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800750e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007512:	3301      	adds	r3, #1
 8007514:	e7c1      	b.n	800749a <__lshift+0x4a>
 8007516:	3904      	subs	r1, #4
 8007518:	f853 2b04 	ldr.w	r2, [r3], #4
 800751c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007520:	4298      	cmp	r0, r3
 8007522:	d8f9      	bhi.n	8007518 <__lshift+0xc8>
 8007524:	e7ea      	b.n	80074fc <__lshift+0xac>
 8007526:	bf00      	nop
 8007528:	08008084 	.word	0x08008084
 800752c:	0800809f 	.word	0x0800809f

08007530 <__mcmp>:
 8007530:	b530      	push	{r4, r5, lr}
 8007532:	6902      	ldr	r2, [r0, #16]
 8007534:	690c      	ldr	r4, [r1, #16]
 8007536:	1b12      	subs	r2, r2, r4
 8007538:	d10e      	bne.n	8007558 <__mcmp+0x28>
 800753a:	f100 0314 	add.w	r3, r0, #20
 800753e:	3114      	adds	r1, #20
 8007540:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007544:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007548:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800754c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007550:	42a5      	cmp	r5, r4
 8007552:	d003      	beq.n	800755c <__mcmp+0x2c>
 8007554:	d305      	bcc.n	8007562 <__mcmp+0x32>
 8007556:	2201      	movs	r2, #1
 8007558:	4610      	mov	r0, r2
 800755a:	bd30      	pop	{r4, r5, pc}
 800755c:	4283      	cmp	r3, r0
 800755e:	d3f3      	bcc.n	8007548 <__mcmp+0x18>
 8007560:	e7fa      	b.n	8007558 <__mcmp+0x28>
 8007562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007566:	e7f7      	b.n	8007558 <__mcmp+0x28>

08007568 <__mdiff>:
 8007568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	460c      	mov	r4, r1
 800756e:	4606      	mov	r6, r0
 8007570:	4611      	mov	r1, r2
 8007572:	4620      	mov	r0, r4
 8007574:	4690      	mov	r8, r2
 8007576:	f7ff ffdb 	bl	8007530 <__mcmp>
 800757a:	1e05      	subs	r5, r0, #0
 800757c:	d110      	bne.n	80075a0 <__mdiff+0x38>
 800757e:	4629      	mov	r1, r5
 8007580:	4630      	mov	r0, r6
 8007582:	f7ff fd53 	bl	800702c <_Balloc>
 8007586:	b930      	cbnz	r0, 8007596 <__mdiff+0x2e>
 8007588:	4b3a      	ldr	r3, [pc, #232]	; (8007674 <__mdiff+0x10c>)
 800758a:	4602      	mov	r2, r0
 800758c:	f240 2132 	movw	r1, #562	; 0x232
 8007590:	4839      	ldr	r0, [pc, #228]	; (8007678 <__mdiff+0x110>)
 8007592:	f7fe fe3b 	bl	800620c <__assert_func>
 8007596:	2301      	movs	r3, #1
 8007598:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800759c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	bfa4      	itt	ge
 80075a2:	4643      	movge	r3, r8
 80075a4:	46a0      	movge	r8, r4
 80075a6:	4630      	mov	r0, r6
 80075a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075ac:	bfa6      	itte	ge
 80075ae:	461c      	movge	r4, r3
 80075b0:	2500      	movge	r5, #0
 80075b2:	2501      	movlt	r5, #1
 80075b4:	f7ff fd3a 	bl	800702c <_Balloc>
 80075b8:	b920      	cbnz	r0, 80075c4 <__mdiff+0x5c>
 80075ba:	4b2e      	ldr	r3, [pc, #184]	; (8007674 <__mdiff+0x10c>)
 80075bc:	4602      	mov	r2, r0
 80075be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075c2:	e7e5      	b.n	8007590 <__mdiff+0x28>
 80075c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075c8:	6926      	ldr	r6, [r4, #16]
 80075ca:	60c5      	str	r5, [r0, #12]
 80075cc:	f104 0914 	add.w	r9, r4, #20
 80075d0:	f108 0514 	add.w	r5, r8, #20
 80075d4:	f100 0e14 	add.w	lr, r0, #20
 80075d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80075dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075e0:	f108 0210 	add.w	r2, r8, #16
 80075e4:	46f2      	mov	sl, lr
 80075e6:	2100      	movs	r1, #0
 80075e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80075ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075f0:	fa1f f883 	uxth.w	r8, r3
 80075f4:	fa11 f18b 	uxtah	r1, r1, fp
 80075f8:	0c1b      	lsrs	r3, r3, #16
 80075fa:	eba1 0808 	sub.w	r8, r1, r8
 80075fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007602:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007606:	fa1f f888 	uxth.w	r8, r8
 800760a:	1419      	asrs	r1, r3, #16
 800760c:	454e      	cmp	r6, r9
 800760e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007612:	f84a 3b04 	str.w	r3, [sl], #4
 8007616:	d8e7      	bhi.n	80075e8 <__mdiff+0x80>
 8007618:	1b33      	subs	r3, r6, r4
 800761a:	3b15      	subs	r3, #21
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	3304      	adds	r3, #4
 8007622:	3415      	adds	r4, #21
 8007624:	42a6      	cmp	r6, r4
 8007626:	bf38      	it	cc
 8007628:	2304      	movcc	r3, #4
 800762a:	441d      	add	r5, r3
 800762c:	4473      	add	r3, lr
 800762e:	469e      	mov	lr, r3
 8007630:	462e      	mov	r6, r5
 8007632:	4566      	cmp	r6, ip
 8007634:	d30e      	bcc.n	8007654 <__mdiff+0xec>
 8007636:	f10c 0203 	add.w	r2, ip, #3
 800763a:	1b52      	subs	r2, r2, r5
 800763c:	f022 0203 	bic.w	r2, r2, #3
 8007640:	3d03      	subs	r5, #3
 8007642:	45ac      	cmp	ip, r5
 8007644:	bf38      	it	cc
 8007646:	2200      	movcc	r2, #0
 8007648:	441a      	add	r2, r3
 800764a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800764e:	b17b      	cbz	r3, 8007670 <__mdiff+0x108>
 8007650:	6107      	str	r7, [r0, #16]
 8007652:	e7a3      	b.n	800759c <__mdiff+0x34>
 8007654:	f856 8b04 	ldr.w	r8, [r6], #4
 8007658:	fa11 f288 	uxtah	r2, r1, r8
 800765c:	1414      	asrs	r4, r2, #16
 800765e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007662:	b292      	uxth	r2, r2
 8007664:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007668:	f84e 2b04 	str.w	r2, [lr], #4
 800766c:	1421      	asrs	r1, r4, #16
 800766e:	e7e0      	b.n	8007632 <__mdiff+0xca>
 8007670:	3f01      	subs	r7, #1
 8007672:	e7ea      	b.n	800764a <__mdiff+0xe2>
 8007674:	08008084 	.word	0x08008084
 8007678:	0800809f 	.word	0x0800809f

0800767c <__d2b>:
 800767c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007680:	4689      	mov	r9, r1
 8007682:	2101      	movs	r1, #1
 8007684:	ec57 6b10 	vmov	r6, r7, d0
 8007688:	4690      	mov	r8, r2
 800768a:	f7ff fccf 	bl	800702c <_Balloc>
 800768e:	4604      	mov	r4, r0
 8007690:	b930      	cbnz	r0, 80076a0 <__d2b+0x24>
 8007692:	4602      	mov	r2, r0
 8007694:	4b25      	ldr	r3, [pc, #148]	; (800772c <__d2b+0xb0>)
 8007696:	4826      	ldr	r0, [pc, #152]	; (8007730 <__d2b+0xb4>)
 8007698:	f240 310a 	movw	r1, #778	; 0x30a
 800769c:	f7fe fdb6 	bl	800620c <__assert_func>
 80076a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076a8:	bb35      	cbnz	r5, 80076f8 <__d2b+0x7c>
 80076aa:	2e00      	cmp	r6, #0
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	d028      	beq.n	8007702 <__d2b+0x86>
 80076b0:	4668      	mov	r0, sp
 80076b2:	9600      	str	r6, [sp, #0]
 80076b4:	f7ff fd82 	bl	80071bc <__lo0bits>
 80076b8:	9900      	ldr	r1, [sp, #0]
 80076ba:	b300      	cbz	r0, 80076fe <__d2b+0x82>
 80076bc:	9a01      	ldr	r2, [sp, #4]
 80076be:	f1c0 0320 	rsb	r3, r0, #32
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	430b      	orrs	r3, r1
 80076c8:	40c2      	lsrs	r2, r0
 80076ca:	6163      	str	r3, [r4, #20]
 80076cc:	9201      	str	r2, [sp, #4]
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	61a3      	str	r3, [r4, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bf14      	ite	ne
 80076d6:	2202      	movne	r2, #2
 80076d8:	2201      	moveq	r2, #1
 80076da:	6122      	str	r2, [r4, #16]
 80076dc:	b1d5      	cbz	r5, 8007714 <__d2b+0x98>
 80076de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076e2:	4405      	add	r5, r0
 80076e4:	f8c9 5000 	str.w	r5, [r9]
 80076e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076ec:	f8c8 0000 	str.w	r0, [r8]
 80076f0:	4620      	mov	r0, r4
 80076f2:	b003      	add	sp, #12
 80076f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076fc:	e7d5      	b.n	80076aa <__d2b+0x2e>
 80076fe:	6161      	str	r1, [r4, #20]
 8007700:	e7e5      	b.n	80076ce <__d2b+0x52>
 8007702:	a801      	add	r0, sp, #4
 8007704:	f7ff fd5a 	bl	80071bc <__lo0bits>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	6163      	str	r3, [r4, #20]
 800770c:	2201      	movs	r2, #1
 800770e:	6122      	str	r2, [r4, #16]
 8007710:	3020      	adds	r0, #32
 8007712:	e7e3      	b.n	80076dc <__d2b+0x60>
 8007714:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800771c:	f8c9 0000 	str.w	r0, [r9]
 8007720:	6918      	ldr	r0, [r3, #16]
 8007722:	f7ff fd2b 	bl	800717c <__hi0bits>
 8007726:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800772a:	e7df      	b.n	80076ec <__d2b+0x70>
 800772c:	08008084 	.word	0x08008084
 8007730:	0800809f 	.word	0x0800809f

08007734 <_calloc_r>:
 8007734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007736:	fba1 2402 	umull	r2, r4, r1, r2
 800773a:	b94c      	cbnz	r4, 8007750 <_calloc_r+0x1c>
 800773c:	4611      	mov	r1, r2
 800773e:	9201      	str	r2, [sp, #4]
 8007740:	f7fd ff48 	bl	80055d4 <_malloc_r>
 8007744:	9a01      	ldr	r2, [sp, #4]
 8007746:	4605      	mov	r5, r0
 8007748:	b930      	cbnz	r0, 8007758 <_calloc_r+0x24>
 800774a:	4628      	mov	r0, r5
 800774c:	b003      	add	sp, #12
 800774e:	bd30      	pop	{r4, r5, pc}
 8007750:	220c      	movs	r2, #12
 8007752:	6002      	str	r2, [r0, #0]
 8007754:	2500      	movs	r5, #0
 8007756:	e7f8      	b.n	800774a <_calloc_r+0x16>
 8007758:	4621      	mov	r1, r4
 800775a:	f7fd fec7 	bl	80054ec <memset>
 800775e:	e7f4      	b.n	800774a <_calloc_r+0x16>

08007760 <__sfputc_r>:
 8007760:	6893      	ldr	r3, [r2, #8]
 8007762:	3b01      	subs	r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	b410      	push	{r4}
 8007768:	6093      	str	r3, [r2, #8]
 800776a:	da08      	bge.n	800777e <__sfputc_r+0x1e>
 800776c:	6994      	ldr	r4, [r2, #24]
 800776e:	42a3      	cmp	r3, r4
 8007770:	db01      	blt.n	8007776 <__sfputc_r+0x16>
 8007772:	290a      	cmp	r1, #10
 8007774:	d103      	bne.n	800777e <__sfputc_r+0x1e>
 8007776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800777a:	f7fe bc75 	b.w	8006068 <__swbuf_r>
 800777e:	6813      	ldr	r3, [r2, #0]
 8007780:	1c58      	adds	r0, r3, #1
 8007782:	6010      	str	r0, [r2, #0]
 8007784:	7019      	strb	r1, [r3, #0]
 8007786:	4608      	mov	r0, r1
 8007788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800778c:	4770      	bx	lr

0800778e <__sfputs_r>:
 800778e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007790:	4606      	mov	r6, r0
 8007792:	460f      	mov	r7, r1
 8007794:	4614      	mov	r4, r2
 8007796:	18d5      	adds	r5, r2, r3
 8007798:	42ac      	cmp	r4, r5
 800779a:	d101      	bne.n	80077a0 <__sfputs_r+0x12>
 800779c:	2000      	movs	r0, #0
 800779e:	e007      	b.n	80077b0 <__sfputs_r+0x22>
 80077a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a4:	463a      	mov	r2, r7
 80077a6:	4630      	mov	r0, r6
 80077a8:	f7ff ffda 	bl	8007760 <__sfputc_r>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d1f3      	bne.n	8007798 <__sfputs_r+0xa>
 80077b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077b4 <_vfiprintf_r>:
 80077b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	460d      	mov	r5, r1
 80077ba:	b09d      	sub	sp, #116	; 0x74
 80077bc:	4614      	mov	r4, r2
 80077be:	4698      	mov	r8, r3
 80077c0:	4606      	mov	r6, r0
 80077c2:	b118      	cbz	r0, 80077cc <_vfiprintf_r+0x18>
 80077c4:	6983      	ldr	r3, [r0, #24]
 80077c6:	b90b      	cbnz	r3, 80077cc <_vfiprintf_r+0x18>
 80077c8:	f7fd fd48 	bl	800525c <__sinit>
 80077cc:	4b89      	ldr	r3, [pc, #548]	; (80079f4 <_vfiprintf_r+0x240>)
 80077ce:	429d      	cmp	r5, r3
 80077d0:	d11b      	bne.n	800780a <_vfiprintf_r+0x56>
 80077d2:	6875      	ldr	r5, [r6, #4]
 80077d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077d6:	07d9      	lsls	r1, r3, #31
 80077d8:	d405      	bmi.n	80077e6 <_vfiprintf_r+0x32>
 80077da:	89ab      	ldrh	r3, [r5, #12]
 80077dc:	059a      	lsls	r2, r3, #22
 80077de:	d402      	bmi.n	80077e6 <_vfiprintf_r+0x32>
 80077e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077e2:	f7fd fdfe 	bl	80053e2 <__retarget_lock_acquire_recursive>
 80077e6:	89ab      	ldrh	r3, [r5, #12]
 80077e8:	071b      	lsls	r3, r3, #28
 80077ea:	d501      	bpl.n	80077f0 <_vfiprintf_r+0x3c>
 80077ec:	692b      	ldr	r3, [r5, #16]
 80077ee:	b9eb      	cbnz	r3, 800782c <_vfiprintf_r+0x78>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7fe fc9c 	bl	8006130 <__swsetup_r>
 80077f8:	b1c0      	cbz	r0, 800782c <_vfiprintf_r+0x78>
 80077fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077fc:	07dc      	lsls	r4, r3, #31
 80077fe:	d50e      	bpl.n	800781e <_vfiprintf_r+0x6a>
 8007800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007804:	b01d      	add	sp, #116	; 0x74
 8007806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780a:	4b7b      	ldr	r3, [pc, #492]	; (80079f8 <_vfiprintf_r+0x244>)
 800780c:	429d      	cmp	r5, r3
 800780e:	d101      	bne.n	8007814 <_vfiprintf_r+0x60>
 8007810:	68b5      	ldr	r5, [r6, #8]
 8007812:	e7df      	b.n	80077d4 <_vfiprintf_r+0x20>
 8007814:	4b79      	ldr	r3, [pc, #484]	; (80079fc <_vfiprintf_r+0x248>)
 8007816:	429d      	cmp	r5, r3
 8007818:	bf08      	it	eq
 800781a:	68f5      	ldreq	r5, [r6, #12]
 800781c:	e7da      	b.n	80077d4 <_vfiprintf_r+0x20>
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	0598      	lsls	r0, r3, #22
 8007822:	d4ed      	bmi.n	8007800 <_vfiprintf_r+0x4c>
 8007824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007826:	f7fd fddd 	bl	80053e4 <__retarget_lock_release_recursive>
 800782a:	e7e9      	b.n	8007800 <_vfiprintf_r+0x4c>
 800782c:	2300      	movs	r3, #0
 800782e:	9309      	str	r3, [sp, #36]	; 0x24
 8007830:	2320      	movs	r3, #32
 8007832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007836:	f8cd 800c 	str.w	r8, [sp, #12]
 800783a:	2330      	movs	r3, #48	; 0x30
 800783c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a00 <_vfiprintf_r+0x24c>
 8007840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007844:	f04f 0901 	mov.w	r9, #1
 8007848:	4623      	mov	r3, r4
 800784a:	469a      	mov	sl, r3
 800784c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007850:	b10a      	cbz	r2, 8007856 <_vfiprintf_r+0xa2>
 8007852:	2a25      	cmp	r2, #37	; 0x25
 8007854:	d1f9      	bne.n	800784a <_vfiprintf_r+0x96>
 8007856:	ebba 0b04 	subs.w	fp, sl, r4
 800785a:	d00b      	beq.n	8007874 <_vfiprintf_r+0xc0>
 800785c:	465b      	mov	r3, fp
 800785e:	4622      	mov	r2, r4
 8007860:	4629      	mov	r1, r5
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff ff93 	bl	800778e <__sfputs_r>
 8007868:	3001      	adds	r0, #1
 800786a:	f000 80aa 	beq.w	80079c2 <_vfiprintf_r+0x20e>
 800786e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007870:	445a      	add	r2, fp
 8007872:	9209      	str	r2, [sp, #36]	; 0x24
 8007874:	f89a 3000 	ldrb.w	r3, [sl]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80a2 	beq.w	80079c2 <_vfiprintf_r+0x20e>
 800787e:	2300      	movs	r3, #0
 8007880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007888:	f10a 0a01 	add.w	sl, sl, #1
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	9307      	str	r3, [sp, #28]
 8007890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007894:	931a      	str	r3, [sp, #104]	; 0x68
 8007896:	4654      	mov	r4, sl
 8007898:	2205      	movs	r2, #5
 800789a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789e:	4858      	ldr	r0, [pc, #352]	; (8007a00 <_vfiprintf_r+0x24c>)
 80078a0:	f7f8 fc6e 	bl	8000180 <memchr>
 80078a4:	9a04      	ldr	r2, [sp, #16]
 80078a6:	b9d8      	cbnz	r0, 80078e0 <_vfiprintf_r+0x12c>
 80078a8:	06d1      	lsls	r1, r2, #27
 80078aa:	bf44      	itt	mi
 80078ac:	2320      	movmi	r3, #32
 80078ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b2:	0713      	lsls	r3, r2, #28
 80078b4:	bf44      	itt	mi
 80078b6:	232b      	movmi	r3, #43	; 0x2b
 80078b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078bc:	f89a 3000 	ldrb.w	r3, [sl]
 80078c0:	2b2a      	cmp	r3, #42	; 0x2a
 80078c2:	d015      	beq.n	80078f0 <_vfiprintf_r+0x13c>
 80078c4:	9a07      	ldr	r2, [sp, #28]
 80078c6:	4654      	mov	r4, sl
 80078c8:	2000      	movs	r0, #0
 80078ca:	f04f 0c0a 	mov.w	ip, #10
 80078ce:	4621      	mov	r1, r4
 80078d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078d4:	3b30      	subs	r3, #48	; 0x30
 80078d6:	2b09      	cmp	r3, #9
 80078d8:	d94e      	bls.n	8007978 <_vfiprintf_r+0x1c4>
 80078da:	b1b0      	cbz	r0, 800790a <_vfiprintf_r+0x156>
 80078dc:	9207      	str	r2, [sp, #28]
 80078de:	e014      	b.n	800790a <_vfiprintf_r+0x156>
 80078e0:	eba0 0308 	sub.w	r3, r0, r8
 80078e4:	fa09 f303 	lsl.w	r3, r9, r3
 80078e8:	4313      	orrs	r3, r2
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	46a2      	mov	sl, r4
 80078ee:	e7d2      	b.n	8007896 <_vfiprintf_r+0xe2>
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	1d19      	adds	r1, r3, #4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	9103      	str	r1, [sp, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bfbb      	ittet	lt
 80078fc:	425b      	neglt	r3, r3
 80078fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007902:	9307      	strge	r3, [sp, #28]
 8007904:	9307      	strlt	r3, [sp, #28]
 8007906:	bfb8      	it	lt
 8007908:	9204      	strlt	r2, [sp, #16]
 800790a:	7823      	ldrb	r3, [r4, #0]
 800790c:	2b2e      	cmp	r3, #46	; 0x2e
 800790e:	d10c      	bne.n	800792a <_vfiprintf_r+0x176>
 8007910:	7863      	ldrb	r3, [r4, #1]
 8007912:	2b2a      	cmp	r3, #42	; 0x2a
 8007914:	d135      	bne.n	8007982 <_vfiprintf_r+0x1ce>
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	1d1a      	adds	r2, r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	9203      	str	r2, [sp, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	bfb8      	it	lt
 8007922:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007926:	3402      	adds	r4, #2
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a10 <_vfiprintf_r+0x25c>
 800792e:	7821      	ldrb	r1, [r4, #0]
 8007930:	2203      	movs	r2, #3
 8007932:	4650      	mov	r0, sl
 8007934:	f7f8 fc24 	bl	8000180 <memchr>
 8007938:	b140      	cbz	r0, 800794c <_vfiprintf_r+0x198>
 800793a:	2340      	movs	r3, #64	; 0x40
 800793c:	eba0 000a 	sub.w	r0, r0, sl
 8007940:	fa03 f000 	lsl.w	r0, r3, r0
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	4303      	orrs	r3, r0
 8007948:	3401      	adds	r4, #1
 800794a:	9304      	str	r3, [sp, #16]
 800794c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007950:	482c      	ldr	r0, [pc, #176]	; (8007a04 <_vfiprintf_r+0x250>)
 8007952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007956:	2206      	movs	r2, #6
 8007958:	f7f8 fc12 	bl	8000180 <memchr>
 800795c:	2800      	cmp	r0, #0
 800795e:	d03f      	beq.n	80079e0 <_vfiprintf_r+0x22c>
 8007960:	4b29      	ldr	r3, [pc, #164]	; (8007a08 <_vfiprintf_r+0x254>)
 8007962:	bb1b      	cbnz	r3, 80079ac <_vfiprintf_r+0x1f8>
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	3307      	adds	r3, #7
 8007968:	f023 0307 	bic.w	r3, r3, #7
 800796c:	3308      	adds	r3, #8
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007972:	443b      	add	r3, r7
 8007974:	9309      	str	r3, [sp, #36]	; 0x24
 8007976:	e767      	b.n	8007848 <_vfiprintf_r+0x94>
 8007978:	fb0c 3202 	mla	r2, ip, r2, r3
 800797c:	460c      	mov	r4, r1
 800797e:	2001      	movs	r0, #1
 8007980:	e7a5      	b.n	80078ce <_vfiprintf_r+0x11a>
 8007982:	2300      	movs	r3, #0
 8007984:	3401      	adds	r4, #1
 8007986:	9305      	str	r3, [sp, #20]
 8007988:	4619      	mov	r1, r3
 800798a:	f04f 0c0a 	mov.w	ip, #10
 800798e:	4620      	mov	r0, r4
 8007990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007994:	3a30      	subs	r2, #48	; 0x30
 8007996:	2a09      	cmp	r2, #9
 8007998:	d903      	bls.n	80079a2 <_vfiprintf_r+0x1ee>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0c5      	beq.n	800792a <_vfiprintf_r+0x176>
 800799e:	9105      	str	r1, [sp, #20]
 80079a0:	e7c3      	b.n	800792a <_vfiprintf_r+0x176>
 80079a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80079a6:	4604      	mov	r4, r0
 80079a8:	2301      	movs	r3, #1
 80079aa:	e7f0      	b.n	800798e <_vfiprintf_r+0x1da>
 80079ac:	ab03      	add	r3, sp, #12
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	462a      	mov	r2, r5
 80079b2:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <_vfiprintf_r+0x258>)
 80079b4:	a904      	add	r1, sp, #16
 80079b6:	4630      	mov	r0, r6
 80079b8:	f7fd ff20 	bl	80057fc <_printf_float>
 80079bc:	4607      	mov	r7, r0
 80079be:	1c78      	adds	r0, r7, #1
 80079c0:	d1d6      	bne.n	8007970 <_vfiprintf_r+0x1bc>
 80079c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079c4:	07d9      	lsls	r1, r3, #31
 80079c6:	d405      	bmi.n	80079d4 <_vfiprintf_r+0x220>
 80079c8:	89ab      	ldrh	r3, [r5, #12]
 80079ca:	059a      	lsls	r2, r3, #22
 80079cc:	d402      	bmi.n	80079d4 <_vfiprintf_r+0x220>
 80079ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d0:	f7fd fd08 	bl	80053e4 <__retarget_lock_release_recursive>
 80079d4:	89ab      	ldrh	r3, [r5, #12]
 80079d6:	065b      	lsls	r3, r3, #25
 80079d8:	f53f af12 	bmi.w	8007800 <_vfiprintf_r+0x4c>
 80079dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079de:	e711      	b.n	8007804 <_vfiprintf_r+0x50>
 80079e0:	ab03      	add	r3, sp, #12
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	462a      	mov	r2, r5
 80079e6:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <_vfiprintf_r+0x258>)
 80079e8:	a904      	add	r1, sp, #16
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7fe f9aa 	bl	8005d44 <_printf_i>
 80079f0:	e7e4      	b.n	80079bc <_vfiprintf_r+0x208>
 80079f2:	bf00      	nop
 80079f4:	08007e50 	.word	0x08007e50
 80079f8:	08007e70 	.word	0x08007e70
 80079fc:	08007e30 	.word	0x08007e30
 8007a00:	080081fc 	.word	0x080081fc
 8007a04:	08008206 	.word	0x08008206
 8007a08:	080057fd 	.word	0x080057fd
 8007a0c:	0800778f 	.word	0x0800778f
 8007a10:	08008202 	.word	0x08008202

08007a14 <_read_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d07      	ldr	r5, [pc, #28]	; (8007a34 <_read_r+0x20>)
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f7f9 fcc2 	bl	80013ac <_read>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_read_r+0x1e>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_read_r+0x1e>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	200002cc 	.word	0x200002cc

08007a38 <__ascii_wctomb>:
 8007a38:	b149      	cbz	r1, 8007a4e <__ascii_wctomb+0x16>
 8007a3a:	2aff      	cmp	r2, #255	; 0xff
 8007a3c:	bf85      	ittet	hi
 8007a3e:	238a      	movhi	r3, #138	; 0x8a
 8007a40:	6003      	strhi	r3, [r0, #0]
 8007a42:	700a      	strbls	r2, [r1, #0]
 8007a44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007a48:	bf98      	it	ls
 8007a4a:	2001      	movls	r0, #1
 8007a4c:	4770      	bx	lr
 8007a4e:	4608      	mov	r0, r1
 8007a50:	4770      	bx	lr

08007a52 <abort>:
 8007a52:	b508      	push	{r3, lr}
 8007a54:	2006      	movs	r0, #6
 8007a56:	f000 f82b 	bl	8007ab0 <raise>
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	f7f9 fc9c 	bl	8001398 <_exit>

08007a60 <_raise_r>:
 8007a60:	291f      	cmp	r1, #31
 8007a62:	b538      	push	{r3, r4, r5, lr}
 8007a64:	4604      	mov	r4, r0
 8007a66:	460d      	mov	r5, r1
 8007a68:	d904      	bls.n	8007a74 <_raise_r+0x14>
 8007a6a:	2316      	movs	r3, #22
 8007a6c:	6003      	str	r3, [r0, #0]
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a76:	b112      	cbz	r2, 8007a7e <_raise_r+0x1e>
 8007a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a7c:	b94b      	cbnz	r3, 8007a92 <_raise_r+0x32>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 f830 	bl	8007ae4 <_getpid_r>
 8007a84:	462a      	mov	r2, r5
 8007a86:	4601      	mov	r1, r0
 8007a88:	4620      	mov	r0, r4
 8007a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a8e:	f000 b817 	b.w	8007ac0 <_kill_r>
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d00a      	beq.n	8007aac <_raise_r+0x4c>
 8007a96:	1c59      	adds	r1, r3, #1
 8007a98:	d103      	bne.n	8007aa2 <_raise_r+0x42>
 8007a9a:	2316      	movs	r3, #22
 8007a9c:	6003      	str	r3, [r0, #0]
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	e7e7      	b.n	8007a72 <_raise_r+0x12>
 8007aa2:	2400      	movs	r4, #0
 8007aa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	4798      	blx	r3
 8007aac:	2000      	movs	r0, #0
 8007aae:	e7e0      	b.n	8007a72 <_raise_r+0x12>

08007ab0 <raise>:
 8007ab0:	4b02      	ldr	r3, [pc, #8]	; (8007abc <raise+0xc>)
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	f7ff bfd3 	b.w	8007a60 <_raise_r>
 8007aba:	bf00      	nop
 8007abc:	20000018 	.word	0x20000018

08007ac0 <_kill_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d07      	ldr	r5, [pc, #28]	; (8007ae0 <_kill_r+0x20>)
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	4611      	mov	r1, r2
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	f7f9 fc53 	bl	8001378 <_kill>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	d102      	bne.n	8007adc <_kill_r+0x1c>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	b103      	cbz	r3, 8007adc <_kill_r+0x1c>
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	bd38      	pop	{r3, r4, r5, pc}
 8007ade:	bf00      	nop
 8007ae0:	200002cc 	.word	0x200002cc

08007ae4 <_getpid_r>:
 8007ae4:	f7f9 bc40 	b.w	8001368 <_getpid>

08007ae8 <_init>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	bf00      	nop
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr

08007af4 <_fini>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	bf00      	nop
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr
