
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d24  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000008  08006060  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000418  20000080  080060d8  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000498  080060d8  00020498  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   000178ac  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002e72  00000000  00000000  0003795c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a98  00000000  00000000  0003a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001950  00000000  00000000  0003c268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024228  00000000  00000000  0003dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016b2e  00000000  00000000  00061de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e8acf  00000000  00000000  0007890e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001613dd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000078bc  00000000  00000000  00161430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08005e4c 	.word	0x08005e4c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08005e4c 	.word	0x08005e4c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000230:	f023 0218 	bic.w	r2, r3, #24
 8000234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000270:	68fb      	ldr	r3, [r7, #12]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <recieve16Bit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool recieve16Bit(uint16_t *read_to){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	if(HAL_SPI_Receive(&hspi1, (uint8_t*)read_to, 2, 10) == HAL_OK) {
 8000288:	230a      	movs	r3, #10
 800028a:	2202      	movs	r2, #2
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <recieve16Bit+0x28>)
 8000290:	f003 fe19 	bl	8003ec6 <HAL_SPI_Receive>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <recieve16Bit+0x1e>
		return true;
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <recieve16Bit+0x20>
	}

	return false;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	200000c0 	.word	0x200000c0

080002ac <send16Bit>:

_Bool send16Bit(uint16_t *send){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2,10) == HAL_OK){
 80002b4:	230a      	movs	r3, #10
 80002b6:	2202      	movs	r2, #2
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <send16Bit+0x28>)
 80002bc:	f003 fc95 	bl	8003bea <HAL_SPI_Transmit>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <send16Bit+0x1e>
		return true;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <send16Bit+0x20>

	}
	return false;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000c0 	.word	0x200000c0

080002d8 <getStartInput>:

void getStartInput(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	uint8_t header;
		  HAL_StatusTypeDef receive_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80002de:	1db9      	adds	r1, r7, #6
 80002e0:	230a      	movs	r3, #10
 80002e2:	2201      	movs	r2, #1
 80002e4:	4825      	ldr	r0, [pc, #148]	; (800037c <getStartInput+0xa4>)
 80002e6:	f003 fdee 	bl	8003ec6 <HAL_SPI_Receive>
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
		  if(receive_status == HAL_OK) {
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d130      	bne.n	8000356 <getStartInput+0x7e>
			  switch((Header)header) {
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d020      	beq.n	800033c <getStartInput+0x64>
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	dc32      	bgt.n	8000364 <getStartInput+0x8c>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d002      	beq.n	8000308 <getStartInput+0x30>
 8000302:	2b02      	cmp	r3, #2
 8000304:	d00d      	beq.n	8000322 <getStartInput+0x4a>
 8000306:	e02d      	b.n	8000364 <getStartInput+0x8c>
			  	  case SLEEP_TIME:
			  		  if(!recieve16Bit(&sleep_time)) {
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <getStartInput+0xa8>)
 800030a:	f7ff ffb9 	bl	8000280 <recieve16Bit>
 800030e:	4603      	mov	r3, r0
 8000310:	f083 0301 	eor.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d01f      	beq.n	800035a <getStartInput+0x82>
			  			  printf("ERROR COULD NOT RECIEVE SLEEP TIME");
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <getStartInput+0xac>)
 800031c:	f005 f908 	bl	8005530 <iprintf>
			  		  	  }
					  break;
 8000320:	e01b      	b.n	800035a <getStartInput+0x82>
				  case RUN_AMOUNT:
					  if(!recieve16Bit(&max_amount_of_runs)){
 8000322:	4819      	ldr	r0, [pc, #100]	; (8000388 <getStartInput+0xb0>)
 8000324:	f7ff ffac 	bl	8000280 <recieve16Bit>
 8000328:	4603      	mov	r3, r0
 800032a:	f083 0301 	eor.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d014      	beq.n	800035e <getStartInput+0x86>
						  printf("ERROR COULD NOT RECIEVE AMOUNT OF RUNS");
 8000334:	4815      	ldr	r0, [pc, #84]	; (800038c <getStartInput+0xb4>)
 8000336:	f005 f8fb 	bl	8005530 <iprintf>
					  }

					  break;
 800033a:	e010      	b.n	800035e <getStartInput+0x86>
				  case TEST_MODE:
					  if(!recieve16Bit(&test_mode)){
 800033c:	4814      	ldr	r0, [pc, #80]	; (8000390 <getStartInput+0xb8>)
 800033e:	f7ff ff9f 	bl	8000280 <recieve16Bit>
 8000342:	4603      	mov	r3, r0
 8000344:	f083 0301 	eor.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d009      	beq.n	8000362 <getStartInput+0x8a>
						  printf("TEST MODE COULD NOT BE RECIEVED");
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <getStartInput+0xbc>)
 8000350:	f005 f8ee 	bl	8005530 <iprintf>
					  }
					  break;
 8000354:	e005      	b.n	8000362 <getStartInput+0x8a>
				  }
		  }
 8000356:	bf00      	nop
 8000358:	e004      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <getStartInput+0x8c>
					  break;
 8000362:	bf00      	nop
		  if(test_mode != 2){
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <getStartInput+0xb8>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d002      	beq.n	8000372 <getStartInput+0x9a>
			  test_input_set = true;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <getStartInput+0xc0>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		  }
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200000c0 	.word	0x200000c0
 8000380:	2000047a 	.word	0x2000047a
 8000384:	08005e64 	.word	0x08005e64
 8000388:	2000047c 	.word	0x2000047c
 800038c:	08005e88 	.word	0x08005e88
 8000390:	20000008 	.word	0x20000008
 8000394:	08005eb0 	.word	0x08005eb0
 8000398:	2000047e 	.word	0x2000047e

0800039c <sendTestData>:
void sendTestData(uint32_t *times){
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	82fb      	strh	r3, [r7, #22]
	uint16_t bajs = 10;
 80003a8:	230a      	movs	r3, #10
 80003aa:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	481e      	ldr	r0, [pc, #120]	; (800042c <sendTestData+0x90>)
 80003b2:	f001 fa13 	bl	80017dc <HAL_GPIO_WritePin>
	while(index < max_amount_of_runs){
 80003b6:	e02b      	b.n	8000410 <sendTestData+0x74>
		uint8_t header;
		uint32_t *ptr = &times[index];
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	613b      	str	r3, [r7, #16]
		uint16_t value = *((uint16_t*)ptr);
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	81bb      	strh	r3, [r7, #12]
		HAL_StatusTypeDef recieve_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80003c8:	f107 010e 	add.w	r1, r7, #14
 80003cc:	230a      	movs	r3, #10
 80003ce:	2201      	movs	r2, #1
 80003d0:	4817      	ldr	r0, [pc, #92]	; (8000430 <sendTestData+0x94>)
 80003d2:	f003 fd78 	bl	8003ec6 <HAL_SPI_Receive>
 80003d6:	4603      	mov	r3, r0
 80003d8:	73fb      	strb	r3, [r7, #15]
		if(recieve_status == HAL_OK){
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d117      	bne.n	8000410 <sendTestData+0x74>
			if(header == 4){
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	2b04      	cmp	r3, #4
 80003e4:	d111      	bne.n	800040a <sendTestData+0x6e>
				if(!send16Bit(&value)){
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff5e 	bl	80002ac <send16Bit>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f083 0301 	eor.w	r3, r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d002      	beq.n	8000402 <sendTestData+0x66>
					printf("COULD NOT SEND DATA");
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <sendTestData+0x98>)
 80003fe:	f005 f897 	bl	8005530 <iprintf>
				}
				index++;
 8000402:	8afb      	ldrh	r3, [r7, #22]
 8000404:	3301      	adds	r3, #1
 8000406:	82fb      	strh	r3, [r7, #22]
 8000408:	e002      	b.n	8000410 <sendTestData+0x74>
			}
			else{
				printf("STUB");
 800040a:	480b      	ldr	r0, [pc, #44]	; (8000438 <sendTestData+0x9c>)
 800040c:	f005 f890 	bl	8005530 <iprintf>
	while(index < max_amount_of_runs){
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <sendTestData+0xa0>)
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	8afa      	ldrh	r2, [r7, #22]
 8000416:	429a      	cmp	r2, r3
 8000418:	d3ce      	bcc.n	80003b8 <sendTestData+0x1c>
			}
		}
	}
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2110      	movs	r1, #16
 800041e:	4803      	ldr	r0, [pc, #12]	; (800042c <sendTestData+0x90>)
 8000420:	f001 f9dc 	bl	80017dc <HAL_GPIO_WritePin>
}
 8000424:	bf00      	nop
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	48000400 	.word	0x48000400
 8000430:	200000c0 	.word	0x200000c0
 8000434:	08005ed0 	.word	0x08005ed0
 8000438:	08005ee4 	.word	0x08005ee4
 800043c:	2000047c 	.word	0x2000047c

08000440 <sendData>:

void sendData(uint32_t *data){
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

		for(int i = 0; i < max_amount_of_runs; i++){
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	e00f      	b.n	800046e <sendData+0x2e>
			uint32_t *ptr = &data[i];
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
			uint16_t value = *((uint16_t*)ptr);
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	81fb      	strh	r3, [r7, #14]
			send16Bit(&value);
 800045e:	f107 030e 	add.w	r3, r7, #14
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff22 	bl	80002ac <send16Bit>
		for(int i = 0; i < max_amount_of_runs; i++){
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3301      	adds	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <sendData+0x44>)
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	461a      	mov	r2, r3
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	4293      	cmp	r3, r2
 8000478:	dbe9      	blt.n	800044e <sendData+0xe>

	}
}
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	2000047c 	.word	0x2000047c

08000488 <calculateTestTimes>:

void calculateTestTimes(struct TimeCapture *data, uint32_t *times){
 8000488:	b480      	push	{r7}
 800048a:	b08b      	sub	sp, #44	; 0x2c
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 8000492:	2300      	movs	r3, #0
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
 8000496:	e027      	b.n	80004e8 <calculateTestTimes+0x60>
		struct TimeCapture *time_ptr = &data[i];
 8000498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	4413      	add	r3, r2
 80004a0:	623b      	str	r3, [r7, #32]
		uint32_t *ptr = &times[i];
 80004a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	4413      	add	r3, r2
 80004aa:	61fb      	str	r3, [r7, #28]
		uint32_t start_time = time_ptr->startTime;
 80004ac:	6a3b      	ldr	r3, [r7, #32]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	61bb      	str	r3, [r7, #24]
		uint32_t end_time = time_ptr->endTime;
 80004b2:	6a3b      	ldr	r3, [r7, #32]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	617b      	str	r3, [r7, #20]
		uint32_t full_time = end_time - start_time;
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	613b      	str	r3, [r7, #16]
		uint32_t wake_up_time = full_time - (sleep_time * 1000);
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <calculateTestTimes+0x7c>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ca:	fb02 f303 	mul.w	r3, r2, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	693b      	ldr	r3, [r7, #16]
 80004d2:	1a9b      	subs	r3, r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
		debug_value = full_time;
 80004d6:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <calculateTestTimes+0x80>)
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	6013      	str	r3, [r2, #0]
		*ptr = wake_up_time;
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 80004e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e4:	3301      	adds	r3, #1
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <calculateTestTimes+0x84>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f0:	4293      	cmp	r3, r2
 80004f2:	dbd1      	blt.n	8000498 <calculateTestTimes+0x10>
	}
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	372c      	adds	r7, #44	; 0x2c
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000047a 	.word	0x2000047a
 8000508:	2000000c 	.word	0x2000000c
 800050c:	2000047c 	.word	0x2000047c

08000510 <sendInterrupt>:

void sendInterrupt(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2102      	movs	r1, #2
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <sendInterrupt+0x1c>)
 800051a:	f001 f95f 	bl	80017dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2102      	movs	r1, #2
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <sendInterrupt+0x1c>)
 8000524:	f001 f95a 	bl	80017dc <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	48000800 	.word	0x48000800

08000530 <testUsingInterrupts>:

void testUsingInterrupts(struct TimeCapture *times){
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	_Bool interrupt_sent = false;
 8000538:	2300      	movs	r3, #0
 800053a:	75fb      	strb	r3, [r7, #23]
	int i = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
	while(run_test){
 8000540:	e02b      	b.n	800059a <testUsingInterrupts+0x6a>
		struct TimeCapture *time_ptr = &times[i];
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	60fb      	str	r3, [r7, #12]
		if(!interrupt_sent){
 800054c:	7dfb      	ldrb	r3, [r7, #23]
 800054e:	f083 0301 	eor.w	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d013      	beq.n	8000580 <testUsingInterrupts+0x50>
			sendInterrupt();
 8000558:	f7ff ffda 	bl	8000510 <sendInterrupt>
			time_ptr->startTime = __HAL_TIM_GET_COUNTER(&htim2);
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <testUsingInterrupts+0x7c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	601a      	str	r2, [r3, #0]
			interrupt_sent = true;
 8000566:	2301      	movs	r3, #1
 8000568:	75fb      	strb	r3, [r7, #23]
			captures++;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <testUsingInterrupts+0x80>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	b29a      	uxth	r2, r3
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <testUsingInterrupts+0x80>)
 8000574:	801a      	strh	r2, [r3, #0]
		}
		while(!timeBuffReady)
 8000576:	e003      	b.n	8000580 <testUsingInterrupts+0x50>
		time_ptr->endTime = timeBuff.endTime;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <testUsingInterrupts+0x84>)
 800057a:	685a      	ldr	r2, [r3, #4]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	605a      	str	r2, [r3, #4]
		while(!timeBuffReady)
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <testUsingInterrupts+0x88>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	f083 0301 	eor.w	r3, r3, #1
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f4      	bne.n	8000578 <testUsingInterrupts+0x48>
		timeBuffReady = false;
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <testUsingInterrupts+0x88>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
		i++;
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	3301      	adds	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
	while(run_test){
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <testUsingInterrupts+0x8c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1cf      	bne.n	8000542 <testUsingInterrupts+0x12>
	}

}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000124 	.word	0x20000124
 80005b0:	20000464 	.word	0x20000464
 80005b4:	20000468 	.word	0x20000468
 80005b8:	20000478 	.word	0x20000478
 80005bc:	20000479 	.word	0x20000479

080005c0 <testUsingIntervals>:

void testUsingIntervals(struct TimeCapture *times){
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
	while(run_test){
 80005cc:	e02f      	b.n	800062e <testUsingIntervals+0x6e>
		struct TimeCapture *time_ptr = &times[i];
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
		while(!timeBuffReady);
 80005d8:	bf00      	nop
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <testUsingIntervals+0x84>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	f083 0301 	eor.w	r3, r3, #1
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1f8      	bne.n	80005da <testUsingIntervals+0x1a>
		*time_ptr = timeBuff;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <testUsingIntervals+0x88>)
 80005ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f0:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3301      	adds	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
		lastBuff = timeBuff;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <testUsingIntervals+0x8c>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <testUsingIntervals+0x88>)
 80005fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000602:	e883 0003 	stmia.w	r3, {r0, r1}
		timeBuff.startTime = 0;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <testUsingIntervals+0x88>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <testUsingIntervals+0x88>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <testUsingIntervals+0x84>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <testUsingIntervals+0x90>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <testUsingIntervals+0x94>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	429a      	cmp	r2, r3
 8000626:	d102      	bne.n	800062e <testUsingIntervals+0x6e>
			run_test = false;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <testUsingIntervals+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	while(run_test){
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <testUsingIntervals+0x98>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1cb      	bne.n	80005ce <testUsingIntervals+0xe>
		}

	}
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	20000478 	.word	0x20000478
 8000648:	20000468 	.word	0x20000468
 800064c:	20000470 	.word	0x20000470
 8000650:	20000464 	.word	0x20000464
 8000654:	2000047c 	.word	0x2000047c
 8000658:	20000479 	.word	0x20000479

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000660:	b091      	sub	sp, #68	; 0x44
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 fdb4 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f8d8 	bl	800081c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800066c:	f000 f94e 	bl	800090c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 fa76 	bl	8000b60 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000674:	f000 fa4c 	bl	8000b10 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000678:	f000 f9fc 	bl	8000a74 <MX_TIM2_Init>
  MX_SPI1_Init();
 800067c:	f000 f9c2 	bl	8000a04 <MX_SPI1_Init>
  MX_RTC_Init();
 8000680:	f000 f962 	bl	8000948 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000684:	4860      	ldr	r0, [pc, #384]	; (8000808 <main+0x1ac>)
 8000686:	f004 f975 	bl	8004974 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!test_input_set){
 800068a:	4b60      	ldr	r3, [pc, #384]	; (800080c <main+0x1b0>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	f083 0301 	eor.w	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <main+0x42>
	 	  	  getStartInput();
 8000698:	f7ff fe1e 	bl	80002d8 <getStartInput>
 800069c:	e7f5      	b.n	800068a <main+0x2e>
	 	  }
	 	  else{
 800069e:	466b      	mov	r3, sp
 80006a0:	607b      	str	r3, [r7, #4]
	 		  struct TimeCapture times[max_amount_of_runs];
 80006a2:	4b5b      	ldr	r3, [pc, #364]	; (8000810 <main+0x1b4>)
 80006a4:	8819      	ldrh	r1, [r3, #0]
 80006a6:	460b      	mov	r3, r1
 80006a8:	3b01      	subs	r3, #1
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006ac:	b28b      	uxth	r3, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	461c      	mov	r4, r3
 80006b2:	4615      	mov	r5, r2
 80006b4:	f04f 0200 	mov.w	r2, #0
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	01ab      	lsls	r3, r5, #6
 80006be:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80006c2:	01a2      	lsls	r2, r4, #6
 80006c4:	b28b      	uxth	r3, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	4698      	mov	r8, r3
 80006ca:	4691      	mov	r9, r2
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80006d8:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80006dc:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80006e0:	460b      	mov	r3, r1
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	3307      	adds	r3, #7
 80006e6:	08db      	lsrs	r3, r3, #3
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	ebad 0d03 	sub.w	sp, sp, r3
 80006ee:	466b      	mov	r3, sp
 80006f0:	3303      	adds	r3, #3
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
	 		  if(test_mode == 1){
 80006f8:	4b46      	ldr	r3, [pc, #280]	; (8000814 <main+0x1b8>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d13e      	bne.n	800077e <main+0x122>
 8000700:	466b      	mov	r3, sp
 8000702:	461e      	mov	r6, r3
	 			  // RUN TESTS USING ITERRUPTS
	 			  run_test = true;
 8000704:	4a44      	ldr	r2, [pc, #272]	; (8000818 <main+0x1bc>)
 8000706:	2301      	movs	r3, #1
 8000708:	7013      	strb	r3, [r2, #0]
	 			  testUsingInterrupts(times);
 800070a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800070c:	f7ff ff10 	bl	8000530 <testUsingInterrupts>
	 			  uint32_t test_times[max_amount_of_runs];
 8000710:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <main+0x1b4>)
 8000712:	8819      	ldrh	r1, [r3, #0]
 8000714:	460b      	mov	r3, r1
 8000716:	3b01      	subs	r3, #1
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
 800071a:	b28b      	uxth	r3, r1
 800071c:	2200      	movs	r2, #0
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	61fa      	str	r2, [r7, #28]
 8000722:	f04f 0200 	mov.w	r2, #0
 8000726:	f04f 0300 	mov.w	r3, #0
 800072a:	69f8      	ldr	r0, [r7, #28]
 800072c:	0143      	lsls	r3, r0, #5
 800072e:	69b8      	ldr	r0, [r7, #24]
 8000730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000734:	69b8      	ldr	r0, [r7, #24]
 8000736:	0142      	lsls	r2, r0, #5
 8000738:	b28b      	uxth	r3, r1
 800073a:	2200      	movs	r2, #0
 800073c:	469a      	mov	sl, r3
 800073e:	4693      	mov	fp, r2
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800074c:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000750:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000754:	460b      	mov	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	3307      	adds	r3, #7
 800075a:	08db      	lsrs	r3, r3, #3
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	ebad 0d03 	sub.w	sp, sp, r3
 8000762:	466b      	mov	r3, sp
 8000764:	3303      	adds	r3, #3
 8000766:	089b      	lsrs	r3, r3, #2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
	 			  calculateTestTimes(times,test_times);
 800076c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800076e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000770:	f7ff fe8a 	bl	8000488 <calculateTestTimes>
	 			  sendData(test_times);
 8000774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000776:	f7ff fe63 	bl	8000440 <sendData>
 800077a:	46b5      	mov	sp, r6
 800077c:	e041      	b.n	8000802 <main+0x1a6>
	 		  }
	 		  else{
 800077e:	466b      	mov	r3, sp
 8000780:	461e      	mov	r6, r3
	 			  run_test = true;
 8000782:	4a25      	ldr	r2, [pc, #148]	; (8000818 <main+0x1bc>)
 8000784:	2301      	movs	r3, #1
 8000786:	7013      	strb	r3, [r2, #0]
	 			  testUsingIntervals(times);
 8000788:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800078a:	f7ff ff19 	bl	80005c0 <testUsingIntervals>
	 			  uint32_t test_times[max_amount_of_runs];
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <main+0x1b4>)
 8000790:	8819      	ldrh	r1, [r3, #0]
 8000792:	460b      	mov	r3, r1
 8000794:	3b01      	subs	r3, #1
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
 8000798:	b28b      	uxth	r3, r1
 800079a:	2200      	movs	r2, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	617a      	str	r2, [r7, #20]
 80007a0:	f04f 0200 	mov.w	r2, #0
 80007a4:	f04f 0300 	mov.w	r3, #0
 80007a8:	6978      	ldr	r0, [r7, #20]
 80007aa:	0143      	lsls	r3, r0, #5
 80007ac:	6938      	ldr	r0, [r7, #16]
 80007ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007b2:	6938      	ldr	r0, [r7, #16]
 80007b4:	0142      	lsls	r2, r0, #5
 80007b6:	b28b      	uxth	r3, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	60fa      	str	r2, [r7, #12]
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	f04f 0300 	mov.w	r3, #0
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	0143      	lsls	r3, r0, #5
 80007ca:	68b8      	ldr	r0, [r7, #8]
 80007cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007d0:	68b8      	ldr	r0, [r7, #8]
 80007d2:	0142      	lsls	r2, r0, #5
 80007d4:	460b      	mov	r3, r1
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	3307      	adds	r3, #7
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	ebad 0d03 	sub.w	sp, sp, r3
 80007e2:	466b      	mov	r3, sp
 80007e4:	3303      	adds	r3, #3
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
	 			  calculateTestTimes(times, test_times);
 80007ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80007ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80007f0:	f7ff fe4a 	bl	8000488 <calculateTestTimes>
	 			  sendTestData(test_times);
 80007f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007f6:	f7ff fdd1 	bl	800039c <sendTestData>
	 			  int bajs = 10000;
 80007fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000800:	46b5      	mov	sp, r6
 8000802:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  if(!test_input_set){
 8000806:	e740      	b.n	800068a <main+0x2e>
 8000808:	20000124 	.word	0x20000124
 800080c:	2000047e 	.word	0x2000047e
 8000810:	2000047c 	.word	0x2000047c
 8000814:	20000008 	.word	0x20000008
 8000818:	20000479 	.word	0x20000479

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09a      	sub	sp, #104	; 0x68
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2248      	movs	r2, #72	; 0x48
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fd98 	bl	8005360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
 800083e:	615a      	str	r2, [r3, #20]
 8000840:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800084c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000850:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	f023 0303 	bic.w	r3, r3, #3
 800085c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000866:	f001 f8ed 	bl	8001a44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fcd8 	bl	8000220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <SystemClock_Config+0xec>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000878:	4a23      	ldr	r2, [pc, #140]	; (8000908 <SystemClock_Config+0xec>)
 800087a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <SystemClock_Config+0xec>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800088c:	232f      	movs	r3, #47	; 0x2f
 800088e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ac:	2360      	movs	r3, #96	; 0x60
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008b0:	2305      	movs	r3, #5
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fc3d 	bl	800213c <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008c8:	f000 f9f8 	bl	8000cbc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008cc:	236f      	movs	r3, #111	; 0x6f
 80008ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008d0:	2302      	movs	r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 ff99 	bl	8002824 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80008f8:	f000 f9e0 	bl	8000cbc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008fc:	f002 fd28 	bl	8003350 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000900:	bf00      	nop
 8000902:	3768      	adds	r7, #104	; 0x68
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	58000400 	.word	0x58000400

0800090c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b094      	sub	sp, #80	; 0x50
 8000910:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2250      	movs	r2, #80	; 0x50
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f004 fd21 	bl	8005360 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800091e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000922:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000928:	2300      	movs	r3, #0
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fb98 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800093a:	f000 f9bf 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	; 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_RTC_Init+0xb4>)
 8000962:	4a27      	ldr	r2, [pc, #156]	; (8000a00 <MX_RTC_Init+0xb8>)
 8000964:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_RTC_Init+0xb4>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_RTC_Init+0xb4>)
 800096e:	227f      	movs	r2, #127	; 0x7f
 8000970:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_RTC_Init+0xb4>)
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_RTC_Init+0xb4>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_RTC_Init+0xb4>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_RTC_Init+0xb4>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_RTC_Init+0xb4>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000990:	481a      	ldr	r0, [pc, #104]	; (80009fc <MX_RTC_Init+0xb4>)
 8000992:	f002 fdf5 	bl	8003580 <HAL_RTC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800099c:	f000 f98e 	bl	8000cbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	480f      	ldr	r0, [pc, #60]	; (80009fc <MX_RTC_Init+0xb4>)
 80009c0:	f002 fe8e 	bl	80036e0 <HAL_RTC_SetTime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80009ca:	f000 f977 	bl	8000cbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009ce:	2301      	movs	r3, #1
 80009d0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009d2:	2301      	movs	r3, #1
 80009d4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80009da:	2300      	movs	r3, #0
 80009dc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	2201      	movs	r2, #1
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_RTC_Init+0xb4>)
 80009e6:	f002 ff3f 	bl	8003868 <HAL_RTC_SetDate>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 80009f0:	f000 f964 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000009c 	.word	0x2000009c
 8000a00:	40002800 	.word	0x40002800

08000a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a0a:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <MX_SPI1_Init+0x6c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a5a:	f003 f823 	bl	8003aa4 <HAL_SPI_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a64:	f000 f92a 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000c0 	.word	0x200000c0
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000a9c:	221f      	movs	r2, #31
 8000a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aba:	4814      	ldr	r0, [pc, #80]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000abc:	f003 ff02 	bl	80048c4 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ac6:	f000 f8f9 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000ad8:	f003 ff92 	bl	8004a00 <HAL_TIM_ConfigClockSource>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ae2:	f000 f8eb 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000af4:	f004 f94e 	bl	8004d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000afe:	f000 f8dd 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000124 	.word	0x20000124

08000b10 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b16:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <MX_USB_PCD_Init+0x4c>)
 8000b18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b22:	2202      	movs	r2, #2
 8000b24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b46:	f000 fe79 	bl	800183c <HAL_PCD_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b50:	f000 f8b4 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000170 	.word	0x20000170
 8000b5c:	40006800 	.word	0x40006800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	2004      	movs	r0, #4
 8000b76:	f7ff fb69 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fb66 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff fb63 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	2008      	movs	r0, #8
 8000b88:	f7ff fb60 	bl	800024c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4822      	ldr	r0, [pc, #136]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000b92:	f000 fe23 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2133      	movs	r1, #51	; 0x33
 8000b9a:	4821      	ldr	r0, [pc, #132]	; (8000c20 <MX_GPIO_Init+0xc0>)
 8000b9c:	f000 fe1e 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_INPUT_Pin */
  GPIO_InitStruct.Pin = TEST_INPUT_Pin;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000baa:	2302      	movs	r3, #2
 8000bac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEST_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481a      	ldr	r0, [pc, #104]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bb4:	f000 fca2 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupter_Pin */
  GPIO_InitStruct.Pin = Interrupter_Pin;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Interrupter_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bce:	f000 fc95 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TransmitReady_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin;
 8000bd2:	2333      	movs	r3, #51	; 0x33
 8000bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <MX_GPIO_Init+0xc0>)
 8000be8:	f000 fc88 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000bec:	2303      	movs	r3, #3
 8000bee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <MX_GPIO_Init+0xc4>)
 8000bfe:	f000 fc7d 	bl	80014fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2006      	movs	r0, #6
 8000c08:	f000 fc43 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c0c:	2006      	movs	r0, #6
 8000c0e:	f000 fc5a 	bl	80014c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	48000800 	.word	0x48000800
 8000c20:	48000400 	.word	0x48000400
 8000c24:	48000c00 	.word	0x48000c00

08000c28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == TEST_INPUT_Pin){
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_EXTI_Callback+0x72>
		if(captures%2 == 0){
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d113      	bne.n	8000c6e <HAL_GPIO_EXTI_Callback+0x46>
			timeBuff.startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_GPIO_EXTI_Callback+0x84>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c4e:	6013      	str	r3, [r2, #0]
			if(captures  < max_amount_of_runs*2){
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	da1c      	bge.n	8000c9a <HAL_GPIO_EXTI_Callback+0x72>
			captures++;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c6a:	801a      	strh	r2, [r3, #0]
		}


	}

}
 8000c6c:	e015      	b.n	8000c9a <HAL_GPIO_EXTI_Callback+0x72>
			timeBuff.endTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_GPIO_EXTI_Callback+0x84>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c76:	6053      	str	r3, [r2, #4]
			timeBuffReady = true;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
			if(captures < max_amount_of_runs*2){
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	da05      	bge.n	8000c9a <HAL_GPIO_EXTI_Callback+0x72>
				captures++;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c98:	801a      	strh	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000464 	.word	0x20000464
 8000cac:	20000124 	.word	0x20000124
 8000cb0:	20000468 	.word	0x20000468
 8000cb4:	2000047c 	.word	0x2000047c
 8000cb8:	20000478 	.word	0x20000478

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>

08000cc6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_AHB2_GRP1_EnableClock>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b096      	sub	sp, #88	; 0x58
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2250      	movs	r2, #80	; 0x50
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 fadf 	bl	8005360 <memset>
  if(hrtc->Instance==RTC)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_RTC_MspInit+0x54>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d115      	bne.n	8000dd8 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 f951 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000dc8:	f7ff ff78 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dcc:	f7ff ff7b 	bl	8000cc6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000dd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000dd4:	f7ff ffa1 	bl	8000d1a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3758      	adds	r7, #88	; 0x58
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40002800 	.word	0x40002800

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_SPI_MspInit+0x5c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d117      	bne.n	8000e36 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e0a:	f7ff ff9f 	bl	8000d4c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff ff6a 	bl	8000ce8 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e14:	23f0      	movs	r3, #240	; 0xf0
 8000e16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e24:	2305      	movs	r3, #5
 8000e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f000 fb63 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40013000 	.word	0x40013000

08000e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e54:	d102      	bne.n	8000e5c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff ff5f 	bl	8000d1a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09c      	sub	sp, #112	; 0x70
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2250      	movs	r2, #80	; 0x50
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 fa6b 	bl	8005360 <memset>
  if(hpcd->Instance==USB)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_PCD_MspInit+0xa8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d136      	bne.n	8000f02 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e98:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000e9a:	2318      	movs	r3, #24
 8000e9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ea8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000eaa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000eae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000eb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 f8cf 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000ecc:	f7ff fef6 	bl	8000cbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff ff09 	bl	8000ce8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ed6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eda:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f000 fb01 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000efa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000efe:	f7ff ff0c 	bl	8000d1a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3770      	adds	r7, #112	; 0x70
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40006800 	.word	0x40006800

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f992 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEST_INPUT_Pin);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f000 fc4f 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e00a      	b.n	8000f9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f84:	f3af 8000 	nop.w
 8000f88:	4601      	mov	r1, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	b2ca      	uxtb	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbf0      	blt.n	8000f84 <_read+0x12>
  }

  return len;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e009      	b.n	8000fd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbf1      	blt.n	8000fbe <_write+0x12>
  }
  return len;
 8000fda:	687b      	ldr	r3, [r7, #4]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_close>:

int _close(int file)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100c:	605a      	str	r2, [r3, #4]
  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_isatty>:

int _isatty(int file)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f003 ff26 	bl	8004ecc <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20030000 	.word	0x20030000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000480 	.word	0x20000480
 80010b4:	20000498 	.word	0x20000498

080010b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <SystemInit+0x98>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <SystemInit+0x98>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80010dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80010e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80010e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <SystemInit+0x9c>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80010f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001102:	f023 0305 	bic.w	r3, r3, #5
 8001106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800110a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <SystemInit+0xa0>)
 8001124:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <SystemInit+0xa0>)
 800112c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800112e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800113e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	faf6fefb 	.word	0xfaf6fefb
 8001158:	22041000 	.word	0x22041000

0800115c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800115c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001160:	3304      	adds	r3, #4

08001162 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001162:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001164:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001166:	d3f9      	bcc.n	800115c <CopyDataInit>
  bx lr
 8001168:	4770      	bx	lr

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800116a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800116c:	3004      	adds	r0, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800116e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>
  bx lr
 8001172:	4770      	bx	lr

08001174 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001176:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001178:	f7ff ff9e 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <LoopForever+0x6>)
 800117e:	490c      	ldr	r1, [pc, #48]	; (80011b0 <LoopForever+0xa>)
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <LoopForever+0xe>)
 8001182:	2300      	movs	r3, #0
 8001184:	f7ff ffed 	bl	8001162 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <LoopForever+0x12>)
 800118a:	490c      	ldr	r1, [pc, #48]	; (80011bc <LoopForever+0x16>)
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <LoopForever+0x1a>)
 800118e:	2300      	movs	r3, #0
 8001190:	f7ff ffe7 	bl	8001162 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopForever+0x1e>)
 8001196:	490c      	ldr	r1, [pc, #48]	; (80011c8 <LoopForever+0x22>)
 8001198:	2300      	movs	r3, #0
 800119a:	f7ff ffe8 	bl	800116e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800119e:	f004 f853 	bl	8005248 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011a2:	f7ff fa5b 	bl	800065c <main>

080011a6 <LoopForever>:

LoopForever:
  b LoopForever
 80011a6:	e7fe      	b.n	80011a6 <LoopForever>
  ldr   r0, =_estack
 80011a8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000080 	.word	0x20000080
 80011b4:	08006060 	.word	0x08006060
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011b8:	20030000 	.word	0x20030000
 80011bc:	20030000 	.word	0x20030000
 80011c0:	080060d8 	.word	0x080060d8
  INIT_BSS _sbss, _ebss
 80011c4:	20000080 	.word	0x20000080
 80011c8:	20000498 	.word	0x20000498

080011cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_Init+0x3c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_Init+0x3c>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e6:	2003      	movs	r0, #3
 80011e8:	f000 f948 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 f80f 	bl	8001210 <HAL_InitTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	e001      	b.n	8001202 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fe:	f7ff fdbe 	bl	8000d7e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001202:	79fb      	ldrb	r3, [r7, #7]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58004000 	.word	0x58004000

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_InitTick+0x6c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d024      	beq.n	800126e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001224:	f001 fcaa 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_InitTick+0x6c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001234:	fbb3 f3f1 	udiv	r3, r3, r1
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f950 	bl	80014e2 <HAL_SYSTICK_Config>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10f      	bne.n	8001268 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	d809      	bhi.n	8001262 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124e:	2200      	movs	r2, #0
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001256:	f000 f91c 	bl	8001492 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_InitTick+0x70>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e007      	b.n	8001272 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e004      	b.n	8001272 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e001      	b.n	8001272 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000018 	.word	0x20000018
 8001280:	20000014 	.word	0x20000014

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000018 	.word	0x20000018
 80012a8:	20000484 	.word	0x20000484

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000484 	.word	0x20000484

080012c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTickPrio+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000014 	.word	0x20000014

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff40 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff90 	bl	80013d0 <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5f 	bl	800137c <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff33 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa4 	bl	8001438 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	e14c      	b.n	80017a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 813e 	beq.w	80017a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d005      	beq.n	800153c <HAL_GPIO_Init+0x40>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 0201 	and.w	r2, r3, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d017      	beq.n	80015da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d123      	bne.n	800162e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0203 	and.w	r2, r3, #3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8098 	beq.w	80017a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001670:	4a54      	ldr	r2, [pc, #336]	; (80017c4 <HAL_GPIO_Init+0x2c8>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800169a:	d019      	beq.n	80016d0 <HAL_GPIO_Init+0x1d4>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a4a      	ldr	r2, [pc, #296]	; (80017c8 <HAL_GPIO_Init+0x2cc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d013      	beq.n	80016cc <HAL_GPIO_Init+0x1d0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a49      	ldr	r2, [pc, #292]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00d      	beq.n	80016c8 <HAL_GPIO_Init+0x1cc>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <HAL_GPIO_Init+0x2d4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_Init+0x1c8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d101      	bne.n	80016c0 <HAL_GPIO_Init+0x1c4>
 80016bc:	2304      	movs	r3, #4
 80016be:	e008      	b.n	80016d2 <HAL_GPIO_Init+0x1d6>
 80016c0:	2307      	movs	r3, #7
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x1d6>
 80016c4:	2303      	movs	r3, #3
 80016c6:	e004      	b.n	80016d2 <HAL_GPIO_Init+0x1d6>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x1d6>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_GPIO_Init+0x1d6>
 80016d0:	2300      	movs	r3, #0
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	f002 0203 	and.w	r2, r2, #3
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	4093      	lsls	r3, r2
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016e2:	4938      	ldr	r1, [pc, #224]	; (80017c4 <HAL_GPIO_Init+0x2c8>)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001714:	4a30      	ldr	r2, [pc, #192]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800173e:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 8001746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800176a:	4a1b      	ldr	r2, [pc, #108]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 8001774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001798:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3301      	adds	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f47f aeab 	bne.w	800150c <HAL_GPIO_Init+0x10>
  }
}
 80017b6:	bf00      	nop
 80017b8:	bf00      	nop
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40010000 	.word	0x40010000
 80017c8:	48000400 	.word	0x48000400
 80017cc:	48000800 	.word	0x48000800
 80017d0:	48000c00 	.word	0x48000c00
 80017d4:	48001000 	.word	0x48001000
 80017d8:	58000800 	.word	0x58000800

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f9fc 	bl	8000c28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	58000800 	.word	0x58000800

0800183c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	b08b      	sub	sp, #44	; 0x2c
 8001840:	af06      	add	r7, sp, #24
 8001842:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0cb      	b.n	80019e6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fafe 	bl	8000e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2203      	movs	r2, #3
 800186c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 faed 	bl	8004e54 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e040      	b.n	8001902 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3301      	adds	r3, #1
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	3303      	adds	r3, #3
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3338      	adds	r3, #56	; 0x38
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	333c      	adds	r3, #60	; 0x3c
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3340      	adds	r3, #64	; 0x40
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	3301      	adds	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	d3b9      	bcc.n	8001880 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	e044      	b.n	800199c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	3301      	adds	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3b5      	bcc.n	8001912 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	687e      	ldr	r6, [r7, #4]
 80019ae:	466d      	mov	r5, sp
 80019b0:	f106 0410 	add.w	r4, r6, #16
 80019b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	602b      	str	r3, [r5, #0]
 80019bc:	1d33      	adds	r3, r6, #4
 80019be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f003 fa62 	bl	8004e8a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f805 	bl	80019ee <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	58000400 	.word	0x58000400

08001a64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	58000400 	.word	0x58000400

08001a80 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a92:	d101      	bne.n	8001a98 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_HSE_Enable>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_RCC_HSE_Disable>:
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_RCC_HSE_IsReady>:
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001af2:	d101      	bne.n	8001af8 <LL_RCC_HSE_IsReady+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_RCC_HSE_IsReady+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_RCC_HSI_Enable>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_HSI_Disable>:
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_HSI_IsReady>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b52:	d101      	bne.n	8001b58 <LL_RCC_HSI_IsReady+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_RCC_HSI_IsReady+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_HSI48_Enable>:
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_RCC_HSI48_Disable>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_RCC_HSI48_IsReady>:
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d101      	bne.n	8001bea <LL_RCC_HSI48_IsReady+0x18>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_RCC_HSI48_IsReady+0x1a>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_RCC_LSE_Enable>:
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_LSE_Disable>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_LSE_EnableBypass>:
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_RCC_LSE_DisableBypass>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_LSE_IsReady>:
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d101      	bne.n	8001c96 <LL_RCC_LSE_IsReady+0x18>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_RCC_LSE_IsReady+0x1a>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_RCC_LSI1_Enable>:
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RCC_LSI1_Disable>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_LSI1_IsReady>:
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d101      	bne.n	8001cfe <LL_RCC_LSI1_IsReady+0x18>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <LL_RCC_LSI1_IsReady+0x1a>
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_RCC_LSI2_Enable>:
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_RCC_LSI2_Disable>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_LSI2_IsReady>:
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d101      	bne.n	8001d66 <LL_RCC_LSI2_IsReady+0x18>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_RCC_LSI2_IsReady+0x1a>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_LSI2_SetTrimming>:
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_RCC_MSI_Enable>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_RCC_MSI_Disable>:
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6013      	str	r3, [r2, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_RCC_MSI_IsReady>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d101      	bne.n	8001df2 <LL_RCC_MSI_IsReady+0x16>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_RCC_MSI_IsReady+0x18>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_RCC_MSI_SetRange>:
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_MSI_GetRange>:
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e36:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2bb0      	cmp	r3, #176	; 0xb0
 8001e3c:	d901      	bls.n	8001e42 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001e3e:	23b0      	movs	r3, #176	; 0xb0
 8001e40:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_RCC_SetSysClkSource>:
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 0203 	bic.w	r2, r3, #3
 8001e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_GetSysClkSource>:
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_RCC_SetAHBPrescaler>:
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_RCC_SetAHB4Prescaler>:
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f1e:	f023 020f 	bic.w	r2, r3, #15
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_RCC_SetAPB1Prescaler>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_SetAPB2Prescaler>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_RCC_GetAHBPrescaler>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_RCC_GetAHB4Prescaler>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	6013      	str	r3, [r2, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800200e:	d101      	bne.n	8002014 <LL_RCC_PLL_IsReady+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_RCC_PLL_IsReady+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0303 	and.w	r3, r3, #3
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d101      	bne.n	800209a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020ba:	d101      	bne.n	80020c0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e0:	d101      	bne.n	80020e6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002104:	d101      	bne.n	800210a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002124:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002128:	d101      	bne.n	800212e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b08d      	sub	sp, #52	; 0x34
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e363      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 808d 	beq.w	8002276 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215c:	f7ff fea1 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002160:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002162:	f7ff ff82 	bl	800206a <LL_RCC_PLL_GetMainSource>
 8002166:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x3e>
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d147      	bne.n	8002204 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	2b01      	cmp	r3, #1
 8002178:	d144      	bne.n	8002204 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e347      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800218a:	f7ff fe4c 	bl	8001e26 <LL_RCC_MSI_GetRange>
 800218e:	4603      	mov	r3, r0
 8002190:	429c      	cmp	r4, r3
 8002192:	d914      	bls.n	80021be <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fd03 	bl	8002ba4 <RCC_SetFlashLatencyFromMSIRange>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e336      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fe26 	bl	8001dfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fe4a 	bl	8001e50 <LL_RCC_MSI_SetCalibTrimming>
 80021bc:	e013      	b.n	80021e6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fe1b 	bl	8001dfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fe3f 	bl	8001e50 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fce4 	bl	8002ba4 <RCC_SetFlashLatencyFromMSIRange>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e317      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021e6:	f000 fcc9 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4aa4      	ldr	r2, [pc, #656]	; (8002480 <HAL_RCC_OscConfig+0x344>)
 80021ee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021f0:	4ba4      	ldr	r3, [pc, #656]	; (8002484 <HAL_RCC_OscConfig+0x348>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f80b 	bl	8001210 <HAL_InitTick>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d039      	beq.n	8002274 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e308      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01e      	beq.n	800224a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800220c:	f7ff fdc8 	bl	8001da0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002210:	f7ff f84c 	bl	80012ac <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002218:	f7ff f848 	bl	80012ac <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e2f5      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800222a:	f7ff fdd7 	bl	8001ddc <LL_RCC_MSI_IsReady>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f1      	beq.n	8002218 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fde0 	bl	8001dfe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fe04 	bl	8001e50 <LL_RCC_MSI_SetCalibTrimming>
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800224a:	f7ff fdb8 	bl	8001dbe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800224e:	f7ff f82d 	bl	80012ac <HAL_GetTick>
 8002252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002256:	f7ff f829 	bl	80012ac <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e2d6      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002268:	f7ff fdb8 	bl	8001ddc <LL_RCC_MSI_IsReady>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f1      	bne.n	8002256 <HAL_RCC_OscConfig+0x11a>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002274:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d047      	beq.n	8002312 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002282:	f7ff fe0e 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002286:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002288:	f7ff feef 	bl	800206a <LL_RCC_PLL_GetMainSource>
 800228c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_OscConfig+0x164>
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d108      	bne.n	80022ac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d134      	bne.n	8002312 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e2b4      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d102      	bne.n	80022bc <HAL_RCC_OscConfig+0x180>
 80022b6:	f7ff fbf5 	bl	8001aa4 <LL_RCC_HSE_Enable>
 80022ba:	e001      	b.n	80022c0 <HAL_RCC_OscConfig+0x184>
 80022bc:	f7ff fc01 	bl	8001ac2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fff0 	bl	80012ac <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe ffec 	bl	80012ac <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e299      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80022e2:	f7ff fbfd 	bl	8001ae0 <LL_RCC_HSE_IsReady>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f1      	beq.n	80022d0 <HAL_RCC_OscConfig+0x194>
 80022ec:	e011      	b.n	8002312 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe ffdd 	bl	80012ac <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f6:	f7fe ffd9 	bl	80012ac <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b64      	cmp	r3, #100	; 0x64
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e286      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002308:	f7ff fbea 	bl	8001ae0 <LL_RCC_HSE_IsReady>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f1      	bne.n	80022f6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231e:	f7ff fdc0 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002322:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002324:	f7ff fea1 	bl	800206a <LL_RCC_PLL_GetMainSource>
 8002328:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x200>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d10e      	bne.n	8002354 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d10b      	bne.n	8002354 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e266      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fc09 	bl	8001b64 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002352:	e031      	b.n	80023b8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d019      	beq.n	8002390 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235c:	f7ff fbd2 	bl	8001b04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe ffa4 	bl	80012ac <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe ffa0 	bl	80012ac <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e24d      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800237a:	f7ff fbe1 	bl	8001b40 <LL_RCC_HSI_IsReady>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f1      	beq.n	8002368 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fbeb 	bl	8001b64 <LL_RCC_HSI_SetCalibTrimming>
 800238e:	e013      	b.n	80023b8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002390:	f7ff fbc7 	bl	8001b22 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe ff8a 	bl	80012ac <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe ff86 	bl	80012ac <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e233      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80023ae:	f7ff fbc7 	bl	8001b40 <LL_RCC_HSI_IsReady>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f1      	bne.n	800239c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a3 	beq.w	8002518 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d076      	beq.n	80024c8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d046      	beq.n	8002474 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80023e6:	f7ff fc7e 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d113      	bne.n	8002418 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80023f0:	f7ff fc57 	bl	8001ca2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f4:	f7fe ff5a 	bl	80012ac <HAL_GetTick>
 80023f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023fc:	f7fe ff56 	bl	80012ac <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e203      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800240e:	f7ff fc6a 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f1      	beq.n	80023fc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002418:	f7ff fc77 	bl	8001d0a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe ff46 	bl	80012ac <HAL_GetTick>
 8002420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002424:	f7fe ff42 	bl	80012ac <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b03      	cmp	r3, #3
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1ef      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002436:	f7ff fc8a 	bl	8001d4e <LL_RCC_LSI2_IsReady>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f1      	beq.n	8002424 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fc94 	bl	8001d72 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800244a:	f7ff fc3b 	bl	8001cc4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe ff2d 	bl	80012ac <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002456:	f7fe ff29 	bl	80012ac <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1d6      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002468:	f7ff fc3d 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f1      	bne.n	8002456 <HAL_RCC_OscConfig+0x31a>
 8002472:	e051      	b.n	8002518 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002474:	f7ff fc15 	bl	8001ca2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe ff18 	bl	80012ac <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800247e:	e00c      	b.n	800249a <HAL_RCC_OscConfig+0x35e>
 8002480:	20000010 	.word	0x20000010
 8002484:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002488:	f7fe ff10 	bl	80012ac <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e1bd      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800249a:	f7ff fc24 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f1      	beq.n	8002488 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80024a4:	f7ff fc42 	bl	8001d2c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80024aa:	f7fe feff 	bl	80012ac <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1ac      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80024bc:	f7ff fc47 	bl	8001d4e <LL_RCC_LSI2_IsReady>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f1      	bne.n	80024aa <HAL_RCC_OscConfig+0x36e>
 80024c6:	e027      	b.n	8002518 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80024c8:	f7ff fc30 	bl	8001d2c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe feee 	bl	80012ac <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80024d4:	f7fe feea 	bl	80012ac <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e197      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80024e6:	f7ff fc32 	bl	8001d4e <LL_RCC_LSI2_IsReady>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f1      	bne.n	80024d4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80024f0:	f7ff fbe8 	bl	8001cc4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe feda 	bl	80012ac <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80024fc:	f7fe fed6 	bl	80012ac <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e183      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800250e:	f7ff fbea 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f1      	bne.n	80024fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05b      	beq.n	80025dc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002524:	4ba7      	ldr	r3, [pc, #668]	; (80027c4 <HAL_RCC_OscConfig+0x688>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d114      	bne.n	800255a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002530:	f7ff fa88 	bl	8001a44 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002534:	f7fe feba 	bl	80012ac <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe feb6 	bl	80012ac <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e163      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254e:	4b9d      	ldr	r3, [pc, #628]	; (80027c4 <HAL_RCC_OscConfig+0x688>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d102      	bne.n	8002568 <HAL_RCC_OscConfig+0x42c>
 8002562:	f7ff fb48 	bl	8001bf6 <LL_RCC_LSE_Enable>
 8002566:	e00c      	b.n	8002582 <HAL_RCC_OscConfig+0x446>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d104      	bne.n	800257a <HAL_RCC_OscConfig+0x43e>
 8002570:	f7ff fb63 	bl	8001c3a <LL_RCC_LSE_EnableBypass>
 8002574:	f7ff fb3f 	bl	8001bf6 <LL_RCC_LSE_Enable>
 8002578:	e003      	b.n	8002582 <HAL_RCC_OscConfig+0x446>
 800257a:	f7ff fb4d 	bl	8001c18 <LL_RCC_LSE_Disable>
 800257e:	f7ff fb6d 	bl	8001c5c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d014      	beq.n	80025b4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fe8f 	bl	80012ac <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fe8b 	bl	80012ac <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e136      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80025a8:	f7ff fb69 	bl	8001c7e <LL_RCC_LSE_IsReady>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ef      	beq.n	8002592 <HAL_RCC_OscConfig+0x456>
 80025b2:	e013      	b.n	80025dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fe7a 	bl	80012ac <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe fe76 	bl	80012ac <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e121      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80025d2:	f7ff fb54 	bl	8001c7e <LL_RCC_LSE_IsReady>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ef      	bne.n	80025bc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d02c      	beq.n	8002642 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d014      	beq.n	800261a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025f0:	f7ff facd 	bl	8001b8e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fe5a 	bl	80012ac <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025fc:	f7fe fe56 	bl	80012ac <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e103      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800260e:	f7ff fae0 	bl	8001bd2 <LL_RCC_HSI48_IsReady>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f1      	beq.n	80025fc <HAL_RCC_OscConfig+0x4c0>
 8002618:	e013      	b.n	8002642 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800261a:	f7ff fac9 	bl	8001bb0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe fe45 	bl	80012ac <HAL_GetTick>
 8002622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002626:	f7fe fe41 	bl	80012ac <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0ee      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002638:	f7ff facb 	bl	8001bd2 <LL_RCC_HSI48_IsReady>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f1      	bne.n	8002626 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80e4 	beq.w	8002814 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264c:	f7ff fc29 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002650:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	2b02      	cmp	r3, #2
 8002660:	f040 80b4 	bne.w	80027cc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0203 	and.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	429a      	cmp	r2, r3
 8002670:	d123      	bne.n	80026ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d11c      	bne.n	80026ba <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d114      	bne.n	80026ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d10d      	bne.n	80026ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d05d      	beq.n	8002776 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	d058      	beq.n	8002772 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0a1      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026d2:	f7ff fc84 	bl	8001fde <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d6:	f7fe fde9 	bl	80012ac <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7fe fde5 	bl	80012ac <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e092      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1ef      	bne.n	80026de <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <HAL_RCC_OscConfig+0x68c>)
 8002706:	4013      	ands	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002710:	4311      	orrs	r1, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002716:	0212      	lsls	r2, r2, #8
 8002718:	4311      	orrs	r1, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002724:	4311      	orrs	r1, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800272a:	430a      	orrs	r2, r1
 800272c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002734:	f7ff fc44 	bl	8001fc0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002748:	f7fe fdb0 	bl	80012ac <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe fdac 	bl	80012ac <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e059      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ef      	beq.n	8002750 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002770:	e050      	b.n	8002814 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e04f      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d147      	bne.n	8002814 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002784:	f7ff fc1c 	bl	8001fc0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002798:	f7fe fd88 	bl	80012ac <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fd84 	bl	80012ac <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e031      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ef      	beq.n	80027a0 <HAL_RCC_OscConfig+0x664>
 80027c0:	e028      	b.n	8002814 <HAL_RCC_OscConfig+0x6d8>
 80027c2:	bf00      	nop
 80027c4:	58000400 	.word	0x58000400
 80027c8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d01e      	beq.n	8002810 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	f7ff fc04 	bl	8001fde <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fd69 	bl	80012ac <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fd65 	bl	80012ac <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e012      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1ef      	bne.n	80027de <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_OscConfig+0x6e4>)
 800280a:	4013      	ands	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]
 800280e:	e001      	b.n	8002814 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3734      	adds	r7, #52	; 0x34
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	eefefffc 	.word	0xeefefffc

08002824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e12d      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b98      	ldr	r3, [pc, #608]	; (8002a9c <HAL_RCC_ClockConfig+0x278>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d91b      	bls.n	800287e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b95      	ldr	r3, [pc, #596]	; (8002a9c <HAL_RCC_ClockConfig+0x278>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0207 	bic.w	r2, r3, #7
 800284e:	4993      	ldr	r1, [pc, #588]	; (8002a9c <HAL_RCC_ClockConfig+0x278>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002856:	f7fe fd29 	bl	80012ac <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285c:	e008      	b.n	8002870 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800285e:	f7fe fd25 	bl	80012ac <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e111      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002870:	4b8a      	ldr	r3, [pc, #552]	; (8002a9c <HAL_RCC_ClockConfig+0x278>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d1ef      	bne.n	800285e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fb13 	bl	8001eba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002894:	f7fe fd0a 	bl	80012ac <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800289c:	f7fe fd06 	bl	80012ac <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0f2      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028ae:	f7ff fbe8 	bl	8002082 <LL_RCC_IsActiveFlag_HPRE>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f1      	beq.n	800289c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d016      	beq.n	80028f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fb0a 	bl	8001ee2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028ce:	f7fe fced 	bl	80012ac <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028d6:	f7fe fce9 	bl	80012ac <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0d5      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80028e8:	f7ff fbdd 	bl	80020a6 <LL_RCC_IsActiveFlag_C2HPRE>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f1      	beq.n	80028d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fb03 	bl	8001f0e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002908:	f7fe fcd0 	bl	80012ac <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002910:	f7fe fccc 	bl	80012ac <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0b8      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002922:	f7ff fbd3 	bl	80020cc <LL_RCC_IsActiveFlag_SHDHPRE>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f1      	beq.n	8002910 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d016      	beq.n	8002966 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fafd 	bl	8001f3c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002942:	f7fe fcb3 	bl	80012ac <HAL_GetTick>
 8002946:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800294a:	f7fe fcaf 	bl	80012ac <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e09b      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800295c:	f7ff fbc9 	bl	80020f2 <LL_RCC_IsActiveFlag_PPRE1>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f1      	beq.n	800294a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d017      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff faf3 	bl	8001f64 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800297e:	f7fe fc95 	bl	80012ac <HAL_GetTick>
 8002982:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002986:	f7fe fc91 	bl	80012ac <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e07d      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002998:	f7ff fbbd 	bl	8002116 <LL_RCC_IsActiveFlag_PPRE2>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f1      	beq.n	8002986 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d043      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d106      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80029b6:	f7ff f893 	bl	8001ae0 <LL_RCC_HSE_IsReady>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11e      	bne.n	80029fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e067      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d106      	bne.n	80029da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80029cc:	f7ff fb16 	bl	8001ffc <LL_RCC_PLL_IsReady>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d113      	bne.n	80029fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e05c      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80029e2:	f7ff f9fb 	bl	8001ddc <LL_RCC_MSI_IsReady>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d108      	bne.n	80029fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e051      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80029f0:	f7ff f8a6 	bl	8001b40 <LL_RCC_HSI_IsReady>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e04a      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fa39 	bl	8001e7a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a08:	f7fe fc50 	bl	80012ac <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7fe fc4c 	bl	80012ac <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e036      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	f7ff fa3c 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d1ec      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_ClockConfig+0x278>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d21b      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a44:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <HAL_RCC_ClockConfig+0x278>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 0207 	bic.w	r2, r3, #7
 8002a4c:	4913      	ldr	r1, [pc, #76]	; (8002a9c <HAL_RCC_ClockConfig+0x278>)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a54:	f7fe fc2a 	bl	80012ac <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a5c:	f7fe fc26 	bl	80012ac <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e012      	b.n	8002a94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_ClockConfig+0x278>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1ef      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a7c:	f000 f87e 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <HAL_RCC_ClockConfig+0x27c>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002a86:	f7fe fc1d 	bl	80012c4 <HAL_GetTickPrio>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe fbbf 	bl	8001210 <HAL_InitTick>
 8002a92:	4603      	mov	r3, r0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	58004000 	.word	0x58004000
 8002aa0:	20000010 	.word	0x20000010

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aaa:	f7ff f9fa 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002aae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ab6:	f7ff f9b6 	bl	8001e26 <LL_RCC_MSI_GetRange>
 8002aba:	4603      	mov	r3, r0
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	4a2b      	ldr	r2, [pc, #172]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e04b      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d102      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ad2:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e045      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d10a      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ade:	f7fe ffcf 	bl	8001a80 <LL_RCC_HSE_IsEnabledDiv2>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d102      	bne.n	8002aee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002ae8:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e03a      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e037      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002af4:	f7ff fab9 	bl	800206a <LL_RCC_PLL_GetMainSource>
 8002af8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d003      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x64>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x6a>
 8002b06:	e00d      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b0a:	60bb      	str	r3, [r7, #8]
        break;
 8002b0c:	e015      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b0e:	f7fe ffb7 	bl	8001a80 <LL_RCC_HSE_IsEnabledDiv2>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002b18:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b1a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002b1c:	e00d      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b20:	60bb      	str	r3, [r7, #8]
        break;
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b24:	f7ff f97f 	bl	8001e26 <LL_RCC_MSI_GetRange>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b36:	60bb      	str	r3, [r7, #8]
        break;
 8002b38:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002b3a:	f7ff fa71 	bl	8002020 <LL_RCC_PLL_GetN>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	fb03 f402 	mul.w	r4, r3, r2
 8002b46:	f7ff fa84 	bl	8002052 <LL_RCC_PLL_GetDivider>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	3301      	adds	r3, #1
 8002b50:	fbb4 f4f3 	udiv	r4, r4, r3
 8002b54:	f7ff fa71 	bl	800203a <LL_RCC_PLL_GetR>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	0f5b      	lsrs	r3, r3, #29
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b62:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002b64:	68fb      	ldr	r3, [r7, #12]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08005f80 	.word	0x08005f80
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	01e84800 	.word	0x01e84800

08002b7c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b598      	push	{r3, r4, r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b80:	f7ff ff90 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002b84:	4604      	mov	r4, r0
 8002b86:	f7ff fa01 	bl	8001f8c <LL_RCC_GetAHBPrescaler>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	4a03      	ldr	r2, [pc, #12]	; (8002ba0 <HAL_RCC_GetHCLKFreq+0x24>)
 8002b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b98:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd98      	pop	{r3, r4, r7, pc}
 8002ba0:	08005f40 	.word	0x08005f40

08002ba4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2bb0      	cmp	r3, #176	; 0xb0
 8002bb0:	d903      	bls.n	8002bba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e007      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002bca:	f7ff f9eb 	bl	8001fa4 <LL_RCC_GetAHB4Prescaler>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0c9c      	lsrs	r4, r3, #18
 8002bee:	f7fe ff39 	bl	8001a64 <HAL_PWREx_GetVoltageRange>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f000 f80c 	bl	8002c14 <RCC_SetFlashLatency>
 8002bfc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08005f80 	.word	0x08005f80
 8002c0c:	08005f40 	.word	0x08005f40
 8002c10:	431bde83 	.word	0x431bde83

08002c14 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b093      	sub	sp, #76	; 0x4c
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <RCC_SetFlashLatency+0xe8>)
 8002c20:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002c2a:	4a35      	ldr	r2, [pc, #212]	; (8002d00 <RCC_SetFlashLatency+0xec>)
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <RCC_SetFlashLatency+0xf0>)
 8002c38:	f107 040c 	add.w	r4, r7, #12
 8002c3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c42:	2300      	movs	r3, #0
 8002c44:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c4c:	d11a      	bne.n	8002c84 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	643b      	str	r3, [r7, #64]	; 0x40
 8002c52:	e013      	b.n	8002c7c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	3348      	adds	r3, #72	; 0x48
 8002c5a:	443b      	add	r3, r7
 8002c5c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d807      	bhi.n	8002c76 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	3348      	adds	r3, #72	; 0x48
 8002c6c:	443b      	add	r3, r7
 8002c6e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c72:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c74:	e020      	b.n	8002cb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c78:	3301      	adds	r3, #1
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d9e8      	bls.n	8002c54 <RCC_SetFlashLatency+0x40>
 8002c82:	e019      	b.n	8002cb8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c88:	e013      	b.n	8002cb2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	3348      	adds	r3, #72	; 0x48
 8002c90:	443b      	add	r3, r7
 8002c92:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d807      	bhi.n	8002cac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	3348      	adds	r3, #72	; 0x48
 8002ca2:	443b      	add	r3, r7
 8002ca4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ca8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002caa:	e005      	b.n	8002cb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cae:	3301      	adds	r3, #1
 8002cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d9e8      	bls.n	8002c8a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <RCC_SetFlashLatency+0xf4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 0207 	bic.w	r2, r3, #7
 8002cc0:	4911      	ldr	r1, [pc, #68]	; (8002d08 <RCC_SetFlashLatency+0xf4>)
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cc8:	f7fe faf0 	bl	80012ac <HAL_GetTick>
 8002ccc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cce:	e008      	b.n	8002ce2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cd0:	f7fe faec 	bl	80012ac <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e007      	b.n	8002cf2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <RCC_SetFlashLatency+0xf4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1ef      	bne.n	8002cd0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	374c      	adds	r7, #76	; 0x4c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	08005f14 	.word	0x08005f14
 8002d00:	08005f24 	.word	0x08005f24
 8002d04:	08005f30 	.word	0x08005f30
 8002d08:	58004000 	.word	0x58004000

08002d0c <LL_RCC_LSE_IsEnabled>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <LL_RCC_LSE_IsEnabled+0x18>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <LL_RCC_LSE_IsEnabled+0x1a>
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_RCC_LSE_IsReady>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d101      	bne.n	8002d48 <LL_RCC_LSE_IsReady+0x18>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_RCC_LSE_IsReady+0x1a>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_RCC_MSI_EnablePLLMode>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_SetRFWKPClockSource>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_RCC_SetSMPSClockSource>:
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f023 0203 	bic.w	r2, r3, #3
 8002db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_RCC_SetSMPSPrescaler>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_RCC_SetUSARTClockSource>:
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_RCC_SetLPUARTClockSource>:
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_SetI2CClockSource>:
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	401a      	ands	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_SetLPTIMClockSource>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	43db      	mvns	r3, r3
 8002e98:	401a      	ands	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_SetSAIClockSource>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_RCC_SetRNGClockSource>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_RCC_SetCLK48ClockSource>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_SetUSBClockSource>:
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ffe3 	bl	8002f0c <LL_RCC_SetCLK48ClockSource>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <LL_RCC_SetADCClockSource>:
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_SetRTCClockSource>:
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_GetRTCClockSource>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_RCC_ForceBackupDomainReset>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_RCC_PLLSAI1_Enable>:
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003016:	6013      	str	r3, [r2, #0]
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_RCC_PLLSAI1_Disable>:
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003030:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003034:	6013      	str	r3, [r2, #0]
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_RCC_PLLSAI1_IsReady>:
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800304e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003052:	d101      	bne.n	8003058 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800306c:	2300      	movs	r3, #0
 800306e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003070:	2300      	movs	r3, #0
 8003072:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d034      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003088:	d021      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800308a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800308e:	d81b      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003094:	d01d      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800309a:	d815      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80030a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a4:	d110      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80030b6:	e00d      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f94d 	bl	800335c <RCCEx_PLLSAI1_ConfigNP>
 80030c2:	4603      	mov	r3, r0
 80030c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	77fb      	strb	r3, [r7, #31]
        break;
 80030cc:	e002      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030ce:	bf00      	nop
 80030d0:	e000      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d4:	7ffb      	ldrb	r3, [r7, #31]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fee8 	bl	8002eb4 <LL_RCC_SetSAIClockSource>
 80030e4:	e001      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e6:	7ffb      	ldrb	r3, [r7, #31]
 80030e8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d046      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80030f6:	f7ff ff56 	bl	8002fa6 <LL_RCC_GetRTCClockSource>
 80030fa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	429a      	cmp	r2, r3
 8003104:	d03c      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003106:	f7fe fc9d 	bl	8001a44 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff30 	bl	8002f7a <LL_RCC_SetRTCClockSource>
 800311a:	e02e      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003126:	f7ff ff4b 	bl	8002fc0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800312a:	f7ff ff5a 	bl	8002fe2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800313c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003146:	f7ff fde1 	bl	8002d0c <LL_RCC_LSE_IsEnabled>
 800314a:	4603      	mov	r3, r0
 800314c:	2b01      	cmp	r3, #1
 800314e:	d114      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003150:	f7fe f8ac 	bl	80012ac <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003156:	e00b      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe f8a8 	bl	80012ac <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d902      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	77fb      	strb	r3, [r7, #31]
              break;
 800316e:	e004      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003170:	f7ff fdde 	bl	8002d30 <LL_RCC_LSE_IsReady>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d1ee      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800317a:	7ffb      	ldrb	r3, [r7, #31]
 800317c:	77bb      	strb	r3, [r7, #30]
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7ffb      	ldrb	r3, [r7, #31]
 8003182:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fe2a 	bl	8002dee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d004      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fe35 	bl	8002e1a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fe5d 	bl	8002e80 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe52 	bl	8002e80 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fe2a 	bl	8002e46 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fe1f 	bl	8002e46 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d022      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fe8d 	bl	8002f38 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003226:	d107      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003236:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003240:	d10b      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3304      	adds	r3, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f8e3 	bl	8003412 <RCCEx_PLLSAI1_ConfigNQ>
 800324c:	4603      	mov	r3, r0
 800324e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003256:	7ffb      	ldrb	r3, [r7, #31]
 8003258:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02b      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d008      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003278:	d003      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fe2a 	bl	8002ee0 <LL_RCC_SetRNGClockSource>
 800328c:	e00a      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	2000      	movs	r0, #0
 800329a:	f7ff fe21 	bl	8002ee0 <LL_RCC_SetRNGClockSource>
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff fe34 	bl	8002f0c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80032ac:	d107      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80032ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d022      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fe3d 	bl	8002f4e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032dc:	d107      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032f6:	d10b      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f8e3 	bl	80034c8 <RCCEx_PLLSAI1_ConfigNR>
 8003302:	4603      	mov	r3, r0
 8003304:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003306:	7ffb      	ldrb	r3, [r7, #31]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800330c:	7ffb      	ldrb	r3, [r7, #31]
 800330e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fd26 	bl	8002d72 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fd45 	bl	8002dc6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fd2c 	bl	8002d9e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003346:	7fbb      	ldrb	r3, [r7, #30]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003354:	f7ff fcfe 	bl	8002d54 <LL_RCC_MSI_EnablePLLMode>
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}

0800335c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003368:	f7ff fe5b 	bl	8003022 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800336c:	f7fd ff9e 	bl	80012ac <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003374:	f7fd ff9a 	bl	80012ac <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
      break;
 8003386:	e004      	b.n	8003392 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003388:	f7ff fe5a 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d137      	bne.n	8003408 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ac:	4313      	orrs	r3, r2
 80033ae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c2:	4313      	orrs	r3, r2
 80033c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033c6:	f7ff fe1d 	bl	8003004 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ca:	f7fd ff6f 	bl	80012ac <HAL_GetTick>
 80033ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033d0:	e009      	b.n	80033e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d2:	f7fd ff6b 	bl	80012ac <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d902      	bls.n	80033e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	73fb      	strb	r3, [r7, #15]
        break;
 80033e4:	e004      	b.n	80033f0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033e6:	f7ff fe2b 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d1f0      	bne.n	80033d2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003404:	4313      	orrs	r3, r2
 8003406:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800341e:	f7ff fe00 	bl	8003022 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003422:	f7fd ff43 	bl	80012ac <HAL_GetTick>
 8003426:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003428:	e009      	b.n	800343e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800342a:	f7fd ff3f 	bl	80012ac <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d902      	bls.n	800343e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	73fb      	strb	r3, [r7, #15]
      break;
 800343c:	e004      	b.n	8003448 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800343e:	f7ff fdff 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d137      	bne.n	80034be <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003478:	4313      	orrs	r3, r2
 800347a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800347c:	f7ff fdc2 	bl	8003004 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003480:	f7fd ff14 	bl	80012ac <HAL_GetTick>
 8003484:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003486:	e009      	b.n	800349c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003488:	f7fd ff10 	bl	80012ac <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d902      	bls.n	800349c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	73fb      	strb	r3, [r7, #15]
        break;
 800349a:	e004      	b.n	80034a6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800349c:	f7ff fdd0 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d1f0      	bne.n	8003488 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d108      	bne.n	80034be <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ba:	4313      	orrs	r3, r2
 80034bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034d4:	f7ff fda5 	bl	8003022 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034d8:	f7fd fee8 	bl	80012ac <HAL_GetTick>
 80034dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034de:	e009      	b.n	80034f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034e0:	f7fd fee4 	bl	80012ac <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d902      	bls.n	80034f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	73fb      	strb	r3, [r7, #15]
      break;
 80034f2:	e004      	b.n	80034fe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034f4:	f7ff fda4 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d137      	bne.n	8003574 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003518:	4313      	orrs	r3, r2
 800351a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800351c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800352e:	4313      	orrs	r3, r2
 8003530:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003532:	f7ff fd67 	bl	8003004 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003536:	f7fd feb9 	bl	80012ac <HAL_GetTick>
 800353a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800353c:	e009      	b.n	8003552 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353e:	f7fd feb5 	bl	80012ac <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d902      	bls.n	8003552 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	73fb      	strb	r3, [r7, #15]
        break;
 8003550:	e004      	b.n	800355c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003552:	f7ff fd75 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 8003556:	4603      	mov	r3, r0
 8003558:	2b01      	cmp	r3, #1
 800355a:	d1f0      	bne.n	800353e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003570:	4313      	orrs	r3, r2
 8003572:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e09f      	b.n	80036d2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fbf0 	bl	8000d8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035b4:	4b49      	ldr	r3, [pc, #292]	; (80036dc <HAL_RTC_Init+0x15c>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d07e      	beq.n	80036be <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	22ca      	movs	r2, #202	; 0xca
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2253      	movs	r2, #83	; 0x53
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fa1d 	bl	8003a10 <RTC_EnterInitMode>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	22ff      	movs	r2, #255	; 0xff
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2204      	movs	r2, #4
 80035e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	e067      	b.n	80036c2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003604:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68d2      	ldr	r2, [r2, #12]
 800362c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6919      	ldr	r1, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	041a      	lsls	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003650:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0203 	bic.w	r2, r2, #3
 8003660:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d113      	bne.n	80036b0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f99b 	bl	80039c4 <HAL_RTC_WaitForSynchro>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2204      	movs	r2, #4
 80036a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e010      	b.n	80036d2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e001      	b.n	80036c2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40002800 	.word	0x40002800

080036e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_RTC_SetTime+0x1a>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0b2      	b.n	8003860 <HAL_RTC_SetTime+0x180>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d126      	bne.n	800375e <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2200      	movs	r2, #0
 8003722:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f99b 	bl	8003a64 <RTC_ByteToBcd2>
 800372e:	4603      	mov	r3, r0
 8003730:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	785b      	ldrb	r3, [r3, #1]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f994 	bl	8003a64 <RTC_ByteToBcd2>
 800373c:	4603      	mov	r3, r0
 800373e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003740:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	789b      	ldrb	r3, [r3, #2]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f98c 	bl	8003a64 <RTC_ByteToBcd2>
 800374c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800374e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	78db      	ldrb	r3, [r3, #3]
 8003756:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e018      	b.n	8003790 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2200      	movs	r2, #0
 8003770:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800377e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003784:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	78db      	ldrb	r3, [r3, #3]
 800378a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	22ca      	movs	r2, #202	; 0xca
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2253      	movs	r2, #83	; 0x53
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f935 	bl	8003a10 <RTC_EnterInitMode>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00d      	beq.n	80037c8 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2204      	movs	r2, #4
 80037b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e04b      	b.n	8003860 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037d6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037e6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800380e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d113      	bne.n	8003846 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f8d0 	bl	80039c4 <HAL_RTC_WaitForSynchro>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	22ff      	movs	r2, #255	; 0xff
 8003830:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2204      	movs	r2, #4
 8003836:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e00c      	b.n	8003860 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800385e:	2300      	movs	r3, #0
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd90      	pop	{r4, r7, pc}

08003868 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_RTC_SetDate+0x1a>
 800387e:	2302      	movs	r3, #2
 8003880:	e09c      	b.n	80039bc <HAL_RTC_SetDate+0x154>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10e      	bne.n	80038b6 <HAL_RTC_SetDate+0x4e>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	785b      	ldrb	r3, [r3, #1]
 80038a8:	f023 0310 	bic.w	r3, r3, #16
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	330a      	adds	r3, #10
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11c      	bne.n	80038f6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	78db      	ldrb	r3, [r3, #3]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f8cf 	bl	8003a64 <RTC_ByteToBcd2>
 80038c6:	4603      	mov	r3, r0
 80038c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	785b      	ldrb	r3, [r3, #1]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f8c8 	bl	8003a64 <RTC_ByteToBcd2>
 80038d4:	4603      	mov	r3, r0
 80038d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80038d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	789b      	ldrb	r3, [r3, #2]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f8c0 	bl	8003a64 <RTC_ByteToBcd2>
 80038e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80038e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e00e      	b.n	8003914 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	78db      	ldrb	r3, [r3, #3]
 80038fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003902:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003908:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	22ca      	movs	r2, #202	; 0xca
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2253      	movs	r2, #83	; 0x53
 8003922:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f873 	bl	8003a10 <RTC_EnterInitMode>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00d      	beq.n	800394c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2204      	movs	r2, #4
 800393c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e037      	b.n	80039bc <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003956:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800395a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800396a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d113      	bne.n	80039a2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f822 	bl	80039c4 <HAL_RTC_WaitForSynchro>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	22ff      	movs	r2, #255	; 0xff
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2204      	movs	r2, #4
 8003992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e00c      	b.n	80039bc <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	22ff      	movs	r2, #255	; 0xff
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd90      	pop	{r4, r7, pc}

080039c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80039dc:	f7fd fc66 	bl	80012ac <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039e2:	e009      	b.n	80039f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039e4:	f7fd fc62 	bl	80012ac <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f2:	d901      	bls.n	80039f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e007      	b.n	8003a08 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ee      	beq.n	80039e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d119      	bne.n	8003a5a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a2e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003a30:	f7fd fc3c 	bl	80012ac <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a36:	e009      	b.n	8003a4c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003a38:	f7fd fc38 	bl	80012ac <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a46:	d901      	bls.n	8003a4c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e007      	b.n	8003a5c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0ee      	beq.n	8003a38 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003a76:	e005      	b.n	8003a84 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
 8003a80:	3b0a      	subs	r3, #10
 8003a82:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003a84:	7afb      	ldrb	r3, [r7, #11]
 8003a86:	2b09      	cmp	r3, #9
 8003a88:	d8f6      	bhi.n	8003a78 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	7afb      	ldrb	r3, [r7, #11]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b2db      	uxtb	r3, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e095      	b.n	8003be2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac6:	d009      	beq.n	8003adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
 8003ace:	e005      	b.n	8003adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd f974 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b1c:	d902      	bls.n	8003b24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e002      	b.n	8003b2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b32:	d007      	beq.n	8003b44 <HAL_SPI_Init+0xa0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b3c:	d002      	beq.n	8003b44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	ea42 0103 	orr.w	r1, r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 0204 	and.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bc0:	ea42 0103 	orr.w	r1, r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b088      	sub	sp, #32
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_SPI_Transmit+0x22>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e158      	b.n	8003ebe <HAL_SPI_Transmit+0x2d4>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c14:	f7fd fb4a 	bl	80012ac <HAL_GetTick>
 8003c18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c2e:	e13d      	b.n	8003eac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_Transmit+0x52>
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c40:	e134      	b.n	8003eac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2203      	movs	r2, #3
 8003c46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8c:	d10f      	bne.n	8003cae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d007      	beq.n	8003ccc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cd4:	d94b      	bls.n	8003d6e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SPI_Transmit+0xfa>
 8003cde:	8afb      	ldrh	r3, [r7, #22]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d13e      	bne.n	8003d62 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	881a      	ldrh	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	1c9a      	adds	r2, r3, #2
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d08:	e02b      	b.n	8003d62 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d112      	bne.n	8003d3e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	1c9a      	adds	r2, r3, #2
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d3c:	e011      	b.n	8003d62 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d3e:	f7fd fab5 	bl	80012ac <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d803      	bhi.n	8003d56 <HAL_SPI_Transmit+0x16c>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d54:	d102      	bne.n	8003d5c <HAL_SPI_Transmit+0x172>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d60:	e0a4      	b.n	8003eac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1ce      	bne.n	8003d0a <HAL_SPI_Transmit+0x120>
 8003d6c:	e07c      	b.n	8003e68 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_Transmit+0x192>
 8003d76:	8afb      	ldrh	r3, [r7, #22]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d170      	bne.n	8003e5e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d912      	bls.n	8003dac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	881a      	ldrh	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	1c9a      	adds	r2, r3, #2
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b02      	subs	r3, #2
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003daa:	e058      	b.n	8003e5e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	7812      	ldrb	r2, [r2, #0]
 8003db8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003dd2:	e044      	b.n	8003e5e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d12b      	bne.n	8003e3a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d912      	bls.n	8003e12 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	1c9a      	adds	r2, r3, #2
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b02      	subs	r3, #2
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e10:	e025      	b.n	8003e5e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e38:	e011      	b.n	8003e5e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3a:	f7fd fa37 	bl	80012ac <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d803      	bhi.n	8003e52 <HAL_SPI_Transmit+0x268>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e50:	d102      	bne.n	8003e58 <HAL_SPI_Transmit+0x26e>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e5c:	e026      	b.n	8003eac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1b5      	bne.n	8003dd4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fce3 	bl	8004838 <SPI_EndRxTxTransaction>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e000      	b.n	8003eac <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003eaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ebc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b088      	sub	sp, #32
 8003eca:	af02      	add	r7, sp, #8
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee2:	d112      	bne.n	8003f0a <HAL_SPI_Receive+0x44>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10e      	bne.n	8003f0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2204      	movs	r2, #4
 8003ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f910 	bl	8004126 <HAL_SPI_TransmitReceive>
 8003f06:	4603      	mov	r3, r0
 8003f08:	e109      	b.n	800411e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_SPI_Receive+0x52>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e102      	b.n	800411e <HAL_SPI_Receive+0x258>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f20:	f7fd f9c4 	bl	80012ac <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d002      	beq.n	8003f38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f36:	e0e9      	b.n	800410c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_SPI_Receive+0x7e>
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f48:	e0e0      	b.n	800410c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	88fa      	ldrh	r2, [r7, #6]
 8003f62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	88fa      	ldrh	r2, [r7, #6]
 8003f6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f94:	d908      	bls.n	8003fa8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	e007      	b.n	8003fb8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	d10f      	bne.n	8003fe2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d007      	beq.n	8004000 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ffe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004008:	d867      	bhi.n	80040da <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800400a:	e030      	b.n	800406e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d117      	bne.n	800404a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f103 020c 	add.w	r2, r3, #12
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	7812      	ldrb	r2, [r2, #0]
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004048:	e011      	b.n	800406e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800404a:	f7fd f92f 	bl	80012ac <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d803      	bhi.n	8004062 <HAL_SPI_Receive+0x19c>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004060:	d102      	bne.n	8004068 <HAL_SPI_Receive+0x1a2>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800406c:	e04e      	b.n	800410c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1c8      	bne.n	800400c <HAL_SPI_Receive+0x146>
 800407a:	e034      	b.n	80040e6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d115      	bne.n	80040b6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	b292      	uxth	r2, r2
 8004096:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	1c9a      	adds	r2, r3, #2
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040b4:	e011      	b.n	80040da <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040b6:	f7fd f8f9 	bl	80012ac <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d803      	bhi.n	80040ce <HAL_SPI_Receive+0x208>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040cc:	d102      	bne.n	80040d4 <HAL_SPI_Receive+0x20e>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040d8:	e018      	b.n	800410c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ca      	bne.n	800407c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	6839      	ldr	r1, [r7, #0]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fb4c 	bl	8004788 <SPI_EndRxTransaction>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
 8004108:	e000      	b.n	800410c <HAL_SPI_Receive+0x246>
  }

error :
 800410a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800411c:	7dfb      	ldrb	r3, [r7, #23]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b08a      	sub	sp, #40	; 0x28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004134:	2301      	movs	r3, #1
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_SPI_TransmitReceive+0x26>
 8004148:	2302      	movs	r3, #2
 800414a:	e1fb      	b.n	8004544 <HAL_SPI_TransmitReceive+0x41e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004154:	f7fd f8aa 	bl	80012ac <HAL_GetTick>
 8004158:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004160:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004168:	887b      	ldrh	r3, [r7, #2]
 800416a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800416c:	887b      	ldrh	r3, [r7, #2]
 800416e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004170:	7efb      	ldrb	r3, [r7, #27]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d00e      	beq.n	8004194 <HAL_SPI_TransmitReceive+0x6e>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800417c:	d106      	bne.n	800418c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_SPI_TransmitReceive+0x66>
 8004186:	7efb      	ldrb	r3, [r7, #27]
 8004188:	2b04      	cmp	r3, #4
 800418a:	d003      	beq.n	8004194 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800418c:	2302      	movs	r3, #2
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004192:	e1cd      	b.n	8004530 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x80>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x80>
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80041ac:	e1c0      	b.n	8004530 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d003      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2205      	movs	r2, #5
 80041be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	887a      	ldrh	r2, [r7, #2]
 80041d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	887a      	ldrh	r2, [r7, #2]
 80041da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	887a      	ldrh	r2, [r7, #2]
 80041e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	887a      	ldrh	r2, [r7, #2]
 80041ee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004204:	d802      	bhi.n	800420c <HAL_SPI_TransmitReceive+0xe6>
 8004206:	8a3b      	ldrh	r3, [r7, #16]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d908      	bls.n	800421e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	e007      	b.n	800422e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800422c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d007      	beq.n	800424c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800424a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004254:	d97c      	bls.n	8004350 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_SPI_TransmitReceive+0x13e>
 800425e:	8a7b      	ldrh	r3, [r7, #18]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d169      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	881a      	ldrh	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	1c9a      	adds	r2, r3, #2
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004288:	e056      	b.n	8004338 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b02      	cmp	r3, #2
 8004296:	d11b      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x1aa>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x1aa>
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d113      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	881a      	ldrh	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d11c      	bne.n	8004318 <HAL_SPI_TransmitReceive+0x1f2>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	b292      	uxth	r2, r2
 80042f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004314:	2301      	movs	r3, #1
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004318:	f7fc ffc8 	bl	80012ac <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004324:	429a      	cmp	r2, r3
 8004326:	d807      	bhi.n	8004338 <HAL_SPI_TransmitReceive+0x212>
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432e:	d003      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004336:	e0fb      	b.n	8004530 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1a3      	bne.n	800428a <HAL_SPI_TransmitReceive+0x164>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d19d      	bne.n	800428a <HAL_SPI_TransmitReceive+0x164>
 800434e:	e0df      	b.n	8004510 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x23a>
 8004358:	8a7b      	ldrh	r3, [r7, #18]
 800435a:	2b01      	cmp	r3, #1
 800435c:	f040 80cb 	bne.w	80044f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d912      	bls.n	8004390 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	881a      	ldrh	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	1c9a      	adds	r2, r3, #2
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b02      	subs	r3, #2
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800438e:	e0b2      	b.n	80044f6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	7812      	ldrb	r2, [r2, #0]
 800439c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b6:	e09e      	b.n	80044f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d134      	bne.n	8004430 <HAL_SPI_TransmitReceive+0x30a>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02f      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x30a>
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d12c      	bne.n	8004430 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d912      	bls.n	8004406 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	881a      	ldrh	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	1c9a      	adds	r2, r3, #2
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b02      	subs	r3, #2
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004404:	e012      	b.n	800442c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d148      	bne.n	80044d0 <HAL_SPI_TransmitReceive+0x3aa>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d042      	beq.n	80044d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d923      	bls.n	800449e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	b292      	uxth	r2, r2
 8004462:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	1c9a      	adds	r2, r3, #2
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b02      	subs	r3, #2
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	d81f      	bhi.n	80044cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	e016      	b.n	80044cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f103 020c 	add.w	r2, r3, #12
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	7812      	ldrb	r2, [r2, #0]
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044cc:	2301      	movs	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044d0:	f7fc feec 	bl	80012ac <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044dc:	429a      	cmp	r2, r3
 80044de:	d803      	bhi.n	80044e8 <HAL_SPI_TransmitReceive+0x3c2>
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e6:	d102      	bne.n	80044ee <HAL_SPI_TransmitReceive+0x3c8>
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80044f4:	e01c      	b.n	8004530 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f47f af5b 	bne.w	80043b8 <HAL_SPI_TransmitReceive+0x292>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	f47f af54 	bne.w	80043b8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f98f 	bl	8004838 <SPI_EndRxTxTransaction>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d006      	beq.n	800452e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	661a      	str	r2, [r3, #96]	; 0x60
 800452c:	e000      	b.n	8004530 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800452e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004540:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004544:	4618      	mov	r0, r3
 8004546:	3728      	adds	r7, #40	; 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800455c:	f7fc fea6 	bl	80012ac <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	4413      	add	r3, r2
 800456a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800456c:	f7fc fe9e 	bl	80012ac <HAL_GetTick>
 8004570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004572:	4b39      	ldr	r3, [pc, #228]	; (8004658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	015b      	lsls	r3, r3, #5
 8004578:	0d1b      	lsrs	r3, r3, #20
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004582:	e054      	b.n	800462e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800458a:	d050      	beq.n	800462e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800458c:	f7fc fe8e 	bl	80012ac <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	429a      	cmp	r2, r3
 800459a:	d902      	bls.n	80045a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d13d      	bne.n	800461e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ba:	d111      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c4:	d004      	beq.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ce:	d107      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e8:	d10f      	bne.n	800460a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e017      	b.n	800464e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3b01      	subs	r3, #1
 800462c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4013      	ands	r3, r2
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	429a      	cmp	r2, r3
 800464a:	d19b      	bne.n	8004584 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000010 	.word	0x20000010

0800465c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800466e:	f7fc fe1d 	bl	80012ac <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	4413      	add	r3, r2
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800467e:	f7fc fe15 	bl	80012ac <HAL_GetTick>
 8004682:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800468c:	4b3d      	ldr	r3, [pc, #244]	; (8004784 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	00da      	lsls	r2, r3, #3
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	0d1b      	lsrs	r3, r3, #20
 800469c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046a4:	e060      	b.n	8004768 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046ac:	d107      	bne.n	80046be <SPI_WaitFifoStateUntilTimeout+0x62>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d104      	bne.n	80046be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c4:	d050      	beq.n	8004768 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046c6:	f7fc fdf1 	bl	80012ac <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d902      	bls.n	80046dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d13d      	bne.n	8004758 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f4:	d111      	bne.n	800471a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fe:	d004      	beq.n	800470a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004708:	d107      	bne.n	800471a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004718:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004722:	d10f      	bne.n	8004744 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004742:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e010      	b.n	800477a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	3b01      	subs	r3, #1
 8004766:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	d196      	bne.n	80046a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3728      	adds	r7, #40	; 0x28
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000010 	.word	0x20000010

08004788 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479c:	d111      	bne.n	80047c2 <SPI_EndRxTransaction+0x3a>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a6:	d004      	beq.n	80047b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b0:	d107      	bne.n	80047c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff febd 	bl	800454c <SPI_WaitFlagStateUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e023      	b.n	8004830 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f0:	d11d      	bne.n	800482e <SPI_EndRxTransaction+0xa6>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047fa:	d004      	beq.n	8004806 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004804:	d113      	bne.n	800482e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2200      	movs	r2, #0
 800480e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff ff22 	bl	800465c <SPI_WaitFifoStateUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e000      	b.n	8004830 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff ff03 	bl	800465c <SPI_WaitFifoStateUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e027      	b.n	80048bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	2180      	movs	r1, #128	; 0x80
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff fe68 	bl	800454c <SPI_WaitFlagStateUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e014      	b.n	80048bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff fedc 	bl	800465c <SPI_WaitFifoStateUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e000      	b.n	80048bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e049      	b.n	800496a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc faaa 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f000 f946 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d001      	beq.n	800498c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e02e      	b.n	80049ea <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <HAL_TIM_Base_Start+0x84>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIM_Base_Start+0x34>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d115      	bne.n	80049d4 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	4b13      	ldr	r3, [pc, #76]	; (80049fc <HAL_TIM_Base_Start+0x88>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b06      	cmp	r3, #6
 80049b8:	d015      	beq.n	80049e6 <HAL_TIM_Base_Start+0x72>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d011      	beq.n	80049e6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d2:	e008      	b.n	80049e6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	e000      	b.n	80049e8 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	00010007 	.word	0x00010007

08004a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_TIM_ConfigClockSource+0x1c>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e0b6      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x18a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004a3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a58:	d03e      	beq.n	8004ad8 <HAL_TIM_ConfigClockSource+0xd8>
 8004a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5e:	f200 8087 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x170>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	f000 8086 	beq.w	8004b76 <HAL_TIM_ConfigClockSource+0x176>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	d87f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x170>
 8004a70:	2b70      	cmp	r3, #112	; 0x70
 8004a72:	d01a      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xaa>
 8004a74:	2b70      	cmp	r3, #112	; 0x70
 8004a76:	d87b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x170>
 8004a78:	2b60      	cmp	r3, #96	; 0x60
 8004a7a:	d050      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x11e>
 8004a7c:	2b60      	cmp	r3, #96	; 0x60
 8004a7e:	d877      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x170>
 8004a80:	2b50      	cmp	r3, #80	; 0x50
 8004a82:	d03c      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0xfe>
 8004a84:	2b50      	cmp	r3, #80	; 0x50
 8004a86:	d873      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x170>
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d058      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x13e>
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d86f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x170>
 8004a90:	2b30      	cmp	r3, #48	; 0x30
 8004a92:	d064      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15e>
 8004a94:	2b30      	cmp	r3, #48	; 0x30
 8004a96:	d86b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x170>
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d060      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15e>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d867      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x170>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d05c      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15e>
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d05a      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15e>
 8004aa8:	e062      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6899      	ldr	r1, [r3, #8]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f000 f94b 	bl	8004d54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	609a      	str	r2, [r3, #8]
      break;
 8004ad6:	e04f      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6899      	ldr	r1, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f000 f934 	bl	8004d54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004afa:	609a      	str	r2, [r3, #8]
      break;
 8004afc:	e03c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f000 f8a6 	bl	8004c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2150      	movs	r1, #80	; 0x50
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f8ff 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004b1c:	e02c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6859      	ldr	r1, [r3, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f000 f8c5 	bl	8004cba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2160      	movs	r1, #96	; 0x60
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f8ef 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004b3c:	e01c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f000 f886 	bl	8004c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2140      	movs	r1, #64	; 0x40
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f8df 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f000 f8d6 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004b6e:	e003      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      break;
 8004b74:	e000      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a2a      	ldr	r2, [pc, #168]	; (8004c50 <TIM_Base_SetConfig+0xbc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_Base_SetConfig+0x20>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d108      	bne.n	8004bc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <TIM_Base_SetConfig+0xbc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00b      	beq.n	8004be6 <TIM_Base_SetConfig+0x52>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd4:	d007      	beq.n	8004be6 <TIM_Base_SetConfig+0x52>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <TIM_Base_SetConfig+0xc0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_Base_SetConfig+0x52>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <TIM_Base_SetConfig+0xc4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d108      	bne.n	8004bf8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a0c      	ldr	r2, [pc, #48]	; (8004c50 <TIM_Base_SetConfig+0xbc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d007      	beq.n	8004c34 <TIM_Base_SetConfig+0xa0>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a0b      	ldr	r2, [pc, #44]	; (8004c54 <TIM_Base_SetConfig+0xc0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d003      	beq.n	8004c34 <TIM_Base_SetConfig+0xa0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <TIM_Base_SetConfig+0xc4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d103      	bne.n	8004c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	615a      	str	r2, [r3, #20]
}
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40014400 	.word	0x40014400
 8004c58:	40014800 	.word	0x40014800

08004c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f023 0201 	bic.w	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f023 030a 	bic.w	r3, r3, #10
 8004c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b087      	sub	sp, #28
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f023 0210 	bic.w	r2, r3, #16
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f043 0307 	orr.w	r3, r3, #7
 8004d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	021a      	lsls	r2, r3, #8
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	609a      	str	r2, [r3, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e04a      	b.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d108      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ddc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e14:	d10c      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40012c00 	.word	0x40012c00

08004e54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e5c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004e60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	4013      	ands	r3, r2
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	f107 0014 	add.w	r0, r7, #20
 8004e98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	b004      	add	sp, #16
 8004eca:	4770      	bx	lr

08004ecc <__errno>:
 8004ecc:	4b01      	ldr	r3, [pc, #4]	; (8004ed4 <__errno+0x8>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	2000001c 	.word	0x2000001c

08004ed8 <__sflush_r>:
 8004ed8:	898a      	ldrh	r2, [r1, #12]
 8004eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ede:	4605      	mov	r5, r0
 8004ee0:	0710      	lsls	r0, r2, #28
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	d458      	bmi.n	8004f98 <__sflush_r+0xc0>
 8004ee6:	684b      	ldr	r3, [r1, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	dc05      	bgt.n	8004ef8 <__sflush_r+0x20>
 8004eec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	dc02      	bgt.n	8004ef8 <__sflush_r+0x20>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d0f9      	beq.n	8004ef2 <__sflush_r+0x1a>
 8004efe:	2300      	movs	r3, #0
 8004f00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f04:	682f      	ldr	r7, [r5, #0]
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	d032      	beq.n	8004f70 <__sflush_r+0x98>
 8004f0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	075a      	lsls	r2, r3, #29
 8004f10:	d505      	bpl.n	8004f1e <__sflush_r+0x46>
 8004f12:	6863      	ldr	r3, [r4, #4]
 8004f14:	1ac0      	subs	r0, r0, r3
 8004f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f18:	b10b      	cbz	r3, 8004f1e <__sflush_r+0x46>
 8004f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f1c:	1ac0      	subs	r0, r0, r3
 8004f1e:	2300      	movs	r3, #0
 8004f20:	4602      	mov	r2, r0
 8004f22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f24:	6a21      	ldr	r1, [r4, #32]
 8004f26:	4628      	mov	r0, r5
 8004f28:	47b0      	blx	r6
 8004f2a:	1c43      	adds	r3, r0, #1
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	d106      	bne.n	8004f3e <__sflush_r+0x66>
 8004f30:	6829      	ldr	r1, [r5, #0]
 8004f32:	291d      	cmp	r1, #29
 8004f34:	d82c      	bhi.n	8004f90 <__sflush_r+0xb8>
 8004f36:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <__sflush_r+0x108>)
 8004f38:	40ca      	lsrs	r2, r1
 8004f3a:	07d6      	lsls	r6, r2, #31
 8004f3c:	d528      	bpl.n	8004f90 <__sflush_r+0xb8>
 8004f3e:	2200      	movs	r2, #0
 8004f40:	6062      	str	r2, [r4, #4]
 8004f42:	04d9      	lsls	r1, r3, #19
 8004f44:	6922      	ldr	r2, [r4, #16]
 8004f46:	6022      	str	r2, [r4, #0]
 8004f48:	d504      	bpl.n	8004f54 <__sflush_r+0x7c>
 8004f4a:	1c42      	adds	r2, r0, #1
 8004f4c:	d101      	bne.n	8004f52 <__sflush_r+0x7a>
 8004f4e:	682b      	ldr	r3, [r5, #0]
 8004f50:	b903      	cbnz	r3, 8004f54 <__sflush_r+0x7c>
 8004f52:	6560      	str	r0, [r4, #84]	; 0x54
 8004f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f56:	602f      	str	r7, [r5, #0]
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	d0ca      	beq.n	8004ef2 <__sflush_r+0x1a>
 8004f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f60:	4299      	cmp	r1, r3
 8004f62:	d002      	beq.n	8004f6a <__sflush_r+0x92>
 8004f64:	4628      	mov	r0, r5
 8004f66:	f000 fa03 	bl	8005370 <_free_r>
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8004f6e:	e7c1      	b.n	8004ef4 <__sflush_r+0x1c>
 8004f70:	6a21      	ldr	r1, [r4, #32]
 8004f72:	2301      	movs	r3, #1
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b0      	blx	r6
 8004f78:	1c41      	adds	r1, r0, #1
 8004f7a:	d1c7      	bne.n	8004f0c <__sflush_r+0x34>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0c4      	beq.n	8004f0c <__sflush_r+0x34>
 8004f82:	2b1d      	cmp	r3, #29
 8004f84:	d001      	beq.n	8004f8a <__sflush_r+0xb2>
 8004f86:	2b16      	cmp	r3, #22
 8004f88:	d101      	bne.n	8004f8e <__sflush_r+0xb6>
 8004f8a:	602f      	str	r7, [r5, #0]
 8004f8c:	e7b1      	b.n	8004ef2 <__sflush_r+0x1a>
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f94:	81a3      	strh	r3, [r4, #12]
 8004f96:	e7ad      	b.n	8004ef4 <__sflush_r+0x1c>
 8004f98:	690f      	ldr	r7, [r1, #16]
 8004f9a:	2f00      	cmp	r7, #0
 8004f9c:	d0a9      	beq.n	8004ef2 <__sflush_r+0x1a>
 8004f9e:	0793      	lsls	r3, r2, #30
 8004fa0:	680e      	ldr	r6, [r1, #0]
 8004fa2:	bf08      	it	eq
 8004fa4:	694b      	ldreq	r3, [r1, #20]
 8004fa6:	600f      	str	r7, [r1, #0]
 8004fa8:	bf18      	it	ne
 8004faa:	2300      	movne	r3, #0
 8004fac:	eba6 0807 	sub.w	r8, r6, r7
 8004fb0:	608b      	str	r3, [r1, #8]
 8004fb2:	f1b8 0f00 	cmp.w	r8, #0
 8004fb6:	dd9c      	ble.n	8004ef2 <__sflush_r+0x1a>
 8004fb8:	6a21      	ldr	r1, [r4, #32]
 8004fba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fbc:	4643      	mov	r3, r8
 8004fbe:	463a      	mov	r2, r7
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	47b0      	blx	r6
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	dc06      	bgt.n	8004fd6 <__sflush_r+0xfe>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fd4:	e78e      	b.n	8004ef4 <__sflush_r+0x1c>
 8004fd6:	4407      	add	r7, r0
 8004fd8:	eba8 0800 	sub.w	r8, r8, r0
 8004fdc:	e7e9      	b.n	8004fb2 <__sflush_r+0xda>
 8004fde:	bf00      	nop
 8004fe0:	20400001 	.word	0x20400001

08004fe4 <_fflush_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	690b      	ldr	r3, [r1, #16]
 8004fe8:	4605      	mov	r5, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	b913      	cbnz	r3, 8004ff4 <_fflush_r+0x10>
 8004fee:	2500      	movs	r5, #0
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	b118      	cbz	r0, 8004ffe <_fflush_r+0x1a>
 8004ff6:	6983      	ldr	r3, [r0, #24]
 8004ff8:	b90b      	cbnz	r3, 8004ffe <_fflush_r+0x1a>
 8004ffa:	f000 f887 	bl	800510c <__sinit>
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <_fflush_r+0x6c>)
 8005000:	429c      	cmp	r4, r3
 8005002:	d11b      	bne.n	800503c <_fflush_r+0x58>
 8005004:	686c      	ldr	r4, [r5, #4]
 8005006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ef      	beq.n	8004fee <_fflush_r+0xa>
 800500e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005010:	07d0      	lsls	r0, r2, #31
 8005012:	d404      	bmi.n	800501e <_fflush_r+0x3a>
 8005014:	0599      	lsls	r1, r3, #22
 8005016:	d402      	bmi.n	800501e <_fflush_r+0x3a>
 8005018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800501a:	f000 f93a 	bl	8005292 <__retarget_lock_acquire_recursive>
 800501e:	4628      	mov	r0, r5
 8005020:	4621      	mov	r1, r4
 8005022:	f7ff ff59 	bl	8004ed8 <__sflush_r>
 8005026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005028:	07da      	lsls	r2, r3, #31
 800502a:	4605      	mov	r5, r0
 800502c:	d4e0      	bmi.n	8004ff0 <_fflush_r+0xc>
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	059b      	lsls	r3, r3, #22
 8005032:	d4dd      	bmi.n	8004ff0 <_fflush_r+0xc>
 8005034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005036:	f000 f92d 	bl	8005294 <__retarget_lock_release_recursive>
 800503a:	e7d9      	b.n	8004ff0 <_fflush_r+0xc>
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <_fflush_r+0x70>)
 800503e:	429c      	cmp	r4, r3
 8005040:	d101      	bne.n	8005046 <_fflush_r+0x62>
 8005042:	68ac      	ldr	r4, [r5, #8]
 8005044:	e7df      	b.n	8005006 <_fflush_r+0x22>
 8005046:	4b04      	ldr	r3, [pc, #16]	; (8005058 <_fflush_r+0x74>)
 8005048:	429c      	cmp	r4, r3
 800504a:	bf08      	it	eq
 800504c:	68ec      	ldreq	r4, [r5, #12]
 800504e:	e7da      	b.n	8005006 <_fflush_r+0x22>
 8005050:	08005fe0 	.word	0x08005fe0
 8005054:	08006000 	.word	0x08006000
 8005058:	08005fc0 	.word	0x08005fc0

0800505c <std>:
 800505c:	2300      	movs	r3, #0
 800505e:	b510      	push	{r4, lr}
 8005060:	4604      	mov	r4, r0
 8005062:	e9c0 3300 	strd	r3, r3, [r0]
 8005066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800506a:	6083      	str	r3, [r0, #8]
 800506c:	8181      	strh	r1, [r0, #12]
 800506e:	6643      	str	r3, [r0, #100]	; 0x64
 8005070:	81c2      	strh	r2, [r0, #14]
 8005072:	6183      	str	r3, [r0, #24]
 8005074:	4619      	mov	r1, r3
 8005076:	2208      	movs	r2, #8
 8005078:	305c      	adds	r0, #92	; 0x5c
 800507a:	f000 f971 	bl	8005360 <memset>
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <std+0x38>)
 8005080:	6263      	str	r3, [r4, #36]	; 0x24
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <std+0x3c>)
 8005084:	62a3      	str	r3, [r4, #40]	; 0x28
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <std+0x40>)
 8005088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <std+0x44>)
 800508c:	6224      	str	r4, [r4, #32]
 800508e:	6323      	str	r3, [r4, #48]	; 0x30
 8005090:	bd10      	pop	{r4, pc}
 8005092:	bf00      	nop
 8005094:	08005581 	.word	0x08005581
 8005098:	080055a3 	.word	0x080055a3
 800509c:	080055db 	.word	0x080055db
 80050a0:	080055ff 	.word	0x080055ff

080050a4 <_cleanup_r>:
 80050a4:	4901      	ldr	r1, [pc, #4]	; (80050ac <_cleanup_r+0x8>)
 80050a6:	f000 b8af 	b.w	8005208 <_fwalk_reent>
 80050aa:	bf00      	nop
 80050ac:	08004fe5 	.word	0x08004fe5

080050b0 <__sfmoreglue>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	2268      	movs	r2, #104	; 0x68
 80050b4:	1e4d      	subs	r5, r1, #1
 80050b6:	4355      	muls	r5, r2
 80050b8:	460e      	mov	r6, r1
 80050ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050be:	f000 f9c3 	bl	8005448 <_malloc_r>
 80050c2:	4604      	mov	r4, r0
 80050c4:	b140      	cbz	r0, 80050d8 <__sfmoreglue+0x28>
 80050c6:	2100      	movs	r1, #0
 80050c8:	e9c0 1600 	strd	r1, r6, [r0]
 80050cc:	300c      	adds	r0, #12
 80050ce:	60a0      	str	r0, [r4, #8]
 80050d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050d4:	f000 f944 	bl	8005360 <memset>
 80050d8:	4620      	mov	r0, r4
 80050da:	bd70      	pop	{r4, r5, r6, pc}

080050dc <__sfp_lock_acquire>:
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <__sfp_lock_acquire+0x8>)
 80050de:	f000 b8d8 	b.w	8005292 <__retarget_lock_acquire_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000489 	.word	0x20000489

080050e8 <__sfp_lock_release>:
 80050e8:	4801      	ldr	r0, [pc, #4]	; (80050f0 <__sfp_lock_release+0x8>)
 80050ea:	f000 b8d3 	b.w	8005294 <__retarget_lock_release_recursive>
 80050ee:	bf00      	nop
 80050f0:	20000489 	.word	0x20000489

080050f4 <__sinit_lock_acquire>:
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <__sinit_lock_acquire+0x8>)
 80050f6:	f000 b8cc 	b.w	8005292 <__retarget_lock_acquire_recursive>
 80050fa:	bf00      	nop
 80050fc:	2000048a 	.word	0x2000048a

08005100 <__sinit_lock_release>:
 8005100:	4801      	ldr	r0, [pc, #4]	; (8005108 <__sinit_lock_release+0x8>)
 8005102:	f000 b8c7 	b.w	8005294 <__retarget_lock_release_recursive>
 8005106:	bf00      	nop
 8005108:	2000048a 	.word	0x2000048a

0800510c <__sinit>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4604      	mov	r4, r0
 8005110:	f7ff fff0 	bl	80050f4 <__sinit_lock_acquire>
 8005114:	69a3      	ldr	r3, [r4, #24]
 8005116:	b11b      	cbz	r3, 8005120 <__sinit+0x14>
 8005118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800511c:	f7ff bff0 	b.w	8005100 <__sinit_lock_release>
 8005120:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005124:	6523      	str	r3, [r4, #80]	; 0x50
 8005126:	4b13      	ldr	r3, [pc, #76]	; (8005174 <__sinit+0x68>)
 8005128:	4a13      	ldr	r2, [pc, #76]	; (8005178 <__sinit+0x6c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	62a2      	str	r2, [r4, #40]	; 0x28
 800512e:	42a3      	cmp	r3, r4
 8005130:	bf04      	itt	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	61a3      	streq	r3, [r4, #24]
 8005136:	4620      	mov	r0, r4
 8005138:	f000 f820 	bl	800517c <__sfp>
 800513c:	6060      	str	r0, [r4, #4]
 800513e:	4620      	mov	r0, r4
 8005140:	f000 f81c 	bl	800517c <__sfp>
 8005144:	60a0      	str	r0, [r4, #8]
 8005146:	4620      	mov	r0, r4
 8005148:	f000 f818 	bl	800517c <__sfp>
 800514c:	2200      	movs	r2, #0
 800514e:	60e0      	str	r0, [r4, #12]
 8005150:	2104      	movs	r1, #4
 8005152:	6860      	ldr	r0, [r4, #4]
 8005154:	f7ff ff82 	bl	800505c <std>
 8005158:	68a0      	ldr	r0, [r4, #8]
 800515a:	2201      	movs	r2, #1
 800515c:	2109      	movs	r1, #9
 800515e:	f7ff ff7d 	bl	800505c <std>
 8005162:	68e0      	ldr	r0, [r4, #12]
 8005164:	2202      	movs	r2, #2
 8005166:	2112      	movs	r1, #18
 8005168:	f7ff ff78 	bl	800505c <std>
 800516c:	2301      	movs	r3, #1
 800516e:	61a3      	str	r3, [r4, #24]
 8005170:	e7d2      	b.n	8005118 <__sinit+0xc>
 8005172:	bf00      	nop
 8005174:	08006020 	.word	0x08006020
 8005178:	080050a5 	.word	0x080050a5

0800517c <__sfp>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	4607      	mov	r7, r0
 8005180:	f7ff ffac 	bl	80050dc <__sfp_lock_acquire>
 8005184:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <__sfp+0x84>)
 8005186:	681e      	ldr	r6, [r3, #0]
 8005188:	69b3      	ldr	r3, [r6, #24]
 800518a:	b913      	cbnz	r3, 8005192 <__sfp+0x16>
 800518c:	4630      	mov	r0, r6
 800518e:	f7ff ffbd 	bl	800510c <__sinit>
 8005192:	3648      	adds	r6, #72	; 0x48
 8005194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005198:	3b01      	subs	r3, #1
 800519a:	d503      	bpl.n	80051a4 <__sfp+0x28>
 800519c:	6833      	ldr	r3, [r6, #0]
 800519e:	b30b      	cbz	r3, 80051e4 <__sfp+0x68>
 80051a0:	6836      	ldr	r6, [r6, #0]
 80051a2:	e7f7      	b.n	8005194 <__sfp+0x18>
 80051a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051a8:	b9d5      	cbnz	r5, 80051e0 <__sfp+0x64>
 80051aa:	4b16      	ldr	r3, [pc, #88]	; (8005204 <__sfp+0x88>)
 80051ac:	60e3      	str	r3, [r4, #12]
 80051ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051b2:	6665      	str	r5, [r4, #100]	; 0x64
 80051b4:	f000 f86c 	bl	8005290 <__retarget_lock_init_recursive>
 80051b8:	f7ff ff96 	bl	80050e8 <__sfp_lock_release>
 80051bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051c4:	6025      	str	r5, [r4, #0]
 80051c6:	61a5      	str	r5, [r4, #24]
 80051c8:	2208      	movs	r2, #8
 80051ca:	4629      	mov	r1, r5
 80051cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051d0:	f000 f8c6 	bl	8005360 <memset>
 80051d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051dc:	4620      	mov	r0, r4
 80051de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e0:	3468      	adds	r4, #104	; 0x68
 80051e2:	e7d9      	b.n	8005198 <__sfp+0x1c>
 80051e4:	2104      	movs	r1, #4
 80051e6:	4638      	mov	r0, r7
 80051e8:	f7ff ff62 	bl	80050b0 <__sfmoreglue>
 80051ec:	4604      	mov	r4, r0
 80051ee:	6030      	str	r0, [r6, #0]
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d1d5      	bne.n	80051a0 <__sfp+0x24>
 80051f4:	f7ff ff78 	bl	80050e8 <__sfp_lock_release>
 80051f8:	230c      	movs	r3, #12
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	e7ee      	b.n	80051dc <__sfp+0x60>
 80051fe:	bf00      	nop
 8005200:	08006020 	.word	0x08006020
 8005204:	ffff0001 	.word	0xffff0001

08005208 <_fwalk_reent>:
 8005208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800520c:	4606      	mov	r6, r0
 800520e:	4688      	mov	r8, r1
 8005210:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005214:	2700      	movs	r7, #0
 8005216:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800521a:	f1b9 0901 	subs.w	r9, r9, #1
 800521e:	d505      	bpl.n	800522c <_fwalk_reent+0x24>
 8005220:	6824      	ldr	r4, [r4, #0]
 8005222:	2c00      	cmp	r4, #0
 8005224:	d1f7      	bne.n	8005216 <_fwalk_reent+0xe>
 8005226:	4638      	mov	r0, r7
 8005228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800522c:	89ab      	ldrh	r3, [r5, #12]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d907      	bls.n	8005242 <_fwalk_reent+0x3a>
 8005232:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005236:	3301      	adds	r3, #1
 8005238:	d003      	beq.n	8005242 <_fwalk_reent+0x3a>
 800523a:	4629      	mov	r1, r5
 800523c:	4630      	mov	r0, r6
 800523e:	47c0      	blx	r8
 8005240:	4307      	orrs	r7, r0
 8005242:	3568      	adds	r5, #104	; 0x68
 8005244:	e7e9      	b.n	800521a <_fwalk_reent+0x12>
	...

08005248 <__libc_init_array>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	4d0d      	ldr	r5, [pc, #52]	; (8005280 <__libc_init_array+0x38>)
 800524c:	4c0d      	ldr	r4, [pc, #52]	; (8005284 <__libc_init_array+0x3c>)
 800524e:	1b64      	subs	r4, r4, r5
 8005250:	10a4      	asrs	r4, r4, #2
 8005252:	2600      	movs	r6, #0
 8005254:	42a6      	cmp	r6, r4
 8005256:	d109      	bne.n	800526c <__libc_init_array+0x24>
 8005258:	4d0b      	ldr	r5, [pc, #44]	; (8005288 <__libc_init_array+0x40>)
 800525a:	4c0c      	ldr	r4, [pc, #48]	; (800528c <__libc_init_array+0x44>)
 800525c:	f000 fdf6 	bl	8005e4c <_init>
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	2600      	movs	r6, #0
 8005266:	42a6      	cmp	r6, r4
 8005268:	d105      	bne.n	8005276 <__libc_init_array+0x2e>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005270:	4798      	blx	r3
 8005272:	3601      	adds	r6, #1
 8005274:	e7ee      	b.n	8005254 <__libc_init_array+0xc>
 8005276:	f855 3b04 	ldr.w	r3, [r5], #4
 800527a:	4798      	blx	r3
 800527c:	3601      	adds	r6, #1
 800527e:	e7f2      	b.n	8005266 <__libc_init_array+0x1e>
 8005280:	08006058 	.word	0x08006058
 8005284:	08006058 	.word	0x08006058
 8005288:	08006058 	.word	0x08006058
 800528c:	0800605c 	.word	0x0800605c

08005290 <__retarget_lock_init_recursive>:
 8005290:	4770      	bx	lr

08005292 <__retarget_lock_acquire_recursive>:
 8005292:	4770      	bx	lr

08005294 <__retarget_lock_release_recursive>:
 8005294:	4770      	bx	lr

08005296 <__swhatbuf_r>:
 8005296:	b570      	push	{r4, r5, r6, lr}
 8005298:	460e      	mov	r6, r1
 800529a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529e:	2900      	cmp	r1, #0
 80052a0:	b096      	sub	sp, #88	; 0x58
 80052a2:	4614      	mov	r4, r2
 80052a4:	461d      	mov	r5, r3
 80052a6:	da08      	bge.n	80052ba <__swhatbuf_r+0x24>
 80052a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	602a      	str	r2, [r5, #0]
 80052b0:	061a      	lsls	r2, r3, #24
 80052b2:	d410      	bmi.n	80052d6 <__swhatbuf_r+0x40>
 80052b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b8:	e00e      	b.n	80052d8 <__swhatbuf_r+0x42>
 80052ba:	466a      	mov	r2, sp
 80052bc:	f000 f9c6 	bl	800564c <_fstat_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	dbf1      	blt.n	80052a8 <__swhatbuf_r+0x12>
 80052c4:	9a01      	ldr	r2, [sp, #4]
 80052c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052ce:	425a      	negs	r2, r3
 80052d0:	415a      	adcs	r2, r3
 80052d2:	602a      	str	r2, [r5, #0]
 80052d4:	e7ee      	b.n	80052b4 <__swhatbuf_r+0x1e>
 80052d6:	2340      	movs	r3, #64	; 0x40
 80052d8:	2000      	movs	r0, #0
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	b016      	add	sp, #88	; 0x58
 80052de:	bd70      	pop	{r4, r5, r6, pc}

080052e0 <__smakebuf_r>:
 80052e0:	898b      	ldrh	r3, [r1, #12]
 80052e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052e4:	079d      	lsls	r5, r3, #30
 80052e6:	4606      	mov	r6, r0
 80052e8:	460c      	mov	r4, r1
 80052ea:	d507      	bpl.n	80052fc <__smakebuf_r+0x1c>
 80052ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	2301      	movs	r3, #1
 80052f6:	6163      	str	r3, [r4, #20]
 80052f8:	b002      	add	sp, #8
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	ab01      	add	r3, sp, #4
 80052fe:	466a      	mov	r2, sp
 8005300:	f7ff ffc9 	bl	8005296 <__swhatbuf_r>
 8005304:	9900      	ldr	r1, [sp, #0]
 8005306:	4605      	mov	r5, r0
 8005308:	4630      	mov	r0, r6
 800530a:	f000 f89d 	bl	8005448 <_malloc_r>
 800530e:	b948      	cbnz	r0, 8005324 <__smakebuf_r+0x44>
 8005310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005314:	059a      	lsls	r2, r3, #22
 8005316:	d4ef      	bmi.n	80052f8 <__smakebuf_r+0x18>
 8005318:	f023 0303 	bic.w	r3, r3, #3
 800531c:	f043 0302 	orr.w	r3, r3, #2
 8005320:	81a3      	strh	r3, [r4, #12]
 8005322:	e7e3      	b.n	80052ec <__smakebuf_r+0xc>
 8005324:	4b0d      	ldr	r3, [pc, #52]	; (800535c <__smakebuf_r+0x7c>)
 8005326:	62b3      	str	r3, [r6, #40]	; 0x28
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	6020      	str	r0, [r4, #0]
 800532c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	9b00      	ldr	r3, [sp, #0]
 8005334:	6163      	str	r3, [r4, #20]
 8005336:	9b01      	ldr	r3, [sp, #4]
 8005338:	6120      	str	r0, [r4, #16]
 800533a:	b15b      	cbz	r3, 8005354 <__smakebuf_r+0x74>
 800533c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005340:	4630      	mov	r0, r6
 8005342:	f000 f995 	bl	8005670 <_isatty_r>
 8005346:	b128      	cbz	r0, 8005354 <__smakebuf_r+0x74>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	89a0      	ldrh	r0, [r4, #12]
 8005356:	4305      	orrs	r5, r0
 8005358:	81a5      	strh	r5, [r4, #12]
 800535a:	e7cd      	b.n	80052f8 <__smakebuf_r+0x18>
 800535c:	080050a5 	.word	0x080050a5

08005360 <memset>:
 8005360:	4402      	add	r2, r0
 8005362:	4603      	mov	r3, r0
 8005364:	4293      	cmp	r3, r2
 8005366:	d100      	bne.n	800536a <memset+0xa>
 8005368:	4770      	bx	lr
 800536a:	f803 1b01 	strb.w	r1, [r3], #1
 800536e:	e7f9      	b.n	8005364 <memset+0x4>

08005370 <_free_r>:
 8005370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005372:	2900      	cmp	r1, #0
 8005374:	d044      	beq.n	8005400 <_free_r+0x90>
 8005376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800537a:	9001      	str	r0, [sp, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f1a1 0404 	sub.w	r4, r1, #4
 8005382:	bfb8      	it	lt
 8005384:	18e4      	addlt	r4, r4, r3
 8005386:	f000 f995 	bl	80056b4 <__malloc_lock>
 800538a:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <_free_r+0x94>)
 800538c:	9801      	ldr	r0, [sp, #4]
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	b933      	cbnz	r3, 80053a0 <_free_r+0x30>
 8005392:	6063      	str	r3, [r4, #4]
 8005394:	6014      	str	r4, [r2, #0]
 8005396:	b003      	add	sp, #12
 8005398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800539c:	f000 b990 	b.w	80056c0 <__malloc_unlock>
 80053a0:	42a3      	cmp	r3, r4
 80053a2:	d908      	bls.n	80053b6 <_free_r+0x46>
 80053a4:	6825      	ldr	r5, [r4, #0]
 80053a6:	1961      	adds	r1, r4, r5
 80053a8:	428b      	cmp	r3, r1
 80053aa:	bf01      	itttt	eq
 80053ac:	6819      	ldreq	r1, [r3, #0]
 80053ae:	685b      	ldreq	r3, [r3, #4]
 80053b0:	1949      	addeq	r1, r1, r5
 80053b2:	6021      	streq	r1, [r4, #0]
 80053b4:	e7ed      	b.n	8005392 <_free_r+0x22>
 80053b6:	461a      	mov	r2, r3
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	b10b      	cbz	r3, 80053c0 <_free_r+0x50>
 80053bc:	42a3      	cmp	r3, r4
 80053be:	d9fa      	bls.n	80053b6 <_free_r+0x46>
 80053c0:	6811      	ldr	r1, [r2, #0]
 80053c2:	1855      	adds	r5, r2, r1
 80053c4:	42a5      	cmp	r5, r4
 80053c6:	d10b      	bne.n	80053e0 <_free_r+0x70>
 80053c8:	6824      	ldr	r4, [r4, #0]
 80053ca:	4421      	add	r1, r4
 80053cc:	1854      	adds	r4, r2, r1
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	6011      	str	r1, [r2, #0]
 80053d2:	d1e0      	bne.n	8005396 <_free_r+0x26>
 80053d4:	681c      	ldr	r4, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	6053      	str	r3, [r2, #4]
 80053da:	4421      	add	r1, r4
 80053dc:	6011      	str	r1, [r2, #0]
 80053de:	e7da      	b.n	8005396 <_free_r+0x26>
 80053e0:	d902      	bls.n	80053e8 <_free_r+0x78>
 80053e2:	230c      	movs	r3, #12
 80053e4:	6003      	str	r3, [r0, #0]
 80053e6:	e7d6      	b.n	8005396 <_free_r+0x26>
 80053e8:	6825      	ldr	r5, [r4, #0]
 80053ea:	1961      	adds	r1, r4, r5
 80053ec:	428b      	cmp	r3, r1
 80053ee:	bf04      	itt	eq
 80053f0:	6819      	ldreq	r1, [r3, #0]
 80053f2:	685b      	ldreq	r3, [r3, #4]
 80053f4:	6063      	str	r3, [r4, #4]
 80053f6:	bf04      	itt	eq
 80053f8:	1949      	addeq	r1, r1, r5
 80053fa:	6021      	streq	r1, [r4, #0]
 80053fc:	6054      	str	r4, [r2, #4]
 80053fe:	e7ca      	b.n	8005396 <_free_r+0x26>
 8005400:	b003      	add	sp, #12
 8005402:	bd30      	pop	{r4, r5, pc}
 8005404:	2000048c 	.word	0x2000048c

08005408 <sbrk_aligned>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4e0e      	ldr	r6, [pc, #56]	; (8005444 <sbrk_aligned+0x3c>)
 800540c:	460c      	mov	r4, r1
 800540e:	6831      	ldr	r1, [r6, #0]
 8005410:	4605      	mov	r5, r0
 8005412:	b911      	cbnz	r1, 800541a <sbrk_aligned+0x12>
 8005414:	f000 f8a4 	bl	8005560 <_sbrk_r>
 8005418:	6030      	str	r0, [r6, #0]
 800541a:	4621      	mov	r1, r4
 800541c:	4628      	mov	r0, r5
 800541e:	f000 f89f 	bl	8005560 <_sbrk_r>
 8005422:	1c43      	adds	r3, r0, #1
 8005424:	d00a      	beq.n	800543c <sbrk_aligned+0x34>
 8005426:	1cc4      	adds	r4, r0, #3
 8005428:	f024 0403 	bic.w	r4, r4, #3
 800542c:	42a0      	cmp	r0, r4
 800542e:	d007      	beq.n	8005440 <sbrk_aligned+0x38>
 8005430:	1a21      	subs	r1, r4, r0
 8005432:	4628      	mov	r0, r5
 8005434:	f000 f894 	bl	8005560 <_sbrk_r>
 8005438:	3001      	adds	r0, #1
 800543a:	d101      	bne.n	8005440 <sbrk_aligned+0x38>
 800543c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005440:	4620      	mov	r0, r4
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	20000490 	.word	0x20000490

08005448 <_malloc_r>:
 8005448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544c:	1ccd      	adds	r5, r1, #3
 800544e:	f025 0503 	bic.w	r5, r5, #3
 8005452:	3508      	adds	r5, #8
 8005454:	2d0c      	cmp	r5, #12
 8005456:	bf38      	it	cc
 8005458:	250c      	movcc	r5, #12
 800545a:	2d00      	cmp	r5, #0
 800545c:	4607      	mov	r7, r0
 800545e:	db01      	blt.n	8005464 <_malloc_r+0x1c>
 8005460:	42a9      	cmp	r1, r5
 8005462:	d905      	bls.n	8005470 <_malloc_r+0x28>
 8005464:	230c      	movs	r3, #12
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	2600      	movs	r6, #0
 800546a:	4630      	mov	r0, r6
 800546c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005470:	4e2e      	ldr	r6, [pc, #184]	; (800552c <_malloc_r+0xe4>)
 8005472:	f000 f91f 	bl	80056b4 <__malloc_lock>
 8005476:	6833      	ldr	r3, [r6, #0]
 8005478:	461c      	mov	r4, r3
 800547a:	bb34      	cbnz	r4, 80054ca <_malloc_r+0x82>
 800547c:	4629      	mov	r1, r5
 800547e:	4638      	mov	r0, r7
 8005480:	f7ff ffc2 	bl	8005408 <sbrk_aligned>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	4604      	mov	r4, r0
 8005488:	d14d      	bne.n	8005526 <_malloc_r+0xde>
 800548a:	6834      	ldr	r4, [r6, #0]
 800548c:	4626      	mov	r6, r4
 800548e:	2e00      	cmp	r6, #0
 8005490:	d140      	bne.n	8005514 <_malloc_r+0xcc>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	4631      	mov	r1, r6
 8005496:	4638      	mov	r0, r7
 8005498:	eb04 0803 	add.w	r8, r4, r3
 800549c:	f000 f860 	bl	8005560 <_sbrk_r>
 80054a0:	4580      	cmp	r8, r0
 80054a2:	d13a      	bne.n	800551a <_malloc_r+0xd2>
 80054a4:	6821      	ldr	r1, [r4, #0]
 80054a6:	3503      	adds	r5, #3
 80054a8:	1a6d      	subs	r5, r5, r1
 80054aa:	f025 0503 	bic.w	r5, r5, #3
 80054ae:	3508      	adds	r5, #8
 80054b0:	2d0c      	cmp	r5, #12
 80054b2:	bf38      	it	cc
 80054b4:	250c      	movcc	r5, #12
 80054b6:	4629      	mov	r1, r5
 80054b8:	4638      	mov	r0, r7
 80054ba:	f7ff ffa5 	bl	8005408 <sbrk_aligned>
 80054be:	3001      	adds	r0, #1
 80054c0:	d02b      	beq.n	800551a <_malloc_r+0xd2>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	442b      	add	r3, r5
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	e00e      	b.n	80054e8 <_malloc_r+0xa0>
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	1b52      	subs	r2, r2, r5
 80054ce:	d41e      	bmi.n	800550e <_malloc_r+0xc6>
 80054d0:	2a0b      	cmp	r2, #11
 80054d2:	d916      	bls.n	8005502 <_malloc_r+0xba>
 80054d4:	1961      	adds	r1, r4, r5
 80054d6:	42a3      	cmp	r3, r4
 80054d8:	6025      	str	r5, [r4, #0]
 80054da:	bf18      	it	ne
 80054dc:	6059      	strne	r1, [r3, #4]
 80054de:	6863      	ldr	r3, [r4, #4]
 80054e0:	bf08      	it	eq
 80054e2:	6031      	streq	r1, [r6, #0]
 80054e4:	5162      	str	r2, [r4, r5]
 80054e6:	604b      	str	r3, [r1, #4]
 80054e8:	4638      	mov	r0, r7
 80054ea:	f104 060b 	add.w	r6, r4, #11
 80054ee:	f000 f8e7 	bl	80056c0 <__malloc_unlock>
 80054f2:	f026 0607 	bic.w	r6, r6, #7
 80054f6:	1d23      	adds	r3, r4, #4
 80054f8:	1af2      	subs	r2, r6, r3
 80054fa:	d0b6      	beq.n	800546a <_malloc_r+0x22>
 80054fc:	1b9b      	subs	r3, r3, r6
 80054fe:	50a3      	str	r3, [r4, r2]
 8005500:	e7b3      	b.n	800546a <_malloc_r+0x22>
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	42a3      	cmp	r3, r4
 8005506:	bf0c      	ite	eq
 8005508:	6032      	streq	r2, [r6, #0]
 800550a:	605a      	strne	r2, [r3, #4]
 800550c:	e7ec      	b.n	80054e8 <_malloc_r+0xa0>
 800550e:	4623      	mov	r3, r4
 8005510:	6864      	ldr	r4, [r4, #4]
 8005512:	e7b2      	b.n	800547a <_malloc_r+0x32>
 8005514:	4634      	mov	r4, r6
 8005516:	6876      	ldr	r6, [r6, #4]
 8005518:	e7b9      	b.n	800548e <_malloc_r+0x46>
 800551a:	230c      	movs	r3, #12
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	4638      	mov	r0, r7
 8005520:	f000 f8ce 	bl	80056c0 <__malloc_unlock>
 8005524:	e7a1      	b.n	800546a <_malloc_r+0x22>
 8005526:	6025      	str	r5, [r4, #0]
 8005528:	e7de      	b.n	80054e8 <_malloc_r+0xa0>
 800552a:	bf00      	nop
 800552c:	2000048c 	.word	0x2000048c

08005530 <iprintf>:
 8005530:	b40f      	push	{r0, r1, r2, r3}
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <iprintf+0x2c>)
 8005534:	b513      	push	{r0, r1, r4, lr}
 8005536:	681c      	ldr	r4, [r3, #0]
 8005538:	b124      	cbz	r4, 8005544 <iprintf+0x14>
 800553a:	69a3      	ldr	r3, [r4, #24]
 800553c:	b913      	cbnz	r3, 8005544 <iprintf+0x14>
 800553e:	4620      	mov	r0, r4
 8005540:	f7ff fde4 	bl	800510c <__sinit>
 8005544:	ab05      	add	r3, sp, #20
 8005546:	9a04      	ldr	r2, [sp, #16]
 8005548:	68a1      	ldr	r1, [r4, #8]
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	4620      	mov	r0, r4
 800554e:	f000 f8e7 	bl	8005720 <_vfiprintf_r>
 8005552:	b002      	add	sp, #8
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005558:	b004      	add	sp, #16
 800555a:	4770      	bx	lr
 800555c:	2000001c 	.word	0x2000001c

08005560 <_sbrk_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d06      	ldr	r5, [pc, #24]	; (800557c <_sbrk_r+0x1c>)
 8005564:	2300      	movs	r3, #0
 8005566:	4604      	mov	r4, r0
 8005568:	4608      	mov	r0, r1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	f7fb fd6e 	bl	800104c <_sbrk>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_sbrk_r+0x1a>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_sbrk_r+0x1a>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000494 	.word	0x20000494

08005580 <__sread>:
 8005580:	b510      	push	{r4, lr}
 8005582:	460c      	mov	r4, r1
 8005584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005588:	f000 fb8e 	bl	8005ca8 <_read_r>
 800558c:	2800      	cmp	r0, #0
 800558e:	bfab      	itete	ge
 8005590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005592:	89a3      	ldrhlt	r3, [r4, #12]
 8005594:	181b      	addge	r3, r3, r0
 8005596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800559a:	bfac      	ite	ge
 800559c:	6563      	strge	r3, [r4, #84]	; 0x54
 800559e:	81a3      	strhlt	r3, [r4, #12]
 80055a0:	bd10      	pop	{r4, pc}

080055a2 <__swrite>:
 80055a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a6:	461f      	mov	r7, r3
 80055a8:	898b      	ldrh	r3, [r1, #12]
 80055aa:	05db      	lsls	r3, r3, #23
 80055ac:	4605      	mov	r5, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	4616      	mov	r6, r2
 80055b2:	d505      	bpl.n	80055c0 <__swrite+0x1e>
 80055b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b8:	2302      	movs	r3, #2
 80055ba:	2200      	movs	r2, #0
 80055bc:	f000 f868 	bl	8005690 <_lseek_r>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	4632      	mov	r2, r6
 80055ce:	463b      	mov	r3, r7
 80055d0:	4628      	mov	r0, r5
 80055d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055d6:	f000 b817 	b.w	8005608 <_write_r>

080055da <__sseek>:
 80055da:	b510      	push	{r4, lr}
 80055dc:	460c      	mov	r4, r1
 80055de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e2:	f000 f855 	bl	8005690 <_lseek_r>
 80055e6:	1c43      	adds	r3, r0, #1
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	bf15      	itete	ne
 80055ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80055ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055f6:	81a3      	strheq	r3, [r4, #12]
 80055f8:	bf18      	it	ne
 80055fa:	81a3      	strhne	r3, [r4, #12]
 80055fc:	bd10      	pop	{r4, pc}

080055fe <__sclose>:
 80055fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005602:	f000 b813 	b.w	800562c <_close_r>
	...

08005608 <_write_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4d07      	ldr	r5, [pc, #28]	; (8005628 <_write_r+0x20>)
 800560c:	4604      	mov	r4, r0
 800560e:	4608      	mov	r0, r1
 8005610:	4611      	mov	r1, r2
 8005612:	2200      	movs	r2, #0
 8005614:	602a      	str	r2, [r5, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	f7fb fcc8 	bl	8000fac <_write>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_write_r+0x1e>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_write_r+0x1e>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	20000494 	.word	0x20000494

0800562c <_close_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4d06      	ldr	r5, [pc, #24]	; (8005648 <_close_r+0x1c>)
 8005630:	2300      	movs	r3, #0
 8005632:	4604      	mov	r4, r0
 8005634:	4608      	mov	r0, r1
 8005636:	602b      	str	r3, [r5, #0]
 8005638:	f7fb fcd4 	bl	8000fe4 <_close>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d102      	bne.n	8005646 <_close_r+0x1a>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b103      	cbz	r3, 8005646 <_close_r+0x1a>
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	20000494 	.word	0x20000494

0800564c <_fstat_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4d07      	ldr	r5, [pc, #28]	; (800566c <_fstat_r+0x20>)
 8005650:	2300      	movs	r3, #0
 8005652:	4604      	mov	r4, r0
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	602b      	str	r3, [r5, #0]
 800565a:	f7fb fccf 	bl	8000ffc <_fstat>
 800565e:	1c43      	adds	r3, r0, #1
 8005660:	d102      	bne.n	8005668 <_fstat_r+0x1c>
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	b103      	cbz	r3, 8005668 <_fstat_r+0x1c>
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	bd38      	pop	{r3, r4, r5, pc}
 800566a:	bf00      	nop
 800566c:	20000494 	.word	0x20000494

08005670 <_isatty_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4d06      	ldr	r5, [pc, #24]	; (800568c <_isatty_r+0x1c>)
 8005674:	2300      	movs	r3, #0
 8005676:	4604      	mov	r4, r0
 8005678:	4608      	mov	r0, r1
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	f7fb fcce 	bl	800101c <_isatty>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d102      	bne.n	800568a <_isatty_r+0x1a>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	b103      	cbz	r3, 800568a <_isatty_r+0x1a>
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	bd38      	pop	{r3, r4, r5, pc}
 800568c:	20000494 	.word	0x20000494

08005690 <_lseek_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d07      	ldr	r5, [pc, #28]	; (80056b0 <_lseek_r+0x20>)
 8005694:	4604      	mov	r4, r0
 8005696:	4608      	mov	r0, r1
 8005698:	4611      	mov	r1, r2
 800569a:	2200      	movs	r2, #0
 800569c:	602a      	str	r2, [r5, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	f7fb fcc7 	bl	8001032 <_lseek>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_lseek_r+0x1e>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_lseek_r+0x1e>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	20000494 	.word	0x20000494

080056b4 <__malloc_lock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__malloc_lock+0x8>)
 80056b6:	f7ff bdec 	b.w	8005292 <__retarget_lock_acquire_recursive>
 80056ba:	bf00      	nop
 80056bc:	20000488 	.word	0x20000488

080056c0 <__malloc_unlock>:
 80056c0:	4801      	ldr	r0, [pc, #4]	; (80056c8 <__malloc_unlock+0x8>)
 80056c2:	f7ff bde7 	b.w	8005294 <__retarget_lock_release_recursive>
 80056c6:	bf00      	nop
 80056c8:	20000488 	.word	0x20000488

080056cc <__sfputc_r>:
 80056cc:	6893      	ldr	r3, [r2, #8]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	b410      	push	{r4}
 80056d4:	6093      	str	r3, [r2, #8]
 80056d6:	da08      	bge.n	80056ea <__sfputc_r+0x1e>
 80056d8:	6994      	ldr	r4, [r2, #24]
 80056da:	42a3      	cmp	r3, r4
 80056dc:	db01      	blt.n	80056e2 <__sfputc_r+0x16>
 80056de:	290a      	cmp	r1, #10
 80056e0:	d103      	bne.n	80056ea <__sfputc_r+0x1e>
 80056e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056e6:	f000 baf1 	b.w	8005ccc <__swbuf_r>
 80056ea:	6813      	ldr	r3, [r2, #0]
 80056ec:	1c58      	adds	r0, r3, #1
 80056ee:	6010      	str	r0, [r2, #0]
 80056f0:	7019      	strb	r1, [r3, #0]
 80056f2:	4608      	mov	r0, r1
 80056f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <__sfputs_r>:
 80056fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fc:	4606      	mov	r6, r0
 80056fe:	460f      	mov	r7, r1
 8005700:	4614      	mov	r4, r2
 8005702:	18d5      	adds	r5, r2, r3
 8005704:	42ac      	cmp	r4, r5
 8005706:	d101      	bne.n	800570c <__sfputs_r+0x12>
 8005708:	2000      	movs	r0, #0
 800570a:	e007      	b.n	800571c <__sfputs_r+0x22>
 800570c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005710:	463a      	mov	r2, r7
 8005712:	4630      	mov	r0, r6
 8005714:	f7ff ffda 	bl	80056cc <__sfputc_r>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d1f3      	bne.n	8005704 <__sfputs_r+0xa>
 800571c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005720 <_vfiprintf_r>:
 8005720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	460d      	mov	r5, r1
 8005726:	b09d      	sub	sp, #116	; 0x74
 8005728:	4614      	mov	r4, r2
 800572a:	4698      	mov	r8, r3
 800572c:	4606      	mov	r6, r0
 800572e:	b118      	cbz	r0, 8005738 <_vfiprintf_r+0x18>
 8005730:	6983      	ldr	r3, [r0, #24]
 8005732:	b90b      	cbnz	r3, 8005738 <_vfiprintf_r+0x18>
 8005734:	f7ff fcea 	bl	800510c <__sinit>
 8005738:	4b89      	ldr	r3, [pc, #548]	; (8005960 <_vfiprintf_r+0x240>)
 800573a:	429d      	cmp	r5, r3
 800573c:	d11b      	bne.n	8005776 <_vfiprintf_r+0x56>
 800573e:	6875      	ldr	r5, [r6, #4]
 8005740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005742:	07d9      	lsls	r1, r3, #31
 8005744:	d405      	bmi.n	8005752 <_vfiprintf_r+0x32>
 8005746:	89ab      	ldrh	r3, [r5, #12]
 8005748:	059a      	lsls	r2, r3, #22
 800574a:	d402      	bmi.n	8005752 <_vfiprintf_r+0x32>
 800574c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800574e:	f7ff fda0 	bl	8005292 <__retarget_lock_acquire_recursive>
 8005752:	89ab      	ldrh	r3, [r5, #12]
 8005754:	071b      	lsls	r3, r3, #28
 8005756:	d501      	bpl.n	800575c <_vfiprintf_r+0x3c>
 8005758:	692b      	ldr	r3, [r5, #16]
 800575a:	b9eb      	cbnz	r3, 8005798 <_vfiprintf_r+0x78>
 800575c:	4629      	mov	r1, r5
 800575e:	4630      	mov	r0, r6
 8005760:	f000 fb06 	bl	8005d70 <__swsetup_r>
 8005764:	b1c0      	cbz	r0, 8005798 <_vfiprintf_r+0x78>
 8005766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005768:	07dc      	lsls	r4, r3, #31
 800576a:	d50e      	bpl.n	800578a <_vfiprintf_r+0x6a>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005770:	b01d      	add	sp, #116	; 0x74
 8005772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005776:	4b7b      	ldr	r3, [pc, #492]	; (8005964 <_vfiprintf_r+0x244>)
 8005778:	429d      	cmp	r5, r3
 800577a:	d101      	bne.n	8005780 <_vfiprintf_r+0x60>
 800577c:	68b5      	ldr	r5, [r6, #8]
 800577e:	e7df      	b.n	8005740 <_vfiprintf_r+0x20>
 8005780:	4b79      	ldr	r3, [pc, #484]	; (8005968 <_vfiprintf_r+0x248>)
 8005782:	429d      	cmp	r5, r3
 8005784:	bf08      	it	eq
 8005786:	68f5      	ldreq	r5, [r6, #12]
 8005788:	e7da      	b.n	8005740 <_vfiprintf_r+0x20>
 800578a:	89ab      	ldrh	r3, [r5, #12]
 800578c:	0598      	lsls	r0, r3, #22
 800578e:	d4ed      	bmi.n	800576c <_vfiprintf_r+0x4c>
 8005790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005792:	f7ff fd7f 	bl	8005294 <__retarget_lock_release_recursive>
 8005796:	e7e9      	b.n	800576c <_vfiprintf_r+0x4c>
 8005798:	2300      	movs	r3, #0
 800579a:	9309      	str	r3, [sp, #36]	; 0x24
 800579c:	2320      	movs	r3, #32
 800579e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80057a6:	2330      	movs	r3, #48	; 0x30
 80057a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800596c <_vfiprintf_r+0x24c>
 80057ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057b0:	f04f 0901 	mov.w	r9, #1
 80057b4:	4623      	mov	r3, r4
 80057b6:	469a      	mov	sl, r3
 80057b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057bc:	b10a      	cbz	r2, 80057c2 <_vfiprintf_r+0xa2>
 80057be:	2a25      	cmp	r2, #37	; 0x25
 80057c0:	d1f9      	bne.n	80057b6 <_vfiprintf_r+0x96>
 80057c2:	ebba 0b04 	subs.w	fp, sl, r4
 80057c6:	d00b      	beq.n	80057e0 <_vfiprintf_r+0xc0>
 80057c8:	465b      	mov	r3, fp
 80057ca:	4622      	mov	r2, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	4630      	mov	r0, r6
 80057d0:	f7ff ff93 	bl	80056fa <__sfputs_r>
 80057d4:	3001      	adds	r0, #1
 80057d6:	f000 80aa 	beq.w	800592e <_vfiprintf_r+0x20e>
 80057da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057dc:	445a      	add	r2, fp
 80057de:	9209      	str	r2, [sp, #36]	; 0x24
 80057e0:	f89a 3000 	ldrb.w	r3, [sl]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a2 	beq.w	800592e <_vfiprintf_r+0x20e>
 80057ea:	2300      	movs	r3, #0
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057f4:	f10a 0a01 	add.w	sl, sl, #1
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	9307      	str	r3, [sp, #28]
 80057fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005800:	931a      	str	r3, [sp, #104]	; 0x68
 8005802:	4654      	mov	r4, sl
 8005804:	2205      	movs	r2, #5
 8005806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800580a:	4858      	ldr	r0, [pc, #352]	; (800596c <_vfiprintf_r+0x24c>)
 800580c:	f7fa fcb8 	bl	8000180 <memchr>
 8005810:	9a04      	ldr	r2, [sp, #16]
 8005812:	b9d8      	cbnz	r0, 800584c <_vfiprintf_r+0x12c>
 8005814:	06d1      	lsls	r1, r2, #27
 8005816:	bf44      	itt	mi
 8005818:	2320      	movmi	r3, #32
 800581a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800581e:	0713      	lsls	r3, r2, #28
 8005820:	bf44      	itt	mi
 8005822:	232b      	movmi	r3, #43	; 0x2b
 8005824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005828:	f89a 3000 	ldrb.w	r3, [sl]
 800582c:	2b2a      	cmp	r3, #42	; 0x2a
 800582e:	d015      	beq.n	800585c <_vfiprintf_r+0x13c>
 8005830:	9a07      	ldr	r2, [sp, #28]
 8005832:	4654      	mov	r4, sl
 8005834:	2000      	movs	r0, #0
 8005836:	f04f 0c0a 	mov.w	ip, #10
 800583a:	4621      	mov	r1, r4
 800583c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005840:	3b30      	subs	r3, #48	; 0x30
 8005842:	2b09      	cmp	r3, #9
 8005844:	d94e      	bls.n	80058e4 <_vfiprintf_r+0x1c4>
 8005846:	b1b0      	cbz	r0, 8005876 <_vfiprintf_r+0x156>
 8005848:	9207      	str	r2, [sp, #28]
 800584a:	e014      	b.n	8005876 <_vfiprintf_r+0x156>
 800584c:	eba0 0308 	sub.w	r3, r0, r8
 8005850:	fa09 f303 	lsl.w	r3, r9, r3
 8005854:	4313      	orrs	r3, r2
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	46a2      	mov	sl, r4
 800585a:	e7d2      	b.n	8005802 <_vfiprintf_r+0xe2>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	1d19      	adds	r1, r3, #4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	9103      	str	r1, [sp, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	bfbb      	ittet	lt
 8005868:	425b      	neglt	r3, r3
 800586a:	f042 0202 	orrlt.w	r2, r2, #2
 800586e:	9307      	strge	r3, [sp, #28]
 8005870:	9307      	strlt	r3, [sp, #28]
 8005872:	bfb8      	it	lt
 8005874:	9204      	strlt	r2, [sp, #16]
 8005876:	7823      	ldrb	r3, [r4, #0]
 8005878:	2b2e      	cmp	r3, #46	; 0x2e
 800587a:	d10c      	bne.n	8005896 <_vfiprintf_r+0x176>
 800587c:	7863      	ldrb	r3, [r4, #1]
 800587e:	2b2a      	cmp	r3, #42	; 0x2a
 8005880:	d135      	bne.n	80058ee <_vfiprintf_r+0x1ce>
 8005882:	9b03      	ldr	r3, [sp, #12]
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	9203      	str	r2, [sp, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	bfb8      	it	lt
 800588e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005892:	3402      	adds	r4, #2
 8005894:	9305      	str	r3, [sp, #20]
 8005896:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800597c <_vfiprintf_r+0x25c>
 800589a:	7821      	ldrb	r1, [r4, #0]
 800589c:	2203      	movs	r2, #3
 800589e:	4650      	mov	r0, sl
 80058a0:	f7fa fc6e 	bl	8000180 <memchr>
 80058a4:	b140      	cbz	r0, 80058b8 <_vfiprintf_r+0x198>
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	eba0 000a 	sub.w	r0, r0, sl
 80058ac:	fa03 f000 	lsl.w	r0, r3, r0
 80058b0:	9b04      	ldr	r3, [sp, #16]
 80058b2:	4303      	orrs	r3, r0
 80058b4:	3401      	adds	r4, #1
 80058b6:	9304      	str	r3, [sp, #16]
 80058b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058bc:	482c      	ldr	r0, [pc, #176]	; (8005970 <_vfiprintf_r+0x250>)
 80058be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058c2:	2206      	movs	r2, #6
 80058c4:	f7fa fc5c 	bl	8000180 <memchr>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d03f      	beq.n	800594c <_vfiprintf_r+0x22c>
 80058cc:	4b29      	ldr	r3, [pc, #164]	; (8005974 <_vfiprintf_r+0x254>)
 80058ce:	bb1b      	cbnz	r3, 8005918 <_vfiprintf_r+0x1f8>
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	3307      	adds	r3, #7
 80058d4:	f023 0307 	bic.w	r3, r3, #7
 80058d8:	3308      	adds	r3, #8
 80058da:	9303      	str	r3, [sp, #12]
 80058dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058de:	443b      	add	r3, r7
 80058e0:	9309      	str	r3, [sp, #36]	; 0x24
 80058e2:	e767      	b.n	80057b4 <_vfiprintf_r+0x94>
 80058e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80058e8:	460c      	mov	r4, r1
 80058ea:	2001      	movs	r0, #1
 80058ec:	e7a5      	b.n	800583a <_vfiprintf_r+0x11a>
 80058ee:	2300      	movs	r3, #0
 80058f0:	3401      	adds	r4, #1
 80058f2:	9305      	str	r3, [sp, #20]
 80058f4:	4619      	mov	r1, r3
 80058f6:	f04f 0c0a 	mov.w	ip, #10
 80058fa:	4620      	mov	r0, r4
 80058fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005900:	3a30      	subs	r2, #48	; 0x30
 8005902:	2a09      	cmp	r2, #9
 8005904:	d903      	bls.n	800590e <_vfiprintf_r+0x1ee>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0c5      	beq.n	8005896 <_vfiprintf_r+0x176>
 800590a:	9105      	str	r1, [sp, #20]
 800590c:	e7c3      	b.n	8005896 <_vfiprintf_r+0x176>
 800590e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005912:	4604      	mov	r4, r0
 8005914:	2301      	movs	r3, #1
 8005916:	e7f0      	b.n	80058fa <_vfiprintf_r+0x1da>
 8005918:	ab03      	add	r3, sp, #12
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	462a      	mov	r2, r5
 800591e:	4b16      	ldr	r3, [pc, #88]	; (8005978 <_vfiprintf_r+0x258>)
 8005920:	a904      	add	r1, sp, #16
 8005922:	4630      	mov	r0, r6
 8005924:	f3af 8000 	nop.w
 8005928:	4607      	mov	r7, r0
 800592a:	1c78      	adds	r0, r7, #1
 800592c:	d1d6      	bne.n	80058dc <_vfiprintf_r+0x1bc>
 800592e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005930:	07d9      	lsls	r1, r3, #31
 8005932:	d405      	bmi.n	8005940 <_vfiprintf_r+0x220>
 8005934:	89ab      	ldrh	r3, [r5, #12]
 8005936:	059a      	lsls	r2, r3, #22
 8005938:	d402      	bmi.n	8005940 <_vfiprintf_r+0x220>
 800593a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800593c:	f7ff fcaa 	bl	8005294 <__retarget_lock_release_recursive>
 8005940:	89ab      	ldrh	r3, [r5, #12]
 8005942:	065b      	lsls	r3, r3, #25
 8005944:	f53f af12 	bmi.w	800576c <_vfiprintf_r+0x4c>
 8005948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800594a:	e711      	b.n	8005770 <_vfiprintf_r+0x50>
 800594c:	ab03      	add	r3, sp, #12
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	462a      	mov	r2, r5
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <_vfiprintf_r+0x258>)
 8005954:	a904      	add	r1, sp, #16
 8005956:	4630      	mov	r0, r6
 8005958:	f000 f880 	bl	8005a5c <_printf_i>
 800595c:	e7e4      	b.n	8005928 <_vfiprintf_r+0x208>
 800595e:	bf00      	nop
 8005960:	08005fe0 	.word	0x08005fe0
 8005964:	08006000 	.word	0x08006000
 8005968:	08005fc0 	.word	0x08005fc0
 800596c:	08006024 	.word	0x08006024
 8005970:	0800602e 	.word	0x0800602e
 8005974:	00000000 	.word	0x00000000
 8005978:	080056fb 	.word	0x080056fb
 800597c:	0800602a 	.word	0x0800602a

08005980 <_printf_common>:
 8005980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005984:	4616      	mov	r6, r2
 8005986:	4699      	mov	r9, r3
 8005988:	688a      	ldr	r2, [r1, #8]
 800598a:	690b      	ldr	r3, [r1, #16]
 800598c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005990:	4293      	cmp	r3, r2
 8005992:	bfb8      	it	lt
 8005994:	4613      	movlt	r3, r2
 8005996:	6033      	str	r3, [r6, #0]
 8005998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800599c:	4607      	mov	r7, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	b10a      	cbz	r2, 80059a6 <_printf_common+0x26>
 80059a2:	3301      	adds	r3, #1
 80059a4:	6033      	str	r3, [r6, #0]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	0699      	lsls	r1, r3, #26
 80059aa:	bf42      	ittt	mi
 80059ac:	6833      	ldrmi	r3, [r6, #0]
 80059ae:	3302      	addmi	r3, #2
 80059b0:	6033      	strmi	r3, [r6, #0]
 80059b2:	6825      	ldr	r5, [r4, #0]
 80059b4:	f015 0506 	ands.w	r5, r5, #6
 80059b8:	d106      	bne.n	80059c8 <_printf_common+0x48>
 80059ba:	f104 0a19 	add.w	sl, r4, #25
 80059be:	68e3      	ldr	r3, [r4, #12]
 80059c0:	6832      	ldr	r2, [r6, #0]
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	42ab      	cmp	r3, r5
 80059c6:	dc26      	bgt.n	8005a16 <_printf_common+0x96>
 80059c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059cc:	1e13      	subs	r3, r2, #0
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	bf18      	it	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	0692      	lsls	r2, r2, #26
 80059d6:	d42b      	bmi.n	8005a30 <_printf_common+0xb0>
 80059d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059dc:	4649      	mov	r1, r9
 80059de:	4638      	mov	r0, r7
 80059e0:	47c0      	blx	r8
 80059e2:	3001      	adds	r0, #1
 80059e4:	d01e      	beq.n	8005a24 <_printf_common+0xa4>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	68e5      	ldr	r5, [r4, #12]
 80059ea:	6832      	ldr	r2, [r6, #0]
 80059ec:	f003 0306 	and.w	r3, r3, #6
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	bf08      	it	eq
 80059f4:	1aad      	subeq	r5, r5, r2
 80059f6:	68a3      	ldr	r3, [r4, #8]
 80059f8:	6922      	ldr	r2, [r4, #16]
 80059fa:	bf0c      	ite	eq
 80059fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a00:	2500      	movne	r5, #0
 8005a02:	4293      	cmp	r3, r2
 8005a04:	bfc4      	itt	gt
 8005a06:	1a9b      	subgt	r3, r3, r2
 8005a08:	18ed      	addgt	r5, r5, r3
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	341a      	adds	r4, #26
 8005a0e:	42b5      	cmp	r5, r6
 8005a10:	d11a      	bne.n	8005a48 <_printf_common+0xc8>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e008      	b.n	8005a28 <_printf_common+0xa8>
 8005a16:	2301      	movs	r3, #1
 8005a18:	4652      	mov	r2, sl
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	47c0      	blx	r8
 8005a20:	3001      	adds	r0, #1
 8005a22:	d103      	bne.n	8005a2c <_printf_common+0xac>
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	e7c6      	b.n	80059be <_printf_common+0x3e>
 8005a30:	18e1      	adds	r1, r4, r3
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	2030      	movs	r0, #48	; 0x30
 8005a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a3a:	4422      	add	r2, r4
 8005a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a44:	3302      	adds	r3, #2
 8005a46:	e7c7      	b.n	80059d8 <_printf_common+0x58>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	4638      	mov	r0, r7
 8005a50:	47c0      	blx	r8
 8005a52:	3001      	adds	r0, #1
 8005a54:	d0e6      	beq.n	8005a24 <_printf_common+0xa4>
 8005a56:	3601      	adds	r6, #1
 8005a58:	e7d9      	b.n	8005a0e <_printf_common+0x8e>
	...

08005a5c <_printf_i>:
 8005a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	7e0f      	ldrb	r7, [r1, #24]
 8005a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a64:	2f78      	cmp	r7, #120	; 0x78
 8005a66:	4691      	mov	r9, r2
 8005a68:	4680      	mov	r8, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	469a      	mov	sl, r3
 8005a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a72:	d807      	bhi.n	8005a84 <_printf_i+0x28>
 8005a74:	2f62      	cmp	r7, #98	; 0x62
 8005a76:	d80a      	bhi.n	8005a8e <_printf_i+0x32>
 8005a78:	2f00      	cmp	r7, #0
 8005a7a:	f000 80d8 	beq.w	8005c2e <_printf_i+0x1d2>
 8005a7e:	2f58      	cmp	r7, #88	; 0x58
 8005a80:	f000 80a3 	beq.w	8005bca <_printf_i+0x16e>
 8005a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a8c:	e03a      	b.n	8005b04 <_printf_i+0xa8>
 8005a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a92:	2b15      	cmp	r3, #21
 8005a94:	d8f6      	bhi.n	8005a84 <_printf_i+0x28>
 8005a96:	a101      	add	r1, pc, #4	; (adr r1, 8005a9c <_printf_i+0x40>)
 8005a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	08005b09 	.word	0x08005b09
 8005aa4:	08005a85 	.word	0x08005a85
 8005aa8:	08005a85 	.word	0x08005a85
 8005aac:	08005a85 	.word	0x08005a85
 8005ab0:	08005a85 	.word	0x08005a85
 8005ab4:	08005b09 	.word	0x08005b09
 8005ab8:	08005a85 	.word	0x08005a85
 8005abc:	08005a85 	.word	0x08005a85
 8005ac0:	08005a85 	.word	0x08005a85
 8005ac4:	08005a85 	.word	0x08005a85
 8005ac8:	08005c15 	.word	0x08005c15
 8005acc:	08005b39 	.word	0x08005b39
 8005ad0:	08005bf7 	.word	0x08005bf7
 8005ad4:	08005a85 	.word	0x08005a85
 8005ad8:	08005a85 	.word	0x08005a85
 8005adc:	08005c37 	.word	0x08005c37
 8005ae0:	08005a85 	.word	0x08005a85
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005a85 	.word	0x08005a85
 8005aec:	08005a85 	.word	0x08005a85
 8005af0:	08005bff 	.word	0x08005bff
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	602a      	str	r2, [r5, #0]
 8005afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b04:	2301      	movs	r3, #1
 8005b06:	e0a3      	b.n	8005c50 <_printf_i+0x1f4>
 8005b08:	6820      	ldr	r0, [r4, #0]
 8005b0a:	6829      	ldr	r1, [r5, #0]
 8005b0c:	0606      	lsls	r6, r0, #24
 8005b0e:	f101 0304 	add.w	r3, r1, #4
 8005b12:	d50a      	bpl.n	8005b2a <_printf_i+0xce>
 8005b14:	680e      	ldr	r6, [r1, #0]
 8005b16:	602b      	str	r3, [r5, #0]
 8005b18:	2e00      	cmp	r6, #0
 8005b1a:	da03      	bge.n	8005b24 <_printf_i+0xc8>
 8005b1c:	232d      	movs	r3, #45	; 0x2d
 8005b1e:	4276      	negs	r6, r6
 8005b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b24:	485e      	ldr	r0, [pc, #376]	; (8005ca0 <_printf_i+0x244>)
 8005b26:	230a      	movs	r3, #10
 8005b28:	e019      	b.n	8005b5e <_printf_i+0x102>
 8005b2a:	680e      	ldr	r6, [r1, #0]
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b32:	bf18      	it	ne
 8005b34:	b236      	sxthne	r6, r6
 8005b36:	e7ef      	b.n	8005b18 <_printf_i+0xbc>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	1d19      	adds	r1, r3, #4
 8005b3e:	6029      	str	r1, [r5, #0]
 8005b40:	0601      	lsls	r1, r0, #24
 8005b42:	d501      	bpl.n	8005b48 <_printf_i+0xec>
 8005b44:	681e      	ldr	r6, [r3, #0]
 8005b46:	e002      	b.n	8005b4e <_printf_i+0xf2>
 8005b48:	0646      	lsls	r6, r0, #25
 8005b4a:	d5fb      	bpl.n	8005b44 <_printf_i+0xe8>
 8005b4c:	881e      	ldrh	r6, [r3, #0]
 8005b4e:	4854      	ldr	r0, [pc, #336]	; (8005ca0 <_printf_i+0x244>)
 8005b50:	2f6f      	cmp	r7, #111	; 0x6f
 8005b52:	bf0c      	ite	eq
 8005b54:	2308      	moveq	r3, #8
 8005b56:	230a      	movne	r3, #10
 8005b58:	2100      	movs	r1, #0
 8005b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b5e:	6865      	ldr	r5, [r4, #4]
 8005b60:	60a5      	str	r5, [r4, #8]
 8005b62:	2d00      	cmp	r5, #0
 8005b64:	bfa2      	ittt	ge
 8005b66:	6821      	ldrge	r1, [r4, #0]
 8005b68:	f021 0104 	bicge.w	r1, r1, #4
 8005b6c:	6021      	strge	r1, [r4, #0]
 8005b6e:	b90e      	cbnz	r6, 8005b74 <_printf_i+0x118>
 8005b70:	2d00      	cmp	r5, #0
 8005b72:	d04d      	beq.n	8005c10 <_printf_i+0x1b4>
 8005b74:	4615      	mov	r5, r2
 8005b76:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b7a:	fb03 6711 	mls	r7, r3, r1, r6
 8005b7e:	5dc7      	ldrb	r7, [r0, r7]
 8005b80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b84:	4637      	mov	r7, r6
 8005b86:	42bb      	cmp	r3, r7
 8005b88:	460e      	mov	r6, r1
 8005b8a:	d9f4      	bls.n	8005b76 <_printf_i+0x11a>
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d10b      	bne.n	8005ba8 <_printf_i+0x14c>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	07de      	lsls	r6, r3, #31
 8005b94:	d508      	bpl.n	8005ba8 <_printf_i+0x14c>
 8005b96:	6923      	ldr	r3, [r4, #16]
 8005b98:	6861      	ldr	r1, [r4, #4]
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	bfde      	ittt	le
 8005b9e:	2330      	movle	r3, #48	; 0x30
 8005ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ba4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ba8:	1b52      	subs	r2, r2, r5
 8005baa:	6122      	str	r2, [r4, #16]
 8005bac:	f8cd a000 	str.w	sl, [sp]
 8005bb0:	464b      	mov	r3, r9
 8005bb2:	aa03      	add	r2, sp, #12
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4640      	mov	r0, r8
 8005bb8:	f7ff fee2 	bl	8005980 <_printf_common>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d14c      	bne.n	8005c5a <_printf_i+0x1fe>
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bc4:	b004      	add	sp, #16
 8005bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bca:	4835      	ldr	r0, [pc, #212]	; (8005ca0 <_printf_i+0x244>)
 8005bcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bd0:	6829      	ldr	r1, [r5, #0]
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bd8:	6029      	str	r1, [r5, #0]
 8005bda:	061d      	lsls	r5, r3, #24
 8005bdc:	d514      	bpl.n	8005c08 <_printf_i+0x1ac>
 8005bde:	07df      	lsls	r7, r3, #31
 8005be0:	bf44      	itt	mi
 8005be2:	f043 0320 	orrmi.w	r3, r3, #32
 8005be6:	6023      	strmi	r3, [r4, #0]
 8005be8:	b91e      	cbnz	r6, 8005bf2 <_printf_i+0x196>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	f023 0320 	bic.w	r3, r3, #32
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	2310      	movs	r3, #16
 8005bf4:	e7b0      	b.n	8005b58 <_printf_i+0xfc>
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	f043 0320 	orr.w	r3, r3, #32
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	2378      	movs	r3, #120	; 0x78
 8005c00:	4828      	ldr	r0, [pc, #160]	; (8005ca4 <_printf_i+0x248>)
 8005c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c06:	e7e3      	b.n	8005bd0 <_printf_i+0x174>
 8005c08:	0659      	lsls	r1, r3, #25
 8005c0a:	bf48      	it	mi
 8005c0c:	b2b6      	uxthmi	r6, r6
 8005c0e:	e7e6      	b.n	8005bde <_printf_i+0x182>
 8005c10:	4615      	mov	r5, r2
 8005c12:	e7bb      	b.n	8005b8c <_printf_i+0x130>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	6826      	ldr	r6, [r4, #0]
 8005c18:	6961      	ldr	r1, [r4, #20]
 8005c1a:	1d18      	adds	r0, r3, #4
 8005c1c:	6028      	str	r0, [r5, #0]
 8005c1e:	0635      	lsls	r5, r6, #24
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	d501      	bpl.n	8005c28 <_printf_i+0x1cc>
 8005c24:	6019      	str	r1, [r3, #0]
 8005c26:	e002      	b.n	8005c2e <_printf_i+0x1d2>
 8005c28:	0670      	lsls	r0, r6, #25
 8005c2a:	d5fb      	bpl.n	8005c24 <_printf_i+0x1c8>
 8005c2c:	8019      	strh	r1, [r3, #0]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	6123      	str	r3, [r4, #16]
 8005c32:	4615      	mov	r5, r2
 8005c34:	e7ba      	b.n	8005bac <_printf_i+0x150>
 8005c36:	682b      	ldr	r3, [r5, #0]
 8005c38:	1d1a      	adds	r2, r3, #4
 8005c3a:	602a      	str	r2, [r5, #0]
 8005c3c:	681d      	ldr	r5, [r3, #0]
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	2100      	movs	r1, #0
 8005c42:	4628      	mov	r0, r5
 8005c44:	f7fa fa9c 	bl	8000180 <memchr>
 8005c48:	b108      	cbz	r0, 8005c4e <_printf_i+0x1f2>
 8005c4a:	1b40      	subs	r0, r0, r5
 8005c4c:	6060      	str	r0, [r4, #4]
 8005c4e:	6863      	ldr	r3, [r4, #4]
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	2300      	movs	r3, #0
 8005c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c58:	e7a8      	b.n	8005bac <_printf_i+0x150>
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	462a      	mov	r2, r5
 8005c5e:	4649      	mov	r1, r9
 8005c60:	4640      	mov	r0, r8
 8005c62:	47d0      	blx	sl
 8005c64:	3001      	adds	r0, #1
 8005c66:	d0ab      	beq.n	8005bc0 <_printf_i+0x164>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	079b      	lsls	r3, r3, #30
 8005c6c:	d413      	bmi.n	8005c96 <_printf_i+0x23a>
 8005c6e:	68e0      	ldr	r0, [r4, #12]
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	4298      	cmp	r0, r3
 8005c74:	bfb8      	it	lt
 8005c76:	4618      	movlt	r0, r3
 8005c78:	e7a4      	b.n	8005bc4 <_printf_i+0x168>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4640      	mov	r0, r8
 8005c82:	47d0      	blx	sl
 8005c84:	3001      	adds	r0, #1
 8005c86:	d09b      	beq.n	8005bc0 <_printf_i+0x164>
 8005c88:	3501      	adds	r5, #1
 8005c8a:	68e3      	ldr	r3, [r4, #12]
 8005c8c:	9903      	ldr	r1, [sp, #12]
 8005c8e:	1a5b      	subs	r3, r3, r1
 8005c90:	42ab      	cmp	r3, r5
 8005c92:	dcf2      	bgt.n	8005c7a <_printf_i+0x21e>
 8005c94:	e7eb      	b.n	8005c6e <_printf_i+0x212>
 8005c96:	2500      	movs	r5, #0
 8005c98:	f104 0619 	add.w	r6, r4, #25
 8005c9c:	e7f5      	b.n	8005c8a <_printf_i+0x22e>
 8005c9e:	bf00      	nop
 8005ca0:	08006035 	.word	0x08006035
 8005ca4:	08006046 	.word	0x08006046

08005ca8 <_read_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4d07      	ldr	r5, [pc, #28]	; (8005cc8 <_read_r+0x20>)
 8005cac:	4604      	mov	r4, r0
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	602a      	str	r2, [r5, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f7fb f95b 	bl	8000f72 <_read>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d102      	bne.n	8005cc6 <_read_r+0x1e>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	b103      	cbz	r3, 8005cc6 <_read_r+0x1e>
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
 8005cc8:	20000494 	.word	0x20000494

08005ccc <__swbuf_r>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	460e      	mov	r6, r1
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	b118      	cbz	r0, 8005cde <__swbuf_r+0x12>
 8005cd6:	6983      	ldr	r3, [r0, #24]
 8005cd8:	b90b      	cbnz	r3, 8005cde <__swbuf_r+0x12>
 8005cda:	f7ff fa17 	bl	800510c <__sinit>
 8005cde:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <__swbuf_r+0x98>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d12b      	bne.n	8005d3c <__swbuf_r+0x70>
 8005ce4:	686c      	ldr	r4, [r5, #4]
 8005ce6:	69a3      	ldr	r3, [r4, #24]
 8005ce8:	60a3      	str	r3, [r4, #8]
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	071a      	lsls	r2, r3, #28
 8005cee:	d52f      	bpl.n	8005d50 <__swbuf_r+0x84>
 8005cf0:	6923      	ldr	r3, [r4, #16]
 8005cf2:	b36b      	cbz	r3, 8005d50 <__swbuf_r+0x84>
 8005cf4:	6923      	ldr	r3, [r4, #16]
 8005cf6:	6820      	ldr	r0, [r4, #0]
 8005cf8:	1ac0      	subs	r0, r0, r3
 8005cfa:	6963      	ldr	r3, [r4, #20]
 8005cfc:	b2f6      	uxtb	r6, r6
 8005cfe:	4283      	cmp	r3, r0
 8005d00:	4637      	mov	r7, r6
 8005d02:	dc04      	bgt.n	8005d0e <__swbuf_r+0x42>
 8005d04:	4621      	mov	r1, r4
 8005d06:	4628      	mov	r0, r5
 8005d08:	f7ff f96c 	bl	8004fe4 <_fflush_r>
 8005d0c:	bb30      	cbnz	r0, 8005d5c <__swbuf_r+0x90>
 8005d0e:	68a3      	ldr	r3, [r4, #8]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	60a3      	str	r3, [r4, #8]
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	6022      	str	r2, [r4, #0]
 8005d1a:	701e      	strb	r6, [r3, #0]
 8005d1c:	6963      	ldr	r3, [r4, #20]
 8005d1e:	3001      	adds	r0, #1
 8005d20:	4283      	cmp	r3, r0
 8005d22:	d004      	beq.n	8005d2e <__swbuf_r+0x62>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	07db      	lsls	r3, r3, #31
 8005d28:	d506      	bpl.n	8005d38 <__swbuf_r+0x6c>
 8005d2a:	2e0a      	cmp	r6, #10
 8005d2c:	d104      	bne.n	8005d38 <__swbuf_r+0x6c>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4628      	mov	r0, r5
 8005d32:	f7ff f957 	bl	8004fe4 <_fflush_r>
 8005d36:	b988      	cbnz	r0, 8005d5c <__swbuf_r+0x90>
 8005d38:	4638      	mov	r0, r7
 8005d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <__swbuf_r+0x9c>)
 8005d3e:	429c      	cmp	r4, r3
 8005d40:	d101      	bne.n	8005d46 <__swbuf_r+0x7a>
 8005d42:	68ac      	ldr	r4, [r5, #8]
 8005d44:	e7cf      	b.n	8005ce6 <__swbuf_r+0x1a>
 8005d46:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <__swbuf_r+0xa0>)
 8005d48:	429c      	cmp	r4, r3
 8005d4a:	bf08      	it	eq
 8005d4c:	68ec      	ldreq	r4, [r5, #12]
 8005d4e:	e7ca      	b.n	8005ce6 <__swbuf_r+0x1a>
 8005d50:	4621      	mov	r1, r4
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f80c 	bl	8005d70 <__swsetup_r>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d0cb      	beq.n	8005cf4 <__swbuf_r+0x28>
 8005d5c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005d60:	e7ea      	b.n	8005d38 <__swbuf_r+0x6c>
 8005d62:	bf00      	nop
 8005d64:	08005fe0 	.word	0x08005fe0
 8005d68:	08006000 	.word	0x08006000
 8005d6c:	08005fc0 	.word	0x08005fc0

08005d70 <__swsetup_r>:
 8005d70:	4b32      	ldr	r3, [pc, #200]	; (8005e3c <__swsetup_r+0xcc>)
 8005d72:	b570      	push	{r4, r5, r6, lr}
 8005d74:	681d      	ldr	r5, [r3, #0]
 8005d76:	4606      	mov	r6, r0
 8005d78:	460c      	mov	r4, r1
 8005d7a:	b125      	cbz	r5, 8005d86 <__swsetup_r+0x16>
 8005d7c:	69ab      	ldr	r3, [r5, #24]
 8005d7e:	b913      	cbnz	r3, 8005d86 <__swsetup_r+0x16>
 8005d80:	4628      	mov	r0, r5
 8005d82:	f7ff f9c3 	bl	800510c <__sinit>
 8005d86:	4b2e      	ldr	r3, [pc, #184]	; (8005e40 <__swsetup_r+0xd0>)
 8005d88:	429c      	cmp	r4, r3
 8005d8a:	d10f      	bne.n	8005dac <__swsetup_r+0x3c>
 8005d8c:	686c      	ldr	r4, [r5, #4]
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d94:	0719      	lsls	r1, r3, #28
 8005d96:	d42c      	bmi.n	8005df2 <__swsetup_r+0x82>
 8005d98:	06dd      	lsls	r5, r3, #27
 8005d9a:	d411      	bmi.n	8005dc0 <__swsetup_r+0x50>
 8005d9c:	2309      	movs	r3, #9
 8005d9e:	6033      	str	r3, [r6, #0]
 8005da0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005daa:	e03e      	b.n	8005e2a <__swsetup_r+0xba>
 8005dac:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <__swsetup_r+0xd4>)
 8005dae:	429c      	cmp	r4, r3
 8005db0:	d101      	bne.n	8005db6 <__swsetup_r+0x46>
 8005db2:	68ac      	ldr	r4, [r5, #8]
 8005db4:	e7eb      	b.n	8005d8e <__swsetup_r+0x1e>
 8005db6:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <__swsetup_r+0xd8>)
 8005db8:	429c      	cmp	r4, r3
 8005dba:	bf08      	it	eq
 8005dbc:	68ec      	ldreq	r4, [r5, #12]
 8005dbe:	e7e6      	b.n	8005d8e <__swsetup_r+0x1e>
 8005dc0:	0758      	lsls	r0, r3, #29
 8005dc2:	d512      	bpl.n	8005dea <__swsetup_r+0x7a>
 8005dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dc6:	b141      	cbz	r1, 8005dda <__swsetup_r+0x6a>
 8005dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dcc:	4299      	cmp	r1, r3
 8005dce:	d002      	beq.n	8005dd6 <__swsetup_r+0x66>
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f7ff facd 	bl	8005370 <_free_r>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	2300      	movs	r3, #0
 8005de4:	6063      	str	r3, [r4, #4]
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f043 0308 	orr.w	r3, r3, #8
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	b94b      	cbnz	r3, 8005e0a <__swsetup_r+0x9a>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d003      	beq.n	8005e0a <__swsetup_r+0x9a>
 8005e02:	4621      	mov	r1, r4
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff fa6b 	bl	80052e0 <__smakebuf_r>
 8005e0a:	89a0      	ldrh	r0, [r4, #12]
 8005e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e10:	f010 0301 	ands.w	r3, r0, #1
 8005e14:	d00a      	beq.n	8005e2c <__swsetup_r+0xbc>
 8005e16:	2300      	movs	r3, #0
 8005e18:	60a3      	str	r3, [r4, #8]
 8005e1a:	6963      	ldr	r3, [r4, #20]
 8005e1c:	425b      	negs	r3, r3
 8005e1e:	61a3      	str	r3, [r4, #24]
 8005e20:	6923      	ldr	r3, [r4, #16]
 8005e22:	b943      	cbnz	r3, 8005e36 <__swsetup_r+0xc6>
 8005e24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e28:	d1ba      	bne.n	8005da0 <__swsetup_r+0x30>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	0781      	lsls	r1, r0, #30
 8005e2e:	bf58      	it	pl
 8005e30:	6963      	ldrpl	r3, [r4, #20]
 8005e32:	60a3      	str	r3, [r4, #8]
 8005e34:	e7f4      	b.n	8005e20 <__swsetup_r+0xb0>
 8005e36:	2000      	movs	r0, #0
 8005e38:	e7f7      	b.n	8005e2a <__swsetup_r+0xba>
 8005e3a:	bf00      	nop
 8005e3c:	2000001c 	.word	0x2000001c
 8005e40:	08005fe0 	.word	0x08005fe0
 8005e44:	08006000 	.word	0x08006000
 8005e48:	08005fc0 	.word	0x08005fc0

08005e4c <_init>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr

08005e58 <_fini>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	bf00      	nop
 8005e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5e:	bc08      	pop	{r3}
 8005e60:	469e      	mov	lr, r3
 8005e62:	4770      	bx	lr
