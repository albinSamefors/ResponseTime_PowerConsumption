
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005734  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005a40  08005a40  00015a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000008  08005a48  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003f8  20000080  08005ac0  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000478  08005ac0  00020478  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015999  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002c1c  00000000  00000000  00035a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001990  00000000  00000000  00038668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001858  00000000  00000000  00039ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00023522  00000000  00000000  0003b850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001543f  00000000  00000000  0005ed72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e16ba  00000000  00000000  000741b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0015586b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007434  00000000  00000000  001558bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	0800585c 	.word	0x0800585c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	0800585c 	.word	0x0800585c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000230:	f023 0218 	bic.w	r2, r3, #24
 8000234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000270:	68fb      	ldr	r3, [r7, #12]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <recieve16Bit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool recieve16Bit(uint16_t *read_to){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	if(HAL_SPI_Receive(&hspi1, (uint8_t*)read_to, 2, 10) == HAL_OK) {
 8000288:	230a      	movs	r3, #10
 800028a:	2202      	movs	r2, #2
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <recieve16Bit+0x28>)
 8000290:	f003 fb20 	bl	80038d4 <HAL_SPI_Receive>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <recieve16Bit+0x1e>
		return true;
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <recieve16Bit+0x20>
	}

	return false;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000009c 	.word	0x2000009c

080002ac <send16Bit>:

_Bool send16Bit(uint16_t *send){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2,10) == HAL_OK){
 80002b4:	230a      	movs	r3, #10
 80002b6:	2202      	movs	r2, #2
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <send16Bit+0x28>)
 80002bc:	f003 f99c 	bl	80035f8 <HAL_SPI_Transmit>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <send16Bit+0x1e>
		return true;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <send16Bit+0x20>

	}
	return false;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000009c 	.word	0x2000009c

080002d8 <getStartInput>:

void getStartInput(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	uint8_t header;
		  HAL_StatusTypeDef receive_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80002de:	1db9      	adds	r1, r7, #6
 80002e0:	230a      	movs	r3, #10
 80002e2:	2201      	movs	r2, #1
 80002e4:	4825      	ldr	r0, [pc, #148]	; (800037c <getStartInput+0xa4>)
 80002e6:	f003 faf5 	bl	80038d4 <HAL_SPI_Receive>
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
		  if(receive_status == HAL_OK) {
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d130      	bne.n	8000356 <getStartInput+0x7e>
			  switch((Header)header) {
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d020      	beq.n	800033c <getStartInput+0x64>
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	dc32      	bgt.n	8000364 <getStartInput+0x8c>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d002      	beq.n	8000308 <getStartInput+0x30>
 8000302:	2b02      	cmp	r3, #2
 8000304:	d00d      	beq.n	8000322 <getStartInput+0x4a>
 8000306:	e02d      	b.n	8000364 <getStartInput+0x8c>
			  	  case SLEEP_TIME:
			  		  if(!recieve16Bit(&sleep_time)) {
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <getStartInput+0xa8>)
 800030a:	f7ff ffb9 	bl	8000280 <recieve16Bit>
 800030e:	4603      	mov	r3, r0
 8000310:	f083 0301 	eor.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d01f      	beq.n	800035a <getStartInput+0x82>
			  			  printf("ERROR COULD NOT RECIEVE SLEEP TIME");
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <getStartInput+0xac>)
 800031c:	f004 fb10 	bl	8004940 <iprintf>
			  		  	  }
					  break;
 8000320:	e01b      	b.n	800035a <getStartInput+0x82>
				  case RUN_AMOUNT:
					  if(!recieve16Bit(&max_amount_of_runs)){
 8000322:	4819      	ldr	r0, [pc, #100]	; (8000388 <getStartInput+0xb0>)
 8000324:	f7ff ffac 	bl	8000280 <recieve16Bit>
 8000328:	4603      	mov	r3, r0
 800032a:	f083 0301 	eor.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d014      	beq.n	800035e <getStartInput+0x86>
						  printf("ERROR COULD NOT RECIEVE AMOUNT OF RUNS");
 8000334:	4815      	ldr	r0, [pc, #84]	; (800038c <getStartInput+0xb4>)
 8000336:	f004 fb03 	bl	8004940 <iprintf>
					  }

					  break;
 800033a:	e010      	b.n	800035e <getStartInput+0x86>
				  case TEST_MODE:
					  if(!recieve16Bit(&test_mode)){
 800033c:	4814      	ldr	r0, [pc, #80]	; (8000390 <getStartInput+0xb8>)
 800033e:	f7ff ff9f 	bl	8000280 <recieve16Bit>
 8000342:	4603      	mov	r3, r0
 8000344:	f083 0301 	eor.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d009      	beq.n	8000362 <getStartInput+0x8a>
						  printf("TEST MODE COULD NOT BE RECIEVED");
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <getStartInput+0xbc>)
 8000350:	f004 faf6 	bl	8004940 <iprintf>
					  }
					  break;
 8000354:	e005      	b.n	8000362 <getStartInput+0x8a>
				  }
		  }
 8000356:	bf00      	nop
 8000358:	e004      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <getStartInput+0x8c>
					  break;
 8000362:	bf00      	nop
		  if(test_mode != 2){
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <getStartInput+0xb8>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d002      	beq.n	8000372 <getStartInput+0x9a>
			  test_input_set = true;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <getStartInput+0xc0>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		  }
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000009c 	.word	0x2000009c
 8000380:	20000458 	.word	0x20000458
 8000384:	08005874 	.word	0x08005874
 8000388:	2000045a 	.word	0x2000045a
 800038c:	08005898 	.word	0x08005898
 8000390:	20000008 	.word	0x20000008
 8000394:	080058c0 	.word	0x080058c0
 8000398:	2000045c 	.word	0x2000045c

0800039c <sendTestData>:
void sendTestData(uint32_t *times){
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2110      	movs	r1, #16
 80003ac:	481e      	ldr	r0, [pc, #120]	; (8000428 <sendTestData+0x8c>)
 80003ae:	f001 f9af 	bl	8001710 <HAL_GPIO_WritePin>
	while(index < max_amount_of_runs){
 80003b2:	e02b      	b.n	800040c <sendTestData+0x70>
		uint8_t header;
		uint32_t *ptr = &times[index];
 80003b4:	8afb      	ldrh	r3, [r7, #22]
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	4413      	add	r3, r2
 80003bc:	613b      	str	r3, [r7, #16]
		uint16_t value = *((uint16_t*)ptr);
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	81bb      	strh	r3, [r7, #12]
		HAL_StatusTypeDef recieve_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80003c4:	f107 010e 	add.w	r1, r7, #14
 80003c8:	230a      	movs	r3, #10
 80003ca:	2201      	movs	r2, #1
 80003cc:	4817      	ldr	r0, [pc, #92]	; (800042c <sendTestData+0x90>)
 80003ce:	f003 fa81 	bl	80038d4 <HAL_SPI_Receive>
 80003d2:	4603      	mov	r3, r0
 80003d4:	73fb      	strb	r3, [r7, #15]
		if(recieve_status == HAL_OK){
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d117      	bne.n	800040c <sendTestData+0x70>
			if(header == 4){
 80003dc:	7bbb      	ldrb	r3, [r7, #14]
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d111      	bne.n	8000406 <sendTestData+0x6a>
				if(!send16Bit(&value)){
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff60 	bl	80002ac <send16Bit>
 80003ec:	4603      	mov	r3, r0
 80003ee:	f083 0301 	eor.w	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <sendTestData+0x62>
					printf("COULD NOT SEND DATA");
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <sendTestData+0x94>)
 80003fa:	f004 faa1 	bl	8004940 <iprintf>
				}
				index++;
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	3301      	adds	r3, #1
 8000402:	82fb      	strh	r3, [r7, #22]
 8000404:	e002      	b.n	800040c <sendTestData+0x70>
			}
			else{
				printf("STUB");
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <sendTestData+0x98>)
 8000408:	f004 fa9a 	bl	8004940 <iprintf>
	while(index < max_amount_of_runs){
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <sendTestData+0x9c>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	8afa      	ldrh	r2, [r7, #22]
 8000412:	429a      	cmp	r2, r3
 8000414:	d3ce      	bcc.n	80003b4 <sendTestData+0x18>
			}
		}
	}
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2110      	movs	r1, #16
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <sendTestData+0x8c>)
 800041c:	f001 f978 	bl	8001710 <HAL_GPIO_WritePin>
}
 8000420:	bf00      	nop
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	48000400 	.word	0x48000400
 800042c:	2000009c 	.word	0x2000009c
 8000430:	080058e0 	.word	0x080058e0
 8000434:	080058f4 	.word	0x080058f4
 8000438:	2000045a 	.word	0x2000045a

0800043c <calculateTestTimes>:
			send16Bit(&value);

	}
}

void calculateTestTimes(struct TimeCapture *data, uint32_t *times){
 800043c:	b480      	push	{r7}
 800043e:	b08b      	sub	sp, #44	; 0x2c
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 8000446:	2300      	movs	r3, #0
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
 800044a:	e034      	b.n	80004b6 <calculateTestTimes+0x7a>
		struct TimeCapture *time_ptr = &data[i];
 800044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044e:	00db      	lsls	r3, r3, #3
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	4413      	add	r3, r2
 8000454:	61fb      	str	r3, [r7, #28]
		uint32_t *ptr = &times[i];
 8000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	4413      	add	r3, r2
 800045e:	61bb      	str	r3, [r7, #24]
		uint32_t start_time = time_ptr->startTime;
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	617b      	str	r3, [r7, #20]
		uint32_t end_time = time_ptr->endTime;
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	613b      	str	r3, [r7, #16]
		uint32_t fullTime;
		if(end_time >= start_time){
 800046c:	693a      	ldr	r2, [r7, #16]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	429a      	cmp	r2, r3
 8000472:	d304      	bcc.n	800047e <calculateTestTimes+0x42>
			fullTime = end_time - start_time;
 8000474:	693a      	ldr	r2, [r7, #16]
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	623b      	str	r3, [r7, #32]
 800047c:	e007      	b.n	800048e <calculateTestTimes+0x52>
		}
		else{
			fullTime = (TIM2->ARR - start_time) + end_time;
 800047e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	4413      	add	r3, r2
 800048c:	623b      	str	r3, [r7, #32]
		}
		uint32_t wake_up_time = fullTime - (sleep_time * 1000);
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <calculateTestTimes+0x94>)
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	461a      	mov	r2, r3
 8000494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000498:	fb02 f303 	mul.w	r3, r2, r3
 800049c:	461a      	mov	r2, r3
 800049e:	6a3b      	ldr	r3, [r7, #32]
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]
		debug_value = fullTime;
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <calculateTestTimes+0x98>)
 80004a6:	6a3b      	ldr	r3, [r7, #32]
 80004a8:	6013      	str	r3, [r2, #0]
		*ptr = wake_up_time;
 80004aa:	69bb      	ldr	r3, [r7, #24]
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	3301      	adds	r3, #1
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <calculateTestTimes+0x9c>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004be:	4293      	cmp	r3, r2
 80004c0:	dbc4      	blt.n	800044c <calculateTestTimes+0x10>
	}
}
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	372c      	adds	r7, #44	; 0x2c
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	20000458 	.word	0x20000458
 80004d4:	2000000c 	.word	0x2000000c
 80004d8:	2000045a 	.word	0x2000045a

080004dc <sendInterrupt>:

void sendInterrupt(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2102      	movs	r1, #2
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <sendInterrupt+0x1c>)
 80004e6:	f001 f913 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2102      	movs	r1, #2
 80004ee:	4802      	ldr	r0, [pc, #8]	; (80004f8 <sendInterrupt+0x1c>)
 80004f0:	f001 f90e 	bl	8001710 <HAL_GPIO_WritePin>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	48000800 	.word	0x48000800

080004fc <testUsingInterrupts>:

void testUsingInterrupts(struct TimeCapture *times){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
	while(run_test){
 8000508:	e032      	b.n	8000570 <testUsingInterrupts+0x74>
		struct TimeCapture *time_ptr = &times[i];
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
		HAL_Delay(sleep_time);
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <testUsingInterrupts+0x88>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fe55 	bl	80011c8 <HAL_Delay>
		sendInterrupt();
 800051e:	f7ff ffdd 	bl	80004dc <sendInterrupt>
		while(!timeBuffReady);
 8000522:	bf00      	nop
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <testUsingInterrupts+0x8c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	f083 0301 	eor.w	r3, r3, #1
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1f8      	bne.n	8000524 <testUsingInterrupts+0x28>
		*time_ptr = timeBuff;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4a15      	ldr	r2, [pc, #84]	; (800058c <testUsingInterrupts+0x90>)
 8000536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053a:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
		timeBuff.startTime = 0;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <testUsingInterrupts+0x90>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <testUsingInterrupts+0x90>)
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <testUsingInterrupts+0x8c>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <testUsingInterrupts+0x94>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <testUsingInterrupts+0x98>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	429a      	cmp	r2, r3
 8000564:	d104      	bne.n	8000570 <testUsingInterrupts+0x74>
			//FINAL WAKE
			sendInterrupt();
 8000566:	f7ff ffb9 	bl	80004dc <sendInterrupt>
			run_test = false;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <testUsingInterrupts+0x9c>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	while(run_test){
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <testUsingInterrupts+0x9c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1c8      	bne.n	800050a <testUsingInterrupts+0xe>
		}
	}
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000458 	.word	0x20000458
 8000588:	20000454 	.word	0x20000454
 800058c:	20000444 	.word	0x20000444
 8000590:	20000440 	.word	0x20000440
 8000594:	2000045a 	.word	0x2000045a
 8000598:	20000455 	.word	0x20000455

0800059c <testUsingIntervals>:

void testUsingIntervals(struct TimeCapture *times){
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
	while(run_test){
 80005a8:	e02f      	b.n	800060a <testUsingIntervals+0x6e>
		struct TimeCapture *time_ptr = &times[i];
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
		while(!timeBuffReady);
 80005b4:	bf00      	nop
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <testUsingIntervals+0x84>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	f083 0301 	eor.w	r3, r3, #1
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f8      	bne.n	80005b6 <testUsingIntervals+0x1a>
		*time_ptr = timeBuff;
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <testUsingIntervals+0x88>)
 80005c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005cc:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
		lastBuff = timeBuff;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <testUsingIntervals+0x8c>)
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <testUsingIntervals+0x88>)
 80005da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005de:	e883 0003 	stmia.w	r3, {r0, r1}
		timeBuff.startTime = 0;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <testUsingIntervals+0x88>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <testUsingIntervals+0x88>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <testUsingIntervals+0x84>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <testUsingIntervals+0x90>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <testUsingIntervals+0x94>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	429a      	cmp	r2, r3
 8000602:	d102      	bne.n	800060a <testUsingIntervals+0x6e>
			run_test = false;
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <testUsingIntervals+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	while(run_test){
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <testUsingIntervals+0x98>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1cb      	bne.n	80005aa <testUsingIntervals+0xe>
		}

	}
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	20000454 	.word	0x20000454
 8000624:	20000444 	.word	0x20000444
 8000628:	2000044c 	.word	0x2000044c
 800062c:	20000440 	.word	0x20000440
 8000630:	2000045a 	.word	0x2000045a
 8000634:	20000455 	.word	0x20000455

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800063c:	b08f      	sub	sp, #60	; 0x3c
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fd3c 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f8e2 	bl	800080c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000648:	f000 f956 	bl	80008f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fa20 	bl	8000a90 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000650:	f000 f9f6 	bl	8000a40 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000654:	f000 f9a6 	bl	80009a4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000658:	f000 f96c 	bl	8000934 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800065c:	4865      	ldr	r0, [pc, #404]	; (80007f4 <main+0x1bc>)
 800065e:	f003 fe91 	bl	8004384 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!finished){
 8000662:	4b65      	ldr	r3, [pc, #404]	; (80007f8 <main+0x1c0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f083 0301 	eor.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f8      	beq.n	8000662 <main+0x2a>
	  if(!test_input_set){
 8000670:	4b62      	ldr	r3, [pc, #392]	; (80007fc <main+0x1c4>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f083 0301 	eor.w	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <main+0x4c>
	 	  	  getStartInput();
 800067e:	f7ff fe2b 	bl	80002d8 <getStartInput>
 8000682:	e7ee      	b.n	8000662 <main+0x2a>
	 	  }
	 	  else{
 8000684:	466b      	mov	r3, sp
 8000686:	607b      	str	r3, [r7, #4]
	 		  struct TimeCapture times[max_amount_of_runs];
 8000688:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <main+0x1c8>)
 800068a:	8819      	ldrh	r1, [r3, #0]
 800068c:	460b      	mov	r3, r1
 800068e:	3b01      	subs	r3, #1
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
 8000692:	b28b      	uxth	r3, r1
 8000694:	2200      	movs	r2, #0
 8000696:	461c      	mov	r4, r3
 8000698:	4615      	mov	r5, r2
 800069a:	f04f 0200 	mov.w	r2, #0
 800069e:	f04f 0300 	mov.w	r3, #0
 80006a2:	01ab      	lsls	r3, r5, #6
 80006a4:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80006a8:	01a2      	lsls	r2, r4, #6
 80006aa:	b28b      	uxth	r3, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	4698      	mov	r8, r3
 80006b0:	4691      	mov	r9, r2
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80006be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80006c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80006c6:	460b      	mov	r3, r1
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	3307      	adds	r3, #7
 80006cc:	08db      	lsrs	r3, r3, #3
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	ebad 0d03 	sub.w	sp, sp, r3
 80006d4:	466b      	mov	r3, sp
 80006d6:	3303      	adds	r3, #3
 80006d8:	089b      	lsrs	r3, r3, #2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	633b      	str	r3, [r7, #48]	; 0x30
	 		  if(test_mode == 1){
 80006de:	4b49      	ldr	r3, [pc, #292]	; (8000804 <main+0x1cc>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d141      	bne.n	800076a <main+0x132>
 80006e6:	466b      	mov	r3, sp
 80006e8:	461e      	mov	r6, r3
	 			  // RUN TESTS USING ITERRUPTS
	 			  run_test = true;
 80006ea:	4a47      	ldr	r2, [pc, #284]	; (8000808 <main+0x1d0>)
 80006ec:	2301      	movs	r3, #1
 80006ee:	7013      	strb	r3, [r2, #0]
	 			  testUsingInterrupts(times);
 80006f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006f2:	f7ff ff03 	bl	80004fc <testUsingInterrupts>
	 			  uint32_t test_times[max_amount_of_runs];
 80006f6:	4b42      	ldr	r3, [pc, #264]	; (8000800 <main+0x1c8>)
 80006f8:	8819      	ldrh	r1, [r3, #0]
 80006fa:	460b      	mov	r3, r1
 80006fc:	3b01      	subs	r3, #1
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000700:	b28b      	uxth	r3, r1
 8000702:	2200      	movs	r2, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	61fa      	str	r2, [r7, #28]
 8000708:	f04f 0200 	mov.w	r2, #0
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	69f8      	ldr	r0, [r7, #28]
 8000712:	0143      	lsls	r3, r0, #5
 8000714:	69b8      	ldr	r0, [r7, #24]
 8000716:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800071a:	69b8      	ldr	r0, [r7, #24]
 800071c:	0142      	lsls	r2, r0, #5
 800071e:	b28b      	uxth	r3, r1
 8000720:	2200      	movs	r2, #0
 8000722:	469a      	mov	sl, r3
 8000724:	4693      	mov	fp, r2
 8000726:	f04f 0200 	mov.w	r2, #0
 800072a:	f04f 0300 	mov.w	r3, #0
 800072e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000732:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000736:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800073a:	460b      	mov	r3, r1
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	3307      	adds	r3, #7
 8000740:	08db      	lsrs	r3, r3, #3
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	ebad 0d03 	sub.w	sp, sp, r3
 8000748:	466b      	mov	r3, sp
 800074a:	3303      	adds	r3, #3
 800074c:	089b      	lsrs	r3, r3, #2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	623b      	str	r3, [r7, #32]
	 			  calculateTestTimes(times,test_times);
 8000752:	6a39      	ldr	r1, [r7, #32]
 8000754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000756:	f7ff fe71 	bl	800043c <calculateTestTimes>
	 			  sendTestData(test_times);
 800075a:	6a38      	ldr	r0, [r7, #32]
 800075c:	f7ff fe1e 	bl	800039c <sendTestData>
	 			  finished = true;
 8000760:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <main+0x1c0>)
 8000762:	2301      	movs	r3, #1
 8000764:	7013      	strb	r3, [r2, #0]
 8000766:	46b5      	mov	sp, r6
 8000768:	e041      	b.n	80007ee <main+0x1b6>
	 		  }
	 		  else{
 800076a:	466b      	mov	r3, sp
 800076c:	461e      	mov	r6, r3
	 			  run_test = true;
 800076e:	4a26      	ldr	r2, [pc, #152]	; (8000808 <main+0x1d0>)
 8000770:	2301      	movs	r3, #1
 8000772:	7013      	strb	r3, [r2, #0]
	 			  testUsingIntervals(times);
 8000774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000776:	f7ff ff11 	bl	800059c <testUsingIntervals>
	 			  uint32_t test_times[max_amount_of_runs];
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <main+0x1c8>)
 800077c:	8819      	ldrh	r1, [r3, #0]
 800077e:	460b      	mov	r3, r1
 8000780:	3b01      	subs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000784:	b28b      	uxth	r3, r1
 8000786:	2200      	movs	r2, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	617a      	str	r2, [r7, #20]
 800078c:	f04f 0200 	mov.w	r2, #0
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	6978      	ldr	r0, [r7, #20]
 8000796:	0143      	lsls	r3, r0, #5
 8000798:	6938      	ldr	r0, [r7, #16]
 800079a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800079e:	6938      	ldr	r0, [r7, #16]
 80007a0:	0142      	lsls	r2, r0, #5
 80007a2:	b28b      	uxth	r3, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	60fa      	str	r2, [r7, #12]
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	0143      	lsls	r3, r0, #5
 80007b6:	68b8      	ldr	r0, [r7, #8]
 80007b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007bc:	68b8      	ldr	r0, [r7, #8]
 80007be:	0142      	lsls	r2, r0, #5
 80007c0:	460b      	mov	r3, r1
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	3307      	adds	r3, #7
 80007c6:	08db      	lsrs	r3, r3, #3
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	ebad 0d03 	sub.w	sp, sp, r3
 80007ce:	466b      	mov	r3, sp
 80007d0:	3303      	adds	r3, #3
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
	 			  calculateTestTimes(times, test_times);
 80007d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007dc:	f7ff fe2e 	bl	800043c <calculateTestTimes>
	 			  sendTestData(test_times);
 80007e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007e2:	f7ff fddb 	bl	800039c <sendTestData>
	 			  finished = true;
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <main+0x1c0>)
 80007e8:	2301      	movs	r3, #1
 80007ea:	7013      	strb	r3, [r2, #0]
 80007ec:	46b5      	mov	sp, r6
 80007ee:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  if(!finished){
 80007f2:	e736      	b.n	8000662 <main+0x2a>
 80007f4:	20000100 	.word	0x20000100
 80007f8:	20000456 	.word	0x20000456
 80007fc:	2000045c 	.word	0x2000045c
 8000800:	2000045a 	.word	0x2000045a
 8000804:	20000008 	.word	0x20000008
 8000808:	20000455 	.word	0x20000455

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09a      	sub	sp, #104	; 0x68
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2248      	movs	r2, #72	; 0x48
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f004 f888 	bl	8004930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800083c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000840:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f023 0303 	bic.w	r3, r3, #3
 800084c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000856:	f001 f88f 	bl	8001978 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fce0 	bl	8000220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <SystemClock_Config+0xe8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <SystemClock_Config+0xe8>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <SystemClock_Config+0xe8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800087c:	2327      	movs	r3, #39	; 0x27
 800087e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000898:	2300      	movs	r3, #0
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fbe1 	bl	8002070 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008b4:	f000 f9ac 	bl	8000c10 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008b8:	236f      	movs	r3, #111	; 0x6f
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 ff3d 	bl	8002758 <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008e4:	f000 f994 	bl	8000c10 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008e8:	f002 fccc 	bl	8003284 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008ec:	bf00      	nop
 80008ee:	3768      	adds	r7, #104	; 0x68
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58000400 	.word	0x58000400

080008f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2250      	movs	r2, #80	; 0x50
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f004 f813 	bl	8004930 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800090a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000914:	2300      	movs	r3, #0
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fb3c 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000926:	f000 f973 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI1_Init+0x68>)
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <MX_SPI1_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_SPI1_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0x68>)
 800094c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_SPI1_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x68>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_SPI1_Init+0x68>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0x68>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI1_Init+0x68>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0x68>)
 8000978:	2207      	movs	r2, #7
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI1_Init+0x68>)
 800097e:	2200      	movs	r2, #0
 8000980:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SPI1_Init+0x68>)
 800098a:	f002 fd92 	bl	80034b2 <HAL_SPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000994:	f000 f93c 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000009c 	.word	0x2000009c
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009cc:	221f      	movs	r2, #31
 80009ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009ec:	f003 fc72 	bl	80042d4 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009f6:	f000 f90b 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_TIM2_Init+0x98>)
 8000a08:	f003 fd02 	bl	8004410 <HAL_TIM_ConfigClockSource>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a12:	f000 f8fd 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_TIM2_Init+0x98>)
 8000a24:	f003 febe 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a2e:	f000 f8ef 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000100 	.word	0x20000100

08000a40 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <MX_USB_PCD_Init+0x4c>)
 8000a48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a76:	f000 fe7b 	bl	8001770 <HAL_PCD_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a80:	f000 f8c6 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000014c 	.word	0x2000014c
 8000a8c:	40006800 	.word	0x40006800

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f7ff fbd1 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff fbce 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff fbcb 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	2008      	movs	r0, #8
 8000ab8:	f7ff fbc8 	bl	800024c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Interrupter_Pin|DeepseepWakeup_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	210a      	movs	r1, #10
 8000ac0:	482c      	ldr	r0, [pc, #176]	; (8000b74 <MX_GPIO_Init+0xe4>)
 8000ac2:	f000 fe25 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2133      	movs	r1, #51	; 0x33
 8000aca:	482b      	ldr	r0, [pc, #172]	; (8000b78 <MX_GPIO_Init+0xe8>)
 8000acc:	f000 fe20 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TestStartInput_Pin */
  GPIO_InitStruct.Pin = TestStartInput_Pin;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TestStartInput_GPIO_Port, &GPIO_InitStruct);
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4824      	ldr	r0, [pc, #144]	; (8000b74 <MX_GPIO_Init+0xe4>)
 8000ae4:	f000 fca4 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : Interrupter_Pin DeepseepWakeup_Pin */
  GPIO_InitStruct.Pin = Interrupter_Pin|DeepseepWakeup_Pin;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af0:	2302      	movs	r3, #2
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	481d      	ldr	r0, [pc, #116]	; (8000b74 <MX_GPIO_Init+0xe4>)
 8000afe:	f000 fc97 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : TestStopInput_Pin */
  GPIO_InitStruct.Pin = TestStopInput_Pin;
 8000b02:	2304      	movs	r3, #4
 8000b04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TestStopInput_GPIO_Port, &GPIO_InitStruct);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4817      	ldr	r0, [pc, #92]	; (8000b74 <MX_GPIO_Init+0xe4>)
 8000b16:	f000 fc8b 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TransmitReady_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin;
 8000b1a:	2333      	movs	r3, #51	; 0x33
 8000b1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4812      	ldr	r0, [pc, #72]	; (8000b78 <MX_GPIO_Init+0xe8>)
 8000b30:	f000 fc7e 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b34:	2303      	movs	r3, #3
 8000b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <MX_GPIO_Init+0xec>)
 8000b46:	f000 fc73 	bl	8001430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2006      	movs	r0, #6
 8000b50:	f000 fc39 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b54:	2006      	movs	r0, #6
 8000b56:	f000 fc50 	bl	80013fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2008      	movs	r0, #8
 8000b60:	f000 fc31 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b64:	2008      	movs	r0, #8
 8000b66:	f000 fc48 	bl	80013fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	48000800 	.word	0x48000800
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	48000c00 	.word	0x48000c00

08000b80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == TestStartInput_Pin){
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d112      	bne.n	8000bb6 <HAL_GPIO_EXTI_Callback+0x36>
		timeBuff.startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b98:	6013      	str	r3, [r2, #0]

		if(captures < max_amount_of_runs*2){
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	da05      	bge.n	8000bb6 <HAL_GPIO_EXTI_Callback+0x36>
			captures++;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bb4:	801a      	strh	r2, [r3, #0]
		}

	}

	if(GPIO_Pin == TestStopInput_Pin){
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d119      	bne.n	8000bf0 <HAL_GPIO_EXTI_Callback+0x70>
		timeBuff.endTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_GPIO_EXTI_Callback+0x7c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bc4:	6053      	str	r3, [r2, #4]
		if(timeBuff.endTime != 0){
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x54>
		timeBuffReady = true;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
		}
		if(captures < max_amount_of_runs * 2){
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x88>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	429a      	cmp	r2, r3
 8000be2:	da05      	bge.n	8000bf0 <HAL_GPIO_EXTI_Callback+0x70>
			captures++;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x84>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bee:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	20000100 	.word	0x20000100
 8000c00:	20000444 	.word	0x20000444
 8000c04:	20000440 	.word	0x20000440
 8000c08:	2000045a 	.word	0x2000045a
 8000c0c:	20000454 	.word	0x20000454

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>

08000c1a <LL_AHB2_GRP1_EnableClock>:
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c70:	68fb      	ldr	r3, [r7, #12]
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b085      	sub	sp, #20
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_SPI_MspInit+0x5c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d117      	bne.n	8000d12 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ce6:	f7ff ffca 	bl	8000c7e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff ff95 	bl	8000c1a <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cf0:	23f0      	movs	r3, #240	; 0xf0
 8000cf2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d00:	2305      	movs	r3, #5
 8000d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 fb8f 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40013000 	.word	0x40013000

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d30:	d102      	bne.n	8000d38 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff ff8a 	bl	8000c4c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b09c      	sub	sp, #112	; 0x70
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2250      	movs	r2, #80	; 0x50
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fde5 	bl	8004930 <memset>
  if(hpcd->Instance==USB)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <HAL_PCD_MspInit+0xa8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d136      	bne.n	8000dde <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d74:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000d76:	2318      	movs	r3, #24
 8000d78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000d86:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000d92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f8fb 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000da8:	f7ff ff32 	bl	8000c10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ff34 	bl	8000c1a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000db2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000db6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f000 fb2d 	bl	8001430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dd6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000dda:	f7ff ff37 	bl	8000c4c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3770      	adds	r7, #112	; 0x70
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40006800 	.word	0x40006800

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f99a 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TestStartInput_Pin);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f000 fc7b 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TestStopInput_Pin);
 8000e52:	2004      	movs	r0, #4
 8000e54:	f000 fc74 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
  }

  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e009      	b.n	8000ebc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf1      	blt.n	8000ea8 <_write+0x12>
  }
  return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_close>:

int _close(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_isatty>:

int _isatty(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f003 fcb8 	bl	80048dc <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20030000 	.word	0x20030000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20000460 	.word	0x20000460
 8000fa0:	20000478 	.word	0x20000478

08000fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <SystemInit+0x98>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <SystemInit+0x98>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000fd0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <SystemInit+0x9c>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fee:	f023 0305 	bic.w	r3, r3, #5
 8000ff2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001002:	f023 0301 	bic.w	r3, r3, #1
 8001006:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800100a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100e:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <SystemInit+0xa0>)
 8001010:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <SystemInit+0xa0>)
 8001018:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800101a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800102a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00
 8001040:	faf6fefb 	.word	0xfaf6fefb
 8001044:	22041000 	.word	0x22041000

08001048 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001048:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104c:	3304      	adds	r3, #4

0800104e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001050:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001052:	d3f9      	bcc.n	8001048 <CopyDataInit>
  bx lr
 8001054:	4770      	bx	lr

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001056:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001058:	3004      	adds	r0, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800105a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>
  bx lr
 800105e:	4770      	bx	lr

08001060 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001062:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001064:	f7ff ff9e 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <LoopForever+0x6>)
 800106a:	490c      	ldr	r1, [pc, #48]	; (800109c <LoopForever+0xa>)
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <LoopForever+0xe>)
 800106e:	2300      	movs	r3, #0
 8001070:	f7ff ffed 	bl	800104e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <LoopForever+0x12>)
 8001076:	490c      	ldr	r1, [pc, #48]	; (80010a8 <LoopForever+0x16>)
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <LoopForever+0x1a>)
 800107a:	2300      	movs	r3, #0
 800107c:	f7ff ffe7 	bl	800104e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <LoopForever+0x1e>)
 8001082:	490c      	ldr	r1, [pc, #48]	; (80010b4 <LoopForever+0x22>)
 8001084:	2300      	movs	r3, #0
 8001086:	f7ff ffe8 	bl	800105a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800108a:	f003 fc2d 	bl	80048e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800108e:	f7ff fad3 	bl	8000638 <main>

08001092 <LoopForever>:

LoopForever:
  b LoopForever
 8001092:	e7fe      	b.n	8001092 <LoopForever>
  ldr   r0, =_estack
 8001094:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001098:	20000008 	.word	0x20000008
 800109c:	20000080 	.word	0x20000080
 80010a0:	08005a48 	.word	0x08005a48
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80010a4:	20030000 	.word	0x20030000
 80010a8:	20030000 	.word	0x20030000
 80010ac:	08005ac0 	.word	0x08005ac0
  INIT_BSS _sbss, _ebss
 80010b0:	20000080 	.word	0x20000080
 80010b4:	20000478 	.word	0x20000478

080010b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_Init+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_Init+0x3c>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f000 f96c 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 f80f 	bl	80010fc <HAL_InitTick>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	e001      	b.n	80010ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ea:	f7ff fde1 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	58004000 	.word	0x58004000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_InitTick+0x6c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d024      	beq.n	800115a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001110:	f001 fcce 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8001114:	4602      	mov	r2, r0
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_InitTick+0x6c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001120:	fbb3 f3f1 	udiv	r3, r3, r1
 8001124:	fbb2 f3f3 	udiv	r3, r2, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f974 	bl	8001416 <HAL_SYSTICK_Config>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10f      	bne.n	8001154 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	d809      	bhi.n	800114e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113a:	2200      	movs	r2, #0
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001142:	f000 f940 	bl	80013c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_InitTick+0x70>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e007      	b.n	800115e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e004      	b.n	800115e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e001      	b.n	800115e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000018 	.word	0x20000018
 800116c:	20000014 	.word	0x20000014

08001170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000018 	.word	0x20000018
 8001194:	20000464 	.word	0x20000464

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000464 	.word	0x20000464

080011b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTickPrio+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000014 	.word	0x20000014

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffe2 	bl	8001198 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffd2 	bl	8001198 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000018 	.word	0x20000018

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff29 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff40 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff90 	bl	8001304 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5f 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff33 	bl	8001274 <__NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffa4 	bl	800136c <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e14c      	b.n	80016da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 813e 	beq.w	80016d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d005      	beq.n	8001470 <HAL_GPIO_Init+0x40>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d130      	bne.n	80014d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014a6:	2201      	movs	r2, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	f003 0201 	and.w	r2, r3, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d017      	beq.n	800150e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0203 	and.w	r2, r3, #3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8098 	beq.w	80016d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015a4:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_GPIO_Init+0x2c8>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ce:	d019      	beq.n	8001604 <HAL_GPIO_Init+0x1d4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a4a      	ldr	r2, [pc, #296]	; (80016fc <HAL_GPIO_Init+0x2cc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d013      	beq.n	8001600 <HAL_GPIO_Init+0x1d0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a49      	ldr	r2, [pc, #292]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d00d      	beq.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a48      	ldr	r2, [pc, #288]	; (8001704 <HAL_GPIO_Init+0x2d4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d007      	beq.n	80015f8 <HAL_GPIO_Init+0x1c8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a47      	ldr	r2, [pc, #284]	; (8001708 <HAL_GPIO_Init+0x2d8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d101      	bne.n	80015f4 <HAL_GPIO_Init+0x1c4>
 80015f0:	2304      	movs	r3, #4
 80015f2:	e008      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015f4:	2307      	movs	r3, #7
 80015f6:	e006      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015f8:	2303      	movs	r3, #3
 80015fa:	e004      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 8001604:	2300      	movs	r3, #0
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	f002 0203 	and.w	r2, r2, #3
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4093      	lsls	r3, r2
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001616:	4938      	ldr	r1, [pc, #224]	; (80016f8 <HAL_GPIO_Init+0x2c8>)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_GPIO_Init+0x2dc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001648:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_GPIO_Init+0x2dc>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_GPIO_Init+0x2dc>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001672:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_GPIO_Init+0x2dc>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_GPIO_Init+0x2dc>)
 800167a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800169e:	4a1b      	ldr	r2, [pc, #108]	; (800170c <HAL_GPIO_Init+0x2dc>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_GPIO_Init+0x2dc>)
 80016a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_GPIO_Init+0x2dc>)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f aeab 	bne.w	8001440 <HAL_GPIO_Init+0x10>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40010000 	.word	0x40010000
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800
 8001704:	48000c00 	.word	0x48000c00
 8001708:	48001000 	.word	0x48001000
 800170c:	58000800 	.word	0x58000800

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800172c:	e002      	b.n	8001734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fa0e 	bl	8000b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58000800 	.word	0x58000800

08001770 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001772:	b08b      	sub	sp, #44	; 0x2c
 8001774:	af06      	add	r7, sp, #24
 8001776:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0cb      	b.n	800191a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fad2 	bl	8000d40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2203      	movs	r2, #3
 80017a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 f85b 	bl	8004864 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e040      	b.n	8001836 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3301      	adds	r3, #1
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	3303      	adds	r3, #3
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3338      	adds	r3, #56	; 0x38
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	333c      	adds	r3, #60	; 0x3c
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	3340      	adds	r3, #64	; 0x40
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	3301      	adds	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3b9      	bcc.n	80017b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e044      	b.n	80018d0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	3301      	adds	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3b5      	bcc.n	8001846 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	687e      	ldr	r6, [r7, #4]
 80018e2:	466d      	mov	r5, sp
 80018e4:	f106 0410 	add.w	r4, r6, #16
 80018e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	602b      	str	r3, [r5, #0]
 80018f0:	1d33      	adds	r3, r6, #4
 80018f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018f4:	6838      	ldr	r0, [r7, #0]
 80018f6:	f002 ffd0 	bl	800489a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f805 	bl	8001922 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001922 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001946:	b29b      	uxth	r3, r3
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800195a:	b29b      	uxth	r3, r3
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	58000400 	.word	0x58000400

08001998 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	58000400 	.word	0x58000400

080019b4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019c6:	d101      	bne.n	80019cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_RCC_HSE_Enable>:
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_RCC_HSE_Disable>:
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_RCC_HSE_IsReady>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a26:	d101      	bne.n	8001a2c <LL_RCC_HSE_IsReady+0x18>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <LL_RCC_HSE_IsReady+0x1a>
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_RCC_HSI_Enable>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_RCC_HSI_Disable>:
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_RCC_HSI_IsReady>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d101      	bne.n	8001a8c <LL_RCC_HSI_IsReady+0x18>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <LL_RCC_HSI_IsReady+0x1a>
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_RCC_HSI48_Enable>:
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_RCC_HSI48_Disable>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_RCC_HSI48_IsReady>:
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d101      	bne.n	8001b1e <LL_RCC_HSI48_IsReady+0x18>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_RCC_HSI48_IsReady+0x1a>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_RCC_LSE_Enable>:
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_RCC_LSE_Disable>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_LSE_EnableBypass>:
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_RCC_LSE_DisableBypass>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d101      	bne.n	8001bca <LL_RCC_LSE_IsReady+0x18>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_RCC_LSE_IsReady+0x1a>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d101      	bne.n	8001c32 <LL_RCC_LSI1_IsReady+0x18>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_RCC_LSI1_IsReady+0x1a>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d101      	bne.n	8001c9a <LL_RCC_LSI2_IsReady+0x18>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_RCC_LSI2_IsReady+0x1a>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6013      	str	r3, [r2, #0]
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d101      	bne.n	8001d26 <LL_RCC_MSI_IsReady+0x16>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_RCC_MSI_IsReady+0x18>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2bb0      	cmp	r3, #176	; 0xb0
 8001d70:	d901      	bls.n	8001d76 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001d72:	23b0      	movs	r3, #176	; 0xb0
 8001d74:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001d76:	687b      	ldr	r3, [r7, #4]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 0203 	bic.w	r2, r3, #3
 8001dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e52:	f023 020f 	bic.w	r2, r3, #15
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f24:	6013      	str	r3, [r2, #0]
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f42:	d101      	bne.n	8001f48 <LL_RCC_PLL_IsReady+0x18>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <LL_RCC_PLL_IsReady+0x1a>
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d101      	bne.n	8001fce <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fee:	d101      	bne.n	8001ff4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002008:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d101      	bne.n	800201a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002038:	d101      	bne.n	800203e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002058:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800205c:	d101      	bne.n	8002062 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b08d      	sub	sp, #52	; 0x34
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e363      	b.n	800274a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 808d 	beq.w	80021aa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002090:	f7ff fea1 	bl	8001dd6 <LL_RCC_GetSysClkSource>
 8002094:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002096:	f7ff ff82 	bl	8001f9e <LL_RCC_PLL_GetMainSource>
 800209a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x3e>
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d147      	bne.n	8002138 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d144      	bne.n	8002138 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e347      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020be:	f7ff fe4c 	bl	8001d5a <LL_RCC_MSI_GetRange>
 80020c2:	4603      	mov	r3, r0
 80020c4:	429c      	cmp	r4, r3
 80020c6:	d914      	bls.n	80020f2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fd03 	bl	8002ad8 <RCC_SetFlashLatencyFromMSIRange>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e336      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fe26 	bl	8001d32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fe4a 	bl	8001d84 <LL_RCC_MSI_SetCalibTrimming>
 80020f0:	e013      	b.n	800211a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fe1b 	bl	8001d32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fe3f 	bl	8001d84 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fce4 	bl	8002ad8 <RCC_SetFlashLatencyFromMSIRange>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e317      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800211a:	f000 fcc9 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 800211e:	4603      	mov	r3, r0
 8002120:	4aa4      	ldr	r2, [pc, #656]	; (80023b4 <HAL_RCC_OscConfig+0x344>)
 8002122:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002124:	4ba4      	ldr	r3, [pc, #656]	; (80023b8 <HAL_RCC_OscConfig+0x348>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ffe7 	bl	80010fc <HAL_InitTick>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d039      	beq.n	80021a8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e308      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01e      	beq.n	800217e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002140:	f7ff fdc8 	bl	8001cd4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002144:	f7ff f828 	bl	8001198 <HAL_GetTick>
 8002148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800214c:	f7ff f824 	bl	8001198 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e2f5      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800215e:	f7ff fdd7 	bl	8001d10 <LL_RCC_MSI_IsReady>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f1      	beq.n	800214c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fde0 	bl	8001d32 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fe04 	bl	8001d84 <LL_RCC_MSI_SetCalibTrimming>
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800217e:	f7ff fdb8 	bl	8001cf2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002182:	f7ff f809 	bl	8001198 <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800218a:	f7ff f805 	bl	8001198 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e2d6      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800219c:	f7ff fdb8 	bl	8001d10 <LL_RCC_MSI_IsReady>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f1      	bne.n	800218a <HAL_RCC_OscConfig+0x11a>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021a8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d047      	beq.n	8002246 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b6:	f7ff fe0e 	bl	8001dd6 <LL_RCC_GetSysClkSource>
 80021ba:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021bc:	f7ff feef 	bl	8001f9e <LL_RCC_PLL_GetMainSource>
 80021c0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_OscConfig+0x164>
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d108      	bne.n	80021e0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d105      	bne.n	80021e0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d134      	bne.n	8002246 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e2b4      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_OscConfig+0x180>
 80021ea:	f7ff fbf5 	bl	80019d8 <LL_RCC_HSE_Enable>
 80021ee:	e001      	b.n	80021f4 <HAL_RCC_OscConfig+0x184>
 80021f0:	f7ff fc01 	bl	80019f6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe ffcc 	bl	8001198 <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe ffc8 	bl	8001198 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e299      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002216:	f7ff fbfd 	bl	8001a14 <LL_RCC_HSE_IsReady>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f1      	beq.n	8002204 <HAL_RCC_OscConfig+0x194>
 8002220:	e011      	b.n	8002246 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe ffb9 	bl	8001198 <HAL_GetTick>
 8002226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222a:	f7fe ffb5 	bl	8001198 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b64      	cmp	r3, #100	; 0x64
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e286      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800223c:	f7ff fbea 	bl	8001a14 <LL_RCC_HSE_IsReady>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f1      	bne.n	800222a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d04c      	beq.n	80022ec <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002252:	f7ff fdc0 	bl	8001dd6 <LL_RCC_GetSysClkSource>
 8002256:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002258:	f7ff fea1 	bl	8001f9e <LL_RCC_PLL_GetMainSource>
 800225c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b04      	cmp	r3, #4
 8002262:	d005      	beq.n	8002270 <HAL_RCC_OscConfig+0x200>
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d10e      	bne.n	8002288 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d10b      	bne.n	8002288 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e266      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fc09 	bl	8001a98 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002286:	e031      	b.n	80022ec <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d019      	beq.n	80022c4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002290:	f7ff fbd2 	bl	8001a38 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe ff80 	bl	8001198 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229c:	f7fe ff7c 	bl	8001198 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e24d      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022ae:	f7ff fbe1 	bl	8001a74 <LL_RCC_HSI_IsReady>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f1      	beq.n	800229c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fbeb 	bl	8001a98 <LL_RCC_HSI_SetCalibTrimming>
 80022c2:	e013      	b.n	80022ec <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c4:	f7ff fbc7 	bl	8001a56 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe ff66 	bl	8001198 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d0:	f7fe ff62 	bl	8001198 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e233      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80022e2:	f7ff fbc7 	bl	8001a74 <LL_RCC_HSI_IsReady>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f1      	bne.n	80022d0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a3 	beq.w	800244c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d076      	beq.n	80023fc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	d046      	beq.n	80023a8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800231a:	f7ff fc7e 	bl	8001c1a <LL_RCC_LSI1_IsReady>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d113      	bne.n	800234c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002324:	f7ff fc57 	bl	8001bd6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002328:	f7fe ff36 	bl	8001198 <HAL_GetTick>
 800232c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002330:	f7fe ff32 	bl	8001198 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e203      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002342:	f7ff fc6a 	bl	8001c1a <LL_RCC_LSI1_IsReady>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f1      	beq.n	8002330 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800234c:	f7ff fc77 	bl	8001c3e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe ff22 	bl	8001198 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002358:	f7fe ff1e 	bl	8001198 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b03      	cmp	r3, #3
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e1ef      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800236a:	f7ff fc8a 	bl	8001c82 <LL_RCC_LSI2_IsReady>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f1      	beq.n	8002358 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fc94 	bl	8001ca6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800237e:	f7ff fc3b 	bl	8001bf8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7fe ff09 	bl	8001198 <HAL_GetTick>
 8002386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800238a:	f7fe ff05 	bl	8001198 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e1d6      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800239c:	f7ff fc3d 	bl	8001c1a <LL_RCC_LSI1_IsReady>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f1      	bne.n	800238a <HAL_RCC_OscConfig+0x31a>
 80023a6:	e051      	b.n	800244c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023a8:	f7ff fc15 	bl	8001bd6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe fef4 	bl	8001198 <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023b2:	e00c      	b.n	80023ce <HAL_RCC_OscConfig+0x35e>
 80023b4:	20000010 	.word	0x20000010
 80023b8:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023bc:	f7fe feec 	bl	8001198 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1bd      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023ce:	f7ff fc24 	bl	8001c1a <LL_RCC_LSI1_IsReady>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f1      	beq.n	80023bc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80023d8:	f7ff fc42 	bl	8001c60 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023de:	f7fe fedb 	bl	8001198 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1ac      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023f0:	f7ff fc47 	bl	8001c82 <LL_RCC_LSI2_IsReady>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f1      	bne.n	80023de <HAL_RCC_OscConfig+0x36e>
 80023fa:	e027      	b.n	800244c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80023fc:	f7ff fc30 	bl	8001c60 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe feca 	bl	8001198 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002408:	f7fe fec6 	bl	8001198 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b03      	cmp	r3, #3
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e197      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800241a:	f7ff fc32 	bl	8001c82 <LL_RCC_LSI2_IsReady>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f1      	bne.n	8002408 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002424:	f7ff fbe8 	bl	8001bf8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7fe feb6 	bl	8001198 <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002430:	f7fe feb2 	bl	8001198 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e183      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002442:	f7ff fbea 	bl	8001c1a <LL_RCC_LSI1_IsReady>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f1      	bne.n	8002430 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d05b      	beq.n	8002510 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002458:	4ba7      	ldr	r3, [pc, #668]	; (80026f8 <HAL_RCC_OscConfig+0x688>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d114      	bne.n	800248e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002464:	f7ff fa88 	bl	8001978 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002468:	f7fe fe96 	bl	8001198 <HAL_GetTick>
 800246c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002470:	f7fe fe92 	bl	8001198 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e163      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002482:	4b9d      	ldr	r3, [pc, #628]	; (80026f8 <HAL_RCC_OscConfig+0x688>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d102      	bne.n	800249c <HAL_RCC_OscConfig+0x42c>
 8002496:	f7ff fb48 	bl	8001b2a <LL_RCC_LSE_Enable>
 800249a:	e00c      	b.n	80024b6 <HAL_RCC_OscConfig+0x446>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d104      	bne.n	80024ae <HAL_RCC_OscConfig+0x43e>
 80024a4:	f7ff fb63 	bl	8001b6e <LL_RCC_LSE_EnableBypass>
 80024a8:	f7ff fb3f 	bl	8001b2a <LL_RCC_LSE_Enable>
 80024ac:	e003      	b.n	80024b6 <HAL_RCC_OscConfig+0x446>
 80024ae:	f7ff fb4d 	bl	8001b4c <LL_RCC_LSE_Disable>
 80024b2:	f7ff fb6d 	bl	8001b90 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d014      	beq.n	80024e8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fe6b 	bl	8001198 <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fe67 	bl	8001198 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e136      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80024dc:	f7ff fb69 	bl	8001bb2 <LL_RCC_LSE_IsReady>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ef      	beq.n	80024c6 <HAL_RCC_OscConfig+0x456>
 80024e6:	e013      	b.n	8002510 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe fe56 	bl	8001198 <HAL_GetTick>
 80024ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7fe fe52 	bl	8001198 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e121      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002506:	f7ff fb54 	bl	8001bb2 <LL_RCC_LSE_IsReady>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ef      	bne.n	80024f0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d02c      	beq.n	8002576 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d014      	beq.n	800254e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002524:	f7ff facd 	bl	8001ac2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fe fe36 	bl	8001198 <HAL_GetTick>
 800252c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002530:	f7fe fe32 	bl	8001198 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e103      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002542:	f7ff fae0 	bl	8001b06 <LL_RCC_HSI48_IsReady>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f1      	beq.n	8002530 <HAL_RCC_OscConfig+0x4c0>
 800254c:	e013      	b.n	8002576 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800254e:	f7ff fac9 	bl	8001ae4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7fe fe21 	bl	8001198 <HAL_GetTick>
 8002556:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800255a:	f7fe fe1d 	bl	8001198 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0ee      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800256c:	f7ff facb 	bl	8001b06 <LL_RCC_HSI48_IsReady>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f1      	bne.n	800255a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80e4 	beq.w	8002748 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002580:	f7ff fc29 	bl	8001dd6 <LL_RCC_GetSysClkSource>
 8002584:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	2b02      	cmp	r3, #2
 8002594:	f040 80b4 	bne.w	8002700 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0203 	and.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d123      	bne.n	80025ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d11c      	bne.n	80025ee <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d114      	bne.n	80025ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d10d      	bne.n	80025ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d05d      	beq.n	80026aa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	d058      	beq.n	80026a6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0a1      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002606:	f7ff fc84 	bl	8001f12 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800260a:	f7fe fdc5 	bl	8001198 <HAL_GetTick>
 800260e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe fdc1 	bl	8001198 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e092      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ef      	bne.n	8002612 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x68c>)
 800263a:	4013      	ands	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002644:	4311      	orrs	r1, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800264a:	0212      	lsls	r2, r2, #8
 800264c:	4311      	orrs	r1, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002652:	4311      	orrs	r1, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002658:	4311      	orrs	r1, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800265e:	430a      	orrs	r2, r1
 8002660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002664:	4313      	orrs	r3, r2
 8002666:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002668:	f7ff fc44 	bl	8001ef4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800267c:	f7fe fd8c 	bl	8001198 <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fd88 	bl	8001198 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e059      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ef      	beq.n	8002684 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a4:	e050      	b.n	8002748 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e04f      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d147      	bne.n	8002748 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026b8:	f7ff fc1c 	bl	8001ef4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026cc:	f7fe fd64 	bl	8001198 <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fd60 	bl	8001198 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e031      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ef      	beq.n	80026d4 <HAL_RCC_OscConfig+0x664>
 80026f4:	e028      	b.n	8002748 <HAL_RCC_OscConfig+0x6d8>
 80026f6:	bf00      	nop
 80026f8:	58000400 	.word	0x58000400
 80026fc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d01e      	beq.n	8002744 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	f7ff fc04 	bl	8001f12 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fd45 	bl	8001198 <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe fd41 	bl	8001198 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e012      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ef      	bne.n	8002712 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_OscConfig+0x6e4>)
 800273e:	4013      	ands	r3, r2
 8002740:	60cb      	str	r3, [r1, #12]
 8002742:	e001      	b.n	8002748 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3734      	adds	r7, #52	; 0x34
 800274e:	46bd      	mov	sp, r7
 8002750:	bd90      	pop	{r4, r7, pc}
 8002752:	bf00      	nop
 8002754:	eefefffc 	.word	0xeefefffc

08002758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e12d      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b98      	ldr	r3, [pc, #608]	; (80029d0 <HAL_RCC_ClockConfig+0x278>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d91b      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b95      	ldr	r3, [pc, #596]	; (80029d0 <HAL_RCC_ClockConfig+0x278>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4993      	ldr	r1, [pc, #588]	; (80029d0 <HAL_RCC_ClockConfig+0x278>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800278a:	f7fe fd05 	bl	8001198 <HAL_GetTick>
 800278e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002792:	f7fe fd01 	bl	8001198 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e111      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a4:	4b8a      	ldr	r3, [pc, #552]	; (80029d0 <HAL_RCC_ClockConfig+0x278>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d1ef      	bne.n	8002792 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fb13 	bl	8001dee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fce6 	bl	8001198 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027d0:	f7fe fce2 	bl	8001198 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0f2      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027e2:	f7ff fbe8 	bl	8001fb6 <LL_RCC_IsActiveFlag_HPRE>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f1      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d016      	beq.n	8002826 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fb0a 	bl	8001e16 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002802:	f7fe fcc9 	bl	8001198 <HAL_GetTick>
 8002806:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800280a:	f7fe fcc5 	bl	8001198 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0d5      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800281c:	f7ff fbdd 	bl	8001fda <LL_RCC_IsActiveFlag_C2HPRE>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f1      	beq.n	800280a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fb03 	bl	8001e42 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800283c:	f7fe fcac 	bl	8001198 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002844:	f7fe fca8 	bl	8001198 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0b8      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002856:	f7ff fbd3 	bl	8002000 <LL_RCC_IsActiveFlag_SHDHPRE>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f1      	beq.n	8002844 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d016      	beq.n	800289a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fafd 	bl	8001e70 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002876:	f7fe fc8f 	bl	8001198 <HAL_GetTick>
 800287a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800287e:	f7fe fc8b 	bl	8001198 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e09b      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002890:	f7ff fbc9 	bl	8002026 <LL_RCC_IsActiveFlag_PPRE1>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f1      	beq.n	800287e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d017      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff faf3 	bl	8001e98 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028b2:	f7fe fc71 	bl	8001198 <HAL_GetTick>
 80028b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028ba:	f7fe fc6d 	bl	8001198 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e07d      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028cc:	f7ff fbbd 	bl	800204a <LL_RCC_IsActiveFlag_PPRE2>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f1      	beq.n	80028ba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d043      	beq.n	800296a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d106      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80028ea:	f7ff f893 	bl	8001a14 <LL_RCC_HSE_IsReady>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d11e      	bne.n	8002932 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e067      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d106      	bne.n	800290e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002900:	f7ff fb16 	bl	8001f30 <LL_RCC_PLL_IsReady>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d113      	bne.n	8002932 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e05c      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002916:	f7ff f9fb 	bl	8001d10 <LL_RCC_MSI_IsReady>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d108      	bne.n	8002932 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e051      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002924:	f7ff f8a6 	bl	8001a74 <LL_RCC_HSI_IsReady>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e04a      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fa39 	bl	8001dae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800293c:	f7fe fc2c 	bl	8001198 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	e00a      	b.n	800295a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002944:	f7fe fc28 	bl	8001198 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e036      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	f7ff fa3c 	bl	8001dd6 <LL_RCC_GetSysClkSource>
 800295e:	4602      	mov	r2, r0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	429a      	cmp	r2, r3
 8002968:	d1ec      	bne.n	8002944 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_ClockConfig+0x278>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d21b      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_RCC_ClockConfig+0x278>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 0207 	bic.w	r2, r3, #7
 8002980:	4913      	ldr	r1, [pc, #76]	; (80029d0 <HAL_RCC_ClockConfig+0x278>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002988:	f7fe fc06 	bl	8001198 <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002990:	f7fe fc02 	bl	8001198 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e012      	b.n	80029c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_ClockConfig+0x278>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1ef      	bne.n	8002990 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029b0:	f000 f87e 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <HAL_RCC_ClockConfig+0x27c>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80029ba:	f7fe fbf9 	bl	80011b0 <HAL_GetTickPrio>
 80029be:	4603      	mov	r3, r0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fb9b 	bl	80010fc <HAL_InitTick>
 80029c6:	4603      	mov	r3, r0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	58004000 	.word	0x58004000
 80029d4:	20000010 	.word	0x20000010

080029d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029de:	f7ff f9fa 	bl	8001dd6 <LL_RCC_GetSysClkSource>
 80029e2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029ea:	f7ff f9b6 	bl	8001d5a <LL_RCC_MSI_GetRange>
 80029ee:	4603      	mov	r3, r0
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	4a2b      	ldr	r2, [pc, #172]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e04b      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e045      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d10a      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a12:	f7fe ffcf 	bl	80019b4 <LL_RCC_HSE_IsEnabledDiv2>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e03a      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e037      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a28:	f7ff fab9 	bl	8001f9e <LL_RCC_PLL_GetMainSource>
 8002a2c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d003      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x64>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x6a>
 8002a3a:	e00d      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a3e:	60bb      	str	r3, [r7, #8]
        break;
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a42:	f7fe ffb7 	bl	80019b4 <LL_RCC_HSE_IsEnabledDiv2>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d102      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a4e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a50:	e00d      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a54:	60bb      	str	r3, [r7, #8]
        break;
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a58:	f7ff f97f 	bl	8001d5a <LL_RCC_MSI_GetRange>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6a:	60bb      	str	r3, [r7, #8]
        break;
 8002a6c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002a6e:	f7ff fa71 	bl	8001f54 <LL_RCC_PLL_GetN>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	fb03 f402 	mul.w	r4, r3, r2
 8002a7a:	f7ff fa84 	bl	8001f86 <LL_RCC_PLL_GetDivider>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	3301      	adds	r3, #1
 8002a84:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a88:	f7ff fa71 	bl	8001f6e <LL_RCC_PLL_GetR>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	0f5b      	lsrs	r3, r3, #29
 8002a90:	3301      	adds	r3, #1
 8002a92:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a96:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a98:	68fb      	ldr	r3, [r7, #12]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	08005968 	.word	0x08005968
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	01e84800 	.word	0x01e84800

08002ab0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b598      	push	{r3, r4, r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ab4:	f7ff ff90 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002ab8:	4604      	mov	r4, r0
 8002aba:	f7ff fa01 	bl	8001ec0 <LL_RCC_GetAHBPrescaler>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002acc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd98      	pop	{r3, r4, r7, pc}
 8002ad4:	08005928 	.word	0x08005928

08002ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2bb0      	cmp	r3, #176	; 0xb0
 8002ae4:	d903      	bls.n	8002aee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e007      	b.n	8002afe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002afe:	f7ff f9eb 	bl	8001ed8 <LL_RCC_GetAHB4Prescaler>
 8002b02:	4603      	mov	r3, r0
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	0c9c      	lsrs	r4, r3, #18
 8002b22:	f7fe ff39 	bl	8001998 <HAL_PWREx_GetVoltageRange>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f000 f80c 	bl	8002b48 <RCC_SetFlashLatency>
 8002b30:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08005968 	.word	0x08005968
 8002b40:	08005928 	.word	0x08005928
 8002b44:	431bde83 	.word	0x431bde83

08002b48 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b093      	sub	sp, #76	; 0x4c
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b52:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <RCC_SetFlashLatency+0xe8>)
 8002b54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b5e:	4a35      	ldr	r2, [pc, #212]	; (8002c34 <RCC_SetFlashLatency+0xec>)
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b6a:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <RCC_SetFlashLatency+0xf0>)
 8002b6c:	f107 040c 	add.w	r4, r7, #12
 8002b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b76:	2300      	movs	r3, #0
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b80:	d11a      	bne.n	8002bb8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	643b      	str	r3, [r7, #64]	; 0x40
 8002b86:	e013      	b.n	8002bb0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	3348      	adds	r3, #72	; 0x48
 8002b8e:	443b      	add	r3, r7
 8002b90:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d807      	bhi.n	8002baa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	3348      	adds	r3, #72	; 0x48
 8002ba0:	443b      	add	r3, r7
 8002ba2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ba8:	e020      	b.n	8002bec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bac:	3301      	adds	r3, #1
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d9e8      	bls.n	8002b88 <RCC_SetFlashLatency+0x40>
 8002bb6:	e019      	b.n	8002bec <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbc:	e013      	b.n	8002be6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3348      	adds	r3, #72	; 0x48
 8002bc4:	443b      	add	r3, r7
 8002bc6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d807      	bhi.n	8002be0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	3348      	adds	r3, #72	; 0x48
 8002bd6:	443b      	add	r3, r7
 8002bd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002bde:	e005      	b.n	8002bec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be2:	3301      	adds	r3, #1
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d9e8      	bls.n	8002bbe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <RCC_SetFlashLatency+0xf4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 0207 	bic.w	r2, r3, #7
 8002bf4:	4911      	ldr	r1, [pc, #68]	; (8002c3c <RCC_SetFlashLatency+0xf4>)
 8002bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bfc:	f7fe facc 	bl	8001198 <HAL_GetTick>
 8002c00:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c02:	e008      	b.n	8002c16 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c04:	f7fe fac8 	bl	8001198 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e007      	b.n	8002c26 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <RCC_SetFlashLatency+0xf4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1ef      	bne.n	8002c04 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	374c      	adds	r7, #76	; 0x4c
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd90      	pop	{r4, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	080058fc 	.word	0x080058fc
 8002c34:	0800590c 	.word	0x0800590c
 8002c38:	08005918 	.word	0x08005918
 8002c3c:	58004000 	.word	0x58004000

08002c40 <LL_RCC_LSE_IsEnabled>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <LL_RCC_LSE_IsEnabled+0x18>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <LL_RCC_LSE_IsEnabled+0x1a>
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_RCC_LSE_IsReady>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d101      	bne.n	8002c7c <LL_RCC_LSE_IsReady+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_RCC_LSE_IsReady+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_RCC_MSI_EnablePLLMode>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_SetRFWKPClockSource>:
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_RCC_SetSMPSClockSource>:
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f023 0203 	bic.w	r2, r3, #3
 8002ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_RCC_SetSMPSPrescaler>:
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_SetUSARTClockSource>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_SetLPUARTClockSource>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_SetI2CClockSource>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d92:	43db      	mvns	r3, r3
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_RCC_SetLPTIMClockSource>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_SetSAIClockSource>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_RCC_SetRNGClockSource>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_SetCLK48ClockSource>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_SetUSBClockSource>:
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ffe3 	bl	8002e40 <LL_RCC_SetCLK48ClockSource>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <LL_RCC_SetADCClockSource>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_SetRTCClockSource>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_RCC_GetRTCClockSource>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_ForceBackupDomainReset>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_PLLSAI1_Enable>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_PLLSAI1_Disable>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_RCC_PLLSAI1_IsReady>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f86:	d101      	bne.n	8002f8c <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d034      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fbc:	d021      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002fbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fc2:	d81b      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fc8:	d01d      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fce:	d815      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd8:	d110      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fea:	e00d      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f94d 	bl	8003290 <RCCEx_PLLSAI1_ConfigNP>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ffa:	e005      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	77fb      	strb	r3, [r7, #31]
        break;
 8003000:	e002      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003002:	bf00      	nop
 8003004:	e000      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003008:	7ffb      	ldrb	r3, [r7, #31]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fee8 	bl	8002de8 <LL_RCC_SetSAIClockSource>
 8003018:	e001      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301a:	7ffb      	ldrb	r3, [r7, #31]
 800301c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003026:	2b00      	cmp	r3, #0
 8003028:	d046      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800302a:	f7ff ff56 	bl	8002eda <LL_RCC_GetRTCClockSource>
 800302e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	429a      	cmp	r2, r3
 8003038:	d03c      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800303a:	f7fe fc9d 	bl	8001978 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff30 	bl	8002eae <LL_RCC_SetRTCClockSource>
 800304e:	e02e      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800305a:	f7ff ff4b 	bl	8002ef4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800305e:	f7ff ff5a 	bl	8002f16 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800307a:	f7ff fde1 	bl	8002c40 <LL_RCC_LSE_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	2b01      	cmp	r3, #1
 8003082:	d114      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003084:	f7fe f888 	bl	8001198 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800308a:	e00b      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fe f884 	bl	8001198 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d902      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	77fb      	strb	r3, [r7, #31]
              break;
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80030a4:	f7ff fdde 	bl	8002c64 <LL_RCC_LSE_IsReady>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d1ee      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	77bb      	strb	r3, [r7, #30]
 80030b2:	e001      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	7ffb      	ldrb	r3, [r7, #31]
 80030b6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fe2a 	bl	8002d22 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fe35 	bl	8002d4e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe5d 	bl	8002db4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe52 	bl	8002db4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d004      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe2a 	bl	8002d7a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fe1f 	bl	8002d7a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d022      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe8d 	bl	8002e6c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800315a:	d107      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800315c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003174:	d10b      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f8e3 	bl	8003346 <RCCEx_PLLSAI1_ConfigNQ>
 8003180:	4603      	mov	r3, r0
 8003182:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003184:	7ffb      	ldrb	r3, [r7, #31]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800318a:	7ffb      	ldrb	r3, [r7, #31]
 800318c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02b      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d008      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ac:	d003      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fe2a 	bl	8002e14 <LL_RCC_SetRNGClockSource>
 80031c0:	e00a      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7ff fe21 	bl	8002e14 <LL_RCC_SetRNGClockSource>
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff fe34 	bl	8002e40 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80031e0:	d107      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d022      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fe3d 	bl	8002e82 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003210:	d107      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800322a:	d10b      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f8e3 	bl	80033fc <RCCEx_PLLSAI1_ConfigNR>
 8003236:	4603      	mov	r3, r0
 8003238:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800323a:	7ffb      	ldrb	r3, [r7, #31]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003240:	7ffb      	ldrb	r3, [r7, #31]
 8003242:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fd26 	bl	8002ca6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fd45 	bl	8002cfa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fd2c 	bl	8002cd2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800327a:	7fbb      	ldrb	r3, [r7, #30]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003288:	f7ff fcfe 	bl	8002c88 <LL_RCC_MSI_EnablePLLMode>
}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}

08003290 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800329c:	f7ff fe5b 	bl	8002f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032a0:	f7fd ff7a 	bl	8001198 <HAL_GetTick>
 80032a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032a6:	e009      	b.n	80032bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032a8:	f7fd ff76 	bl	8001198 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d902      	bls.n	80032bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ba:	e004      	b.n	80032c6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032bc:	f7ff fe5a 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d137      	bne.n	800333c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e0:	4313      	orrs	r3, r2
 80032e2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f6:	4313      	orrs	r3, r2
 80032f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032fa:	f7ff fe1d 	bl	8002f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fe:	f7fd ff4b 	bl	8001198 <HAL_GetTick>
 8003302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003304:	e009      	b.n	800331a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003306:	f7fd ff47 	bl	8001198 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d902      	bls.n	800331a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	73fb      	strb	r3, [r7, #15]
        break;
 8003318:	e004      	b.n	8003324 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800331a:	f7ff fe2b 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 800331e:	4603      	mov	r3, r0
 8003320:	2b01      	cmp	r3, #1
 8003322:	d1f0      	bne.n	8003306 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003338:	4313      	orrs	r3, r2
 800333a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003352:	f7ff fe00 	bl	8002f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003356:	f7fd ff1f 	bl	8001198 <HAL_GetTick>
 800335a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800335c:	e009      	b.n	8003372 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800335e:	f7fd ff1b 	bl	8001198 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d902      	bls.n	8003372 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	73fb      	strb	r3, [r7, #15]
      break;
 8003370:	e004      	b.n	800337c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003372:	f7ff fdff 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d137      	bne.n	80033f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003396:	4313      	orrs	r3, r2
 8003398:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ac:	4313      	orrs	r3, r2
 80033ae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033b0:	f7ff fdc2 	bl	8002f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b4:	f7fd fef0 	bl	8001198 <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033ba:	e009      	b.n	80033d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033bc:	f7fd feec 	bl	8001198 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d902      	bls.n	80033d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	73fb      	strb	r3, [r7, #15]
        break;
 80033ce:	e004      	b.n	80033da <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033d0:	f7ff fdd0 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d1f0      	bne.n	80033bc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d108      	bne.n	80033f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ee:	4313      	orrs	r3, r2
 80033f0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003408:	f7ff fda5 	bl	8002f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800340c:	f7fd fec4 	bl	8001198 <HAL_GetTick>
 8003410:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003412:	e009      	b.n	8003428 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003414:	f7fd fec0 	bl	8001198 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d902      	bls.n	8003428 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	73fb      	strb	r3, [r7, #15]
      break;
 8003426:	e004      	b.n	8003432 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003428:	f7ff fda4 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d137      	bne.n	80034a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344c:	4313      	orrs	r3, r2
 800344e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003466:	f7ff fd67 	bl	8002f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346a:	f7fd fe95 	bl	8001198 <HAL_GetTick>
 800346e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003470:	e009      	b.n	8003486 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003472:	f7fd fe91 	bl	8001198 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d902      	bls.n	8003486 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	73fb      	strb	r3, [r7, #15]
        break;
 8003484:	e004      	b.n	8003490 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003486:	f7ff fd75 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d1f0      	bne.n	8003472 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034a4:	4313      	orrs	r3, r2
 80034a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e095      	b.n	80035f0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d108      	bne.n	80034de <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d4:	d009      	beq.n	80034ea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	61da      	str	r2, [r3, #28]
 80034dc:	e005      	b.n	80034ea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd fbdb 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003520:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800352a:	d902      	bls.n	8003532 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e002      	b.n	8003538 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003536:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003540:	d007      	beq.n	8003552 <HAL_SPI_Init+0xa0>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800354a:	d002      	beq.n	8003552 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	ea42 0103 	orr.w	r1, r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	f003 0204 	and.w	r2, r3, #4
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035ce:	ea42 0103 	orr.w	r1, r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_SPI_Transmit+0x22>
 8003616:	2302      	movs	r3, #2
 8003618:	e158      	b.n	80038cc <HAL_SPI_Transmit+0x2d4>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003622:	f7fd fdb9 	bl	8001198 <HAL_GetTick>
 8003626:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d002      	beq.n	800363e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003638:	2302      	movs	r3, #2
 800363a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800363c:	e13d      	b.n	80038ba <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_SPI_Transmit+0x52>
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800364e:	e134      	b.n	80038ba <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2203      	movs	r2, #3
 8003654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	88fa      	ldrh	r2, [r7, #6]
 8003668:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	88fa      	ldrh	r2, [r7, #6]
 800366e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369a:	d10f      	bne.n	80036bc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d007      	beq.n	80036da <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036e2:	d94b      	bls.n	800377c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_SPI_Transmit+0xfa>
 80036ec:	8afb      	ldrh	r3, [r7, #22]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d13e      	bne.n	8003770 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	1c9a      	adds	r2, r3, #2
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003716:	e02b      	b.n	8003770 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d112      	bne.n	800374c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800374a:	e011      	b.n	8003770 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800374c:	f7fd fd24 	bl	8001198 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d803      	bhi.n	8003764 <HAL_SPI_Transmit+0x16c>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003762:	d102      	bne.n	800376a <HAL_SPI_Transmit+0x172>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800376e:	e0a4      	b.n	80038ba <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ce      	bne.n	8003718 <HAL_SPI_Transmit+0x120>
 800377a:	e07c      	b.n	8003876 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_SPI_Transmit+0x192>
 8003784:	8afb      	ldrh	r3, [r7, #22]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d170      	bne.n	800386c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d912      	bls.n	80037ba <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	881a      	ldrh	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	1c9a      	adds	r2, r3, #2
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b02      	subs	r3, #2
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b8:	e058      	b.n	800386c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	330c      	adds	r3, #12
 80037c4:	7812      	ldrb	r2, [r2, #0]
 80037c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037e0:	e044      	b.n	800386c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d12b      	bne.n	8003848 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d912      	bls.n	8003820 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	1c9a      	adds	r2, r3, #2
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b02      	subs	r3, #2
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800381e:	e025      	b.n	800386c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003846:	e011      	b.n	800386c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003848:	f7fd fca6 	bl	8001198 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d803      	bhi.n	8003860 <HAL_SPI_Transmit+0x268>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800385e:	d102      	bne.n	8003866 <HAL_SPI_Transmit+0x26e>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	77fb      	strb	r3, [r7, #31]
          goto error;
 800386a:	e026      	b.n	80038ba <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1b5      	bne.n	80037e2 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	6839      	ldr	r1, [r7, #0]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fce4 	bl	8004248 <SPI_EndRxTxTransaction>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e000      	b.n	80038ba <HAL_SPI_Transmit+0x2c2>
  }

error:
 80038b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038f0:	d112      	bne.n	8003918 <HAL_SPI_Receive+0x44>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10e      	bne.n	8003918 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2204      	movs	r2, #4
 80038fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f910 	bl	8003b34 <HAL_SPI_TransmitReceive>
 8003914:	4603      	mov	r3, r0
 8003916:	e109      	b.n	8003b2c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_SPI_Receive+0x52>
 8003922:	2302      	movs	r3, #2
 8003924:	e102      	b.n	8003b2c <HAL_SPI_Receive+0x258>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800392e:	f7fd fc33 	bl	8001198 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d002      	beq.n	8003946 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003940:	2302      	movs	r3, #2
 8003942:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003944:	e0e9      	b.n	8003b1a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_SPI_Receive+0x7e>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003956:	e0e0      	b.n	8003b1a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2204      	movs	r2, #4
 800395c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039a2:	d908      	bls.n	80039b6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	e007      	b.n	80039c6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039c4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ce:	d10f      	bne.n	80039f0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d007      	beq.n	8003a0e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a16:	d867      	bhi.n	8003ae8 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a18:	e030      	b.n	8003a7c <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d117      	bne.n	8003a58 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f103 020c 	add.w	r2, r3, #12
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	7812      	ldrb	r2, [r2, #0]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a56:	e011      	b.n	8003a7c <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a58:	f7fd fb9e 	bl	8001198 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d803      	bhi.n	8003a70 <HAL_SPI_Receive+0x19c>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6e:	d102      	bne.n	8003a76 <HAL_SPI_Receive+0x1a2>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a7a:	e04e      	b.n	8003b1a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1c8      	bne.n	8003a1a <HAL_SPI_Receive+0x146>
 8003a88:	e034      	b.n	8003af4 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d115      	bne.n	8003ac4 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	b292      	uxth	r2, r2
 8003aa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	1c9a      	adds	r2, r3, #2
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ac2:	e011      	b.n	8003ae8 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac4:	f7fd fb68 	bl	8001198 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d803      	bhi.n	8003adc <HAL_SPI_Receive+0x208>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ada:	d102      	bne.n	8003ae2 <HAL_SPI_Receive+0x20e>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ae6:	e018      	b.n	8003b1a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ca      	bne.n	8003a8a <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	6839      	ldr	r1, [r7, #0]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fb4d 	bl	8004198 <SPI_EndRxTransaction>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
 8003b16:	e000      	b.n	8003b1a <HAL_SPI_Receive+0x246>
  }

error :
 8003b18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b42:	2301      	movs	r3, #1
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x26>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e1fb      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x41e>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b62:	f7fd fb19 	bl	8001198 <HAL_GetTick>
 8003b66:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b6e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b76:	887b      	ldrh	r3, [r7, #2]
 8003b78:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b7e:	7efb      	ldrb	r3, [r7, #27]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d00e      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x6e>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b8a:	d106      	bne.n	8003b9a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <HAL_SPI_TransmitReceive+0x66>
 8003b94:	7efb      	ldrb	r3, [r7, #27]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d003      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ba0:	e1cd      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_SPI_TransmitReceive+0x80>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_SPI_TransmitReceive+0x80>
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d103      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bba:	e1c0      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d003      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2205      	movs	r2, #5
 8003bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c12:	d802      	bhi.n	8003c1a <HAL_SPI_TransmitReceive+0xe6>
 8003c14:	8a3b      	ldrh	r3, [r7, #16]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d908      	bls.n	8003c2c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e007      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d007      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c62:	d97c      	bls.n	8003d5e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x13e>
 8003c6c:	8a7b      	ldrh	r3, [r7, #18]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d169      	bne.n	8003d46 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	881a      	ldrh	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c96:	e056      	b.n	8003d46 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d11b      	bne.n	8003cde <HAL_SPI_TransmitReceive+0x1aa>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <HAL_SPI_TransmitReceive+0x1aa>
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d113      	bne.n	8003cde <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	1c9a      	adds	r2, r3, #2
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d11c      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x1f2>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d016      	beq.n	8003d26 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	b292      	uxth	r2, r2
 8003d04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	1c9a      	adds	r2, r3, #2
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d22:	2301      	movs	r3, #1
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d26:	f7fd fa37 	bl	8001198 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d807      	bhi.n	8003d46 <HAL_SPI_TransmitReceive+0x212>
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3c:	d003      	beq.n	8003d46 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d44:	e0fb      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1a3      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x164>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d19d      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x164>
 8003d5c:	e0df      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_SPI_TransmitReceive+0x23a>
 8003d66:	8a7b      	ldrh	r3, [r7, #18]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 80cb 	bne.w	8003f04 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d912      	bls.n	8003d9e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	881a      	ldrh	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	1c9a      	adds	r2, r3, #2
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b02      	subs	r3, #2
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d9c:	e0b2      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc4:	e09e      	b.n	8003f04 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d134      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x30a>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d02f      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x30a>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d12c      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d912      	bls.n	8003e14 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b02      	subs	r3, #2
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e12:	e012      	b.n	8003e3a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	7812      	ldrb	r2, [r2, #0]
 8003e20:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d148      	bne.n	8003ede <HAL_SPI_TransmitReceive+0x3aa>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d042      	beq.n	8003ede <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d923      	bls.n	8003eac <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	1c9a      	adds	r2, r3, #2
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b02      	subs	r3, #2
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d81f      	bhi.n	8003eda <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	e016      	b.n	8003eda <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f103 020c 	add.w	r2, r3, #12
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eda:	2301      	movs	r3, #1
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ede:	f7fd f95b 	bl	8001198 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d803      	bhi.n	8003ef6 <HAL_SPI_TransmitReceive+0x3c2>
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef4:	d102      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x3c8>
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f02:	e01c      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f47f af5b 	bne.w	8003dc6 <HAL_SPI_TransmitReceive+0x292>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f af54 	bne.w	8003dc6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f990 	bl	8004248 <SPI_EndRxTxTransaction>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d006      	beq.n	8003f3c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	661a      	str	r2, [r3, #96]	; 0x60
 8003f3a:	e000      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3728      	adds	r7, #40	; 0x28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f6c:	f7fd f914 	bl	8001198 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	4413      	add	r3, r2
 8003f7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f7c:	f7fd f90c 	bl	8001198 <HAL_GetTick>
 8003f80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f82:	4b39      	ldr	r3, [pc, #228]	; (8004068 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	015b      	lsls	r3, r3, #5
 8003f88:	0d1b      	lsrs	r3, r3, #20
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f92:	e054      	b.n	800403e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f9a:	d050      	beq.n	800403e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f9c:	f7fd f8fc 	bl	8001198 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d902      	bls.n	8003fb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d13d      	bne.n	800402e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fca:	d111      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd4:	d004      	beq.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	d107      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	d10f      	bne.n	800401a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004018:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e017      	b.n	800405e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3b01      	subs	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	429a      	cmp	r2, r3
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	429a      	cmp	r2, r3
 800405a:	d19b      	bne.n	8003f94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000010 	.word	0x20000010

0800406c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800407e:	f7fd f88b 	bl	8001198 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	4413      	add	r3, r2
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800408e:	f7fd f883 	bl	8001198 <HAL_GetTick>
 8004092:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800409c:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	00da      	lsls	r2, r3, #3
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	0d1b      	lsrs	r3, r3, #20
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040b4:	e060      	b.n	8004178 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040bc:	d107      	bne.n	80040ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d104      	bne.n	80040ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d4:	d050      	beq.n	8004178 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040d6:	f7fd f85f 	bl	8001198 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d902      	bls.n	80040ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d13d      	bne.n	8004168 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004104:	d111      	bne.n	800412a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410e:	d004      	beq.n	800411a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d107      	bne.n	800412a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004128:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004132:	d10f      	bne.n	8004154 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004152:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e010      	b.n	800418a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	3b01      	subs	r3, #1
 8004176:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	d196      	bne.n	80040b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3728      	adds	r7, #40	; 0x28
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000010 	.word	0x20000010

08004198 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ac:	d111      	bne.n	80041d2 <SPI_EndRxTransaction+0x3a>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b6:	d004      	beq.n	80041c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d107      	bne.n	80041d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff febd 	bl	8003f5c <SPI_WaitFlagStateUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e023      	b.n	8004240 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004200:	d11d      	bne.n	800423e <SPI_EndRxTransaction+0xa6>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420a:	d004      	beq.n	8004216 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004214:	d113      	bne.n	800423e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2200      	movs	r2, #0
 800421e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7ff ff22 	bl	800406c <SPI_WaitFifoStateUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e000      	b.n	8004240 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2200      	movs	r2, #0
 800425c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff ff03 	bl	800406c <SPI_WaitFifoStateUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e027      	b.n	80042cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2200      	movs	r2, #0
 8004284:	2180      	movs	r1, #128	; 0x80
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fe68 	bl	8003f5c <SPI_WaitFlagStateUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e014      	b.n	80042cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f7ff fedc 	bl	800406c <SPI_WaitFifoStateUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042be:	f043 0220 	orr.w	r2, r3, #32
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e000      	b.n	80042cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e049      	b.n	800437a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fc fd10 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 f946 	bl	80045a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e02e      	b.n	80043fa <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a17      	ldr	r2, [pc, #92]	; (8004408 <HAL_TIM_Base_Start+0x84>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_TIM_Base_Start+0x34>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b6:	d115      	bne.n	80043e4 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_TIM_Base_Start+0x88>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d015      	beq.n	80043f6 <HAL_TIM_Base_Start+0x72>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d011      	beq.n	80043f6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e2:	e008      	b.n	80043f6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e000      	b.n	80043f8 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40012c00 	.word	0x40012c00
 800440c:	00010007 	.word	0x00010007

08004410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIM_ConfigClockSource+0x1c>
 8004428:	2302      	movs	r3, #2
 800442a:	e0b6      	b.n	800459a <HAL_TIM_ConfigClockSource+0x18a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800444a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800444e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004468:	d03e      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0xd8>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446e:	f200 8087 	bhi.w	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	f000 8086 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x176>
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447e:	d87f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004480:	2b70      	cmp	r3, #112	; 0x70
 8004482:	d01a      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0xaa>
 8004484:	2b70      	cmp	r3, #112	; 0x70
 8004486:	d87b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004488:	2b60      	cmp	r3, #96	; 0x60
 800448a:	d050      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x11e>
 800448c:	2b60      	cmp	r3, #96	; 0x60
 800448e:	d877      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004490:	2b50      	cmp	r3, #80	; 0x50
 8004492:	d03c      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xfe>
 8004494:	2b50      	cmp	r3, #80	; 0x50
 8004496:	d873      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d058      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x13e>
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d86f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 80044a0:	2b30      	cmp	r3, #48	; 0x30
 80044a2:	d064      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15e>
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d86b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d060      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15e>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d867      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05c      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15e>
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d05a      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15e>
 80044b8:	e062      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f000 f94b 	bl	8004764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	609a      	str	r2, [r3, #8]
      break;
 80044e6:	e04f      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f000 f934 	bl	8004764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450a:	609a      	str	r2, [r3, #8]
      break;
 800450c:	e03c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	461a      	mov	r2, r3
 800451c:	f000 f8a6 	bl	800466c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2150      	movs	r1, #80	; 0x50
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f8ff 	bl	800472a <TIM_ITRx_SetConfig>
      break;
 800452c:	e02c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	461a      	mov	r2, r3
 800453c:	f000 f8c5 	bl	80046ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2160      	movs	r1, #96	; 0x60
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f8ef 	bl	800472a <TIM_ITRx_SetConfig>
      break;
 800454c:	e01c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	f000 f886 	bl	800466c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f8df 	bl	800472a <TIM_ITRx_SetConfig>
      break;
 800456c:	e00c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 f8d6 	bl	800472a <TIM_ITRx_SetConfig>
      break;
 800457e:	e003      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e000      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <TIM_Base_SetConfig+0xbc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0x20>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c2:	d108      	bne.n	80045d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a21      	ldr	r2, [pc, #132]	; (8004660 <TIM_Base_SetConfig+0xbc>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00b      	beq.n	80045f6 <TIM_Base_SetConfig+0x52>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d007      	beq.n	80045f6 <TIM_Base_SetConfig+0x52>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <TIM_Base_SetConfig+0xc0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_Base_SetConfig+0x52>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <TIM_Base_SetConfig+0xc4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d108      	bne.n	8004608 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <TIM_Base_SetConfig+0xbc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d007      	beq.n	8004644 <TIM_Base_SetConfig+0xa0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a0b      	ldr	r2, [pc, #44]	; (8004664 <TIM_Base_SetConfig+0xc0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_Base_SetConfig+0xa0>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <TIM_Base_SetConfig+0xc4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d103      	bne.n	800464c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	615a      	str	r2, [r3, #20]
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40014400 	.word	0x40014400
 8004668:	40014800 	.word	0x40014800

0800466c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f023 0201 	bic.w	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f023 030a 	bic.w	r3, r3, #10
 80046a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b087      	sub	sp, #28
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f023 0210 	bic.w	r2, r3, #16
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	031b      	lsls	r3, r3, #12
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	f043 0307 	orr.w	r3, r3, #7
 8004750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800477e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	021a      	lsls	r2, r3, #8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	431a      	orrs	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e04a      	b.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1f      	ldr	r2, [pc, #124]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d108      	bne.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d10c      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800482c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	4313      	orrs	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40012c00 	.word	0x40012c00

08004864 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800486c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004870:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	b29b      	uxth	r3, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	b29b      	uxth	r3, r3
 8004882:	4013      	ands	r3, r2
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800489a:	b084      	sub	sp, #16
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	f107 0014 	add.w	r0, r7, #20
 80048a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	b004      	add	sp, #16
 80048da:	4770      	bx	lr

080048dc <__errno>:
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <__errno+0x8>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	2000001c 	.word	0x2000001c

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4d0d      	ldr	r5, [pc, #52]	; (8004920 <__libc_init_array+0x38>)
 80048ec:	4c0d      	ldr	r4, [pc, #52]	; (8004924 <__libc_init_array+0x3c>)
 80048ee:	1b64      	subs	r4, r4, r5
 80048f0:	10a4      	asrs	r4, r4, #2
 80048f2:	2600      	movs	r6, #0
 80048f4:	42a6      	cmp	r6, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	4d0b      	ldr	r5, [pc, #44]	; (8004928 <__libc_init_array+0x40>)
 80048fa:	4c0c      	ldr	r4, [pc, #48]	; (800492c <__libc_init_array+0x44>)
 80048fc:	f000 ffae 	bl	800585c <_init>
 8004900:	1b64      	subs	r4, r4, r5
 8004902:	10a4      	asrs	r4, r4, #2
 8004904:	2600      	movs	r6, #0
 8004906:	42a6      	cmp	r6, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004910:	4798      	blx	r3
 8004912:	3601      	adds	r6, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	f855 3b04 	ldr.w	r3, [r5], #4
 800491a:	4798      	blx	r3
 800491c:	3601      	adds	r6, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	08005a40 	.word	0x08005a40
 8004924:	08005a40 	.word	0x08005a40
 8004928:	08005a40 	.word	0x08005a40
 800492c:	08005a44 	.word	0x08005a44

08004930 <memset>:
 8004930:	4402      	add	r2, r0
 8004932:	4603      	mov	r3, r0
 8004934:	4293      	cmp	r3, r2
 8004936:	d100      	bne.n	800493a <memset+0xa>
 8004938:	4770      	bx	lr
 800493a:	f803 1b01 	strb.w	r1, [r3], #1
 800493e:	e7f9      	b.n	8004934 <memset+0x4>

08004940 <iprintf>:
 8004940:	b40f      	push	{r0, r1, r2, r3}
 8004942:	4b0a      	ldr	r3, [pc, #40]	; (800496c <iprintf+0x2c>)
 8004944:	b513      	push	{r0, r1, r4, lr}
 8004946:	681c      	ldr	r4, [r3, #0]
 8004948:	b124      	cbz	r4, 8004954 <iprintf+0x14>
 800494a:	69a3      	ldr	r3, [r4, #24]
 800494c:	b913      	cbnz	r3, 8004954 <iprintf+0x14>
 800494e:	4620      	mov	r0, r4
 8004950:	f000 f866 	bl	8004a20 <__sinit>
 8004954:	ab05      	add	r3, sp, #20
 8004956:	9a04      	ldr	r2, [sp, #16]
 8004958:	68a1      	ldr	r1, [r4, #8]
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	4620      	mov	r0, r4
 800495e:	f000 f9bd 	bl	8004cdc <_vfiprintf_r>
 8004962:	b002      	add	sp, #8
 8004964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004968:	b004      	add	sp, #16
 800496a:	4770      	bx	lr
 800496c:	2000001c 	.word	0x2000001c

08004970 <std>:
 8004970:	2300      	movs	r3, #0
 8004972:	b510      	push	{r4, lr}
 8004974:	4604      	mov	r4, r0
 8004976:	e9c0 3300 	strd	r3, r3, [r0]
 800497a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800497e:	6083      	str	r3, [r0, #8]
 8004980:	8181      	strh	r1, [r0, #12]
 8004982:	6643      	str	r3, [r0, #100]	; 0x64
 8004984:	81c2      	strh	r2, [r0, #14]
 8004986:	6183      	str	r3, [r0, #24]
 8004988:	4619      	mov	r1, r3
 800498a:	2208      	movs	r2, #8
 800498c:	305c      	adds	r0, #92	; 0x5c
 800498e:	f7ff ffcf 	bl	8004930 <memset>
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <std+0x38>)
 8004994:	6263      	str	r3, [r4, #36]	; 0x24
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <std+0x3c>)
 8004998:	62a3      	str	r3, [r4, #40]	; 0x28
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <std+0x40>)
 800499c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <std+0x44>)
 80049a0:	6224      	str	r4, [r4, #32]
 80049a2:	6323      	str	r3, [r4, #48]	; 0x30
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	bf00      	nop
 80049a8:	08005285 	.word	0x08005285
 80049ac:	080052a7 	.word	0x080052a7
 80049b0:	080052df 	.word	0x080052df
 80049b4:	08005303 	.word	0x08005303

080049b8 <_cleanup_r>:
 80049b8:	4901      	ldr	r1, [pc, #4]	; (80049c0 <_cleanup_r+0x8>)
 80049ba:	f000 b8af 	b.w	8004b1c <_fwalk_reent>
 80049be:	bf00      	nop
 80049c0:	080055dd 	.word	0x080055dd

080049c4 <__sfmoreglue>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	2268      	movs	r2, #104	; 0x68
 80049c8:	1e4d      	subs	r5, r1, #1
 80049ca:	4355      	muls	r5, r2
 80049cc:	460e      	mov	r6, r1
 80049ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049d2:	f000 f8e5 	bl	8004ba0 <_malloc_r>
 80049d6:	4604      	mov	r4, r0
 80049d8:	b140      	cbz	r0, 80049ec <__sfmoreglue+0x28>
 80049da:	2100      	movs	r1, #0
 80049dc:	e9c0 1600 	strd	r1, r6, [r0]
 80049e0:	300c      	adds	r0, #12
 80049e2:	60a0      	str	r0, [r4, #8]
 80049e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049e8:	f7ff ffa2 	bl	8004930 <memset>
 80049ec:	4620      	mov	r0, r4
 80049ee:	bd70      	pop	{r4, r5, r6, pc}

080049f0 <__sfp_lock_acquire>:
 80049f0:	4801      	ldr	r0, [pc, #4]	; (80049f8 <__sfp_lock_acquire+0x8>)
 80049f2:	f000 b8b3 	b.w	8004b5c <__retarget_lock_acquire_recursive>
 80049f6:	bf00      	nop
 80049f8:	20000469 	.word	0x20000469

080049fc <__sfp_lock_release>:
 80049fc:	4801      	ldr	r0, [pc, #4]	; (8004a04 <__sfp_lock_release+0x8>)
 80049fe:	f000 b8ae 	b.w	8004b5e <__retarget_lock_release_recursive>
 8004a02:	bf00      	nop
 8004a04:	20000469 	.word	0x20000469

08004a08 <__sinit_lock_acquire>:
 8004a08:	4801      	ldr	r0, [pc, #4]	; (8004a10 <__sinit_lock_acquire+0x8>)
 8004a0a:	f000 b8a7 	b.w	8004b5c <__retarget_lock_acquire_recursive>
 8004a0e:	bf00      	nop
 8004a10:	2000046a 	.word	0x2000046a

08004a14 <__sinit_lock_release>:
 8004a14:	4801      	ldr	r0, [pc, #4]	; (8004a1c <__sinit_lock_release+0x8>)
 8004a16:	f000 b8a2 	b.w	8004b5e <__retarget_lock_release_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	2000046a 	.word	0x2000046a

08004a20 <__sinit>:
 8004a20:	b510      	push	{r4, lr}
 8004a22:	4604      	mov	r4, r0
 8004a24:	f7ff fff0 	bl	8004a08 <__sinit_lock_acquire>
 8004a28:	69a3      	ldr	r3, [r4, #24]
 8004a2a:	b11b      	cbz	r3, 8004a34 <__sinit+0x14>
 8004a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a30:	f7ff bff0 	b.w	8004a14 <__sinit_lock_release>
 8004a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a38:	6523      	str	r3, [r4, #80]	; 0x50
 8004a3a:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <__sinit+0x68>)
 8004a3c:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <__sinit+0x6c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a42:	42a3      	cmp	r3, r4
 8004a44:	bf04      	itt	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	61a3      	streq	r3, [r4, #24]
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f000 f820 	bl	8004a90 <__sfp>
 8004a50:	6060      	str	r0, [r4, #4]
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 f81c 	bl	8004a90 <__sfp>
 8004a58:	60a0      	str	r0, [r4, #8]
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 f818 	bl	8004a90 <__sfp>
 8004a60:	2200      	movs	r2, #0
 8004a62:	60e0      	str	r0, [r4, #12]
 8004a64:	2104      	movs	r1, #4
 8004a66:	6860      	ldr	r0, [r4, #4]
 8004a68:	f7ff ff82 	bl	8004970 <std>
 8004a6c:	68a0      	ldr	r0, [r4, #8]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	2109      	movs	r1, #9
 8004a72:	f7ff ff7d 	bl	8004970 <std>
 8004a76:	68e0      	ldr	r0, [r4, #12]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	2112      	movs	r1, #18
 8004a7c:	f7ff ff78 	bl	8004970 <std>
 8004a80:	2301      	movs	r3, #1
 8004a82:	61a3      	str	r3, [r4, #24]
 8004a84:	e7d2      	b.n	8004a2c <__sinit+0xc>
 8004a86:	bf00      	nop
 8004a88:	080059a8 	.word	0x080059a8
 8004a8c:	080049b9 	.word	0x080049b9

08004a90 <__sfp>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	4607      	mov	r7, r0
 8004a94:	f7ff ffac 	bl	80049f0 <__sfp_lock_acquire>
 8004a98:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <__sfp+0x84>)
 8004a9a:	681e      	ldr	r6, [r3, #0]
 8004a9c:	69b3      	ldr	r3, [r6, #24]
 8004a9e:	b913      	cbnz	r3, 8004aa6 <__sfp+0x16>
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f7ff ffbd 	bl	8004a20 <__sinit>
 8004aa6:	3648      	adds	r6, #72	; 0x48
 8004aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	d503      	bpl.n	8004ab8 <__sfp+0x28>
 8004ab0:	6833      	ldr	r3, [r6, #0]
 8004ab2:	b30b      	cbz	r3, 8004af8 <__sfp+0x68>
 8004ab4:	6836      	ldr	r6, [r6, #0]
 8004ab6:	e7f7      	b.n	8004aa8 <__sfp+0x18>
 8004ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004abc:	b9d5      	cbnz	r5, 8004af4 <__sfp+0x64>
 8004abe:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <__sfp+0x88>)
 8004ac0:	60e3      	str	r3, [r4, #12]
 8004ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8004ac8:	f000 f847 	bl	8004b5a <__retarget_lock_init_recursive>
 8004acc:	f7ff ff96 	bl	80049fc <__sfp_lock_release>
 8004ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ad8:	6025      	str	r5, [r4, #0]
 8004ada:	61a5      	str	r5, [r4, #24]
 8004adc:	2208      	movs	r2, #8
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ae4:	f7ff ff24 	bl	8004930 <memset>
 8004ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004af0:	4620      	mov	r0, r4
 8004af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af4:	3468      	adds	r4, #104	; 0x68
 8004af6:	e7d9      	b.n	8004aac <__sfp+0x1c>
 8004af8:	2104      	movs	r1, #4
 8004afa:	4638      	mov	r0, r7
 8004afc:	f7ff ff62 	bl	80049c4 <__sfmoreglue>
 8004b00:	4604      	mov	r4, r0
 8004b02:	6030      	str	r0, [r6, #0]
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d1d5      	bne.n	8004ab4 <__sfp+0x24>
 8004b08:	f7ff ff78 	bl	80049fc <__sfp_lock_release>
 8004b0c:	230c      	movs	r3, #12
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	e7ee      	b.n	8004af0 <__sfp+0x60>
 8004b12:	bf00      	nop
 8004b14:	080059a8 	.word	0x080059a8
 8004b18:	ffff0001 	.word	0xffff0001

08004b1c <_fwalk_reent>:
 8004b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b20:	4606      	mov	r6, r0
 8004b22:	4688      	mov	r8, r1
 8004b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b28:	2700      	movs	r7, #0
 8004b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8004b32:	d505      	bpl.n	8004b40 <_fwalk_reent+0x24>
 8004b34:	6824      	ldr	r4, [r4, #0]
 8004b36:	2c00      	cmp	r4, #0
 8004b38:	d1f7      	bne.n	8004b2a <_fwalk_reent+0xe>
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b40:	89ab      	ldrh	r3, [r5, #12]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d907      	bls.n	8004b56 <_fwalk_reent+0x3a>
 8004b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	d003      	beq.n	8004b56 <_fwalk_reent+0x3a>
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4630      	mov	r0, r6
 8004b52:	47c0      	blx	r8
 8004b54:	4307      	orrs	r7, r0
 8004b56:	3568      	adds	r5, #104	; 0x68
 8004b58:	e7e9      	b.n	8004b2e <_fwalk_reent+0x12>

08004b5a <__retarget_lock_init_recursive>:
 8004b5a:	4770      	bx	lr

08004b5c <__retarget_lock_acquire_recursive>:
 8004b5c:	4770      	bx	lr

08004b5e <__retarget_lock_release_recursive>:
 8004b5e:	4770      	bx	lr

08004b60 <sbrk_aligned>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	4e0e      	ldr	r6, [pc, #56]	; (8004b9c <sbrk_aligned+0x3c>)
 8004b64:	460c      	mov	r4, r1
 8004b66:	6831      	ldr	r1, [r6, #0]
 8004b68:	4605      	mov	r5, r0
 8004b6a:	b911      	cbnz	r1, 8004b72 <sbrk_aligned+0x12>
 8004b6c:	f000 fb7a 	bl	8005264 <_sbrk_r>
 8004b70:	6030      	str	r0, [r6, #0]
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f000 fb75 	bl	8005264 <_sbrk_r>
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	d00a      	beq.n	8004b94 <sbrk_aligned+0x34>
 8004b7e:	1cc4      	adds	r4, r0, #3
 8004b80:	f024 0403 	bic.w	r4, r4, #3
 8004b84:	42a0      	cmp	r0, r4
 8004b86:	d007      	beq.n	8004b98 <sbrk_aligned+0x38>
 8004b88:	1a21      	subs	r1, r4, r0
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 fb6a 	bl	8005264 <_sbrk_r>
 8004b90:	3001      	adds	r0, #1
 8004b92:	d101      	bne.n	8004b98 <sbrk_aligned+0x38>
 8004b94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	20000470 	.word	0x20000470

08004ba0 <_malloc_r>:
 8004ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba4:	1ccd      	adds	r5, r1, #3
 8004ba6:	f025 0503 	bic.w	r5, r5, #3
 8004baa:	3508      	adds	r5, #8
 8004bac:	2d0c      	cmp	r5, #12
 8004bae:	bf38      	it	cc
 8004bb0:	250c      	movcc	r5, #12
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	db01      	blt.n	8004bbc <_malloc_r+0x1c>
 8004bb8:	42a9      	cmp	r1, r5
 8004bba:	d905      	bls.n	8004bc8 <_malloc_r+0x28>
 8004bbc:	230c      	movs	r3, #12
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	2600      	movs	r6, #0
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc8:	4e2e      	ldr	r6, [pc, #184]	; (8004c84 <_malloc_r+0xe4>)
 8004bca:	f000 fdbb 	bl	8005744 <__malloc_lock>
 8004bce:	6833      	ldr	r3, [r6, #0]
 8004bd0:	461c      	mov	r4, r3
 8004bd2:	bb34      	cbnz	r4, 8004c22 <_malloc_r+0x82>
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f7ff ffc2 	bl	8004b60 <sbrk_aligned>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	4604      	mov	r4, r0
 8004be0:	d14d      	bne.n	8004c7e <_malloc_r+0xde>
 8004be2:	6834      	ldr	r4, [r6, #0]
 8004be4:	4626      	mov	r6, r4
 8004be6:	2e00      	cmp	r6, #0
 8004be8:	d140      	bne.n	8004c6c <_malloc_r+0xcc>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	4631      	mov	r1, r6
 8004bee:	4638      	mov	r0, r7
 8004bf0:	eb04 0803 	add.w	r8, r4, r3
 8004bf4:	f000 fb36 	bl	8005264 <_sbrk_r>
 8004bf8:	4580      	cmp	r8, r0
 8004bfa:	d13a      	bne.n	8004c72 <_malloc_r+0xd2>
 8004bfc:	6821      	ldr	r1, [r4, #0]
 8004bfe:	3503      	adds	r5, #3
 8004c00:	1a6d      	subs	r5, r5, r1
 8004c02:	f025 0503 	bic.w	r5, r5, #3
 8004c06:	3508      	adds	r5, #8
 8004c08:	2d0c      	cmp	r5, #12
 8004c0a:	bf38      	it	cc
 8004c0c:	250c      	movcc	r5, #12
 8004c0e:	4629      	mov	r1, r5
 8004c10:	4638      	mov	r0, r7
 8004c12:	f7ff ffa5 	bl	8004b60 <sbrk_aligned>
 8004c16:	3001      	adds	r0, #1
 8004c18:	d02b      	beq.n	8004c72 <_malloc_r+0xd2>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	442b      	add	r3, r5
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	e00e      	b.n	8004c40 <_malloc_r+0xa0>
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	1b52      	subs	r2, r2, r5
 8004c26:	d41e      	bmi.n	8004c66 <_malloc_r+0xc6>
 8004c28:	2a0b      	cmp	r2, #11
 8004c2a:	d916      	bls.n	8004c5a <_malloc_r+0xba>
 8004c2c:	1961      	adds	r1, r4, r5
 8004c2e:	42a3      	cmp	r3, r4
 8004c30:	6025      	str	r5, [r4, #0]
 8004c32:	bf18      	it	ne
 8004c34:	6059      	strne	r1, [r3, #4]
 8004c36:	6863      	ldr	r3, [r4, #4]
 8004c38:	bf08      	it	eq
 8004c3a:	6031      	streq	r1, [r6, #0]
 8004c3c:	5162      	str	r2, [r4, r5]
 8004c3e:	604b      	str	r3, [r1, #4]
 8004c40:	4638      	mov	r0, r7
 8004c42:	f104 060b 	add.w	r6, r4, #11
 8004c46:	f000 fd83 	bl	8005750 <__malloc_unlock>
 8004c4a:	f026 0607 	bic.w	r6, r6, #7
 8004c4e:	1d23      	adds	r3, r4, #4
 8004c50:	1af2      	subs	r2, r6, r3
 8004c52:	d0b6      	beq.n	8004bc2 <_malloc_r+0x22>
 8004c54:	1b9b      	subs	r3, r3, r6
 8004c56:	50a3      	str	r3, [r4, r2]
 8004c58:	e7b3      	b.n	8004bc2 <_malloc_r+0x22>
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	bf0c      	ite	eq
 8004c60:	6032      	streq	r2, [r6, #0]
 8004c62:	605a      	strne	r2, [r3, #4]
 8004c64:	e7ec      	b.n	8004c40 <_malloc_r+0xa0>
 8004c66:	4623      	mov	r3, r4
 8004c68:	6864      	ldr	r4, [r4, #4]
 8004c6a:	e7b2      	b.n	8004bd2 <_malloc_r+0x32>
 8004c6c:	4634      	mov	r4, r6
 8004c6e:	6876      	ldr	r6, [r6, #4]
 8004c70:	e7b9      	b.n	8004be6 <_malloc_r+0x46>
 8004c72:	230c      	movs	r3, #12
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	4638      	mov	r0, r7
 8004c78:	f000 fd6a 	bl	8005750 <__malloc_unlock>
 8004c7c:	e7a1      	b.n	8004bc2 <_malloc_r+0x22>
 8004c7e:	6025      	str	r5, [r4, #0]
 8004c80:	e7de      	b.n	8004c40 <_malloc_r+0xa0>
 8004c82:	bf00      	nop
 8004c84:	2000046c 	.word	0x2000046c

08004c88 <__sfputc_r>:
 8004c88:	6893      	ldr	r3, [r2, #8]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	b410      	push	{r4}
 8004c90:	6093      	str	r3, [r2, #8]
 8004c92:	da08      	bge.n	8004ca6 <__sfputc_r+0x1e>
 8004c94:	6994      	ldr	r4, [r2, #24]
 8004c96:	42a3      	cmp	r3, r4
 8004c98:	db01      	blt.n	8004c9e <__sfputc_r+0x16>
 8004c9a:	290a      	cmp	r1, #10
 8004c9c:	d103      	bne.n	8004ca6 <__sfputc_r+0x1e>
 8004c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ca2:	f000 bb33 	b.w	800530c <__swbuf_r>
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	1c58      	adds	r0, r3, #1
 8004caa:	6010      	str	r0, [r2, #0]
 8004cac:	7019      	strb	r1, [r3, #0]
 8004cae:	4608      	mov	r0, r1
 8004cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <__sfputs_r>:
 8004cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb8:	4606      	mov	r6, r0
 8004cba:	460f      	mov	r7, r1
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	18d5      	adds	r5, r2, r3
 8004cc0:	42ac      	cmp	r4, r5
 8004cc2:	d101      	bne.n	8004cc8 <__sfputs_r+0x12>
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	e007      	b.n	8004cd8 <__sfputs_r+0x22>
 8004cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ccc:	463a      	mov	r2, r7
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f7ff ffda 	bl	8004c88 <__sfputc_r>
 8004cd4:	1c43      	adds	r3, r0, #1
 8004cd6:	d1f3      	bne.n	8004cc0 <__sfputs_r+0xa>
 8004cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cdc <_vfiprintf_r>:
 8004cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	460d      	mov	r5, r1
 8004ce2:	b09d      	sub	sp, #116	; 0x74
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	4698      	mov	r8, r3
 8004ce8:	4606      	mov	r6, r0
 8004cea:	b118      	cbz	r0, 8004cf4 <_vfiprintf_r+0x18>
 8004cec:	6983      	ldr	r3, [r0, #24]
 8004cee:	b90b      	cbnz	r3, 8004cf4 <_vfiprintf_r+0x18>
 8004cf0:	f7ff fe96 	bl	8004a20 <__sinit>
 8004cf4:	4b89      	ldr	r3, [pc, #548]	; (8004f1c <_vfiprintf_r+0x240>)
 8004cf6:	429d      	cmp	r5, r3
 8004cf8:	d11b      	bne.n	8004d32 <_vfiprintf_r+0x56>
 8004cfa:	6875      	ldr	r5, [r6, #4]
 8004cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cfe:	07d9      	lsls	r1, r3, #31
 8004d00:	d405      	bmi.n	8004d0e <_vfiprintf_r+0x32>
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	059a      	lsls	r2, r3, #22
 8004d06:	d402      	bmi.n	8004d0e <_vfiprintf_r+0x32>
 8004d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d0a:	f7ff ff27 	bl	8004b5c <__retarget_lock_acquire_recursive>
 8004d0e:	89ab      	ldrh	r3, [r5, #12]
 8004d10:	071b      	lsls	r3, r3, #28
 8004d12:	d501      	bpl.n	8004d18 <_vfiprintf_r+0x3c>
 8004d14:	692b      	ldr	r3, [r5, #16]
 8004d16:	b9eb      	cbnz	r3, 8004d54 <_vfiprintf_r+0x78>
 8004d18:	4629      	mov	r1, r5
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f000 fb5a 	bl	80053d4 <__swsetup_r>
 8004d20:	b1c0      	cbz	r0, 8004d54 <_vfiprintf_r+0x78>
 8004d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d24:	07dc      	lsls	r4, r3, #31
 8004d26:	d50e      	bpl.n	8004d46 <_vfiprintf_r+0x6a>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d2c:	b01d      	add	sp, #116	; 0x74
 8004d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d32:	4b7b      	ldr	r3, [pc, #492]	; (8004f20 <_vfiprintf_r+0x244>)
 8004d34:	429d      	cmp	r5, r3
 8004d36:	d101      	bne.n	8004d3c <_vfiprintf_r+0x60>
 8004d38:	68b5      	ldr	r5, [r6, #8]
 8004d3a:	e7df      	b.n	8004cfc <_vfiprintf_r+0x20>
 8004d3c:	4b79      	ldr	r3, [pc, #484]	; (8004f24 <_vfiprintf_r+0x248>)
 8004d3e:	429d      	cmp	r5, r3
 8004d40:	bf08      	it	eq
 8004d42:	68f5      	ldreq	r5, [r6, #12]
 8004d44:	e7da      	b.n	8004cfc <_vfiprintf_r+0x20>
 8004d46:	89ab      	ldrh	r3, [r5, #12]
 8004d48:	0598      	lsls	r0, r3, #22
 8004d4a:	d4ed      	bmi.n	8004d28 <_vfiprintf_r+0x4c>
 8004d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d4e:	f7ff ff06 	bl	8004b5e <__retarget_lock_release_recursive>
 8004d52:	e7e9      	b.n	8004d28 <_vfiprintf_r+0x4c>
 8004d54:	2300      	movs	r3, #0
 8004d56:	9309      	str	r3, [sp, #36]	; 0x24
 8004d58:	2320      	movs	r3, #32
 8004d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d62:	2330      	movs	r3, #48	; 0x30
 8004d64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f28 <_vfiprintf_r+0x24c>
 8004d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d6c:	f04f 0901 	mov.w	r9, #1
 8004d70:	4623      	mov	r3, r4
 8004d72:	469a      	mov	sl, r3
 8004d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d78:	b10a      	cbz	r2, 8004d7e <_vfiprintf_r+0xa2>
 8004d7a:	2a25      	cmp	r2, #37	; 0x25
 8004d7c:	d1f9      	bne.n	8004d72 <_vfiprintf_r+0x96>
 8004d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d82:	d00b      	beq.n	8004d9c <_vfiprintf_r+0xc0>
 8004d84:	465b      	mov	r3, fp
 8004d86:	4622      	mov	r2, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff ff93 	bl	8004cb6 <__sfputs_r>
 8004d90:	3001      	adds	r0, #1
 8004d92:	f000 80aa 	beq.w	8004eea <_vfiprintf_r+0x20e>
 8004d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d98:	445a      	add	r2, fp
 8004d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80a2 	beq.w	8004eea <_vfiprintf_r+0x20e>
 8004da6:	2300      	movs	r3, #0
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004db0:	f10a 0a01 	add.w	sl, sl, #1
 8004db4:	9304      	str	r3, [sp, #16]
 8004db6:	9307      	str	r3, [sp, #28]
 8004db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8004dbe:	4654      	mov	r4, sl
 8004dc0:	2205      	movs	r2, #5
 8004dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc6:	4858      	ldr	r0, [pc, #352]	; (8004f28 <_vfiprintf_r+0x24c>)
 8004dc8:	f7fb f9da 	bl	8000180 <memchr>
 8004dcc:	9a04      	ldr	r2, [sp, #16]
 8004dce:	b9d8      	cbnz	r0, 8004e08 <_vfiprintf_r+0x12c>
 8004dd0:	06d1      	lsls	r1, r2, #27
 8004dd2:	bf44      	itt	mi
 8004dd4:	2320      	movmi	r3, #32
 8004dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dda:	0713      	lsls	r3, r2, #28
 8004ddc:	bf44      	itt	mi
 8004dde:	232b      	movmi	r3, #43	; 0x2b
 8004de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004de4:	f89a 3000 	ldrb.w	r3, [sl]
 8004de8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dea:	d015      	beq.n	8004e18 <_vfiprintf_r+0x13c>
 8004dec:	9a07      	ldr	r2, [sp, #28]
 8004dee:	4654      	mov	r4, sl
 8004df0:	2000      	movs	r0, #0
 8004df2:	f04f 0c0a 	mov.w	ip, #10
 8004df6:	4621      	mov	r1, r4
 8004df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dfc:	3b30      	subs	r3, #48	; 0x30
 8004dfe:	2b09      	cmp	r3, #9
 8004e00:	d94e      	bls.n	8004ea0 <_vfiprintf_r+0x1c4>
 8004e02:	b1b0      	cbz	r0, 8004e32 <_vfiprintf_r+0x156>
 8004e04:	9207      	str	r2, [sp, #28]
 8004e06:	e014      	b.n	8004e32 <_vfiprintf_r+0x156>
 8004e08:	eba0 0308 	sub.w	r3, r0, r8
 8004e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e10:	4313      	orrs	r3, r2
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	46a2      	mov	sl, r4
 8004e16:	e7d2      	b.n	8004dbe <_vfiprintf_r+0xe2>
 8004e18:	9b03      	ldr	r3, [sp, #12]
 8004e1a:	1d19      	adds	r1, r3, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	9103      	str	r1, [sp, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bfbb      	ittet	lt
 8004e24:	425b      	neglt	r3, r3
 8004e26:	f042 0202 	orrlt.w	r2, r2, #2
 8004e2a:	9307      	strge	r3, [sp, #28]
 8004e2c:	9307      	strlt	r3, [sp, #28]
 8004e2e:	bfb8      	it	lt
 8004e30:	9204      	strlt	r2, [sp, #16]
 8004e32:	7823      	ldrb	r3, [r4, #0]
 8004e34:	2b2e      	cmp	r3, #46	; 0x2e
 8004e36:	d10c      	bne.n	8004e52 <_vfiprintf_r+0x176>
 8004e38:	7863      	ldrb	r3, [r4, #1]
 8004e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e3c:	d135      	bne.n	8004eaa <_vfiprintf_r+0x1ce>
 8004e3e:	9b03      	ldr	r3, [sp, #12]
 8004e40:	1d1a      	adds	r2, r3, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	9203      	str	r2, [sp, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bfb8      	it	lt
 8004e4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e4e:	3402      	adds	r4, #2
 8004e50:	9305      	str	r3, [sp, #20]
 8004e52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f38 <_vfiprintf_r+0x25c>
 8004e56:	7821      	ldrb	r1, [r4, #0]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	4650      	mov	r0, sl
 8004e5c:	f7fb f990 	bl	8000180 <memchr>
 8004e60:	b140      	cbz	r0, 8004e74 <_vfiprintf_r+0x198>
 8004e62:	2340      	movs	r3, #64	; 0x40
 8004e64:	eba0 000a 	sub.w	r0, r0, sl
 8004e68:	fa03 f000 	lsl.w	r0, r3, r0
 8004e6c:	9b04      	ldr	r3, [sp, #16]
 8004e6e:	4303      	orrs	r3, r0
 8004e70:	3401      	adds	r4, #1
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e78:	482c      	ldr	r0, [pc, #176]	; (8004f2c <_vfiprintf_r+0x250>)
 8004e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e7e:	2206      	movs	r2, #6
 8004e80:	f7fb f97e 	bl	8000180 <memchr>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d03f      	beq.n	8004f08 <_vfiprintf_r+0x22c>
 8004e88:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <_vfiprintf_r+0x254>)
 8004e8a:	bb1b      	cbnz	r3, 8004ed4 <_vfiprintf_r+0x1f8>
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	3307      	adds	r3, #7
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	3308      	adds	r3, #8
 8004e96:	9303      	str	r3, [sp, #12]
 8004e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e9a:	443b      	add	r3, r7
 8004e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9e:	e767      	b.n	8004d70 <_vfiprintf_r+0x94>
 8004ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	e7a5      	b.n	8004df6 <_vfiprintf_r+0x11a>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	3401      	adds	r4, #1
 8004eae:	9305      	str	r3, [sp, #20]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f04f 0c0a 	mov.w	ip, #10
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ebc:	3a30      	subs	r2, #48	; 0x30
 8004ebe:	2a09      	cmp	r2, #9
 8004ec0:	d903      	bls.n	8004eca <_vfiprintf_r+0x1ee>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0c5      	beq.n	8004e52 <_vfiprintf_r+0x176>
 8004ec6:	9105      	str	r1, [sp, #20]
 8004ec8:	e7c3      	b.n	8004e52 <_vfiprintf_r+0x176>
 8004eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ece:	4604      	mov	r4, r0
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e7f0      	b.n	8004eb6 <_vfiprintf_r+0x1da>
 8004ed4:	ab03      	add	r3, sp, #12
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	462a      	mov	r2, r5
 8004eda:	4b16      	ldr	r3, [pc, #88]	; (8004f34 <_vfiprintf_r+0x258>)
 8004edc:	a904      	add	r1, sp, #16
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f3af 8000 	nop.w
 8004ee4:	4607      	mov	r7, r0
 8004ee6:	1c78      	adds	r0, r7, #1
 8004ee8:	d1d6      	bne.n	8004e98 <_vfiprintf_r+0x1bc>
 8004eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eec:	07d9      	lsls	r1, r3, #31
 8004eee:	d405      	bmi.n	8004efc <_vfiprintf_r+0x220>
 8004ef0:	89ab      	ldrh	r3, [r5, #12]
 8004ef2:	059a      	lsls	r2, r3, #22
 8004ef4:	d402      	bmi.n	8004efc <_vfiprintf_r+0x220>
 8004ef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ef8:	f7ff fe31 	bl	8004b5e <__retarget_lock_release_recursive>
 8004efc:	89ab      	ldrh	r3, [r5, #12]
 8004efe:	065b      	lsls	r3, r3, #25
 8004f00:	f53f af12 	bmi.w	8004d28 <_vfiprintf_r+0x4c>
 8004f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f06:	e711      	b.n	8004d2c <_vfiprintf_r+0x50>
 8004f08:	ab03      	add	r3, sp, #12
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	462a      	mov	r2, r5
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <_vfiprintf_r+0x258>)
 8004f10:	a904      	add	r1, sp, #16
 8004f12:	4630      	mov	r0, r6
 8004f14:	f000 f880 	bl	8005018 <_printf_i>
 8004f18:	e7e4      	b.n	8004ee4 <_vfiprintf_r+0x208>
 8004f1a:	bf00      	nop
 8004f1c:	080059cc 	.word	0x080059cc
 8004f20:	080059ec 	.word	0x080059ec
 8004f24:	080059ac 	.word	0x080059ac
 8004f28:	08005a0c 	.word	0x08005a0c
 8004f2c:	08005a16 	.word	0x08005a16
 8004f30:	00000000 	.word	0x00000000
 8004f34:	08004cb7 	.word	0x08004cb7
 8004f38:	08005a12 	.word	0x08005a12

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4616      	mov	r6, r2
 8004f42:	4699      	mov	r9, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bfb8      	it	lt
 8004f50:	4613      	movlt	r3, r2
 8004f52:	6033      	str	r3, [r6, #0]
 8004f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f58:	4607      	mov	r7, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	b10a      	cbz	r2, 8004f62 <_printf_common+0x26>
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6033      	str	r3, [r6, #0]
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	0699      	lsls	r1, r3, #26
 8004f66:	bf42      	ittt	mi
 8004f68:	6833      	ldrmi	r3, [r6, #0]
 8004f6a:	3302      	addmi	r3, #2
 8004f6c:	6033      	strmi	r3, [r6, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	f015 0506 	ands.w	r5, r5, #6
 8004f74:	d106      	bne.n	8004f84 <_printf_common+0x48>
 8004f76:	f104 0a19 	add.w	sl, r4, #25
 8004f7a:	68e3      	ldr	r3, [r4, #12]
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	dc26      	bgt.n	8004fd2 <_printf_common+0x96>
 8004f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f88:	1e13      	subs	r3, r2, #0
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	bf18      	it	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	0692      	lsls	r2, r2, #26
 8004f92:	d42b      	bmi.n	8004fec <_printf_common+0xb0>
 8004f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f98:	4649      	mov	r1, r9
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	47c0      	blx	r8
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d01e      	beq.n	8004fe0 <_printf_common+0xa4>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	68e5      	ldr	r5, [r4, #12]
 8004fa6:	6832      	ldr	r2, [r6, #0]
 8004fa8:	f003 0306 	and.w	r3, r3, #6
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	bf08      	it	eq
 8004fb0:	1aad      	subeq	r5, r5, r2
 8004fb2:	68a3      	ldr	r3, [r4, #8]
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	bf0c      	ite	eq
 8004fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fbc:	2500      	movne	r5, #0
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bfc4      	itt	gt
 8004fc2:	1a9b      	subgt	r3, r3, r2
 8004fc4:	18ed      	addgt	r5, r5, r3
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	341a      	adds	r4, #26
 8004fca:	42b5      	cmp	r5, r6
 8004fcc:	d11a      	bne.n	8005004 <_printf_common+0xc8>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e008      	b.n	8004fe4 <_printf_common+0xa8>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4638      	mov	r0, r7
 8004fda:	47c0      	blx	r8
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d103      	bne.n	8004fe8 <_printf_common+0xac>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe8:	3501      	adds	r5, #1
 8004fea:	e7c6      	b.n	8004f7a <_printf_common+0x3e>
 8004fec:	18e1      	adds	r1, r4, r3
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	2030      	movs	r0, #48	; 0x30
 8004ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ff6:	4422      	add	r2, r4
 8004ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005000:	3302      	adds	r3, #2
 8005002:	e7c7      	b.n	8004f94 <_printf_common+0x58>
 8005004:	2301      	movs	r3, #1
 8005006:	4622      	mov	r2, r4
 8005008:	4649      	mov	r1, r9
 800500a:	4638      	mov	r0, r7
 800500c:	47c0      	blx	r8
 800500e:	3001      	adds	r0, #1
 8005010:	d0e6      	beq.n	8004fe0 <_printf_common+0xa4>
 8005012:	3601      	adds	r6, #1
 8005014:	e7d9      	b.n	8004fca <_printf_common+0x8e>
	...

08005018 <_printf_i>:
 8005018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	7e0f      	ldrb	r7, [r1, #24]
 800501e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005020:	2f78      	cmp	r7, #120	; 0x78
 8005022:	4691      	mov	r9, r2
 8005024:	4680      	mov	r8, r0
 8005026:	460c      	mov	r4, r1
 8005028:	469a      	mov	sl, r3
 800502a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800502e:	d807      	bhi.n	8005040 <_printf_i+0x28>
 8005030:	2f62      	cmp	r7, #98	; 0x62
 8005032:	d80a      	bhi.n	800504a <_printf_i+0x32>
 8005034:	2f00      	cmp	r7, #0
 8005036:	f000 80d8 	beq.w	80051ea <_printf_i+0x1d2>
 800503a:	2f58      	cmp	r7, #88	; 0x58
 800503c:	f000 80a3 	beq.w	8005186 <_printf_i+0x16e>
 8005040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005048:	e03a      	b.n	80050c0 <_printf_i+0xa8>
 800504a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800504e:	2b15      	cmp	r3, #21
 8005050:	d8f6      	bhi.n	8005040 <_printf_i+0x28>
 8005052:	a101      	add	r1, pc, #4	; (adr r1, 8005058 <_printf_i+0x40>)
 8005054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005058:	080050b1 	.word	0x080050b1
 800505c:	080050c5 	.word	0x080050c5
 8005060:	08005041 	.word	0x08005041
 8005064:	08005041 	.word	0x08005041
 8005068:	08005041 	.word	0x08005041
 800506c:	08005041 	.word	0x08005041
 8005070:	080050c5 	.word	0x080050c5
 8005074:	08005041 	.word	0x08005041
 8005078:	08005041 	.word	0x08005041
 800507c:	08005041 	.word	0x08005041
 8005080:	08005041 	.word	0x08005041
 8005084:	080051d1 	.word	0x080051d1
 8005088:	080050f5 	.word	0x080050f5
 800508c:	080051b3 	.word	0x080051b3
 8005090:	08005041 	.word	0x08005041
 8005094:	08005041 	.word	0x08005041
 8005098:	080051f3 	.word	0x080051f3
 800509c:	08005041 	.word	0x08005041
 80050a0:	080050f5 	.word	0x080050f5
 80050a4:	08005041 	.word	0x08005041
 80050a8:	08005041 	.word	0x08005041
 80050ac:	080051bb 	.word	0x080051bb
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	1d1a      	adds	r2, r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	602a      	str	r2, [r5, #0]
 80050b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0a3      	b.n	800520c <_printf_i+0x1f4>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	6829      	ldr	r1, [r5, #0]
 80050c8:	0606      	lsls	r6, r0, #24
 80050ca:	f101 0304 	add.w	r3, r1, #4
 80050ce:	d50a      	bpl.n	80050e6 <_printf_i+0xce>
 80050d0:	680e      	ldr	r6, [r1, #0]
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	2e00      	cmp	r6, #0
 80050d6:	da03      	bge.n	80050e0 <_printf_i+0xc8>
 80050d8:	232d      	movs	r3, #45	; 0x2d
 80050da:	4276      	negs	r6, r6
 80050dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e0:	485e      	ldr	r0, [pc, #376]	; (800525c <_printf_i+0x244>)
 80050e2:	230a      	movs	r3, #10
 80050e4:	e019      	b.n	800511a <_printf_i+0x102>
 80050e6:	680e      	ldr	r6, [r1, #0]
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050ee:	bf18      	it	ne
 80050f0:	b236      	sxthne	r6, r6
 80050f2:	e7ef      	b.n	80050d4 <_printf_i+0xbc>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	6820      	ldr	r0, [r4, #0]
 80050f8:	1d19      	adds	r1, r3, #4
 80050fa:	6029      	str	r1, [r5, #0]
 80050fc:	0601      	lsls	r1, r0, #24
 80050fe:	d501      	bpl.n	8005104 <_printf_i+0xec>
 8005100:	681e      	ldr	r6, [r3, #0]
 8005102:	e002      	b.n	800510a <_printf_i+0xf2>
 8005104:	0646      	lsls	r6, r0, #25
 8005106:	d5fb      	bpl.n	8005100 <_printf_i+0xe8>
 8005108:	881e      	ldrh	r6, [r3, #0]
 800510a:	4854      	ldr	r0, [pc, #336]	; (800525c <_printf_i+0x244>)
 800510c:	2f6f      	cmp	r7, #111	; 0x6f
 800510e:	bf0c      	ite	eq
 8005110:	2308      	moveq	r3, #8
 8005112:	230a      	movne	r3, #10
 8005114:	2100      	movs	r1, #0
 8005116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800511a:	6865      	ldr	r5, [r4, #4]
 800511c:	60a5      	str	r5, [r4, #8]
 800511e:	2d00      	cmp	r5, #0
 8005120:	bfa2      	ittt	ge
 8005122:	6821      	ldrge	r1, [r4, #0]
 8005124:	f021 0104 	bicge.w	r1, r1, #4
 8005128:	6021      	strge	r1, [r4, #0]
 800512a:	b90e      	cbnz	r6, 8005130 <_printf_i+0x118>
 800512c:	2d00      	cmp	r5, #0
 800512e:	d04d      	beq.n	80051cc <_printf_i+0x1b4>
 8005130:	4615      	mov	r5, r2
 8005132:	fbb6 f1f3 	udiv	r1, r6, r3
 8005136:	fb03 6711 	mls	r7, r3, r1, r6
 800513a:	5dc7      	ldrb	r7, [r0, r7]
 800513c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005140:	4637      	mov	r7, r6
 8005142:	42bb      	cmp	r3, r7
 8005144:	460e      	mov	r6, r1
 8005146:	d9f4      	bls.n	8005132 <_printf_i+0x11a>
 8005148:	2b08      	cmp	r3, #8
 800514a:	d10b      	bne.n	8005164 <_printf_i+0x14c>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	07de      	lsls	r6, r3, #31
 8005150:	d508      	bpl.n	8005164 <_printf_i+0x14c>
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	6861      	ldr	r1, [r4, #4]
 8005156:	4299      	cmp	r1, r3
 8005158:	bfde      	ittt	le
 800515a:	2330      	movle	r3, #48	; 0x30
 800515c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005160:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005164:	1b52      	subs	r2, r2, r5
 8005166:	6122      	str	r2, [r4, #16]
 8005168:	f8cd a000 	str.w	sl, [sp]
 800516c:	464b      	mov	r3, r9
 800516e:	aa03      	add	r2, sp, #12
 8005170:	4621      	mov	r1, r4
 8005172:	4640      	mov	r0, r8
 8005174:	f7ff fee2 	bl	8004f3c <_printf_common>
 8005178:	3001      	adds	r0, #1
 800517a:	d14c      	bne.n	8005216 <_printf_i+0x1fe>
 800517c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005180:	b004      	add	sp, #16
 8005182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005186:	4835      	ldr	r0, [pc, #212]	; (800525c <_printf_i+0x244>)
 8005188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800518c:	6829      	ldr	r1, [r5, #0]
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f851 6b04 	ldr.w	r6, [r1], #4
 8005194:	6029      	str	r1, [r5, #0]
 8005196:	061d      	lsls	r5, r3, #24
 8005198:	d514      	bpl.n	80051c4 <_printf_i+0x1ac>
 800519a:	07df      	lsls	r7, r3, #31
 800519c:	bf44      	itt	mi
 800519e:	f043 0320 	orrmi.w	r3, r3, #32
 80051a2:	6023      	strmi	r3, [r4, #0]
 80051a4:	b91e      	cbnz	r6, 80051ae <_printf_i+0x196>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	f023 0320 	bic.w	r3, r3, #32
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	2310      	movs	r3, #16
 80051b0:	e7b0      	b.n	8005114 <_printf_i+0xfc>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	f043 0320 	orr.w	r3, r3, #32
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	2378      	movs	r3, #120	; 0x78
 80051bc:	4828      	ldr	r0, [pc, #160]	; (8005260 <_printf_i+0x248>)
 80051be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051c2:	e7e3      	b.n	800518c <_printf_i+0x174>
 80051c4:	0659      	lsls	r1, r3, #25
 80051c6:	bf48      	it	mi
 80051c8:	b2b6      	uxthmi	r6, r6
 80051ca:	e7e6      	b.n	800519a <_printf_i+0x182>
 80051cc:	4615      	mov	r5, r2
 80051ce:	e7bb      	b.n	8005148 <_printf_i+0x130>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	6826      	ldr	r6, [r4, #0]
 80051d4:	6961      	ldr	r1, [r4, #20]
 80051d6:	1d18      	adds	r0, r3, #4
 80051d8:	6028      	str	r0, [r5, #0]
 80051da:	0635      	lsls	r5, r6, #24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	d501      	bpl.n	80051e4 <_printf_i+0x1cc>
 80051e0:	6019      	str	r1, [r3, #0]
 80051e2:	e002      	b.n	80051ea <_printf_i+0x1d2>
 80051e4:	0670      	lsls	r0, r6, #25
 80051e6:	d5fb      	bpl.n	80051e0 <_printf_i+0x1c8>
 80051e8:	8019      	strh	r1, [r3, #0]
 80051ea:	2300      	movs	r3, #0
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	4615      	mov	r5, r2
 80051f0:	e7ba      	b.n	8005168 <_printf_i+0x150>
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	1d1a      	adds	r2, r3, #4
 80051f6:	602a      	str	r2, [r5, #0]
 80051f8:	681d      	ldr	r5, [r3, #0]
 80051fa:	6862      	ldr	r2, [r4, #4]
 80051fc:	2100      	movs	r1, #0
 80051fe:	4628      	mov	r0, r5
 8005200:	f7fa ffbe 	bl	8000180 <memchr>
 8005204:	b108      	cbz	r0, 800520a <_printf_i+0x1f2>
 8005206:	1b40      	subs	r0, r0, r5
 8005208:	6060      	str	r0, [r4, #4]
 800520a:	6863      	ldr	r3, [r4, #4]
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	2300      	movs	r3, #0
 8005210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005214:	e7a8      	b.n	8005168 <_printf_i+0x150>
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	462a      	mov	r2, r5
 800521a:	4649      	mov	r1, r9
 800521c:	4640      	mov	r0, r8
 800521e:	47d0      	blx	sl
 8005220:	3001      	adds	r0, #1
 8005222:	d0ab      	beq.n	800517c <_printf_i+0x164>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	079b      	lsls	r3, r3, #30
 8005228:	d413      	bmi.n	8005252 <_printf_i+0x23a>
 800522a:	68e0      	ldr	r0, [r4, #12]
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	4298      	cmp	r0, r3
 8005230:	bfb8      	it	lt
 8005232:	4618      	movlt	r0, r3
 8005234:	e7a4      	b.n	8005180 <_printf_i+0x168>
 8005236:	2301      	movs	r3, #1
 8005238:	4632      	mov	r2, r6
 800523a:	4649      	mov	r1, r9
 800523c:	4640      	mov	r0, r8
 800523e:	47d0      	blx	sl
 8005240:	3001      	adds	r0, #1
 8005242:	d09b      	beq.n	800517c <_printf_i+0x164>
 8005244:	3501      	adds	r5, #1
 8005246:	68e3      	ldr	r3, [r4, #12]
 8005248:	9903      	ldr	r1, [sp, #12]
 800524a:	1a5b      	subs	r3, r3, r1
 800524c:	42ab      	cmp	r3, r5
 800524e:	dcf2      	bgt.n	8005236 <_printf_i+0x21e>
 8005250:	e7eb      	b.n	800522a <_printf_i+0x212>
 8005252:	2500      	movs	r5, #0
 8005254:	f104 0619 	add.w	r6, r4, #25
 8005258:	e7f5      	b.n	8005246 <_printf_i+0x22e>
 800525a:	bf00      	nop
 800525c:	08005a1d 	.word	0x08005a1d
 8005260:	08005a2e 	.word	0x08005a2e

08005264 <_sbrk_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4d06      	ldr	r5, [pc, #24]	; (8005280 <_sbrk_r+0x1c>)
 8005268:	2300      	movs	r3, #0
 800526a:	4604      	mov	r4, r0
 800526c:	4608      	mov	r0, r1
 800526e:	602b      	str	r3, [r5, #0]
 8005270:	f7fb fe62 	bl	8000f38 <_sbrk>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_sbrk_r+0x1a>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b103      	cbz	r3, 800527e <_sbrk_r+0x1a>
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	20000474 	.word	0x20000474

08005284 <__sread>:
 8005284:	b510      	push	{r4, lr}
 8005286:	460c      	mov	r4, r1
 8005288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528c:	f000 fab2 	bl	80057f4 <_read_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	bfab      	itete	ge
 8005294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005296:	89a3      	ldrhlt	r3, [r4, #12]
 8005298:	181b      	addge	r3, r3, r0
 800529a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800529e:	bfac      	ite	ge
 80052a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052a2:	81a3      	strhlt	r3, [r4, #12]
 80052a4:	bd10      	pop	{r4, pc}

080052a6 <__swrite>:
 80052a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052aa:	461f      	mov	r7, r3
 80052ac:	898b      	ldrh	r3, [r1, #12]
 80052ae:	05db      	lsls	r3, r3, #23
 80052b0:	4605      	mov	r5, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	4616      	mov	r6, r2
 80052b6:	d505      	bpl.n	80052c4 <__swrite+0x1e>
 80052b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052bc:	2302      	movs	r3, #2
 80052be:	2200      	movs	r2, #0
 80052c0:	f000 f9c8 	bl	8005654 <_lseek_r>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ce:	81a3      	strh	r3, [r4, #12]
 80052d0:	4632      	mov	r2, r6
 80052d2:	463b      	mov	r3, r7
 80052d4:	4628      	mov	r0, r5
 80052d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052da:	f000 b869 	b.w	80053b0 <_write_r>

080052de <__sseek>:
 80052de:	b510      	push	{r4, lr}
 80052e0:	460c      	mov	r4, r1
 80052e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e6:	f000 f9b5 	bl	8005654 <_lseek_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	bf15      	itete	ne
 80052f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052fa:	81a3      	strheq	r3, [r4, #12]
 80052fc:	bf18      	it	ne
 80052fe:	81a3      	strhne	r3, [r4, #12]
 8005300:	bd10      	pop	{r4, pc}

08005302 <__sclose>:
 8005302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005306:	f000 b8d3 	b.w	80054b0 <_close_r>
	...

0800530c <__swbuf_r>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	460e      	mov	r6, r1
 8005310:	4614      	mov	r4, r2
 8005312:	4605      	mov	r5, r0
 8005314:	b118      	cbz	r0, 800531e <__swbuf_r+0x12>
 8005316:	6983      	ldr	r3, [r0, #24]
 8005318:	b90b      	cbnz	r3, 800531e <__swbuf_r+0x12>
 800531a:	f7ff fb81 	bl	8004a20 <__sinit>
 800531e:	4b21      	ldr	r3, [pc, #132]	; (80053a4 <__swbuf_r+0x98>)
 8005320:	429c      	cmp	r4, r3
 8005322:	d12b      	bne.n	800537c <__swbuf_r+0x70>
 8005324:	686c      	ldr	r4, [r5, #4]
 8005326:	69a3      	ldr	r3, [r4, #24]
 8005328:	60a3      	str	r3, [r4, #8]
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	071a      	lsls	r2, r3, #28
 800532e:	d52f      	bpl.n	8005390 <__swbuf_r+0x84>
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	b36b      	cbz	r3, 8005390 <__swbuf_r+0x84>
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	1ac0      	subs	r0, r0, r3
 800533a:	6963      	ldr	r3, [r4, #20]
 800533c:	b2f6      	uxtb	r6, r6
 800533e:	4283      	cmp	r3, r0
 8005340:	4637      	mov	r7, r6
 8005342:	dc04      	bgt.n	800534e <__swbuf_r+0x42>
 8005344:	4621      	mov	r1, r4
 8005346:	4628      	mov	r0, r5
 8005348:	f000 f948 	bl	80055dc <_fflush_r>
 800534c:	bb30      	cbnz	r0, 800539c <__swbuf_r+0x90>
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	3b01      	subs	r3, #1
 8005352:	60a3      	str	r3, [r4, #8]
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	6022      	str	r2, [r4, #0]
 800535a:	701e      	strb	r6, [r3, #0]
 800535c:	6963      	ldr	r3, [r4, #20]
 800535e:	3001      	adds	r0, #1
 8005360:	4283      	cmp	r3, r0
 8005362:	d004      	beq.n	800536e <__swbuf_r+0x62>
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	07db      	lsls	r3, r3, #31
 8005368:	d506      	bpl.n	8005378 <__swbuf_r+0x6c>
 800536a:	2e0a      	cmp	r6, #10
 800536c:	d104      	bne.n	8005378 <__swbuf_r+0x6c>
 800536e:	4621      	mov	r1, r4
 8005370:	4628      	mov	r0, r5
 8005372:	f000 f933 	bl	80055dc <_fflush_r>
 8005376:	b988      	cbnz	r0, 800539c <__swbuf_r+0x90>
 8005378:	4638      	mov	r0, r7
 800537a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <__swbuf_r+0x9c>)
 800537e:	429c      	cmp	r4, r3
 8005380:	d101      	bne.n	8005386 <__swbuf_r+0x7a>
 8005382:	68ac      	ldr	r4, [r5, #8]
 8005384:	e7cf      	b.n	8005326 <__swbuf_r+0x1a>
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <__swbuf_r+0xa0>)
 8005388:	429c      	cmp	r4, r3
 800538a:	bf08      	it	eq
 800538c:	68ec      	ldreq	r4, [r5, #12]
 800538e:	e7ca      	b.n	8005326 <__swbuf_r+0x1a>
 8005390:	4621      	mov	r1, r4
 8005392:	4628      	mov	r0, r5
 8005394:	f000 f81e 	bl	80053d4 <__swsetup_r>
 8005398:	2800      	cmp	r0, #0
 800539a:	d0cb      	beq.n	8005334 <__swbuf_r+0x28>
 800539c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80053a0:	e7ea      	b.n	8005378 <__swbuf_r+0x6c>
 80053a2:	bf00      	nop
 80053a4:	080059cc 	.word	0x080059cc
 80053a8:	080059ec 	.word	0x080059ec
 80053ac:	080059ac 	.word	0x080059ac

080053b0 <_write_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d07      	ldr	r5, [pc, #28]	; (80053d0 <_write_r+0x20>)
 80053b4:	4604      	mov	r4, r0
 80053b6:	4608      	mov	r0, r1
 80053b8:	4611      	mov	r1, r2
 80053ba:	2200      	movs	r2, #0
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	f7fb fd69 	bl	8000e96 <_write>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_write_r+0x1e>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_write_r+0x1e>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	20000474 	.word	0x20000474

080053d4 <__swsetup_r>:
 80053d4:	4b32      	ldr	r3, [pc, #200]	; (80054a0 <__swsetup_r+0xcc>)
 80053d6:	b570      	push	{r4, r5, r6, lr}
 80053d8:	681d      	ldr	r5, [r3, #0]
 80053da:	4606      	mov	r6, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	b125      	cbz	r5, 80053ea <__swsetup_r+0x16>
 80053e0:	69ab      	ldr	r3, [r5, #24]
 80053e2:	b913      	cbnz	r3, 80053ea <__swsetup_r+0x16>
 80053e4:	4628      	mov	r0, r5
 80053e6:	f7ff fb1b 	bl	8004a20 <__sinit>
 80053ea:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <__swsetup_r+0xd0>)
 80053ec:	429c      	cmp	r4, r3
 80053ee:	d10f      	bne.n	8005410 <__swsetup_r+0x3c>
 80053f0:	686c      	ldr	r4, [r5, #4]
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053f8:	0719      	lsls	r1, r3, #28
 80053fa:	d42c      	bmi.n	8005456 <__swsetup_r+0x82>
 80053fc:	06dd      	lsls	r5, r3, #27
 80053fe:	d411      	bmi.n	8005424 <__swsetup_r+0x50>
 8005400:	2309      	movs	r3, #9
 8005402:	6033      	str	r3, [r6, #0]
 8005404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800540e:	e03e      	b.n	800548e <__swsetup_r+0xba>
 8005410:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <__swsetup_r+0xd4>)
 8005412:	429c      	cmp	r4, r3
 8005414:	d101      	bne.n	800541a <__swsetup_r+0x46>
 8005416:	68ac      	ldr	r4, [r5, #8]
 8005418:	e7eb      	b.n	80053f2 <__swsetup_r+0x1e>
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <__swsetup_r+0xd8>)
 800541c:	429c      	cmp	r4, r3
 800541e:	bf08      	it	eq
 8005420:	68ec      	ldreq	r4, [r5, #12]
 8005422:	e7e6      	b.n	80053f2 <__swsetup_r+0x1e>
 8005424:	0758      	lsls	r0, r3, #29
 8005426:	d512      	bpl.n	800544e <__swsetup_r+0x7a>
 8005428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800542a:	b141      	cbz	r1, 800543e <__swsetup_r+0x6a>
 800542c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005430:	4299      	cmp	r1, r3
 8005432:	d002      	beq.n	800543a <__swsetup_r+0x66>
 8005434:	4630      	mov	r0, r6
 8005436:	f000 f991 	bl	800575c <_free_r>
 800543a:	2300      	movs	r3, #0
 800543c:	6363      	str	r3, [r4, #52]	; 0x34
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	2300      	movs	r3, #0
 8005448:	6063      	str	r3, [r4, #4]
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	81a3      	strh	r3, [r4, #12]
 8005456:	6923      	ldr	r3, [r4, #16]
 8005458:	b94b      	cbnz	r3, 800546e <__swsetup_r+0x9a>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005464:	d003      	beq.n	800546e <__swsetup_r+0x9a>
 8005466:	4621      	mov	r1, r4
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f92b 	bl	80056c4 <__smakebuf_r>
 800546e:	89a0      	ldrh	r0, [r4, #12]
 8005470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005474:	f010 0301 	ands.w	r3, r0, #1
 8005478:	d00a      	beq.n	8005490 <__swsetup_r+0xbc>
 800547a:	2300      	movs	r3, #0
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	6963      	ldr	r3, [r4, #20]
 8005480:	425b      	negs	r3, r3
 8005482:	61a3      	str	r3, [r4, #24]
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	b943      	cbnz	r3, 800549a <__swsetup_r+0xc6>
 8005488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800548c:	d1ba      	bne.n	8005404 <__swsetup_r+0x30>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	0781      	lsls	r1, r0, #30
 8005492:	bf58      	it	pl
 8005494:	6963      	ldrpl	r3, [r4, #20]
 8005496:	60a3      	str	r3, [r4, #8]
 8005498:	e7f4      	b.n	8005484 <__swsetup_r+0xb0>
 800549a:	2000      	movs	r0, #0
 800549c:	e7f7      	b.n	800548e <__swsetup_r+0xba>
 800549e:	bf00      	nop
 80054a0:	2000001c 	.word	0x2000001c
 80054a4:	080059cc 	.word	0x080059cc
 80054a8:	080059ec 	.word	0x080059ec
 80054ac:	080059ac 	.word	0x080059ac

080054b0 <_close_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d06      	ldr	r5, [pc, #24]	; (80054cc <_close_r+0x1c>)
 80054b4:	2300      	movs	r3, #0
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fb fd07 	bl	8000ece <_close>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_close_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_close_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	20000474 	.word	0x20000474

080054d0 <__sflush_r>:
 80054d0:	898a      	ldrh	r2, [r1, #12]
 80054d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d6:	4605      	mov	r5, r0
 80054d8:	0710      	lsls	r0, r2, #28
 80054da:	460c      	mov	r4, r1
 80054dc:	d458      	bmi.n	8005590 <__sflush_r+0xc0>
 80054de:	684b      	ldr	r3, [r1, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dc05      	bgt.n	80054f0 <__sflush_r+0x20>
 80054e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dc02      	bgt.n	80054f0 <__sflush_r+0x20>
 80054ea:	2000      	movs	r0, #0
 80054ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	d0f9      	beq.n	80054ea <__sflush_r+0x1a>
 80054f6:	2300      	movs	r3, #0
 80054f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054fc:	682f      	ldr	r7, [r5, #0]
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	d032      	beq.n	8005568 <__sflush_r+0x98>
 8005502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	075a      	lsls	r2, r3, #29
 8005508:	d505      	bpl.n	8005516 <__sflush_r+0x46>
 800550a:	6863      	ldr	r3, [r4, #4]
 800550c:	1ac0      	subs	r0, r0, r3
 800550e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005510:	b10b      	cbz	r3, 8005516 <__sflush_r+0x46>
 8005512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005514:	1ac0      	subs	r0, r0, r3
 8005516:	2300      	movs	r3, #0
 8005518:	4602      	mov	r2, r0
 800551a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800551c:	6a21      	ldr	r1, [r4, #32]
 800551e:	4628      	mov	r0, r5
 8005520:	47b0      	blx	r6
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	d106      	bne.n	8005536 <__sflush_r+0x66>
 8005528:	6829      	ldr	r1, [r5, #0]
 800552a:	291d      	cmp	r1, #29
 800552c:	d82c      	bhi.n	8005588 <__sflush_r+0xb8>
 800552e:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <__sflush_r+0x108>)
 8005530:	40ca      	lsrs	r2, r1
 8005532:	07d6      	lsls	r6, r2, #31
 8005534:	d528      	bpl.n	8005588 <__sflush_r+0xb8>
 8005536:	2200      	movs	r2, #0
 8005538:	6062      	str	r2, [r4, #4]
 800553a:	04d9      	lsls	r1, r3, #19
 800553c:	6922      	ldr	r2, [r4, #16]
 800553e:	6022      	str	r2, [r4, #0]
 8005540:	d504      	bpl.n	800554c <__sflush_r+0x7c>
 8005542:	1c42      	adds	r2, r0, #1
 8005544:	d101      	bne.n	800554a <__sflush_r+0x7a>
 8005546:	682b      	ldr	r3, [r5, #0]
 8005548:	b903      	cbnz	r3, 800554c <__sflush_r+0x7c>
 800554a:	6560      	str	r0, [r4, #84]	; 0x54
 800554c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800554e:	602f      	str	r7, [r5, #0]
 8005550:	2900      	cmp	r1, #0
 8005552:	d0ca      	beq.n	80054ea <__sflush_r+0x1a>
 8005554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005558:	4299      	cmp	r1, r3
 800555a:	d002      	beq.n	8005562 <__sflush_r+0x92>
 800555c:	4628      	mov	r0, r5
 800555e:	f000 f8fd 	bl	800575c <_free_r>
 8005562:	2000      	movs	r0, #0
 8005564:	6360      	str	r0, [r4, #52]	; 0x34
 8005566:	e7c1      	b.n	80054ec <__sflush_r+0x1c>
 8005568:	6a21      	ldr	r1, [r4, #32]
 800556a:	2301      	movs	r3, #1
 800556c:	4628      	mov	r0, r5
 800556e:	47b0      	blx	r6
 8005570:	1c41      	adds	r1, r0, #1
 8005572:	d1c7      	bne.n	8005504 <__sflush_r+0x34>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0c4      	beq.n	8005504 <__sflush_r+0x34>
 800557a:	2b1d      	cmp	r3, #29
 800557c:	d001      	beq.n	8005582 <__sflush_r+0xb2>
 800557e:	2b16      	cmp	r3, #22
 8005580:	d101      	bne.n	8005586 <__sflush_r+0xb6>
 8005582:	602f      	str	r7, [r5, #0]
 8005584:	e7b1      	b.n	80054ea <__sflush_r+0x1a>
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800558c:	81a3      	strh	r3, [r4, #12]
 800558e:	e7ad      	b.n	80054ec <__sflush_r+0x1c>
 8005590:	690f      	ldr	r7, [r1, #16]
 8005592:	2f00      	cmp	r7, #0
 8005594:	d0a9      	beq.n	80054ea <__sflush_r+0x1a>
 8005596:	0793      	lsls	r3, r2, #30
 8005598:	680e      	ldr	r6, [r1, #0]
 800559a:	bf08      	it	eq
 800559c:	694b      	ldreq	r3, [r1, #20]
 800559e:	600f      	str	r7, [r1, #0]
 80055a0:	bf18      	it	ne
 80055a2:	2300      	movne	r3, #0
 80055a4:	eba6 0807 	sub.w	r8, r6, r7
 80055a8:	608b      	str	r3, [r1, #8]
 80055aa:	f1b8 0f00 	cmp.w	r8, #0
 80055ae:	dd9c      	ble.n	80054ea <__sflush_r+0x1a>
 80055b0:	6a21      	ldr	r1, [r4, #32]
 80055b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055b4:	4643      	mov	r3, r8
 80055b6:	463a      	mov	r2, r7
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b0      	blx	r6
 80055bc:	2800      	cmp	r0, #0
 80055be:	dc06      	bgt.n	80055ce <__sflush_r+0xfe>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055cc:	e78e      	b.n	80054ec <__sflush_r+0x1c>
 80055ce:	4407      	add	r7, r0
 80055d0:	eba8 0800 	sub.w	r8, r8, r0
 80055d4:	e7e9      	b.n	80055aa <__sflush_r+0xda>
 80055d6:	bf00      	nop
 80055d8:	20400001 	.word	0x20400001

080055dc <_fflush_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	690b      	ldr	r3, [r1, #16]
 80055e0:	4605      	mov	r5, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b913      	cbnz	r3, 80055ec <_fflush_r+0x10>
 80055e6:	2500      	movs	r5, #0
 80055e8:	4628      	mov	r0, r5
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	b118      	cbz	r0, 80055f6 <_fflush_r+0x1a>
 80055ee:	6983      	ldr	r3, [r0, #24]
 80055f0:	b90b      	cbnz	r3, 80055f6 <_fflush_r+0x1a>
 80055f2:	f7ff fa15 	bl	8004a20 <__sinit>
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <_fflush_r+0x6c>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	d11b      	bne.n	8005634 <_fflush_r+0x58>
 80055fc:	686c      	ldr	r4, [r5, #4]
 80055fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ef      	beq.n	80055e6 <_fflush_r+0xa>
 8005606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005608:	07d0      	lsls	r0, r2, #31
 800560a:	d404      	bmi.n	8005616 <_fflush_r+0x3a>
 800560c:	0599      	lsls	r1, r3, #22
 800560e:	d402      	bmi.n	8005616 <_fflush_r+0x3a>
 8005610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005612:	f7ff faa3 	bl	8004b5c <__retarget_lock_acquire_recursive>
 8005616:	4628      	mov	r0, r5
 8005618:	4621      	mov	r1, r4
 800561a:	f7ff ff59 	bl	80054d0 <__sflush_r>
 800561e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005620:	07da      	lsls	r2, r3, #31
 8005622:	4605      	mov	r5, r0
 8005624:	d4e0      	bmi.n	80055e8 <_fflush_r+0xc>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	059b      	lsls	r3, r3, #22
 800562a:	d4dd      	bmi.n	80055e8 <_fflush_r+0xc>
 800562c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800562e:	f7ff fa96 	bl	8004b5e <__retarget_lock_release_recursive>
 8005632:	e7d9      	b.n	80055e8 <_fflush_r+0xc>
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <_fflush_r+0x70>)
 8005636:	429c      	cmp	r4, r3
 8005638:	d101      	bne.n	800563e <_fflush_r+0x62>
 800563a:	68ac      	ldr	r4, [r5, #8]
 800563c:	e7df      	b.n	80055fe <_fflush_r+0x22>
 800563e:	4b04      	ldr	r3, [pc, #16]	; (8005650 <_fflush_r+0x74>)
 8005640:	429c      	cmp	r4, r3
 8005642:	bf08      	it	eq
 8005644:	68ec      	ldreq	r4, [r5, #12]
 8005646:	e7da      	b.n	80055fe <_fflush_r+0x22>
 8005648:	080059cc 	.word	0x080059cc
 800564c:	080059ec 	.word	0x080059ec
 8005650:	080059ac 	.word	0x080059ac

08005654 <_lseek_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4d07      	ldr	r5, [pc, #28]	; (8005674 <_lseek_r+0x20>)
 8005658:	4604      	mov	r4, r0
 800565a:	4608      	mov	r0, r1
 800565c:	4611      	mov	r1, r2
 800565e:	2200      	movs	r2, #0
 8005660:	602a      	str	r2, [r5, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	f7fb fc5a 	bl	8000f1c <_lseek>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_lseek_r+0x1e>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_lseek_r+0x1e>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	20000474 	.word	0x20000474

08005678 <__swhatbuf_r>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	2900      	cmp	r1, #0
 8005682:	b096      	sub	sp, #88	; 0x58
 8005684:	4614      	mov	r4, r2
 8005686:	461d      	mov	r5, r3
 8005688:	da08      	bge.n	800569c <__swhatbuf_r+0x24>
 800568a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	602a      	str	r2, [r5, #0]
 8005692:	061a      	lsls	r2, r3, #24
 8005694:	d410      	bmi.n	80056b8 <__swhatbuf_r+0x40>
 8005696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800569a:	e00e      	b.n	80056ba <__swhatbuf_r+0x42>
 800569c:	466a      	mov	r2, sp
 800569e:	f000 f8bb 	bl	8005818 <_fstat_r>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	dbf1      	blt.n	800568a <__swhatbuf_r+0x12>
 80056a6:	9a01      	ldr	r2, [sp, #4]
 80056a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056b0:	425a      	negs	r2, r3
 80056b2:	415a      	adcs	r2, r3
 80056b4:	602a      	str	r2, [r5, #0]
 80056b6:	e7ee      	b.n	8005696 <__swhatbuf_r+0x1e>
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	2000      	movs	r0, #0
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	b016      	add	sp, #88	; 0x58
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080056c4 <__smakebuf_r>:
 80056c4:	898b      	ldrh	r3, [r1, #12]
 80056c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056c8:	079d      	lsls	r5, r3, #30
 80056ca:	4606      	mov	r6, r0
 80056cc:	460c      	mov	r4, r1
 80056ce:	d507      	bpl.n	80056e0 <__smakebuf_r+0x1c>
 80056d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	2301      	movs	r3, #1
 80056da:	6163      	str	r3, [r4, #20]
 80056dc:	b002      	add	sp, #8
 80056de:	bd70      	pop	{r4, r5, r6, pc}
 80056e0:	ab01      	add	r3, sp, #4
 80056e2:	466a      	mov	r2, sp
 80056e4:	f7ff ffc8 	bl	8005678 <__swhatbuf_r>
 80056e8:	9900      	ldr	r1, [sp, #0]
 80056ea:	4605      	mov	r5, r0
 80056ec:	4630      	mov	r0, r6
 80056ee:	f7ff fa57 	bl	8004ba0 <_malloc_r>
 80056f2:	b948      	cbnz	r0, 8005708 <__smakebuf_r+0x44>
 80056f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f8:	059a      	lsls	r2, r3, #22
 80056fa:	d4ef      	bmi.n	80056dc <__smakebuf_r+0x18>
 80056fc:	f023 0303 	bic.w	r3, r3, #3
 8005700:	f043 0302 	orr.w	r3, r3, #2
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	e7e3      	b.n	80056d0 <__smakebuf_r+0xc>
 8005708:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <__smakebuf_r+0x7c>)
 800570a:	62b3      	str	r3, [r6, #40]	; 0x28
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	6020      	str	r0, [r4, #0]
 8005710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	9b00      	ldr	r3, [sp, #0]
 8005718:	6163      	str	r3, [r4, #20]
 800571a:	9b01      	ldr	r3, [sp, #4]
 800571c:	6120      	str	r0, [r4, #16]
 800571e:	b15b      	cbz	r3, 8005738 <__smakebuf_r+0x74>
 8005720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005724:	4630      	mov	r0, r6
 8005726:	f000 f889 	bl	800583c <_isatty_r>
 800572a:	b128      	cbz	r0, 8005738 <__smakebuf_r+0x74>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	89a0      	ldrh	r0, [r4, #12]
 800573a:	4305      	orrs	r5, r0
 800573c:	81a5      	strh	r5, [r4, #12]
 800573e:	e7cd      	b.n	80056dc <__smakebuf_r+0x18>
 8005740:	080049b9 	.word	0x080049b9

08005744 <__malloc_lock>:
 8005744:	4801      	ldr	r0, [pc, #4]	; (800574c <__malloc_lock+0x8>)
 8005746:	f7ff ba09 	b.w	8004b5c <__retarget_lock_acquire_recursive>
 800574a:	bf00      	nop
 800574c:	20000468 	.word	0x20000468

08005750 <__malloc_unlock>:
 8005750:	4801      	ldr	r0, [pc, #4]	; (8005758 <__malloc_unlock+0x8>)
 8005752:	f7ff ba04 	b.w	8004b5e <__retarget_lock_release_recursive>
 8005756:	bf00      	nop
 8005758:	20000468 	.word	0x20000468

0800575c <_free_r>:
 800575c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800575e:	2900      	cmp	r1, #0
 8005760:	d044      	beq.n	80057ec <_free_r+0x90>
 8005762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005766:	9001      	str	r0, [sp, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	f1a1 0404 	sub.w	r4, r1, #4
 800576e:	bfb8      	it	lt
 8005770:	18e4      	addlt	r4, r4, r3
 8005772:	f7ff ffe7 	bl	8005744 <__malloc_lock>
 8005776:	4a1e      	ldr	r2, [pc, #120]	; (80057f0 <_free_r+0x94>)
 8005778:	9801      	ldr	r0, [sp, #4]
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	b933      	cbnz	r3, 800578c <_free_r+0x30>
 800577e:	6063      	str	r3, [r4, #4]
 8005780:	6014      	str	r4, [r2, #0]
 8005782:	b003      	add	sp, #12
 8005784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005788:	f7ff bfe2 	b.w	8005750 <__malloc_unlock>
 800578c:	42a3      	cmp	r3, r4
 800578e:	d908      	bls.n	80057a2 <_free_r+0x46>
 8005790:	6825      	ldr	r5, [r4, #0]
 8005792:	1961      	adds	r1, r4, r5
 8005794:	428b      	cmp	r3, r1
 8005796:	bf01      	itttt	eq
 8005798:	6819      	ldreq	r1, [r3, #0]
 800579a:	685b      	ldreq	r3, [r3, #4]
 800579c:	1949      	addeq	r1, r1, r5
 800579e:	6021      	streq	r1, [r4, #0]
 80057a0:	e7ed      	b.n	800577e <_free_r+0x22>
 80057a2:	461a      	mov	r2, r3
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	b10b      	cbz	r3, 80057ac <_free_r+0x50>
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	d9fa      	bls.n	80057a2 <_free_r+0x46>
 80057ac:	6811      	ldr	r1, [r2, #0]
 80057ae:	1855      	adds	r5, r2, r1
 80057b0:	42a5      	cmp	r5, r4
 80057b2:	d10b      	bne.n	80057cc <_free_r+0x70>
 80057b4:	6824      	ldr	r4, [r4, #0]
 80057b6:	4421      	add	r1, r4
 80057b8:	1854      	adds	r4, r2, r1
 80057ba:	42a3      	cmp	r3, r4
 80057bc:	6011      	str	r1, [r2, #0]
 80057be:	d1e0      	bne.n	8005782 <_free_r+0x26>
 80057c0:	681c      	ldr	r4, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	6053      	str	r3, [r2, #4]
 80057c6:	4421      	add	r1, r4
 80057c8:	6011      	str	r1, [r2, #0]
 80057ca:	e7da      	b.n	8005782 <_free_r+0x26>
 80057cc:	d902      	bls.n	80057d4 <_free_r+0x78>
 80057ce:	230c      	movs	r3, #12
 80057d0:	6003      	str	r3, [r0, #0]
 80057d2:	e7d6      	b.n	8005782 <_free_r+0x26>
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	1961      	adds	r1, r4, r5
 80057d8:	428b      	cmp	r3, r1
 80057da:	bf04      	itt	eq
 80057dc:	6819      	ldreq	r1, [r3, #0]
 80057de:	685b      	ldreq	r3, [r3, #4]
 80057e0:	6063      	str	r3, [r4, #4]
 80057e2:	bf04      	itt	eq
 80057e4:	1949      	addeq	r1, r1, r5
 80057e6:	6021      	streq	r1, [r4, #0]
 80057e8:	6054      	str	r4, [r2, #4]
 80057ea:	e7ca      	b.n	8005782 <_free_r+0x26>
 80057ec:	b003      	add	sp, #12
 80057ee:	bd30      	pop	{r4, r5, pc}
 80057f0:	2000046c 	.word	0x2000046c

080057f4 <_read_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4d07      	ldr	r5, [pc, #28]	; (8005814 <_read_r+0x20>)
 80057f8:	4604      	mov	r4, r0
 80057fa:	4608      	mov	r0, r1
 80057fc:	4611      	mov	r1, r2
 80057fe:	2200      	movs	r2, #0
 8005800:	602a      	str	r2, [r5, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	f7fb fb2a 	bl	8000e5c <_read>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_read_r+0x1e>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_read_r+0x1e>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	20000474 	.word	0x20000474

08005818 <_fstat_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	; (8005838 <_fstat_r+0x20>)
 800581c:	2300      	movs	r3, #0
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	4611      	mov	r1, r2
 8005824:	602b      	str	r3, [r5, #0]
 8005826:	f7fb fb5e 	bl	8000ee6 <_fstat>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	d102      	bne.n	8005834 <_fstat_r+0x1c>
 800582e:	682b      	ldr	r3, [r5, #0]
 8005830:	b103      	cbz	r3, 8005834 <_fstat_r+0x1c>
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	bd38      	pop	{r3, r4, r5, pc}
 8005836:	bf00      	nop
 8005838:	20000474 	.word	0x20000474

0800583c <_isatty_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4d06      	ldr	r5, [pc, #24]	; (8005858 <_isatty_r+0x1c>)
 8005840:	2300      	movs	r3, #0
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	f7fb fb5d 	bl	8000f06 <_isatty>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_isatty_r+0x1a>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_isatty_r+0x1a>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20000474 	.word	0x20000474

0800585c <_init>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr

08005868 <_fini>:
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586a:	bf00      	nop
 800586c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586e:	bc08      	pop	{r3}
 8005870:	469e      	mov	lr, r3
 8005872:	4770      	bx	lr
