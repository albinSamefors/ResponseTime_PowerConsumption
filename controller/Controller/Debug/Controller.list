
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000525c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000008  08005554  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003ec  2000007c  080055c8  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000468  080055c8  00020468  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000157c9  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002c1c  00000000  00000000  00035875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001970  00000000  00000000  00038498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001838  00000000  00000000  00039e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000234f8  00000000  00000000  0003b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001531b  00000000  00000000  0005eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e1587  00000000  00000000  00073e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001553da  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000073ac  00000000  00000000  0015542c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005384 	.word	0x08005384

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08005384 	.word	0x08005384

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000230:	f023 0218 	bic.w	r2, r3, #24
 8000234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000270:	68fb      	ldr	r3, [r7, #12]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <recieve16Bit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool recieve16Bit(uint16_t *read_to){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	if(HAL_SPI_Receive(&hspi1, (uint8_t*)read_to, 2, 10) == HAL_OK) {
 8000288:	230a      	movs	r3, #10
 800028a:	2202      	movs	r2, #2
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <recieve16Bit+0x28>)
 8000290:	f003 f8b4 	bl	80033fc <HAL_SPI_Receive>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <recieve16Bit+0x1e>
		return true;
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <recieve16Bit+0x20>
	}

	return false;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000098 	.word	0x20000098

080002ac <getStartInput>:

void getStartInput(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	uint8_t header;
		  HAL_StatusTypeDef receive_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80002b2:	1db9      	adds	r1, r7, #6
 80002b4:	230a      	movs	r3, #10
 80002b6:	2201      	movs	r2, #1
 80002b8:	4826      	ldr	r0, [pc, #152]	; (8000354 <getStartInput+0xa8>)
 80002ba:	f003 f89f 	bl	80033fc <HAL_SPI_Receive>
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
		  if(receive_status == HAL_OK) {
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d133      	bne.n	8000330 <getStartInput+0x84>
			  insides = header;
 80002c8:	79ba      	ldrb	r2, [r7, #6]
 80002ca:	4b23      	ldr	r3, [pc, #140]	; (8000358 <getStartInput+0xac>)
 80002cc:	701a      	strb	r2, [r3, #0]
			  switch((Header)header) {
 80002ce:	79bb      	ldrb	r3, [r7, #6]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d020      	beq.n	8000316 <getStartInput+0x6a>
 80002d4:	2b03      	cmp	r3, #3
 80002d6:	dc32      	bgt.n	800033e <getStartInput+0x92>
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d002      	beq.n	80002e2 <getStartInput+0x36>
 80002dc:	2b02      	cmp	r3, #2
 80002de:	d00d      	beq.n	80002fc <getStartInput+0x50>
 80002e0:	e02d      	b.n	800033e <getStartInput+0x92>
			  	  case SLEEP_TIME:
			  		  if(!recieve16Bit(&sleep_time)) {
 80002e2:	481e      	ldr	r0, [pc, #120]	; (800035c <getStartInput+0xb0>)
 80002e4:	f7ff ffcc 	bl	8000280 <recieve16Bit>
 80002e8:	4603      	mov	r3, r0
 80002ea:	f083 0301 	eor.w	r3, r3, #1
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d01f      	beq.n	8000334 <getStartInput+0x88>
			  			  printf("ERROR COULD NOT RECIEVE SLEEP TIME");
 80002f4:	481a      	ldr	r0, [pc, #104]	; (8000360 <getStartInput+0xb4>)
 80002f6:	f004 f8b7 	bl	8004468 <iprintf>
			  		  	  }
					  break;
 80002fa:	e01b      	b.n	8000334 <getStartInput+0x88>
				  case RUN_AMOUNT:
					  if(!recieve16Bit(&max_amount_of_runs)){
 80002fc:	4819      	ldr	r0, [pc, #100]	; (8000364 <getStartInput+0xb8>)
 80002fe:	f7ff ffbf 	bl	8000280 <recieve16Bit>
 8000302:	4603      	mov	r3, r0
 8000304:	f083 0301 	eor.w	r3, r3, #1
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2b00      	cmp	r3, #0
 800030c:	d014      	beq.n	8000338 <getStartInput+0x8c>
						  printf("ERROR COULD NOT RECIEVE AMOUNT OF RUNS");
 800030e:	4816      	ldr	r0, [pc, #88]	; (8000368 <getStartInput+0xbc>)
 8000310:	f004 f8aa 	bl	8004468 <iprintf>
					  }

					  break;
 8000314:	e010      	b.n	8000338 <getStartInput+0x8c>
				  case TEST_MODE:
					  if(!recieve16Bit(&test_mode)){
 8000316:	4815      	ldr	r0, [pc, #84]	; (800036c <getStartInput+0xc0>)
 8000318:	f7ff ffb2 	bl	8000280 <recieve16Bit>
 800031c:	4603      	mov	r3, r0
 800031e:	f083 0301 	eor.w	r3, r3, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	d009      	beq.n	800033c <getStartInput+0x90>
						  printf("TEST MODE COULD NOT BE RECIEVED");
 8000328:	4811      	ldr	r0, [pc, #68]	; (8000370 <getStartInput+0xc4>)
 800032a:	f004 f89d 	bl	8004468 <iprintf>
					  }
					  break;
 800032e:	e005      	b.n	800033c <getStartInput+0x90>
				  }
		  }
 8000330:	bf00      	nop
 8000332:	e004      	b.n	800033e <getStartInput+0x92>
					  break;
 8000334:	bf00      	nop
 8000336:	e002      	b.n	800033e <getStartInput+0x92>
					  break;
 8000338:	bf00      	nop
 800033a:	e000      	b.n	800033e <getStartInput+0x92>
					  break;
 800033c:	bf00      	nop
		  if(sleep_time != 0){
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <getStartInput+0xb0>)
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <getStartInput+0xa0>
			  test_input_set = true;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <getStartInput+0xc8>)
 8000348:	2201      	movs	r2, #1
 800034a:	701a      	strb	r2, [r3, #0]
		  }
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000098 	.word	0x20000098
 8000358:	20000449 	.word	0x20000449
 800035c:	2000044a 	.word	0x2000044a
 8000360:	0800539c 	.word	0x0800539c
 8000364:	20000008 	.word	0x20000008
 8000368:	080053c0 	.word	0x080053c0
 800036c:	2000044c 	.word	0x2000044c
 8000370:	080053e8 	.word	0x080053e8
 8000374:	2000044e 	.word	0x2000044e

08000378 <calculateTestTimes>:

void calculateTestTimes(struct TimeCapture *data, uint32_t *times){
 8000378:	b480      	push	{r7}
 800037a:	b089      	sub	sp, #36	; 0x24
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 8000382:	2300      	movs	r3, #0
 8000384:	61fb      	str	r3, [r7, #28]
 8000386:	e023      	b.n	80003d0 <calculateTestTimes+0x58>
		uint32_t start_time = data[i].startTime;
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	4413      	add	r3, r2
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	61bb      	str	r3, [r7, #24]
		uint32_t end_time = data[i].endTime;
 8000394:	69fb      	ldr	r3, [r7, #28]
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	4413      	add	r3, r2
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	617b      	str	r3, [r7, #20]
		uint32_t full_time = end_time - start_time;
 80003a0:	697a      	ldr	r2, [r7, #20]
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	613b      	str	r3, [r7, #16]
		uint32_t wake_up_time = full_time - (sleep_time * 1000);
 80003a8:	4b10      	ldr	r3, [pc, #64]	; (80003ec <calculateTestTimes+0x74>)
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	461a      	mov	r2, r3
 80003ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b2:	fb02 f303 	mul.w	r3, r2, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	1a9b      	subs	r3, r3, r2
 80003bc:	60fb      	str	r3, [r7, #12]
		times[i] = wake_up_time;
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	4413      	add	r3, r2
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	3301      	adds	r3, #1
 80003ce:	61fb      	str	r3, [r7, #28]
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <calculateTestTimes+0x78>)
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	461a      	mov	r2, r3
 80003d6:	69fb      	ldr	r3, [r7, #28]
 80003d8:	4293      	cmp	r3, r2
 80003da:	dbd5      	blt.n	8000388 <calculateTestTimes+0x10>
	}
}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3724      	adds	r7, #36	; 0x24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	2000044a 	.word	0x2000044a
 80003f0:	20000008 	.word	0x20000008

080003f4 <sendInterrupt>:

void sendInterrupt(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2102      	movs	r1, #2
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <sendInterrupt+0x1c>)
 80003fe:	f001 f889 	bl	8001514 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2102      	movs	r1, #2
 8000406:	4802      	ldr	r0, [pc, #8]	; (8000410 <sendInterrupt+0x1c>)
 8000408:	f001 f884 	bl	8001514 <HAL_GPIO_WritePin>
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	48000800 	.word	0x48000800

08000414 <testUsingInterrupts>:

void testUsingInterrupts(struct TimeCapture *times){
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	_Bool interrupt_sent = false;
 800041c:	2300      	movs	r3, #0
 800041e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < max_amount_of_runs; i++){
 8000420:	2300      	movs	r3, #0
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	e02a      	b.n	800047c <testUsingInterrupts+0x68>
		if(!interrupt_sent){
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	f083 0301 	eor.w	r3, r3, #1
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	d017      	beq.n	8000462 <testUsingInterrupts+0x4e>
			sendInterrupt();
 8000432:	f7ff ffdf 	bl	80003f4 <sendInterrupt>
			timeBuff.startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <testUsingInterrupts+0x80>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800043c:	4a16      	ldr	r2, [pc, #88]	; (8000498 <testUsingInterrupts+0x84>)
 800043e:	6013      	str	r3, [r2, #0]
			interrupt_sent = true;
 8000440:	2301      	movs	r3, #1
 8000442:	73fb      	strb	r3, [r7, #15]
			captures++;
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <testUsingInterrupts+0x88>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <testUsingInterrupts+0x88>)
 800044c:	6013      	str	r3, [r2, #0]
		}
		while(!timeBuffReady)
 800044e:	e008      	b.n	8000462 <testUsingInterrupts+0x4e>
		times[i] = timeBuff;
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	00db      	lsls	r3, r3, #3
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	4413      	add	r3, r2
 8000458:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <testUsingInterrupts+0x84>)
 800045a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800045e:	e883 0003 	stmia.w	r3, {r0, r1}
		while(!timeBuffReady)
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <testUsingInterrupts+0x8c>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	f083 0301 	eor.w	r3, r3, #1
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d1ef      	bne.n	8000450 <testUsingInterrupts+0x3c>
		timeBuffReady = false;
 8000470:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <testUsingInterrupts+0x8c>)
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	3301      	adds	r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <testUsingInterrupts+0x90>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	4293      	cmp	r3, r2
 8000486:	dbce      	blt.n	8000426 <testUsingInterrupts+0x12>

	}

}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200000fc 	.word	0x200000fc
 8000498:	20000440 	.word	0x20000440
 800049c:	2000043c 	.word	0x2000043c
 80004a0:	20000448 	.word	0x20000448
 80004a4:	20000008 	.word	0x20000008

080004a8 <testUsingIntervals>:

void testUsingIntervals(struct TimeCapture *times){
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < max_amount_of_runs; i++){
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	e01c      	b.n	80004f0 <testUsingIntervals+0x48>
		while(!timeBuffReady);
 80004b6:	bf00      	nop
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <testUsingIntervals+0x64>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	f083 0301 	eor.w	r3, r3, #1
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d1f8      	bne.n	80004b8 <testUsingIntervals+0x10>
		times[i] = timeBuff;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	4a10      	ldr	r2, [pc, #64]	; (8000510 <testUsingIntervals+0x68>)
 80004d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004d4:	e883 0003 	stmia.w	r3, {r0, r1}
		timeBuff.startTime = 0;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <testUsingIntervals+0x68>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <testUsingIntervals+0x68>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <testUsingIntervals+0x64>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3301      	adds	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <testUsingIntervals+0x6c>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4293      	cmp	r3, r2
 80004fa:	dbdc      	blt.n	80004b6 <testUsingIntervals+0xe>

	}
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000448 	.word	0x20000448
 8000510:	20000440 	.word	0x20000440
 8000514:	20000008 	.word	0x20000008

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800051c:	b08f      	sub	sp, #60	; 0x3c
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fcf2 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f8c6 	bl	80006b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000528:	f000 f93a 	bl	80007a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 fa06 	bl	800093c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000530:	f000 f9dc 	bl	80008ec <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000534:	f000 f98c 	bl	8000850 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000538:	f000 f950 	bl	80007dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800053c:	4859      	ldr	r0, [pc, #356]	; (80006a4 <main+0x18c>)
 800053e:	f003 fcb5 	bl	8003eac <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(!test_input_set){
 8000542:	4b59      	ldr	r3, [pc, #356]	; (80006a8 <main+0x190>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f083 0301 	eor.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <main+0x3e>
	  	  getStartInput();
 8000550:	f7ff feac 	bl	80002ac <getStartInput>
 8000554:	e7f5      	b.n	8000542 <main+0x2a>
	  }
	  else{
 8000556:	466b      	mov	r3, sp
 8000558:	607b      	str	r3, [r7, #4]
		  struct TimeCapture times[max_amount_of_runs];
 800055a:	4b54      	ldr	r3, [pc, #336]	; (80006ac <main+0x194>)
 800055c:	8819      	ldrh	r1, [r3, #0]
 800055e:	460b      	mov	r3, r1
 8000560:	3b01      	subs	r3, #1
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
 8000564:	b28b      	uxth	r3, r1
 8000566:	2200      	movs	r2, #0
 8000568:	461c      	mov	r4, r3
 800056a:	4615      	mov	r5, r2
 800056c:	f04f 0200 	mov.w	r2, #0
 8000570:	f04f 0300 	mov.w	r3, #0
 8000574:	01ab      	lsls	r3, r5, #6
 8000576:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800057a:	01a2      	lsls	r2, r4, #6
 800057c:	b28b      	uxth	r3, r1
 800057e:	2200      	movs	r2, #0
 8000580:	4698      	mov	r8, r3
 8000582:	4691      	mov	r9, r2
 8000584:	f04f 0200 	mov.w	r2, #0
 8000588:	f04f 0300 	mov.w	r3, #0
 800058c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000590:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000594:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000598:	460b      	mov	r3, r1
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	3307      	adds	r3, #7
 800059e:	08db      	lsrs	r3, r3, #3
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	ebad 0d03 	sub.w	sp, sp, r3
 80005a6:	466b      	mov	r3, sp
 80005a8:	3303      	adds	r3, #3
 80005aa:	089b      	lsrs	r3, r3, #2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
		  if(test_mode == 1){
 80005b0:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <main+0x198>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d138      	bne.n	800062a <main+0x112>
 80005b8:	466b      	mov	r3, sp
 80005ba:	461e      	mov	r6, r3
			  // RUN TESTS USING ITERRUPTS

			  testUsingInterrupts(&times);
 80005bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80005be:	f7ff ff29 	bl	8000414 <testUsingInterrupts>
			  uint32_t test_times[max_amount_of_runs];
 80005c2:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <main+0x194>)
 80005c4:	8819      	ldrh	r1, [r3, #0]
 80005c6:	460b      	mov	r3, r1
 80005c8:	3b01      	subs	r3, #1
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
 80005cc:	b28b      	uxth	r3, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	61bb      	str	r3, [r7, #24]
 80005d2:	61fa      	str	r2, [r7, #28]
 80005d4:	f04f 0200 	mov.w	r2, #0
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	69f8      	ldr	r0, [r7, #28]
 80005de:	0143      	lsls	r3, r0, #5
 80005e0:	69b8      	ldr	r0, [r7, #24]
 80005e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80005e6:	69b8      	ldr	r0, [r7, #24]
 80005e8:	0142      	lsls	r2, r0, #5
 80005ea:	b28b      	uxth	r3, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	469a      	mov	sl, r3
 80005f0:	4693      	mov	fp, r2
 80005f2:	f04f 0200 	mov.w	r2, #0
 80005f6:	f04f 0300 	mov.w	r3, #0
 80005fa:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80005fe:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000602:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000606:	460b      	mov	r3, r1
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	3307      	adds	r3, #7
 800060c:	08db      	lsrs	r3, r3, #3
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	ebad 0d03 	sub.w	sp, sp, r3
 8000614:	466b      	mov	r3, sp
 8000616:	3303      	adds	r3, #3
 8000618:	089b      	lsrs	r3, r3, #2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	623b      	str	r3, [r7, #32]
			  calculateTestTimes(&times, &test_times);
 800061e:	6a39      	ldr	r1, [r7, #32]
 8000620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000622:	f7ff fea9 	bl	8000378 <calculateTestTimes>
 8000626:	46b5      	mov	sp, r6
 8000628:	e038      	b.n	800069c <main+0x184>

		  }
		  else{
 800062a:	466b      	mov	r3, sp
 800062c:	461e      	mov	r6, r3
			  testUsingIntervals(&times);
 800062e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000630:	f7ff ff3a 	bl	80004a8 <testUsingIntervals>

			  uint32_t test_times[max_amount_of_runs];
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <main+0x194>)
 8000636:	8819      	ldrh	r1, [r3, #0]
 8000638:	460b      	mov	r3, r1
 800063a:	3b01      	subs	r3, #1
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800063e:	b28b      	uxth	r3, r1
 8000640:	2200      	movs	r2, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	617a      	str	r2, [r7, #20]
 8000646:	f04f 0200 	mov.w	r2, #0
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	6978      	ldr	r0, [r7, #20]
 8000650:	0143      	lsls	r3, r0, #5
 8000652:	6938      	ldr	r0, [r7, #16]
 8000654:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000658:	6938      	ldr	r0, [r7, #16]
 800065a:	0142      	lsls	r2, r0, #5
 800065c:	b28b      	uxth	r3, r1
 800065e:	2200      	movs	r2, #0
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	60fa      	str	r2, [r7, #12]
 8000664:	f04f 0200 	mov.w	r2, #0
 8000668:	f04f 0300 	mov.w	r3, #0
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	0143      	lsls	r3, r0, #5
 8000670:	68b8      	ldr	r0, [r7, #8]
 8000672:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000676:	68b8      	ldr	r0, [r7, #8]
 8000678:	0142      	lsls	r2, r0, #5
 800067a:	460b      	mov	r3, r1
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	3307      	adds	r3, #7
 8000680:	08db      	lsrs	r3, r3, #3
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	ebad 0d03 	sub.w	sp, sp, r3
 8000688:	466b      	mov	r3, sp
 800068a:	3303      	adds	r3, #3
 800068c:	089b      	lsrs	r3, r3, #2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
			  calculateTestTimes(&times, &test_times);
 8000692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000696:	f7ff fe6f 	bl	8000378 <calculateTestTimes>
 800069a:	46b5      	mov	sp, r6
 800069c:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  if(!test_input_set){
 80006a0:	e74f      	b.n	8000542 <main+0x2a>
 80006a2:	bf00      	nop
 80006a4:	200000fc 	.word	0x200000fc
 80006a8:	2000044e 	.word	0x2000044e
 80006ac:	20000008 	.word	0x20000008
 80006b0:	2000044c 	.word	0x2000044c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09a      	sub	sp, #104	; 0x68
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2248      	movs	r2, #72	; 0x48
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fec8 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
 80006d6:	615a      	str	r2, [r3, #20]
 80006d8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80006da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006e8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80006ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	f023 0303 	bic.w	r3, r3, #3
 80006f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006fe:	f001 f83d 	bl	800177c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff fd8c 	bl	8000220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <SystemClock_Config+0xe8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000710:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemClock_Config+0xe8>)
 8000712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemClock_Config+0xe8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000724:	2327      	movs	r3, #39	; 0x27
 8000726:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2340      	movs	r3, #64	; 0x40
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000740:	2300      	movs	r3, #0
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000744:	2360      	movs	r3, #96	; 0x60
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000748:	2300      	movs	r3, #0
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fb8f 	bl	8001e74 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800075c:	f000 f986 	bl	8000a6c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000760:	236f      	movs	r3, #111	; 0x6f
 8000762:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000764:	2302      	movs	r3, #2
 8000766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2101      	movs	r1, #1
 8000780:	4618      	mov	r0, r3
 8000782:	f001 feeb 	bl	800255c <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800078c:	f000 f96e 	bl	8000a6c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000790:	f002 fc7a 	bl	8003088 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000794:	bf00      	nop
 8000796:	3768      	adds	r7, #104	; 0x68
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58000400 	.word	0x58000400

080007a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2250      	movs	r2, #80	; 0x50
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fe53 	bl	8004458 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007bc:	2300      	movs	r3, #0
 80007be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 faea 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80007ce:	f000 f94d 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	; 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_SPI1_Init+0x6c>)
 80007e2:	4a1a      	ldr	r2, [pc, #104]	; (800084c <MX_SPI1_Init+0x70>)
 80007e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_SPI1_Init+0x6c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_SPI1_Init+0x6c>)
 80007ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI1_Init+0x6c>)
 80007f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_SPI1_Init+0x6c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI1_Init+0x6c>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI1_Init+0x6c>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_SPI1_Init+0x6c>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI1_Init+0x6c>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_SPI1_Init+0x6c>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI1_Init+0x6c>)
 8000822:	2207      	movs	r2, #7
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_SPI1_Init+0x6c>)
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI1_Init+0x6c>)
 800082e:	2200      	movs	r2, #0
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_SPI1_Init+0x6c>)
 8000834:	f002 fd3f 	bl	80032b6 <HAL_SPI_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800083e:	f000 f915 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000098 	.word	0x20000098
 800084c:	40013000 	.word	0x40013000

08000850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_TIM2_Init+0x98>)
 8000870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000874:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_TIM2_Init+0x98>)
 8000878:	221f      	movs	r2, #31
 800087a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_TIM2_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_TIM2_Init+0x98>)
 8000884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000888:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_TIM2_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_TIM2_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000896:	4814      	ldr	r0, [pc, #80]	; (80008e8 <MX_TIM2_Init+0x98>)
 8000898:	f003 fab0 	bl	8003dfc <HAL_TIM_Base_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008a2:	f000 f8e3 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_TIM2_Init+0x98>)
 80008b4:	f003 fb40 	bl	8003f38 <HAL_TIM_ConfigClockSource>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008be:	f000 f8d5 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_TIM2_Init+0x98>)
 80008d0:	f003 fcfc 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008da:	f000 f8c7 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000fc 	.word	0x200000fc

080008ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USB_PCD_Init+0x48>)
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <MX_USB_PCD_Init+0x4c>)
 80008f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_USB_PCD_Init+0x48>)
 80008f8:	2208      	movs	r2, #8
 80008fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_USB_PCD_Init+0x48>)
 80008fe:	2202      	movs	r2, #2
 8000900:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USB_PCD_Init+0x48>)
 8000904:	2202      	movs	r2, #2
 8000906:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_USB_PCD_Init+0x48>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USB_PCD_Init+0x48>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_USB_PCD_Init+0x48>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USB_PCD_Init+0x48>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_USB_PCD_Init+0x48>)
 8000922:	f000 fe27 	bl	8001574 <HAL_PCD_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800092c:	f000 f89e 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000148 	.word	0x20000148
 8000938:	40006800 	.word	0x40006800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000950:	2004      	movs	r0, #4
 8000952:	f7ff fc7b 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fc78 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fc75 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2008      	movs	r0, #8
 8000964:	f7ff fc72 	bl	800024c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	4822      	ldr	r0, [pc, #136]	; (80009f8 <MX_GPIO_Init+0xbc>)
 800096e:	f000 fdd1 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2123      	movs	r1, #35	; 0x23
 8000976:	4821      	ldr	r0, [pc, #132]	; (80009fc <MX_GPIO_Init+0xc0>)
 8000978:	f000 fdcc 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_INPUT_Pin */
  GPIO_InitStruct.Pin = TEST_INPUT_Pin;
 800097c:	2301      	movs	r3, #1
 800097e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000980:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000986:	2302      	movs	r3, #2
 8000988:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEST_INPUT_GPIO_Port, &GPIO_InitStruct);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	481a      	ldr	r0, [pc, #104]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000990:	f000 fc50 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupter_Pin */
  GPIO_InitStruct.Pin = Interrupter_Pin;
 8000994:	2302      	movs	r3, #2
 8000996:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800099c:	2302      	movs	r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Interrupter_GPIO_Port, &GPIO_InitStruct);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009aa:	f000 fc43 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80009ae:	2323      	movs	r3, #35	; 0x23
 80009b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	480e      	ldr	r0, [pc, #56]	; (80009fc <MX_GPIO_Init+0xc0>)
 80009c4:	f000 fc36 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80009c8:	2303      	movs	r3, #3
 80009ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <MX_GPIO_Init+0xc4>)
 80009da:	f000 fc2b 	bl	8001234 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2006      	movs	r0, #6
 80009e4:	f000 fbf1 	bl	80011ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009e8:	2006      	movs	r0, #6
 80009ea:	f000 fc08 	bl	80011fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	48000800 	.word	0x48000800
 80009fc:	48000400 	.word	0x48000400
 8000a00:	48000c00 	.word	0x48000c00

08000a04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == TEST_INPUT_Pin){
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d11d      	bne.n	8000a50 <HAL_GPIO_EXTI_Callback+0x4c>
		if(captures%2 == 0){
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x58>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10a      	bne.n	8000a36 <HAL_GPIO_EXTI_Callback+0x32>
			timeBuff.startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a28:	6013      	str	r3, [r2, #0]
			captures++;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x58>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x58>)
 8000a32:	6013      	str	r3, [r2, #0]
		}


	}

}
 8000a34:	e00c      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0x4c>
			timeBuff.endTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a3e:	6053      	str	r3, [r2, #4]
			timeBuffReady = true;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
			captures++;
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x58>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x58>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	2000043c 	.word	0x2000043c
 8000a60:	200000fc 	.word	0x200000fc
 8000a64:	20000440 	.word	0x20000440
 8000a68:	20000448 	.word	0x20000448

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>

08000a76 <LL_AHB2_GRP1_EnableClock>:
{
 8000a76:	b480      	push	{r7}
 8000a78:	b085      	sub	sp, #20
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4013      	ands	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000acc:	68fb      	ldr	r3, [r7, #12]
}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b085      	sub	sp, #20
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4013      	ands	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_SPI_MspInit+0x5c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d117      	bne.n	8000b6e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b42:	f7ff ffca 	bl	8000ada <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff ff95 	bl	8000a76 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000b4c:	23b0      	movs	r3, #176	; 0xb0
 8000b4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fb63 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40013000 	.word	0x40013000

08000b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b8c:	d102      	bne.n	8000b94 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff ff8a 	bl	8000aa8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09c      	sub	sp, #112	; 0x70
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2250      	movs	r2, #80	; 0x50
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fc4b 	bl	8004458 <memset>
  if(hpcd->Instance==USB)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <HAL_PCD_MspInit+0xa8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d136      	bne.n	8000c3a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000bd2:	2318      	movs	r3, #24
 8000bd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bda:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000be0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000be2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000be6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000bee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 f8cf 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000c04:	f7ff ff32 	bl	8000a6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff ff34 	bl	8000a76 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000c20:	230a      	movs	r3, #10
 8000c22:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f000 fb01 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c32:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000c36:	f7ff ff37 	bl	8000aa8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3770      	adds	r7, #112	; 0x70
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40006800 	.word	0x40006800

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f992 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEST_INPUT_Pin);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 fc4f 	bl	8001544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e00a      	b.n	8000cd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cbc:	f3af 8000 	nop.w
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	60ba      	str	r2, [r7, #8]
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	dbf0      	blt.n	8000cbc <_read+0x12>
  }

  return len;
 8000cda:	687b      	ldr	r3, [r7, #4]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e009      	b.n	8000d0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	60ba      	str	r2, [r7, #8]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3301      	adds	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dbf1      	blt.n	8000cf6 <_write+0x12>
  }
  return len;
 8000d12:	687b      	ldr	r3, [r7, #4]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_close>:

int _close(int file)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d44:	605a      	str	r2, [r3, #4]
  return 0;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_isatty>:

int _isatty(int file)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f003 fb26 	bl	8004404 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20030000 	.word	0x20030000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	20000450 	.word	0x20000450
 8000dec:	20000468 	.word	0x20000468

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <SystemInit+0x98>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <SystemInit+0x98>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e1c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <SystemInit+0x9c>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3a:	f023 0305 	bic.w	r3, r3, #5
 8000e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <SystemInit+0xa0>)
 8000e5c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <SystemInit+0xa0>)
 8000e64:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	faf6fefb 	.word	0xfaf6fefb
 8000e90:	22041000 	.word	0x22041000

08000e94 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e94:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e96:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e98:	3304      	adds	r3, #4

08000e9a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000e9e:	d3f9      	bcc.n	8000e94 <CopyDataInit>
  bx lr
 8000ea0:	4770      	bx	lr

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ea2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ea4:	3004      	adds	r0, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ea6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>
  bx lr
 8000eaa:	4770      	bx	lr

08000eac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb0:	f7ff ff9e 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <LoopForever+0x6>)
 8000eb6:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <LoopForever+0xa>)
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <LoopForever+0xe>)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f7ff ffed 	bl	8000e9a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LoopForever+0x12>)
 8000ec2:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <LoopForever+0x16>)
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <LoopForever+0x1a>)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f7ff ffe7 	bl	8000e9a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <LoopForever+0x1e>)
 8000ece:	490c      	ldr	r1, [pc, #48]	; (8000f00 <LoopForever+0x22>)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f7ff ffe8 	bl	8000ea6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ed6:	f003 fa9b 	bl	8004410 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000eda:	f7ff fb1d 	bl	8000518 <main>

08000ede <LoopForever>:

LoopForever:
  b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   r0, =_estack
 8000ee0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	2000007c 	.word	0x2000007c
 8000eec:	08005554 	.word	0x08005554
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ef0:	20030000 	.word	0x20030000
 8000ef4:	20030000 	.word	0x20030000
 8000ef8:	080055c8 	.word	0x080055c8
  INIT_BSS _sbss, _ebss
 8000efc:	2000007c 	.word	0x2000007c
 8000f00:	20000468 	.word	0x20000468

08000f04 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_Init+0x3c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <HAL_Init+0x3c>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f000 f948 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 f80f 	bl	8000f48 <HAL_InitTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	e001      	b.n	8000f3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f36:	f7ff fde9 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	58004000 	.word	0x58004000

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d024      	beq.n	8000fa6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f5c:	f001 fcaa 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f950 	bl	800121a <HAL_SYSTICK_Config>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10f      	bne.n	8000fa0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d809      	bhi.n	8000f9a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f86:	2200      	movs	r2, #0
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f8e:	f000 f91c 	bl	80011ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <HAL_InitTick+0x70>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e007      	b.n	8000faa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e004      	b.n	8000faa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e001      	b.n	8000faa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000014 	.word	0x20000014
 8000fb8:	20000010 	.word	0x20000010

08000fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000014 	.word	0x20000014
 8000fe0:	20000454 	.word	0x20000454

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000454 	.word	0x20000454

08000ffc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTickPrio+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000010 	.word	0x20000010

08001014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800103c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_GetPriorityGrouping+0x18>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0307 	and.w	r3, r3, #7
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db0b      	blt.n	80010a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	4907      	ldr	r1, [pc, #28]	; (80010b0 <__NVIC_EnableIRQ+0x38>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001194:	f7ff ff8e 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff29 	bl	8001014 <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff40 	bl	800105c <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff33 	bl	8001078 <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa4 	bl	8001170 <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e14c      	b.n	80014de <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 813e 	beq.w	80014d8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x40>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d123      	bne.n	8001366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	6939      	ldr	r1, [r7, #16]
 8001362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8098 	beq.w	80014d8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80013a8:	4a54      	ldr	r2, [pc, #336]	; (80014fc <HAL_GPIO_Init+0x2c8>)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013d2:	d019      	beq.n	8001408 <HAL_GPIO_Init+0x1d4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a4a      	ldr	r2, [pc, #296]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d013      	beq.n	8001404 <HAL_GPIO_Init+0x1d0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a49      	ldr	r2, [pc, #292]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d00d      	beq.n	8001400 <HAL_GPIO_Init+0x1cc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a48      	ldr	r2, [pc, #288]	; (8001508 <HAL_GPIO_Init+0x2d4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x1c8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a47      	ldr	r2, [pc, #284]	; (800150c <HAL_GPIO_Init+0x2d8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_GPIO_Init+0x1c4>
 80013f4:	2304      	movs	r3, #4
 80013f6:	e008      	b.n	800140a <HAL_GPIO_Init+0x1d6>
 80013f8:	2307      	movs	r3, #7
 80013fa:	e006      	b.n	800140a <HAL_GPIO_Init+0x1d6>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e004      	b.n	800140a <HAL_GPIO_Init+0x1d6>
 8001400:	2302      	movs	r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x1d6>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_GPIO_Init+0x1d6>
 8001408:	2300      	movs	r3, #0
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800141a:	4938      	ldr	r1, [pc, #224]	; (80014fc <HAL_GPIO_Init+0x2c8>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001428:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800144c:	4a30      	ldr	r2, [pc, #192]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001476:	4a26      	ldr	r2, [pc, #152]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 800147e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a2:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 80014ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f aeab 	bne.w	8001244 <HAL_GPIO_Init+0x10>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40010000 	.word	0x40010000
 8001500:	48000400 	.word	0x48000400
 8001504:	48000800 	.word	0x48000800
 8001508:	48000c00 	.word	0x48000c00
 800150c:	48001000 	.word	0x48001000
 8001510:	58000800 	.word	0x58000800

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001530:	e002      	b.n	8001538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fa4e 	bl	8000a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58000800 	.word	0x58000800

08001574 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	b08b      	sub	sp, #44	; 0x2c
 8001578:	af06      	add	r7, sp, #24
 800157a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0cb      	b.n	800171e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fafe 	bl	8000b9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2203      	movs	r2, #3
 80015a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 feed 	bl	800438c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e040      	b.n	800163a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	3301      	adds	r3, #1
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	3303      	adds	r3, #3
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	3338      	adds	r3, #56	; 0x38
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	333c      	adds	r3, #60	; 0x3c
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	3340      	adds	r3, #64	; 0x40
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	3301      	adds	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3b9      	bcc.n	80015b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e044      	b.n	80016d4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	f203 1369 	addw	r3, r3, #361	; 0x169
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016b8:	7bfa      	ldrb	r2, [r7, #15]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3b5      	bcc.n	800164a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	687e      	ldr	r6, [r7, #4]
 80016e6:	466d      	mov	r5, sp
 80016e8:	f106 0410 	add.w	r4, r6, #16
 80016ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	602b      	str	r3, [r5, #0]
 80016f4:	1d33      	adds	r3, r6, #4
 80016f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f8:	6838      	ldr	r0, [r7, #0]
 80016fa:	f002 fe62 	bl	80043c2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d102      	bne.n	800171c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f805 	bl	8001726 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001726 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800174a:	b29b      	uxth	r3, r3
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800175e:	b29b      	uxth	r3, r3
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	58000400 	.word	0x58000400

0800179c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	58000400 	.word	0x58000400

080017b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017ca:	d101      	bne.n	80017d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_RCC_HSE_Enable>:
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_RCC_HSE_Disable>:
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_RCC_HSE_IsReady>:
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800182a:	d101      	bne.n	8001830 <LL_RCC_HSE_IsReady+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_RCC_HSE_IsReady+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_RCC_HSI_Enable>:
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_RCC_HSI_Disable>:
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_RCC_HSI_IsReady>:
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d101      	bne.n	8001890 <LL_RCC_HSI_IsReady+0x18>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <LL_RCC_HSI_IsReady+0x1a>
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_RCC_HSI_SetCalibTrimming>:
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_RCC_HSI48_Enable>:
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_RCC_HSI48_Disable>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_RCC_HSI48_IsReady>:
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800190e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b02      	cmp	r3, #2
 800191c:	d101      	bne.n	8001922 <LL_RCC_HSI48_IsReady+0x18>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_RCC_HSI48_IsReady+0x1a>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_RCC_LSE_Enable>:
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_RCC_LSE_Disable>:
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_RCC_LSE_EnableBypass>:
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_RCC_LSE_DisableBypass>:
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d101      	bne.n	80019ce <LL_RCC_LSE_IsReady+0x18>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <LL_RCC_LSE_IsReady+0x1a>
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d101      	bne.n	8001a36 <LL_RCC_LSI1_IsReady+0x18>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_RCC_LSI1_IsReady+0x1a>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a74:	f023 0304 	bic.w	r3, r3, #4
 8001a78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d101      	bne.n	8001a9e <LL_RCC_LSI2_IsReady+0x18>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <LL_RCC_LSI2_IsReady+0x1a>
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d101      	bne.n	8001b2a <LL_RCC_MSI_IsReady+0x16>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_RCC_MSI_IsReady+0x18>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b6e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2bb0      	cmp	r3, #176	; 0xb0
 8001b74:	d901      	bls.n	8001b7a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001b76:	23b0      	movs	r3, #176	; 0xb0
 8001b78:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001b7a:	687b      	ldr	r3, [r7, #4]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 0203 	bic.w	r2, r3, #3
 8001bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c56:	f023 020f 	bic.w	r2, r3, #15
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d46:	d101      	bne.n	8001d4c <LL_RCC_PLL_IsReady+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_RCC_PLL_IsReady+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0303 	and.w	r3, r3, #3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d101      	bne.n	8001dd2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df2:	d101      	bne.n	8001df8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d101      	bne.n	8001e1e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e3c:	d101      	bne.n	8001e42 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e60:	d101      	bne.n	8001e66 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b08d      	sub	sp, #52	; 0x34
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e363      	b.n	800254e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 808d 	beq.w	8001fae <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e94:	f7ff fea1 	bl	8001bda <LL_RCC_GetSysClkSource>
 8001e98:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e9a:	f7ff ff82 	bl	8001da2 <LL_RCC_PLL_GetMainSource>
 8001e9e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x3e>
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d147      	bne.n	8001f3c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d144      	bne.n	8001f3c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e347      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001ec2:	f7ff fe4c 	bl	8001b5e <LL_RCC_MSI_GetRange>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	429c      	cmp	r4, r3
 8001eca:	d914      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fd03 	bl	80028dc <RCC_SetFlashLatencyFromMSIRange>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e336      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fe26 	bl	8001b36 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fe4a 	bl	8001b88 <LL_RCC_MSI_SetCalibTrimming>
 8001ef4:	e013      	b.n	8001f1e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fe1b 	bl	8001b36 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fe3f 	bl	8001b88 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fce4 	bl	80028dc <RCC_SetFlashLatencyFromMSIRange>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e317      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f1e:	f000 fcc9 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4aa4      	ldr	r2, [pc, #656]	; (80021b8 <HAL_RCC_OscConfig+0x344>)
 8001f26:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f28:	4ba4      	ldr	r3, [pc, #656]	; (80021bc <HAL_RCC_OscConfig+0x348>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f80b 	bl	8000f48 <HAL_InitTick>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d039      	beq.n	8001fac <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e308      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01e      	beq.n	8001f82 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f44:	f7ff fdc8 	bl	8001ad8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f48:	f7ff f84c 	bl	8000fe4 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f50:	f7ff f848 	bl	8000fe4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e2f5      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f62:	f7ff fdd7 	bl	8001b14 <LL_RCC_MSI_IsReady>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f1      	beq.n	8001f50 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fde0 	bl	8001b36 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fe04 	bl	8001b88 <LL_RCC_MSI_SetCalibTrimming>
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f82:	f7ff fdb8 	bl	8001af6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f86:	f7ff f82d 	bl	8000fe4 <HAL_GetTick>
 8001f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f8e:	f7ff f829 	bl	8000fe4 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e2d6      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fa0:	f7ff fdb8 	bl	8001b14 <LL_RCC_MSI_IsReady>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f1      	bne.n	8001f8e <HAL_RCC_OscConfig+0x11a>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fac:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d047      	beq.n	800204a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	f7ff fe0e 	bl	8001bda <LL_RCC_GetSysClkSource>
 8001fbe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc0:	f7ff feef 	bl	8001da2 <LL_RCC_PLL_GetMainSource>
 8001fc4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x164>
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d108      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d134      	bne.n	800204a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e2b4      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d102      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x180>
 8001fee:	f7ff fbf5 	bl	80017dc <LL_RCC_HSE_Enable>
 8001ff2:	e001      	b.n	8001ff8 <HAL_RCC_OscConfig+0x184>
 8001ff4:	f7ff fc01 	bl	80017fa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d012      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7fe fff0 	bl	8000fe4 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7fe ffec 	bl	8000fe4 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e299      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800201a:	f7ff fbfd 	bl	8001818 <LL_RCC_HSE_IsReady>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f1      	beq.n	8002008 <HAL_RCC_OscConfig+0x194>
 8002024:	e011      	b.n	800204a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7fe ffdd 	bl	8000fe4 <HAL_GetTick>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202e:	f7fe ffd9 	bl	8000fe4 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b64      	cmp	r3, #100	; 0x64
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e286      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002040:	f7ff fbea 	bl	8001818 <LL_RCC_HSE_IsReady>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f1      	bne.n	800202e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d04c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002056:	f7ff fdc0 	bl	8001bda <LL_RCC_GetSysClkSource>
 800205a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205c:	f7ff fea1 	bl	8001da2 <LL_RCC_PLL_GetMainSource>
 8002060:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x200>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d10e      	bne.n	800208c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e266      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fc09 	bl	800189c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800208a:	e031      	b.n	80020f0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d019      	beq.n	80020c8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002094:	f7ff fbd2 	bl	800183c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe ffa4 	bl	8000fe4 <HAL_GetTick>
 800209c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a0:	f7fe ffa0 	bl	8000fe4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e24d      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80020b2:	f7ff fbe1 	bl	8001878 <LL_RCC_HSI_IsReady>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f1      	beq.n	80020a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fbeb 	bl	800189c <LL_RCC_HSI_SetCalibTrimming>
 80020c6:	e013      	b.n	80020f0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c8:	f7ff fbc7 	bl	800185a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff8a 	bl	8000fe4 <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d4:	f7fe ff86 	bl	8000fe4 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e233      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80020e6:	f7ff fbc7 	bl	8001878 <LL_RCC_HSI_IsReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f1      	bne.n	80020d4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a3 	beq.w	8002250 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d076      	beq.n	8002200 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d046      	beq.n	80021ac <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800211e:	f7ff fc7e 	bl	8001a1e <LL_RCC_LSI1_IsReady>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d113      	bne.n	8002150 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002128:	f7ff fc57 	bl	80019da <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800212c:	f7fe ff5a 	bl	8000fe4 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002134:	f7fe ff56 	bl	8000fe4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e203      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002146:	f7ff fc6a 	bl	8001a1e <LL_RCC_LSI1_IsReady>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f1      	beq.n	8002134 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002150:	f7ff fc77 	bl	8001a42 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe ff46 	bl	8000fe4 <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800215c:	f7fe ff42 	bl	8000fe4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b03      	cmp	r3, #3
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1ef      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800216e:	f7ff fc8a 	bl	8001a86 <LL_RCC_LSI2_IsReady>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f1      	beq.n	800215c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fc94 	bl	8001aaa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002182:	f7ff fc3b 	bl	80019fc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe ff2d 	bl	8000fe4 <HAL_GetTick>
 800218a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800218e:	f7fe ff29 	bl	8000fe4 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1d6      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80021a0:	f7ff fc3d 	bl	8001a1e <LL_RCC_LSI1_IsReady>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f1      	bne.n	800218e <HAL_RCC_OscConfig+0x31a>
 80021aa:	e051      	b.n	8002250 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80021ac:	f7ff fc15 	bl	80019da <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe ff18 	bl	8000fe4 <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80021b6:	e00c      	b.n	80021d2 <HAL_RCC_OscConfig+0x35e>
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021c0:	f7fe ff10 	bl	8000fe4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1bd      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80021d2:	f7ff fc24 	bl	8001a1e <LL_RCC_LSI1_IsReady>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f1      	beq.n	80021c0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80021dc:	f7ff fc42 	bl	8001a64 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021e2:	f7fe feff 	bl	8000fe4 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1ac      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80021f4:	f7ff fc47 	bl	8001a86 <LL_RCC_LSI2_IsReady>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f1      	bne.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 80021fe:	e027      	b.n	8002250 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002200:	f7ff fc30 	bl	8001a64 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7fe feee 	bl	8000fe4 <HAL_GetTick>
 8002208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800220c:	f7fe feea 	bl	8000fe4 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b03      	cmp	r3, #3
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e197      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800221e:	f7ff fc32 	bl	8001a86 <LL_RCC_LSI2_IsReady>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f1      	bne.n	800220c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002228:	f7ff fbe8 	bl	80019fc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7fe feda 	bl	8000fe4 <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002234:	f7fe fed6 	bl	8000fe4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e183      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002246:	f7ff fbea 	bl	8001a1e <LL_RCC_LSI1_IsReady>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f1      	bne.n	8002234 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d05b      	beq.n	8002314 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225c:	4ba7      	ldr	r3, [pc, #668]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d114      	bne.n	8002292 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002268:	f7ff fa88 	bl	800177c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226c:	f7fe feba 	bl	8000fe4 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7fe feb6 	bl	8000fe4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e163      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002286:	4b9d      	ldr	r3, [pc, #628]	; (80024fc <HAL_RCC_OscConfig+0x688>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d102      	bne.n	80022a0 <HAL_RCC_OscConfig+0x42c>
 800229a:	f7ff fb48 	bl	800192e <LL_RCC_LSE_Enable>
 800229e:	e00c      	b.n	80022ba <HAL_RCC_OscConfig+0x446>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d104      	bne.n	80022b2 <HAL_RCC_OscConfig+0x43e>
 80022a8:	f7ff fb63 	bl	8001972 <LL_RCC_LSE_EnableBypass>
 80022ac:	f7ff fb3f 	bl	800192e <LL_RCC_LSE_Enable>
 80022b0:	e003      	b.n	80022ba <HAL_RCC_OscConfig+0x446>
 80022b2:	f7ff fb4d 	bl	8001950 <LL_RCC_LSE_Disable>
 80022b6:	f7ff fb6d 	bl	8001994 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d014      	beq.n	80022ec <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7fe fe8f 	bl	8000fe4 <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fe8b 	bl	8000fe4 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e136      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80022e0:	f7ff fb69 	bl	80019b6 <LL_RCC_LSE_IsReady>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ef      	beq.n	80022ca <HAL_RCC_OscConfig+0x456>
 80022ea:	e013      	b.n	8002314 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7fe fe7a 	bl	8000fe4 <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7fe fe76 	bl	8000fe4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e121      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800230a:	f7ff fb54 	bl	80019b6 <LL_RCC_LSE_IsReady>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ef      	bne.n	80022f4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d02c      	beq.n	800237a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	d014      	beq.n	8002352 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002328:	f7ff facd 	bl	80018c6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe fe5a 	bl	8000fe4 <HAL_GetTick>
 8002330:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002334:	f7fe fe56 	bl	8000fe4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e103      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002346:	f7ff fae0 	bl	800190a <LL_RCC_HSI48_IsReady>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f1      	beq.n	8002334 <HAL_RCC_OscConfig+0x4c0>
 8002350:	e013      	b.n	800237a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002352:	f7ff fac9 	bl	80018e8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002356:	f7fe fe45 	bl	8000fe4 <HAL_GetTick>
 800235a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800235e:	f7fe fe41 	bl	8000fe4 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0ee      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002370:	f7ff facb 	bl	800190a <LL_RCC_HSI48_IsReady>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f1      	bne.n	800235e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80e4 	beq.w	800254c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002384:	f7ff fc29 	bl	8001bda <LL_RCC_GetSysClkSource>
 8002388:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	2b02      	cmp	r3, #2
 8002398:	f040 80b4 	bne.w	8002504 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0203 	and.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d123      	bne.n	80023f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d11c      	bne.n	80023f2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d114      	bne.n	80023f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d10d      	bne.n	80023f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d05d      	beq.n	80024ae <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d058      	beq.n	80024aa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0a1      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800240a:	f7ff fc84 	bl	8001d16 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800240e:	f7fe fde9 	bl	8000fe4 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fde5 	bl	8000fe4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e092      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x68c>)
 800243e:	4013      	ands	r3, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002448:	4311      	orrs	r1, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800244e:	0212      	lsls	r2, r2, #8
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800245c:	4311      	orrs	r1, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002462:	430a      	orrs	r2, r1
 8002464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002468:	4313      	orrs	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800246c:	f7ff fc44 	bl	8001cf8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002480:	f7fe fdb0 	bl	8000fe4 <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fdac 	bl	8000fe4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e059      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ef      	beq.n	8002488 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a8:	e050      	b.n	800254c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e04f      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d147      	bne.n	800254c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024bc:	f7ff fc1c 	bl	8001cf8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024d0:	f7fe fd88 	bl	8000fe4 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe fd84 	bl	8000fe4 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e031      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ef      	beq.n	80024d8 <HAL_RCC_OscConfig+0x664>
 80024f8:	e028      	b.n	800254c <HAL_RCC_OscConfig+0x6d8>
 80024fa:	bf00      	nop
 80024fc:	58000400 	.word	0x58000400
 8002500:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d01e      	beq.n	8002548 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	f7ff fc04 	bl	8001d16 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe fd69 	bl	8000fe4 <HAL_GetTick>
 8002512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fd65 	bl	8000fe4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e012      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ef      	bne.n	8002516 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_RCC_OscConfig+0x6e4>)
 8002542:	4013      	ands	r3, r2
 8002544:	60cb      	str	r3, [r1, #12]
 8002546:	e001      	b.n	800254c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3734      	adds	r7, #52	; 0x34
 8002552:	46bd      	mov	sp, r7
 8002554:	bd90      	pop	{r4, r7, pc}
 8002556:	bf00      	nop
 8002558:	eefefffc 	.word	0xeefefffc

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e12d      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b98      	ldr	r3, [pc, #608]	; (80027d4 <HAL_RCC_ClockConfig+0x278>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d91b      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b95      	ldr	r3, [pc, #596]	; (80027d4 <HAL_RCC_ClockConfig+0x278>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4993      	ldr	r1, [pc, #588]	; (80027d4 <HAL_RCC_ClockConfig+0x278>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258e:	f7fe fd29 	bl	8000fe4 <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002596:	f7fe fd25 	bl	8000fe4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e111      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a8:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <HAL_RCC_ClockConfig+0x278>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d1ef      	bne.n	8002596 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fb13 	bl	8001bf2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fd0a 	bl	8000fe4 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025d4:	f7fe fd06 	bl	8000fe4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0f2      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025e6:	f7ff fbe8 	bl	8001dba <LL_RCC_IsActiveFlag_HPRE>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f1      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb0a 	bl	8001c1a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002606:	f7fe fced 	bl	8000fe4 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800260e:	f7fe fce9 	bl	8000fe4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0d5      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002620:	f7ff fbdd 	bl	8001dde <LL_RCC_IsActiveFlag_C2HPRE>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f1      	beq.n	800260e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fb03 	bl	8001c46 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002640:	f7fe fcd0 	bl	8000fe4 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002648:	f7fe fccc 	bl	8000fe4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0b8      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800265a:	f7ff fbd3 	bl	8001e04 <LL_RCC_IsActiveFlag_SHDHPRE>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f1      	beq.n	8002648 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d016      	beq.n	800269e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fafd 	bl	8001c74 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800267a:	f7fe fcb3 	bl	8000fe4 <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002682:	f7fe fcaf 	bl	8000fe4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e09b      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002694:	f7ff fbc9 	bl	8001e2a <LL_RCC_IsActiveFlag_PPRE1>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f1      	beq.n	8002682 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d017      	beq.n	80026da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff faf3 	bl	8001c9c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026b6:	f7fe fc95 	bl	8000fe4 <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026be:	f7fe fc91 	bl	8000fe4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e07d      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026d0:	f7ff fbbd 	bl	8001e4e <LL_RCC_IsActiveFlag_PPRE2>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f1      	beq.n	80026be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d043      	beq.n	800276e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d106      	bne.n	80026fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80026ee:	f7ff f893 	bl	8001818 <LL_RCC_HSE_IsReady>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d11e      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e067      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d106      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002704:	f7ff fb16 	bl	8001d34 <LL_RCC_PLL_IsReady>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d113      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e05c      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800271a:	f7ff f9fb 	bl	8001b14 <LL_RCC_MSI_IsReady>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d108      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e051      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002728:	f7ff f8a6 	bl	8001878 <LL_RCC_HSI_IsReady>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e04a      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fa39 	bl	8001bb2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002740:	f7fe fc50 	bl	8000fe4 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7fe fc4c 	bl	8000fe4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e036      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	f7ff fa3c 	bl	8001bda <LL_RCC_GetSysClkSource>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	429a      	cmp	r2, r3
 800276c:	d1ec      	bne.n	8002748 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800276e:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_RCC_ClockConfig+0x278>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d21b      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_RCC_ClockConfig+0x278>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 0207 	bic.w	r2, r3, #7
 8002784:	4913      	ldr	r1, [pc, #76]	; (80027d4 <HAL_RCC_ClockConfig+0x278>)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800278c:	f7fe fc2a 	bl	8000fe4 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002794:	f7fe fc26 	bl	8000fe4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e012      	b.n	80027cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_ClockConfig+0x278>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1ef      	bne.n	8002794 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027b4:	f000 f87e 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_RCC_ClockConfig+0x27c>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80027be:	f7fe fc1d 	bl	8000ffc <HAL_GetTickPrio>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fbbf 	bl	8000f48 <HAL_InitTick>
 80027ca:	4603      	mov	r3, r0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	58004000 	.word	0x58004000
 80027d8:	2000000c 	.word	0x2000000c

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	f7ff f9fa 	bl	8001bda <LL_RCC_GetSysClkSource>
 80027e6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027ee:	f7ff f9b6 	bl	8001b5e <LL_RCC_MSI_GetRange>
 80027f2:	4603      	mov	r3, r0
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	4a2b      	ldr	r2, [pc, #172]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e04b      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d102      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800280a:	4b28      	ldr	r3, [pc, #160]	; (80028ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e045      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b08      	cmp	r3, #8
 8002814:	d10a      	bne.n	800282c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002816:	f7fe ffcf 	bl	80017b8 <LL_RCC_HSE_IsEnabledDiv2>
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002820:	4b22      	ldr	r3, [pc, #136]	; (80028ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e03a      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e037      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800282c:	f7ff fab9 	bl	8001da2 <LL_RCC_PLL_GetMainSource>
 8002830:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d003      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x64>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x6a>
 800283e:	e00d      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002842:	60bb      	str	r3, [r7, #8]
        break;
 8002844:	e015      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002846:	f7fe ffb7 	bl	80017b8 <LL_RCC_HSE_IsEnabledDiv2>
 800284a:	4603      	mov	r3, r0
 800284c:	2b01      	cmp	r3, #1
 800284e:	d102      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002852:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002854:	e00d      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002858:	60bb      	str	r3, [r7, #8]
        break;
 800285a:	e00a      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800285c:	f7ff f97f 	bl	8001b5e <LL_RCC_MSI_GetRange>
 8002860:	4603      	mov	r3, r0
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286e:	60bb      	str	r3, [r7, #8]
        break;
 8002870:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002872:	f7ff fa71 	bl	8001d58 <LL_RCC_PLL_GetN>
 8002876:	4602      	mov	r2, r0
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	fb03 f402 	mul.w	r4, r3, r2
 800287e:	f7ff fa84 	bl	8001d8a <LL_RCC_PLL_GetDivider>
 8002882:	4603      	mov	r3, r0
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	3301      	adds	r3, #1
 8002888:	fbb4 f4f3 	udiv	r4, r4, r3
 800288c:	f7ff fa71 	bl	8001d72 <LL_RCC_PLL_GetR>
 8002890:	4603      	mov	r3, r0
 8002892:	0f5b      	lsrs	r3, r3, #29
 8002894:	3301      	adds	r3, #1
 8002896:	fbb4 f3f3 	udiv	r3, r4, r3
 800289a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800289c:	68fb      	ldr	r3, [r7, #12]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}
 80028a6:	bf00      	nop
 80028a8:	08005474 	.word	0x08005474
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	01e84800 	.word	0x01e84800

080028b4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b598      	push	{r3, r4, r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80028b8:	f7ff ff90 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 80028bc:	4604      	mov	r4, r0
 80028be:	f7ff fa01 	bl	8001cc4 <LL_RCC_GetAHBPrescaler>
 80028c2:	4603      	mov	r3, r0
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	4a03      	ldr	r2, [pc, #12]	; (80028d8 <HAL_RCC_GetHCLKFreq+0x24>)
 80028cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd98      	pop	{r3, r4, r7, pc}
 80028d8:	08005434 	.word	0x08005434

080028dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2bb0      	cmp	r3, #176	; 0xb0
 80028e8:	d903      	bls.n	80028f2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e007      	b.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002902:	f7ff f9eb 	bl	8001cdc <LL_RCC_GetAHB4Prescaler>
 8002906:	4603      	mov	r3, r0
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	0c9c      	lsrs	r4, r3, #18
 8002926:	f7fe ff39 	bl	800179c <HAL_PWREx_GetVoltageRange>
 800292a:	4603      	mov	r3, r0
 800292c:	4619      	mov	r1, r3
 800292e:	4620      	mov	r0, r4
 8002930:	f000 f80c 	bl	800294c <RCC_SetFlashLatency>
 8002934:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bd90      	pop	{r4, r7, pc}
 800293e:	bf00      	nop
 8002940:	08005474 	.word	0x08005474
 8002944:	08005434 	.word	0x08005434
 8002948:	431bde83 	.word	0x431bde83

0800294c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b093      	sub	sp, #76	; 0x4c
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002956:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <RCC_SetFlashLatency+0xe8>)
 8002958:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800295c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800295e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002962:	4a35      	ldr	r2, [pc, #212]	; (8002a38 <RCC_SetFlashLatency+0xec>)
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	ca07      	ldmia	r2, {r0, r1, r2}
 800296a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800296e:	4b33      	ldr	r3, [pc, #204]	; (8002a3c <RCC_SetFlashLatency+0xf0>)
 8002970:	f107 040c 	add.w	r4, r7, #12
 8002974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800297a:	2300      	movs	r3, #0
 800297c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002984:	d11a      	bne.n	80029bc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002986:	2300      	movs	r3, #0
 8002988:	643b      	str	r3, [r7, #64]	; 0x40
 800298a:	e013      	b.n	80029b4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800298c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	3348      	adds	r3, #72	; 0x48
 8002992:	443b      	add	r3, r7
 8002994:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d807      	bhi.n	80029ae <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800299e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	3348      	adds	r3, #72	; 0x48
 80029a4:	443b      	add	r3, r7
 80029a6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80029ac:	e020      	b.n	80029f0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b0:	3301      	adds	r3, #1
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
 80029b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d9e8      	bls.n	800298c <RCC_SetFlashLatency+0x40>
 80029ba:	e019      	b.n	80029f0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029bc:	2300      	movs	r3, #0
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c0:	e013      	b.n	80029ea <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80029c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	3348      	adds	r3, #72	; 0x48
 80029c8:	443b      	add	r3, r7
 80029ca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d807      	bhi.n	80029e4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3348      	adds	r3, #72	; 0x48
 80029da:	443b      	add	r3, r7
 80029dc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80029e2:	e005      	b.n	80029f0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	3301      	adds	r3, #1
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d9e8      	bls.n	80029c2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <RCC_SetFlashLatency+0xf4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 0207 	bic.w	r2, r3, #7
 80029f8:	4911      	ldr	r1, [pc, #68]	; (8002a40 <RCC_SetFlashLatency+0xf4>)
 80029fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a00:	f7fe faf0 	bl	8000fe4 <HAL_GetTick>
 8002a04:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a06:	e008      	b.n	8002a1a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a08:	f7fe faec 	bl	8000fe4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e007      	b.n	8002a2a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <RCC_SetFlashLatency+0xf4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1ef      	bne.n	8002a08 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	374c      	adds	r7, #76	; 0x4c
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	bf00      	nop
 8002a34:	08005408 	.word	0x08005408
 8002a38:	08005418 	.word	0x08005418
 8002a3c:	08005424 	.word	0x08005424
 8002a40:	58004000 	.word	0x58004000

08002a44 <LL_RCC_LSE_IsEnabled>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <LL_RCC_LSE_IsEnabled+0x18>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <LL_RCC_LSE_IsEnabled+0x1a>
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_RCC_LSE_IsReady>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d101      	bne.n	8002a80 <LL_RCC_LSE_IsReady+0x18>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_RCC_LSE_IsReady+0x1a>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_RCC_MSI_EnablePLLMode>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	6013      	str	r3, [r2, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_SetRFWKPClockSource>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_SetSMPSClockSource>:
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	f023 0203 	bic.w	r2, r3, #3
 8002ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_SetSMPSPrescaler>:
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_SetUSARTClockSource>:
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_SetLPUARTClockSource>:
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_SetI2CClockSource>:
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b96:	43db      	mvns	r3, r3
 8002b98:	401a      	ands	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_SetLPTIMClockSource>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_RCC_SetSAIClockSource>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_RCC_SetRNGClockSource>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_SetCLK48ClockSource>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_SetUSBClockSource>:
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ffe3 	bl	8002c44 <LL_RCC_SetCLK48ClockSource>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <LL_RCC_SetADCClockSource>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_SetRTCClockSource>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_GetRTCClockSource>:
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_ForceBackupDomainReset>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_RCC_PLLSAI1_Enable>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_PLLSAI1_Disable>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_RCC_PLLSAI1_IsReady>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d8a:	d101      	bne.n	8002d90 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002da4:	2300      	movs	r3, #0
 8002da6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002da8:	2300      	movs	r3, #0
 8002daa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d034      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dc0:	d021      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002dc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dc6:	d81b      	bhi.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dcc:	d01d      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002dce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dd2:	d815      	bhi.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00b      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ddc:	d110      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dee:	e00d      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f94d 	bl	8003094 <RCCEx_PLLSAI1_ConfigNP>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dfe:	e005      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	77fb      	strb	r3, [r7, #31]
        break;
 8002e04:	e002      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e0c:	7ffb      	ldrb	r3, [r7, #31]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fee8 	bl	8002bec <LL_RCC_SetSAIClockSource>
 8002e1c:	e001      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d046      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002e2e:	f7ff ff56 	bl	8002cde <LL_RCC_GetRTCClockSource>
 8002e32:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d03c      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e3e:	f7fe fc9d 	bl	800177c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff30 	bl	8002cb2 <LL_RCC_SetRTCClockSource>
 8002e52:	e02e      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002e5e:	f7ff ff4b 	bl	8002cf8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002e62:	f7ff ff5a 	bl	8002d1a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002e7e:	f7ff fde1 	bl	8002a44 <LL_RCC_LSE_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d114      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e88:	f7fe f8ac 	bl	8000fe4 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe f8a8 	bl	8000fe4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d902      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	77fb      	strb	r3, [r7, #31]
              break;
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002ea8:	f7ff fdde 	bl	8002a68 <LL_RCC_LSE_IsReady>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d1ee      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	77bb      	strb	r3, [r7, #30]
 8002eb6:	e001      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	7ffb      	ldrb	r3, [r7, #31]
 8002eba:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fe2a 	bl	8002b26 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fe35 	bl	8002b52 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fe5d 	bl	8002bb8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fe52 	bl	8002bb8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fe2a 	bl	8002b7e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fe1f 	bl	8002b7e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d022      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fe8d 	bl	8002c70 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f78:	d10b      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f8e3 	bl	800314a <RCCEx_PLLSAI1_ConfigNQ>
 8002f84:	4603      	mov	r3, r0
 8002f86:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d02b      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d008      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fb0:	d003      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fe2a 	bl	8002c18 <LL_RCC_SetRNGClockSource>
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7ff fe21 	bl	8002c18 <LL_RCC_SetRNGClockSource>
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff fe34 	bl	8002c44 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d022      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fe3d 	bl	8002c86 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003014:	d107      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800302e:	d10b      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4618      	mov	r0, r3
 8003036:	f000 f8e3 	bl	8003200 <RCCEx_PLLSAI1_ConfigNR>
 800303a:	4603      	mov	r3, r0
 800303c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800303e:	7ffb      	ldrb	r3, [r7, #31]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003044:	7ffb      	ldrb	r3, [r7, #31]
 8003046:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fd26 	bl	8002aaa <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fd45 	bl	8002afe <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fd2c 	bl	8002ad6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800307e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800308c:	f7ff fcfe 	bl	8002a8c <LL_RCC_MSI_EnablePLLMode>
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}

08003094 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030a0:	f7ff fe5b 	bl	8002d5a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030a4:	f7fd ff9e 	bl	8000fe4 <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030aa:	e009      	b.n	80030c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ac:	f7fd ff9a 	bl	8000fe4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d902      	bls.n	80030c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	73fb      	strb	r3, [r7, #15]
      break;
 80030be:	e004      	b.n	80030ca <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030c0:	f7ff fe5a 	bl	8002d78 <LL_RCC_PLLSAI1_IsReady>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d137      	bne.n	8003140 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e4:	4313      	orrs	r3, r2
 80030e6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fa:	4313      	orrs	r3, r2
 80030fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80030fe:	f7ff fe1d 	bl	8002d3c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003102:	f7fd ff6f 	bl	8000fe4 <HAL_GetTick>
 8003106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003108:	e009      	b.n	800311e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800310a:	f7fd ff6b 	bl	8000fe4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d902      	bls.n	800311e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	73fb      	strb	r3, [r7, #15]
        break;
 800311c:	e004      	b.n	8003128 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800311e:	f7ff fe2b 	bl	8002d78 <LL_RCC_PLLSAI1_IsReady>
 8003122:	4603      	mov	r3, r0
 8003124:	2b01      	cmp	r3, #1
 8003126:	d1f0      	bne.n	800310a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800312e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313c:	4313      	orrs	r3, r2
 800313e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003156:	f7ff fe00 	bl	8002d5a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800315a:	f7fd ff43 	bl	8000fe4 <HAL_GetTick>
 800315e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003160:	e009      	b.n	8003176 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003162:	f7fd ff3f 	bl	8000fe4 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d902      	bls.n	8003176 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	73fb      	strb	r3, [r7, #15]
      break;
 8003174:	e004      	b.n	8003180 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003176:	f7ff fdff 	bl	8002d78 <LL_RCC_PLLSAI1_IsReady>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d137      	bne.n	80031f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800319a:	4313      	orrs	r3, r2
 800319c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800319e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b0:	4313      	orrs	r3, r2
 80031b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031b4:	f7ff fdc2 	bl	8002d3c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b8:	f7fd ff14 	bl	8000fe4 <HAL_GetTick>
 80031bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031be:	e009      	b.n	80031d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c0:	f7fd ff10 	bl	8000fe4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d902      	bls.n	80031d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	73fb      	strb	r3, [r7, #15]
        break;
 80031d2:	e004      	b.n	80031de <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031d4:	f7ff fdd0 	bl	8002d78 <LL_RCC_PLLSAI1_IsReady>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d1f0      	bne.n	80031c0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d108      	bne.n	80031f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f2:	4313      	orrs	r3, r2
 80031f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800320c:	f7ff fda5 	bl	8002d5a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003210:	f7fd fee8 	bl	8000fe4 <HAL_GetTick>
 8003214:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003216:	e009      	b.n	800322c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003218:	f7fd fee4 	bl	8000fe4 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d902      	bls.n	800322c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	73fb      	strb	r3, [r7, #15]
      break;
 800322a:	e004      	b.n	8003236 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800322c:	f7ff fda4 	bl	8002d78 <LL_RCC_PLLSAI1_IsReady>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d137      	bne.n	80032ac <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003266:	4313      	orrs	r3, r2
 8003268:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800326a:	f7ff fd67 	bl	8002d3c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326e:	f7fd feb9 	bl	8000fe4 <HAL_GetTick>
 8003272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003274:	e009      	b.n	800328a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003276:	f7fd feb5 	bl	8000fe4 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d902      	bls.n	800328a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	73fb      	strb	r3, [r7, #15]
        break;
 8003288:	e004      	b.n	8003294 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800328a:	f7ff fd75 	bl	8002d78 <LL_RCC_PLLSAI1_IsReady>
 800328e:	4603      	mov	r3, r0
 8003290:	2b01      	cmp	r3, #1
 8003292:	d1f0      	bne.n	8003276 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d108      	bne.n	80032ac <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a8:	4313      	orrs	r3, r2
 80032aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e095      	b.n	80033f4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d108      	bne.n	80032e2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d8:	d009      	beq.n	80032ee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	61da      	str	r2, [r3, #28]
 80032e0:	e005      	b.n	80032ee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd fc07 	bl	8000b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003324:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800332e:	d902      	bls.n	8003336 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e002      	b.n	800333c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003344:	d007      	beq.n	8003356 <HAL_SPI_Init+0xa0>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800334e:	d002      	beq.n	8003356 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003398:	ea42 0103 	orr.w	r1, r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0204 	and.w	r2, r3, #4
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033d2:	ea42 0103 	orr.w	r1, r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003418:	d112      	bne.n	8003440 <HAL_SPI_Receive+0x44>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10e      	bne.n	8003440 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2204      	movs	r2, #4
 8003426:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800342a:	88fa      	ldrh	r2, [r7, #6]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f910 	bl	800365c <HAL_SPI_TransmitReceive>
 800343c:	4603      	mov	r3, r0
 800343e:	e109      	b.n	8003654 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_SPI_Receive+0x52>
 800344a:	2302      	movs	r3, #2
 800344c:	e102      	b.n	8003654 <HAL_SPI_Receive+0x258>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003456:	f7fd fdc5 	bl	8000fe4 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d002      	beq.n	800346e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003468:	2302      	movs	r3, #2
 800346a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800346c:	e0e9      	b.n	8003642 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_SPI_Receive+0x7e>
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800347e:	e0e0      	b.n	8003642 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2204      	movs	r2, #4
 8003484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ca:	d908      	bls.n	80034de <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	e007      	b.n	80034ee <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f6:	d10f      	bne.n	8003518 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003506:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d007      	beq.n	8003536 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003534:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800353e:	d867      	bhi.n	8003610 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003540:	e030      	b.n	80035a4 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d117      	bne.n	8003580 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f103 020c 	add.w	r2, r3, #12
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800357e:	e011      	b.n	80035a4 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003580:	f7fd fd30 	bl	8000fe4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d803      	bhi.n	8003598 <HAL_SPI_Receive+0x19c>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003596:	d102      	bne.n	800359e <HAL_SPI_Receive+0x1a2>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035a2:	e04e      	b.n	8003642 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1c8      	bne.n	8003542 <HAL_SPI_Receive+0x146>
 80035b0:	e034      	b.n	800361c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d115      	bne.n	80035ec <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	b292      	uxth	r2, r2
 80035cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	1c9a      	adds	r2, r3, #2
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035ea:	e011      	b.n	8003610 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ec:	f7fd fcfa 	bl	8000fe4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d803      	bhi.n	8003604 <HAL_SPI_Receive+0x208>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003602:	d102      	bne.n	800360a <HAL_SPI_Receive+0x20e>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800360e:	e018      	b.n	8003642 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ca      	bne.n	80035b2 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	6839      	ldr	r1, [r7, #0]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fb4d 	bl	8003cc0 <SPI_EndRxTransaction>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
 800363e:	e000      	b.n	8003642 <HAL_SPI_Receive+0x246>
  }

error :
 8003640:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800366a:	2301      	movs	r3, #1
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_SPI_TransmitReceive+0x26>
 800367e:	2302      	movs	r3, #2
 8003680:	e1fb      	b.n	8003a7a <HAL_SPI_TransmitReceive+0x41e>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800368a:	f7fd fcab 	bl	8000fe4 <HAL_GetTick>
 800368e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003696:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800369e:	887b      	ldrh	r3, [r7, #2]
 80036a0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036a6:	7efb      	ldrb	r3, [r7, #27]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d00e      	beq.n	80036ca <HAL_SPI_TransmitReceive+0x6e>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b2:	d106      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x66>
 80036bc:	7efb      	ldrb	r3, [r7, #27]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d003      	beq.n	80036ca <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
 80036c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036c8:	e1cd      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x80>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x80>
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036e2:	e1c0      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d003      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2205      	movs	r2, #5
 80036f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	887a      	ldrh	r2, [r7, #2]
 800371e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800373a:	d802      	bhi.n	8003742 <HAL_SPI_TransmitReceive+0xe6>
 800373c:	8a3b      	ldrh	r3, [r7, #16]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d908      	bls.n	8003754 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	e007      	b.n	8003764 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003762:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d007      	beq.n	8003782 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800378a:	d97c      	bls.n	8003886 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_SPI_TransmitReceive+0x13e>
 8003794:	8a7b      	ldrh	r3, [r7, #18]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d169      	bne.n	800386e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	881a      	ldrh	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	1c9a      	adds	r2, r3, #2
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037be:	e056      	b.n	800386e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d11b      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x1aa>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d016      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x1aa>
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d113      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	1c9a      	adds	r2, r3, #2
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d11c      	bne.n	800384e <HAL_SPI_TransmitReceive+0x1f2>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	b292      	uxth	r2, r2
 800382c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800384a:	2301      	movs	r3, #1
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800384e:	f7fd fbc9 	bl	8000fe4 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385a:	429a      	cmp	r2, r3
 800385c:	d807      	bhi.n	800386e <HAL_SPI_TransmitReceive+0x212>
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003864:	d003      	beq.n	800386e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800386c:	e0fb      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1a3      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x164>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d19d      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x164>
 8003884:	e0df      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x23a>
 800388e:	8a7b      	ldrh	r3, [r7, #18]
 8003890:	2b01      	cmp	r3, #1
 8003892:	f040 80cb 	bne.w	8003a2c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d912      	bls.n	80038c6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b02      	subs	r3, #2
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038c4:	e0b2      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	7812      	ldrb	r2, [r2, #0]
 80038d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ec:	e09e      	b.n	8003a2c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d134      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x30a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d02f      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x30a>
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	2b01      	cmp	r3, #1
 800390a:	d12c      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d912      	bls.n	800393c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	881a      	ldrh	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	1c9a      	adds	r2, r3, #2
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b02      	subs	r3, #2
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	87da      	strh	r2, [r3, #62]	; 0x3e
 800393a:	e012      	b.n	8003962 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	7812      	ldrb	r2, [r2, #0]
 8003948:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d148      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x3aa>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d042      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d923      	bls.n	80039d4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	b292      	uxth	r2, r2
 8003998:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	1c9a      	adds	r2, r3, #2
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b02      	subs	r3, #2
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d81f      	bhi.n	8003a02 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	e016      	b.n	8003a02 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f103 020c 	add.w	r2, r3, #12
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a02:	2301      	movs	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a06:	f7fd faed 	bl	8000fe4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d803      	bhi.n	8003a1e <HAL_SPI_TransmitReceive+0x3c2>
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a1c:	d102      	bne.n	8003a24 <HAL_SPI_TransmitReceive+0x3c8>
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a2a:	e01c      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f47f af5b 	bne.w	80038ee <HAL_SPI_TransmitReceive+0x292>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f47f af54 	bne.w	80038ee <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f990 	bl	8003d70 <SPI_EndRxTxTransaction>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	661a      	str	r2, [r3, #96]	; 0x60
 8003a62:	e000      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003a64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3728      	adds	r7, #40	; 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a94:	f7fd faa6 	bl	8000fe4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aa4:	f7fd fa9e 	bl	8000fe4 <HAL_GetTick>
 8003aa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aaa:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	015b      	lsls	r3, r3, #5
 8003ab0:	0d1b      	lsrs	r3, r3, #20
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aba:	e054      	b.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac2:	d050      	beq.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac4:	f7fd fa8e 	bl	8000fe4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d902      	bls.n	8003ada <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d13d      	bne.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ae8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af2:	d111      	bne.n	8003b18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afc:	d004      	beq.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b06:	d107      	bne.n	8003b18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b20:	d10f      	bne.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e017      	b.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d19b      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	2000000c 	.word	0x2000000c

08003b94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ba6:	f7fd fa1d 	bl	8000fe4 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003bb6:	f7fd fa15 	bl	8000fe4 <HAL_GetTick>
 8003bba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bc4:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	00da      	lsls	r2, r3, #3
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	0d1b      	lsrs	r3, r3, #20
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bdc:	e060      	b.n	8003ca0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003be4:	d107      	bne.n	8003bf6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfc:	d050      	beq.n	8003ca0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bfe:	f7fd f9f1 	bl	8000fe4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d902      	bls.n	8003c14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d13d      	bne.n	8003c90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2c:	d111      	bne.n	8003c52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c36:	d004      	beq.n	8003c42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c40:	d107      	bne.n	8003c52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5a:	d10f      	bne.n	8003c7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e010      	b.n	8003cb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d196      	bne.n	8003bde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3728      	adds	r7, #40	; 0x28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	2000000c 	.word	0x2000000c

08003cc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd4:	d111      	bne.n	8003cfa <SPI_EndRxTransaction+0x3a>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cde:	d004      	beq.n	8003cea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce8:	d107      	bne.n	8003cfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2180      	movs	r1, #128	; 0x80
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7ff febd 	bl	8003a84 <SPI_WaitFlagStateUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e023      	b.n	8003d68 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d28:	d11d      	bne.n	8003d66 <SPI_EndRxTransaction+0xa6>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d32:	d004      	beq.n	8003d3e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d113      	bne.n	8003d66 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff ff22 	bl	8003b94 <SPI_WaitFifoStateUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e000      	b.n	8003d68 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff ff03 	bl	8003b94 <SPI_WaitFifoStateUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e027      	b.n	8003df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2200      	movs	r2, #0
 8003dac:	2180      	movs	r1, #128	; 0x80
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff fe68 	bl	8003a84 <SPI_WaitFlagStateUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbe:	f043 0220 	orr.w	r2, r3, #32
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e014      	b.n	8003df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff fedc 	bl	8003b94 <SPI_WaitFifoStateUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e000      	b.n	8003df4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e049      	b.n	8003ea2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fc feaa 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f000 f946 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d001      	beq.n	8003ec4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e02e      	b.n	8003f22 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <HAL_TIM_Base_Start+0x84>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_TIM_Base_Start+0x34>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d115      	bne.n	8003f0c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_TIM_Base_Start+0x88>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d015      	beq.n	8003f1e <HAL_TIM_Base_Start+0x72>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d011      	beq.n	8003f1e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0a:	e008      	b.n	8003f1e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e000      	b.n	8003f20 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	00010007 	.word	0x00010007

08003f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIM_ConfigClockSource+0x1c>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e0b6      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x18a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f90:	d03e      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0xd8>
 8003f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f96:	f200 8087 	bhi.w	80040a8 <HAL_TIM_ConfigClockSource+0x170>
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9e:	f000 8086 	beq.w	80040ae <HAL_TIM_ConfigClockSource+0x176>
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa6:	d87f      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x170>
 8003fa8:	2b70      	cmp	r3, #112	; 0x70
 8003faa:	d01a      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0xaa>
 8003fac:	2b70      	cmp	r3, #112	; 0x70
 8003fae:	d87b      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x170>
 8003fb0:	2b60      	cmp	r3, #96	; 0x60
 8003fb2:	d050      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0x11e>
 8003fb4:	2b60      	cmp	r3, #96	; 0x60
 8003fb6:	d877      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x170>
 8003fb8:	2b50      	cmp	r3, #80	; 0x50
 8003fba:	d03c      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0xfe>
 8003fbc:	2b50      	cmp	r3, #80	; 0x50
 8003fbe:	d873      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x170>
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d058      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x13e>
 8003fc4:	2b40      	cmp	r3, #64	; 0x40
 8003fc6:	d86f      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x170>
 8003fc8:	2b30      	cmp	r3, #48	; 0x30
 8003fca:	d064      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x15e>
 8003fcc:	2b30      	cmp	r3, #48	; 0x30
 8003fce:	d86b      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x170>
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d060      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x15e>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d867      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x170>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d05c      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x15e>
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d05a      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x15e>
 8003fe0:	e062      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6899      	ldr	r1, [r3, #8]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f000 f94b 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	609a      	str	r2, [r3, #8]
      break;
 800400e:	e04f      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6899      	ldr	r1, [r3, #8]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f000 f934 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004032:	609a      	str	r2, [r3, #8]
      break;
 8004034:	e03c      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	461a      	mov	r2, r3
 8004044:	f000 f8a6 	bl	8004194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2150      	movs	r1, #80	; 0x50
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f8ff 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8004054:	e02c      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	461a      	mov	r2, r3
 8004064:	f000 f8c5 	bl	80041f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2160      	movs	r1, #96	; 0x60
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f8ef 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8004074:	e01c      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	461a      	mov	r2, r3
 8004084:	f000 f886 	bl	8004194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2140      	movs	r1, #64	; 0x40
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f8df 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8004094:	e00c      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 f8d6 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 80040a6:	e003      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      break;
 80040ac:	e000      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <TIM_Base_SetConfig+0xbc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0x20>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ea:	d108      	bne.n	80040fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a21      	ldr	r2, [pc, #132]	; (8004188 <TIM_Base_SetConfig+0xbc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00b      	beq.n	800411e <TIM_Base_SetConfig+0x52>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d007      	beq.n	800411e <TIM_Base_SetConfig+0x52>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1e      	ldr	r2, [pc, #120]	; (800418c <TIM_Base_SetConfig+0xc0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <TIM_Base_SetConfig+0x52>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <TIM_Base_SetConfig+0xc4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d108      	bne.n	8004130 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <TIM_Base_SetConfig+0xbc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0xa0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a0b      	ldr	r2, [pc, #44]	; (800418c <TIM_Base_SetConfig+0xc0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0xa0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <TIM_Base_SetConfig+0xc4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d103      	bne.n	8004174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	615a      	str	r2, [r3, #20]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800

08004194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 030a 	bic.w	r3, r3, #10
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b087      	sub	sp, #28
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0210 	bic.w	r2, r3, #16
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	f043 0307 	orr.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e04a      	b.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d108      	bne.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d10c      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4313      	orrs	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40012c00 	.word	0x40012c00

0800438c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004394:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004398:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	4013      	ands	r3, r2
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043c2:	b084      	sub	sp, #16
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	f107 0014 	add.w	r0, r7, #20
 80043d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	b004      	add	sp, #16
 8004402:	4770      	bx	lr

08004404 <__errno>:
 8004404:	4b01      	ldr	r3, [pc, #4]	; (800440c <__errno+0x8>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000018 	.word	0x20000018

08004410 <__libc_init_array>:
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	4d0d      	ldr	r5, [pc, #52]	; (8004448 <__libc_init_array+0x38>)
 8004414:	4c0d      	ldr	r4, [pc, #52]	; (800444c <__libc_init_array+0x3c>)
 8004416:	1b64      	subs	r4, r4, r5
 8004418:	10a4      	asrs	r4, r4, #2
 800441a:	2600      	movs	r6, #0
 800441c:	42a6      	cmp	r6, r4
 800441e:	d109      	bne.n	8004434 <__libc_init_array+0x24>
 8004420:	4d0b      	ldr	r5, [pc, #44]	; (8004450 <__libc_init_array+0x40>)
 8004422:	4c0c      	ldr	r4, [pc, #48]	; (8004454 <__libc_init_array+0x44>)
 8004424:	f000 ffae 	bl	8005384 <_init>
 8004428:	1b64      	subs	r4, r4, r5
 800442a:	10a4      	asrs	r4, r4, #2
 800442c:	2600      	movs	r6, #0
 800442e:	42a6      	cmp	r6, r4
 8004430:	d105      	bne.n	800443e <__libc_init_array+0x2e>
 8004432:	bd70      	pop	{r4, r5, r6, pc}
 8004434:	f855 3b04 	ldr.w	r3, [r5], #4
 8004438:	4798      	blx	r3
 800443a:	3601      	adds	r6, #1
 800443c:	e7ee      	b.n	800441c <__libc_init_array+0xc>
 800443e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004442:	4798      	blx	r3
 8004444:	3601      	adds	r6, #1
 8004446:	e7f2      	b.n	800442e <__libc_init_array+0x1e>
 8004448:	0800554c 	.word	0x0800554c
 800444c:	0800554c 	.word	0x0800554c
 8004450:	0800554c 	.word	0x0800554c
 8004454:	08005550 	.word	0x08005550

08004458 <memset>:
 8004458:	4402      	add	r2, r0
 800445a:	4603      	mov	r3, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	f803 1b01 	strb.w	r1, [r3], #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <iprintf>:
 8004468:	b40f      	push	{r0, r1, r2, r3}
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <iprintf+0x2c>)
 800446c:	b513      	push	{r0, r1, r4, lr}
 800446e:	681c      	ldr	r4, [r3, #0]
 8004470:	b124      	cbz	r4, 800447c <iprintf+0x14>
 8004472:	69a3      	ldr	r3, [r4, #24]
 8004474:	b913      	cbnz	r3, 800447c <iprintf+0x14>
 8004476:	4620      	mov	r0, r4
 8004478:	f000 f866 	bl	8004548 <__sinit>
 800447c:	ab05      	add	r3, sp, #20
 800447e:	9a04      	ldr	r2, [sp, #16]
 8004480:	68a1      	ldr	r1, [r4, #8]
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	4620      	mov	r0, r4
 8004486:	f000 f9bd 	bl	8004804 <_vfiprintf_r>
 800448a:	b002      	add	sp, #8
 800448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004490:	b004      	add	sp, #16
 8004492:	4770      	bx	lr
 8004494:	20000018 	.word	0x20000018

08004498 <std>:
 8004498:	2300      	movs	r3, #0
 800449a:	b510      	push	{r4, lr}
 800449c:	4604      	mov	r4, r0
 800449e:	e9c0 3300 	strd	r3, r3, [r0]
 80044a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044a6:	6083      	str	r3, [r0, #8]
 80044a8:	8181      	strh	r1, [r0, #12]
 80044aa:	6643      	str	r3, [r0, #100]	; 0x64
 80044ac:	81c2      	strh	r2, [r0, #14]
 80044ae:	6183      	str	r3, [r0, #24]
 80044b0:	4619      	mov	r1, r3
 80044b2:	2208      	movs	r2, #8
 80044b4:	305c      	adds	r0, #92	; 0x5c
 80044b6:	f7ff ffcf 	bl	8004458 <memset>
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <std+0x38>)
 80044bc:	6263      	str	r3, [r4, #36]	; 0x24
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <std+0x3c>)
 80044c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <std+0x40>)
 80044c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <std+0x44>)
 80044c8:	6224      	str	r4, [r4, #32]
 80044ca:	6323      	str	r3, [r4, #48]	; 0x30
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	08004dad 	.word	0x08004dad
 80044d4:	08004dcf 	.word	0x08004dcf
 80044d8:	08004e07 	.word	0x08004e07
 80044dc:	08004e2b 	.word	0x08004e2b

080044e0 <_cleanup_r>:
 80044e0:	4901      	ldr	r1, [pc, #4]	; (80044e8 <_cleanup_r+0x8>)
 80044e2:	f000 b8af 	b.w	8004644 <_fwalk_reent>
 80044e6:	bf00      	nop
 80044e8:	08005105 	.word	0x08005105

080044ec <__sfmoreglue>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	2268      	movs	r2, #104	; 0x68
 80044f0:	1e4d      	subs	r5, r1, #1
 80044f2:	4355      	muls	r5, r2
 80044f4:	460e      	mov	r6, r1
 80044f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044fa:	f000 f8e5 	bl	80046c8 <_malloc_r>
 80044fe:	4604      	mov	r4, r0
 8004500:	b140      	cbz	r0, 8004514 <__sfmoreglue+0x28>
 8004502:	2100      	movs	r1, #0
 8004504:	e9c0 1600 	strd	r1, r6, [r0]
 8004508:	300c      	adds	r0, #12
 800450a:	60a0      	str	r0, [r4, #8]
 800450c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004510:	f7ff ffa2 	bl	8004458 <memset>
 8004514:	4620      	mov	r0, r4
 8004516:	bd70      	pop	{r4, r5, r6, pc}

08004518 <__sfp_lock_acquire>:
 8004518:	4801      	ldr	r0, [pc, #4]	; (8004520 <__sfp_lock_acquire+0x8>)
 800451a:	f000 b8b3 	b.w	8004684 <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	20000459 	.word	0x20000459

08004524 <__sfp_lock_release>:
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <__sfp_lock_release+0x8>)
 8004526:	f000 b8ae 	b.w	8004686 <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	20000459 	.word	0x20000459

08004530 <__sinit_lock_acquire>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__sinit_lock_acquire+0x8>)
 8004532:	f000 b8a7 	b.w	8004684 <__retarget_lock_acquire_recursive>
 8004536:	bf00      	nop
 8004538:	2000045a 	.word	0x2000045a

0800453c <__sinit_lock_release>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__sinit_lock_release+0x8>)
 800453e:	f000 b8a2 	b.w	8004686 <__retarget_lock_release_recursive>
 8004542:	bf00      	nop
 8004544:	2000045a 	.word	0x2000045a

08004548 <__sinit>:
 8004548:	b510      	push	{r4, lr}
 800454a:	4604      	mov	r4, r0
 800454c:	f7ff fff0 	bl	8004530 <__sinit_lock_acquire>
 8004550:	69a3      	ldr	r3, [r4, #24]
 8004552:	b11b      	cbz	r3, 800455c <__sinit+0x14>
 8004554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004558:	f7ff bff0 	b.w	800453c <__sinit_lock_release>
 800455c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004560:	6523      	str	r3, [r4, #80]	; 0x50
 8004562:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <__sinit+0x68>)
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <__sinit+0x6c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	62a2      	str	r2, [r4, #40]	; 0x28
 800456a:	42a3      	cmp	r3, r4
 800456c:	bf04      	itt	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	61a3      	streq	r3, [r4, #24]
 8004572:	4620      	mov	r0, r4
 8004574:	f000 f820 	bl	80045b8 <__sfp>
 8004578:	6060      	str	r0, [r4, #4]
 800457a:	4620      	mov	r0, r4
 800457c:	f000 f81c 	bl	80045b8 <__sfp>
 8004580:	60a0      	str	r0, [r4, #8]
 8004582:	4620      	mov	r0, r4
 8004584:	f000 f818 	bl	80045b8 <__sfp>
 8004588:	2200      	movs	r2, #0
 800458a:	60e0      	str	r0, [r4, #12]
 800458c:	2104      	movs	r1, #4
 800458e:	6860      	ldr	r0, [r4, #4]
 8004590:	f7ff ff82 	bl	8004498 <std>
 8004594:	68a0      	ldr	r0, [r4, #8]
 8004596:	2201      	movs	r2, #1
 8004598:	2109      	movs	r1, #9
 800459a:	f7ff ff7d 	bl	8004498 <std>
 800459e:	68e0      	ldr	r0, [r4, #12]
 80045a0:	2202      	movs	r2, #2
 80045a2:	2112      	movs	r1, #18
 80045a4:	f7ff ff78 	bl	8004498 <std>
 80045a8:	2301      	movs	r3, #1
 80045aa:	61a3      	str	r3, [r4, #24]
 80045ac:	e7d2      	b.n	8004554 <__sinit+0xc>
 80045ae:	bf00      	nop
 80045b0:	080054b4 	.word	0x080054b4
 80045b4:	080044e1 	.word	0x080044e1

080045b8 <__sfp>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	4607      	mov	r7, r0
 80045bc:	f7ff ffac 	bl	8004518 <__sfp_lock_acquire>
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <__sfp+0x84>)
 80045c2:	681e      	ldr	r6, [r3, #0]
 80045c4:	69b3      	ldr	r3, [r6, #24]
 80045c6:	b913      	cbnz	r3, 80045ce <__sfp+0x16>
 80045c8:	4630      	mov	r0, r6
 80045ca:	f7ff ffbd 	bl	8004548 <__sinit>
 80045ce:	3648      	adds	r6, #72	; 0x48
 80045d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	d503      	bpl.n	80045e0 <__sfp+0x28>
 80045d8:	6833      	ldr	r3, [r6, #0]
 80045da:	b30b      	cbz	r3, 8004620 <__sfp+0x68>
 80045dc:	6836      	ldr	r6, [r6, #0]
 80045de:	e7f7      	b.n	80045d0 <__sfp+0x18>
 80045e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045e4:	b9d5      	cbnz	r5, 800461c <__sfp+0x64>
 80045e6:	4b16      	ldr	r3, [pc, #88]	; (8004640 <__sfp+0x88>)
 80045e8:	60e3      	str	r3, [r4, #12]
 80045ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045ee:	6665      	str	r5, [r4, #100]	; 0x64
 80045f0:	f000 f847 	bl	8004682 <__retarget_lock_init_recursive>
 80045f4:	f7ff ff96 	bl	8004524 <__sfp_lock_release>
 80045f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004600:	6025      	str	r5, [r4, #0]
 8004602:	61a5      	str	r5, [r4, #24]
 8004604:	2208      	movs	r2, #8
 8004606:	4629      	mov	r1, r5
 8004608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800460c:	f7ff ff24 	bl	8004458 <memset>
 8004610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004618:	4620      	mov	r0, r4
 800461a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800461c:	3468      	adds	r4, #104	; 0x68
 800461e:	e7d9      	b.n	80045d4 <__sfp+0x1c>
 8004620:	2104      	movs	r1, #4
 8004622:	4638      	mov	r0, r7
 8004624:	f7ff ff62 	bl	80044ec <__sfmoreglue>
 8004628:	4604      	mov	r4, r0
 800462a:	6030      	str	r0, [r6, #0]
 800462c:	2800      	cmp	r0, #0
 800462e:	d1d5      	bne.n	80045dc <__sfp+0x24>
 8004630:	f7ff ff78 	bl	8004524 <__sfp_lock_release>
 8004634:	230c      	movs	r3, #12
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	e7ee      	b.n	8004618 <__sfp+0x60>
 800463a:	bf00      	nop
 800463c:	080054b4 	.word	0x080054b4
 8004640:	ffff0001 	.word	0xffff0001

08004644 <_fwalk_reent>:
 8004644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004648:	4606      	mov	r6, r0
 800464a:	4688      	mov	r8, r1
 800464c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004650:	2700      	movs	r7, #0
 8004652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004656:	f1b9 0901 	subs.w	r9, r9, #1
 800465a:	d505      	bpl.n	8004668 <_fwalk_reent+0x24>
 800465c:	6824      	ldr	r4, [r4, #0]
 800465e:	2c00      	cmp	r4, #0
 8004660:	d1f7      	bne.n	8004652 <_fwalk_reent+0xe>
 8004662:	4638      	mov	r0, r7
 8004664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004668:	89ab      	ldrh	r3, [r5, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d907      	bls.n	800467e <_fwalk_reent+0x3a>
 800466e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004672:	3301      	adds	r3, #1
 8004674:	d003      	beq.n	800467e <_fwalk_reent+0x3a>
 8004676:	4629      	mov	r1, r5
 8004678:	4630      	mov	r0, r6
 800467a:	47c0      	blx	r8
 800467c:	4307      	orrs	r7, r0
 800467e:	3568      	adds	r5, #104	; 0x68
 8004680:	e7e9      	b.n	8004656 <_fwalk_reent+0x12>

08004682 <__retarget_lock_init_recursive>:
 8004682:	4770      	bx	lr

08004684 <__retarget_lock_acquire_recursive>:
 8004684:	4770      	bx	lr

08004686 <__retarget_lock_release_recursive>:
 8004686:	4770      	bx	lr

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0e      	ldr	r6, [pc, #56]	; (80046c4 <sbrk_aligned+0x3c>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fb7a 	bl	8004d8c <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 fb75 	bl	8004d8c <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d00a      	beq.n	80046bc <sbrk_aligned+0x34>
 80046a6:	1cc4      	adds	r4, r0, #3
 80046a8:	f024 0403 	bic.w	r4, r4, #3
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d007      	beq.n	80046c0 <sbrk_aligned+0x38>
 80046b0:	1a21      	subs	r1, r4, r0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fb6a 	bl	8004d8c <_sbrk_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d101      	bne.n	80046c0 <sbrk_aligned+0x38>
 80046bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046c0:	4620      	mov	r0, r4
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	20000460 	.word	0x20000460

080046c8 <_malloc_r>:
 80046c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046cc:	1ccd      	adds	r5, r1, #3
 80046ce:	f025 0503 	bic.w	r5, r5, #3
 80046d2:	3508      	adds	r5, #8
 80046d4:	2d0c      	cmp	r5, #12
 80046d6:	bf38      	it	cc
 80046d8:	250c      	movcc	r5, #12
 80046da:	2d00      	cmp	r5, #0
 80046dc:	4607      	mov	r7, r0
 80046de:	db01      	blt.n	80046e4 <_malloc_r+0x1c>
 80046e0:	42a9      	cmp	r1, r5
 80046e2:	d905      	bls.n	80046f0 <_malloc_r+0x28>
 80046e4:	230c      	movs	r3, #12
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	2600      	movs	r6, #0
 80046ea:	4630      	mov	r0, r6
 80046ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f0:	4e2e      	ldr	r6, [pc, #184]	; (80047ac <_malloc_r+0xe4>)
 80046f2:	f000 fdbb 	bl	800526c <__malloc_lock>
 80046f6:	6833      	ldr	r3, [r6, #0]
 80046f8:	461c      	mov	r4, r3
 80046fa:	bb34      	cbnz	r4, 800474a <_malloc_r+0x82>
 80046fc:	4629      	mov	r1, r5
 80046fe:	4638      	mov	r0, r7
 8004700:	f7ff ffc2 	bl	8004688 <sbrk_aligned>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	4604      	mov	r4, r0
 8004708:	d14d      	bne.n	80047a6 <_malloc_r+0xde>
 800470a:	6834      	ldr	r4, [r6, #0]
 800470c:	4626      	mov	r6, r4
 800470e:	2e00      	cmp	r6, #0
 8004710:	d140      	bne.n	8004794 <_malloc_r+0xcc>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	4631      	mov	r1, r6
 8004716:	4638      	mov	r0, r7
 8004718:	eb04 0803 	add.w	r8, r4, r3
 800471c:	f000 fb36 	bl	8004d8c <_sbrk_r>
 8004720:	4580      	cmp	r8, r0
 8004722:	d13a      	bne.n	800479a <_malloc_r+0xd2>
 8004724:	6821      	ldr	r1, [r4, #0]
 8004726:	3503      	adds	r5, #3
 8004728:	1a6d      	subs	r5, r5, r1
 800472a:	f025 0503 	bic.w	r5, r5, #3
 800472e:	3508      	adds	r5, #8
 8004730:	2d0c      	cmp	r5, #12
 8004732:	bf38      	it	cc
 8004734:	250c      	movcc	r5, #12
 8004736:	4629      	mov	r1, r5
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff ffa5 	bl	8004688 <sbrk_aligned>
 800473e:	3001      	adds	r0, #1
 8004740:	d02b      	beq.n	800479a <_malloc_r+0xd2>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	442b      	add	r3, r5
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	e00e      	b.n	8004768 <_malloc_r+0xa0>
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	1b52      	subs	r2, r2, r5
 800474e:	d41e      	bmi.n	800478e <_malloc_r+0xc6>
 8004750:	2a0b      	cmp	r2, #11
 8004752:	d916      	bls.n	8004782 <_malloc_r+0xba>
 8004754:	1961      	adds	r1, r4, r5
 8004756:	42a3      	cmp	r3, r4
 8004758:	6025      	str	r5, [r4, #0]
 800475a:	bf18      	it	ne
 800475c:	6059      	strne	r1, [r3, #4]
 800475e:	6863      	ldr	r3, [r4, #4]
 8004760:	bf08      	it	eq
 8004762:	6031      	streq	r1, [r6, #0]
 8004764:	5162      	str	r2, [r4, r5]
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	4638      	mov	r0, r7
 800476a:	f104 060b 	add.w	r6, r4, #11
 800476e:	f000 fd83 	bl	8005278 <__malloc_unlock>
 8004772:	f026 0607 	bic.w	r6, r6, #7
 8004776:	1d23      	adds	r3, r4, #4
 8004778:	1af2      	subs	r2, r6, r3
 800477a:	d0b6      	beq.n	80046ea <_malloc_r+0x22>
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	50a3      	str	r3, [r4, r2]
 8004780:	e7b3      	b.n	80046ea <_malloc_r+0x22>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	42a3      	cmp	r3, r4
 8004786:	bf0c      	ite	eq
 8004788:	6032      	streq	r2, [r6, #0]
 800478a:	605a      	strne	r2, [r3, #4]
 800478c:	e7ec      	b.n	8004768 <_malloc_r+0xa0>
 800478e:	4623      	mov	r3, r4
 8004790:	6864      	ldr	r4, [r4, #4]
 8004792:	e7b2      	b.n	80046fa <_malloc_r+0x32>
 8004794:	4634      	mov	r4, r6
 8004796:	6876      	ldr	r6, [r6, #4]
 8004798:	e7b9      	b.n	800470e <_malloc_r+0x46>
 800479a:	230c      	movs	r3, #12
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4638      	mov	r0, r7
 80047a0:	f000 fd6a 	bl	8005278 <__malloc_unlock>
 80047a4:	e7a1      	b.n	80046ea <_malloc_r+0x22>
 80047a6:	6025      	str	r5, [r4, #0]
 80047a8:	e7de      	b.n	8004768 <_malloc_r+0xa0>
 80047aa:	bf00      	nop
 80047ac:	2000045c 	.word	0x2000045c

080047b0 <__sfputc_r>:
 80047b0:	6893      	ldr	r3, [r2, #8]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	b410      	push	{r4}
 80047b8:	6093      	str	r3, [r2, #8]
 80047ba:	da08      	bge.n	80047ce <__sfputc_r+0x1e>
 80047bc:	6994      	ldr	r4, [r2, #24]
 80047be:	42a3      	cmp	r3, r4
 80047c0:	db01      	blt.n	80047c6 <__sfputc_r+0x16>
 80047c2:	290a      	cmp	r1, #10
 80047c4:	d103      	bne.n	80047ce <__sfputc_r+0x1e>
 80047c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ca:	f000 bb33 	b.w	8004e34 <__swbuf_r>
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	1c58      	adds	r0, r3, #1
 80047d2:	6010      	str	r0, [r2, #0]
 80047d4:	7019      	strb	r1, [r3, #0]
 80047d6:	4608      	mov	r0, r1
 80047d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047dc:	4770      	bx	lr

080047de <__sfputs_r>:
 80047de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e0:	4606      	mov	r6, r0
 80047e2:	460f      	mov	r7, r1
 80047e4:	4614      	mov	r4, r2
 80047e6:	18d5      	adds	r5, r2, r3
 80047e8:	42ac      	cmp	r4, r5
 80047ea:	d101      	bne.n	80047f0 <__sfputs_r+0x12>
 80047ec:	2000      	movs	r0, #0
 80047ee:	e007      	b.n	8004800 <__sfputs_r+0x22>
 80047f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f4:	463a      	mov	r2, r7
 80047f6:	4630      	mov	r0, r6
 80047f8:	f7ff ffda 	bl	80047b0 <__sfputc_r>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d1f3      	bne.n	80047e8 <__sfputs_r+0xa>
 8004800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004804 <_vfiprintf_r>:
 8004804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004808:	460d      	mov	r5, r1
 800480a:	b09d      	sub	sp, #116	; 0x74
 800480c:	4614      	mov	r4, r2
 800480e:	4698      	mov	r8, r3
 8004810:	4606      	mov	r6, r0
 8004812:	b118      	cbz	r0, 800481c <_vfiprintf_r+0x18>
 8004814:	6983      	ldr	r3, [r0, #24]
 8004816:	b90b      	cbnz	r3, 800481c <_vfiprintf_r+0x18>
 8004818:	f7ff fe96 	bl	8004548 <__sinit>
 800481c:	4b89      	ldr	r3, [pc, #548]	; (8004a44 <_vfiprintf_r+0x240>)
 800481e:	429d      	cmp	r5, r3
 8004820:	d11b      	bne.n	800485a <_vfiprintf_r+0x56>
 8004822:	6875      	ldr	r5, [r6, #4]
 8004824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004826:	07d9      	lsls	r1, r3, #31
 8004828:	d405      	bmi.n	8004836 <_vfiprintf_r+0x32>
 800482a:	89ab      	ldrh	r3, [r5, #12]
 800482c:	059a      	lsls	r2, r3, #22
 800482e:	d402      	bmi.n	8004836 <_vfiprintf_r+0x32>
 8004830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004832:	f7ff ff27 	bl	8004684 <__retarget_lock_acquire_recursive>
 8004836:	89ab      	ldrh	r3, [r5, #12]
 8004838:	071b      	lsls	r3, r3, #28
 800483a:	d501      	bpl.n	8004840 <_vfiprintf_r+0x3c>
 800483c:	692b      	ldr	r3, [r5, #16]
 800483e:	b9eb      	cbnz	r3, 800487c <_vfiprintf_r+0x78>
 8004840:	4629      	mov	r1, r5
 8004842:	4630      	mov	r0, r6
 8004844:	f000 fb5a 	bl	8004efc <__swsetup_r>
 8004848:	b1c0      	cbz	r0, 800487c <_vfiprintf_r+0x78>
 800484a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800484c:	07dc      	lsls	r4, r3, #31
 800484e:	d50e      	bpl.n	800486e <_vfiprintf_r+0x6a>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004854:	b01d      	add	sp, #116	; 0x74
 8004856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485a:	4b7b      	ldr	r3, [pc, #492]	; (8004a48 <_vfiprintf_r+0x244>)
 800485c:	429d      	cmp	r5, r3
 800485e:	d101      	bne.n	8004864 <_vfiprintf_r+0x60>
 8004860:	68b5      	ldr	r5, [r6, #8]
 8004862:	e7df      	b.n	8004824 <_vfiprintf_r+0x20>
 8004864:	4b79      	ldr	r3, [pc, #484]	; (8004a4c <_vfiprintf_r+0x248>)
 8004866:	429d      	cmp	r5, r3
 8004868:	bf08      	it	eq
 800486a:	68f5      	ldreq	r5, [r6, #12]
 800486c:	e7da      	b.n	8004824 <_vfiprintf_r+0x20>
 800486e:	89ab      	ldrh	r3, [r5, #12]
 8004870:	0598      	lsls	r0, r3, #22
 8004872:	d4ed      	bmi.n	8004850 <_vfiprintf_r+0x4c>
 8004874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004876:	f7ff ff06 	bl	8004686 <__retarget_lock_release_recursive>
 800487a:	e7e9      	b.n	8004850 <_vfiprintf_r+0x4c>
 800487c:	2300      	movs	r3, #0
 800487e:	9309      	str	r3, [sp, #36]	; 0x24
 8004880:	2320      	movs	r3, #32
 8004882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004886:	f8cd 800c 	str.w	r8, [sp, #12]
 800488a:	2330      	movs	r3, #48	; 0x30
 800488c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a50 <_vfiprintf_r+0x24c>
 8004890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004894:	f04f 0901 	mov.w	r9, #1
 8004898:	4623      	mov	r3, r4
 800489a:	469a      	mov	sl, r3
 800489c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048a0:	b10a      	cbz	r2, 80048a6 <_vfiprintf_r+0xa2>
 80048a2:	2a25      	cmp	r2, #37	; 0x25
 80048a4:	d1f9      	bne.n	800489a <_vfiprintf_r+0x96>
 80048a6:	ebba 0b04 	subs.w	fp, sl, r4
 80048aa:	d00b      	beq.n	80048c4 <_vfiprintf_r+0xc0>
 80048ac:	465b      	mov	r3, fp
 80048ae:	4622      	mov	r2, r4
 80048b0:	4629      	mov	r1, r5
 80048b2:	4630      	mov	r0, r6
 80048b4:	f7ff ff93 	bl	80047de <__sfputs_r>
 80048b8:	3001      	adds	r0, #1
 80048ba:	f000 80aa 	beq.w	8004a12 <_vfiprintf_r+0x20e>
 80048be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048c0:	445a      	add	r2, fp
 80048c2:	9209      	str	r2, [sp, #36]	; 0x24
 80048c4:	f89a 3000 	ldrb.w	r3, [sl]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a2 	beq.w	8004a12 <_vfiprintf_r+0x20e>
 80048ce:	2300      	movs	r3, #0
 80048d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048d8:	f10a 0a01 	add.w	sl, sl, #1
 80048dc:	9304      	str	r3, [sp, #16]
 80048de:	9307      	str	r3, [sp, #28]
 80048e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048e4:	931a      	str	r3, [sp, #104]	; 0x68
 80048e6:	4654      	mov	r4, sl
 80048e8:	2205      	movs	r2, #5
 80048ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ee:	4858      	ldr	r0, [pc, #352]	; (8004a50 <_vfiprintf_r+0x24c>)
 80048f0:	f7fb fc46 	bl	8000180 <memchr>
 80048f4:	9a04      	ldr	r2, [sp, #16]
 80048f6:	b9d8      	cbnz	r0, 8004930 <_vfiprintf_r+0x12c>
 80048f8:	06d1      	lsls	r1, r2, #27
 80048fa:	bf44      	itt	mi
 80048fc:	2320      	movmi	r3, #32
 80048fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004902:	0713      	lsls	r3, r2, #28
 8004904:	bf44      	itt	mi
 8004906:	232b      	movmi	r3, #43	; 0x2b
 8004908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800490c:	f89a 3000 	ldrb.w	r3, [sl]
 8004910:	2b2a      	cmp	r3, #42	; 0x2a
 8004912:	d015      	beq.n	8004940 <_vfiprintf_r+0x13c>
 8004914:	9a07      	ldr	r2, [sp, #28]
 8004916:	4654      	mov	r4, sl
 8004918:	2000      	movs	r0, #0
 800491a:	f04f 0c0a 	mov.w	ip, #10
 800491e:	4621      	mov	r1, r4
 8004920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004924:	3b30      	subs	r3, #48	; 0x30
 8004926:	2b09      	cmp	r3, #9
 8004928:	d94e      	bls.n	80049c8 <_vfiprintf_r+0x1c4>
 800492a:	b1b0      	cbz	r0, 800495a <_vfiprintf_r+0x156>
 800492c:	9207      	str	r2, [sp, #28]
 800492e:	e014      	b.n	800495a <_vfiprintf_r+0x156>
 8004930:	eba0 0308 	sub.w	r3, r0, r8
 8004934:	fa09 f303 	lsl.w	r3, r9, r3
 8004938:	4313      	orrs	r3, r2
 800493a:	9304      	str	r3, [sp, #16]
 800493c:	46a2      	mov	sl, r4
 800493e:	e7d2      	b.n	80048e6 <_vfiprintf_r+0xe2>
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	1d19      	adds	r1, r3, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	9103      	str	r1, [sp, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	bfbb      	ittet	lt
 800494c:	425b      	neglt	r3, r3
 800494e:	f042 0202 	orrlt.w	r2, r2, #2
 8004952:	9307      	strge	r3, [sp, #28]
 8004954:	9307      	strlt	r3, [sp, #28]
 8004956:	bfb8      	it	lt
 8004958:	9204      	strlt	r2, [sp, #16]
 800495a:	7823      	ldrb	r3, [r4, #0]
 800495c:	2b2e      	cmp	r3, #46	; 0x2e
 800495e:	d10c      	bne.n	800497a <_vfiprintf_r+0x176>
 8004960:	7863      	ldrb	r3, [r4, #1]
 8004962:	2b2a      	cmp	r3, #42	; 0x2a
 8004964:	d135      	bne.n	80049d2 <_vfiprintf_r+0x1ce>
 8004966:	9b03      	ldr	r3, [sp, #12]
 8004968:	1d1a      	adds	r2, r3, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	9203      	str	r2, [sp, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	bfb8      	it	lt
 8004972:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004976:	3402      	adds	r4, #2
 8004978:	9305      	str	r3, [sp, #20]
 800497a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a60 <_vfiprintf_r+0x25c>
 800497e:	7821      	ldrb	r1, [r4, #0]
 8004980:	2203      	movs	r2, #3
 8004982:	4650      	mov	r0, sl
 8004984:	f7fb fbfc 	bl	8000180 <memchr>
 8004988:	b140      	cbz	r0, 800499c <_vfiprintf_r+0x198>
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	eba0 000a 	sub.w	r0, r0, sl
 8004990:	fa03 f000 	lsl.w	r0, r3, r0
 8004994:	9b04      	ldr	r3, [sp, #16]
 8004996:	4303      	orrs	r3, r0
 8004998:	3401      	adds	r4, #1
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a0:	482c      	ldr	r0, [pc, #176]	; (8004a54 <_vfiprintf_r+0x250>)
 80049a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049a6:	2206      	movs	r2, #6
 80049a8:	f7fb fbea 	bl	8000180 <memchr>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d03f      	beq.n	8004a30 <_vfiprintf_r+0x22c>
 80049b0:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <_vfiprintf_r+0x254>)
 80049b2:	bb1b      	cbnz	r3, 80049fc <_vfiprintf_r+0x1f8>
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	3307      	adds	r3, #7
 80049b8:	f023 0307 	bic.w	r3, r3, #7
 80049bc:	3308      	adds	r3, #8
 80049be:	9303      	str	r3, [sp, #12]
 80049c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c2:	443b      	add	r3, r7
 80049c4:	9309      	str	r3, [sp, #36]	; 0x24
 80049c6:	e767      	b.n	8004898 <_vfiprintf_r+0x94>
 80049c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80049cc:	460c      	mov	r4, r1
 80049ce:	2001      	movs	r0, #1
 80049d0:	e7a5      	b.n	800491e <_vfiprintf_r+0x11a>
 80049d2:	2300      	movs	r3, #0
 80049d4:	3401      	adds	r4, #1
 80049d6:	9305      	str	r3, [sp, #20]
 80049d8:	4619      	mov	r1, r3
 80049da:	f04f 0c0a 	mov.w	ip, #10
 80049de:	4620      	mov	r0, r4
 80049e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049e4:	3a30      	subs	r2, #48	; 0x30
 80049e6:	2a09      	cmp	r2, #9
 80049e8:	d903      	bls.n	80049f2 <_vfiprintf_r+0x1ee>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0c5      	beq.n	800497a <_vfiprintf_r+0x176>
 80049ee:	9105      	str	r1, [sp, #20]
 80049f0:	e7c3      	b.n	800497a <_vfiprintf_r+0x176>
 80049f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049f6:	4604      	mov	r4, r0
 80049f8:	2301      	movs	r3, #1
 80049fa:	e7f0      	b.n	80049de <_vfiprintf_r+0x1da>
 80049fc:	ab03      	add	r3, sp, #12
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	462a      	mov	r2, r5
 8004a02:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <_vfiprintf_r+0x258>)
 8004a04:	a904      	add	r1, sp, #16
 8004a06:	4630      	mov	r0, r6
 8004a08:	f3af 8000 	nop.w
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	1c78      	adds	r0, r7, #1
 8004a10:	d1d6      	bne.n	80049c0 <_vfiprintf_r+0x1bc>
 8004a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a14:	07d9      	lsls	r1, r3, #31
 8004a16:	d405      	bmi.n	8004a24 <_vfiprintf_r+0x220>
 8004a18:	89ab      	ldrh	r3, [r5, #12]
 8004a1a:	059a      	lsls	r2, r3, #22
 8004a1c:	d402      	bmi.n	8004a24 <_vfiprintf_r+0x220>
 8004a1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a20:	f7ff fe31 	bl	8004686 <__retarget_lock_release_recursive>
 8004a24:	89ab      	ldrh	r3, [r5, #12]
 8004a26:	065b      	lsls	r3, r3, #25
 8004a28:	f53f af12 	bmi.w	8004850 <_vfiprintf_r+0x4c>
 8004a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a2e:	e711      	b.n	8004854 <_vfiprintf_r+0x50>
 8004a30:	ab03      	add	r3, sp, #12
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	462a      	mov	r2, r5
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <_vfiprintf_r+0x258>)
 8004a38:	a904      	add	r1, sp, #16
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f000 f880 	bl	8004b40 <_printf_i>
 8004a40:	e7e4      	b.n	8004a0c <_vfiprintf_r+0x208>
 8004a42:	bf00      	nop
 8004a44:	080054d8 	.word	0x080054d8
 8004a48:	080054f8 	.word	0x080054f8
 8004a4c:	080054b8 	.word	0x080054b8
 8004a50:	08005518 	.word	0x08005518
 8004a54:	08005522 	.word	0x08005522
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	080047df 	.word	0x080047df
 8004a60:	0800551e 	.word	0x0800551e

08004a64 <_printf_common>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	4616      	mov	r6, r2
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	688a      	ldr	r2, [r1, #8]
 8004a6e:	690b      	ldr	r3, [r1, #16]
 8004a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a74:	4293      	cmp	r3, r2
 8004a76:	bfb8      	it	lt
 8004a78:	4613      	movlt	r3, r2
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a80:	4607      	mov	r7, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	b10a      	cbz	r2, 8004a8a <_printf_common+0x26>
 8004a86:	3301      	adds	r3, #1
 8004a88:	6033      	str	r3, [r6, #0]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	0699      	lsls	r1, r3, #26
 8004a8e:	bf42      	ittt	mi
 8004a90:	6833      	ldrmi	r3, [r6, #0]
 8004a92:	3302      	addmi	r3, #2
 8004a94:	6033      	strmi	r3, [r6, #0]
 8004a96:	6825      	ldr	r5, [r4, #0]
 8004a98:	f015 0506 	ands.w	r5, r5, #6
 8004a9c:	d106      	bne.n	8004aac <_printf_common+0x48>
 8004a9e:	f104 0a19 	add.w	sl, r4, #25
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	6832      	ldr	r2, [r6, #0]
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	dc26      	bgt.n	8004afa <_printf_common+0x96>
 8004aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab0:	1e13      	subs	r3, r2, #0
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	bf18      	it	ne
 8004ab6:	2301      	movne	r3, #1
 8004ab8:	0692      	lsls	r2, r2, #26
 8004aba:	d42b      	bmi.n	8004b14 <_printf_common+0xb0>
 8004abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	47c0      	blx	r8
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d01e      	beq.n	8004b08 <_printf_common+0xa4>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	68e5      	ldr	r5, [r4, #12]
 8004ace:	6832      	ldr	r2, [r6, #0]
 8004ad0:	f003 0306 	and.w	r3, r3, #6
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	bf08      	it	eq
 8004ad8:	1aad      	subeq	r5, r5, r2
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	6922      	ldr	r2, [r4, #16]
 8004ade:	bf0c      	ite	eq
 8004ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae4:	2500      	movne	r5, #0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bfc4      	itt	gt
 8004aea:	1a9b      	subgt	r3, r3, r2
 8004aec:	18ed      	addgt	r5, r5, r3
 8004aee:	2600      	movs	r6, #0
 8004af0:	341a      	adds	r4, #26
 8004af2:	42b5      	cmp	r5, r6
 8004af4:	d11a      	bne.n	8004b2c <_printf_common+0xc8>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e008      	b.n	8004b0c <_printf_common+0xa8>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4652      	mov	r2, sl
 8004afe:	4649      	mov	r1, r9
 8004b00:	4638      	mov	r0, r7
 8004b02:	47c0      	blx	r8
 8004b04:	3001      	adds	r0, #1
 8004b06:	d103      	bne.n	8004b10 <_printf_common+0xac>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	3501      	adds	r5, #1
 8004b12:	e7c6      	b.n	8004aa2 <_printf_common+0x3e>
 8004b14:	18e1      	adds	r1, r4, r3
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	2030      	movs	r0, #48	; 0x30
 8004b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b1e:	4422      	add	r2, r4
 8004b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b28:	3302      	adds	r3, #2
 8004b2a:	e7c7      	b.n	8004abc <_printf_common+0x58>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4622      	mov	r2, r4
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d0e6      	beq.n	8004b08 <_printf_common+0xa4>
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7d9      	b.n	8004af2 <_printf_common+0x8e>
	...

08004b40 <_printf_i>:
 8004b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	7e0f      	ldrb	r7, [r1, #24]
 8004b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b48:	2f78      	cmp	r7, #120	; 0x78
 8004b4a:	4691      	mov	r9, r2
 8004b4c:	4680      	mov	r8, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	469a      	mov	sl, r3
 8004b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b56:	d807      	bhi.n	8004b68 <_printf_i+0x28>
 8004b58:	2f62      	cmp	r7, #98	; 0x62
 8004b5a:	d80a      	bhi.n	8004b72 <_printf_i+0x32>
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	f000 80d8 	beq.w	8004d12 <_printf_i+0x1d2>
 8004b62:	2f58      	cmp	r7, #88	; 0x58
 8004b64:	f000 80a3 	beq.w	8004cae <_printf_i+0x16e>
 8004b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b70:	e03a      	b.n	8004be8 <_printf_i+0xa8>
 8004b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b76:	2b15      	cmp	r3, #21
 8004b78:	d8f6      	bhi.n	8004b68 <_printf_i+0x28>
 8004b7a:	a101      	add	r1, pc, #4	; (adr r1, 8004b80 <_printf_i+0x40>)
 8004b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b80:	08004bd9 	.word	0x08004bd9
 8004b84:	08004bed 	.word	0x08004bed
 8004b88:	08004b69 	.word	0x08004b69
 8004b8c:	08004b69 	.word	0x08004b69
 8004b90:	08004b69 	.word	0x08004b69
 8004b94:	08004b69 	.word	0x08004b69
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004b69 	.word	0x08004b69
 8004ba0:	08004b69 	.word	0x08004b69
 8004ba4:	08004b69 	.word	0x08004b69
 8004ba8:	08004b69 	.word	0x08004b69
 8004bac:	08004cf9 	.word	0x08004cf9
 8004bb0:	08004c1d 	.word	0x08004c1d
 8004bb4:	08004cdb 	.word	0x08004cdb
 8004bb8:	08004b69 	.word	0x08004b69
 8004bbc:	08004b69 	.word	0x08004b69
 8004bc0:	08004d1b 	.word	0x08004d1b
 8004bc4:	08004b69 	.word	0x08004b69
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b69 	.word	0x08004b69
 8004bd0:	08004b69 	.word	0x08004b69
 8004bd4:	08004ce3 	.word	0x08004ce3
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	602a      	str	r2, [r5, #0]
 8004be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0a3      	b.n	8004d34 <_printf_i+0x1f4>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	6829      	ldr	r1, [r5, #0]
 8004bf0:	0606      	lsls	r6, r0, #24
 8004bf2:	f101 0304 	add.w	r3, r1, #4
 8004bf6:	d50a      	bpl.n	8004c0e <_printf_i+0xce>
 8004bf8:	680e      	ldr	r6, [r1, #0]
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	da03      	bge.n	8004c08 <_printf_i+0xc8>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	4276      	negs	r6, r6
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c08:	485e      	ldr	r0, [pc, #376]	; (8004d84 <_printf_i+0x244>)
 8004c0a:	230a      	movs	r3, #10
 8004c0c:	e019      	b.n	8004c42 <_printf_i+0x102>
 8004c0e:	680e      	ldr	r6, [r1, #0]
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c16:	bf18      	it	ne
 8004c18:	b236      	sxthne	r6, r6
 8004c1a:	e7ef      	b.n	8004bfc <_printf_i+0xbc>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	6029      	str	r1, [r5, #0]
 8004c24:	0601      	lsls	r1, r0, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xec>
 8004c28:	681e      	ldr	r6, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0xf2>
 8004c2c:	0646      	lsls	r6, r0, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xe8>
 8004c30:	881e      	ldrh	r6, [r3, #0]
 8004c32:	4854      	ldr	r0, [pc, #336]	; (8004d84 <_printf_i+0x244>)
 8004c34:	2f6f      	cmp	r7, #111	; 0x6f
 8004c36:	bf0c      	ite	eq
 8004c38:	2308      	moveq	r3, #8
 8004c3a:	230a      	movne	r3, #10
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c42:	6865      	ldr	r5, [r4, #4]
 8004c44:	60a5      	str	r5, [r4, #8]
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	bfa2      	ittt	ge
 8004c4a:	6821      	ldrge	r1, [r4, #0]
 8004c4c:	f021 0104 	bicge.w	r1, r1, #4
 8004c50:	6021      	strge	r1, [r4, #0]
 8004c52:	b90e      	cbnz	r6, 8004c58 <_printf_i+0x118>
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	d04d      	beq.n	8004cf4 <_printf_i+0x1b4>
 8004c58:	4615      	mov	r5, r2
 8004c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c62:	5dc7      	ldrb	r7, [r0, r7]
 8004c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c68:	4637      	mov	r7, r6
 8004c6a:	42bb      	cmp	r3, r7
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	d9f4      	bls.n	8004c5a <_printf_i+0x11a>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10b      	bne.n	8004c8c <_printf_i+0x14c>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	07de      	lsls	r6, r3, #31
 8004c78:	d508      	bpl.n	8004c8c <_printf_i+0x14c>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6861      	ldr	r1, [r4, #4]
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	bfde      	ittt	le
 8004c82:	2330      	movle	r3, #48	; 0x30
 8004c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c8c:	1b52      	subs	r2, r2, r5
 8004c8e:	6122      	str	r2, [r4, #16]
 8004c90:	f8cd a000 	str.w	sl, [sp]
 8004c94:	464b      	mov	r3, r9
 8004c96:	aa03      	add	r2, sp, #12
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fee2 	bl	8004a64 <_printf_common>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d14c      	bne.n	8004d3e <_printf_i+0x1fe>
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca8:	b004      	add	sp, #16
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	4835      	ldr	r0, [pc, #212]	; (8004d84 <_printf_i+0x244>)
 8004cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cb4:	6829      	ldr	r1, [r5, #0]
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cbc:	6029      	str	r1, [r5, #0]
 8004cbe:	061d      	lsls	r5, r3, #24
 8004cc0:	d514      	bpl.n	8004cec <_printf_i+0x1ac>
 8004cc2:	07df      	lsls	r7, r3, #31
 8004cc4:	bf44      	itt	mi
 8004cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cca:	6023      	strmi	r3, [r4, #0]
 8004ccc:	b91e      	cbnz	r6, 8004cd6 <_printf_i+0x196>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	f023 0320 	bic.w	r3, r3, #32
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	e7b0      	b.n	8004c3c <_printf_i+0xfc>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f043 0320 	orr.w	r3, r3, #32
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	2378      	movs	r3, #120	; 0x78
 8004ce4:	4828      	ldr	r0, [pc, #160]	; (8004d88 <_printf_i+0x248>)
 8004ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cea:	e7e3      	b.n	8004cb4 <_printf_i+0x174>
 8004cec:	0659      	lsls	r1, r3, #25
 8004cee:	bf48      	it	mi
 8004cf0:	b2b6      	uxthmi	r6, r6
 8004cf2:	e7e6      	b.n	8004cc2 <_printf_i+0x182>
 8004cf4:	4615      	mov	r5, r2
 8004cf6:	e7bb      	b.n	8004c70 <_printf_i+0x130>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	6826      	ldr	r6, [r4, #0]
 8004cfc:	6961      	ldr	r1, [r4, #20]
 8004cfe:	1d18      	adds	r0, r3, #4
 8004d00:	6028      	str	r0, [r5, #0]
 8004d02:	0635      	lsls	r5, r6, #24
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0x1cc>
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <_printf_i+0x1d2>
 8004d0c:	0670      	lsls	r0, r6, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0x1c8>
 8004d10:	8019      	strh	r1, [r3, #0]
 8004d12:	2300      	movs	r3, #0
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	4615      	mov	r5, r2
 8004d18:	e7ba      	b.n	8004c90 <_printf_i+0x150>
 8004d1a:	682b      	ldr	r3, [r5, #0]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	602a      	str	r2, [r5, #0]
 8004d20:	681d      	ldr	r5, [r3, #0]
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4628      	mov	r0, r5
 8004d28:	f7fb fa2a 	bl	8000180 <memchr>
 8004d2c:	b108      	cbz	r0, 8004d32 <_printf_i+0x1f2>
 8004d2e:	1b40      	subs	r0, r0, r5
 8004d30:	6060      	str	r0, [r4, #4]
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	2300      	movs	r3, #0
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3c:	e7a8      	b.n	8004c90 <_printf_i+0x150>
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	462a      	mov	r2, r5
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	47d0      	blx	sl
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d0ab      	beq.n	8004ca4 <_printf_i+0x164>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	079b      	lsls	r3, r3, #30
 8004d50:	d413      	bmi.n	8004d7a <_printf_i+0x23a>
 8004d52:	68e0      	ldr	r0, [r4, #12]
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	4298      	cmp	r0, r3
 8004d58:	bfb8      	it	lt
 8004d5a:	4618      	movlt	r0, r3
 8004d5c:	e7a4      	b.n	8004ca8 <_printf_i+0x168>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4632      	mov	r2, r6
 8004d62:	4649      	mov	r1, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	47d0      	blx	sl
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d09b      	beq.n	8004ca4 <_printf_i+0x164>
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	68e3      	ldr	r3, [r4, #12]
 8004d70:	9903      	ldr	r1, [sp, #12]
 8004d72:	1a5b      	subs	r3, r3, r1
 8004d74:	42ab      	cmp	r3, r5
 8004d76:	dcf2      	bgt.n	8004d5e <_printf_i+0x21e>
 8004d78:	e7eb      	b.n	8004d52 <_printf_i+0x212>
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	f104 0619 	add.w	r6, r4, #25
 8004d80:	e7f5      	b.n	8004d6e <_printf_i+0x22e>
 8004d82:	bf00      	nop
 8004d84:	08005529 	.word	0x08005529
 8004d88:	0800553a 	.word	0x0800553a

08004d8c <_sbrk_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4d06      	ldr	r5, [pc, #24]	; (8004da8 <_sbrk_r+0x1c>)
 8004d90:	2300      	movs	r3, #0
 8004d92:	4604      	mov	r4, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	602b      	str	r3, [r5, #0]
 8004d98:	f7fb fff4 	bl	8000d84 <_sbrk>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_sbrk_r+0x1a>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_sbrk_r+0x1a>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20000464 	.word	0x20000464

08004dac <__sread>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	460c      	mov	r4, r1
 8004db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db4:	f000 fab2 	bl	800531c <_read_r>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	bfab      	itete	ge
 8004dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004dc0:	181b      	addge	r3, r3, r0
 8004dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dc6:	bfac      	ite	ge
 8004dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dca:	81a3      	strhlt	r3, [r4, #12]
 8004dcc:	bd10      	pop	{r4, pc}

08004dce <__swrite>:
 8004dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	461f      	mov	r7, r3
 8004dd4:	898b      	ldrh	r3, [r1, #12]
 8004dd6:	05db      	lsls	r3, r3, #23
 8004dd8:	4605      	mov	r5, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	4616      	mov	r6, r2
 8004dde:	d505      	bpl.n	8004dec <__swrite+0x1e>
 8004de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de4:	2302      	movs	r3, #2
 8004de6:	2200      	movs	r2, #0
 8004de8:	f000 f9c8 	bl	800517c <_lseek_r>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e02:	f000 b869 	b.w	8004ed8 <_write_r>

08004e06 <__sseek>:
 8004e06:	b510      	push	{r4, lr}
 8004e08:	460c      	mov	r4, r1
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 f9b5 	bl	800517c <_lseek_r>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	bf15      	itete	ne
 8004e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e22:	81a3      	strheq	r3, [r4, #12]
 8004e24:	bf18      	it	ne
 8004e26:	81a3      	strhne	r3, [r4, #12]
 8004e28:	bd10      	pop	{r4, pc}

08004e2a <__sclose>:
 8004e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2e:	f000 b8d3 	b.w	8004fd8 <_close_r>
	...

08004e34 <__swbuf_r>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	460e      	mov	r6, r1
 8004e38:	4614      	mov	r4, r2
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	b118      	cbz	r0, 8004e46 <__swbuf_r+0x12>
 8004e3e:	6983      	ldr	r3, [r0, #24]
 8004e40:	b90b      	cbnz	r3, 8004e46 <__swbuf_r+0x12>
 8004e42:	f7ff fb81 	bl	8004548 <__sinit>
 8004e46:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <__swbuf_r+0x98>)
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	d12b      	bne.n	8004ea4 <__swbuf_r+0x70>
 8004e4c:	686c      	ldr	r4, [r5, #4]
 8004e4e:	69a3      	ldr	r3, [r4, #24]
 8004e50:	60a3      	str	r3, [r4, #8]
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	071a      	lsls	r2, r3, #28
 8004e56:	d52f      	bpl.n	8004eb8 <__swbuf_r+0x84>
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	b36b      	cbz	r3, 8004eb8 <__swbuf_r+0x84>
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	6820      	ldr	r0, [r4, #0]
 8004e60:	1ac0      	subs	r0, r0, r3
 8004e62:	6963      	ldr	r3, [r4, #20]
 8004e64:	b2f6      	uxtb	r6, r6
 8004e66:	4283      	cmp	r3, r0
 8004e68:	4637      	mov	r7, r6
 8004e6a:	dc04      	bgt.n	8004e76 <__swbuf_r+0x42>
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f000 f948 	bl	8005104 <_fflush_r>
 8004e74:	bb30      	cbnz	r0, 8004ec4 <__swbuf_r+0x90>
 8004e76:	68a3      	ldr	r3, [r4, #8]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	60a3      	str	r3, [r4, #8]
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	6022      	str	r2, [r4, #0]
 8004e82:	701e      	strb	r6, [r3, #0]
 8004e84:	6963      	ldr	r3, [r4, #20]
 8004e86:	3001      	adds	r0, #1
 8004e88:	4283      	cmp	r3, r0
 8004e8a:	d004      	beq.n	8004e96 <__swbuf_r+0x62>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	07db      	lsls	r3, r3, #31
 8004e90:	d506      	bpl.n	8004ea0 <__swbuf_r+0x6c>
 8004e92:	2e0a      	cmp	r6, #10
 8004e94:	d104      	bne.n	8004ea0 <__swbuf_r+0x6c>
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 f933 	bl	8005104 <_fflush_r>
 8004e9e:	b988      	cbnz	r0, 8004ec4 <__swbuf_r+0x90>
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <__swbuf_r+0x9c>)
 8004ea6:	429c      	cmp	r4, r3
 8004ea8:	d101      	bne.n	8004eae <__swbuf_r+0x7a>
 8004eaa:	68ac      	ldr	r4, [r5, #8]
 8004eac:	e7cf      	b.n	8004e4e <__swbuf_r+0x1a>
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <__swbuf_r+0xa0>)
 8004eb0:	429c      	cmp	r4, r3
 8004eb2:	bf08      	it	eq
 8004eb4:	68ec      	ldreq	r4, [r5, #12]
 8004eb6:	e7ca      	b.n	8004e4e <__swbuf_r+0x1a>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 f81e 	bl	8004efc <__swsetup_r>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d0cb      	beq.n	8004e5c <__swbuf_r+0x28>
 8004ec4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ec8:	e7ea      	b.n	8004ea0 <__swbuf_r+0x6c>
 8004eca:	bf00      	nop
 8004ecc:	080054d8 	.word	0x080054d8
 8004ed0:	080054f8 	.word	0x080054f8
 8004ed4:	080054b8 	.word	0x080054b8

08004ed8 <_write_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d07      	ldr	r5, [pc, #28]	; (8004ef8 <_write_r+0x20>)
 8004edc:	4604      	mov	r4, r0
 8004ede:	4608      	mov	r0, r1
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	602a      	str	r2, [r5, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f7fb fefc 	bl	8000ce4 <_write>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_write_r+0x1e>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_write_r+0x1e>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	20000464 	.word	0x20000464

08004efc <__swsetup_r>:
 8004efc:	4b32      	ldr	r3, [pc, #200]	; (8004fc8 <__swsetup_r+0xcc>)
 8004efe:	b570      	push	{r4, r5, r6, lr}
 8004f00:	681d      	ldr	r5, [r3, #0]
 8004f02:	4606      	mov	r6, r0
 8004f04:	460c      	mov	r4, r1
 8004f06:	b125      	cbz	r5, 8004f12 <__swsetup_r+0x16>
 8004f08:	69ab      	ldr	r3, [r5, #24]
 8004f0a:	b913      	cbnz	r3, 8004f12 <__swsetup_r+0x16>
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f7ff fb1b 	bl	8004548 <__sinit>
 8004f12:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <__swsetup_r+0xd0>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	d10f      	bne.n	8004f38 <__swsetup_r+0x3c>
 8004f18:	686c      	ldr	r4, [r5, #4]
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f20:	0719      	lsls	r1, r3, #28
 8004f22:	d42c      	bmi.n	8004f7e <__swsetup_r+0x82>
 8004f24:	06dd      	lsls	r5, r3, #27
 8004f26:	d411      	bmi.n	8004f4c <__swsetup_r+0x50>
 8004f28:	2309      	movs	r3, #9
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f36:	e03e      	b.n	8004fb6 <__swsetup_r+0xba>
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <__swsetup_r+0xd4>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d101      	bne.n	8004f42 <__swsetup_r+0x46>
 8004f3e:	68ac      	ldr	r4, [r5, #8]
 8004f40:	e7eb      	b.n	8004f1a <__swsetup_r+0x1e>
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <__swsetup_r+0xd8>)
 8004f44:	429c      	cmp	r4, r3
 8004f46:	bf08      	it	eq
 8004f48:	68ec      	ldreq	r4, [r5, #12]
 8004f4a:	e7e6      	b.n	8004f1a <__swsetup_r+0x1e>
 8004f4c:	0758      	lsls	r0, r3, #29
 8004f4e:	d512      	bpl.n	8004f76 <__swsetup_r+0x7a>
 8004f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f52:	b141      	cbz	r1, 8004f66 <__swsetup_r+0x6a>
 8004f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	d002      	beq.n	8004f62 <__swsetup_r+0x66>
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f000 f991 	bl	8005284 <_free_r>
 8004f62:	2300      	movs	r3, #0
 8004f64:	6363      	str	r3, [r4, #52]	; 0x34
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6063      	str	r3, [r4, #4]
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	f043 0308 	orr.w	r3, r3, #8
 8004f7c:	81a3      	strh	r3, [r4, #12]
 8004f7e:	6923      	ldr	r3, [r4, #16]
 8004f80:	b94b      	cbnz	r3, 8004f96 <__swsetup_r+0x9a>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8c:	d003      	beq.n	8004f96 <__swsetup_r+0x9a>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4630      	mov	r0, r6
 8004f92:	f000 f92b 	bl	80051ec <__smakebuf_r>
 8004f96:	89a0      	ldrh	r0, [r4, #12]
 8004f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f9c:	f010 0301 	ands.w	r3, r0, #1
 8004fa0:	d00a      	beq.n	8004fb8 <__swsetup_r+0xbc>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60a3      	str	r3, [r4, #8]
 8004fa6:	6963      	ldr	r3, [r4, #20]
 8004fa8:	425b      	negs	r3, r3
 8004faa:	61a3      	str	r3, [r4, #24]
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	b943      	cbnz	r3, 8004fc2 <__swsetup_r+0xc6>
 8004fb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fb4:	d1ba      	bne.n	8004f2c <__swsetup_r+0x30>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	0781      	lsls	r1, r0, #30
 8004fba:	bf58      	it	pl
 8004fbc:	6963      	ldrpl	r3, [r4, #20]
 8004fbe:	60a3      	str	r3, [r4, #8]
 8004fc0:	e7f4      	b.n	8004fac <__swsetup_r+0xb0>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e7f7      	b.n	8004fb6 <__swsetup_r+0xba>
 8004fc6:	bf00      	nop
 8004fc8:	20000018 	.word	0x20000018
 8004fcc:	080054d8 	.word	0x080054d8
 8004fd0:	080054f8 	.word	0x080054f8
 8004fd4:	080054b8 	.word	0x080054b8

08004fd8 <_close_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d06      	ldr	r5, [pc, #24]	; (8004ff4 <_close_r+0x1c>)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	f7fb fe9a 	bl	8000d1c <_close>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_close_r+0x1a>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_close_r+0x1a>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	20000464 	.word	0x20000464

08004ff8 <__sflush_r>:
 8004ff8:	898a      	ldrh	r2, [r1, #12]
 8004ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffe:	4605      	mov	r5, r0
 8005000:	0710      	lsls	r0, r2, #28
 8005002:	460c      	mov	r4, r1
 8005004:	d458      	bmi.n	80050b8 <__sflush_r+0xc0>
 8005006:	684b      	ldr	r3, [r1, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	dc05      	bgt.n	8005018 <__sflush_r+0x20>
 800500c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	dc02      	bgt.n	8005018 <__sflush_r+0x20>
 8005012:	2000      	movs	r0, #0
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800501a:	2e00      	cmp	r6, #0
 800501c:	d0f9      	beq.n	8005012 <__sflush_r+0x1a>
 800501e:	2300      	movs	r3, #0
 8005020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005024:	682f      	ldr	r7, [r5, #0]
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	d032      	beq.n	8005090 <__sflush_r+0x98>
 800502a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	075a      	lsls	r2, r3, #29
 8005030:	d505      	bpl.n	800503e <__sflush_r+0x46>
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	1ac0      	subs	r0, r0, r3
 8005036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005038:	b10b      	cbz	r3, 800503e <__sflush_r+0x46>
 800503a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800503c:	1ac0      	subs	r0, r0, r3
 800503e:	2300      	movs	r3, #0
 8005040:	4602      	mov	r2, r0
 8005042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005044:	6a21      	ldr	r1, [r4, #32]
 8005046:	4628      	mov	r0, r5
 8005048:	47b0      	blx	r6
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	d106      	bne.n	800505e <__sflush_r+0x66>
 8005050:	6829      	ldr	r1, [r5, #0]
 8005052:	291d      	cmp	r1, #29
 8005054:	d82c      	bhi.n	80050b0 <__sflush_r+0xb8>
 8005056:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <__sflush_r+0x108>)
 8005058:	40ca      	lsrs	r2, r1
 800505a:	07d6      	lsls	r6, r2, #31
 800505c:	d528      	bpl.n	80050b0 <__sflush_r+0xb8>
 800505e:	2200      	movs	r2, #0
 8005060:	6062      	str	r2, [r4, #4]
 8005062:	04d9      	lsls	r1, r3, #19
 8005064:	6922      	ldr	r2, [r4, #16]
 8005066:	6022      	str	r2, [r4, #0]
 8005068:	d504      	bpl.n	8005074 <__sflush_r+0x7c>
 800506a:	1c42      	adds	r2, r0, #1
 800506c:	d101      	bne.n	8005072 <__sflush_r+0x7a>
 800506e:	682b      	ldr	r3, [r5, #0]
 8005070:	b903      	cbnz	r3, 8005074 <__sflush_r+0x7c>
 8005072:	6560      	str	r0, [r4, #84]	; 0x54
 8005074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005076:	602f      	str	r7, [r5, #0]
 8005078:	2900      	cmp	r1, #0
 800507a:	d0ca      	beq.n	8005012 <__sflush_r+0x1a>
 800507c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005080:	4299      	cmp	r1, r3
 8005082:	d002      	beq.n	800508a <__sflush_r+0x92>
 8005084:	4628      	mov	r0, r5
 8005086:	f000 f8fd 	bl	8005284 <_free_r>
 800508a:	2000      	movs	r0, #0
 800508c:	6360      	str	r0, [r4, #52]	; 0x34
 800508e:	e7c1      	b.n	8005014 <__sflush_r+0x1c>
 8005090:	6a21      	ldr	r1, [r4, #32]
 8005092:	2301      	movs	r3, #1
 8005094:	4628      	mov	r0, r5
 8005096:	47b0      	blx	r6
 8005098:	1c41      	adds	r1, r0, #1
 800509a:	d1c7      	bne.n	800502c <__sflush_r+0x34>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0c4      	beq.n	800502c <__sflush_r+0x34>
 80050a2:	2b1d      	cmp	r3, #29
 80050a4:	d001      	beq.n	80050aa <__sflush_r+0xb2>
 80050a6:	2b16      	cmp	r3, #22
 80050a8:	d101      	bne.n	80050ae <__sflush_r+0xb6>
 80050aa:	602f      	str	r7, [r5, #0]
 80050ac:	e7b1      	b.n	8005012 <__sflush_r+0x1a>
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b4:	81a3      	strh	r3, [r4, #12]
 80050b6:	e7ad      	b.n	8005014 <__sflush_r+0x1c>
 80050b8:	690f      	ldr	r7, [r1, #16]
 80050ba:	2f00      	cmp	r7, #0
 80050bc:	d0a9      	beq.n	8005012 <__sflush_r+0x1a>
 80050be:	0793      	lsls	r3, r2, #30
 80050c0:	680e      	ldr	r6, [r1, #0]
 80050c2:	bf08      	it	eq
 80050c4:	694b      	ldreq	r3, [r1, #20]
 80050c6:	600f      	str	r7, [r1, #0]
 80050c8:	bf18      	it	ne
 80050ca:	2300      	movne	r3, #0
 80050cc:	eba6 0807 	sub.w	r8, r6, r7
 80050d0:	608b      	str	r3, [r1, #8]
 80050d2:	f1b8 0f00 	cmp.w	r8, #0
 80050d6:	dd9c      	ble.n	8005012 <__sflush_r+0x1a>
 80050d8:	6a21      	ldr	r1, [r4, #32]
 80050da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050dc:	4643      	mov	r3, r8
 80050de:	463a      	mov	r2, r7
 80050e0:	4628      	mov	r0, r5
 80050e2:	47b0      	blx	r6
 80050e4:	2800      	cmp	r0, #0
 80050e6:	dc06      	bgt.n	80050f6 <__sflush_r+0xfe>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ee:	81a3      	strh	r3, [r4, #12]
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f4:	e78e      	b.n	8005014 <__sflush_r+0x1c>
 80050f6:	4407      	add	r7, r0
 80050f8:	eba8 0800 	sub.w	r8, r8, r0
 80050fc:	e7e9      	b.n	80050d2 <__sflush_r+0xda>
 80050fe:	bf00      	nop
 8005100:	20400001 	.word	0x20400001

08005104 <_fflush_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	4605      	mov	r5, r0
 800510a:	460c      	mov	r4, r1
 800510c:	b913      	cbnz	r3, 8005114 <_fflush_r+0x10>
 800510e:	2500      	movs	r5, #0
 8005110:	4628      	mov	r0, r5
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	b118      	cbz	r0, 800511e <_fflush_r+0x1a>
 8005116:	6983      	ldr	r3, [r0, #24]
 8005118:	b90b      	cbnz	r3, 800511e <_fflush_r+0x1a>
 800511a:	f7ff fa15 	bl	8004548 <__sinit>
 800511e:	4b14      	ldr	r3, [pc, #80]	; (8005170 <_fflush_r+0x6c>)
 8005120:	429c      	cmp	r4, r3
 8005122:	d11b      	bne.n	800515c <_fflush_r+0x58>
 8005124:	686c      	ldr	r4, [r5, #4]
 8005126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ef      	beq.n	800510e <_fflush_r+0xa>
 800512e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005130:	07d0      	lsls	r0, r2, #31
 8005132:	d404      	bmi.n	800513e <_fflush_r+0x3a>
 8005134:	0599      	lsls	r1, r3, #22
 8005136:	d402      	bmi.n	800513e <_fflush_r+0x3a>
 8005138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513a:	f7ff faa3 	bl	8004684 <__retarget_lock_acquire_recursive>
 800513e:	4628      	mov	r0, r5
 8005140:	4621      	mov	r1, r4
 8005142:	f7ff ff59 	bl	8004ff8 <__sflush_r>
 8005146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005148:	07da      	lsls	r2, r3, #31
 800514a:	4605      	mov	r5, r0
 800514c:	d4e0      	bmi.n	8005110 <_fflush_r+0xc>
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	059b      	lsls	r3, r3, #22
 8005152:	d4dd      	bmi.n	8005110 <_fflush_r+0xc>
 8005154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005156:	f7ff fa96 	bl	8004686 <__retarget_lock_release_recursive>
 800515a:	e7d9      	b.n	8005110 <_fflush_r+0xc>
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <_fflush_r+0x70>)
 800515e:	429c      	cmp	r4, r3
 8005160:	d101      	bne.n	8005166 <_fflush_r+0x62>
 8005162:	68ac      	ldr	r4, [r5, #8]
 8005164:	e7df      	b.n	8005126 <_fflush_r+0x22>
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <_fflush_r+0x74>)
 8005168:	429c      	cmp	r4, r3
 800516a:	bf08      	it	eq
 800516c:	68ec      	ldreq	r4, [r5, #12]
 800516e:	e7da      	b.n	8005126 <_fflush_r+0x22>
 8005170:	080054d8 	.word	0x080054d8
 8005174:	080054f8 	.word	0x080054f8
 8005178:	080054b8 	.word	0x080054b8

0800517c <_lseek_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4d07      	ldr	r5, [pc, #28]	; (800519c <_lseek_r+0x20>)
 8005180:	4604      	mov	r4, r0
 8005182:	4608      	mov	r0, r1
 8005184:	4611      	mov	r1, r2
 8005186:	2200      	movs	r2, #0
 8005188:	602a      	str	r2, [r5, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	f7fb fded 	bl	8000d6a <_lseek>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_lseek_r+0x1e>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	b103      	cbz	r3, 800519a <_lseek_r+0x1e>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	20000464 	.word	0x20000464

080051a0 <__swhatbuf_r>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	460e      	mov	r6, r1
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	2900      	cmp	r1, #0
 80051aa:	b096      	sub	sp, #88	; 0x58
 80051ac:	4614      	mov	r4, r2
 80051ae:	461d      	mov	r5, r3
 80051b0:	da08      	bge.n	80051c4 <__swhatbuf_r+0x24>
 80051b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	061a      	lsls	r2, r3, #24
 80051bc:	d410      	bmi.n	80051e0 <__swhatbuf_r+0x40>
 80051be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c2:	e00e      	b.n	80051e2 <__swhatbuf_r+0x42>
 80051c4:	466a      	mov	r2, sp
 80051c6:	f000 f8bb 	bl	8005340 <_fstat_r>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	dbf1      	blt.n	80051b2 <__swhatbuf_r+0x12>
 80051ce:	9a01      	ldr	r2, [sp, #4]
 80051d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051d8:	425a      	negs	r2, r3
 80051da:	415a      	adcs	r2, r3
 80051dc:	602a      	str	r2, [r5, #0]
 80051de:	e7ee      	b.n	80051be <__swhatbuf_r+0x1e>
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	2000      	movs	r0, #0
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	b016      	add	sp, #88	; 0x58
 80051e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080051ec <__smakebuf_r>:
 80051ec:	898b      	ldrh	r3, [r1, #12]
 80051ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051f0:	079d      	lsls	r5, r3, #30
 80051f2:	4606      	mov	r6, r0
 80051f4:	460c      	mov	r4, r1
 80051f6:	d507      	bpl.n	8005208 <__smakebuf_r+0x1c>
 80051f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	6123      	str	r3, [r4, #16]
 8005200:	2301      	movs	r3, #1
 8005202:	6163      	str	r3, [r4, #20]
 8005204:	b002      	add	sp, #8
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	ab01      	add	r3, sp, #4
 800520a:	466a      	mov	r2, sp
 800520c:	f7ff ffc8 	bl	80051a0 <__swhatbuf_r>
 8005210:	9900      	ldr	r1, [sp, #0]
 8005212:	4605      	mov	r5, r0
 8005214:	4630      	mov	r0, r6
 8005216:	f7ff fa57 	bl	80046c8 <_malloc_r>
 800521a:	b948      	cbnz	r0, 8005230 <__smakebuf_r+0x44>
 800521c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005220:	059a      	lsls	r2, r3, #22
 8005222:	d4ef      	bmi.n	8005204 <__smakebuf_r+0x18>
 8005224:	f023 0303 	bic.w	r3, r3, #3
 8005228:	f043 0302 	orr.w	r3, r3, #2
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	e7e3      	b.n	80051f8 <__smakebuf_r+0xc>
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <__smakebuf_r+0x7c>)
 8005232:	62b3      	str	r3, [r6, #40]	; 0x28
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	6020      	str	r0, [r4, #0]
 8005238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	9b00      	ldr	r3, [sp, #0]
 8005240:	6163      	str	r3, [r4, #20]
 8005242:	9b01      	ldr	r3, [sp, #4]
 8005244:	6120      	str	r0, [r4, #16]
 8005246:	b15b      	cbz	r3, 8005260 <__smakebuf_r+0x74>
 8005248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f889 	bl	8005364 <_isatty_r>
 8005252:	b128      	cbz	r0, 8005260 <__smakebuf_r+0x74>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	81a3      	strh	r3, [r4, #12]
 8005260:	89a0      	ldrh	r0, [r4, #12]
 8005262:	4305      	orrs	r5, r0
 8005264:	81a5      	strh	r5, [r4, #12]
 8005266:	e7cd      	b.n	8005204 <__smakebuf_r+0x18>
 8005268:	080044e1 	.word	0x080044e1

0800526c <__malloc_lock>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__malloc_lock+0x8>)
 800526e:	f7ff ba09 	b.w	8004684 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	20000458 	.word	0x20000458

08005278 <__malloc_unlock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_unlock+0x8>)
 800527a:	f7ff ba04 	b.w	8004686 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	20000458 	.word	0x20000458

08005284 <_free_r>:
 8005284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005286:	2900      	cmp	r1, #0
 8005288:	d044      	beq.n	8005314 <_free_r+0x90>
 800528a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528e:	9001      	str	r0, [sp, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f1a1 0404 	sub.w	r4, r1, #4
 8005296:	bfb8      	it	lt
 8005298:	18e4      	addlt	r4, r4, r3
 800529a:	f7ff ffe7 	bl	800526c <__malloc_lock>
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <_free_r+0x94>)
 80052a0:	9801      	ldr	r0, [sp, #4]
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	b933      	cbnz	r3, 80052b4 <_free_r+0x30>
 80052a6:	6063      	str	r3, [r4, #4]
 80052a8:	6014      	str	r4, [r2, #0]
 80052aa:	b003      	add	sp, #12
 80052ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052b0:	f7ff bfe2 	b.w	8005278 <__malloc_unlock>
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	d908      	bls.n	80052ca <_free_r+0x46>
 80052b8:	6825      	ldr	r5, [r4, #0]
 80052ba:	1961      	adds	r1, r4, r5
 80052bc:	428b      	cmp	r3, r1
 80052be:	bf01      	itttt	eq
 80052c0:	6819      	ldreq	r1, [r3, #0]
 80052c2:	685b      	ldreq	r3, [r3, #4]
 80052c4:	1949      	addeq	r1, r1, r5
 80052c6:	6021      	streq	r1, [r4, #0]
 80052c8:	e7ed      	b.n	80052a6 <_free_r+0x22>
 80052ca:	461a      	mov	r2, r3
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	b10b      	cbz	r3, 80052d4 <_free_r+0x50>
 80052d0:	42a3      	cmp	r3, r4
 80052d2:	d9fa      	bls.n	80052ca <_free_r+0x46>
 80052d4:	6811      	ldr	r1, [r2, #0]
 80052d6:	1855      	adds	r5, r2, r1
 80052d8:	42a5      	cmp	r5, r4
 80052da:	d10b      	bne.n	80052f4 <_free_r+0x70>
 80052dc:	6824      	ldr	r4, [r4, #0]
 80052de:	4421      	add	r1, r4
 80052e0:	1854      	adds	r4, r2, r1
 80052e2:	42a3      	cmp	r3, r4
 80052e4:	6011      	str	r1, [r2, #0]
 80052e6:	d1e0      	bne.n	80052aa <_free_r+0x26>
 80052e8:	681c      	ldr	r4, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	6053      	str	r3, [r2, #4]
 80052ee:	4421      	add	r1, r4
 80052f0:	6011      	str	r1, [r2, #0]
 80052f2:	e7da      	b.n	80052aa <_free_r+0x26>
 80052f4:	d902      	bls.n	80052fc <_free_r+0x78>
 80052f6:	230c      	movs	r3, #12
 80052f8:	6003      	str	r3, [r0, #0]
 80052fa:	e7d6      	b.n	80052aa <_free_r+0x26>
 80052fc:	6825      	ldr	r5, [r4, #0]
 80052fe:	1961      	adds	r1, r4, r5
 8005300:	428b      	cmp	r3, r1
 8005302:	bf04      	itt	eq
 8005304:	6819      	ldreq	r1, [r3, #0]
 8005306:	685b      	ldreq	r3, [r3, #4]
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	bf04      	itt	eq
 800530c:	1949      	addeq	r1, r1, r5
 800530e:	6021      	streq	r1, [r4, #0]
 8005310:	6054      	str	r4, [r2, #4]
 8005312:	e7ca      	b.n	80052aa <_free_r+0x26>
 8005314:	b003      	add	sp, #12
 8005316:	bd30      	pop	{r4, r5, pc}
 8005318:	2000045c 	.word	0x2000045c

0800531c <_read_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d07      	ldr	r5, [pc, #28]	; (800533c <_read_r+0x20>)
 8005320:	4604      	mov	r4, r0
 8005322:	4608      	mov	r0, r1
 8005324:	4611      	mov	r1, r2
 8005326:	2200      	movs	r2, #0
 8005328:	602a      	str	r2, [r5, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	f7fb fcbd 	bl	8000caa <_read>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_read_r+0x1e>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_read_r+0x1e>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	20000464 	.word	0x20000464

08005340 <_fstat_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d07      	ldr	r5, [pc, #28]	; (8005360 <_fstat_r+0x20>)
 8005344:	2300      	movs	r3, #0
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	f7fb fcf1 	bl	8000d34 <_fstat>
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	d102      	bne.n	800535c <_fstat_r+0x1c>
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	b103      	cbz	r3, 800535c <_fstat_r+0x1c>
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	bd38      	pop	{r3, r4, r5, pc}
 800535e:	bf00      	nop
 8005360:	20000464 	.word	0x20000464

08005364 <_isatty_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4d06      	ldr	r5, [pc, #24]	; (8005380 <_isatty_r+0x1c>)
 8005368:	2300      	movs	r3, #0
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	f7fb fcf0 	bl	8000d54 <_isatty>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_isatty_r+0x1a>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_isatty_r+0x1a>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	20000464 	.word	0x20000464

08005384 <_init>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr

08005390 <_fini>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr
