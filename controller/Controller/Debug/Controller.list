
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000008  08006700  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000418  2000007c  08006774  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000494  08006774  00020494  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017748  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002e72  00000000  00000000  000377f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a80  00000000  00000000  0003a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001938  00000000  00000000  0003c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002421c  00000000  00000000  0003da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016a44  00000000  00000000  00061c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e8a3f  00000000  00000000  00078680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001610bf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007bdc  00000000  00000000  00161110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08006508 	.word	0x08006508

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08006508 	.word	0x08006508

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000230:	f023 0218 	bic.w	r2, r3, #24
 8000234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000270:	68fb      	ldr	r3, [r7, #12]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <recieve16Bit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool recieve16Bit(uint16_t *read_to){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	if(HAL_SPI_Receive(&hspi1, (uint8_t*)read_to, 2, 10) == HAL_OK) {
 8000288:	230a      	movs	r3, #10
 800028a:	2202      	movs	r2, #2
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <recieve16Bit+0x28>)
 8000290:	f003 fd3e 	bl	8003d10 <HAL_SPI_Receive>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <recieve16Bit+0x1e>
		return true;
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <recieve16Bit+0x20>
	}

	return false;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	200000bc 	.word	0x200000bc

080002ac <getStartInput>:

void getStartInput(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	uint8_t header;
		  HAL_StatusTypeDef receive_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80002b2:	1db9      	adds	r1, r7, #6
 80002b4:	230a      	movs	r3, #10
 80002b6:	2201      	movs	r2, #1
 80002b8:	4825      	ldr	r0, [pc, #148]	; (8000350 <getStartInput+0xa4>)
 80002ba:	f003 fd29 	bl	8003d10 <HAL_SPI_Receive>
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
		  if(receive_status == HAL_OK) {
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d130      	bne.n	800032a <getStartInput+0x7e>
			  switch((Header)header) {
 80002c8:	79bb      	ldrb	r3, [r7, #6]
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	d020      	beq.n	8000310 <getStartInput+0x64>
 80002ce:	2b03      	cmp	r3, #3
 80002d0:	dc32      	bgt.n	8000338 <getStartInput+0x8c>
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d002      	beq.n	80002dc <getStartInput+0x30>
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d00d      	beq.n	80002f6 <getStartInput+0x4a>
 80002da:	e02d      	b.n	8000338 <getStartInput+0x8c>
			  	  case SLEEP_TIME:
			  		  if(!recieve16Bit(&sleep_time)) {
 80002dc:	481d      	ldr	r0, [pc, #116]	; (8000354 <getStartInput+0xa8>)
 80002de:	f7ff ffcf 	bl	8000280 <recieve16Bit>
 80002e2:	4603      	mov	r3, r0
 80002e4:	f083 0301 	eor.w	r3, r3, #1
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d01f      	beq.n	800032e <getStartInput+0x82>
			  			  printf("ERROR COULD NOT RECIEVE SLEEP TIME");
 80002ee:	481a      	ldr	r0, [pc, #104]	; (8000358 <getStartInput+0xac>)
 80002f0:	f005 f9de 	bl	80056b0 <iprintf>
			  		  	  }
					  break;
 80002f4:	e01b      	b.n	800032e <getStartInput+0x82>
				  case RUN_AMOUNT:
					  if(!recieve16Bit(&max_amount_of_runs)){
 80002f6:	4819      	ldr	r0, [pc, #100]	; (800035c <getStartInput+0xb0>)
 80002f8:	f7ff ffc2 	bl	8000280 <recieve16Bit>
 80002fc:	4603      	mov	r3, r0
 80002fe:	f083 0301 	eor.w	r3, r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	2b00      	cmp	r3, #0
 8000306:	d014      	beq.n	8000332 <getStartInput+0x86>
						  printf("ERROR COULD NOT RECIEVE AMOUNT OF RUNS");
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <getStartInput+0xb4>)
 800030a:	f005 f9d1 	bl	80056b0 <iprintf>
					  }

					  break;
 800030e:	e010      	b.n	8000332 <getStartInput+0x86>
				  case TEST_MODE:
					  if(!recieve16Bit(&test_mode)){
 8000310:	4814      	ldr	r0, [pc, #80]	; (8000364 <getStartInput+0xb8>)
 8000312:	f7ff ffb5 	bl	8000280 <recieve16Bit>
 8000316:	4603      	mov	r3, r0
 8000318:	f083 0301 	eor.w	r3, r3, #1
 800031c:	b2db      	uxtb	r3, r3
 800031e:	2b00      	cmp	r3, #0
 8000320:	d009      	beq.n	8000336 <getStartInput+0x8a>
						  printf("TEST MODE COULD NOT BE RECIEVED");
 8000322:	4811      	ldr	r0, [pc, #68]	; (8000368 <getStartInput+0xbc>)
 8000324:	f005 f9c4 	bl	80056b0 <iprintf>
					  }
					  break;
 8000328:	e005      	b.n	8000336 <getStartInput+0x8a>
				  }
		  }
 800032a:	bf00      	nop
 800032c:	e004      	b.n	8000338 <getStartInput+0x8c>
					  break;
 800032e:	bf00      	nop
 8000330:	e002      	b.n	8000338 <getStartInput+0x8c>
					  break;
 8000332:	bf00      	nop
 8000334:	e000      	b.n	8000338 <getStartInput+0x8c>
					  break;
 8000336:	bf00      	nop
		  if(test_mode != 2){
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <getStartInput+0xb8>)
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	2b02      	cmp	r3, #2
 800033e:	d002      	beq.n	8000346 <getStartInput+0x9a>
			  test_input_set = true;
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <getStartInput+0xc0>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
		  }
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200000bc 	.word	0x200000bc
 8000354:	20000476 	.word	0x20000476
 8000358:	08006520 	.word	0x08006520
 800035c:	20000478 	.word	0x20000478
 8000360:	08006544 	.word	0x08006544
 8000364:	20000008 	.word	0x20000008
 8000368:	0800656c 	.word	0x0800656c
 800036c:	2000047a 	.word	0x2000047a

08000370 <calculateTestTimes>:

void calculateTestTimes(struct TimeCapture *data, uint32_t *times){
 8000370:	b480      	push	{r7}
 8000372:	b08b      	sub	sp, #44	; 0x2c
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 800037a:	2300      	movs	r3, #0
 800037c:	627b      	str	r3, [r7, #36]	; 0x24
 800037e:	e024      	b.n	80003ca <calculateTestTimes+0x5a>
		struct TimeCapture *time_ptr = &data[i];
 8000380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	4413      	add	r3, r2
 8000388:	623b      	str	r3, [r7, #32]
		uint32_t *ptr = &times[i];
 800038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	683a      	ldr	r2, [r7, #0]
 8000390:	4413      	add	r3, r2
 8000392:	61fb      	str	r3, [r7, #28]
		uint32_t start_time = time_ptr->startTime;
 8000394:	6a3b      	ldr	r3, [r7, #32]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	61bb      	str	r3, [r7, #24]
		uint32_t end_time = time_ptr->endTime;
 800039a:	6a3b      	ldr	r3, [r7, #32]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	617b      	str	r3, [r7, #20]
		uint32_t full_time = end_time - start_time;
 80003a0:	697a      	ldr	r2, [r7, #20]
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	613b      	str	r3, [r7, #16]
		uint32_t wake_up_time = full_time - (sleep_time * 1000);
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <calculateTestTimes+0x74>)
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	461a      	mov	r2, r3
 80003ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b2:	fb02 f303 	mul.w	r3, r2, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	1a9b      	subs	r3, r3, r2
 80003bc:	60fb      	str	r3, [r7, #12]
		*ptr = wake_up_time;
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 80003c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c6:	3301      	adds	r3, #1
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <calculateTestTimes+0x78>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	461a      	mov	r2, r3
 80003d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d2:	4293      	cmp	r3, r2
 80003d4:	dbd4      	blt.n	8000380 <calculateTestTimes+0x10>
	}
}
 80003d6:	bf00      	nop
 80003d8:	bf00      	nop
 80003da:	372c      	adds	r7, #44	; 0x2c
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	20000476 	.word	0x20000476
 80003e8:	20000478 	.word	0x20000478

080003ec <sendInterrupt>:

void sendInterrupt(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2102      	movs	r1, #2
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <sendInterrupt+0x1c>)
 80003f6:	f001 f9bf 	bl	8001778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2102      	movs	r1, #2
 80003fe:	4802      	ldr	r0, [pc, #8]	; (8000408 <sendInterrupt+0x1c>)
 8000400:	f001 f9ba 	bl	8001778 <HAL_GPIO_WritePin>
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	48000800 	.word	0x48000800

0800040c <testUsingInterrupts>:

void testUsingInterrupts(struct TimeCapture *times){
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	_Bool interrupt_sent = false;
 8000414:	2300      	movs	r3, #0
 8000416:	75fb      	strb	r3, [r7, #23]
	int i = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]
	while(run_test){
 800041c:	e02a      	b.n	8000474 <testUsingInterrupts+0x68>
		struct TimeCapture *time_ptr = &times[i];
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
		if(!interrupt_sent){
 8000428:	7dfb      	ldrb	r3, [r7, #23]
 800042a:	f083 0301 	eor.w	r3, r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b00      	cmp	r3, #0
 8000432:	d012      	beq.n	800045a <testUsingInterrupts+0x4e>
			sendInterrupt();
 8000434:	f7ff ffda 	bl	80003ec <sendInterrupt>
			time_ptr->startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <testUsingInterrupts+0x7c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	601a      	str	r2, [r3, #0]
			interrupt_sent = true;
 8000442:	2301      	movs	r3, #1
 8000444:	75fb      	strb	r3, [r7, #23]
			captures++;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <testUsingInterrupts+0x80>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	4a0f      	ldr	r2, [pc, #60]	; (800048c <testUsingInterrupts+0x80>)
 800044e:	6013      	str	r3, [r2, #0]
		}
		while(!timeBuffReady)
 8000450:	e003      	b.n	800045a <testUsingInterrupts+0x4e>
		time_ptr->endTime = timeBuff.endTime;
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <testUsingInterrupts+0x84>)
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	605a      	str	r2, [r3, #4]
		while(!timeBuffReady)
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <testUsingInterrupts+0x88>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	f083 0301 	eor.w	r3, r3, #1
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d1f4      	bne.n	8000452 <testUsingInterrupts+0x46>
		timeBuffReady = false;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <testUsingInterrupts+0x88>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
		i++;
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	3301      	adds	r3, #1
 8000472:	613b      	str	r3, [r7, #16]
	while(run_test){
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <testUsingInterrupts+0x8c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d1d0      	bne.n	800041e <testUsingInterrupts+0x12>
	}

}
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000120 	.word	0x20000120
 800048c:	20000460 	.word	0x20000460
 8000490:	20000464 	.word	0x20000464
 8000494:	20000474 	.word	0x20000474
 8000498:	20000475 	.word	0x20000475

0800049c <testUsingIntervals>:

void testUsingIntervals(struct TimeCapture *times){
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
	while(run_test){
 80004a8:	e024      	b.n	80004f4 <testUsingIntervals+0x58>
		struct TimeCapture *time_ptr = &times[i];
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	60bb      	str	r3, [r7, #8]
		while(!timeBuffReady);
 80004b4:	bf00      	nop
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <testUsingIntervals+0x70>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	f083 0301 	eor.w	r3, r3, #1
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d1f8      	bne.n	80004b6 <testUsingIntervals+0x1a>
		*time_ptr = timeBuff;
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <testUsingIntervals+0x74>)
 80004c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004cc:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
		lastBuff = timeBuff;
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <testUsingIntervals+0x78>)
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <testUsingIntervals+0x74>)
 80004da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004de:	e883 0003 	stmia.w	r3, {r0, r1}
		timeBuff.startTime = 0;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <testUsingIntervals+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <testUsingIntervals+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <testUsingIntervals+0x70>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
	while(run_test){
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <testUsingIntervals+0x7c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1d6      	bne.n	80004aa <testUsingIntervals+0xe>

	}
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000474 	.word	0x20000474
 8000510:	20000464 	.word	0x20000464
 8000514:	2000046c 	.word	0x2000046c
 8000518:	20000475 	.word	0x20000475

0800051c <addDataToNewFile>:
void addDataToNewFile(uint32_t *data){
 800051c:	b580      	push	{r7, lr}
 800051e:	b09e      	sub	sp, #120	; 0x78
 8000520:	af02      	add	r7, sp, #8
 8000522:	6078      	str	r0, [r7, #4]
	FILE *data_container;
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	char time[30];
	char date[30];
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000524:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000528:	2200      	movs	r2, #0
 800052a:	4619      	mov	r1, r3
 800052c:	4829      	ldr	r0, [pc, #164]	; (80005d4 <addDataToNewFile+0xb8>)
 800052e:	f003 fa73 	bl	8003a18 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000532:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000536:	2200      	movs	r2, #0
 8000538:	4619      	mov	r1, r3
 800053a:	4826      	ldr	r0, [pc, #152]	; (80005d4 <addDataToNewFile+0xb8>)
 800053c:	f003 f962 	bl	8003804 <HAL_RTC_GetTime>
	sprintf(date,"%02d_%02d_%02d_",sDate.Year,sDate.Month, sDate.Date);
 8000540:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000544:	461a      	mov	r2, r3
 8000546:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800054a:	4619      	mov	r1, r3
 800054c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000550:	f107 0008 	add.w	r0, r7, #8
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	460b      	mov	r3, r1
 8000558:	491f      	ldr	r1, [pc, #124]	; (80005d8 <addDataToNewFile+0xbc>)
 800055a:	f005 f8e1 	bl	8005720 <siprintf>
	sprintf(time,"%02d_%02d_%02d.txt", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800055e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000562:	461a      	mov	r2, r3
 8000564:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000568:	4619      	mov	r1, r3
 800056a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800056e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	460b      	mov	r3, r1
 8000576:	4919      	ldr	r1, [pc, #100]	; (80005dc <addDataToNewFile+0xc0>)
 8000578:	f005 f8d2 	bl	8005720 <siprintf>
	char *filename = strcat(date,time);
 800057c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4611      	mov	r1, r2
 8000586:	4618      	mov	r0, r3
 8000588:	f005 f92d 	bl	80057e6 <strcat>
 800058c:	66b8      	str	r0, [r7, #104]	; 0x68
	data_container = fopen(filename, "w");
 800058e:	4914      	ldr	r1, [pc, #80]	; (80005e0 <addDataToNewFile+0xc4>)
 8000590:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000592:	f004 fe27 	bl	80051e4 <fopen>
 8000596:	6678      	str	r0, [r7, #100]	; 0x64
	for(int i = 0; i < max_amount_of_runs; i++){
 8000598:	2300      	movs	r3, #0
 800059a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800059c:	e00d      	b.n	80005ba <addDataToNewFile+0x9e>
		uint32_t *ptr = &data[i];
 800059e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	663b      	str	r3, [r7, #96]	; 0x60
		putw(*ptr, data_container);
 80005a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 f896 	bl	80056e0 <putw>
	for(int i = 0; i < max_amount_of_runs; i++){
 80005b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005b6:	3301      	adds	r3, #1
 80005b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <addDataToNewFile+0xc8>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005c2:	4293      	cmp	r3, r2
 80005c4:	dbeb      	blt.n	800059e <addDataToNewFile+0x82>
	}
	fclose(data_container);
 80005c6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80005c8:	f004 fc18 	bl	8004dfc <fclose>
}
 80005cc:	bf00      	nop
 80005ce:	3770      	adds	r7, #112	; 0x70
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000098 	.word	0x20000098
 80005d8:	0800658c 	.word	0x0800658c
 80005dc:	0800659c 	.word	0x0800659c
 80005e0:	080065b0 	.word	0x080065b0
 80005e4:	20000478 	.word	0x20000478

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005ec:	b08f      	sub	sp, #60	; 0x3c
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fdbc 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f8d6 	bl	80007a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f8:	f000 f94c 	bl	8000894 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 fa76 	bl	8000aec <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000600:	f000 fa4c 	bl	8000a9c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000604:	f000 f9fc 	bl	8000a00 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000608:	f000 f9c0 	bl	800098c <MX_SPI1_Init>
  MX_RTC_Init();
 800060c:	f000 f960 	bl	80008d0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000610:	485f      	ldr	r0, [pc, #380]	; (8000790 <main+0x1a8>)
 8000612:	f004 f8d5 	bl	80047c0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!test_input_set){
 8000616:	4b5f      	ldr	r3, [pc, #380]	; (8000794 <main+0x1ac>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	f083 0301 	eor.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <main+0x42>
	 	  	  getStartInput();
 8000624:	f7ff fe42 	bl	80002ac <getStartInput>
 8000628:	e7f5      	b.n	8000616 <main+0x2e>
	 	  }
	 	  else{
 800062a:	466b      	mov	r3, sp
 800062c:	607b      	str	r3, [r7, #4]
	 		  struct TimeCapture times[max_amount_of_runs];
 800062e:	4b5a      	ldr	r3, [pc, #360]	; (8000798 <main+0x1b0>)
 8000630:	8819      	ldrh	r1, [r3, #0]
 8000632:	460b      	mov	r3, r1
 8000634:	3b01      	subs	r3, #1
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
 8000638:	b28b      	uxth	r3, r1
 800063a:	2200      	movs	r2, #0
 800063c:	461c      	mov	r4, r3
 800063e:	4615      	mov	r5, r2
 8000640:	f04f 0200 	mov.w	r2, #0
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	01ab      	lsls	r3, r5, #6
 800064a:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800064e:	01a2      	lsls	r2, r4, #6
 8000650:	b28b      	uxth	r3, r1
 8000652:	2200      	movs	r2, #0
 8000654:	4698      	mov	r8, r3
 8000656:	4691      	mov	r9, r2
 8000658:	f04f 0200 	mov.w	r2, #0
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000664:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000668:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800066c:	460b      	mov	r3, r1
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	3307      	adds	r3, #7
 8000672:	08db      	lsrs	r3, r3, #3
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	ebad 0d03 	sub.w	sp, sp, r3
 800067a:	466b      	mov	r3, sp
 800067c:	3303      	adds	r3, #3
 800067e:	089b      	lsrs	r3, r3, #2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
	 		  if(test_mode == 1){
 8000684:	4b45      	ldr	r3, [pc, #276]	; (800079c <main+0x1b4>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d13e      	bne.n	800070a <main+0x122>
 800068c:	466b      	mov	r3, sp
 800068e:	461e      	mov	r6, r3
	 			  // RUN TESTS USING ITERRUPTS
	 			  run_test = true;
 8000690:	4a43      	ldr	r2, [pc, #268]	; (80007a0 <main+0x1b8>)
 8000692:	2301      	movs	r3, #1
 8000694:	7013      	strb	r3, [r2, #0]
	 			  testUsingInterrupts(times);
 8000696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000698:	f7ff feb8 	bl	800040c <testUsingInterrupts>
	 			  uint32_t test_times[max_amount_of_runs];
 800069c:	4b3e      	ldr	r3, [pc, #248]	; (8000798 <main+0x1b0>)
 800069e:	8819      	ldrh	r1, [r3, #0]
 80006a0:	460b      	mov	r3, r1
 80006a2:	3b01      	subs	r3, #1
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
 80006a6:	b28b      	uxth	r3, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	61fa      	str	r2, [r7, #28]
 80006ae:	f04f 0200 	mov.w	r2, #0
 80006b2:	f04f 0300 	mov.w	r3, #0
 80006b6:	69f8      	ldr	r0, [r7, #28]
 80006b8:	0143      	lsls	r3, r0, #5
 80006ba:	69b8      	ldr	r0, [r7, #24]
 80006bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80006c0:	69b8      	ldr	r0, [r7, #24]
 80006c2:	0142      	lsls	r2, r0, #5
 80006c4:	b28b      	uxth	r3, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	469a      	mov	sl, r3
 80006ca:	4693      	mov	fp, r2
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80006d8:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80006dc:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80006e0:	460b      	mov	r3, r1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	3307      	adds	r3, #7
 80006e6:	08db      	lsrs	r3, r3, #3
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	ebad 0d03 	sub.w	sp, sp, r3
 80006ee:	466b      	mov	r3, sp
 80006f0:	3303      	adds	r3, #3
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
	 			  calculateTestTimes(times,test_times);
 80006f8:	6a39      	ldr	r1, [r7, #32]
 80006fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006fc:	f7ff fe38 	bl	8000370 <calculateTestTimes>
	 			  addDataToNewFile(test_times);
 8000700:	6a38      	ldr	r0, [r7, #32]
 8000702:	f7ff ff0b 	bl	800051c <addDataToNewFile>
 8000706:	46b5      	mov	sp, r6
 8000708:	e03e      	b.n	8000788 <main+0x1a0>
	 		  }
	 		  else{
 800070a:	466b      	mov	r3, sp
 800070c:	461e      	mov	r6, r3
	 			  run_test = true;
 800070e:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <main+0x1b8>)
 8000710:	2301      	movs	r3, #1
 8000712:	7013      	strb	r3, [r2, #0]
	 			  testUsingIntervals(times);
 8000714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000716:	f7ff fec1 	bl	800049c <testUsingIntervals>
	 			  uint32_t test_times[max_amount_of_runs];
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <main+0x1b0>)
 800071c:	8819      	ldrh	r1, [r3, #0]
 800071e:	460b      	mov	r3, r1
 8000720:	3b01      	subs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000724:	b28b      	uxth	r3, r1
 8000726:	2200      	movs	r2, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	617a      	str	r2, [r7, #20]
 800072c:	f04f 0200 	mov.w	r2, #0
 8000730:	f04f 0300 	mov.w	r3, #0
 8000734:	6978      	ldr	r0, [r7, #20]
 8000736:	0143      	lsls	r3, r0, #5
 8000738:	6938      	ldr	r0, [r7, #16]
 800073a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800073e:	6938      	ldr	r0, [r7, #16]
 8000740:	0142      	lsls	r2, r0, #5
 8000742:	b28b      	uxth	r3, r1
 8000744:	2200      	movs	r2, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	60fa      	str	r2, [r7, #12]
 800074a:	f04f 0200 	mov.w	r2, #0
 800074e:	f04f 0300 	mov.w	r3, #0
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	0143      	lsls	r3, r0, #5
 8000756:	68b8      	ldr	r0, [r7, #8]
 8000758:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800075c:	68b8      	ldr	r0, [r7, #8]
 800075e:	0142      	lsls	r2, r0, #5
 8000760:	460b      	mov	r3, r1
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	3307      	adds	r3, #7
 8000766:	08db      	lsrs	r3, r3, #3
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	ebad 0d03 	sub.w	sp, sp, r3
 800076e:	466b      	mov	r3, sp
 8000770:	3303      	adds	r3, #3
 8000772:	089b      	lsrs	r3, r3, #2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
	 			  calculateTestTimes(times, test_times);
 8000778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800077a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800077c:	f7ff fdf8 	bl	8000370 <calculateTestTimes>
	 			  addDataToNewFile(test_times);
 8000780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000782:	f7ff fecb 	bl	800051c <addDataToNewFile>
 8000786:	46b5      	mov	sp, r6
 8000788:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  if(!test_input_set){
 800078c:	e743      	b.n	8000616 <main+0x2e>
 800078e:	bf00      	nop
 8000790:	20000120 	.word	0x20000120
 8000794:	2000047a 	.word	0x2000047a
 8000798:	20000478 	.word	0x20000478
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000475 	.word	0x20000475

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09a      	sub	sp, #104	; 0x68
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2248      	movs	r2, #72	; 0x48
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fe82 	bl	80054bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007d8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80007da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	f023 0303 	bic.w	r3, r3, #3
 80007e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ee:	f001 f8f7 	bl	80019e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fd14 	bl	8000220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <SystemClock_Config+0xec>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000800:	4a23      	ldr	r2, [pc, #140]	; (8000890 <SystemClock_Config+0xec>)
 8000802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <SystemClock_Config+0xec>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000814:	232f      	movs	r3, #47	; 0x2f
 8000816:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800081e:	2301      	movs	r3, #1
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000830:	2300      	movs	r3, #0
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000834:	2360      	movs	r3, #96	; 0x60
 8000836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000838:	2305      	movs	r3, #5
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083c:	2300      	movs	r3, #0
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fc47 	bl	80020d8 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000850:	f000 f9f4 	bl	8000c3c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000854:	236f      	movs	r3, #111	; 0x6f
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000858:	2302      	movs	r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2101      	movs	r1, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f001 ffa3 	bl	80027c0 <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000880:	f000 f9dc 	bl	8000c3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000884:	f002 fd32 	bl	80032ec <HAL_RCCEx_EnableMSIPLLMode>
}
 8000888:	bf00      	nop
 800088a:	3768      	adds	r7, #104	; 0x68
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58000400 	.word	0x58000400

08000894 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2250      	movs	r2, #80	; 0x50
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 fe0b 	bl	80054bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80008a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008aa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fba2 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80008c2:	f000 f9bb 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80008c6:	bf00      	nop
 80008c8:	3750      	adds	r7, #80	; 0x50
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <MX_RTC_Init+0xb4>)
 80008ea:	4a27      	ldr	r2, [pc, #156]	; (8000988 <MX_RTC_Init+0xb8>)
 80008ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_RTC_Init+0xb4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MX_RTC_Init+0xb4>)
 80008f6:	227f      	movs	r2, #127	; 0x7f
 80008f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_RTC_Init+0xb4>)
 80008fc:	22ff      	movs	r2, #255	; 0xff
 80008fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_RTC_Init+0xb4>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_RTC_Init+0xb4>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_RTC_Init+0xb4>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_RTC_Init+0xb4>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000918:	481a      	ldr	r0, [pc, #104]	; (8000984 <MX_RTC_Init+0xb4>)
 800091a:	f002 fdff 	bl	800351c <HAL_RTC_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f98a 	bl	8000c3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000928:	2300      	movs	r3, #0
 800092a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800092c:	2300      	movs	r3, #0
 800092e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000930:	2300      	movs	r3, #0
 8000932:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2201      	movs	r2, #1
 8000944:	4619      	mov	r1, r3
 8000946:	480f      	ldr	r0, [pc, #60]	; (8000984 <MX_RTC_Init+0xb4>)
 8000948:	f002 fe98 	bl	800367c <HAL_RTC_SetTime>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000952:	f000 f973 	bl	8000c3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000956:	2301      	movs	r3, #1
 8000958:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800095a:	2301      	movs	r3, #1
 800095c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800095e:	2301      	movs	r3, #1
 8000960:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000962:	2300      	movs	r3, #0
 8000964:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000966:	463b      	mov	r3, r7
 8000968:	2201      	movs	r2, #1
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_RTC_Init+0xb4>)
 800096e:	f002 ffa5 	bl	80038bc <HAL_RTC_SetDate>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8000978:	f000 f960 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000098 	.word	0x20000098
 8000988:	40002800 	.word	0x40002800

0800098c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_SPI1_Init+0x6c>)
 8000992:	4a1a      	ldr	r2, [pc, #104]	; (80009fc <MX_SPI1_Init+0x70>)
 8000994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_SPI1_Init+0x6c>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_SPI1_Init+0x6c>)
 800099e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009d2:	2207      	movs	r2, #7
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_SPI1_Init+0x6c>)
 80009e4:	f003 f8f1 	bl	8003bca <HAL_SPI_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80009ee:	f000 f925 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000bc 	.word	0x200000bc
 80009fc:	40013000 	.word	0x40013000

08000a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a28:	221f      	movs	r2, #31
 8000a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a46:	4814      	ldr	r0, [pc, #80]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a48:	f003 fe62 	bl	8004710 <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a52:	f000 f8f3 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a64:	f003 fef2 	bl	800484c <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a6e:	f000 f8e5 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a80:	f004 f8ae 	bl	8004be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a8a:	f000 f8d7 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000120 	.word	0x20000120

08000a9c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <MX_USB_PCD_Init+0x4c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000aa8:	2208      	movs	r2, #8
 8000aaa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000ad2:	f000 fe81 	bl	80017d8 <HAL_PCD_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000adc:	f000 f8ae 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000016c 	.word	0x2000016c
 8000ae8:	40006800 	.word	0x40006800

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b00:	2004      	movs	r0, #4
 8000b02:	f7ff fba3 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fba0 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fb9d 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2008      	movs	r0, #8
 8000b14:	f7ff fb9a 	bl	800024c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b1e:	f000 fe2b 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2123      	movs	r1, #35	; 0x23
 8000b26:	4821      	ldr	r0, [pc, #132]	; (8000bac <MX_GPIO_Init+0xc0>)
 8000b28:	f000 fe26 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_INPUT_Pin */
  GPIO_InitStruct.Pin = TEST_INPUT_Pin;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b36:	2302      	movs	r3, #2
 8000b38:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEST_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b40:	f000 fcaa 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupter_Pin */
  GPIO_InitStruct.Pin = Interrupter_Pin;
 8000b44:	2302      	movs	r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Interrupter_GPIO_Port, &GPIO_InitStruct);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b5a:	f000 fc9d 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b5e:	2323      	movs	r3, #35	; 0x23
 8000b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	480e      	ldr	r0, [pc, #56]	; (8000bac <MX_GPIO_Init+0xc0>)
 8000b74:	f000 fc90 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <MX_GPIO_Init+0xc4>)
 8000b8a:	f000 fc85 	bl	8001498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2006      	movs	r0, #6
 8000b94:	f000 fc4b 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b98:	2006      	movs	r0, #6
 8000b9a:	f000 fc62 	bl	8001462 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	48000800 	.word	0x48000800
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48000c00 	.word	0x48000c00

08000bb4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == TEST_INPUT_Pin){
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d129      	bne.n	8000c18 <HAL_GPIO_EXTI_Callback+0x64>
		if(captures%2 == 0){
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d116      	bne.n	8000bfe <HAL_GPIO_EXTI_Callback+0x4a>
			timeBuff.startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x78>)
 8000bd8:	6013      	str	r3, [r2, #0]
			if(captures  < max_amount_of_runs*2){
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x70>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d905      	bls.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x42>
			captures++;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bf2:	6013      	str	r3, [r2, #0]
		}


	}

}
 8000bf4:	e010      	b.n	8000c18 <HAL_GPIO_EXTI_Callback+0x64>
				run_test = false;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
}
 8000bfc:	e00c      	b.n	8000c18 <HAL_GPIO_EXTI_Callback+0x64>
			timeBuff.endTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x78>)
 8000c06:	6053      	str	r3, [r2, #4]
			timeBuffReady = true;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
			captures++;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x70>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x70>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20000460 	.word	0x20000460
 8000c28:	20000120 	.word	0x20000120
 8000c2c:	20000464 	.word	0x20000464
 8000c30:	20000478 	.word	0x20000478
 8000c34:	20000475 	.word	0x20000475
 8000c38:	20000474 	.word	0x20000474

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>

08000c46 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_AHB2_GRP1_EnableClock>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b096      	sub	sp, #88	; 0x58
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	2250      	movs	r2, #80	; 0x50
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f004 fbcd 	bl	80054bc <memset>
  if(hrtc->Instance==RTC)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_RTC_MspInit+0x54>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d115      	bne.n	8000d58 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d30:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d36:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 f95f 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d48:	f7ff ff78 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d4c:	f7ff ff7b 	bl	8000c46 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d50:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d54:	f7ff ffa1 	bl	8000c9a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3758      	adds	r7, #88	; 0x58
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40002800 	.word	0x40002800

08000d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_SPI_MspInit+0x5c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d117      	bne.n	8000db6 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d8a:	f7ff ff9f 	bl	8000ccc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff ff6a 	bl	8000c68 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000d94:	23b0      	movs	r3, #176	; 0xb0
 8000d96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da4:	2305      	movs	r3, #5
 8000da6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f000 fb71 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40013000 	.word	0x40013000

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd4:	d102      	bne.n	8000ddc <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f7ff ff5f 	bl	8000c9a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09c      	sub	sp, #112	; 0x70
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2250      	movs	r2, #80	; 0x50
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 fb59 	bl	80054bc <memset>
  if(hpcd->Instance==USB)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <HAL_PCD_MspInit+0xa8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d136      	bne.n	8000e82 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e18:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000e1a:	2318      	movs	r3, #24
 8000e1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e22:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000e24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000e2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 f8dd 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000e4c:	f7ff fef6 	bl	8000c3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ff09 	bl	8000c68 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e68:	230a      	movs	r3, #10
 8000e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f000 fb0f 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e7a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e7e:	f7ff ff0c 	bl	8000c9a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3770      	adds	r7, #112	; 0x70
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40006800 	.word	0x40006800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f9a0 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEST_INPUT_Pin);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fc5d 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e00a      	b.n	8000f1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f04:	f3af 8000 	nop.w
 8000f08:	4601      	mov	r1, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	b2ca      	uxtb	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf0      	blt.n	8000f04 <_read+0x12>
  }

  return len;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e009      	b.n	8000f52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	60ba      	str	r2, [r7, #8]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbf1      	blt.n	8000f3e <_write+0x12>
  }
  return len;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_close>:

int _close(int file)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_isatty>:

int _isatty(int file)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_open>:

int _open(char *path, int flags, ...)
{
 8000fcc:	b40e      	push	{r1, r2, r3}
 8000fce:	b480      	push	{r7}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	b003      	add	sp, #12
 8000fe6:	4770      	bx	lr

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f003 fe7e 	bl	8004d18 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20030000 	.word	0x20030000
 8001048:	00000400 	.word	0x00000400
 800104c:	2000047c 	.word	0x2000047c
 8001050:	20000498 	.word	0x20000498

08001054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <SystemInit+0x98>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a23      	ldr	r2, [pc, #140]	; (80010ec <SystemInit+0x98>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001080:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <SystemInit+0x9c>)
 800108e:	4013      	ands	r3, r2
 8001090:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800109e:	f023 0305 	bic.w	r3, r3, #5
 80010a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80010a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80010ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010be:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <SystemInit+0xa0>)
 80010c0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80010c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <SystemInit+0xa0>)
 80010c8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	faf6fefb 	.word	0xfaf6fefb
 80010f4:	22041000 	.word	0x22041000

080010f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80010f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fc:	3304      	adds	r3, #4

080010fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001100:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001102:	d3f9      	bcc.n	80010f8 <CopyDataInit>
  bx lr
 8001104:	4770      	bx	lr

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001106:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001108:	3004      	adds	r0, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800110a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>
  bx lr
 800110e:	4770      	bx	lr

08001110 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001114:	f7ff ff9e 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <LoopForever+0x6>)
 800111a:	490c      	ldr	r1, [pc, #48]	; (800114c <LoopForever+0xa>)
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <LoopForever+0xe>)
 800111e:	2300      	movs	r3, #0
 8001120:	f7ff ffed 	bl	80010fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <LoopForever+0x12>)
 8001126:	490c      	ldr	r1, [pc, #48]	; (8001158 <LoopForever+0x16>)
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <LoopForever+0x1a>)
 800112a:	2300      	movs	r3, #0
 800112c:	f7ff ffe7 	bl	80010fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <LoopForever+0x1e>)
 8001132:	490c      	ldr	r1, [pc, #48]	; (8001164 <LoopForever+0x22>)
 8001134:	2300      	movs	r3, #0
 8001136:	f7ff ffe8 	bl	800110a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800113a:	f004 f931 	bl	80053a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800113e:	f7ff fa53 	bl	80005e8 <main>

08001142 <LoopForever>:

LoopForever:
  b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   r0, =_estack
 8001144:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001148:	20000008 	.word	0x20000008
 800114c:	2000007c 	.word	0x2000007c
 8001150:	08006700 	.word	0x08006700
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001154:	20030000 	.word	0x20030000
 8001158:	20030000 	.word	0x20030000
 800115c:	08006774 	.word	0x08006774
  INIT_BSS _sbss, _ebss
 8001160:	2000007c 	.word	0x2000007c
 8001164:	20000494 	.word	0x20000494

08001168 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_Init+0x3c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_Init+0x3c>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001180:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	2003      	movs	r0, #3
 8001184:	f000 f948 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001188:	2000      	movs	r0, #0
 800118a:	f000 f80f 	bl	80011ac <HAL_InitTick>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	e001      	b.n	800119e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800119a:	f7ff fdb0 	bl	8000cfe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119e:	79fb      	ldrb	r3, [r7, #7]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	58004000 	.word	0x58004000

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_InitTick+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d024      	beq.n	800120a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c0:	f001 fcaa 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_InitTick+0x6c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f950 	bl	800147e <HAL_SYSTICK_Config>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10f      	bne.n	8001204 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	d809      	bhi.n	80011fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ea:	2200      	movs	r2, #0
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f2:	f000 f91c 	bl	800142e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_InitTick+0x70>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e007      	b.n	800120e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e004      	b.n	800120e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e001      	b.n	800120e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000014 	.word	0x20000014
 800121c:	20000010 	.word	0x20000010

08001220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000014 	.word	0x20000014
 8001244:	20000480 	.word	0x20000480

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000480 	.word	0x20000480

08001260 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTickPrio+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000010 	.word	0x20000010

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff29 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff40 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff90 	bl	800136c <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5f 	bl	8001318 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff33 	bl	80012dc <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa4 	bl	80013d4 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a6:	e14c      	b.n	8001742 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	4013      	ands	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 813e 	beq.w	800173c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d005      	beq.n	80014d8 <HAL_GPIO_Init+0x40>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d130      	bne.n	800153a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800150e:	2201      	movs	r2, #1
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	f003 0201 	and.w	r2, r3, #1
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b03      	cmp	r3, #3
 8001544:	d017      	beq.n	8001576 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d123      	bne.n	80015ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	6939      	ldr	r1, [r7, #16]
 80015c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0203 	and.w	r2, r3, #3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8098 	beq.w	800173c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800160c:	4a54      	ldr	r2, [pc, #336]	; (8001760 <HAL_GPIO_Init+0x2c8>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001636:	d019      	beq.n	800166c <HAL_GPIO_Init+0x1d4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <HAL_GPIO_Init+0x2cc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d013      	beq.n	8001668 <HAL_GPIO_Init+0x1d0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a49      	ldr	r2, [pc, #292]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00d      	beq.n	8001664 <HAL_GPIO_Init+0x1cc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a48      	ldr	r2, [pc, #288]	; (800176c <HAL_GPIO_Init+0x2d4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_GPIO_Init+0x1c8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a47      	ldr	r2, [pc, #284]	; (8001770 <HAL_GPIO_Init+0x2d8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_GPIO_Init+0x1c4>
 8001658:	2304      	movs	r3, #4
 800165a:	e008      	b.n	800166e <HAL_GPIO_Init+0x1d6>
 800165c:	2307      	movs	r3, #7
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x1d6>
 8001660:	2303      	movs	r3, #3
 8001662:	e004      	b.n	800166e <HAL_GPIO_Init+0x1d6>
 8001664:	2302      	movs	r3, #2
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x1d6>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_GPIO_Init+0x1d6>
 800166c:	2300      	movs	r3, #0
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4093      	lsls	r3, r2
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800167e:	4938      	ldr	r1, [pc, #224]	; (8001760 <HAL_GPIO_Init+0x2c8>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016b0:	4a30      	ldr	r2, [pc, #192]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016da:	4a26      	ldr	r2, [pc, #152]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 80016e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001706:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 8001710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001734:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	f47f aeab 	bne.w	80014a8 <HAL_GPIO_Init+0x10>
  }
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	40010000 	.word	0x40010000
 8001764:	48000400 	.word	0x48000400
 8001768:	48000800 	.word	0x48000800
 800176c:	48000c00 	.word	0x48000c00
 8001770:	48001000 	.word	0x48001000
 8001774:	58000800 	.word	0x58000800

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001794:	e002      	b.n	800179c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f9f4 	bl	8000bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	58000800 	.word	0x58000800

080017d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af06      	add	r7, sp, #24
 80017de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0cb      	b.n	8001982 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff faf0 	bl	8000de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2203      	movs	r2, #3
 8001808:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f003 fa45 	bl	8004ca0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e040      	b.n	800189e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	3301      	adds	r3, #1
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	3303      	adds	r3, #3
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	3338      	adds	r3, #56	; 0x38
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	333c      	adds	r3, #60	; 0x3c
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	3340      	adds	r3, #64	; 0x40
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	3301      	adds	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3b9      	bcc.n	800181c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e044      	b.n	8001938 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	3301      	adds	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3b5      	bcc.n	80018ae <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	687e      	ldr	r6, [r7, #4]
 800194a:	466d      	mov	r5, sp
 800194c:	f106 0410 	add.w	r4, r6, #16
 8001950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	602b      	str	r3, [r5, #0]
 8001958:	1d33      	adds	r3, r6, #4
 800195a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800195c:	6838      	ldr	r0, [r7, #0]
 800195e:	f003 f9ba 	bl	8004cd6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f805 	bl	800198a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800198a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	58000400 	.word	0x58000400

08001a00 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	58000400 	.word	0x58000400

08001a1c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2e:	d101      	bne.n	8001a34 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_RCC_HSE_Enable>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_RCC_HSE_Disable>:
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_RCC_HSE_IsReady>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a8e:	d101      	bne.n	8001a94 <LL_RCC_HSE_IsReady+0x18>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_RCC_HSE_IsReady+0x1a>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_RCC_HSI_Enable>:
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_HSI_Disable>:
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_HSI_IsReady>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aee:	d101      	bne.n	8001af4 <LL_RCC_HSI_IsReady+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_RCC_HSI_IsReady+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	061b      	lsls	r3, r3, #24
 8001b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_RCC_HSI48_Enable>:
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_RCC_HSI48_Disable>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_HSI48_IsReady>:
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d101      	bne.n	8001b86 <LL_RCC_HSI48_IsReady+0x18>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <LL_RCC_HSI48_IsReady+0x1a>
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_LSE_Enable>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_RCC_LSE_Disable>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_LSE_EnableBypass>:
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_RCC_LSE_DisableBypass>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_RCC_LSE_IsReady>:
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d101      	bne.n	8001c32 <LL_RCC_LSE_IsReady+0x18>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_RCC_LSE_IsReady+0x1a>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_RCC_LSI1_Enable>:
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_RCC_LSI1_Disable>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_RCC_LSI1_IsReady>:
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d101      	bne.n	8001c9a <LL_RCC_LSI1_IsReady+0x18>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_RCC_LSI1_IsReady+0x1a>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_LSI2_Enable>:
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_RCC_LSI2_Disable>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_LSI2_IsReady>:
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d101      	bne.n	8001d02 <LL_RCC_LSI2_IsReady+0x18>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <LL_RCC_LSI2_IsReady+0x1a>
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_RCC_LSI2_SetTrimming>:
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_RCC_MSI_Enable>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_RCC_MSI_Disable>:
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6013      	str	r3, [r2, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_RCC_MSI_IsReady>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d101      	bne.n	8001d8e <LL_RCC_MSI_IsReady+0x16>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_RCC_MSI_IsReady+0x18>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_RCC_MSI_SetRange>:
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_RCC_MSI_GetRange>:
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2bb0      	cmp	r3, #176	; 0xb0
 8001dd8:	d901      	bls.n	8001dde <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001dda:	23b0      	movs	r3, #176	; 0xb0
 8001ddc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001dde:	687b      	ldr	r3, [r7, #4]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_RCC_MSI_SetCalibTrimming>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_RCC_SetSysClkSource>:
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 0203 	bic.w	r2, r3, #3
 8001e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_GetSysClkSource>:
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_SetAHBPrescaler>:
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_C2_RCC_SetAHBPrescaler>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_RCC_SetAHB4Prescaler>:
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eba:	f023 020f 	bic.w	r2, r3, #15
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_RCC_SetAPB1Prescaler>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_SetAPB2Prescaler>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_GetAHBPrescaler>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_RCC_GetAHB4Prescaler>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	6013      	str	r3, [r2, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001faa:	d101      	bne.n	8001fb0 <LL_RCC_PLL_IsReady+0x18>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <LL_RCC_PLL_IsReady+0x1a>
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0303 	and.w	r3, r3, #3
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002030:	d101      	bne.n	8002036 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002056:	d101      	bne.n	800205c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800206c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002070:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207c:	d101      	bne.n	8002082 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020a0:	d101      	bne.n	80020a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020c4:	d101      	bne.n	80020ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b08d      	sub	sp, #52	; 0x34
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e363      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 808d 	beq.w	8002212 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f8:	f7ff fea1 	bl	8001e3e <LL_RCC_GetSysClkSource>
 80020fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fe:	f7ff ff82 	bl	8002006 <LL_RCC_PLL_GetMainSource>
 8002102:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x3e>
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	2b0c      	cmp	r3, #12
 800210e:	d147      	bne.n	80021a0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	2b01      	cmp	r3, #1
 8002114:	d144      	bne.n	80021a0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e347      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002126:	f7ff fe4c 	bl	8001dc2 <LL_RCC_MSI_GetRange>
 800212a:	4603      	mov	r3, r0
 800212c:	429c      	cmp	r4, r3
 800212e:	d914      	bls.n	800215a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fd03 	bl	8002b40 <RCC_SetFlashLatencyFromMSIRange>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e336      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fe26 	bl	8001d9a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fe4a 	bl	8001dec <LL_RCC_MSI_SetCalibTrimming>
 8002158:	e013      	b.n	8002182 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fe1b 	bl	8001d9a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fe3f 	bl	8001dec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fce4 	bl	8002b40 <RCC_SetFlashLatencyFromMSIRange>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e317      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002182:	f000 fcc9 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002186:	4603      	mov	r3, r0
 8002188:	4aa4      	ldr	r2, [pc, #656]	; (800241c <HAL_RCC_OscConfig+0x344>)
 800218a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800218c:	4ba4      	ldr	r3, [pc, #656]	; (8002420 <HAL_RCC_OscConfig+0x348>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff f80b 	bl	80011ac <HAL_InitTick>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d039      	beq.n	8002210 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e308      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01e      	beq.n	80021e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a8:	f7ff fdc8 	bl	8001d3c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ac:	f7ff f84c 	bl	8001248 <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b4:	f7ff f848 	bl	8001248 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e2f5      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80021c6:	f7ff fdd7 	bl	8001d78 <LL_RCC_MSI_IsReady>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f1      	beq.n	80021b4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fde0 	bl	8001d9a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fe04 	bl	8001dec <LL_RCC_MSI_SetCalibTrimming>
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021e6:	f7ff fdb8 	bl	8001d5a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f82d 	bl	8001248 <HAL_GetTick>
 80021ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f2:	f7ff f829 	bl	8001248 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e2d6      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002204:	f7ff fdb8 	bl	8001d78 <LL_RCC_MSI_IsReady>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f1      	bne.n	80021f2 <HAL_RCC_OscConfig+0x11a>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002210:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d047      	beq.n	80022ae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	f7ff fe0e 	bl	8001e3e <LL_RCC_GetSysClkSource>
 8002222:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002224:	f7ff feef 	bl	8002006 <LL_RCC_PLL_GetMainSource>
 8002228:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d005      	beq.n	800223c <HAL_RCC_OscConfig+0x164>
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d108      	bne.n	8002248 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d105      	bne.n	8002248 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d134      	bne.n	80022ae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e2b4      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d102      	bne.n	8002258 <HAL_RCC_OscConfig+0x180>
 8002252:	f7ff fbf5 	bl	8001a40 <LL_RCC_HSE_Enable>
 8002256:	e001      	b.n	800225c <HAL_RCC_OscConfig+0x184>
 8002258:	f7ff fc01 	bl	8001a5e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fff0 	bl	8001248 <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe ffec 	bl	8001248 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e299      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800227e:	f7ff fbfd 	bl	8001a7c <LL_RCC_HSE_IsReady>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f1      	beq.n	800226c <HAL_RCC_OscConfig+0x194>
 8002288:	e011      	b.n	80022ae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe ffdd 	bl	8001248 <HAL_GetTick>
 800228e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002292:	f7fe ffd9 	bl	8001248 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e286      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80022a4:	f7ff fbea 	bl	8001a7c <LL_RCC_HSE_IsReady>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f1      	bne.n	8002292 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d04c      	beq.n	8002354 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	f7ff fdc0 	bl	8001e3e <LL_RCC_GetSysClkSource>
 80022be:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c0:	f7ff fea1 	bl	8002006 <LL_RCC_PLL_GetMainSource>
 80022c4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_OscConfig+0x200>
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d10e      	bne.n	80022f0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d10b      	bne.n	80022f0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e266      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fc09 	bl	8001b00 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022ee:	e031      	b.n	8002354 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d019      	beq.n	800232c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f8:	f7ff fbd2 	bl	8001aa0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe ffa4 	bl	8001248 <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe ffa0 	bl	8001248 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e24d      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002316:	f7ff fbe1 	bl	8001adc <LL_RCC_HSI_IsReady>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f1      	beq.n	8002304 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fbeb 	bl	8001b00 <LL_RCC_HSI_SetCalibTrimming>
 800232a:	e013      	b.n	8002354 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232c:	f7ff fbc7 	bl	8001abe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe ff8a 	bl	8001248 <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002338:	f7fe ff86 	bl	8001248 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e233      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800234a:	f7ff fbc7 	bl	8001adc <LL_RCC_HSI_IsReady>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f1      	bne.n	8002338 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80a3 	beq.w	80024b4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d076      	beq.n	8002464 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d046      	beq.n	8002410 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002382:	f7ff fc7e 	bl	8001c82 <LL_RCC_LSI1_IsReady>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d113      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800238c:	f7ff fc57 	bl	8001c3e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002390:	f7fe ff5a 	bl	8001248 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002398:	f7fe ff56 	bl	8001248 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e203      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80023aa:	f7ff fc6a 	bl	8001c82 <LL_RCC_LSI1_IsReady>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f1      	beq.n	8002398 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80023b4:	f7ff fc77 	bl	8001ca6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff46 	bl	8001248 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023c0:	f7fe ff42 	bl	8001248 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1ef      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80023d2:	f7ff fc8a 	bl	8001cea <LL_RCC_LSI2_IsReady>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f1      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fc94 	bl	8001d0e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80023e6:	f7ff fc3b 	bl	8001c60 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe ff2d 	bl	8001248 <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023f2:	f7fe ff29 	bl	8001248 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e1d6      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002404:	f7ff fc3d 	bl	8001c82 <LL_RCC_LSI1_IsReady>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f1      	bne.n	80023f2 <HAL_RCC_OscConfig+0x31a>
 800240e:	e051      	b.n	80024b4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002410:	f7ff fc15 	bl	8001c3e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe ff18 	bl	8001248 <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800241a:	e00c      	b.n	8002436 <HAL_RCC_OscConfig+0x35e>
 800241c:	2000000c 	.word	0x2000000c
 8002420:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002424:	f7fe ff10 	bl	8001248 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1bd      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002436:	f7ff fc24 	bl	8001c82 <LL_RCC_LSI1_IsReady>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f1      	beq.n	8002424 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002440:	f7ff fc42 	bl	8001cc8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002446:	f7fe feff 	bl	8001248 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b03      	cmp	r3, #3
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1ac      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002458:	f7ff fc47 	bl	8001cea <LL_RCC_LSI2_IsReady>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f1      	bne.n	8002446 <HAL_RCC_OscConfig+0x36e>
 8002462:	e027      	b.n	80024b4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002464:	f7ff fc30 	bl	8001cc8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7fe feee 	bl	8001248 <HAL_GetTick>
 800246c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002470:	f7fe feea 	bl	8001248 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b03      	cmp	r3, #3
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e197      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002482:	f7ff fc32 	bl	8001cea <LL_RCC_LSI2_IsReady>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f1      	bne.n	8002470 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800248c:	f7ff fbe8 	bl	8001c60 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7fe feda 	bl	8001248 <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002498:	f7fe fed6 	bl	8001248 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e183      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80024aa:	f7ff fbea 	bl	8001c82 <LL_RCC_LSI1_IsReady>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f1      	bne.n	8002498 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d05b      	beq.n	8002578 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4ba7      	ldr	r3, [pc, #668]	; (8002760 <HAL_RCC_OscConfig+0x688>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d114      	bne.n	80024f6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80024cc:	f7ff fa88 	bl	80019e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d0:	f7fe feba 	bl	8001248 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d8:	f7fe feb6 	bl	8001248 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e163      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ea:	4b9d      	ldr	r3, [pc, #628]	; (8002760 <HAL_RCC_OscConfig+0x688>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_OscConfig+0x42c>
 80024fe:	f7ff fb48 	bl	8001b92 <LL_RCC_LSE_Enable>
 8002502:	e00c      	b.n	800251e <HAL_RCC_OscConfig+0x446>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d104      	bne.n	8002516 <HAL_RCC_OscConfig+0x43e>
 800250c:	f7ff fb63 	bl	8001bd6 <LL_RCC_LSE_EnableBypass>
 8002510:	f7ff fb3f 	bl	8001b92 <LL_RCC_LSE_Enable>
 8002514:	e003      	b.n	800251e <HAL_RCC_OscConfig+0x446>
 8002516:	f7ff fb4d 	bl	8001bb4 <LL_RCC_LSE_Disable>
 800251a:	f7ff fb6d 	bl	8001bf8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d014      	beq.n	8002550 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fe fe8f 	bl	8001248 <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fe8b 	bl	8001248 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e136      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002544:	f7ff fb69 	bl	8001c1a <LL_RCC_LSE_IsReady>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0ef      	beq.n	800252e <HAL_RCC_OscConfig+0x456>
 800254e:	e013      	b.n	8002578 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fe7a 	bl	8001248 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe fe76 	bl	8001248 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e121      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800256e:	f7ff fb54 	bl	8001c1a <LL_RCC_LSE_IsReady>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ef      	bne.n	8002558 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d02c      	beq.n	80025de <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d014      	beq.n	80025b6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800258c:	f7ff facd 	bl	8001b2a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe fe5a 	bl	8001248 <HAL_GetTick>
 8002594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002598:	f7fe fe56 	bl	8001248 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e103      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80025aa:	f7ff fae0 	bl	8001b6e <LL_RCC_HSI48_IsReady>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f1      	beq.n	8002598 <HAL_RCC_OscConfig+0x4c0>
 80025b4:	e013      	b.n	80025de <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025b6:	f7ff fac9 	bl	8001b4c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7fe fe45 	bl	8001248 <HAL_GetTick>
 80025be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c2:	f7fe fe41 	bl	8001248 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e0ee      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80025d4:	f7ff facb 	bl	8001b6e <LL_RCC_HSI48_IsReady>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f1      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80e4 	beq.w	80027b0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	f7ff fc29 	bl	8001e3e <LL_RCC_GetSysClkSource>
 80025ec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	f040 80b4 	bne.w	8002768 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	429a      	cmp	r2, r3
 800260c:	d123      	bne.n	8002656 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d11c      	bne.n	8002656 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d114      	bne.n	8002656 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d10d      	bne.n	8002656 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d05d      	beq.n	8002712 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d058      	beq.n	800270e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0a1      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800266e:	f7ff fc84 	bl	8001f7a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002672:	f7fe fde9 	bl	8001248 <HAL_GetTick>
 8002676:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7fe fde5 	bl	8001248 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e092      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ef      	bne.n	800267a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCC_OscConfig+0x68c>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026ac:	4311      	orrs	r1, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026b2:	0212      	lsls	r2, r2, #8
 80026b4:	4311      	orrs	r1, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026c0:	4311      	orrs	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026c6:	430a      	orrs	r2, r1
 80026c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026d0:	f7ff fc44 	bl	8001f5c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026e4:	f7fe fdb0 	bl	8001248 <HAL_GetTick>
 80026e8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe fdac 	bl	8001248 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e059      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ef      	beq.n	80026ec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800270c:	e050      	b.n	80027b0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e04f      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d147      	bne.n	80027b0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002720:	f7ff fc1c 	bl	8001f5c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002732:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002734:	f7fe fd88 	bl	8001248 <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe fd84 	bl	8001248 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e031      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <HAL_RCC_OscConfig+0x664>
 800275c:	e028      	b.n	80027b0 <HAL_RCC_OscConfig+0x6d8>
 800275e:	bf00      	nop
 8002760:	58000400 	.word	0x58000400
 8002764:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d01e      	beq.n	80027ac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	f7ff fc04 	bl	8001f7a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe fd69 	bl	8001248 <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe fd65 	bl	8001248 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e012      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ef      	bne.n	800277a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_OscConfig+0x6e4>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
 80027aa:	e001      	b.n	80027b0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3734      	adds	r7, #52	; 0x34
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd90      	pop	{r4, r7, pc}
 80027ba:	bf00      	nop
 80027bc:	eefefffc 	.word	0xeefefffc

080027c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e12d      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b98      	ldr	r3, [pc, #608]	; (8002a38 <HAL_RCC_ClockConfig+0x278>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d91b      	bls.n	800281a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b95      	ldr	r3, [pc, #596]	; (8002a38 <HAL_RCC_ClockConfig+0x278>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	4993      	ldr	r1, [pc, #588]	; (8002a38 <HAL_RCC_ClockConfig+0x278>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f2:	f7fe fd29 	bl	8001248 <HAL_GetTick>
 80027f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f8:	e008      	b.n	800280c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027fa:	f7fe fd25 	bl	8001248 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e111      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280c:	4b8a      	ldr	r3, [pc, #552]	; (8002a38 <HAL_RCC_ClockConfig+0x278>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d1ef      	bne.n	80027fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fb13 	bl	8001e56 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002830:	f7fe fd0a 	bl	8001248 <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002838:	f7fe fd06 	bl	8001248 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0f2      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800284a:	f7ff fbe8 	bl	800201e <LL_RCC_IsActiveFlag_HPRE>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f1      	beq.n	8002838 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d016      	beq.n	800288e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fb0a 	bl	8001e7e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800286a:	f7fe fced 	bl	8001248 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002872:	f7fe fce9 	bl	8001248 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0d5      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002884:	f7ff fbdd 	bl	8002042 <LL_RCC_IsActiveFlag_C2HPRE>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f1      	beq.n	8002872 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb03 	bl	8001eaa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fcd0 	bl	8001248 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028ac:	f7fe fccc 	bl	8001248 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0b8      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028be:	f7ff fbd3 	bl	8002068 <LL_RCC_IsActiveFlag_SHDHPRE>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f1      	beq.n	80028ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d016      	beq.n	8002902 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fafd 	bl	8001ed8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028de:	f7fe fcb3 	bl	8001248 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028e6:	f7fe fcaf 	bl	8001248 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e09b      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028f8:	f7ff fbc9 	bl	800208e <LL_RCC_IsActiveFlag_PPRE1>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f1      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d017      	beq.n	800293e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff faf3 	bl	8001f00 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800291a:	f7fe fc95 	bl	8001248 <HAL_GetTick>
 800291e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002922:	f7fe fc91 	bl	8001248 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e07d      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002934:	f7ff fbbd 	bl	80020b2 <LL_RCC_IsActiveFlag_PPRE2>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f1      	beq.n	8002922 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d043      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d106      	bne.n	8002960 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002952:	f7ff f893 	bl	8001a7c <LL_RCC_HSE_IsReady>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11e      	bne.n	800299a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e067      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d106      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002968:	f7ff fb16 	bl	8001f98 <LL_RCC_PLL_IsReady>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d113      	bne.n	800299a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e05c      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800297e:	f7ff f9fb 	bl	8001d78 <LL_RCC_MSI_IsReady>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d108      	bne.n	800299a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e051      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800298c:	f7ff f8a6 	bl	8001adc <LL_RCC_HSI_IsReady>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e04a      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fa39 	bl	8001e16 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a4:	f7fe fc50 	bl	8001248 <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7fe fc4c 	bl	8001248 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e036      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	f7ff fa3c 	bl	8001e3e <LL_RCC_GetSysClkSource>
 80029c6:	4602      	mov	r2, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d1ec      	bne.n	80029ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCC_ClockConfig+0x278>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d21b      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_RCC_ClockConfig+0x278>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 0207 	bic.w	r2, r3, #7
 80029e8:	4913      	ldr	r1, [pc, #76]	; (8002a38 <HAL_RCC_ClockConfig+0x278>)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f0:	f7fe fc2a 	bl	8001248 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029f8:	f7fe fc26 	bl	8001248 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e012      	b.n	8002a30 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_ClockConfig+0x278>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1ef      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a18:	f000 f87e 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <HAL_RCC_ClockConfig+0x27c>)
 8002a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002a22:	f7fe fc1d 	bl	8001260 <HAL_GetTickPrio>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fbbf 	bl	80011ac <HAL_InitTick>
 8002a2e:	4603      	mov	r3, r0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	58004000 	.word	0x58004000
 8002a3c:	2000000c 	.word	0x2000000c

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a46:	f7ff f9fa 	bl	8001e3e <LL_RCC_GetSysClkSource>
 8002a4a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10a      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a52:	f7ff f9b6 	bl	8001dc2 <LL_RCC_MSI_GetRange>
 8002a56:	4603      	mov	r3, r0
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e04b      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a6e:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e045      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d10a      	bne.n	8002a90 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a7a:	f7fe ffcf 	bl	8001a1c <LL_RCC_HSE_IsEnabledDiv2>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a84:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e03a      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e037      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a90:	f7ff fab9 	bl	8002006 <LL_RCC_PLL_GetMainSource>
 8002a94:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d003      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x64>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x6a>
 8002aa2:	e00d      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aa6:	60bb      	str	r3, [r7, #8]
        break;
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002aaa:	f7fe ffb7 	bl	8001a1c <LL_RCC_HSE_IsEnabledDiv2>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d102      	bne.n	8002aba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ab6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002ab8:	e00d      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002abc:	60bb      	str	r3, [r7, #8]
        break;
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ac0:	f7ff f97f 	bl	8001dc2 <LL_RCC_MSI_GetRange>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad2:	60bb      	str	r3, [r7, #8]
        break;
 8002ad4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002ad6:	f7ff fa71 	bl	8001fbc <LL_RCC_PLL_GetN>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	fb03 f402 	mul.w	r4, r3, r2
 8002ae2:	f7ff fa84 	bl	8001fee <LL_RCC_PLL_GetDivider>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	3301      	adds	r3, #1
 8002aec:	fbb4 f4f3 	udiv	r4, r4, r3
 8002af0:	f7ff fa71 	bl	8001fd6 <LL_RCC_PLL_GetR>
 8002af4:	4603      	mov	r3, r0
 8002af6:	0f5b      	lsrs	r3, r3, #29
 8002af8:	3301      	adds	r3, #1
 8002afa:	fbb4 f3f3 	udiv	r3, r4, r3
 8002afe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002b00:	68fb      	ldr	r3, [r7, #12]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08006620 	.word	0x08006620
 8002b10:	00f42400 	.word	0x00f42400
 8002b14:	01e84800 	.word	0x01e84800

08002b18 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b598      	push	{r3, r4, r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b1c:	f7ff ff90 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8002b20:	4604      	mov	r4, r0
 8002b22:	f7ff fa01 	bl	8001f28 <LL_RCC_GetAHBPrescaler>
 8002b26:	4603      	mov	r3, r0
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	4a03      	ldr	r2, [pc, #12]	; (8002b3c <HAL_RCC_GetHCLKFreq+0x24>)
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd98      	pop	{r3, r4, r7, pc}
 8002b3c:	080065e0 	.word	0x080065e0

08002b40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2bb0      	cmp	r3, #176	; 0xb0
 8002b4c:	d903      	bls.n	8002b56 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e007      	b.n	8002b66 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002b66:	f7ff f9eb 	bl	8001f40 <LL_RCC_GetAHB4Prescaler>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	0c9c      	lsrs	r4, r3, #18
 8002b8a:	f7fe ff39 	bl	8001a00 <HAL_PWREx_GetVoltageRange>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4619      	mov	r1, r3
 8002b92:	4620      	mov	r0, r4
 8002b94:	f000 f80c 	bl	8002bb0 <RCC_SetFlashLatency>
 8002b98:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	08006620 	.word	0x08006620
 8002ba8:	080065e0 	.word	0x080065e0
 8002bac:	431bde83 	.word	0x431bde83

08002bb0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b093      	sub	sp, #76	; 0x4c
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <RCC_SetFlashLatency+0xe8>)
 8002bbc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002bc6:	4a35      	ldr	r2, [pc, #212]	; (8002c9c <RCC_SetFlashLatency+0xec>)
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002bd2:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <RCC_SetFlashLatency+0xf0>)
 8002bd4:	f107 040c 	add.w	r4, r7, #12
 8002bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002bde:	2300      	movs	r3, #0
 8002be0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be8:	d11a      	bne.n	8002c20 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	643b      	str	r3, [r7, #64]	; 0x40
 8002bee:	e013      	b.n	8002c18 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3348      	adds	r3, #72	; 0x48
 8002bf6:	443b      	add	r3, r7
 8002bf8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d807      	bhi.n	8002c12 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	3348      	adds	r3, #72	; 0x48
 8002c08:	443b      	add	r3, r7
 8002c0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c0e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c10:	e020      	b.n	8002c54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c14:	3301      	adds	r3, #1
 8002c16:	643b      	str	r3, [r7, #64]	; 0x40
 8002c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d9e8      	bls.n	8002bf0 <RCC_SetFlashLatency+0x40>
 8002c1e:	e019      	b.n	8002c54 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c24:	e013      	b.n	8002c4e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	3348      	adds	r3, #72	; 0x48
 8002c2c:	443b      	add	r3, r7
 8002c2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d807      	bhi.n	8002c48 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	3348      	adds	r3, #72	; 0x48
 8002c3e:	443b      	add	r3, r7
 8002c40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c44:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c46:	e005      	b.n	8002c54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d9e8      	bls.n	8002c26 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <RCC_SetFlashLatency+0xf4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 0207 	bic.w	r2, r3, #7
 8002c5c:	4911      	ldr	r1, [pc, #68]	; (8002ca4 <RCC_SetFlashLatency+0xf4>)
 8002c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c64:	f7fe faf0 	bl	8001248 <HAL_GetTick>
 8002c68:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c6a:	e008      	b.n	8002c7e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c6c:	f7fe faec 	bl	8001248 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e007      	b.n	8002c8e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <RCC_SetFlashLatency+0xf4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1ef      	bne.n	8002c6c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	374c      	adds	r7, #76	; 0x4c
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd90      	pop	{r4, r7, pc}
 8002c96:	bf00      	nop
 8002c98:	080065b4 	.word	0x080065b4
 8002c9c:	080065c4 	.word	0x080065c4
 8002ca0:	080065d0 	.word	0x080065d0
 8002ca4:	58004000 	.word	0x58004000

08002ca8 <LL_RCC_LSE_IsEnabled>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <LL_RCC_LSE_IsEnabled+0x18>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <LL_RCC_LSE_IsEnabled+0x1a>
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_LSE_IsReady>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d101      	bne.n	8002ce4 <LL_RCC_LSE_IsReady+0x18>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <LL_RCC_LSE_IsReady+0x1a>
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_RCC_MSI_EnablePLLMode>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_RCC_SetRFWKPClockSource>:
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_RCC_SetSMPSClockSource>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f023 0203 	bic.w	r2, r3, #3
 8002d4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_RCC_SetSMPSPrescaler>:
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_SetUSARTClockSource>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_RCC_SetLPUARTClockSource>:
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_RCC_SetI2CClockSource>:
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_RCC_SetLPTIMClockSource>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	43db      	mvns	r3, r3
 8002e34:	401a      	ands	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_RCC_SetSAIClockSource>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_RCC_SetRNGClockSource>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_SetCLK48ClockSource>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_SetUSBClockSource>:
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ffe3 	bl	8002ea8 <LL_RCC_SetCLK48ClockSource>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <LL_RCC_SetADCClockSource>:
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_SetRTCClockSource>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_RCC_GetRTCClockSource>:
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_RCC_ForceBackupDomainReset>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_RCC_PLLSAI1_Enable>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fb2:	6013      	str	r3, [r2, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <LL_RCC_PLLSAI1_Disable>:
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fd0:	6013      	str	r3, [r2, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_RCC_PLLSAI1_IsReady>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fee:	d101      	bne.n	8002ff4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003008:	2300      	movs	r3, #0
 800300a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800300c:	2300      	movs	r3, #0
 800300e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d034      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003024:	d021      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800302a:	d81b      	bhi.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800302c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003030:	d01d      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003036:	d815      	bhi.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800303c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003040:	d110      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003052:	e00d      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f94d 	bl	80032f8 <RCCEx_PLLSAI1_ConfigNP>
 800305e:	4603      	mov	r3, r0
 8003060:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003062:	e005      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]
        break;
 8003068:	e002      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800306e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003070:	7ffb      	ldrb	r3, [r7, #31]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d105      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fee8 	bl	8002e50 <LL_RCC_SetSAIClockSource>
 8003080:	e001      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003082:	7ffb      	ldrb	r3, [r7, #31]
 8003084:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308e:	2b00      	cmp	r3, #0
 8003090:	d046      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003092:	f7ff ff56 	bl	8002f42 <LL_RCC_GetRTCClockSource>
 8003096:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d03c      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030a2:	f7fe fc9d 	bl	80019e0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff30 	bl	8002f16 <LL_RCC_SetRTCClockSource>
 80030b6:	e02e      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80030b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80030c2:	f7ff ff4b 	bl	8002f5c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80030c6:	f7ff ff5a 	bl	8002f7e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80030d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80030e2:	f7ff fde1 	bl	8002ca8 <LL_RCC_LSE_IsEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d114      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030ec:	f7fe f8ac 	bl	8001248 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80030f2:	e00b      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe f8a8 	bl	8001248 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d902      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	77fb      	strb	r3, [r7, #31]
              break;
 800310a:	e004      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800310c:	f7ff fdde 	bl	8002ccc <LL_RCC_LSE_IsReady>
 8003110:	4603      	mov	r3, r0
 8003112:	2b01      	cmp	r3, #1
 8003114:	d1ee      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003116:	7ffb      	ldrb	r3, [r7, #31]
 8003118:	77bb      	strb	r3, [r7, #30]
 800311a:	e001      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	7ffb      	ldrb	r3, [r7, #31]
 800311e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d004      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fe2a 	bl	8002d8a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fe35 	bl	8002db6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fe5d 	bl	8002e1c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fe52 	bl	8002e1c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fe2a 	bl	8002de2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fe1f 	bl	8002de2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d022      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fe8d 	bl	8002ed4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c2:	d107      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f8e3 	bl	80033ae <RCCEx_PLLSAI1_ConfigNQ>
 80031e8:	4603      	mov	r3, r0
 80031ea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80031ec:	7ffb      	ldrb	r3, [r7, #31]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80031f2:	7ffb      	ldrb	r3, [r7, #31]
 80031f4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02b      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d008      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003214:	d003      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fe2a 	bl	8002e7c <LL_RCC_SetRNGClockSource>
 8003228:	e00a      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	2000      	movs	r0, #0
 8003236:	f7ff fe21 	bl	8002e7c <LL_RCC_SetRNGClockSource>
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7ff fe34 	bl	8002ea8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003248:	d107      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800324a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003258:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003262:	2b00      	cmp	r3, #0
 8003264:	d022      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fe3d 	bl	8002eea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003278:	d107      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003292:	d10b      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f000 f8e3 	bl	8003464 <RCCEx_PLLSAI1_ConfigNR>
 800329e:	4603      	mov	r3, r0
 80032a0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80032a8:	7ffb      	ldrb	r3, [r7, #31]
 80032aa:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fd26 	bl	8002d0e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fd45 	bl	8002d62 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fd2c 	bl	8002d3a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80032e2:	7fbb      	ldrb	r3, [r7, #30]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80032f0:	f7ff fcfe 	bl	8002cf0 <LL_RCC_MSI_EnablePLLMode>
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003304:	f7ff fe5b 	bl	8002fbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003308:	f7fd ff9e 	bl	8001248 <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800330e:	e009      	b.n	8003324 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003310:	f7fd ff9a 	bl	8001248 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d902      	bls.n	8003324 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	73fb      	strb	r3, [r7, #15]
      break;
 8003322:	e004      	b.n	800332e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003324:	f7ff fe5a 	bl	8002fdc <LL_RCC_PLLSAI1_IsReady>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d137      	bne.n	80033a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003348:	4313      	orrs	r3, r2
 800334a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335e:	4313      	orrs	r3, r2
 8003360:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003362:	f7ff fe1d 	bl	8002fa0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003366:	f7fd ff6f 	bl	8001248 <HAL_GetTick>
 800336a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800336c:	e009      	b.n	8003382 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800336e:	f7fd ff6b 	bl	8001248 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d902      	bls.n	8003382 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	73fb      	strb	r3, [r7, #15]
        break;
 8003380:	e004      	b.n	800338c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003382:	f7ff fe2b 	bl	8002fdc <LL_RCC_PLLSAI1_IsReady>
 8003386:	4603      	mov	r3, r0
 8003388:	2b01      	cmp	r3, #1
 800338a:	d1f0      	bne.n	800336e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d108      	bne.n	80033a4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a0:	4313      	orrs	r3, r2
 80033a2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033ba:	f7ff fe00 	bl	8002fbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033be:	f7fd ff43 	bl	8001248 <HAL_GetTick>
 80033c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033c4:	e009      	b.n	80033da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033c6:	f7fd ff3f 	bl	8001248 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d902      	bls.n	80033da <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	e004      	b.n	80033e4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033da:	f7ff fdff 	bl	8002fdc <LL_RCC_PLLSAI1_IsReady>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d137      	bne.n	800345a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033fe:	4313      	orrs	r3, r2
 8003400:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003414:	4313      	orrs	r3, r2
 8003416:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003418:	f7ff fdc2 	bl	8002fa0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fd ff14 	bl	8001248 <HAL_GetTick>
 8003420:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003422:	e009      	b.n	8003438 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003424:	f7fd ff10 	bl	8001248 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d902      	bls.n	8003438 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	73fb      	strb	r3, [r7, #15]
        break;
 8003436:	e004      	b.n	8003442 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003438:	f7ff fdd0 	bl	8002fdc <LL_RCC_PLLSAI1_IsReady>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d1f0      	bne.n	8003424 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d108      	bne.n	800345a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003456:	4313      	orrs	r3, r2
 8003458:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003470:	f7ff fda5 	bl	8002fbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003474:	f7fd fee8 	bl	8001248 <HAL_GetTick>
 8003478:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800347a:	e009      	b.n	8003490 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800347c:	f7fd fee4 	bl	8001248 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d902      	bls.n	8003490 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	73fb      	strb	r3, [r7, #15]
      break;
 800348e:	e004      	b.n	800349a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003490:	f7ff fda4 	bl	8002fdc <LL_RCC_PLLSAI1_IsReady>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d137      	bne.n	8003510 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b4:	4313      	orrs	r3, r2
 80034b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ca:	4313      	orrs	r3, r2
 80034cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034ce:	f7ff fd67 	bl	8002fa0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d2:	f7fd feb9 	bl	8001248 <HAL_GetTick>
 80034d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034d8:	e009      	b.n	80034ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034da:	f7fd feb5 	bl	8001248 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d902      	bls.n	80034ee <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	73fb      	strb	r3, [r7, #15]
        break;
 80034ec:	e004      	b.n	80034f8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034ee:	f7ff fd75 	bl	8002fdc <LL_RCC_PLLSAI1_IsReady>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d1f0      	bne.n	80034da <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d108      	bne.n	8003510 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350c:	4313      	orrs	r3, r2
 800350e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e09f      	b.n	800366e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd fbe2 	bl	8000d0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003550:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_RTC_Init+0x15c>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b10      	cmp	r3, #16
 800355a:	d07e      	beq.n	800365a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	22ca      	movs	r2, #202	; 0xca
 8003562:	625a      	str	r2, [r3, #36]	; 0x24
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2253      	movs	r2, #83	; 0x53
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fac6 	bl	8003afe <RTC_EnterInitMode>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	22ff      	movs	r2, #255	; 0xff
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2204      	movs	r2, #4
 8003584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
 800358c:	e067      	b.n	800365e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800359c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6899      	ldr	r1, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68d2      	ldr	r2, [r2, #12]
 80035c8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6919      	ldr	r1, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	041a      	lsls	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ec:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0203 	bic.w	r2, r2, #3
 80035fc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d113      	bne.n	800364c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fa44 	bl	8003ab2 <HAL_RTC_WaitForSynchro>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2204      	movs	r2, #4
 800363c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e010      	b.n	800366e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	22ff      	movs	r2, #255	; 0xff
 8003652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	e001      	b.n	800365e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d103      	bne.n	800366c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40002800 	.word	0x40002800

0800367c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_RTC_SetTime+0x1a>
 8003692:	2302      	movs	r3, #2
 8003694:	e0b2      	b.n	80037fc <HAL_RTC_SetTime+0x180>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d126      	bne.n	80036fa <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2200      	movs	r2, #0
 80036be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fa44 	bl	8003b52 <RTC_ByteToBcd2>
 80036ca:	4603      	mov	r3, r0
 80036cc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fa3d 	bl	8003b52 <RTC_ByteToBcd2>
 80036d8:	4603      	mov	r3, r0
 80036da:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80036dc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	789b      	ldrb	r3, [r3, #2]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fa35 	bl	8003b52 <RTC_ByteToBcd2>
 80036e8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80036ea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	78db      	ldrb	r3, [r3, #3]
 80036f2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e018      	b.n	800372c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2200      	movs	r2, #0
 800370c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800371a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003720:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	78db      	ldrb	r3, [r3, #3]
 8003726:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	22ca      	movs	r2, #202	; 0xca
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2253      	movs	r2, #83	; 0x53
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f9de 	bl	8003afe <RTC_EnterInitMode>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00d      	beq.n	8003764 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2204      	movs	r2, #4
 8003754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e04b      	b.n	80037fc <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800376e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003772:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003782:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6899      	ldr	r1, [r3, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	431a      	orrs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f979 	bl	8003ab2 <HAL_RTC_WaitForSynchro>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	22ff      	movs	r2, #255	; 0xff
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2204      	movs	r2, #4
 80037d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e00c      	b.n	80037fc <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	22ff      	movs	r2, #255	; 0xff
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	bd90      	pop	{r4, r7, pc}

08003804 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003832:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003836:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003842:	b2da      	uxtb	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003852:	b2da      	uxtb	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003860:	b2da      	uxtb	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d11a      	bne.n	80038b2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f986 	bl	8003b92 <RTC_Bcd2ToByte>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f97d 	bl	8003b92 <RTC_Bcd2ToByte>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	789b      	ldrb	r3, [r3, #2]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f974 	bl	8003b92 <RTC_Bcd2ToByte>
 80038aa:	4603      	mov	r3, r0
 80038ac:	461a      	mov	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_RTC_SetDate+0x1a>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e09c      	b.n	8003a10 <HAL_RTC_SetDate+0x154>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10e      	bne.n	800390a <HAL_RTC_SetDate+0x4e>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	f023 0310 	bic.w	r3, r3, #16
 8003900:	b2db      	uxtb	r3, r3
 8003902:	330a      	adds	r3, #10
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11c      	bne.n	800394a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	78db      	ldrb	r3, [r3, #3]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f91c 	bl	8003b52 <RTC_ByteToBcd2>
 800391a:	4603      	mov	r3, r0
 800391c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	785b      	ldrb	r3, [r3, #1]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f915 	bl	8003b52 <RTC_ByteToBcd2>
 8003928:	4603      	mov	r3, r0
 800392a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800392c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	789b      	ldrb	r3, [r3, #2]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f90d 	bl	8003b52 <RTC_ByteToBcd2>
 8003938:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800393a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e00e      	b.n	8003968 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	78db      	ldrb	r3, [r3, #3]
 800394e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	785b      	ldrb	r3, [r3, #1]
 8003954:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003956:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800395c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	22ca      	movs	r2, #202	; 0xca
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2253      	movs	r2, #83	; 0x53
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f8c0 	bl	8003afe <RTC_EnterInitMode>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2204      	movs	r2, #4
 8003990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e037      	b.n	8003a10 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039ae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d113      	bne.n	80039f6 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f86f 	bl	8003ab2 <HAL_RTC_WaitForSynchro>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	22ff      	movs	r2, #255	; 0xff
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2204      	movs	r2, #4
 80039e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00c      	b.n	8003a10 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	22ff      	movs	r2, #255	; 0xff
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd90      	pop	{r4, r7, pc}

08003a18 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	0c1b      	lsrs	r3, r3, #16
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	0b5b      	lsrs	r3, r3, #13
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d11a      	bne.n	8003aa8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	78db      	ldrb	r3, [r3, #3]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f88b 	bl	8003b92 <RTC_Bcd2ToByte>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f882 	bl	8003b92 <RTC_Bcd2ToByte>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	789b      	ldrb	r3, [r3, #2]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f879 	bl	8003b92 <RTC_Bcd2ToByte>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003aca:	f7fd fbbd 	bl	8001248 <HAL_GetTick>
 8003ace:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ad0:	e009      	b.n	8003ae6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ad2:	f7fd fbb9 	bl	8001248 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e007      	b.n	8003af6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ee      	beq.n	8003ad2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d119      	bne.n	8003b48 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b1c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b1e:	f7fd fb93 	bl	8001248 <HAL_GetTick>
 8003b22:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b24:	e009      	b.n	8003b3a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003b26:	f7fd fb8f 	bl	8001248 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b34:	d901      	bls.n	8003b3a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e007      	b.n	8003b4a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ee      	beq.n	8003b26 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003b64:	e005      	b.n	8003b72 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003b6c:	7afb      	ldrb	r3, [r7, #11]
 8003b6e:	3b0a      	subs	r3, #10
 8003b70:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003b72:	7afb      	ldrb	r3, [r7, #11]
 8003b74:	2b09      	cmp	r3, #9
 8003b76:	d8f6      	bhi.n	8003b66 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	7afb      	ldrb	r3, [r7, #11]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	b2db      	uxtb	r3, r3
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	4603      	mov	r3, r0
 8003b9a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	b2db      	uxtb	r3, r3
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e095      	b.n	8003d08 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bec:	d009      	beq.n	8003c02 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	61da      	str	r2, [r3, #28]
 8003bf4:	e005      	b.n	8003c02 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7fd f8a1 	bl	8000d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c42:	d902      	bls.n	8003c4a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e002      	b.n	8003c50 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c58:	d007      	beq.n	8003c6a <HAL_SPI_Init+0xa0>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c62:	d002      	beq.n	8003c6a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	ea42 0103 	orr.w	r1, r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	f003 0204 	and.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ce6:	ea42 0103 	orr.w	r1, r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2c:	d112      	bne.n	8003d54 <HAL_SPI_Receive+0x44>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10e      	bne.n	8003d54 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f910 	bl	8003f70 <HAL_SPI_TransmitReceive>
 8003d50:	4603      	mov	r3, r0
 8003d52:	e109      	b.n	8003f68 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_SPI_Receive+0x52>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e102      	b.n	8003f68 <HAL_SPI_Receive+0x258>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d6a:	f7fd fa6d 	bl	8001248 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d002      	beq.n	8003d82 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d80:	e0e9      	b.n	8003f56 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_SPI_Receive+0x7e>
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d92:	e0e0      	b.n	8003f56 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2204      	movs	r2, #4
 8003d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dde:	d908      	bls.n	8003df2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	e007      	b.n	8003e02 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e00:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0a:	d10f      	bne.n	8003e2c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e2a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d007      	beq.n	8003e4a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e48:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e52:	d867      	bhi.n	8003f24 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e54:	e030      	b.n	8003eb8 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d117      	bne.n	8003e94 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f103 020c 	add.w	r2, r3, #12
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003e92:	e011      	b.n	8003eb8 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e94:	f7fd f9d8 	bl	8001248 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d803      	bhi.n	8003eac <HAL_SPI_Receive+0x19c>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eaa:	d102      	bne.n	8003eb2 <HAL_SPI_Receive+0x1a2>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003eb6:	e04e      	b.n	8003f56 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1c8      	bne.n	8003e56 <HAL_SPI_Receive+0x146>
 8003ec4:	e034      	b.n	8003f30 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d115      	bne.n	8003f00 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003efe:	e011      	b.n	8003f24 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f00:	f7fd f9a2 	bl	8001248 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d803      	bhi.n	8003f18 <HAL_SPI_Receive+0x208>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f16:	d102      	bne.n	8003f1e <HAL_SPI_Receive+0x20e>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f22:	e018      	b.n	8003f56 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ca      	bne.n	8003ec6 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	6839      	ldr	r1, [r7, #0]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fb4d 	bl	80045d4 <SPI_EndRxTransaction>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
 8003f52:	e000      	b.n	8003f56 <HAL_SPI_Receive+0x246>
  }

error :
 8003f54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x26>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e1fb      	b.n	800438e <HAL_SPI_TransmitReceive+0x41e>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f9e:	f7fd f953 	bl	8001248 <HAL_GetTick>
 8003fa2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003faa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003fb6:	887b      	ldrh	r3, [r7, #2]
 8003fb8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fba:	7efb      	ldrb	r3, [r7, #27]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d00e      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x6e>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc6:	d106      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x66>
 8003fd0:	7efb      	ldrb	r3, [r7, #27]
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d003      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fdc:	e1cd      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x80>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x80>
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ff6:	e1c0      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b04      	cmp	r3, #4
 8004002:	d003      	beq.n	800400c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2205      	movs	r2, #5
 8004008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	887a      	ldrh	r2, [r7, #2]
 8004032:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800404e:	d802      	bhi.n	8004056 <HAL_SPI_TransmitReceive+0xe6>
 8004050:	8a3b      	ldrh	r3, [r7, #16]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d908      	bls.n	8004068 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	e007      	b.n	8004078 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d007      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409e:	d97c      	bls.n	800419a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x13e>
 80040a8:	8a7b      	ldrh	r3, [r7, #18]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d169      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d2:	e056      	b.n	8004182 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d11b      	bne.n	800411a <HAL_SPI_TransmitReceive+0x1aa>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d016      	beq.n	800411a <HAL_SPI_TransmitReceive+0x1aa>
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d113      	bne.n	800411a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d11c      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x1f2>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d016      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	b292      	uxth	r2, r2
 8004140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	1c9a      	adds	r2, r3, #2
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800415e:	2301      	movs	r3, #1
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004162:	f7fd f871 	bl	8001248 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416e:	429a      	cmp	r2, r3
 8004170:	d807      	bhi.n	8004182 <HAL_SPI_TransmitReceive+0x212>
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004178:	d003      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004180:	e0fb      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1a3      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x164>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d19d      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x164>
 8004198:	e0df      	b.n	800435a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_SPI_TransmitReceive+0x23a>
 80041a2:	8a7b      	ldrh	r3, [r7, #18]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	f040 80cb 	bne.w	8004340 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d912      	bls.n	80041da <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	1c9a      	adds	r2, r3, #2
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b02      	subs	r3, #2
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041d8:	e0b2      	b.n	8004340 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004200:	e09e      	b.n	8004340 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d134      	bne.n	800427a <HAL_SPI_TransmitReceive+0x30a>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d02f      	beq.n	800427a <HAL_SPI_TransmitReceive+0x30a>
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	2b01      	cmp	r3, #1
 800421e:	d12c      	bne.n	800427a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d912      	bls.n	8004250 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	1c9a      	adds	r2, r3, #2
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b02      	subs	r3, #2
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800424e:	e012      	b.n	8004276 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b01      	cmp	r3, #1
 8004286:	d148      	bne.n	800431a <HAL_SPI_TransmitReceive+0x3aa>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d042      	beq.n	800431a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d923      	bls.n	80042e8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	b292      	uxth	r2, r2
 80042ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	1c9a      	adds	r2, r3, #2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b02      	subs	r3, #2
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d81f      	bhi.n	8004316 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	e016      	b.n	8004316 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f103 020c 	add.w	r2, r3, #12
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004316:	2301      	movs	r3, #1
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800431a:	f7fc ff95 	bl	8001248 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004326:	429a      	cmp	r2, r3
 8004328:	d803      	bhi.n	8004332 <HAL_SPI_TransmitReceive+0x3c2>
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004330:	d102      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x3c8>
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	2b00      	cmp	r3, #0
 8004336:	d103      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800433e:	e01c      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	f47f af5b 	bne.w	8004202 <HAL_SPI_TransmitReceive+0x292>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	f47f af54 	bne.w	8004202 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f990 	bl	8004684 <SPI_EndRxTxTransaction>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	661a      	str	r2, [r3, #96]	; 0x60
 8004376:	e000      	b.n	800437a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004378:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800438a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800438e:	4618      	mov	r0, r3
 8004390:	3728      	adds	r7, #40	; 0x28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043a8:	f7fc ff4e 	bl	8001248 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043b8:	f7fc ff46 	bl	8001248 <HAL_GetTick>
 80043bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043be:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	015b      	lsls	r3, r3, #5
 80043c4:	0d1b      	lsrs	r3, r3, #20
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ce:	e054      	b.n	800447a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d6:	d050      	beq.n	800447a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043d8:	f7fc ff36 	bl	8001248 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d902      	bls.n	80043ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d13d      	bne.n	800446a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004406:	d111      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004410:	d004      	beq.n	800441c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441a:	d107      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004434:	d10f      	bne.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e017      	b.n	800449a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3b01      	subs	r3, #1
 8004478:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d19b      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	2000000c 	.word	0x2000000c

080044a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044ba:	f7fc fec5 	bl	8001248 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	4413      	add	r3, r2
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80044ca:	f7fc febd 	bl	8001248 <HAL_GetTick>
 80044ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044d8:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00da      	lsls	r2, r3, #3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	0d1b      	lsrs	r3, r3, #20
 80044e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044f0:	e060      	b.n	80045b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044f8:	d107      	bne.n	800450a <SPI_WaitFifoStateUntilTimeout+0x62>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004508:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004510:	d050      	beq.n	80045b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004512:	f7fc fe99 	bl	8001248 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	429a      	cmp	r2, r3
 8004520:	d902      	bls.n	8004528 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d13d      	bne.n	80045a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004536:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004540:	d111      	bne.n	8004566 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454a:	d004      	beq.n	8004556 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004554:	d107      	bne.n	8004566 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004564:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456e:	d10f      	bne.n	8004590 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e010      	b.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4013      	ands	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d196      	bne.n	80044f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3728      	adds	r7, #40	; 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2000000c 	.word	0x2000000c

080045d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e8:	d111      	bne.n	800460e <SPI_EndRxTransaction+0x3a>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f2:	d004      	beq.n	80045fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fc:	d107      	bne.n	800460e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2200      	movs	r2, #0
 8004616:	2180      	movs	r1, #128	; 0x80
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff febd 	bl	8004398 <SPI_WaitFlagStateUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e023      	b.n	800467c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463c:	d11d      	bne.n	800467a <SPI_EndRxTransaction+0xa6>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004646:	d004      	beq.n	8004652 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004650:	d113      	bne.n	800467a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff ff22 	bl	80044a8 <SPI_WaitFifoStateUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466e:	f043 0220 	orr.w	r2, r3, #32
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e000      	b.n	800467c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2200      	movs	r2, #0
 8004698:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff ff03 	bl	80044a8 <SPI_WaitFifoStateUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e027      	b.n	8004708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fe68 	bl	8004398 <SPI_WaitFlagStateUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e014      	b.n	8004708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff fedc 	bl	80044a8 <SPI_WaitFifoStateUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e000      	b.n	8004708 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e049      	b.n	80047b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fc fb44 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f000 f946 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d001      	beq.n	80047d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e02e      	b.n	8004836 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a17      	ldr	r2, [pc, #92]	; (8004844 <HAL_TIM_Base_Start+0x84>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_TIM_Base_Start+0x34>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f2:	d115      	bne.n	8004820 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_TIM_Base_Start+0x88>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b06      	cmp	r3, #6
 8004804:	d015      	beq.n	8004832 <HAL_TIM_Base_Start+0x72>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d011      	beq.n	8004832 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481e:	e008      	b.n	8004832 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e000      	b.n	8004834 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00
 8004848:	00010007 	.word	0x00010007

0800484c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIM_ConfigClockSource+0x1c>
 8004864:	2302      	movs	r3, #2
 8004866:	e0b6      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x18a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004886:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800488a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a4:	d03e      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0xd8>
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048aa:	f200 8087 	bhi.w	80049bc <HAL_TIM_ConfigClockSource+0x170>
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b2:	f000 8086 	beq.w	80049c2 <HAL_TIM_ConfigClockSource+0x176>
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d87f      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x170>
 80048bc:	2b70      	cmp	r3, #112	; 0x70
 80048be:	d01a      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0xaa>
 80048c0:	2b70      	cmp	r3, #112	; 0x70
 80048c2:	d87b      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x170>
 80048c4:	2b60      	cmp	r3, #96	; 0x60
 80048c6:	d050      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x11e>
 80048c8:	2b60      	cmp	r3, #96	; 0x60
 80048ca:	d877      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x170>
 80048cc:	2b50      	cmp	r3, #80	; 0x50
 80048ce:	d03c      	beq.n	800494a <HAL_TIM_ConfigClockSource+0xfe>
 80048d0:	2b50      	cmp	r3, #80	; 0x50
 80048d2:	d873      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x170>
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d058      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x13e>
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d86f      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x170>
 80048dc:	2b30      	cmp	r3, #48	; 0x30
 80048de:	d064      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15e>
 80048e0:	2b30      	cmp	r3, #48	; 0x30
 80048e2:	d86b      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x170>
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d060      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15e>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d867      	bhi.n	80049bc <HAL_TIM_ConfigClockSource+0x170>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d05c      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15e>
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d05a      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x15e>
 80048f4:	e062      	b.n	80049bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6899      	ldr	r1, [r3, #8]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f000 f94b 	bl	8004ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	609a      	str	r2, [r3, #8]
      break;
 8004922:	e04f      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6899      	ldr	r1, [r3, #8]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f000 f934 	bl	8004ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004946:	609a      	str	r2, [r3, #8]
      break;
 8004948:	e03c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6859      	ldr	r1, [r3, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	461a      	mov	r2, r3
 8004958:	f000 f8a6 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2150      	movs	r1, #80	; 0x50
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f8ff 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004968:	e02c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	461a      	mov	r2, r3
 8004978:	f000 f8c5 	bl	8004b06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2160      	movs	r1, #96	; 0x60
 8004982:	4618      	mov	r0, r3
 8004984:	f000 f8ef 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004988:	e01c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	461a      	mov	r2, r3
 8004998:	f000 f886 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2140      	movs	r1, #64	; 0x40
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f8df 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 80049a8:	e00c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f000 f8d6 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 80049ba:	e003      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e000      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <TIM_Base_SetConfig+0xbc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_Base_SetConfig+0x20>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d108      	bne.n	8004a12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a21      	ldr	r2, [pc, #132]	; (8004a9c <TIM_Base_SetConfig+0xbc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00b      	beq.n	8004a32 <TIM_Base_SetConfig+0x52>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a20:	d007      	beq.n	8004a32 <TIM_Base_SetConfig+0x52>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <TIM_Base_SetConfig+0xc0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_Base_SetConfig+0x52>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <TIM_Base_SetConfig+0xc4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d108      	bne.n	8004a44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <TIM_Base_SetConfig+0xbc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_Base_SetConfig+0xa0>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0b      	ldr	r2, [pc, #44]	; (8004aa0 <TIM_Base_SetConfig+0xc0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xa0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <TIM_Base_SetConfig+0xc4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800

08004aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 030a 	bic.w	r3, r3, #10
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b087      	sub	sp, #28
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0210 	bic.w	r2, r3, #16
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	031b      	lsls	r3, r3, #12
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f043 0307 	orr.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	021a      	lsls	r2, r3, #8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	609a      	str	r2, [r3, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e04a      	b.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d10c      	bne.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40012c00 	.word	0x40012c00

08004ca0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ca8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004cac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	f107 0014 	add.w	r0, r7, #20
 8004ce4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	b004      	add	sp, #16
 8004d16:	4770      	bx	lr

08004d18 <__errno>:
 8004d18:	4b01      	ldr	r3, [pc, #4]	; (8004d20 <__errno+0x8>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000018 	.word	0x20000018

08004d24 <_fclose_r>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	4605      	mov	r5, r0
 8004d28:	460c      	mov	r4, r1
 8004d2a:	b911      	cbnz	r1, 8004d32 <_fclose_r+0xe>
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	4630      	mov	r0, r6
 8004d30:	bd70      	pop	{r4, r5, r6, pc}
 8004d32:	b118      	cbz	r0, 8004d3c <_fclose_r+0x18>
 8004d34:	6983      	ldr	r3, [r0, #24]
 8004d36:	b90b      	cbnz	r3, 8004d3c <_fclose_r+0x18>
 8004d38:	f000 f982 	bl	8005040 <__sinit>
 8004d3c:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <_fclose_r+0xcc>)
 8004d3e:	429c      	cmp	r4, r3
 8004d40:	d114      	bne.n	8004d6c <_fclose_r+0x48>
 8004d42:	686c      	ldr	r4, [r5, #4]
 8004d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d46:	07d8      	lsls	r0, r3, #31
 8004d48:	d405      	bmi.n	8004d56 <_fclose_r+0x32>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	0599      	lsls	r1, r3, #22
 8004d4e:	d402      	bmi.n	8004d56 <_fclose_r+0x32>
 8004d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d52:	f000 fb4b 	bl	80053ec <__retarget_lock_acquire_recursive>
 8004d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5a:	b98b      	cbnz	r3, 8004d80 <_fclose_r+0x5c>
 8004d5c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8004d5e:	f016 0601 	ands.w	r6, r6, #1
 8004d62:	d1e3      	bne.n	8004d2c <_fclose_r+0x8>
 8004d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d66:	f000 fb42 	bl	80053ee <__retarget_lock_release_recursive>
 8004d6a:	e7e0      	b.n	8004d2e <_fclose_r+0xa>
 8004d6c:	4b21      	ldr	r3, [pc, #132]	; (8004df4 <_fclose_r+0xd0>)
 8004d6e:	429c      	cmp	r4, r3
 8004d70:	d101      	bne.n	8004d76 <_fclose_r+0x52>
 8004d72:	68ac      	ldr	r4, [r5, #8]
 8004d74:	e7e6      	b.n	8004d44 <_fclose_r+0x20>
 8004d76:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <_fclose_r+0xd4>)
 8004d78:	429c      	cmp	r4, r3
 8004d7a:	bf08      	it	eq
 8004d7c:	68ec      	ldreq	r4, [r5, #12]
 8004d7e:	e7e1      	b.n	8004d44 <_fclose_r+0x20>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 f842 	bl	8004e0c <__sflush_r>
 8004d88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	b133      	cbz	r3, 8004d9c <_fclose_r+0x78>
 8004d8e:	6a21      	ldr	r1, [r4, #32]
 8004d90:	4628      	mov	r0, r5
 8004d92:	4798      	blx	r3
 8004d94:	2800      	cmp	r0, #0
 8004d96:	bfb8      	it	lt
 8004d98:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	061a      	lsls	r2, r3, #24
 8004da0:	d503      	bpl.n	8004daa <_fclose_r+0x86>
 8004da2:	6921      	ldr	r1, [r4, #16]
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 fb91 	bl	80054cc <_free_r>
 8004daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dac:	b141      	cbz	r1, 8004dc0 <_fclose_r+0x9c>
 8004dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004db2:	4299      	cmp	r1, r3
 8004db4:	d002      	beq.n	8004dbc <_fclose_r+0x98>
 8004db6:	4628      	mov	r0, r5
 8004db8:	f000 fb88 	bl	80054cc <_free_r>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6363      	str	r3, [r4, #52]	; 0x34
 8004dc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004dc2:	b121      	cbz	r1, 8004dce <_fclose_r+0xaa>
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f000 fb81 	bl	80054cc <_free_r>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	64a3      	str	r3, [r4, #72]	; 0x48
 8004dce:	f000 f91f 	bl	8005010 <__sfp_lock_acquire>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	81a3      	strh	r3, [r4, #12]
 8004dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd8:	07db      	lsls	r3, r3, #31
 8004dda:	d402      	bmi.n	8004de2 <_fclose_r+0xbe>
 8004ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dde:	f000 fb06 	bl	80053ee <__retarget_lock_release_recursive>
 8004de2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004de4:	f000 fb01 	bl	80053ea <__retarget_lock_close_recursive>
 8004de8:	f000 f918 	bl	800501c <__sfp_lock_release>
 8004dec:	e79f      	b.n	8004d2e <_fclose_r+0xa>
 8004dee:	bf00      	nop
 8004df0:	08006680 	.word	0x08006680
 8004df4:	080066a0 	.word	0x080066a0
 8004df8:	08006660 	.word	0x08006660

08004dfc <fclose>:
 8004dfc:	4b02      	ldr	r3, [pc, #8]	; (8004e08 <fclose+0xc>)
 8004dfe:	4601      	mov	r1, r0
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	f7ff bf8f 	b.w	8004d24 <_fclose_r>
 8004e06:	bf00      	nop
 8004e08:	20000018 	.word	0x20000018

08004e0c <__sflush_r>:
 8004e0c:	898a      	ldrh	r2, [r1, #12]
 8004e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e12:	4605      	mov	r5, r0
 8004e14:	0710      	lsls	r0, r2, #28
 8004e16:	460c      	mov	r4, r1
 8004e18:	d458      	bmi.n	8004ecc <__sflush_r+0xc0>
 8004e1a:	684b      	ldr	r3, [r1, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	dc05      	bgt.n	8004e2c <__sflush_r+0x20>
 8004e20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	dc02      	bgt.n	8004e2c <__sflush_r+0x20>
 8004e26:	2000      	movs	r0, #0
 8004e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e2e:	2e00      	cmp	r6, #0
 8004e30:	d0f9      	beq.n	8004e26 <__sflush_r+0x1a>
 8004e32:	2300      	movs	r3, #0
 8004e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e38:	682f      	ldr	r7, [r5, #0]
 8004e3a:	602b      	str	r3, [r5, #0]
 8004e3c:	d032      	beq.n	8004ea4 <__sflush_r+0x98>
 8004e3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	075a      	lsls	r2, r3, #29
 8004e44:	d505      	bpl.n	8004e52 <__sflush_r+0x46>
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	1ac0      	subs	r0, r0, r3
 8004e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e4c:	b10b      	cbz	r3, 8004e52 <__sflush_r+0x46>
 8004e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e50:	1ac0      	subs	r0, r0, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	4602      	mov	r2, r0
 8004e56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e58:	6a21      	ldr	r1, [r4, #32]
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	47b0      	blx	r6
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	d106      	bne.n	8004e72 <__sflush_r+0x66>
 8004e64:	6829      	ldr	r1, [r5, #0]
 8004e66:	291d      	cmp	r1, #29
 8004e68:	d82c      	bhi.n	8004ec4 <__sflush_r+0xb8>
 8004e6a:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <__sflush_r+0x108>)
 8004e6c:	40ca      	lsrs	r2, r1
 8004e6e:	07d6      	lsls	r6, r2, #31
 8004e70:	d528      	bpl.n	8004ec4 <__sflush_r+0xb8>
 8004e72:	2200      	movs	r2, #0
 8004e74:	6062      	str	r2, [r4, #4]
 8004e76:	04d9      	lsls	r1, r3, #19
 8004e78:	6922      	ldr	r2, [r4, #16]
 8004e7a:	6022      	str	r2, [r4, #0]
 8004e7c:	d504      	bpl.n	8004e88 <__sflush_r+0x7c>
 8004e7e:	1c42      	adds	r2, r0, #1
 8004e80:	d101      	bne.n	8004e86 <__sflush_r+0x7a>
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	b903      	cbnz	r3, 8004e88 <__sflush_r+0x7c>
 8004e86:	6560      	str	r0, [r4, #84]	; 0x54
 8004e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e8a:	602f      	str	r7, [r5, #0]
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	d0ca      	beq.n	8004e26 <__sflush_r+0x1a>
 8004e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e94:	4299      	cmp	r1, r3
 8004e96:	d002      	beq.n	8004e9e <__sflush_r+0x92>
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 fb17 	bl	80054cc <_free_r>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ea2:	e7c1      	b.n	8004e28 <__sflush_r+0x1c>
 8004ea4:	6a21      	ldr	r1, [r4, #32]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b0      	blx	r6
 8004eac:	1c41      	adds	r1, r0, #1
 8004eae:	d1c7      	bne.n	8004e40 <__sflush_r+0x34>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0c4      	beq.n	8004e40 <__sflush_r+0x34>
 8004eb6:	2b1d      	cmp	r3, #29
 8004eb8:	d001      	beq.n	8004ebe <__sflush_r+0xb2>
 8004eba:	2b16      	cmp	r3, #22
 8004ebc:	d101      	bne.n	8004ec2 <__sflush_r+0xb6>
 8004ebe:	602f      	str	r7, [r5, #0]
 8004ec0:	e7b1      	b.n	8004e26 <__sflush_r+0x1a>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec8:	81a3      	strh	r3, [r4, #12]
 8004eca:	e7ad      	b.n	8004e28 <__sflush_r+0x1c>
 8004ecc:	690f      	ldr	r7, [r1, #16]
 8004ece:	2f00      	cmp	r7, #0
 8004ed0:	d0a9      	beq.n	8004e26 <__sflush_r+0x1a>
 8004ed2:	0793      	lsls	r3, r2, #30
 8004ed4:	680e      	ldr	r6, [r1, #0]
 8004ed6:	bf08      	it	eq
 8004ed8:	694b      	ldreq	r3, [r1, #20]
 8004eda:	600f      	str	r7, [r1, #0]
 8004edc:	bf18      	it	ne
 8004ede:	2300      	movne	r3, #0
 8004ee0:	eba6 0807 	sub.w	r8, r6, r7
 8004ee4:	608b      	str	r3, [r1, #8]
 8004ee6:	f1b8 0f00 	cmp.w	r8, #0
 8004eea:	dd9c      	ble.n	8004e26 <__sflush_r+0x1a>
 8004eec:	6a21      	ldr	r1, [r4, #32]
 8004eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ef0:	4643      	mov	r3, r8
 8004ef2:	463a      	mov	r2, r7
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b0      	blx	r6
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	dc06      	bgt.n	8004f0a <__sflush_r+0xfe>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f02:	81a3      	strh	r3, [r4, #12]
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f08:	e78e      	b.n	8004e28 <__sflush_r+0x1c>
 8004f0a:	4407      	add	r7, r0
 8004f0c:	eba8 0800 	sub.w	r8, r8, r0
 8004f10:	e7e9      	b.n	8004ee6 <__sflush_r+0xda>
 8004f12:	bf00      	nop
 8004f14:	20400001 	.word	0x20400001

08004f18 <_fflush_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	690b      	ldr	r3, [r1, #16]
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	460c      	mov	r4, r1
 8004f20:	b913      	cbnz	r3, 8004f28 <_fflush_r+0x10>
 8004f22:	2500      	movs	r5, #0
 8004f24:	4628      	mov	r0, r5
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	b118      	cbz	r0, 8004f32 <_fflush_r+0x1a>
 8004f2a:	6983      	ldr	r3, [r0, #24]
 8004f2c:	b90b      	cbnz	r3, 8004f32 <_fflush_r+0x1a>
 8004f2e:	f000 f887 	bl	8005040 <__sinit>
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <_fflush_r+0x6c>)
 8004f34:	429c      	cmp	r4, r3
 8004f36:	d11b      	bne.n	8004f70 <_fflush_r+0x58>
 8004f38:	686c      	ldr	r4, [r5, #4]
 8004f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ef      	beq.n	8004f22 <_fflush_r+0xa>
 8004f42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f44:	07d0      	lsls	r0, r2, #31
 8004f46:	d404      	bmi.n	8004f52 <_fflush_r+0x3a>
 8004f48:	0599      	lsls	r1, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <_fflush_r+0x3a>
 8004f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f4e:	f000 fa4d 	bl	80053ec <__retarget_lock_acquire_recursive>
 8004f52:	4628      	mov	r0, r5
 8004f54:	4621      	mov	r1, r4
 8004f56:	f7ff ff59 	bl	8004e0c <__sflush_r>
 8004f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f5c:	07da      	lsls	r2, r3, #31
 8004f5e:	4605      	mov	r5, r0
 8004f60:	d4e0      	bmi.n	8004f24 <_fflush_r+0xc>
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	059b      	lsls	r3, r3, #22
 8004f66:	d4dd      	bmi.n	8004f24 <_fflush_r+0xc>
 8004f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f6a:	f000 fa40 	bl	80053ee <__retarget_lock_release_recursive>
 8004f6e:	e7d9      	b.n	8004f24 <_fflush_r+0xc>
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <_fflush_r+0x70>)
 8004f72:	429c      	cmp	r4, r3
 8004f74:	d101      	bne.n	8004f7a <_fflush_r+0x62>
 8004f76:	68ac      	ldr	r4, [r5, #8]
 8004f78:	e7df      	b.n	8004f3a <_fflush_r+0x22>
 8004f7a:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <_fflush_r+0x74>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	bf08      	it	eq
 8004f80:	68ec      	ldreq	r4, [r5, #12]
 8004f82:	e7da      	b.n	8004f3a <_fflush_r+0x22>
 8004f84:	08006680 	.word	0x08006680
 8004f88:	080066a0 	.word	0x080066a0
 8004f8c:	08006660 	.word	0x08006660

08004f90 <std>:
 8004f90:	2300      	movs	r3, #0
 8004f92:	b510      	push	{r4, lr}
 8004f94:	4604      	mov	r4, r0
 8004f96:	e9c0 3300 	strd	r3, r3, [r0]
 8004f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f9e:	6083      	str	r3, [r0, #8]
 8004fa0:	8181      	strh	r1, [r0, #12]
 8004fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8004fa4:	81c2      	strh	r2, [r0, #14]
 8004fa6:	6183      	str	r3, [r0, #24]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	2208      	movs	r2, #8
 8004fac:	305c      	adds	r0, #92	; 0x5c
 8004fae:	f000 fa85 	bl	80054bc <memset>
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <std+0x38>)
 8004fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <std+0x3c>)
 8004fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <std+0x40>)
 8004fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <std+0x44>)
 8004fc0:	6224      	str	r4, [r4, #32]
 8004fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8004fc4:	bd10      	pop	{r4, pc}
 8004fc6:	bf00      	nop
 8004fc8:	08005761 	.word	0x08005761
 8004fcc:	08005783 	.word	0x08005783
 8004fd0:	080057bb 	.word	0x080057bb
 8004fd4:	080057df 	.word	0x080057df

08004fd8 <_cleanup_r>:
 8004fd8:	4901      	ldr	r1, [pc, #4]	; (8004fe0 <_cleanup_r+0x8>)
 8004fda:	f000 b9c1 	b.w	8005360 <_fwalk_reent>
 8004fde:	bf00      	nop
 8004fe0:	08004f19 	.word	0x08004f19

08004fe4 <__sfmoreglue>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	2268      	movs	r2, #104	; 0x68
 8004fe8:	1e4d      	subs	r5, r1, #1
 8004fea:	4355      	muls	r5, r2
 8004fec:	460e      	mov	r6, r1
 8004fee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ff2:	f000 fad7 	bl	80055a4 <_malloc_r>
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	b140      	cbz	r0, 800500c <__sfmoreglue+0x28>
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	e9c0 1600 	strd	r1, r6, [r0]
 8005000:	300c      	adds	r0, #12
 8005002:	60a0      	str	r0, [r4, #8]
 8005004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005008:	f000 fa58 	bl	80054bc <memset>
 800500c:	4620      	mov	r0, r4
 800500e:	bd70      	pop	{r4, r5, r6, pc}

08005010 <__sfp_lock_acquire>:
 8005010:	4801      	ldr	r0, [pc, #4]	; (8005018 <__sfp_lock_acquire+0x8>)
 8005012:	f000 b9eb 	b.w	80053ec <__retarget_lock_acquire_recursive>
 8005016:	bf00      	nop
 8005018:	20000485 	.word	0x20000485

0800501c <__sfp_lock_release>:
 800501c:	4801      	ldr	r0, [pc, #4]	; (8005024 <__sfp_lock_release+0x8>)
 800501e:	f000 b9e6 	b.w	80053ee <__retarget_lock_release_recursive>
 8005022:	bf00      	nop
 8005024:	20000485 	.word	0x20000485

08005028 <__sinit_lock_acquire>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__sinit_lock_acquire+0x8>)
 800502a:	f000 b9df 	b.w	80053ec <__retarget_lock_acquire_recursive>
 800502e:	bf00      	nop
 8005030:	20000486 	.word	0x20000486

08005034 <__sinit_lock_release>:
 8005034:	4801      	ldr	r0, [pc, #4]	; (800503c <__sinit_lock_release+0x8>)
 8005036:	f000 b9da 	b.w	80053ee <__retarget_lock_release_recursive>
 800503a:	bf00      	nop
 800503c:	20000486 	.word	0x20000486

08005040 <__sinit>:
 8005040:	b510      	push	{r4, lr}
 8005042:	4604      	mov	r4, r0
 8005044:	f7ff fff0 	bl	8005028 <__sinit_lock_acquire>
 8005048:	69a3      	ldr	r3, [r4, #24]
 800504a:	b11b      	cbz	r3, 8005054 <__sinit+0x14>
 800504c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005050:	f7ff bff0 	b.w	8005034 <__sinit_lock_release>
 8005054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005058:	6523      	str	r3, [r4, #80]	; 0x50
 800505a:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <__sinit+0x68>)
 800505c:	4a13      	ldr	r2, [pc, #76]	; (80050ac <__sinit+0x6c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	62a2      	str	r2, [r4, #40]	; 0x28
 8005062:	42a3      	cmp	r3, r4
 8005064:	bf04      	itt	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	61a3      	streq	r3, [r4, #24]
 800506a:	4620      	mov	r0, r4
 800506c:	f000 f820 	bl	80050b0 <__sfp>
 8005070:	6060      	str	r0, [r4, #4]
 8005072:	4620      	mov	r0, r4
 8005074:	f000 f81c 	bl	80050b0 <__sfp>
 8005078:	60a0      	str	r0, [r4, #8]
 800507a:	4620      	mov	r0, r4
 800507c:	f000 f818 	bl	80050b0 <__sfp>
 8005080:	2200      	movs	r2, #0
 8005082:	60e0      	str	r0, [r4, #12]
 8005084:	2104      	movs	r1, #4
 8005086:	6860      	ldr	r0, [r4, #4]
 8005088:	f7ff ff82 	bl	8004f90 <std>
 800508c:	68a0      	ldr	r0, [r4, #8]
 800508e:	2201      	movs	r2, #1
 8005090:	2109      	movs	r1, #9
 8005092:	f7ff ff7d 	bl	8004f90 <std>
 8005096:	68e0      	ldr	r0, [r4, #12]
 8005098:	2202      	movs	r2, #2
 800509a:	2112      	movs	r1, #18
 800509c:	f7ff ff78 	bl	8004f90 <std>
 80050a0:	2301      	movs	r3, #1
 80050a2:	61a3      	str	r3, [r4, #24]
 80050a4:	e7d2      	b.n	800504c <__sinit+0xc>
 80050a6:	bf00      	nop
 80050a8:	080066c0 	.word	0x080066c0
 80050ac:	08004fd9 	.word	0x08004fd9

080050b0 <__sfp>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	4607      	mov	r7, r0
 80050b4:	f7ff ffac 	bl	8005010 <__sfp_lock_acquire>
 80050b8:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <__sfp+0x84>)
 80050ba:	681e      	ldr	r6, [r3, #0]
 80050bc:	69b3      	ldr	r3, [r6, #24]
 80050be:	b913      	cbnz	r3, 80050c6 <__sfp+0x16>
 80050c0:	4630      	mov	r0, r6
 80050c2:	f7ff ffbd 	bl	8005040 <__sinit>
 80050c6:	3648      	adds	r6, #72	; 0x48
 80050c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	d503      	bpl.n	80050d8 <__sfp+0x28>
 80050d0:	6833      	ldr	r3, [r6, #0]
 80050d2:	b30b      	cbz	r3, 8005118 <__sfp+0x68>
 80050d4:	6836      	ldr	r6, [r6, #0]
 80050d6:	e7f7      	b.n	80050c8 <__sfp+0x18>
 80050d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050dc:	b9d5      	cbnz	r5, 8005114 <__sfp+0x64>
 80050de:	4b16      	ldr	r3, [pc, #88]	; (8005138 <__sfp+0x88>)
 80050e0:	60e3      	str	r3, [r4, #12]
 80050e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050e6:	6665      	str	r5, [r4, #100]	; 0x64
 80050e8:	f000 f97e 	bl	80053e8 <__retarget_lock_init_recursive>
 80050ec:	f7ff ff96 	bl	800501c <__sfp_lock_release>
 80050f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050f8:	6025      	str	r5, [r4, #0]
 80050fa:	61a5      	str	r5, [r4, #24]
 80050fc:	2208      	movs	r2, #8
 80050fe:	4629      	mov	r1, r5
 8005100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005104:	f000 f9da 	bl	80054bc <memset>
 8005108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800510c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005110:	4620      	mov	r0, r4
 8005112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005114:	3468      	adds	r4, #104	; 0x68
 8005116:	e7d9      	b.n	80050cc <__sfp+0x1c>
 8005118:	2104      	movs	r1, #4
 800511a:	4638      	mov	r0, r7
 800511c:	f7ff ff62 	bl	8004fe4 <__sfmoreglue>
 8005120:	4604      	mov	r4, r0
 8005122:	6030      	str	r0, [r6, #0]
 8005124:	2800      	cmp	r0, #0
 8005126:	d1d5      	bne.n	80050d4 <__sfp+0x24>
 8005128:	f7ff ff78 	bl	800501c <__sfp_lock_release>
 800512c:	230c      	movs	r3, #12
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	e7ee      	b.n	8005110 <__sfp+0x60>
 8005132:	bf00      	nop
 8005134:	080066c0 	.word	0x080066c0
 8005138:	ffff0001 	.word	0xffff0001

0800513c <_fopen_r>:
 800513c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800513e:	460f      	mov	r7, r1
 8005140:	4611      	mov	r1, r2
 8005142:	aa01      	add	r2, sp, #4
 8005144:	4605      	mov	r5, r0
 8005146:	f000 fb7f 	bl	8005848 <__sflags>
 800514a:	4606      	mov	r6, r0
 800514c:	b918      	cbnz	r0, 8005156 <_fopen_r+0x1a>
 800514e:	2400      	movs	r4, #0
 8005150:	4620      	mov	r0, r4
 8005152:	b003      	add	sp, #12
 8005154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005156:	4628      	mov	r0, r5
 8005158:	f7ff ffaa 	bl	80050b0 <__sfp>
 800515c:	4604      	mov	r4, r0
 800515e:	2800      	cmp	r0, #0
 8005160:	d0f5      	beq.n	800514e <_fopen_r+0x12>
 8005162:	4639      	mov	r1, r7
 8005164:	9a01      	ldr	r2, [sp, #4]
 8005166:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800516a:	4628      	mov	r0, r5
 800516c:	f000 fa8e 	bl	800568c <_open_r>
 8005170:	1e07      	subs	r7, r0, #0
 8005172:	da09      	bge.n	8005188 <_fopen_r+0x4c>
 8005174:	2500      	movs	r5, #0
 8005176:	f7ff ff4b 	bl	8005010 <__sfp_lock_acquire>
 800517a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800517c:	81a5      	strh	r5, [r4, #12]
 800517e:	f000 f934 	bl	80053ea <__retarget_lock_close_recursive>
 8005182:	f7ff ff4b 	bl	800501c <__sfp_lock_release>
 8005186:	e7e2      	b.n	800514e <_fopen_r+0x12>
 8005188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800518a:	07db      	lsls	r3, r3, #31
 800518c:	d405      	bmi.n	800519a <_fopen_r+0x5e>
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	0598      	lsls	r0, r3, #22
 8005192:	d402      	bmi.n	800519a <_fopen_r+0x5e>
 8005194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005196:	f000 f929 	bl	80053ec <__retarget_lock_acquire_recursive>
 800519a:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <_fopen_r+0x98>)
 800519c:	6263      	str	r3, [r4, #36]	; 0x24
 800519e:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <_fopen_r+0x9c>)
 80051a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a2:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <_fopen_r+0xa0>)
 80051a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a6:	05f1      	lsls	r1, r6, #23
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <_fopen_r+0xa4>)
 80051aa:	81e7      	strh	r7, [r4, #14]
 80051ac:	81a6      	strh	r6, [r4, #12]
 80051ae:	6224      	str	r4, [r4, #32]
 80051b0:	6323      	str	r3, [r4, #48]	; 0x30
 80051b2:	d505      	bpl.n	80051c0 <_fopen_r+0x84>
 80051b4:	2302      	movs	r3, #2
 80051b6:	2200      	movs	r2, #0
 80051b8:	4621      	mov	r1, r4
 80051ba:	4628      	mov	r0, r5
 80051bc:	f000 f81a 	bl	80051f4 <_fseek_r>
 80051c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051c2:	07da      	lsls	r2, r3, #31
 80051c4:	d4c4      	bmi.n	8005150 <_fopen_r+0x14>
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	059b      	lsls	r3, r3, #22
 80051ca:	d4c1      	bmi.n	8005150 <_fopen_r+0x14>
 80051cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ce:	f000 f90e 	bl	80053ee <__retarget_lock_release_recursive>
 80051d2:	e7bd      	b.n	8005150 <_fopen_r+0x14>
 80051d4:	08005761 	.word	0x08005761
 80051d8:	08005783 	.word	0x08005783
 80051dc:	080057bb 	.word	0x080057bb
 80051e0:	080057df 	.word	0x080057df

080051e4 <fopen>:
 80051e4:	4b02      	ldr	r3, [pc, #8]	; (80051f0 <fopen+0xc>)
 80051e6:	460a      	mov	r2, r1
 80051e8:	4601      	mov	r1, r0
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	f7ff bfa6 	b.w	800513c <_fopen_r>
 80051f0:	20000018 	.word	0x20000018

080051f4 <_fseek_r>:
 80051f4:	f000 b800 	b.w	80051f8 <_fseeko_r>

080051f8 <_fseeko_r>:
 80051f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fc:	460c      	mov	r4, r1
 80051fe:	4617      	mov	r7, r2
 8005200:	461d      	mov	r5, r3
 8005202:	4606      	mov	r6, r0
 8005204:	b118      	cbz	r0, 800520e <_fseeko_r+0x16>
 8005206:	6983      	ldr	r3, [r0, #24]
 8005208:	b90b      	cbnz	r3, 800520e <_fseeko_r+0x16>
 800520a:	f7ff ff19 	bl	8005040 <__sinit>
 800520e:	4b51      	ldr	r3, [pc, #324]	; (8005354 <_fseeko_r+0x15c>)
 8005210:	429c      	cmp	r4, r3
 8005212:	d122      	bne.n	800525a <_fseeko_r+0x62>
 8005214:	6874      	ldr	r4, [r6, #4]
 8005216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005218:	07d9      	lsls	r1, r3, #31
 800521a:	d405      	bmi.n	8005228 <_fseeko_r+0x30>
 800521c:	89a3      	ldrh	r3, [r4, #12]
 800521e:	059a      	lsls	r2, r3, #22
 8005220:	d402      	bmi.n	8005228 <_fseeko_r+0x30>
 8005222:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005224:	f000 f8e2 	bl	80053ec <__retarget_lock_acquire_recursive>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800522e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8005232:	d103      	bne.n	800523c <_fseeko_r+0x44>
 8005234:	4621      	mov	r1, r4
 8005236:	4630      	mov	r0, r6
 8005238:	f7ff fe6e 	bl	8004f18 <_fflush_r>
 800523c:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8005240:	f1b8 0f00 	cmp.w	r8, #0
 8005244:	d113      	bne.n	800526e <_fseeko_r+0x76>
 8005246:	231d      	movs	r3, #29
 8005248:	6033      	str	r3, [r6, #0]
 800524a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800524c:	07d9      	lsls	r1, r3, #31
 800524e:	d578      	bpl.n	8005342 <_fseeko_r+0x14a>
 8005250:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005254:	4628      	mov	r0, r5
 8005256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800525a:	4b3f      	ldr	r3, [pc, #252]	; (8005358 <_fseeko_r+0x160>)
 800525c:	429c      	cmp	r4, r3
 800525e:	d101      	bne.n	8005264 <_fseeko_r+0x6c>
 8005260:	68b4      	ldr	r4, [r6, #8]
 8005262:	e7d8      	b.n	8005216 <_fseeko_r+0x1e>
 8005264:	4b3d      	ldr	r3, [pc, #244]	; (800535c <_fseeko_r+0x164>)
 8005266:	429c      	cmp	r4, r3
 8005268:	bf08      	it	eq
 800526a:	68f4      	ldreq	r4, [r6, #12]
 800526c:	e7d3      	b.n	8005216 <_fseeko_r+0x1e>
 800526e:	2d01      	cmp	r5, #1
 8005270:	d036      	beq.n	80052e0 <_fseeko_r+0xe8>
 8005272:	f035 0302 	bics.w	r3, r5, #2
 8005276:	d162      	bne.n	800533e <_fseeko_r+0x146>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	b91b      	cbnz	r3, 8005284 <_fseeko_r+0x8c>
 800527c:	4621      	mov	r1, r4
 800527e:	4630      	mov	r0, r6
 8005280:	f000 f8dc 	bl	800543c <__smakebuf_r>
 8005284:	4621      	mov	r1, r4
 8005286:	4630      	mov	r0, r6
 8005288:	f7ff fe46 	bl	8004f18 <_fflush_r>
 800528c:	2800      	cmp	r0, #0
 800528e:	d1dc      	bne.n	800524a <_fseeko_r+0x52>
 8005290:	6a21      	ldr	r1, [r4, #32]
 8005292:	462b      	mov	r3, r5
 8005294:	463a      	mov	r2, r7
 8005296:	4630      	mov	r0, r6
 8005298:	47c0      	blx	r8
 800529a:	3001      	adds	r0, #1
 800529c:	d0d5      	beq.n	800524a <_fseeko_r+0x52>
 800529e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052a0:	b141      	cbz	r1, 80052b4 <_fseeko_r+0xbc>
 80052a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052a6:	4299      	cmp	r1, r3
 80052a8:	d002      	beq.n	80052b0 <_fseeko_r+0xb8>
 80052aa:	4630      	mov	r0, r6
 80052ac:	f000 f90e 	bl	80054cc <_free_r>
 80052b0:	2300      	movs	r3, #0
 80052b2:	6363      	str	r3, [r4, #52]	; 0x34
 80052b4:	6923      	ldr	r3, [r4, #16]
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	2600      	movs	r6, #0
 80052bc:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80052c0:	6066      	str	r6, [r4, #4]
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	2208      	movs	r2, #8
 80052c6:	4631      	mov	r1, r6
 80052c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052cc:	f000 f8f6 	bl	80054bc <memset>
 80052d0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80052d2:	f015 0501 	ands.w	r5, r5, #1
 80052d6:	d13b      	bne.n	8005350 <_fseeko_r+0x158>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	059b      	lsls	r3, r3, #22
 80052dc:	d4ba      	bmi.n	8005254 <_fseeko_r+0x5c>
 80052de:	e021      	b.n	8005324 <_fseeko_r+0x12c>
 80052e0:	4621      	mov	r1, r4
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7ff fe18 	bl	8004f18 <_fflush_r>
 80052e8:	89a2      	ldrh	r2, [r4, #12]
 80052ea:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052ee:	d00c      	beq.n	800530a <_fseeko_r+0x112>
 80052f0:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	075a      	lsls	r2, r3, #29
 80052f6:	d519      	bpl.n	800532c <_fseeko_r+0x134>
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	1aed      	subs	r5, r5, r3
 80052fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052fe:	b10b      	cbz	r3, 8005304 <_fseeko_r+0x10c>
 8005300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005302:	1aed      	subs	r5, r5, r3
 8005304:	442f      	add	r7, r5
 8005306:	2500      	movs	r5, #0
 8005308:	e7b6      	b.n	8005278 <_fseeko_r+0x80>
 800530a:	462b      	mov	r3, r5
 800530c:	6a21      	ldr	r1, [r4, #32]
 800530e:	4630      	mov	r0, r6
 8005310:	47c0      	blx	r8
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	4605      	mov	r5, r0
 8005316:	d1ec      	bne.n	80052f2 <_fseeko_r+0xfa>
 8005318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800531a:	07d8      	lsls	r0, r3, #31
 800531c:	d498      	bmi.n	8005250 <_fseeko_r+0x58>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	0599      	lsls	r1, r3, #22
 8005322:	d495      	bmi.n	8005250 <_fseeko_r+0x58>
 8005324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005326:	f000 f862 	bl	80053ee <__retarget_lock_release_recursive>
 800532a:	e793      	b.n	8005254 <_fseeko_r+0x5c>
 800532c:	0718      	lsls	r0, r3, #28
 800532e:	d5e9      	bpl.n	8005304 <_fseeko_r+0x10c>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	6922      	ldr	r2, [r4, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0e5      	beq.n	8005304 <_fseeko_r+0x10c>
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	441d      	add	r5, r3
 800533c:	e7e2      	b.n	8005304 <_fseeko_r+0x10c>
 800533e:	2316      	movs	r3, #22
 8005340:	e782      	b.n	8005248 <_fseeko_r+0x50>
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	059a      	lsls	r2, r3, #22
 8005346:	d483      	bmi.n	8005250 <_fseeko_r+0x58>
 8005348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800534a:	f000 f850 	bl	80053ee <__retarget_lock_release_recursive>
 800534e:	e77f      	b.n	8005250 <_fseeko_r+0x58>
 8005350:	4635      	mov	r5, r6
 8005352:	e77f      	b.n	8005254 <_fseeko_r+0x5c>
 8005354:	08006680 	.word	0x08006680
 8005358:	080066a0 	.word	0x080066a0
 800535c:	08006660 	.word	0x08006660

08005360 <_fwalk_reent>:
 8005360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005364:	4606      	mov	r6, r0
 8005366:	4688      	mov	r8, r1
 8005368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800536c:	2700      	movs	r7, #0
 800536e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005372:	f1b9 0901 	subs.w	r9, r9, #1
 8005376:	d505      	bpl.n	8005384 <_fwalk_reent+0x24>
 8005378:	6824      	ldr	r4, [r4, #0]
 800537a:	2c00      	cmp	r4, #0
 800537c:	d1f7      	bne.n	800536e <_fwalk_reent+0xe>
 800537e:	4638      	mov	r0, r7
 8005380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005384:	89ab      	ldrh	r3, [r5, #12]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d907      	bls.n	800539a <_fwalk_reent+0x3a>
 800538a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800538e:	3301      	adds	r3, #1
 8005390:	d003      	beq.n	800539a <_fwalk_reent+0x3a>
 8005392:	4629      	mov	r1, r5
 8005394:	4630      	mov	r0, r6
 8005396:	47c0      	blx	r8
 8005398:	4307      	orrs	r7, r0
 800539a:	3568      	adds	r5, #104	; 0x68
 800539c:	e7e9      	b.n	8005372 <_fwalk_reent+0x12>
	...

080053a0 <__libc_init_array>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	4d0d      	ldr	r5, [pc, #52]	; (80053d8 <__libc_init_array+0x38>)
 80053a4:	4c0d      	ldr	r4, [pc, #52]	; (80053dc <__libc_init_array+0x3c>)
 80053a6:	1b64      	subs	r4, r4, r5
 80053a8:	10a4      	asrs	r4, r4, #2
 80053aa:	2600      	movs	r6, #0
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	d109      	bne.n	80053c4 <__libc_init_array+0x24>
 80053b0:	4d0b      	ldr	r5, [pc, #44]	; (80053e0 <__libc_init_array+0x40>)
 80053b2:	4c0c      	ldr	r4, [pc, #48]	; (80053e4 <__libc_init_array+0x44>)
 80053b4:	f001 f8a8 	bl	8006508 <_init>
 80053b8:	1b64      	subs	r4, r4, r5
 80053ba:	10a4      	asrs	r4, r4, #2
 80053bc:	2600      	movs	r6, #0
 80053be:	42a6      	cmp	r6, r4
 80053c0:	d105      	bne.n	80053ce <__libc_init_array+0x2e>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c8:	4798      	blx	r3
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7ee      	b.n	80053ac <__libc_init_array+0xc>
 80053ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d2:	4798      	blx	r3
 80053d4:	3601      	adds	r6, #1
 80053d6:	e7f2      	b.n	80053be <__libc_init_array+0x1e>
 80053d8:	080066f8 	.word	0x080066f8
 80053dc:	080066f8 	.word	0x080066f8
 80053e0:	080066f8 	.word	0x080066f8
 80053e4:	080066fc 	.word	0x080066fc

080053e8 <__retarget_lock_init_recursive>:
 80053e8:	4770      	bx	lr

080053ea <__retarget_lock_close_recursive>:
 80053ea:	4770      	bx	lr

080053ec <__retarget_lock_acquire_recursive>:
 80053ec:	4770      	bx	lr

080053ee <__retarget_lock_release_recursive>:
 80053ee:	4770      	bx	lr

080053f0 <__swhatbuf_r>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	460e      	mov	r6, r1
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	2900      	cmp	r1, #0
 80053fa:	b096      	sub	sp, #88	; 0x58
 80053fc:	4614      	mov	r4, r2
 80053fe:	461d      	mov	r5, r3
 8005400:	da08      	bge.n	8005414 <__swhatbuf_r+0x24>
 8005402:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	602a      	str	r2, [r5, #0]
 800540a:	061a      	lsls	r2, r3, #24
 800540c:	d410      	bmi.n	8005430 <__swhatbuf_r+0x40>
 800540e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005412:	e00e      	b.n	8005432 <__swhatbuf_r+0x42>
 8005414:	466a      	mov	r2, sp
 8005416:	f000 fa4d 	bl	80058b4 <_fstat_r>
 800541a:	2800      	cmp	r0, #0
 800541c:	dbf1      	blt.n	8005402 <__swhatbuf_r+0x12>
 800541e:	9a01      	ldr	r2, [sp, #4]
 8005420:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005424:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005428:	425a      	negs	r2, r3
 800542a:	415a      	adcs	r2, r3
 800542c:	602a      	str	r2, [r5, #0]
 800542e:	e7ee      	b.n	800540e <__swhatbuf_r+0x1e>
 8005430:	2340      	movs	r3, #64	; 0x40
 8005432:	2000      	movs	r0, #0
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	b016      	add	sp, #88	; 0x58
 8005438:	bd70      	pop	{r4, r5, r6, pc}
	...

0800543c <__smakebuf_r>:
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005440:	079d      	lsls	r5, r3, #30
 8005442:	4606      	mov	r6, r0
 8005444:	460c      	mov	r4, r1
 8005446:	d507      	bpl.n	8005458 <__smakebuf_r+0x1c>
 8005448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	6123      	str	r3, [r4, #16]
 8005450:	2301      	movs	r3, #1
 8005452:	6163      	str	r3, [r4, #20]
 8005454:	b002      	add	sp, #8
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	ab01      	add	r3, sp, #4
 800545a:	466a      	mov	r2, sp
 800545c:	f7ff ffc8 	bl	80053f0 <__swhatbuf_r>
 8005460:	9900      	ldr	r1, [sp, #0]
 8005462:	4605      	mov	r5, r0
 8005464:	4630      	mov	r0, r6
 8005466:	f000 f89d 	bl	80055a4 <_malloc_r>
 800546a:	b948      	cbnz	r0, 8005480 <__smakebuf_r+0x44>
 800546c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005470:	059a      	lsls	r2, r3, #22
 8005472:	d4ef      	bmi.n	8005454 <__smakebuf_r+0x18>
 8005474:	f023 0303 	bic.w	r3, r3, #3
 8005478:	f043 0302 	orr.w	r3, r3, #2
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	e7e3      	b.n	8005448 <__smakebuf_r+0xc>
 8005480:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <__smakebuf_r+0x7c>)
 8005482:	62b3      	str	r3, [r6, #40]	; 0x28
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	6020      	str	r0, [r4, #0]
 8005488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	9b00      	ldr	r3, [sp, #0]
 8005490:	6163      	str	r3, [r4, #20]
 8005492:	9b01      	ldr	r3, [sp, #4]
 8005494:	6120      	str	r0, [r4, #16]
 8005496:	b15b      	cbz	r3, 80054b0 <__smakebuf_r+0x74>
 8005498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800549c:	4630      	mov	r0, r6
 800549e:	f000 fa89 	bl	80059b4 <_isatty_r>
 80054a2:	b128      	cbz	r0, 80054b0 <__smakebuf_r+0x74>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	f023 0303 	bic.w	r3, r3, #3
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	81a3      	strh	r3, [r4, #12]
 80054b0:	89a0      	ldrh	r0, [r4, #12]
 80054b2:	4305      	orrs	r5, r0
 80054b4:	81a5      	strh	r5, [r4, #12]
 80054b6:	e7cd      	b.n	8005454 <__smakebuf_r+0x18>
 80054b8:	08004fd9 	.word	0x08004fd9

080054bc <memset>:
 80054bc:	4402      	add	r2, r0
 80054be:	4603      	mov	r3, r0
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d100      	bne.n	80054c6 <memset+0xa>
 80054c4:	4770      	bx	lr
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ca:	e7f9      	b.n	80054c0 <memset+0x4>

080054cc <_free_r>:
 80054cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ce:	2900      	cmp	r1, #0
 80054d0:	d044      	beq.n	800555c <_free_r+0x90>
 80054d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d6:	9001      	str	r0, [sp, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f1a1 0404 	sub.w	r4, r1, #4
 80054de:	bfb8      	it	lt
 80054e0:	18e4      	addlt	r4, r4, r3
 80054e2:	f000 fa89 	bl	80059f8 <__malloc_lock>
 80054e6:	4a1e      	ldr	r2, [pc, #120]	; (8005560 <_free_r+0x94>)
 80054e8:	9801      	ldr	r0, [sp, #4]
 80054ea:	6813      	ldr	r3, [r2, #0]
 80054ec:	b933      	cbnz	r3, 80054fc <_free_r+0x30>
 80054ee:	6063      	str	r3, [r4, #4]
 80054f0:	6014      	str	r4, [r2, #0]
 80054f2:	b003      	add	sp, #12
 80054f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054f8:	f000 ba84 	b.w	8005a04 <__malloc_unlock>
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	d908      	bls.n	8005512 <_free_r+0x46>
 8005500:	6825      	ldr	r5, [r4, #0]
 8005502:	1961      	adds	r1, r4, r5
 8005504:	428b      	cmp	r3, r1
 8005506:	bf01      	itttt	eq
 8005508:	6819      	ldreq	r1, [r3, #0]
 800550a:	685b      	ldreq	r3, [r3, #4]
 800550c:	1949      	addeq	r1, r1, r5
 800550e:	6021      	streq	r1, [r4, #0]
 8005510:	e7ed      	b.n	80054ee <_free_r+0x22>
 8005512:	461a      	mov	r2, r3
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	b10b      	cbz	r3, 800551c <_free_r+0x50>
 8005518:	42a3      	cmp	r3, r4
 800551a:	d9fa      	bls.n	8005512 <_free_r+0x46>
 800551c:	6811      	ldr	r1, [r2, #0]
 800551e:	1855      	adds	r5, r2, r1
 8005520:	42a5      	cmp	r5, r4
 8005522:	d10b      	bne.n	800553c <_free_r+0x70>
 8005524:	6824      	ldr	r4, [r4, #0]
 8005526:	4421      	add	r1, r4
 8005528:	1854      	adds	r4, r2, r1
 800552a:	42a3      	cmp	r3, r4
 800552c:	6011      	str	r1, [r2, #0]
 800552e:	d1e0      	bne.n	80054f2 <_free_r+0x26>
 8005530:	681c      	ldr	r4, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	6053      	str	r3, [r2, #4]
 8005536:	4421      	add	r1, r4
 8005538:	6011      	str	r1, [r2, #0]
 800553a:	e7da      	b.n	80054f2 <_free_r+0x26>
 800553c:	d902      	bls.n	8005544 <_free_r+0x78>
 800553e:	230c      	movs	r3, #12
 8005540:	6003      	str	r3, [r0, #0]
 8005542:	e7d6      	b.n	80054f2 <_free_r+0x26>
 8005544:	6825      	ldr	r5, [r4, #0]
 8005546:	1961      	adds	r1, r4, r5
 8005548:	428b      	cmp	r3, r1
 800554a:	bf04      	itt	eq
 800554c:	6819      	ldreq	r1, [r3, #0]
 800554e:	685b      	ldreq	r3, [r3, #4]
 8005550:	6063      	str	r3, [r4, #4]
 8005552:	bf04      	itt	eq
 8005554:	1949      	addeq	r1, r1, r5
 8005556:	6021      	streq	r1, [r4, #0]
 8005558:	6054      	str	r4, [r2, #4]
 800555a:	e7ca      	b.n	80054f2 <_free_r+0x26>
 800555c:	b003      	add	sp, #12
 800555e:	bd30      	pop	{r4, r5, pc}
 8005560:	20000488 	.word	0x20000488

08005564 <sbrk_aligned>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	4e0e      	ldr	r6, [pc, #56]	; (80055a0 <sbrk_aligned+0x3c>)
 8005568:	460c      	mov	r4, r1
 800556a:	6831      	ldr	r1, [r6, #0]
 800556c:	4605      	mov	r5, r0
 800556e:	b911      	cbnz	r1, 8005576 <sbrk_aligned+0x12>
 8005570:	f000 f8c6 	bl	8005700 <_sbrk_r>
 8005574:	6030      	str	r0, [r6, #0]
 8005576:	4621      	mov	r1, r4
 8005578:	4628      	mov	r0, r5
 800557a:	f000 f8c1 	bl	8005700 <_sbrk_r>
 800557e:	1c43      	adds	r3, r0, #1
 8005580:	d00a      	beq.n	8005598 <sbrk_aligned+0x34>
 8005582:	1cc4      	adds	r4, r0, #3
 8005584:	f024 0403 	bic.w	r4, r4, #3
 8005588:	42a0      	cmp	r0, r4
 800558a:	d007      	beq.n	800559c <sbrk_aligned+0x38>
 800558c:	1a21      	subs	r1, r4, r0
 800558e:	4628      	mov	r0, r5
 8005590:	f000 f8b6 	bl	8005700 <_sbrk_r>
 8005594:	3001      	adds	r0, #1
 8005596:	d101      	bne.n	800559c <sbrk_aligned+0x38>
 8005598:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800559c:	4620      	mov	r0, r4
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	2000048c 	.word	0x2000048c

080055a4 <_malloc_r>:
 80055a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a8:	1ccd      	adds	r5, r1, #3
 80055aa:	f025 0503 	bic.w	r5, r5, #3
 80055ae:	3508      	adds	r5, #8
 80055b0:	2d0c      	cmp	r5, #12
 80055b2:	bf38      	it	cc
 80055b4:	250c      	movcc	r5, #12
 80055b6:	2d00      	cmp	r5, #0
 80055b8:	4607      	mov	r7, r0
 80055ba:	db01      	blt.n	80055c0 <_malloc_r+0x1c>
 80055bc:	42a9      	cmp	r1, r5
 80055be:	d905      	bls.n	80055cc <_malloc_r+0x28>
 80055c0:	230c      	movs	r3, #12
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	2600      	movs	r6, #0
 80055c6:	4630      	mov	r0, r6
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055cc:	4e2e      	ldr	r6, [pc, #184]	; (8005688 <_malloc_r+0xe4>)
 80055ce:	f000 fa13 	bl	80059f8 <__malloc_lock>
 80055d2:	6833      	ldr	r3, [r6, #0]
 80055d4:	461c      	mov	r4, r3
 80055d6:	bb34      	cbnz	r4, 8005626 <_malloc_r+0x82>
 80055d8:	4629      	mov	r1, r5
 80055da:	4638      	mov	r0, r7
 80055dc:	f7ff ffc2 	bl	8005564 <sbrk_aligned>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	4604      	mov	r4, r0
 80055e4:	d14d      	bne.n	8005682 <_malloc_r+0xde>
 80055e6:	6834      	ldr	r4, [r6, #0]
 80055e8:	4626      	mov	r6, r4
 80055ea:	2e00      	cmp	r6, #0
 80055ec:	d140      	bne.n	8005670 <_malloc_r+0xcc>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	4631      	mov	r1, r6
 80055f2:	4638      	mov	r0, r7
 80055f4:	eb04 0803 	add.w	r8, r4, r3
 80055f8:	f000 f882 	bl	8005700 <_sbrk_r>
 80055fc:	4580      	cmp	r8, r0
 80055fe:	d13a      	bne.n	8005676 <_malloc_r+0xd2>
 8005600:	6821      	ldr	r1, [r4, #0]
 8005602:	3503      	adds	r5, #3
 8005604:	1a6d      	subs	r5, r5, r1
 8005606:	f025 0503 	bic.w	r5, r5, #3
 800560a:	3508      	adds	r5, #8
 800560c:	2d0c      	cmp	r5, #12
 800560e:	bf38      	it	cc
 8005610:	250c      	movcc	r5, #12
 8005612:	4629      	mov	r1, r5
 8005614:	4638      	mov	r0, r7
 8005616:	f7ff ffa5 	bl	8005564 <sbrk_aligned>
 800561a:	3001      	adds	r0, #1
 800561c:	d02b      	beq.n	8005676 <_malloc_r+0xd2>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	442b      	add	r3, r5
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	e00e      	b.n	8005644 <_malloc_r+0xa0>
 8005626:	6822      	ldr	r2, [r4, #0]
 8005628:	1b52      	subs	r2, r2, r5
 800562a:	d41e      	bmi.n	800566a <_malloc_r+0xc6>
 800562c:	2a0b      	cmp	r2, #11
 800562e:	d916      	bls.n	800565e <_malloc_r+0xba>
 8005630:	1961      	adds	r1, r4, r5
 8005632:	42a3      	cmp	r3, r4
 8005634:	6025      	str	r5, [r4, #0]
 8005636:	bf18      	it	ne
 8005638:	6059      	strne	r1, [r3, #4]
 800563a:	6863      	ldr	r3, [r4, #4]
 800563c:	bf08      	it	eq
 800563e:	6031      	streq	r1, [r6, #0]
 8005640:	5162      	str	r2, [r4, r5]
 8005642:	604b      	str	r3, [r1, #4]
 8005644:	4638      	mov	r0, r7
 8005646:	f104 060b 	add.w	r6, r4, #11
 800564a:	f000 f9db 	bl	8005a04 <__malloc_unlock>
 800564e:	f026 0607 	bic.w	r6, r6, #7
 8005652:	1d23      	adds	r3, r4, #4
 8005654:	1af2      	subs	r2, r6, r3
 8005656:	d0b6      	beq.n	80055c6 <_malloc_r+0x22>
 8005658:	1b9b      	subs	r3, r3, r6
 800565a:	50a3      	str	r3, [r4, r2]
 800565c:	e7b3      	b.n	80055c6 <_malloc_r+0x22>
 800565e:	6862      	ldr	r2, [r4, #4]
 8005660:	42a3      	cmp	r3, r4
 8005662:	bf0c      	ite	eq
 8005664:	6032      	streq	r2, [r6, #0]
 8005666:	605a      	strne	r2, [r3, #4]
 8005668:	e7ec      	b.n	8005644 <_malloc_r+0xa0>
 800566a:	4623      	mov	r3, r4
 800566c:	6864      	ldr	r4, [r4, #4]
 800566e:	e7b2      	b.n	80055d6 <_malloc_r+0x32>
 8005670:	4634      	mov	r4, r6
 8005672:	6876      	ldr	r6, [r6, #4]
 8005674:	e7b9      	b.n	80055ea <_malloc_r+0x46>
 8005676:	230c      	movs	r3, #12
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4638      	mov	r0, r7
 800567c:	f000 f9c2 	bl	8005a04 <__malloc_unlock>
 8005680:	e7a1      	b.n	80055c6 <_malloc_r+0x22>
 8005682:	6025      	str	r5, [r4, #0]
 8005684:	e7de      	b.n	8005644 <_malloc_r+0xa0>
 8005686:	bf00      	nop
 8005688:	20000488 	.word	0x20000488

0800568c <_open_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d07      	ldr	r5, [pc, #28]	; (80056ac <_open_r+0x20>)
 8005690:	4604      	mov	r4, r0
 8005692:	4608      	mov	r0, r1
 8005694:	4611      	mov	r1, r2
 8005696:	2200      	movs	r2, #0
 8005698:	602a      	str	r2, [r5, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f7fb fc96 	bl	8000fcc <_open>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_open_r+0x1e>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_open_r+0x1e>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20000490 	.word	0x20000490

080056b0 <iprintf>:
 80056b0:	b40f      	push	{r0, r1, r2, r3}
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <iprintf+0x2c>)
 80056b4:	b513      	push	{r0, r1, r4, lr}
 80056b6:	681c      	ldr	r4, [r3, #0]
 80056b8:	b124      	cbz	r4, 80056c4 <iprintf+0x14>
 80056ba:	69a3      	ldr	r3, [r4, #24]
 80056bc:	b913      	cbnz	r3, 80056c4 <iprintf+0x14>
 80056be:	4620      	mov	r0, r4
 80056c0:	f7ff fcbe 	bl	8005040 <__sinit>
 80056c4:	ab05      	add	r3, sp, #20
 80056c6:	9a04      	ldr	r2, [sp, #16]
 80056c8:	68a1      	ldr	r1, [r4, #8]
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 fb25 	bl	8005d1c <_vfiprintf_r>
 80056d2:	b002      	add	sp, #8
 80056d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d8:	b004      	add	sp, #16
 80056da:	4770      	bx	lr
 80056dc:	20000018 	.word	0x20000018

080056e0 <putw>:
 80056e0:	b507      	push	{r0, r1, r2, lr}
 80056e2:	460b      	mov	r3, r1
 80056e4:	2104      	movs	r1, #4
 80056e6:	9001      	str	r0, [sp, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	eb0d 0001 	add.w	r0, sp, r1
 80056ee:	f000 f953 	bl	8005998 <fwrite>
 80056f2:	3801      	subs	r0, #1
 80056f4:	bf18      	it	ne
 80056f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80056fa:	b003      	add	sp, #12
 80056fc:	f85d fb04 	ldr.w	pc, [sp], #4

08005700 <_sbrk_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4d06      	ldr	r5, [pc, #24]	; (800571c <_sbrk_r+0x1c>)
 8005704:	2300      	movs	r3, #0
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	602b      	str	r3, [r5, #0]
 800570c:	f7fb fc6c 	bl	8000fe8 <_sbrk>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_sbrk_r+0x1a>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	b103      	cbz	r3, 800571a <_sbrk_r+0x1a>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	20000490 	.word	0x20000490

08005720 <siprintf>:
 8005720:	b40e      	push	{r1, r2, r3}
 8005722:	b500      	push	{lr}
 8005724:	b09c      	sub	sp, #112	; 0x70
 8005726:	ab1d      	add	r3, sp, #116	; 0x74
 8005728:	9002      	str	r0, [sp, #8]
 800572a:	9006      	str	r0, [sp, #24]
 800572c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005730:	4809      	ldr	r0, [pc, #36]	; (8005758 <siprintf+0x38>)
 8005732:	9107      	str	r1, [sp, #28]
 8005734:	9104      	str	r1, [sp, #16]
 8005736:	4909      	ldr	r1, [pc, #36]	; (800575c <siprintf+0x3c>)
 8005738:	f853 2b04 	ldr.w	r2, [r3], #4
 800573c:	9105      	str	r1, [sp, #20]
 800573e:	6800      	ldr	r0, [r0, #0]
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	a902      	add	r1, sp, #8
 8005744:	f000 f9c0 	bl	8005ac8 <_svfiprintf_r>
 8005748:	9b02      	ldr	r3, [sp, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	b01c      	add	sp, #112	; 0x70
 8005750:	f85d eb04 	ldr.w	lr, [sp], #4
 8005754:	b003      	add	sp, #12
 8005756:	4770      	bx	lr
 8005758:	20000018 	.word	0x20000018
 800575c:	ffff0208 	.word	0xffff0208

08005760 <__sread>:
 8005760:	b510      	push	{r4, lr}
 8005762:	460c      	mov	r4, r1
 8005764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005768:	f000 fd9c 	bl	80062a4 <_read_r>
 800576c:	2800      	cmp	r0, #0
 800576e:	bfab      	itete	ge
 8005770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005772:	89a3      	ldrhlt	r3, [r4, #12]
 8005774:	181b      	addge	r3, r3, r0
 8005776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800577a:	bfac      	ite	ge
 800577c:	6563      	strge	r3, [r4, #84]	; 0x54
 800577e:	81a3      	strhlt	r3, [r4, #12]
 8005780:	bd10      	pop	{r4, pc}

08005782 <__swrite>:
 8005782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005786:	461f      	mov	r7, r3
 8005788:	898b      	ldrh	r3, [r1, #12]
 800578a:	05db      	lsls	r3, r3, #23
 800578c:	4605      	mov	r5, r0
 800578e:	460c      	mov	r4, r1
 8005790:	4616      	mov	r6, r2
 8005792:	d505      	bpl.n	80057a0 <__swrite+0x1e>
 8005794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005798:	2302      	movs	r3, #2
 800579a:	2200      	movs	r2, #0
 800579c:	f000 f91a 	bl	80059d4 <_lseek_r>
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057aa:	81a3      	strh	r3, [r4, #12]
 80057ac:	4632      	mov	r2, r6
 80057ae:	463b      	mov	r3, r7
 80057b0:	4628      	mov	r0, r5
 80057b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057b6:	f000 b825 	b.w	8005804 <_write_r>

080057ba <__sseek>:
 80057ba:	b510      	push	{r4, lr}
 80057bc:	460c      	mov	r4, r1
 80057be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c2:	f000 f907 	bl	80059d4 <_lseek_r>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	bf15      	itete	ne
 80057cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80057ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057d6:	81a3      	strheq	r3, [r4, #12]
 80057d8:	bf18      	it	ne
 80057da:	81a3      	strhne	r3, [r4, #12]
 80057dc:	bd10      	pop	{r4, pc}

080057de <__sclose>:
 80057de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e2:	f000 b821 	b.w	8005828 <_close_r>

080057e6 <strcat>:
 80057e6:	b510      	push	{r4, lr}
 80057e8:	4602      	mov	r2, r0
 80057ea:	7814      	ldrb	r4, [r2, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	3201      	adds	r2, #1
 80057f0:	2c00      	cmp	r4, #0
 80057f2:	d1fa      	bne.n	80057ea <strcat+0x4>
 80057f4:	3b01      	subs	r3, #1
 80057f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057fe:	2a00      	cmp	r2, #0
 8005800:	d1f9      	bne.n	80057f6 <strcat+0x10>
 8005802:	bd10      	pop	{r4, pc}

08005804 <_write_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d07      	ldr	r5, [pc, #28]	; (8005824 <_write_r+0x20>)
 8005808:	4604      	mov	r4, r0
 800580a:	4608      	mov	r0, r1
 800580c:	4611      	mov	r1, r2
 800580e:	2200      	movs	r2, #0
 8005810:	602a      	str	r2, [r5, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	f7fb fb8a 	bl	8000f2c <_write>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_write_r+0x1e>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b103      	cbz	r3, 8005822 <_write_r+0x1e>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	20000490 	.word	0x20000490

08005828 <_close_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4d06      	ldr	r5, [pc, #24]	; (8005844 <_close_r+0x1c>)
 800582c:	2300      	movs	r3, #0
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	f7fb fb96 	bl	8000f64 <_close>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_close_r+0x1a>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_close_r+0x1a>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	20000490 	.word	0x20000490

08005848 <__sflags>:
 8005848:	780b      	ldrb	r3, [r1, #0]
 800584a:	2b72      	cmp	r3, #114	; 0x72
 800584c:	b530      	push	{r4, r5, lr}
 800584e:	d022      	beq.n	8005896 <__sflags+0x4e>
 8005850:	2b77      	cmp	r3, #119	; 0x77
 8005852:	d024      	beq.n	800589e <__sflags+0x56>
 8005854:	2b61      	cmp	r3, #97	; 0x61
 8005856:	d027      	beq.n	80058a8 <__sflags+0x60>
 8005858:	2316      	movs	r3, #22
 800585a:	6003      	str	r3, [r0, #0]
 800585c:	2000      	movs	r0, #0
 800585e:	bd30      	pop	{r4, r5, pc}
 8005860:	2d62      	cmp	r5, #98	; 0x62
 8005862:	d012      	beq.n	800588a <__sflags+0x42>
 8005864:	2d78      	cmp	r5, #120	; 0x78
 8005866:	d013      	beq.n	8005890 <__sflags+0x48>
 8005868:	2d2b      	cmp	r5, #43	; 0x2b
 800586a:	d107      	bne.n	800587c <__sflags+0x34>
 800586c:	f020 001c 	bic.w	r0, r0, #28
 8005870:	f023 0303 	bic.w	r3, r3, #3
 8005874:	f040 0010 	orr.w	r0, r0, #16
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005880:	2d00      	cmp	r5, #0
 8005882:	d1ed      	bne.n	8005860 <__sflags+0x18>
 8005884:	4323      	orrs	r3, r4
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	e7e9      	b.n	800585e <__sflags+0x16>
 800588a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588e:	e7f5      	b.n	800587c <__sflags+0x34>
 8005890:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005894:	e7f2      	b.n	800587c <__sflags+0x34>
 8005896:	2400      	movs	r4, #0
 8005898:	4623      	mov	r3, r4
 800589a:	2004      	movs	r0, #4
 800589c:	e7ee      	b.n	800587c <__sflags+0x34>
 800589e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80058a2:	2301      	movs	r3, #1
 80058a4:	2008      	movs	r0, #8
 80058a6:	e7e9      	b.n	800587c <__sflags+0x34>
 80058a8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80058ac:	2301      	movs	r3, #1
 80058ae:	f44f 7084 	mov.w	r0, #264	; 0x108
 80058b2:	e7e3      	b.n	800587c <__sflags+0x34>

080058b4 <_fstat_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4d07      	ldr	r5, [pc, #28]	; (80058d4 <_fstat_r+0x20>)
 80058b8:	2300      	movs	r3, #0
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	4611      	mov	r1, r2
 80058c0:	602b      	str	r3, [r5, #0]
 80058c2:	f7fb fb5b 	bl	8000f7c <_fstat>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	d102      	bne.n	80058d0 <_fstat_r+0x1c>
 80058ca:	682b      	ldr	r3, [r5, #0]
 80058cc:	b103      	cbz	r3, 80058d0 <_fstat_r+0x1c>
 80058ce:	6023      	str	r3, [r4, #0]
 80058d0:	bd38      	pop	{r3, r4, r5, pc}
 80058d2:	bf00      	nop
 80058d4:	20000490 	.word	0x20000490

080058d8 <_fwrite_r>:
 80058d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058dc:	9c08      	ldr	r4, [sp, #32]
 80058de:	468a      	mov	sl, r1
 80058e0:	4690      	mov	r8, r2
 80058e2:	fb02 f903 	mul.w	r9, r2, r3
 80058e6:	4605      	mov	r5, r0
 80058e8:	b118      	cbz	r0, 80058f2 <_fwrite_r+0x1a>
 80058ea:	6983      	ldr	r3, [r0, #24]
 80058ec:	b90b      	cbnz	r3, 80058f2 <_fwrite_r+0x1a>
 80058ee:	f7ff fba7 	bl	8005040 <__sinit>
 80058f2:	4b26      	ldr	r3, [pc, #152]	; (800598c <_fwrite_r+0xb4>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d123      	bne.n	8005940 <_fwrite_r+0x68>
 80058f8:	686c      	ldr	r4, [r5, #4]
 80058fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058fc:	07de      	lsls	r6, r3, #31
 80058fe:	d405      	bmi.n	800590c <_fwrite_r+0x34>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	0598      	lsls	r0, r3, #22
 8005904:	d402      	bmi.n	800590c <_fwrite_r+0x34>
 8005906:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005908:	f7ff fd70 	bl	80053ec <__retarget_lock_acquire_recursive>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	0719      	lsls	r1, r3, #28
 8005910:	d520      	bpl.n	8005954 <_fwrite_r+0x7c>
 8005912:	6923      	ldr	r3, [r4, #16]
 8005914:	b1f3      	cbz	r3, 8005954 <_fwrite_r+0x7c>
 8005916:	2600      	movs	r6, #0
 8005918:	454e      	cmp	r6, r9
 800591a:	d029      	beq.n	8005970 <_fwrite_r+0x98>
 800591c:	68a7      	ldr	r7, [r4, #8]
 800591e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8005922:	3f01      	subs	r7, #1
 8005924:	2f00      	cmp	r7, #0
 8005926:	60a7      	str	r7, [r4, #8]
 8005928:	da04      	bge.n	8005934 <_fwrite_r+0x5c>
 800592a:	69a3      	ldr	r3, [r4, #24]
 800592c:	429f      	cmp	r7, r3
 800592e:	db19      	blt.n	8005964 <_fwrite_r+0x8c>
 8005930:	290a      	cmp	r1, #10
 8005932:	d017      	beq.n	8005964 <_fwrite_r+0x8c>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	7019      	strb	r1, [r3, #0]
 800593c:	3601      	adds	r6, #1
 800593e:	e7eb      	b.n	8005918 <_fwrite_r+0x40>
 8005940:	4b13      	ldr	r3, [pc, #76]	; (8005990 <_fwrite_r+0xb8>)
 8005942:	429c      	cmp	r4, r3
 8005944:	d101      	bne.n	800594a <_fwrite_r+0x72>
 8005946:	68ac      	ldr	r4, [r5, #8]
 8005948:	e7d7      	b.n	80058fa <_fwrite_r+0x22>
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <_fwrite_r+0xbc>)
 800594c:	429c      	cmp	r4, r3
 800594e:	bf08      	it	eq
 8005950:	68ec      	ldreq	r4, [r5, #12]
 8005952:	e7d2      	b.n	80058fa <_fwrite_r+0x22>
 8005954:	4621      	mov	r1, r4
 8005956:	4628      	mov	r0, r5
 8005958:	f000 fd08 	bl	800636c <__swsetup_r>
 800595c:	2800      	cmp	r0, #0
 800595e:	d0da      	beq.n	8005916 <_fwrite_r+0x3e>
 8005960:	2600      	movs	r6, #0
 8005962:	e005      	b.n	8005970 <_fwrite_r+0x98>
 8005964:	4622      	mov	r2, r4
 8005966:	4628      	mov	r0, r5
 8005968:	f000 fcae 	bl	80062c8 <__swbuf_r>
 800596c:	3001      	adds	r0, #1
 800596e:	d1e5      	bne.n	800593c <_fwrite_r+0x64>
 8005970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005972:	07da      	lsls	r2, r3, #31
 8005974:	d405      	bmi.n	8005982 <_fwrite_r+0xaa>
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	059b      	lsls	r3, r3, #22
 800597a:	d402      	bmi.n	8005982 <_fwrite_r+0xaa>
 800597c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800597e:	f7ff fd36 	bl	80053ee <__retarget_lock_release_recursive>
 8005982:	fbb6 f0f8 	udiv	r0, r6, r8
 8005986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598a:	bf00      	nop
 800598c:	08006680 	.word	0x08006680
 8005990:	080066a0 	.word	0x080066a0
 8005994:	08006660 	.word	0x08006660

08005998 <fwrite>:
 8005998:	b507      	push	{r0, r1, r2, lr}
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	460a      	mov	r2, r1
 80059a0:	4601      	mov	r1, r0
 80059a2:	4803      	ldr	r0, [pc, #12]	; (80059b0 <fwrite+0x18>)
 80059a4:	6800      	ldr	r0, [r0, #0]
 80059a6:	f7ff ff97 	bl	80058d8 <_fwrite_r>
 80059aa:	b003      	add	sp, #12
 80059ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80059b0:	20000018 	.word	0x20000018

080059b4 <_isatty_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d06      	ldr	r5, [pc, #24]	; (80059d0 <_isatty_r+0x1c>)
 80059b8:	2300      	movs	r3, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	f7fb faec 	bl	8000f9c <_isatty>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_isatty_r+0x1a>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_isatty_r+0x1a>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	20000490 	.word	0x20000490

080059d4 <_lseek_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4d07      	ldr	r5, [pc, #28]	; (80059f4 <_lseek_r+0x20>)
 80059d8:	4604      	mov	r4, r0
 80059da:	4608      	mov	r0, r1
 80059dc:	4611      	mov	r1, r2
 80059de:	2200      	movs	r2, #0
 80059e0:	602a      	str	r2, [r5, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	f7fb fae5 	bl	8000fb2 <_lseek>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_lseek_r+0x1e>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_lseek_r+0x1e>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20000490 	.word	0x20000490

080059f8 <__malloc_lock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__malloc_lock+0x8>)
 80059fa:	f7ff bcf7 	b.w	80053ec <__retarget_lock_acquire_recursive>
 80059fe:	bf00      	nop
 8005a00:	20000484 	.word	0x20000484

08005a04 <__malloc_unlock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <__malloc_unlock+0x8>)
 8005a06:	f7ff bcf2 	b.w	80053ee <__retarget_lock_release_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	20000484 	.word	0x20000484

08005a10 <__ssputs_r>:
 8005a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	688e      	ldr	r6, [r1, #8]
 8005a16:	429e      	cmp	r6, r3
 8005a18:	4682      	mov	sl, r0
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	4690      	mov	r8, r2
 8005a1e:	461f      	mov	r7, r3
 8005a20:	d838      	bhi.n	8005a94 <__ssputs_r+0x84>
 8005a22:	898a      	ldrh	r2, [r1, #12]
 8005a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a28:	d032      	beq.n	8005a90 <__ssputs_r+0x80>
 8005a2a:	6825      	ldr	r5, [r4, #0]
 8005a2c:	6909      	ldr	r1, [r1, #16]
 8005a2e:	eba5 0901 	sub.w	r9, r5, r1
 8005a32:	6965      	ldr	r5, [r4, #20]
 8005a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	444b      	add	r3, r9
 8005a40:	106d      	asrs	r5, r5, #1
 8005a42:	429d      	cmp	r5, r3
 8005a44:	bf38      	it	cc
 8005a46:	461d      	movcc	r5, r3
 8005a48:	0553      	lsls	r3, r2, #21
 8005a4a:	d531      	bpl.n	8005ab0 <__ssputs_r+0xa0>
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	f7ff fda9 	bl	80055a4 <_malloc_r>
 8005a52:	4606      	mov	r6, r0
 8005a54:	b950      	cbnz	r0, 8005a6c <__ssputs_r+0x5c>
 8005a56:	230c      	movs	r3, #12
 8005a58:	f8ca 3000 	str.w	r3, [sl]
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6c:	6921      	ldr	r1, [r4, #16]
 8005a6e:	464a      	mov	r2, r9
 8005a70:	f000 fcea 	bl	8006448 <memcpy>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7e:	81a3      	strh	r3, [r4, #12]
 8005a80:	6126      	str	r6, [r4, #16]
 8005a82:	6165      	str	r5, [r4, #20]
 8005a84:	444e      	add	r6, r9
 8005a86:	eba5 0509 	sub.w	r5, r5, r9
 8005a8a:	6026      	str	r6, [r4, #0]
 8005a8c:	60a5      	str	r5, [r4, #8]
 8005a8e:	463e      	mov	r6, r7
 8005a90:	42be      	cmp	r6, r7
 8005a92:	d900      	bls.n	8005a96 <__ssputs_r+0x86>
 8005a94:	463e      	mov	r6, r7
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	4632      	mov	r2, r6
 8005a9a:	4641      	mov	r1, r8
 8005a9c:	f000 fce2 	bl	8006464 <memmove>
 8005aa0:	68a3      	ldr	r3, [r4, #8]
 8005aa2:	1b9b      	subs	r3, r3, r6
 8005aa4:	60a3      	str	r3, [r4, #8]
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	4433      	add	r3, r6
 8005aaa:	6023      	str	r3, [r4, #0]
 8005aac:	2000      	movs	r0, #0
 8005aae:	e7db      	b.n	8005a68 <__ssputs_r+0x58>
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	f000 fcf1 	bl	8006498 <_realloc_r>
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d1e1      	bne.n	8005a80 <__ssputs_r+0x70>
 8005abc:	6921      	ldr	r1, [r4, #16]
 8005abe:	4650      	mov	r0, sl
 8005ac0:	f7ff fd04 	bl	80054cc <_free_r>
 8005ac4:	e7c7      	b.n	8005a56 <__ssputs_r+0x46>
	...

08005ac8 <_svfiprintf_r>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	4698      	mov	r8, r3
 8005ace:	898b      	ldrh	r3, [r1, #12]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	b09d      	sub	sp, #116	; 0x74
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	460d      	mov	r5, r1
 8005ad8:	4614      	mov	r4, r2
 8005ada:	d50e      	bpl.n	8005afa <_svfiprintf_r+0x32>
 8005adc:	690b      	ldr	r3, [r1, #16]
 8005ade:	b963      	cbnz	r3, 8005afa <_svfiprintf_r+0x32>
 8005ae0:	2140      	movs	r1, #64	; 0x40
 8005ae2:	f7ff fd5f 	bl	80055a4 <_malloc_r>
 8005ae6:	6028      	str	r0, [r5, #0]
 8005ae8:	6128      	str	r0, [r5, #16]
 8005aea:	b920      	cbnz	r0, 8005af6 <_svfiprintf_r+0x2e>
 8005aec:	230c      	movs	r3, #12
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005af4:	e0d1      	b.n	8005c9a <_svfiprintf_r+0x1d2>
 8005af6:	2340      	movs	r3, #64	; 0x40
 8005af8:	616b      	str	r3, [r5, #20]
 8005afa:	2300      	movs	r3, #0
 8005afc:	9309      	str	r3, [sp, #36]	; 0x24
 8005afe:	2320      	movs	r3, #32
 8005b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b08:	2330      	movs	r3, #48	; 0x30
 8005b0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005cb4 <_svfiprintf_r+0x1ec>
 8005b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b12:	f04f 0901 	mov.w	r9, #1
 8005b16:	4623      	mov	r3, r4
 8005b18:	469a      	mov	sl, r3
 8005b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b1e:	b10a      	cbz	r2, 8005b24 <_svfiprintf_r+0x5c>
 8005b20:	2a25      	cmp	r2, #37	; 0x25
 8005b22:	d1f9      	bne.n	8005b18 <_svfiprintf_r+0x50>
 8005b24:	ebba 0b04 	subs.w	fp, sl, r4
 8005b28:	d00b      	beq.n	8005b42 <_svfiprintf_r+0x7a>
 8005b2a:	465b      	mov	r3, fp
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4638      	mov	r0, r7
 8005b32:	f7ff ff6d 	bl	8005a10 <__ssputs_r>
 8005b36:	3001      	adds	r0, #1
 8005b38:	f000 80aa 	beq.w	8005c90 <_svfiprintf_r+0x1c8>
 8005b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b3e:	445a      	add	r2, fp
 8005b40:	9209      	str	r2, [sp, #36]	; 0x24
 8005b42:	f89a 3000 	ldrb.w	r3, [sl]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80a2 	beq.w	8005c90 <_svfiprintf_r+0x1c8>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b56:	f10a 0a01 	add.w	sl, sl, #1
 8005b5a:	9304      	str	r3, [sp, #16]
 8005b5c:	9307      	str	r3, [sp, #28]
 8005b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b62:	931a      	str	r3, [sp, #104]	; 0x68
 8005b64:	4654      	mov	r4, sl
 8005b66:	2205      	movs	r2, #5
 8005b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b6c:	4851      	ldr	r0, [pc, #324]	; (8005cb4 <_svfiprintf_r+0x1ec>)
 8005b6e:	f7fa fb07 	bl	8000180 <memchr>
 8005b72:	9a04      	ldr	r2, [sp, #16]
 8005b74:	b9d8      	cbnz	r0, 8005bae <_svfiprintf_r+0xe6>
 8005b76:	06d0      	lsls	r0, r2, #27
 8005b78:	bf44      	itt	mi
 8005b7a:	2320      	movmi	r3, #32
 8005b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b80:	0711      	lsls	r1, r2, #28
 8005b82:	bf44      	itt	mi
 8005b84:	232b      	movmi	r3, #43	; 0x2b
 8005b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b90:	d015      	beq.n	8005bbe <_svfiprintf_r+0xf6>
 8005b92:	9a07      	ldr	r2, [sp, #28]
 8005b94:	4654      	mov	r4, sl
 8005b96:	2000      	movs	r0, #0
 8005b98:	f04f 0c0a 	mov.w	ip, #10
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ba2:	3b30      	subs	r3, #48	; 0x30
 8005ba4:	2b09      	cmp	r3, #9
 8005ba6:	d94e      	bls.n	8005c46 <_svfiprintf_r+0x17e>
 8005ba8:	b1b0      	cbz	r0, 8005bd8 <_svfiprintf_r+0x110>
 8005baa:	9207      	str	r2, [sp, #28]
 8005bac:	e014      	b.n	8005bd8 <_svfiprintf_r+0x110>
 8005bae:	eba0 0308 	sub.w	r3, r0, r8
 8005bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	9304      	str	r3, [sp, #16]
 8005bba:	46a2      	mov	sl, r4
 8005bbc:	e7d2      	b.n	8005b64 <_svfiprintf_r+0x9c>
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	1d19      	adds	r1, r3, #4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	9103      	str	r1, [sp, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bfbb      	ittet	lt
 8005bca:	425b      	neglt	r3, r3
 8005bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8005bd0:	9307      	strge	r3, [sp, #28]
 8005bd2:	9307      	strlt	r3, [sp, #28]
 8005bd4:	bfb8      	it	lt
 8005bd6:	9204      	strlt	r2, [sp, #16]
 8005bd8:	7823      	ldrb	r3, [r4, #0]
 8005bda:	2b2e      	cmp	r3, #46	; 0x2e
 8005bdc:	d10c      	bne.n	8005bf8 <_svfiprintf_r+0x130>
 8005bde:	7863      	ldrb	r3, [r4, #1]
 8005be0:	2b2a      	cmp	r3, #42	; 0x2a
 8005be2:	d135      	bne.n	8005c50 <_svfiprintf_r+0x188>
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	1d1a      	adds	r2, r3, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	9203      	str	r2, [sp, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bfb8      	it	lt
 8005bf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005bf4:	3402      	adds	r4, #2
 8005bf6:	9305      	str	r3, [sp, #20]
 8005bf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cc4 <_svfiprintf_r+0x1fc>
 8005bfc:	7821      	ldrb	r1, [r4, #0]
 8005bfe:	2203      	movs	r2, #3
 8005c00:	4650      	mov	r0, sl
 8005c02:	f7fa fabd 	bl	8000180 <memchr>
 8005c06:	b140      	cbz	r0, 8005c1a <_svfiprintf_r+0x152>
 8005c08:	2340      	movs	r3, #64	; 0x40
 8005c0a:	eba0 000a 	sub.w	r0, r0, sl
 8005c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8005c12:	9b04      	ldr	r3, [sp, #16]
 8005c14:	4303      	orrs	r3, r0
 8005c16:	3401      	adds	r4, #1
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1e:	4826      	ldr	r0, [pc, #152]	; (8005cb8 <_svfiprintf_r+0x1f0>)
 8005c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c24:	2206      	movs	r2, #6
 8005c26:	f7fa faab 	bl	8000180 <memchr>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d038      	beq.n	8005ca0 <_svfiprintf_r+0x1d8>
 8005c2e:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <_svfiprintf_r+0x1f4>)
 8005c30:	bb1b      	cbnz	r3, 8005c7a <_svfiprintf_r+0x1b2>
 8005c32:	9b03      	ldr	r3, [sp, #12]
 8005c34:	3307      	adds	r3, #7
 8005c36:	f023 0307 	bic.w	r3, r3, #7
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	4433      	add	r3, r6
 8005c42:	9309      	str	r3, [sp, #36]	; 0x24
 8005c44:	e767      	b.n	8005b16 <_svfiprintf_r+0x4e>
 8005c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	e7a5      	b.n	8005b9c <_svfiprintf_r+0xd4>
 8005c50:	2300      	movs	r3, #0
 8005c52:	3401      	adds	r4, #1
 8005c54:	9305      	str	r3, [sp, #20]
 8005c56:	4619      	mov	r1, r3
 8005c58:	f04f 0c0a 	mov.w	ip, #10
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c62:	3a30      	subs	r2, #48	; 0x30
 8005c64:	2a09      	cmp	r2, #9
 8005c66:	d903      	bls.n	8005c70 <_svfiprintf_r+0x1a8>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0c5      	beq.n	8005bf8 <_svfiprintf_r+0x130>
 8005c6c:	9105      	str	r1, [sp, #20]
 8005c6e:	e7c3      	b.n	8005bf8 <_svfiprintf_r+0x130>
 8005c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c74:	4604      	mov	r4, r0
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7f0      	b.n	8005c5c <_svfiprintf_r+0x194>
 8005c7a:	ab03      	add	r3, sp, #12
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	462a      	mov	r2, r5
 8005c80:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <_svfiprintf_r+0x1f8>)
 8005c82:	a904      	add	r1, sp, #16
 8005c84:	4638      	mov	r0, r7
 8005c86:	f3af 8000 	nop.w
 8005c8a:	1c42      	adds	r2, r0, #1
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	d1d6      	bne.n	8005c3e <_svfiprintf_r+0x176>
 8005c90:	89ab      	ldrh	r3, [r5, #12]
 8005c92:	065b      	lsls	r3, r3, #25
 8005c94:	f53f af2c 	bmi.w	8005af0 <_svfiprintf_r+0x28>
 8005c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c9a:	b01d      	add	sp, #116	; 0x74
 8005c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca0:	ab03      	add	r3, sp, #12
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <_svfiprintf_r+0x1f8>)
 8005ca8:	a904      	add	r1, sp, #16
 8005caa:	4638      	mov	r0, r7
 8005cac:	f000 f9d4 	bl	8006058 <_printf_i>
 8005cb0:	e7eb      	b.n	8005c8a <_svfiprintf_r+0x1c2>
 8005cb2:	bf00      	nop
 8005cb4:	080066c4 	.word	0x080066c4
 8005cb8:	080066ce 	.word	0x080066ce
 8005cbc:	00000000 	.word	0x00000000
 8005cc0:	08005a11 	.word	0x08005a11
 8005cc4:	080066ca 	.word	0x080066ca

08005cc8 <__sfputc_r>:
 8005cc8:	6893      	ldr	r3, [r2, #8]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	b410      	push	{r4}
 8005cd0:	6093      	str	r3, [r2, #8]
 8005cd2:	da08      	bge.n	8005ce6 <__sfputc_r+0x1e>
 8005cd4:	6994      	ldr	r4, [r2, #24]
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	db01      	blt.n	8005cde <__sfputc_r+0x16>
 8005cda:	290a      	cmp	r1, #10
 8005cdc:	d103      	bne.n	8005ce6 <__sfputc_r+0x1e>
 8005cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ce2:	f000 baf1 	b.w	80062c8 <__swbuf_r>
 8005ce6:	6813      	ldr	r3, [r2, #0]
 8005ce8:	1c58      	adds	r0, r3, #1
 8005cea:	6010      	str	r0, [r2, #0]
 8005cec:	7019      	strb	r1, [r3, #0]
 8005cee:	4608      	mov	r0, r1
 8005cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <__sfputs_r>:
 8005cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	460f      	mov	r7, r1
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	18d5      	adds	r5, r2, r3
 8005d00:	42ac      	cmp	r4, r5
 8005d02:	d101      	bne.n	8005d08 <__sfputs_r+0x12>
 8005d04:	2000      	movs	r0, #0
 8005d06:	e007      	b.n	8005d18 <__sfputs_r+0x22>
 8005d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0c:	463a      	mov	r2, r7
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f7ff ffda 	bl	8005cc8 <__sfputc_r>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d1f3      	bne.n	8005d00 <__sfputs_r+0xa>
 8005d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d1c <_vfiprintf_r>:
 8005d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d20:	460d      	mov	r5, r1
 8005d22:	b09d      	sub	sp, #116	; 0x74
 8005d24:	4614      	mov	r4, r2
 8005d26:	4698      	mov	r8, r3
 8005d28:	4606      	mov	r6, r0
 8005d2a:	b118      	cbz	r0, 8005d34 <_vfiprintf_r+0x18>
 8005d2c:	6983      	ldr	r3, [r0, #24]
 8005d2e:	b90b      	cbnz	r3, 8005d34 <_vfiprintf_r+0x18>
 8005d30:	f7ff f986 	bl	8005040 <__sinit>
 8005d34:	4b89      	ldr	r3, [pc, #548]	; (8005f5c <_vfiprintf_r+0x240>)
 8005d36:	429d      	cmp	r5, r3
 8005d38:	d11b      	bne.n	8005d72 <_vfiprintf_r+0x56>
 8005d3a:	6875      	ldr	r5, [r6, #4]
 8005d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d3e:	07d9      	lsls	r1, r3, #31
 8005d40:	d405      	bmi.n	8005d4e <_vfiprintf_r+0x32>
 8005d42:	89ab      	ldrh	r3, [r5, #12]
 8005d44:	059a      	lsls	r2, r3, #22
 8005d46:	d402      	bmi.n	8005d4e <_vfiprintf_r+0x32>
 8005d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d4a:	f7ff fb4f 	bl	80053ec <__retarget_lock_acquire_recursive>
 8005d4e:	89ab      	ldrh	r3, [r5, #12]
 8005d50:	071b      	lsls	r3, r3, #28
 8005d52:	d501      	bpl.n	8005d58 <_vfiprintf_r+0x3c>
 8005d54:	692b      	ldr	r3, [r5, #16]
 8005d56:	b9eb      	cbnz	r3, 8005d94 <_vfiprintf_r+0x78>
 8005d58:	4629      	mov	r1, r5
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f000 fb06 	bl	800636c <__swsetup_r>
 8005d60:	b1c0      	cbz	r0, 8005d94 <_vfiprintf_r+0x78>
 8005d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d64:	07dc      	lsls	r4, r3, #31
 8005d66:	d50e      	bpl.n	8005d86 <_vfiprintf_r+0x6a>
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d6c:	b01d      	add	sp, #116	; 0x74
 8005d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d72:	4b7b      	ldr	r3, [pc, #492]	; (8005f60 <_vfiprintf_r+0x244>)
 8005d74:	429d      	cmp	r5, r3
 8005d76:	d101      	bne.n	8005d7c <_vfiprintf_r+0x60>
 8005d78:	68b5      	ldr	r5, [r6, #8]
 8005d7a:	e7df      	b.n	8005d3c <_vfiprintf_r+0x20>
 8005d7c:	4b79      	ldr	r3, [pc, #484]	; (8005f64 <_vfiprintf_r+0x248>)
 8005d7e:	429d      	cmp	r5, r3
 8005d80:	bf08      	it	eq
 8005d82:	68f5      	ldreq	r5, [r6, #12]
 8005d84:	e7da      	b.n	8005d3c <_vfiprintf_r+0x20>
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	0598      	lsls	r0, r3, #22
 8005d8a:	d4ed      	bmi.n	8005d68 <_vfiprintf_r+0x4c>
 8005d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d8e:	f7ff fb2e 	bl	80053ee <__retarget_lock_release_recursive>
 8005d92:	e7e9      	b.n	8005d68 <_vfiprintf_r+0x4c>
 8005d94:	2300      	movs	r3, #0
 8005d96:	9309      	str	r3, [sp, #36]	; 0x24
 8005d98:	2320      	movs	r3, #32
 8005d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005da2:	2330      	movs	r3, #48	; 0x30
 8005da4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f68 <_vfiprintf_r+0x24c>
 8005da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dac:	f04f 0901 	mov.w	r9, #1
 8005db0:	4623      	mov	r3, r4
 8005db2:	469a      	mov	sl, r3
 8005db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005db8:	b10a      	cbz	r2, 8005dbe <_vfiprintf_r+0xa2>
 8005dba:	2a25      	cmp	r2, #37	; 0x25
 8005dbc:	d1f9      	bne.n	8005db2 <_vfiprintf_r+0x96>
 8005dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8005dc2:	d00b      	beq.n	8005ddc <_vfiprintf_r+0xc0>
 8005dc4:	465b      	mov	r3, fp
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f7ff ff93 	bl	8005cf6 <__sfputs_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	f000 80aa 	beq.w	8005f2a <_vfiprintf_r+0x20e>
 8005dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dd8:	445a      	add	r2, fp
 8005dda:	9209      	str	r2, [sp, #36]	; 0x24
 8005ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80a2 	beq.w	8005f2a <_vfiprintf_r+0x20e>
 8005de6:	2300      	movs	r3, #0
 8005de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005df0:	f10a 0a01 	add.w	sl, sl, #1
 8005df4:	9304      	str	r3, [sp, #16]
 8005df6:	9307      	str	r3, [sp, #28]
 8005df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8005dfe:	4654      	mov	r4, sl
 8005e00:	2205      	movs	r2, #5
 8005e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e06:	4858      	ldr	r0, [pc, #352]	; (8005f68 <_vfiprintf_r+0x24c>)
 8005e08:	f7fa f9ba 	bl	8000180 <memchr>
 8005e0c:	9a04      	ldr	r2, [sp, #16]
 8005e0e:	b9d8      	cbnz	r0, 8005e48 <_vfiprintf_r+0x12c>
 8005e10:	06d1      	lsls	r1, r2, #27
 8005e12:	bf44      	itt	mi
 8005e14:	2320      	movmi	r3, #32
 8005e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e1a:	0713      	lsls	r3, r2, #28
 8005e1c:	bf44      	itt	mi
 8005e1e:	232b      	movmi	r3, #43	; 0x2b
 8005e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e24:	f89a 3000 	ldrb.w	r3, [sl]
 8005e28:	2b2a      	cmp	r3, #42	; 0x2a
 8005e2a:	d015      	beq.n	8005e58 <_vfiprintf_r+0x13c>
 8005e2c:	9a07      	ldr	r2, [sp, #28]
 8005e2e:	4654      	mov	r4, sl
 8005e30:	2000      	movs	r0, #0
 8005e32:	f04f 0c0a 	mov.w	ip, #10
 8005e36:	4621      	mov	r1, r4
 8005e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e3c:	3b30      	subs	r3, #48	; 0x30
 8005e3e:	2b09      	cmp	r3, #9
 8005e40:	d94e      	bls.n	8005ee0 <_vfiprintf_r+0x1c4>
 8005e42:	b1b0      	cbz	r0, 8005e72 <_vfiprintf_r+0x156>
 8005e44:	9207      	str	r2, [sp, #28]
 8005e46:	e014      	b.n	8005e72 <_vfiprintf_r+0x156>
 8005e48:	eba0 0308 	sub.w	r3, r0, r8
 8005e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e50:	4313      	orrs	r3, r2
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	46a2      	mov	sl, r4
 8005e56:	e7d2      	b.n	8005dfe <_vfiprintf_r+0xe2>
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	1d19      	adds	r1, r3, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	9103      	str	r1, [sp, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bfbb      	ittet	lt
 8005e64:	425b      	neglt	r3, r3
 8005e66:	f042 0202 	orrlt.w	r2, r2, #2
 8005e6a:	9307      	strge	r3, [sp, #28]
 8005e6c:	9307      	strlt	r3, [sp, #28]
 8005e6e:	bfb8      	it	lt
 8005e70:	9204      	strlt	r2, [sp, #16]
 8005e72:	7823      	ldrb	r3, [r4, #0]
 8005e74:	2b2e      	cmp	r3, #46	; 0x2e
 8005e76:	d10c      	bne.n	8005e92 <_vfiprintf_r+0x176>
 8005e78:	7863      	ldrb	r3, [r4, #1]
 8005e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e7c:	d135      	bne.n	8005eea <_vfiprintf_r+0x1ce>
 8005e7e:	9b03      	ldr	r3, [sp, #12]
 8005e80:	1d1a      	adds	r2, r3, #4
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	9203      	str	r2, [sp, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bfb8      	it	lt
 8005e8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e8e:	3402      	adds	r4, #2
 8005e90:	9305      	str	r3, [sp, #20]
 8005e92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f78 <_vfiprintf_r+0x25c>
 8005e96:	7821      	ldrb	r1, [r4, #0]
 8005e98:	2203      	movs	r2, #3
 8005e9a:	4650      	mov	r0, sl
 8005e9c:	f7fa f970 	bl	8000180 <memchr>
 8005ea0:	b140      	cbz	r0, 8005eb4 <_vfiprintf_r+0x198>
 8005ea2:	2340      	movs	r3, #64	; 0x40
 8005ea4:	eba0 000a 	sub.w	r0, r0, sl
 8005ea8:	fa03 f000 	lsl.w	r0, r3, r0
 8005eac:	9b04      	ldr	r3, [sp, #16]
 8005eae:	4303      	orrs	r3, r0
 8005eb0:	3401      	adds	r4, #1
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb8:	482c      	ldr	r0, [pc, #176]	; (8005f6c <_vfiprintf_r+0x250>)
 8005eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ebe:	2206      	movs	r2, #6
 8005ec0:	f7fa f95e 	bl	8000180 <memchr>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d03f      	beq.n	8005f48 <_vfiprintf_r+0x22c>
 8005ec8:	4b29      	ldr	r3, [pc, #164]	; (8005f70 <_vfiprintf_r+0x254>)
 8005eca:	bb1b      	cbnz	r3, 8005f14 <_vfiprintf_r+0x1f8>
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	3307      	adds	r3, #7
 8005ed0:	f023 0307 	bic.w	r3, r3, #7
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	9303      	str	r3, [sp, #12]
 8005ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eda:	443b      	add	r3, r7
 8005edc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ede:	e767      	b.n	8005db0 <_vfiprintf_r+0x94>
 8005ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	e7a5      	b.n	8005e36 <_vfiprintf_r+0x11a>
 8005eea:	2300      	movs	r3, #0
 8005eec:	3401      	adds	r4, #1
 8005eee:	9305      	str	r3, [sp, #20]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f04f 0c0a 	mov.w	ip, #10
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005efc:	3a30      	subs	r2, #48	; 0x30
 8005efe:	2a09      	cmp	r2, #9
 8005f00:	d903      	bls.n	8005f0a <_vfiprintf_r+0x1ee>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0c5      	beq.n	8005e92 <_vfiprintf_r+0x176>
 8005f06:	9105      	str	r1, [sp, #20]
 8005f08:	e7c3      	b.n	8005e92 <_vfiprintf_r+0x176>
 8005f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f0e:	4604      	mov	r4, r0
 8005f10:	2301      	movs	r3, #1
 8005f12:	e7f0      	b.n	8005ef6 <_vfiprintf_r+0x1da>
 8005f14:	ab03      	add	r3, sp, #12
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	462a      	mov	r2, r5
 8005f1a:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <_vfiprintf_r+0x258>)
 8005f1c:	a904      	add	r1, sp, #16
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f3af 8000 	nop.w
 8005f24:	4607      	mov	r7, r0
 8005f26:	1c78      	adds	r0, r7, #1
 8005f28:	d1d6      	bne.n	8005ed8 <_vfiprintf_r+0x1bc>
 8005f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f2c:	07d9      	lsls	r1, r3, #31
 8005f2e:	d405      	bmi.n	8005f3c <_vfiprintf_r+0x220>
 8005f30:	89ab      	ldrh	r3, [r5, #12]
 8005f32:	059a      	lsls	r2, r3, #22
 8005f34:	d402      	bmi.n	8005f3c <_vfiprintf_r+0x220>
 8005f36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f38:	f7ff fa59 	bl	80053ee <__retarget_lock_release_recursive>
 8005f3c:	89ab      	ldrh	r3, [r5, #12]
 8005f3e:	065b      	lsls	r3, r3, #25
 8005f40:	f53f af12 	bmi.w	8005d68 <_vfiprintf_r+0x4c>
 8005f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f46:	e711      	b.n	8005d6c <_vfiprintf_r+0x50>
 8005f48:	ab03      	add	r3, sp, #12
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	462a      	mov	r2, r5
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <_vfiprintf_r+0x258>)
 8005f50:	a904      	add	r1, sp, #16
 8005f52:	4630      	mov	r0, r6
 8005f54:	f000 f880 	bl	8006058 <_printf_i>
 8005f58:	e7e4      	b.n	8005f24 <_vfiprintf_r+0x208>
 8005f5a:	bf00      	nop
 8005f5c:	08006680 	.word	0x08006680
 8005f60:	080066a0 	.word	0x080066a0
 8005f64:	08006660 	.word	0x08006660
 8005f68:	080066c4 	.word	0x080066c4
 8005f6c:	080066ce 	.word	0x080066ce
 8005f70:	00000000 	.word	0x00000000
 8005f74:	08005cf7 	.word	0x08005cf7
 8005f78:	080066ca 	.word	0x080066ca

08005f7c <_printf_common>:
 8005f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	4616      	mov	r6, r2
 8005f82:	4699      	mov	r9, r3
 8005f84:	688a      	ldr	r2, [r1, #8]
 8005f86:	690b      	ldr	r3, [r1, #16]
 8005f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	bfb8      	it	lt
 8005f90:	4613      	movlt	r3, r2
 8005f92:	6033      	str	r3, [r6, #0]
 8005f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f98:	4607      	mov	r7, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	b10a      	cbz	r2, 8005fa2 <_printf_common+0x26>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	0699      	lsls	r1, r3, #26
 8005fa6:	bf42      	ittt	mi
 8005fa8:	6833      	ldrmi	r3, [r6, #0]
 8005faa:	3302      	addmi	r3, #2
 8005fac:	6033      	strmi	r3, [r6, #0]
 8005fae:	6825      	ldr	r5, [r4, #0]
 8005fb0:	f015 0506 	ands.w	r5, r5, #6
 8005fb4:	d106      	bne.n	8005fc4 <_printf_common+0x48>
 8005fb6:	f104 0a19 	add.w	sl, r4, #25
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	6832      	ldr	r2, [r6, #0]
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	42ab      	cmp	r3, r5
 8005fc2:	dc26      	bgt.n	8006012 <_printf_common+0x96>
 8005fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fc8:	1e13      	subs	r3, r2, #0
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	bf18      	it	ne
 8005fce:	2301      	movne	r3, #1
 8005fd0:	0692      	lsls	r2, r2, #26
 8005fd2:	d42b      	bmi.n	800602c <_printf_common+0xb0>
 8005fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4638      	mov	r0, r7
 8005fdc:	47c0      	blx	r8
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d01e      	beq.n	8006020 <_printf_common+0xa4>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	68e5      	ldr	r5, [r4, #12]
 8005fe6:	6832      	ldr	r2, [r6, #0]
 8005fe8:	f003 0306 	and.w	r3, r3, #6
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	bf08      	it	eq
 8005ff0:	1aad      	subeq	r5, r5, r2
 8005ff2:	68a3      	ldr	r3, [r4, #8]
 8005ff4:	6922      	ldr	r2, [r4, #16]
 8005ff6:	bf0c      	ite	eq
 8005ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ffc:	2500      	movne	r5, #0
 8005ffe:	4293      	cmp	r3, r2
 8006000:	bfc4      	itt	gt
 8006002:	1a9b      	subgt	r3, r3, r2
 8006004:	18ed      	addgt	r5, r5, r3
 8006006:	2600      	movs	r6, #0
 8006008:	341a      	adds	r4, #26
 800600a:	42b5      	cmp	r5, r6
 800600c:	d11a      	bne.n	8006044 <_printf_common+0xc8>
 800600e:	2000      	movs	r0, #0
 8006010:	e008      	b.n	8006024 <_printf_common+0xa8>
 8006012:	2301      	movs	r3, #1
 8006014:	4652      	mov	r2, sl
 8006016:	4649      	mov	r1, r9
 8006018:	4638      	mov	r0, r7
 800601a:	47c0      	blx	r8
 800601c:	3001      	adds	r0, #1
 800601e:	d103      	bne.n	8006028 <_printf_common+0xac>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	3501      	adds	r5, #1
 800602a:	e7c6      	b.n	8005fba <_printf_common+0x3e>
 800602c:	18e1      	adds	r1, r4, r3
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	2030      	movs	r0, #48	; 0x30
 8006032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006036:	4422      	add	r2, r4
 8006038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800603c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006040:	3302      	adds	r3, #2
 8006042:	e7c7      	b.n	8005fd4 <_printf_common+0x58>
 8006044:	2301      	movs	r3, #1
 8006046:	4622      	mov	r2, r4
 8006048:	4649      	mov	r1, r9
 800604a:	4638      	mov	r0, r7
 800604c:	47c0      	blx	r8
 800604e:	3001      	adds	r0, #1
 8006050:	d0e6      	beq.n	8006020 <_printf_common+0xa4>
 8006052:	3601      	adds	r6, #1
 8006054:	e7d9      	b.n	800600a <_printf_common+0x8e>
	...

08006058 <_printf_i>:
 8006058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	7e0f      	ldrb	r7, [r1, #24]
 800605e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006060:	2f78      	cmp	r7, #120	; 0x78
 8006062:	4691      	mov	r9, r2
 8006064:	4680      	mov	r8, r0
 8006066:	460c      	mov	r4, r1
 8006068:	469a      	mov	sl, r3
 800606a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800606e:	d807      	bhi.n	8006080 <_printf_i+0x28>
 8006070:	2f62      	cmp	r7, #98	; 0x62
 8006072:	d80a      	bhi.n	800608a <_printf_i+0x32>
 8006074:	2f00      	cmp	r7, #0
 8006076:	f000 80d8 	beq.w	800622a <_printf_i+0x1d2>
 800607a:	2f58      	cmp	r7, #88	; 0x58
 800607c:	f000 80a3 	beq.w	80061c6 <_printf_i+0x16e>
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006088:	e03a      	b.n	8006100 <_printf_i+0xa8>
 800608a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800608e:	2b15      	cmp	r3, #21
 8006090:	d8f6      	bhi.n	8006080 <_printf_i+0x28>
 8006092:	a101      	add	r1, pc, #4	; (adr r1, 8006098 <_printf_i+0x40>)
 8006094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006098:	080060f1 	.word	0x080060f1
 800609c:	08006105 	.word	0x08006105
 80060a0:	08006081 	.word	0x08006081
 80060a4:	08006081 	.word	0x08006081
 80060a8:	08006081 	.word	0x08006081
 80060ac:	08006081 	.word	0x08006081
 80060b0:	08006105 	.word	0x08006105
 80060b4:	08006081 	.word	0x08006081
 80060b8:	08006081 	.word	0x08006081
 80060bc:	08006081 	.word	0x08006081
 80060c0:	08006081 	.word	0x08006081
 80060c4:	08006211 	.word	0x08006211
 80060c8:	08006135 	.word	0x08006135
 80060cc:	080061f3 	.word	0x080061f3
 80060d0:	08006081 	.word	0x08006081
 80060d4:	08006081 	.word	0x08006081
 80060d8:	08006233 	.word	0x08006233
 80060dc:	08006081 	.word	0x08006081
 80060e0:	08006135 	.word	0x08006135
 80060e4:	08006081 	.word	0x08006081
 80060e8:	08006081 	.word	0x08006081
 80060ec:	080061fb 	.word	0x080061fb
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	602a      	str	r2, [r5, #0]
 80060f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006100:	2301      	movs	r3, #1
 8006102:	e0a3      	b.n	800624c <_printf_i+0x1f4>
 8006104:	6820      	ldr	r0, [r4, #0]
 8006106:	6829      	ldr	r1, [r5, #0]
 8006108:	0606      	lsls	r6, r0, #24
 800610a:	f101 0304 	add.w	r3, r1, #4
 800610e:	d50a      	bpl.n	8006126 <_printf_i+0xce>
 8006110:	680e      	ldr	r6, [r1, #0]
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	2e00      	cmp	r6, #0
 8006116:	da03      	bge.n	8006120 <_printf_i+0xc8>
 8006118:	232d      	movs	r3, #45	; 0x2d
 800611a:	4276      	negs	r6, r6
 800611c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006120:	485e      	ldr	r0, [pc, #376]	; (800629c <_printf_i+0x244>)
 8006122:	230a      	movs	r3, #10
 8006124:	e019      	b.n	800615a <_printf_i+0x102>
 8006126:	680e      	ldr	r6, [r1, #0]
 8006128:	602b      	str	r3, [r5, #0]
 800612a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800612e:	bf18      	it	ne
 8006130:	b236      	sxthne	r6, r6
 8006132:	e7ef      	b.n	8006114 <_printf_i+0xbc>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	1d19      	adds	r1, r3, #4
 800613a:	6029      	str	r1, [r5, #0]
 800613c:	0601      	lsls	r1, r0, #24
 800613e:	d501      	bpl.n	8006144 <_printf_i+0xec>
 8006140:	681e      	ldr	r6, [r3, #0]
 8006142:	e002      	b.n	800614a <_printf_i+0xf2>
 8006144:	0646      	lsls	r6, r0, #25
 8006146:	d5fb      	bpl.n	8006140 <_printf_i+0xe8>
 8006148:	881e      	ldrh	r6, [r3, #0]
 800614a:	4854      	ldr	r0, [pc, #336]	; (800629c <_printf_i+0x244>)
 800614c:	2f6f      	cmp	r7, #111	; 0x6f
 800614e:	bf0c      	ite	eq
 8006150:	2308      	moveq	r3, #8
 8006152:	230a      	movne	r3, #10
 8006154:	2100      	movs	r1, #0
 8006156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800615a:	6865      	ldr	r5, [r4, #4]
 800615c:	60a5      	str	r5, [r4, #8]
 800615e:	2d00      	cmp	r5, #0
 8006160:	bfa2      	ittt	ge
 8006162:	6821      	ldrge	r1, [r4, #0]
 8006164:	f021 0104 	bicge.w	r1, r1, #4
 8006168:	6021      	strge	r1, [r4, #0]
 800616a:	b90e      	cbnz	r6, 8006170 <_printf_i+0x118>
 800616c:	2d00      	cmp	r5, #0
 800616e:	d04d      	beq.n	800620c <_printf_i+0x1b4>
 8006170:	4615      	mov	r5, r2
 8006172:	fbb6 f1f3 	udiv	r1, r6, r3
 8006176:	fb03 6711 	mls	r7, r3, r1, r6
 800617a:	5dc7      	ldrb	r7, [r0, r7]
 800617c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006180:	4637      	mov	r7, r6
 8006182:	42bb      	cmp	r3, r7
 8006184:	460e      	mov	r6, r1
 8006186:	d9f4      	bls.n	8006172 <_printf_i+0x11a>
 8006188:	2b08      	cmp	r3, #8
 800618a:	d10b      	bne.n	80061a4 <_printf_i+0x14c>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	07de      	lsls	r6, r3, #31
 8006190:	d508      	bpl.n	80061a4 <_printf_i+0x14c>
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	6861      	ldr	r1, [r4, #4]
 8006196:	4299      	cmp	r1, r3
 8006198:	bfde      	ittt	le
 800619a:	2330      	movle	r3, #48	; 0x30
 800619c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80061a4:	1b52      	subs	r2, r2, r5
 80061a6:	6122      	str	r2, [r4, #16]
 80061a8:	f8cd a000 	str.w	sl, [sp]
 80061ac:	464b      	mov	r3, r9
 80061ae:	aa03      	add	r2, sp, #12
 80061b0:	4621      	mov	r1, r4
 80061b2:	4640      	mov	r0, r8
 80061b4:	f7ff fee2 	bl	8005f7c <_printf_common>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d14c      	bne.n	8006256 <_printf_i+0x1fe>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061c0:	b004      	add	sp, #16
 80061c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c6:	4835      	ldr	r0, [pc, #212]	; (800629c <_printf_i+0x244>)
 80061c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061cc:	6829      	ldr	r1, [r5, #0]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061d4:	6029      	str	r1, [r5, #0]
 80061d6:	061d      	lsls	r5, r3, #24
 80061d8:	d514      	bpl.n	8006204 <_printf_i+0x1ac>
 80061da:	07df      	lsls	r7, r3, #31
 80061dc:	bf44      	itt	mi
 80061de:	f043 0320 	orrmi.w	r3, r3, #32
 80061e2:	6023      	strmi	r3, [r4, #0]
 80061e4:	b91e      	cbnz	r6, 80061ee <_printf_i+0x196>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	f023 0320 	bic.w	r3, r3, #32
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	2310      	movs	r3, #16
 80061f0:	e7b0      	b.n	8006154 <_printf_i+0xfc>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	f043 0320 	orr.w	r3, r3, #32
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	2378      	movs	r3, #120	; 0x78
 80061fc:	4828      	ldr	r0, [pc, #160]	; (80062a0 <_printf_i+0x248>)
 80061fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006202:	e7e3      	b.n	80061cc <_printf_i+0x174>
 8006204:	0659      	lsls	r1, r3, #25
 8006206:	bf48      	it	mi
 8006208:	b2b6      	uxthmi	r6, r6
 800620a:	e7e6      	b.n	80061da <_printf_i+0x182>
 800620c:	4615      	mov	r5, r2
 800620e:	e7bb      	b.n	8006188 <_printf_i+0x130>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	6826      	ldr	r6, [r4, #0]
 8006214:	6961      	ldr	r1, [r4, #20]
 8006216:	1d18      	adds	r0, r3, #4
 8006218:	6028      	str	r0, [r5, #0]
 800621a:	0635      	lsls	r5, r6, #24
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	d501      	bpl.n	8006224 <_printf_i+0x1cc>
 8006220:	6019      	str	r1, [r3, #0]
 8006222:	e002      	b.n	800622a <_printf_i+0x1d2>
 8006224:	0670      	lsls	r0, r6, #25
 8006226:	d5fb      	bpl.n	8006220 <_printf_i+0x1c8>
 8006228:	8019      	strh	r1, [r3, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	4615      	mov	r5, r2
 8006230:	e7ba      	b.n	80061a8 <_printf_i+0x150>
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	1d1a      	adds	r2, r3, #4
 8006236:	602a      	str	r2, [r5, #0]
 8006238:	681d      	ldr	r5, [r3, #0]
 800623a:	6862      	ldr	r2, [r4, #4]
 800623c:	2100      	movs	r1, #0
 800623e:	4628      	mov	r0, r5
 8006240:	f7f9 ff9e 	bl	8000180 <memchr>
 8006244:	b108      	cbz	r0, 800624a <_printf_i+0x1f2>
 8006246:	1b40      	subs	r0, r0, r5
 8006248:	6060      	str	r0, [r4, #4]
 800624a:	6863      	ldr	r3, [r4, #4]
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	2300      	movs	r3, #0
 8006250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006254:	e7a8      	b.n	80061a8 <_printf_i+0x150>
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	462a      	mov	r2, r5
 800625a:	4649      	mov	r1, r9
 800625c:	4640      	mov	r0, r8
 800625e:	47d0      	blx	sl
 8006260:	3001      	adds	r0, #1
 8006262:	d0ab      	beq.n	80061bc <_printf_i+0x164>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	079b      	lsls	r3, r3, #30
 8006268:	d413      	bmi.n	8006292 <_printf_i+0x23a>
 800626a:	68e0      	ldr	r0, [r4, #12]
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	4298      	cmp	r0, r3
 8006270:	bfb8      	it	lt
 8006272:	4618      	movlt	r0, r3
 8006274:	e7a4      	b.n	80061c0 <_printf_i+0x168>
 8006276:	2301      	movs	r3, #1
 8006278:	4632      	mov	r2, r6
 800627a:	4649      	mov	r1, r9
 800627c:	4640      	mov	r0, r8
 800627e:	47d0      	blx	sl
 8006280:	3001      	adds	r0, #1
 8006282:	d09b      	beq.n	80061bc <_printf_i+0x164>
 8006284:	3501      	adds	r5, #1
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	9903      	ldr	r1, [sp, #12]
 800628a:	1a5b      	subs	r3, r3, r1
 800628c:	42ab      	cmp	r3, r5
 800628e:	dcf2      	bgt.n	8006276 <_printf_i+0x21e>
 8006290:	e7eb      	b.n	800626a <_printf_i+0x212>
 8006292:	2500      	movs	r5, #0
 8006294:	f104 0619 	add.w	r6, r4, #25
 8006298:	e7f5      	b.n	8006286 <_printf_i+0x22e>
 800629a:	bf00      	nop
 800629c:	080066d5 	.word	0x080066d5
 80062a0:	080066e6 	.word	0x080066e6

080062a4 <_read_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d07      	ldr	r5, [pc, #28]	; (80062c4 <_read_r+0x20>)
 80062a8:	4604      	mov	r4, r0
 80062aa:	4608      	mov	r0, r1
 80062ac:	4611      	mov	r1, r2
 80062ae:	2200      	movs	r2, #0
 80062b0:	602a      	str	r2, [r5, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f7fa fe1d 	bl	8000ef2 <_read>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_read_r+0x1e>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_read_r+0x1e>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	20000490 	.word	0x20000490

080062c8 <__swbuf_r>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	460e      	mov	r6, r1
 80062cc:	4614      	mov	r4, r2
 80062ce:	4605      	mov	r5, r0
 80062d0:	b118      	cbz	r0, 80062da <__swbuf_r+0x12>
 80062d2:	6983      	ldr	r3, [r0, #24]
 80062d4:	b90b      	cbnz	r3, 80062da <__swbuf_r+0x12>
 80062d6:	f7fe feb3 	bl	8005040 <__sinit>
 80062da:	4b21      	ldr	r3, [pc, #132]	; (8006360 <__swbuf_r+0x98>)
 80062dc:	429c      	cmp	r4, r3
 80062de:	d12b      	bne.n	8006338 <__swbuf_r+0x70>
 80062e0:	686c      	ldr	r4, [r5, #4]
 80062e2:	69a3      	ldr	r3, [r4, #24]
 80062e4:	60a3      	str	r3, [r4, #8]
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	071a      	lsls	r2, r3, #28
 80062ea:	d52f      	bpl.n	800634c <__swbuf_r+0x84>
 80062ec:	6923      	ldr	r3, [r4, #16]
 80062ee:	b36b      	cbz	r3, 800634c <__swbuf_r+0x84>
 80062f0:	6923      	ldr	r3, [r4, #16]
 80062f2:	6820      	ldr	r0, [r4, #0]
 80062f4:	1ac0      	subs	r0, r0, r3
 80062f6:	6963      	ldr	r3, [r4, #20]
 80062f8:	b2f6      	uxtb	r6, r6
 80062fa:	4283      	cmp	r3, r0
 80062fc:	4637      	mov	r7, r6
 80062fe:	dc04      	bgt.n	800630a <__swbuf_r+0x42>
 8006300:	4621      	mov	r1, r4
 8006302:	4628      	mov	r0, r5
 8006304:	f7fe fe08 	bl	8004f18 <_fflush_r>
 8006308:	bb30      	cbnz	r0, 8006358 <__swbuf_r+0x90>
 800630a:	68a3      	ldr	r3, [r4, #8]
 800630c:	3b01      	subs	r3, #1
 800630e:	60a3      	str	r3, [r4, #8]
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	6022      	str	r2, [r4, #0]
 8006316:	701e      	strb	r6, [r3, #0]
 8006318:	6963      	ldr	r3, [r4, #20]
 800631a:	3001      	adds	r0, #1
 800631c:	4283      	cmp	r3, r0
 800631e:	d004      	beq.n	800632a <__swbuf_r+0x62>
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	07db      	lsls	r3, r3, #31
 8006324:	d506      	bpl.n	8006334 <__swbuf_r+0x6c>
 8006326:	2e0a      	cmp	r6, #10
 8006328:	d104      	bne.n	8006334 <__swbuf_r+0x6c>
 800632a:	4621      	mov	r1, r4
 800632c:	4628      	mov	r0, r5
 800632e:	f7fe fdf3 	bl	8004f18 <_fflush_r>
 8006332:	b988      	cbnz	r0, 8006358 <__swbuf_r+0x90>
 8006334:	4638      	mov	r0, r7
 8006336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <__swbuf_r+0x9c>)
 800633a:	429c      	cmp	r4, r3
 800633c:	d101      	bne.n	8006342 <__swbuf_r+0x7a>
 800633e:	68ac      	ldr	r4, [r5, #8]
 8006340:	e7cf      	b.n	80062e2 <__swbuf_r+0x1a>
 8006342:	4b09      	ldr	r3, [pc, #36]	; (8006368 <__swbuf_r+0xa0>)
 8006344:	429c      	cmp	r4, r3
 8006346:	bf08      	it	eq
 8006348:	68ec      	ldreq	r4, [r5, #12]
 800634a:	e7ca      	b.n	80062e2 <__swbuf_r+0x1a>
 800634c:	4621      	mov	r1, r4
 800634e:	4628      	mov	r0, r5
 8006350:	f000 f80c 	bl	800636c <__swsetup_r>
 8006354:	2800      	cmp	r0, #0
 8006356:	d0cb      	beq.n	80062f0 <__swbuf_r+0x28>
 8006358:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800635c:	e7ea      	b.n	8006334 <__swbuf_r+0x6c>
 800635e:	bf00      	nop
 8006360:	08006680 	.word	0x08006680
 8006364:	080066a0 	.word	0x080066a0
 8006368:	08006660 	.word	0x08006660

0800636c <__swsetup_r>:
 800636c:	4b32      	ldr	r3, [pc, #200]	; (8006438 <__swsetup_r+0xcc>)
 800636e:	b570      	push	{r4, r5, r6, lr}
 8006370:	681d      	ldr	r5, [r3, #0]
 8006372:	4606      	mov	r6, r0
 8006374:	460c      	mov	r4, r1
 8006376:	b125      	cbz	r5, 8006382 <__swsetup_r+0x16>
 8006378:	69ab      	ldr	r3, [r5, #24]
 800637a:	b913      	cbnz	r3, 8006382 <__swsetup_r+0x16>
 800637c:	4628      	mov	r0, r5
 800637e:	f7fe fe5f 	bl	8005040 <__sinit>
 8006382:	4b2e      	ldr	r3, [pc, #184]	; (800643c <__swsetup_r+0xd0>)
 8006384:	429c      	cmp	r4, r3
 8006386:	d10f      	bne.n	80063a8 <__swsetup_r+0x3c>
 8006388:	686c      	ldr	r4, [r5, #4]
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006390:	0719      	lsls	r1, r3, #28
 8006392:	d42c      	bmi.n	80063ee <__swsetup_r+0x82>
 8006394:	06dd      	lsls	r5, r3, #27
 8006396:	d411      	bmi.n	80063bc <__swsetup_r+0x50>
 8006398:	2309      	movs	r3, #9
 800639a:	6033      	str	r3, [r6, #0]
 800639c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063a6:	e03e      	b.n	8006426 <__swsetup_r+0xba>
 80063a8:	4b25      	ldr	r3, [pc, #148]	; (8006440 <__swsetup_r+0xd4>)
 80063aa:	429c      	cmp	r4, r3
 80063ac:	d101      	bne.n	80063b2 <__swsetup_r+0x46>
 80063ae:	68ac      	ldr	r4, [r5, #8]
 80063b0:	e7eb      	b.n	800638a <__swsetup_r+0x1e>
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <__swsetup_r+0xd8>)
 80063b4:	429c      	cmp	r4, r3
 80063b6:	bf08      	it	eq
 80063b8:	68ec      	ldreq	r4, [r5, #12]
 80063ba:	e7e6      	b.n	800638a <__swsetup_r+0x1e>
 80063bc:	0758      	lsls	r0, r3, #29
 80063be:	d512      	bpl.n	80063e6 <__swsetup_r+0x7a>
 80063c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063c2:	b141      	cbz	r1, 80063d6 <__swsetup_r+0x6a>
 80063c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063c8:	4299      	cmp	r1, r3
 80063ca:	d002      	beq.n	80063d2 <__swsetup_r+0x66>
 80063cc:	4630      	mov	r0, r6
 80063ce:	f7ff f87d 	bl	80054cc <_free_r>
 80063d2:	2300      	movs	r3, #0
 80063d4:	6363      	str	r3, [r4, #52]	; 0x34
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	2300      	movs	r3, #0
 80063e0:	6063      	str	r3, [r4, #4]
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	f043 0308 	orr.w	r3, r3, #8
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	b94b      	cbnz	r3, 8006406 <__swsetup_r+0x9a>
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fc:	d003      	beq.n	8006406 <__swsetup_r+0x9a>
 80063fe:	4621      	mov	r1, r4
 8006400:	4630      	mov	r0, r6
 8006402:	f7ff f81b 	bl	800543c <__smakebuf_r>
 8006406:	89a0      	ldrh	r0, [r4, #12]
 8006408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800640c:	f010 0301 	ands.w	r3, r0, #1
 8006410:	d00a      	beq.n	8006428 <__swsetup_r+0xbc>
 8006412:	2300      	movs	r3, #0
 8006414:	60a3      	str	r3, [r4, #8]
 8006416:	6963      	ldr	r3, [r4, #20]
 8006418:	425b      	negs	r3, r3
 800641a:	61a3      	str	r3, [r4, #24]
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	b943      	cbnz	r3, 8006432 <__swsetup_r+0xc6>
 8006420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006424:	d1ba      	bne.n	800639c <__swsetup_r+0x30>
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	0781      	lsls	r1, r0, #30
 800642a:	bf58      	it	pl
 800642c:	6963      	ldrpl	r3, [r4, #20]
 800642e:	60a3      	str	r3, [r4, #8]
 8006430:	e7f4      	b.n	800641c <__swsetup_r+0xb0>
 8006432:	2000      	movs	r0, #0
 8006434:	e7f7      	b.n	8006426 <__swsetup_r+0xba>
 8006436:	bf00      	nop
 8006438:	20000018 	.word	0x20000018
 800643c:	08006680 	.word	0x08006680
 8006440:	080066a0 	.word	0x080066a0
 8006444:	08006660 	.word	0x08006660

08006448 <memcpy>:
 8006448:	440a      	add	r2, r1
 800644a:	4291      	cmp	r1, r2
 800644c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006450:	d100      	bne.n	8006454 <memcpy+0xc>
 8006452:	4770      	bx	lr
 8006454:	b510      	push	{r4, lr}
 8006456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800645a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800645e:	4291      	cmp	r1, r2
 8006460:	d1f9      	bne.n	8006456 <memcpy+0xe>
 8006462:	bd10      	pop	{r4, pc}

08006464 <memmove>:
 8006464:	4288      	cmp	r0, r1
 8006466:	b510      	push	{r4, lr}
 8006468:	eb01 0402 	add.w	r4, r1, r2
 800646c:	d902      	bls.n	8006474 <memmove+0x10>
 800646e:	4284      	cmp	r4, r0
 8006470:	4623      	mov	r3, r4
 8006472:	d807      	bhi.n	8006484 <memmove+0x20>
 8006474:	1e43      	subs	r3, r0, #1
 8006476:	42a1      	cmp	r1, r4
 8006478:	d008      	beq.n	800648c <memmove+0x28>
 800647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006482:	e7f8      	b.n	8006476 <memmove+0x12>
 8006484:	4402      	add	r2, r0
 8006486:	4601      	mov	r1, r0
 8006488:	428a      	cmp	r2, r1
 800648a:	d100      	bne.n	800648e <memmove+0x2a>
 800648c:	bd10      	pop	{r4, pc}
 800648e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006496:	e7f7      	b.n	8006488 <memmove+0x24>

08006498 <_realloc_r>:
 8006498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649c:	4680      	mov	r8, r0
 800649e:	4614      	mov	r4, r2
 80064a0:	460e      	mov	r6, r1
 80064a2:	b921      	cbnz	r1, 80064ae <_realloc_r+0x16>
 80064a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064a8:	4611      	mov	r1, r2
 80064aa:	f7ff b87b 	b.w	80055a4 <_malloc_r>
 80064ae:	b92a      	cbnz	r2, 80064bc <_realloc_r+0x24>
 80064b0:	f7ff f80c 	bl	80054cc <_free_r>
 80064b4:	4625      	mov	r5, r4
 80064b6:	4628      	mov	r0, r5
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064bc:	f000 f81b 	bl	80064f6 <_malloc_usable_size_r>
 80064c0:	4284      	cmp	r4, r0
 80064c2:	4607      	mov	r7, r0
 80064c4:	d802      	bhi.n	80064cc <_realloc_r+0x34>
 80064c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064ca:	d812      	bhi.n	80064f2 <_realloc_r+0x5a>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4640      	mov	r0, r8
 80064d0:	f7ff f868 	bl	80055a4 <_malloc_r>
 80064d4:	4605      	mov	r5, r0
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d0ed      	beq.n	80064b6 <_realloc_r+0x1e>
 80064da:	42bc      	cmp	r4, r7
 80064dc:	4622      	mov	r2, r4
 80064de:	4631      	mov	r1, r6
 80064e0:	bf28      	it	cs
 80064e2:	463a      	movcs	r2, r7
 80064e4:	f7ff ffb0 	bl	8006448 <memcpy>
 80064e8:	4631      	mov	r1, r6
 80064ea:	4640      	mov	r0, r8
 80064ec:	f7fe ffee 	bl	80054cc <_free_r>
 80064f0:	e7e1      	b.n	80064b6 <_realloc_r+0x1e>
 80064f2:	4635      	mov	r5, r6
 80064f4:	e7df      	b.n	80064b6 <_realloc_r+0x1e>

080064f6 <_malloc_usable_size_r>:
 80064f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064fa:	1f18      	subs	r0, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bfbc      	itt	lt
 8006500:	580b      	ldrlt	r3, [r1, r0]
 8006502:	18c0      	addlt	r0, r0, r3
 8006504:	4770      	bx	lr
	...

08006508 <_init>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	bf00      	nop
 800650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650e:	bc08      	pop	{r3}
 8006510:	469e      	mov	lr, r3
 8006512:	4770      	bx	lr

08006514 <_fini>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr
