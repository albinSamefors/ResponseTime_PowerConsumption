
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d6c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000008  080060a8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000418  20000080  08006120  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000498  08006120  00020498  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001789f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002e72  00000000  00000000  0003794f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a98  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001950  00000000  00000000  0003c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024228  00000000  00000000  0003dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016b26  00000000  00000000  00061dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e8ac0  00000000  00000000  000788fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001613be  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000078bc  00000000  00000000  00161410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08005e94 	.word	0x08005e94

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08005e94 	.word	0x08005e94

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000230:	f023 0218 	bic.w	r2, r3, #24
 8000234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000270:	68fb      	ldr	r3, [r7, #12]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <recieve16Bit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool recieve16Bit(uint16_t *read_to){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	if(HAL_SPI_Receive(&hspi1, (uint8_t*)read_to, 2, 10) == HAL_OK) {
 8000288:	230a      	movs	r3, #10
 800028a:	2202      	movs	r2, #2
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <recieve16Bit+0x28>)
 8000290:	f003 fe3d 	bl	8003f0e <HAL_SPI_Receive>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <recieve16Bit+0x1e>
		return true;
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <recieve16Bit+0x20>
	}

	return false;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	200000c0 	.word	0x200000c0

080002ac <send16Bit>:

_Bool send16Bit(uint16_t *send){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2,10) == HAL_OK){
 80002b4:	230a      	movs	r3, #10
 80002b6:	2202      	movs	r2, #2
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <send16Bit+0x28>)
 80002bc:	f003 fcb9 	bl	8003c32 <HAL_SPI_Transmit>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <send16Bit+0x1e>
		return true;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <send16Bit+0x20>

	}
	return false;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000c0 	.word	0x200000c0

080002d8 <getStartInput>:

void getStartInput(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	uint8_t header;
		  HAL_StatusTypeDef receive_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80002de:	1db9      	adds	r1, r7, #6
 80002e0:	230a      	movs	r3, #10
 80002e2:	2201      	movs	r2, #1
 80002e4:	4825      	ldr	r0, [pc, #148]	; (800037c <getStartInput+0xa4>)
 80002e6:	f003 fe12 	bl	8003f0e <HAL_SPI_Receive>
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
		  if(receive_status == HAL_OK) {
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d130      	bne.n	8000356 <getStartInput+0x7e>
			  switch((Header)header) {
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d020      	beq.n	800033c <getStartInput+0x64>
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	dc32      	bgt.n	8000364 <getStartInput+0x8c>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d002      	beq.n	8000308 <getStartInput+0x30>
 8000302:	2b02      	cmp	r3, #2
 8000304:	d00d      	beq.n	8000322 <getStartInput+0x4a>
 8000306:	e02d      	b.n	8000364 <getStartInput+0x8c>
			  	  case SLEEP_TIME:
			  		  if(!recieve16Bit(&sleep_time)) {
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <getStartInput+0xa8>)
 800030a:	f7ff ffb9 	bl	8000280 <recieve16Bit>
 800030e:	4603      	mov	r3, r0
 8000310:	f083 0301 	eor.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d01f      	beq.n	800035a <getStartInput+0x82>
			  			  printf("ERROR COULD NOT RECIEVE SLEEP TIME");
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <getStartInput+0xac>)
 800031c:	f005 f92c 	bl	8005578 <iprintf>
			  		  	  }
					  break;
 8000320:	e01b      	b.n	800035a <getStartInput+0x82>
				  case RUN_AMOUNT:
					  if(!recieve16Bit(&max_amount_of_runs)){
 8000322:	4819      	ldr	r0, [pc, #100]	; (8000388 <getStartInput+0xb0>)
 8000324:	f7ff ffac 	bl	8000280 <recieve16Bit>
 8000328:	4603      	mov	r3, r0
 800032a:	f083 0301 	eor.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d014      	beq.n	800035e <getStartInput+0x86>
						  printf("ERROR COULD NOT RECIEVE AMOUNT OF RUNS");
 8000334:	4815      	ldr	r0, [pc, #84]	; (800038c <getStartInput+0xb4>)
 8000336:	f005 f91f 	bl	8005578 <iprintf>
					  }

					  break;
 800033a:	e010      	b.n	800035e <getStartInput+0x86>
				  case TEST_MODE:
					  if(!recieve16Bit(&test_mode)){
 800033c:	4814      	ldr	r0, [pc, #80]	; (8000390 <getStartInput+0xb8>)
 800033e:	f7ff ff9f 	bl	8000280 <recieve16Bit>
 8000342:	4603      	mov	r3, r0
 8000344:	f083 0301 	eor.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d009      	beq.n	8000362 <getStartInput+0x8a>
						  printf("TEST MODE COULD NOT BE RECIEVED");
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <getStartInput+0xbc>)
 8000350:	f005 f912 	bl	8005578 <iprintf>
					  }
					  break;
 8000354:	e005      	b.n	8000362 <getStartInput+0x8a>
				  }
		  }
 8000356:	bf00      	nop
 8000358:	e004      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <getStartInput+0x8c>
					  break;
 8000362:	bf00      	nop
		  if(test_mode != 2){
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <getStartInput+0xb8>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d002      	beq.n	8000372 <getStartInput+0x9a>
			  test_input_set = true;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <getStartInput+0xc0>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		  }
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200000c0 	.word	0x200000c0
 8000380:	2000047a 	.word	0x2000047a
 8000384:	08005eac 	.word	0x08005eac
 8000388:	2000047c 	.word	0x2000047c
 800038c:	08005ed0 	.word	0x08005ed0
 8000390:	20000008 	.word	0x20000008
 8000394:	08005ef8 	.word	0x08005ef8
 8000398:	2000047e 	.word	0x2000047e

0800039c <sendTestData>:
void sendTestData(uint32_t *times){
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	82fb      	strh	r3, [r7, #22]
	uint16_t bajs = 10;
 80003a8:	230a      	movs	r3, #10
 80003aa:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	481e      	ldr	r0, [pc, #120]	; (800042c <sendTestData+0x90>)
 80003b2:	f001 fa37 	bl	8001824 <HAL_GPIO_WritePin>
	while(index < max_amount_of_runs){
 80003b6:	e02b      	b.n	8000410 <sendTestData+0x74>
		uint8_t header;
		uint32_t *ptr = &times[index];
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	613b      	str	r3, [r7, #16]
		uint16_t value = *((uint16_t*)ptr);
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	81bb      	strh	r3, [r7, #12]
		HAL_StatusTypeDef recieve_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80003c8:	f107 010e 	add.w	r1, r7, #14
 80003cc:	230a      	movs	r3, #10
 80003ce:	2201      	movs	r2, #1
 80003d0:	4817      	ldr	r0, [pc, #92]	; (8000430 <sendTestData+0x94>)
 80003d2:	f003 fd9c 	bl	8003f0e <HAL_SPI_Receive>
 80003d6:	4603      	mov	r3, r0
 80003d8:	73fb      	strb	r3, [r7, #15]
		if(recieve_status == HAL_OK){
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d117      	bne.n	8000410 <sendTestData+0x74>
			if(header == 4){
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	2b04      	cmp	r3, #4
 80003e4:	d111      	bne.n	800040a <sendTestData+0x6e>
				if(!send16Bit(&value)){
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff5e 	bl	80002ac <send16Bit>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f083 0301 	eor.w	r3, r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d002      	beq.n	8000402 <sendTestData+0x66>
					printf("COULD NOT SEND DATA");
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <sendTestData+0x98>)
 80003fe:	f005 f8bb 	bl	8005578 <iprintf>
				}
				index++;
 8000402:	8afb      	ldrh	r3, [r7, #22]
 8000404:	3301      	adds	r3, #1
 8000406:	82fb      	strh	r3, [r7, #22]
 8000408:	e002      	b.n	8000410 <sendTestData+0x74>
			}
			else{
				printf("STUB");
 800040a:	480b      	ldr	r0, [pc, #44]	; (8000438 <sendTestData+0x9c>)
 800040c:	f005 f8b4 	bl	8005578 <iprintf>
	while(index < max_amount_of_runs){
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <sendTestData+0xa0>)
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	8afa      	ldrh	r2, [r7, #22]
 8000416:	429a      	cmp	r2, r3
 8000418:	d3ce      	bcc.n	80003b8 <sendTestData+0x1c>
			}
		}
	}
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2110      	movs	r1, #16
 800041e:	4803      	ldr	r0, [pc, #12]	; (800042c <sendTestData+0x90>)
 8000420:	f001 fa00 	bl	8001824 <HAL_GPIO_WritePin>
}
 8000424:	bf00      	nop
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	48000400 	.word	0x48000400
 8000430:	200000c0 	.word	0x200000c0
 8000434:	08005f18 	.word	0x08005f18
 8000438:	08005f2c 	.word	0x08005f2c
 800043c:	2000047c 	.word	0x2000047c

08000440 <sendData>:

void sendData(uint32_t *data){
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

		for(int i = 0; i < max_amount_of_runs; i++){
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	e00f      	b.n	800046e <sendData+0x2e>
			uint32_t *ptr = &data[i];
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
			uint16_t value = *((uint16_t*)ptr);
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	81fb      	strh	r3, [r7, #14]
			send16Bit(&value);
 800045e:	f107 030e 	add.w	r3, r7, #14
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff22 	bl	80002ac <send16Bit>
		for(int i = 0; i < max_amount_of_runs; i++){
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3301      	adds	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <sendData+0x44>)
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	461a      	mov	r2, r3
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	4293      	cmp	r3, r2
 8000478:	dbe9      	blt.n	800044e <sendData+0xe>

	}
}
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	2000047c 	.word	0x2000047c

08000488 <calculateTestTimes>:

void calculateTestTimes(struct TimeCapture *data, uint32_t *times){
 8000488:	b480      	push	{r7}
 800048a:	b08b      	sub	sp, #44	; 0x2c
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 8000492:	2300      	movs	r3, #0
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
 8000496:	e027      	b.n	80004e8 <calculateTestTimes+0x60>
		struct TimeCapture *time_ptr = &data[i];
 8000498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	4413      	add	r3, r2
 80004a0:	623b      	str	r3, [r7, #32]
		uint32_t *ptr = &times[i];
 80004a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	4413      	add	r3, r2
 80004aa:	61fb      	str	r3, [r7, #28]
		uint32_t start_time = time_ptr->startTime;
 80004ac:	6a3b      	ldr	r3, [r7, #32]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	61bb      	str	r3, [r7, #24]
		uint32_t end_time = time_ptr->endTime;
 80004b2:	6a3b      	ldr	r3, [r7, #32]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	617b      	str	r3, [r7, #20]
		uint32_t full_time = end_time - start_time;
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	613b      	str	r3, [r7, #16]
		uint32_t wake_up_time = full_time - (sleep_time * 1000);
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <calculateTestTimes+0x7c>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ca:	fb02 f303 	mul.w	r3, r2, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	693b      	ldr	r3, [r7, #16]
 80004d2:	1a9b      	subs	r3, r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
		debug_value = full_time;
 80004d6:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <calculateTestTimes+0x80>)
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	6013      	str	r3, [r2, #0]
		*ptr = wake_up_time;
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 80004e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e4:	3301      	adds	r3, #1
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <calculateTestTimes+0x84>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f0:	4293      	cmp	r3, r2
 80004f2:	dbd1      	blt.n	8000498 <calculateTestTimes+0x10>
	}
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	372c      	adds	r7, #44	; 0x2c
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000047a 	.word	0x2000047a
 8000508:	2000000c 	.word	0x2000000c
 800050c:	2000047c 	.word	0x2000047c

08000510 <sendInterrupt>:

void sendInterrupt(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2102      	movs	r1, #2
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <sendInterrupt+0x1c>)
 800051a:	f001 f983 	bl	8001824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2102      	movs	r1, #2
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <sendInterrupt+0x1c>)
 8000524:	f001 f97e 	bl	8001824 <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	48000800 	.word	0x48000800

08000530 <testUsingInterrupts>:

void testUsingInterrupts(struct TimeCapture *times){
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
	while(run_test){
 800053c:	e02d      	b.n	800059a <testUsingInterrupts+0x6a>
		struct TimeCapture *time_ptr = &times[i];
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
		HAL_Delay(sleep_time);
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <testUsingInterrupts+0x7c>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fec5 	bl	80012dc <HAL_Delay>
		sendInterrupt();
 8000552:	f7ff ffdd 	bl	8000510 <sendInterrupt>
		while(!timeBuffReady);
 8000556:	bf00      	nop
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <testUsingInterrupts+0x80>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f083 0301 	eor.w	r3, r3, #1
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1f8      	bne.n	8000558 <testUsingInterrupts+0x28>
		*time_ptr = timeBuff;
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <testUsingInterrupts+0x84>)
 800056a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056e:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3301      	adds	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
		timeBuff.startTime = 0;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <testUsingInterrupts+0x84>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <testUsingInterrupts+0x84>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
		if(captures == max_amount_of_runs * 2){
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <testUsingInterrupts+0x88>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <testUsingInterrupts+0x8c>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	429a      	cmp	r2, r3
 8000592:	d102      	bne.n	800059a <testUsingInterrupts+0x6a>
			run_test = false;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <testUsingInterrupts+0x90>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
	while(run_test){
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <testUsingInterrupts+0x90>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1cd      	bne.n	800053e <testUsingInterrupts+0xe>
		}
	}
}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000047a 	.word	0x2000047a
 80005b0:	20000478 	.word	0x20000478
 80005b4:	20000468 	.word	0x20000468
 80005b8:	20000464 	.word	0x20000464
 80005bc:	2000047c 	.word	0x2000047c
 80005c0:	20000479 	.word	0x20000479

080005c4 <testUsingIntervals>:

void testUsingIntervals(struct TimeCapture *times){
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
	while(run_test){
 80005d0:	e02f      	b.n	8000632 <testUsingIntervals+0x6e>
		struct TimeCapture *time_ptr = &times[i];
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
		while(!timeBuffReady);
 80005dc:	bf00      	nop
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <testUsingIntervals+0x84>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	f083 0301 	eor.w	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f8      	bne.n	80005de <testUsingIntervals+0x1a>
		*time_ptr = timeBuff;
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <testUsingIntervals+0x88>)
 80005f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f4:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3301      	adds	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
		lastBuff = timeBuff;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <testUsingIntervals+0x8c>)
 8000600:	4a12      	ldr	r2, [pc, #72]	; (800064c <testUsingIntervals+0x88>)
 8000602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000606:	e883 0003 	stmia.w	r3, {r0, r1}
		timeBuff.startTime = 0;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <testUsingIntervals+0x88>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <testUsingIntervals+0x88>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <testUsingIntervals+0x84>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <testUsingIntervals+0x90>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <testUsingIntervals+0x94>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	429a      	cmp	r2, r3
 800062a:	d102      	bne.n	8000632 <testUsingIntervals+0x6e>
			run_test = false;
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <testUsingIntervals+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
	while(run_test){
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <testUsingIntervals+0x98>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1cb      	bne.n	80005d2 <testUsingIntervals+0xe>
		}

	}
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	20000478 	.word	0x20000478
 800064c:	20000468 	.word	0x20000468
 8000650:	20000470 	.word	0x20000470
 8000654:	20000464 	.word	0x20000464
 8000658:	2000047c 	.word	0x2000047c
 800065c:	20000479 	.word	0x20000479

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000664:	b08f      	sub	sp, #60	; 0x3c
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fdb2 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f8d6 	bl	800081c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000670:	f000 f94c 	bl	800090c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 fa74 	bl	8000b60 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000678:	f000 fa4a 	bl	8000b10 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800067c:	f000 f9fa 	bl	8000a74 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000680:	f000 f9c0 	bl	8000a04 <MX_SPI1_Init>
  MX_RTC_Init();
 8000684:	f000 f960 	bl	8000948 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000688:	485f      	ldr	r0, [pc, #380]	; (8000808 <main+0x1a8>)
 800068a:	f004 f997 	bl	80049bc <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!test_input_set){
 800068e:	4b5f      	ldr	r3, [pc, #380]	; (800080c <main+0x1ac>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f083 0301 	eor.w	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <main+0x42>
	 	  	  getStartInput();
 800069c:	f7ff fe1c 	bl	80002d8 <getStartInput>
 80006a0:	e7f5      	b.n	800068e <main+0x2e>
	 	  }
	 	  else{
 80006a2:	466b      	mov	r3, sp
 80006a4:	607b      	str	r3, [r7, #4]
	 		  struct TimeCapture times[max_amount_of_runs];
 80006a6:	4b5a      	ldr	r3, [pc, #360]	; (8000810 <main+0x1b0>)
 80006a8:	8819      	ldrh	r1, [r3, #0]
 80006aa:	460b      	mov	r3, r1
 80006ac:	3b01      	subs	r3, #1
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
 80006b0:	b28b      	uxth	r3, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	461c      	mov	r4, r3
 80006b6:	4615      	mov	r5, r2
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0300 	mov.w	r3, #0
 80006c0:	01ab      	lsls	r3, r5, #6
 80006c2:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80006c6:	01a2      	lsls	r2, r4, #6
 80006c8:	b28b      	uxth	r3, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	4698      	mov	r8, r3
 80006ce:	4691      	mov	r9, r2
 80006d0:	f04f 0200 	mov.w	r2, #0
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80006dc:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80006e0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80006e4:	460b      	mov	r3, r1
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	3307      	adds	r3, #7
 80006ea:	08db      	lsrs	r3, r3, #3
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	ebad 0d03 	sub.w	sp, sp, r3
 80006f2:	466b      	mov	r3, sp
 80006f4:	3303      	adds	r3, #3
 80006f6:	089b      	lsrs	r3, r3, #2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
	 		  if(test_mode == 1){
 80006fc:	4b45      	ldr	r3, [pc, #276]	; (8000814 <main+0x1b4>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d13e      	bne.n	8000782 <main+0x122>
 8000704:	466b      	mov	r3, sp
 8000706:	461e      	mov	r6, r3
	 			  // RUN TESTS USING ITERRUPTS
	 			  run_test = true;
 8000708:	4a43      	ldr	r2, [pc, #268]	; (8000818 <main+0x1b8>)
 800070a:	2301      	movs	r3, #1
 800070c:	7013      	strb	r3, [r2, #0]
	 			  testUsingInterrupts(times);
 800070e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000710:	f7ff ff0e 	bl	8000530 <testUsingInterrupts>
	 			  uint32_t test_times[max_amount_of_runs];
 8000714:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <main+0x1b0>)
 8000716:	8819      	ldrh	r1, [r3, #0]
 8000718:	460b      	mov	r3, r1
 800071a:	3b01      	subs	r3, #1
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
 800071e:	b28b      	uxth	r3, r1
 8000720:	2200      	movs	r2, #0
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	61fa      	str	r2, [r7, #28]
 8000726:	f04f 0200 	mov.w	r2, #0
 800072a:	f04f 0300 	mov.w	r3, #0
 800072e:	69f8      	ldr	r0, [r7, #28]
 8000730:	0143      	lsls	r3, r0, #5
 8000732:	69b8      	ldr	r0, [r7, #24]
 8000734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000738:	69b8      	ldr	r0, [r7, #24]
 800073a:	0142      	lsls	r2, r0, #5
 800073c:	b28b      	uxth	r3, r1
 800073e:	2200      	movs	r2, #0
 8000740:	469a      	mov	sl, r3
 8000742:	4693      	mov	fp, r2
 8000744:	f04f 0200 	mov.w	r2, #0
 8000748:	f04f 0300 	mov.w	r3, #0
 800074c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000750:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000754:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000758:	460b      	mov	r3, r1
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	3307      	adds	r3, #7
 800075e:	08db      	lsrs	r3, r3, #3
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	ebad 0d03 	sub.w	sp, sp, r3
 8000766:	466b      	mov	r3, sp
 8000768:	3303      	adds	r3, #3
 800076a:	089b      	lsrs	r3, r3, #2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	623b      	str	r3, [r7, #32]
	 			  calculateTestTimes(times,test_times);
 8000770:	6a39      	ldr	r1, [r7, #32]
 8000772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000774:	f7ff fe88 	bl	8000488 <calculateTestTimes>
	 			  sendData(test_times);
 8000778:	6a38      	ldr	r0, [r7, #32]
 800077a:	f7ff fe61 	bl	8000440 <sendData>
 800077e:	46b5      	mov	sp, r6
 8000780:	e03e      	b.n	8000800 <main+0x1a0>
	 		  }
	 		  else{
 8000782:	466b      	mov	r3, sp
 8000784:	461e      	mov	r6, r3
	 			  run_test = true;
 8000786:	4a24      	ldr	r2, [pc, #144]	; (8000818 <main+0x1b8>)
 8000788:	2301      	movs	r3, #1
 800078a:	7013      	strb	r3, [r2, #0]
	 			  testUsingIntervals(times);
 800078c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800078e:	f7ff ff19 	bl	80005c4 <testUsingIntervals>
	 			  uint32_t test_times[max_amount_of_runs];
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <main+0x1b0>)
 8000794:	8819      	ldrh	r1, [r3, #0]
 8000796:	460b      	mov	r3, r1
 8000798:	3b01      	subs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800079c:	b28b      	uxth	r3, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	617a      	str	r2, [r7, #20]
 80007a4:	f04f 0200 	mov.w	r2, #0
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	6978      	ldr	r0, [r7, #20]
 80007ae:	0143      	lsls	r3, r0, #5
 80007b0:	6938      	ldr	r0, [r7, #16]
 80007b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007b6:	6938      	ldr	r0, [r7, #16]
 80007b8:	0142      	lsls	r2, r0, #5
 80007ba:	b28b      	uxth	r3, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	60fa      	str	r2, [r7, #12]
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	68f8      	ldr	r0, [r7, #12]
 80007cc:	0143      	lsls	r3, r0, #5
 80007ce:	68b8      	ldr	r0, [r7, #8]
 80007d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007d4:	68b8      	ldr	r0, [r7, #8]
 80007d6:	0142      	lsls	r2, r0, #5
 80007d8:	460b      	mov	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	3307      	adds	r3, #7
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	ebad 0d03 	sub.w	sp, sp, r3
 80007e6:	466b      	mov	r3, sp
 80007e8:	3303      	adds	r3, #3
 80007ea:	089b      	lsrs	r3, r3, #2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
	 			  calculateTestTimes(times, test_times);
 80007f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007f4:	f7ff fe48 	bl	8000488 <calculateTestTimes>
	 			  sendTestData(test_times);
 80007f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007fa:	f7ff fdcf 	bl	800039c <sendTestData>
 80007fe:	46b5      	mov	sp, r6
 8000800:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  if(!test_input_set){
 8000804:	e743      	b.n	800068e <main+0x2e>
 8000806:	bf00      	nop
 8000808:	20000124 	.word	0x20000124
 800080c:	2000047e 	.word	0x2000047e
 8000810:	2000047c 	.word	0x2000047c
 8000814:	20000008 	.word	0x20000008
 8000818:	20000479 	.word	0x20000479

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09a      	sub	sp, #104	; 0x68
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2248      	movs	r2, #72	; 0x48
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fdbc 	bl	80053a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
 800083e:	615a      	str	r2, [r3, #20]
 8000840:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800084c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000850:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	f023 0303 	bic.w	r3, r3, #3
 800085c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000866:	f001 f911 	bl	8001a8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fcd8 	bl	8000220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <SystemClock_Config+0xec>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000878:	4a23      	ldr	r2, [pc, #140]	; (8000908 <SystemClock_Config+0xec>)
 800087a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <SystemClock_Config+0xec>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800088c:	232f      	movs	r3, #47	; 0x2f
 800088e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ac:	2360      	movs	r3, #96	; 0x60
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008b0:	2305      	movs	r3, #5
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fc61 	bl	8002184 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008c8:	f000 f9f8 	bl	8000cbc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008cc:	236f      	movs	r3, #111	; 0x6f
 80008ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008d0:	2302      	movs	r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 ffbd 	bl	800286c <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80008f8:	f000 f9e0 	bl	8000cbc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008fc:	f002 fd4c 	bl	8003398 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000900:	bf00      	nop
 8000902:	3768      	adds	r7, #104	; 0x68
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	58000400 	.word	0x58000400

0800090c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b094      	sub	sp, #80	; 0x50
 8000910:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2250      	movs	r2, #80	; 0x50
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f004 fd45 	bl	80053a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800091e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000922:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000928:	2300      	movs	r3, #0
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fbbc 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800093a:	f000 f9bf 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	; 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_RTC_Init+0xb4>)
 8000962:	4a27      	ldr	r2, [pc, #156]	; (8000a00 <MX_RTC_Init+0xb8>)
 8000964:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_RTC_Init+0xb4>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_RTC_Init+0xb4>)
 800096e:	227f      	movs	r2, #127	; 0x7f
 8000970:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_RTC_Init+0xb4>)
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_RTC_Init+0xb4>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_RTC_Init+0xb4>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_RTC_Init+0xb4>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_RTC_Init+0xb4>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000990:	481a      	ldr	r0, [pc, #104]	; (80009fc <MX_RTC_Init+0xb4>)
 8000992:	f002 fe19 	bl	80035c8 <HAL_RTC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800099c:	f000 f98e 	bl	8000cbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	480f      	ldr	r0, [pc, #60]	; (80009fc <MX_RTC_Init+0xb4>)
 80009c0:	f002 feb2 	bl	8003728 <HAL_RTC_SetTime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80009ca:	f000 f977 	bl	8000cbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009ce:	2301      	movs	r3, #1
 80009d0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009d2:	2301      	movs	r3, #1
 80009d4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80009da:	2300      	movs	r3, #0
 80009dc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	2201      	movs	r2, #1
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_RTC_Init+0xb4>)
 80009e6:	f002 ff63 	bl	80038b0 <HAL_RTC_SetDate>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 80009f0:	f000 f964 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000009c 	.word	0x2000009c
 8000a00:	40002800 	.word	0x40002800

08000a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a0a:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <MX_SPI1_Init+0x6c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a5a:	f003 f847 	bl	8003aec <HAL_SPI_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a64:	f000 f92a 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000c0 	.word	0x200000c0
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000a9c:	221f      	movs	r2, #31
 8000a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aba:	4814      	ldr	r0, [pc, #80]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000abc:	f003 ff26 	bl	800490c <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ac6:	f000 f8f9 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000ad8:	f003 ffb6 	bl	8004a48 <HAL_TIM_ConfigClockSource>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ae2:	f000 f8eb 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000af4:	f004 f972 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000afe:	f000 f8dd 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000124 	.word	0x20000124

08000b10 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b16:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <MX_USB_PCD_Init+0x4c>)
 8000b18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b22:	2202      	movs	r2, #2
 8000b24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b46:	f000 fe9d 	bl	8001884 <HAL_PCD_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b50:	f000 f8b4 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000170 	.word	0x20000170
 8000b5c:	40006800 	.word	0x40006800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	2004      	movs	r0, #4
 8000b76:	f7ff fb69 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fb66 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff fb63 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	2008      	movs	r0, #8
 8000b88:	f7ff fb60 	bl	800024c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4822      	ldr	r0, [pc, #136]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000b92:	f000 fe47 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2133      	movs	r1, #51	; 0x33
 8000b9a:	4821      	ldr	r0, [pc, #132]	; (8000c20 <MX_GPIO_Init+0xc0>)
 8000b9c:	f000 fe42 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_INPUT_Pin */
  GPIO_InitStruct.Pin = TEST_INPUT_Pin;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000baa:	2302      	movs	r3, #2
 8000bac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEST_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481a      	ldr	r0, [pc, #104]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bb4:	f000 fcc6 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupter_Pin */
  GPIO_InitStruct.Pin = Interrupter_Pin;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Interrupter_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bce:	f000 fcb9 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TransmitReady_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin;
 8000bd2:	2333      	movs	r3, #51	; 0x33
 8000bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <MX_GPIO_Init+0xc0>)
 8000be8:	f000 fcac 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000bec:	2303      	movs	r3, #3
 8000bee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <MX_GPIO_Init+0xc4>)
 8000bfe:	f000 fca1 	bl	8001544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2006      	movs	r0, #6
 8000c08:	f000 fc67 	bl	80014da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c0c:	2006      	movs	r0, #6
 8000c0e:	f000 fc7e 	bl	800150e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	48000800 	.word	0x48000800
 8000c20:	48000400 	.word	0x48000400
 8000c24:	48000c00 	.word	0x48000c00

08000c28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == TEST_INPUT_Pin){
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_EXTI_Callback+0x72>
		if(captures%2 == 0){
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d113      	bne.n	8000c6e <HAL_GPIO_EXTI_Callback+0x46>
			timeBuff.startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_GPIO_EXTI_Callback+0x84>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c4e:	6013      	str	r3, [r2, #0]
			if(captures  < max_amount_of_runs*2){
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	da1c      	bge.n	8000c9a <HAL_GPIO_EXTI_Callback+0x72>
			captures++;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c6a:	801a      	strh	r2, [r3, #0]
		}


	}

}
 8000c6c:	e015      	b.n	8000c9a <HAL_GPIO_EXTI_Callback+0x72>
			timeBuff.endTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_GPIO_EXTI_Callback+0x84>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c76:	6053      	str	r3, [r2, #4]
			timeBuffReady = true;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
			if(captures < max_amount_of_runs*2){
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	da05      	bge.n	8000c9a <HAL_GPIO_EXTI_Callback+0x72>
				captures++;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c98:	801a      	strh	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000464 	.word	0x20000464
 8000cac:	20000124 	.word	0x20000124
 8000cb0:	20000468 	.word	0x20000468
 8000cb4:	2000047c 	.word	0x2000047c
 8000cb8:	20000478 	.word	0x20000478

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>

08000cc6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_AHB2_GRP1_EnableClock>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b096      	sub	sp, #88	; 0x58
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2250      	movs	r2, #80	; 0x50
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 fb03 	bl	80053a8 <memset>
  if(hrtc->Instance==RTC)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_RTC_MspInit+0x54>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d115      	bne.n	8000dd8 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 f975 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000dc8:	f7ff ff78 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dcc:	f7ff ff7b 	bl	8000cc6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000dd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000dd4:	f7ff ffa1 	bl	8000d1a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3758      	adds	r7, #88	; 0x58
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40002800 	.word	0x40002800

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_SPI_MspInit+0x5c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d117      	bne.n	8000e36 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e0a:	f7ff ff9f 	bl	8000d4c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff ff6a 	bl	8000ce8 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e14:	23f0      	movs	r3, #240	; 0xf0
 8000e16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e24:	2305      	movs	r3, #5
 8000e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f000 fb87 	bl	8001544 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40013000 	.word	0x40013000

08000e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e54:	d102      	bne.n	8000e5c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff ff5f 	bl	8000d1a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09c      	sub	sp, #112	; 0x70
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2250      	movs	r2, #80	; 0x50
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 fa8f 	bl	80053a8 <memset>
  if(hpcd->Instance==USB)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_PCD_MspInit+0xa8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d136      	bne.n	8000f02 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e98:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000e9a:	2318      	movs	r3, #24
 8000e9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ea8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000eaa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000eae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000eb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 f8f3 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000ecc:	f7ff fef6 	bl	8000cbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff ff09 	bl	8000ce8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ed6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eda:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f000 fb25 	bl	8001544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000efa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000efe:	f7ff ff0c 	bl	8000d1a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3770      	adds	r7, #112	; 0x70
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40006800 	.word	0x40006800

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 f992 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEST_INPUT_Pin);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f000 fc73 	bl	8001854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e00a      	b.n	8000f9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f84:	f3af 8000 	nop.w
 8000f88:	4601      	mov	r1, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	b2ca      	uxtb	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbf0      	blt.n	8000f84 <_read+0x12>
  }

  return len;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e009      	b.n	8000fd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbf1      	blt.n	8000fbe <_write+0x12>
  }
  return len;
 8000fda:	687b      	ldr	r3, [r7, #4]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_close>:

int _close(int file)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100c:	605a      	str	r2, [r3, #4]
  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_isatty>:

int _isatty(int file)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f003 ff4a 	bl	8004f14 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20030000 	.word	0x20030000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000480 	.word	0x20000480
 80010b4:	20000498 	.word	0x20000498

080010b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <SystemInit+0x98>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <SystemInit+0x98>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80010dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80010e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80010e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <SystemInit+0x9c>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80010f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001102:	f023 0305 	bic.w	r3, r3, #5
 8001106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800110a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <SystemInit+0xa0>)
 8001124:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <SystemInit+0xa0>)
 800112c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800112e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800113e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	faf6fefb 	.word	0xfaf6fefb
 8001158:	22041000 	.word	0x22041000

0800115c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800115c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001160:	3304      	adds	r3, #4

08001162 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001162:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001164:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001166:	d3f9      	bcc.n	800115c <CopyDataInit>
  bx lr
 8001168:	4770      	bx	lr

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800116a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800116c:	3004      	adds	r0, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800116e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>
  bx lr
 8001172:	4770      	bx	lr

08001174 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001176:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001178:	f7ff ff9e 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <LoopForever+0x6>)
 800117e:	490c      	ldr	r1, [pc, #48]	; (80011b0 <LoopForever+0xa>)
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <LoopForever+0xe>)
 8001182:	2300      	movs	r3, #0
 8001184:	f7ff ffed 	bl	8001162 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <LoopForever+0x12>)
 800118a:	490c      	ldr	r1, [pc, #48]	; (80011bc <LoopForever+0x16>)
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <LoopForever+0x1a>)
 800118e:	2300      	movs	r3, #0
 8001190:	f7ff ffe7 	bl	8001162 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopForever+0x1e>)
 8001196:	490c      	ldr	r1, [pc, #48]	; (80011c8 <LoopForever+0x22>)
 8001198:	2300      	movs	r3, #0
 800119a:	f7ff ffe8 	bl	800116e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800119e:	f004 f877 	bl	8005290 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011a2:	f7ff fa5d 	bl	8000660 <main>

080011a6 <LoopForever>:

LoopForever:
  b LoopForever
 80011a6:	e7fe      	b.n	80011a6 <LoopForever>
  ldr   r0, =_estack
 80011a8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000080 	.word	0x20000080
 80011b4:	080060a8 	.word	0x080060a8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011b8:	20030000 	.word	0x20030000
 80011bc:	20030000 	.word	0x20030000
 80011c0:	08006120 	.word	0x08006120
  INIT_BSS _sbss, _ebss
 80011c4:	20000080 	.word	0x20000080
 80011c8:	20000498 	.word	0x20000498

080011cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_Init+0x3c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_Init+0x3c>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e6:	2003      	movs	r0, #3
 80011e8:	f000 f96c 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 f80f 	bl	8001210 <HAL_InitTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	e001      	b.n	8001202 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fe:	f7ff fdbe 	bl	8000d7e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001202:	79fb      	ldrb	r3, [r7, #7]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58004000 	.word	0x58004000

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_InitTick+0x6c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d024      	beq.n	800126e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001224:	f001 fcce 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_InitTick+0x6c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001234:	fbb3 f3f1 	udiv	r3, r3, r1
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f974 	bl	800152a <HAL_SYSTICK_Config>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10f      	bne.n	8001268 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	d809      	bhi.n	8001262 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124e:	2200      	movs	r2, #0
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001256:	f000 f940 	bl	80014da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_InitTick+0x70>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e007      	b.n	8001272 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e004      	b.n	8001272 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e001      	b.n	8001272 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000018 	.word	0x20000018
 8001280:	20000014 	.word	0x20000014

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000018 	.word	0x20000018
 80012a8:	20000484 	.word	0x20000484

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000484 	.word	0x20000484

080012c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTickPrio+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000014 	.word	0x20000014

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffe2 	bl	80012ac <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffd2 	bl	80012ac <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000018 	.word	0x20000018

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <__NVIC_EnableIRQ+0x38>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff29 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff40 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff90 	bl	8001418 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5f 	bl	80013c4 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff33 	bl	8001388 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa4 	bl	8001480 <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e14c      	b.n	80017ee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 813e 	beq.w	80017e8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d005      	beq.n	8001584 <HAL_GPIO_Init+0x40>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d130      	bne.n	80015e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ba:	2201      	movs	r2, #1
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f003 0201 	and.w	r2, r3, #1
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d017      	beq.n	8001622 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d123      	bne.n	8001676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	6939      	ldr	r1, [r7, #16]
 8001672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0203 	and.w	r2, r3, #3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8098 	beq.w	80017e8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80016b8:	4a54      	ldr	r2, [pc, #336]	; (800180c <HAL_GPIO_Init+0x2c8>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016e2:	d019      	beq.n	8001718 <HAL_GPIO_Init+0x1d4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a4a      	ldr	r2, [pc, #296]	; (8001810 <HAL_GPIO_Init+0x2cc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d013      	beq.n	8001714 <HAL_GPIO_Init+0x1d0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a49      	ldr	r2, [pc, #292]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00d      	beq.n	8001710 <HAL_GPIO_Init+0x1cc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a48      	ldr	r2, [pc, #288]	; (8001818 <HAL_GPIO_Init+0x2d4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d007      	beq.n	800170c <HAL_GPIO_Init+0x1c8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a47      	ldr	r2, [pc, #284]	; (800181c <HAL_GPIO_Init+0x2d8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_GPIO_Init+0x1c4>
 8001704:	2304      	movs	r3, #4
 8001706:	e008      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 8001708:	2307      	movs	r3, #7
 800170a:	e006      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 800170c:	2303      	movs	r3, #3
 800170e:	e004      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 8001710:	2302      	movs	r3, #2
 8001712:	e002      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 8001718:	2300      	movs	r3, #0
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	f002 0203 	and.w	r2, r2, #3
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	4093      	lsls	r3, r2
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800172a:	4938      	ldr	r1, [pc, #224]	; (800180c <HAL_GPIO_Init+0x2c8>)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800175c:	4a30      	ldr	r2, [pc, #192]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001786:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 800178e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b2:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 80017bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017e0:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_GPIO_Init+0x2dc>)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f47f aeab 	bne.w	8001554 <HAL_GPIO_Init+0x10>
  }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40010000 	.word	0x40010000
 8001810:	48000400 	.word	0x48000400
 8001814:	48000800 	.word	0x48000800
 8001818:	48000c00 	.word	0x48000c00
 800181c:	48001000 	.word	0x48001000
 8001820:	58000800 	.word	0x58000800

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001840:	e002      	b.n	8001848 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f9d8 	bl	8000c28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	58000800 	.word	0x58000800

08001884 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	b08b      	sub	sp, #44	; 0x2c
 8001888:	af06      	add	r7, sp, #24
 800188a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0cb      	b.n	8001a2e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fada 	bl	8000e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2203      	movs	r2, #3
 80018b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 faed 	bl	8004e9c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e040      	b.n	800194a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3301      	adds	r3, #1
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	3303      	adds	r3, #3
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3338      	adds	r3, #56	; 0x38
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	333c      	adds	r3, #60	; 0x3c
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	3340      	adds	r3, #64	; 0x40
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	3301      	adds	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	d3b9      	bcc.n	80018c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e044      	b.n	80019e4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	f203 1369 	addw	r3, r3, #361	; 0x169
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	3301      	adds	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d3b5      	bcc.n	800195a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	687e      	ldr	r6, [r7, #4]
 80019f6:	466d      	mov	r5, sp
 80019f8:	f106 0410 	add.w	r4, r6, #16
 80019fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	602b      	str	r3, [r5, #0]
 8001a04:	1d33      	adds	r3, r6, #4
 8001a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a08:	6838      	ldr	r0, [r7, #0]
 8001a0a:	f003 fa62 	bl	8004ed2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d102      	bne.n	8001a2c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f805 	bl	8001a36 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a36 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	58000400 	.word	0x58000400

08001aac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	58000400 	.word	0x58000400

08001ac8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ada:	d101      	bne.n	8001ae0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_RCC_HSE_Enable>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_RCC_HSE_Disable>:
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_RCC_HSE_IsReady>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b3a:	d101      	bne.n	8001b40 <LL_RCC_HSE_IsReady+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_RCC_HSE_IsReady+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_RCC_HSI_Enable>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_RCC_HSI_Disable>:
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b7c:	6013      	str	r3, [r2, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_RCC_HSI_IsReady>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9a:	d101      	bne.n	8001ba0 <LL_RCC_HSI_IsReady+0x18>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <LL_RCC_HSI_IsReady+0x1a>
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_RCC_HSI_SetCalibTrimming>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	061b      	lsls	r3, r3, #24
 8001bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_HSI48_Enable>:
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_RCC_HSI48_Disable>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_RCC_HSI48_IsReady>:
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d101      	bne.n	8001c32 <LL_RCC_HSI48_IsReady+0x18>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_RCC_HSI48_IsReady+0x1a>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_RCC_LSE_Enable>:
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_RCC_LSE_Disable>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_RCC_LSE_EnableBypass>:
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_RCC_LSE_DisableBypass>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_RCC_LSE_IsReady>:
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d101      	bne.n	8001cde <LL_RCC_LSE_IsReady+0x18>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_RCC_LSE_IsReady+0x1a>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_LSI1_Enable>:
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_RCC_LSI1_Disable>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_RCC_LSI1_IsReady>:
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d101      	bne.n	8001d46 <LL_RCC_LSI1_IsReady+0x18>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_RCC_LSI1_IsReady+0x1a>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_RCC_LSI2_Enable>:
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_RCC_LSI2_Disable>:
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_RCC_LSI2_IsReady>:
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d101      	bne.n	8001dae <LL_RCC_LSI2_IsReady+0x18>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <LL_RCC_LSI2_IsReady+0x1a>
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_RCC_LSI2_SetTrimming>:
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_RCC_MSI_Enable>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_RCC_MSI_Disable>:
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6013      	str	r3, [r2, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_RCC_MSI_IsReady>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d101      	bne.n	8001e3a <LL_RCC_MSI_IsReady+0x16>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <LL_RCC_MSI_IsReady+0x18>
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_RCC_MSI_SetRange>:
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_RCC_MSI_GetRange>:
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2bb0      	cmp	r3, #176	; 0xb0
 8001e84:	d901      	bls.n	8001e8a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001e86:	23b0      	movs	r3, #176	; 0xb0
 8001e88:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001e8a:	687b      	ldr	r3, [r7, #4]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_RCC_SetSysClkSource>:
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 0203 	bic.w	r2, r3, #3
 8001ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_RCC_GetSysClkSource>:
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_SetAHBPrescaler>:
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_C2_RCC_SetAHBPrescaler>:
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_RCC_SetAHB4Prescaler>:
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f66:	f023 020f 	bic.w	r2, r3, #15
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_RCC_SetAPB1Prescaler>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_SetAPB2Prescaler>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_GetAHBPrescaler>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_RCC_GetAHB4Prescaler>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002038:	6013      	str	r3, [r2, #0]
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002056:	d101      	bne.n	800205c <LL_RCC_PLL_IsReady+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_RCC_PLL_IsReady+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800206c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0303 	and.w	r3, r3, #3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80020ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020dc:	d101      	bne.n	80020e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002102:	d101      	bne.n	8002108 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d101      	bne.n	800212e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800214c:	d101      	bne.n	8002152 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002170:	d101      	bne.n	8002176 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b08d      	sub	sp, #52	; 0x34
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e363      	b.n	800285e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 808d 	beq.w	80022be <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a4:	f7ff fea1 	bl	8001eea <LL_RCC_GetSysClkSource>
 80021a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021aa:	f7ff ff82 	bl	80020b2 <LL_RCC_PLL_GetMainSource>
 80021ae:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3e>
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d147      	bne.n	800224c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80021bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d144      	bne.n	800224c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e347      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80021d2:	f7ff fe4c 	bl	8001e6e <LL_RCC_MSI_GetRange>
 80021d6:	4603      	mov	r3, r0
 80021d8:	429c      	cmp	r4, r3
 80021da:	d914      	bls.n	8002206 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fd03 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e336      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fe26 	bl	8001e46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fe4a 	bl	8001e98 <LL_RCC_MSI_SetCalibTrimming>
 8002204:	e013      	b.n	800222e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fe1b 	bl	8001e46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fe3f 	bl	8001e98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fce4 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e317      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800222e:	f000 fcc9 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002232:	4603      	mov	r3, r0
 8002234:	4aa4      	ldr	r2, [pc, #656]	; (80024c8 <HAL_RCC_OscConfig+0x344>)
 8002236:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002238:	4ba4      	ldr	r3, [pc, #656]	; (80024cc <HAL_RCC_OscConfig+0x348>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe ffe7 	bl	8001210 <HAL_InitTick>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d039      	beq.n	80022bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e308      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01e      	beq.n	8002292 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002254:	f7ff fdc8 	bl	8001de8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002258:	f7ff f828 	bl	80012ac <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002260:	f7ff f824 	bl	80012ac <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e2f5      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002272:	f7ff fdd7 	bl	8001e24 <LL_RCC_MSI_IsReady>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f1      	beq.n	8002260 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fde0 	bl	8001e46 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fe04 	bl	8001e98 <LL_RCC_MSI_SetCalibTrimming>
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002292:	f7ff fdb8 	bl	8001e06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002296:	f7ff f809 	bl	80012ac <HAL_GetTick>
 800229a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800229e:	f7ff f805 	bl	80012ac <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e2d6      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80022b0:	f7ff fdb8 	bl	8001e24 <LL_RCC_MSI_IsReady>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f1      	bne.n	800229e <HAL_RCC_OscConfig+0x11a>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80022bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d047      	beq.n	800235a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ca:	f7ff fe0e 	bl	8001eea <LL_RCC_GetSysClkSource>
 80022ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d0:	f7ff feef 	bl	80020b2 <LL_RCC_PLL_GetMainSource>
 80022d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_OscConfig+0x164>
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d108      	bne.n	80022f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d134      	bne.n	800235a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e2b4      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_OscConfig+0x180>
 80022fe:	f7ff fbf5 	bl	8001aec <LL_RCC_HSE_Enable>
 8002302:	e001      	b.n	8002308 <HAL_RCC_OscConfig+0x184>
 8002304:	f7ff fc01 	bl	8001b0a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d012      	beq.n	8002336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe ffcc 	bl	80012ac <HAL_GetTick>
 8002314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe ffc8 	bl	80012ac <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e299      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800232a:	f7ff fbfd 	bl	8001b28 <LL_RCC_HSE_IsReady>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f1      	beq.n	8002318 <HAL_RCC_OscConfig+0x194>
 8002334:	e011      	b.n	800235a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe ffb9 	bl	80012ac <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233e:	f7fe ffb5 	bl	80012ac <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e286      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002350:	f7ff fbea 	bl	8001b28 <LL_RCC_HSE_IsReady>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f1      	bne.n	800233e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04c      	beq.n	8002400 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002366:	f7ff fdc0 	bl	8001eea <LL_RCC_GetSysClkSource>
 800236a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236c:	f7ff fea1 	bl	80020b2 <LL_RCC_PLL_GetMainSource>
 8002370:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x200>
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d10e      	bne.n	800239c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d10b      	bne.n	800239c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e266      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fc09 	bl	8001bac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800239a:	e031      	b.n	8002400 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d019      	beq.n	80023d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	f7ff fbd2 	bl	8001b4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe ff80 	bl	80012ac <HAL_GetTick>
 80023ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b0:	f7fe ff7c 	bl	80012ac <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e24d      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80023c2:	f7ff fbe1 	bl	8001b88 <LL_RCC_HSI_IsReady>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f1      	beq.n	80023b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fbeb 	bl	8001bac <LL_RCC_HSI_SetCalibTrimming>
 80023d6:	e013      	b.n	8002400 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d8:	f7ff fbc7 	bl	8001b6a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe ff66 	bl	80012ac <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7fe ff62 	bl	80012ac <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e233      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80023f6:	f7ff fbc7 	bl	8001b88 <LL_RCC_HSI_IsReady>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f1      	bne.n	80023e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a3 	beq.w	8002560 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d076      	beq.n	8002510 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d046      	beq.n	80024bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800242e:	f7ff fc7e 	bl	8001d2e <LL_RCC_LSI1_IsReady>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d113      	bne.n	8002460 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002438:	f7ff fc57 	bl	8001cea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800243c:	f7fe ff36 	bl	80012ac <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002444:	f7fe ff32 	bl	80012ac <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e203      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002456:	f7ff fc6a 	bl	8001d2e <LL_RCC_LSI1_IsReady>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f1      	beq.n	8002444 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002460:	f7ff fc77 	bl	8001d52 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe ff22 	bl	80012ac <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800246c:	f7fe ff1e 	bl	80012ac <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b03      	cmp	r3, #3
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1ef      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800247e:	f7ff fc8a 	bl	8001d96 <LL_RCC_LSI2_IsReady>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f1      	beq.n	800246c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fc94 	bl	8001dba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002492:	f7ff fc3b 	bl	8001d0c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe ff09 	bl	80012ac <HAL_GetTick>
 800249a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800249e:	f7fe ff05 	bl	80012ac <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e1d6      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80024b0:	f7ff fc3d 	bl	8001d2e <LL_RCC_LSI1_IsReady>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x31a>
 80024ba:	e051      	b.n	8002560 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80024bc:	f7ff fc15 	bl	8001cea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fef4 	bl	80012ac <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80024c6:	e00c      	b.n	80024e2 <HAL_RCC_OscConfig+0x35e>
 80024c8:	20000010 	.word	0x20000010
 80024cc:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80024d0:	f7fe feec 	bl	80012ac <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1bd      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80024e2:	f7ff fc24 	bl	8001d2e <LL_RCC_LSI1_IsReady>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f1      	beq.n	80024d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80024ec:	f7ff fc42 	bl	8001d74 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80024f2:	f7fe fedb 	bl	80012ac <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1ac      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002504:	f7ff fc47 	bl	8001d96 <LL_RCC_LSI2_IsReady>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f1      	bne.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 800250e:	e027      	b.n	8002560 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002510:	f7ff fc30 	bl	8001d74 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe feca 	bl	80012ac <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800251c:	f7fe fec6 	bl	80012ac <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b03      	cmp	r3, #3
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e197      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800252e:	f7ff fc32 	bl	8001d96 <LL_RCC_LSI2_IsReady>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f1      	bne.n	800251c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002538:	f7ff fbe8 	bl	8001d0c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe feb6 	bl	80012ac <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002544:	f7fe feb2 	bl	80012ac <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e183      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002556:	f7ff fbea 	bl	8001d2e <LL_RCC_LSI1_IsReady>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f1      	bne.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05b      	beq.n	8002624 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256c:	4ba7      	ldr	r3, [pc, #668]	; (800280c <HAL_RCC_OscConfig+0x688>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d114      	bne.n	80025a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002578:	f7ff fa88 	bl	8001a8c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257c:	f7fe fe96 	bl	80012ac <HAL_GetTick>
 8002580:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002584:	f7fe fe92 	bl	80012ac <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e163      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002596:	4b9d      	ldr	r3, [pc, #628]	; (800280c <HAL_RCC_OscConfig+0x688>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_OscConfig+0x42c>
 80025aa:	f7ff fb48 	bl	8001c3e <LL_RCC_LSE_Enable>
 80025ae:	e00c      	b.n	80025ca <HAL_RCC_OscConfig+0x446>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d104      	bne.n	80025c2 <HAL_RCC_OscConfig+0x43e>
 80025b8:	f7ff fb63 	bl	8001c82 <LL_RCC_LSE_EnableBypass>
 80025bc:	f7ff fb3f 	bl	8001c3e <LL_RCC_LSE_Enable>
 80025c0:	e003      	b.n	80025ca <HAL_RCC_OscConfig+0x446>
 80025c2:	f7ff fb4d 	bl	8001c60 <LL_RCC_LSE_Disable>
 80025c6:	f7ff fb6d 	bl	8001ca4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d014      	beq.n	80025fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7fe fe6b 	bl	80012ac <HAL_GetTick>
 80025d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fe67 	bl	80012ac <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e136      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80025f0:	f7ff fb69 	bl	8001cc6 <LL_RCC_LSE_IsReady>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0ef      	beq.n	80025da <HAL_RCC_OscConfig+0x456>
 80025fa:	e013      	b.n	8002624 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe fe56 	bl	80012ac <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fe52 	bl	80012ac <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e121      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800261a:	f7ff fb54 	bl	8001cc6 <LL_RCC_LSE_IsReady>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ef      	bne.n	8002604 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d02c      	beq.n	800268a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d014      	beq.n	8002662 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002638:	f7ff facd 	bl	8001bd6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fe36 	bl	80012ac <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002644:	f7fe fe32 	bl	80012ac <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e103      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002656:	f7ff fae0 	bl	8001c1a <LL_RCC_HSI48_IsReady>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f1      	beq.n	8002644 <HAL_RCC_OscConfig+0x4c0>
 8002660:	e013      	b.n	800268a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002662:	f7ff fac9 	bl	8001bf8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe fe21 	bl	80012ac <HAL_GetTick>
 800266a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266e:	f7fe fe1d 	bl	80012ac <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0ee      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002680:	f7ff facb 	bl	8001c1a <LL_RCC_HSI48_IsReady>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f1      	bne.n	800266e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80e4 	beq.w	800285c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002694:	f7ff fc29 	bl	8001eea <LL_RCC_GetSysClkSource>
 8002698:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	f040 80b4 	bne.w	8002814 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0203 	and.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d123      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d11c      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d114      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d10d      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d05d      	beq.n	80027be <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d058      	beq.n	80027ba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0a1      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800271a:	f7ff fc84 	bl	8002026 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800271e:	f7fe fdc5 	bl	80012ac <HAL_GetTick>
 8002722:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7fe fdc1 	bl	80012ac <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e092      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ef      	bne.n	8002726 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCC_OscConfig+0x68c>)
 800274e:	4013      	ands	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800275e:	0212      	lsls	r2, r2, #8
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002766:	4311      	orrs	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002772:	430a      	orrs	r2, r1
 8002774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002778:	4313      	orrs	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800277c:	f7ff fc44 	bl	8002008 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002790:	f7fe fd8c 	bl	80012ac <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe fd88 	bl	80012ac <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e059      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	e050      	b.n	800285c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e04f      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d147      	bne.n	800285c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027cc:	f7ff fc1c 	bl	8002008 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027e0:	f7fe fd64 	bl	80012ac <HAL_GetTick>
 80027e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fd60 	bl	80012ac <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e031      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x664>
 8002808:	e028      	b.n	800285c <HAL_RCC_OscConfig+0x6d8>
 800280a:	bf00      	nop
 800280c:	58000400 	.word	0x58000400
 8002810:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d01e      	beq.n	8002858 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	f7ff fc04 	bl	8002026 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fd45 	bl	80012ac <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fd41 	bl	80012ac <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e012      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ef      	bne.n	8002826 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_OscConfig+0x6e4>)
 8002852:	4013      	ands	r3, r2
 8002854:	60cb      	str	r3, [r1, #12]
 8002856:	e001      	b.n	800285c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3734      	adds	r7, #52	; 0x34
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	bf00      	nop
 8002868:	eefefffc 	.word	0xeefefffc

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e12d      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b98      	ldr	r3, [pc, #608]	; (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d91b      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b95      	ldr	r3, [pc, #596]	; (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 0207 	bic.w	r2, r3, #7
 8002896:	4993      	ldr	r1, [pc, #588]	; (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289e:	f7fe fd05 	bl	80012ac <HAL_GetTick>
 80028a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028a6:	f7fe fd01 	bl	80012ac <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e111      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b8:	4b8a      	ldr	r3, [pc, #552]	; (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d1ef      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d016      	beq.n	8002900 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fb13 	bl	8001f02 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fce6 	bl	80012ac <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028e4:	f7fe fce2 	bl	80012ac <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0f2      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028f6:	f7ff fbe8 	bl	80020ca <LL_RCC_IsActiveFlag_HPRE>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f1      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d016      	beq.n	800293a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fb0a 	bl	8001f2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002916:	f7fe fcc9 	bl	80012ac <HAL_GetTick>
 800291a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800291e:	f7fe fcc5 	bl	80012ac <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0d5      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002930:	f7ff fbdd 	bl	80020ee <LL_RCC_IsActiveFlag_C2HPRE>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f1      	beq.n	800291e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fb03 	bl	8001f56 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002950:	f7fe fcac 	bl	80012ac <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002958:	f7fe fca8 	bl	80012ac <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0b8      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800296a:	f7ff fbd3 	bl	8002114 <LL_RCC_IsActiveFlag_SHDHPRE>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f1      	beq.n	8002958 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d016      	beq.n	80029ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fafd 	bl	8001f84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800298a:	f7fe fc8f 	bl	80012ac <HAL_GetTick>
 800298e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002992:	f7fe fc8b 	bl	80012ac <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e09b      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80029a4:	f7ff fbc9 	bl	800213a <LL_RCC_IsActiveFlag_PPRE1>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f1      	beq.n	8002992 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d017      	beq.n	80029ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff faf3 	bl	8001fac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029c6:	f7fe fc71 	bl	80012ac <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029ce:	f7fe fc6d 	bl	80012ac <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e07d      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029e0:	f7ff fbbd 	bl	800215e <LL_RCC_IsActiveFlag_PPRE2>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f1      	beq.n	80029ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d043      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80029fe:	f7ff f893 	bl	8001b28 <LL_RCC_HSE_IsReady>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11e      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e067      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002a14:	f7ff fb16 	bl	8002044 <LL_RCC_PLL_IsReady>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d113      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e05c      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002a2a:	f7ff f9fb 	bl	8001e24 <LL_RCC_MSI_IsReady>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d108      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e051      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002a38:	f7ff f8a6 	bl	8001b88 <LL_RCC_HSI_IsReady>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e04a      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fa39 	bl	8001ec2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7fe fc2c 	bl	80012ac <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe fc28 	bl	80012ac <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e036      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	f7ff fa3c 	bl	8001eea <LL_RCC_GetSysClkSource>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d1ec      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d21b      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 0207 	bic.w	r2, r3, #7
 8002a94:	4913      	ldr	r1, [pc, #76]	; (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fc06 	bl	80012ac <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002aa4:	f7fe fc02 	bl	80012ac <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e012      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1ef      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ac4:	f000 f87e 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <HAL_RCC_ClockConfig+0x27c>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002ace:	f7fe fbf9 	bl	80012c4 <HAL_GetTickPrio>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fb9b 	bl	8001210 <HAL_InitTick>
 8002ada:	4603      	mov	r3, r0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	58004000 	.word	0x58004000
 8002ae8:	20000010 	.word	0x20000010

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af2:	f7ff f9fa 	bl	8001eea <LL_RCC_GetSysClkSource>
 8002af6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002afe:	f7ff f9b6 	bl	8001e6e <LL_RCC_MSI_GetRange>
 8002b02:	4603      	mov	r3, r0
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	e04b      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b1a:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e045      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d10a      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b26:	f7fe ffcf 	bl	8001ac8 <LL_RCC_HSE_IsEnabledDiv2>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d102      	bne.n	8002b36 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002b30:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e03a      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e037      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002b3c:	f7ff fab9 	bl	80020b2 <LL_RCC_PLL_GetMainSource>
 8002b40:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d003      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x64>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d003      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x6a>
 8002b4e:	e00d      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002b50:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b52:	60bb      	str	r3, [r7, #8]
        break;
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b56:	f7fe ffb7 	bl	8001ac8 <LL_RCC_HSE_IsEnabledDiv2>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b62:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002b64:	e00d      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b68:	60bb      	str	r3, [r7, #8]
        break;
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b6c:	f7ff f97f 	bl	8001e6e <LL_RCC_MSI_GetRange>
 8002b70:	4603      	mov	r3, r0
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7e:	60bb      	str	r3, [r7, #8]
        break;
 8002b80:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002b82:	f7ff fa71 	bl	8002068 <LL_RCC_PLL_GetN>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	fb03 f402 	mul.w	r4, r3, r2
 8002b8e:	f7ff fa84 	bl	800209a <LL_RCC_PLL_GetDivider>
 8002b92:	4603      	mov	r3, r0
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	3301      	adds	r3, #1
 8002b98:	fbb4 f4f3 	udiv	r4, r4, r3
 8002b9c:	f7ff fa71 	bl	8002082 <LL_RCC_PLL_GetR>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	0f5b      	lsrs	r3, r3, #29
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	fbb4 f3f3 	udiv	r3, r4, r3
 8002baa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002bac:	68fb      	ldr	r3, [r7, #12]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	08005fc8 	.word	0x08005fc8
 8002bbc:	00f42400 	.word	0x00f42400
 8002bc0:	01e84800 	.word	0x01e84800

08002bc4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc4:	b598      	push	{r3, r4, r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002bc8:	f7ff ff90 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002bcc:	4604      	mov	r4, r0
 8002bce:	f7ff fa01 	bl	8001fd4 <LL_RCC_GetAHBPrescaler>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd98      	pop	{r3, r4, r7, pc}
 8002be8:	08005f88 	.word	0x08005f88

08002bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2bb0      	cmp	r3, #176	; 0xb0
 8002bf8:	d903      	bls.n	8002c02 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e007      	b.n	8002c12 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002c12:	f7ff f9eb 	bl	8001fec <LL_RCC_GetAHB4Prescaler>
 8002c16:	4603      	mov	r3, r0
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0c9c      	lsrs	r4, r3, #18
 8002c36:	f7fe ff39 	bl	8001aac <HAL_PWREx_GetVoltageRange>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f000 f80c 	bl	8002c5c <RCC_SetFlashLatency>
 8002c44:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	08005fc8 	.word	0x08005fc8
 8002c54:	08005f88 	.word	0x08005f88
 8002c58:	431bde83 	.word	0x431bde83

08002c5c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b093      	sub	sp, #76	; 0x4c
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <RCC_SetFlashLatency+0xe8>)
 8002c68:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002c72:	4a35      	ldr	r2, [pc, #212]	; (8002d48 <RCC_SetFlashLatency+0xec>)
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002c7e:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <RCC_SetFlashLatency+0xf0>)
 8002c80:	f107 040c 	add.w	r4, r7, #12
 8002c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c94:	d11a      	bne.n	8002ccc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9a:	e013      	b.n	8002cc4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	3348      	adds	r3, #72	; 0x48
 8002ca2:	443b      	add	r3, r7
 8002ca4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d807      	bhi.n	8002cbe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	3348      	adds	r3, #72	; 0x48
 8002cb4:	443b      	add	r3, r7
 8002cb6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002cba:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002cbc:	e020      	b.n	8002d00 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
 8002cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d9e8      	bls.n	8002c9c <RCC_SetFlashLatency+0x40>
 8002cca:	e019      	b.n	8002d00 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd0:	e013      	b.n	8002cfa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	3348      	adds	r3, #72	; 0x48
 8002cd8:	443b      	add	r3, r7
 8002cda:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d807      	bhi.n	8002cf4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3348      	adds	r3, #72	; 0x48
 8002cea:	443b      	add	r3, r7
 8002cec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002cf0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002cf2:	e005      	b.n	8002d00 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d9e8      	bls.n	8002cd2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <RCC_SetFlashLatency+0xf4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 0207 	bic.w	r2, r3, #7
 8002d08:	4911      	ldr	r1, [pc, #68]	; (8002d50 <RCC_SetFlashLatency+0xf4>)
 8002d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d10:	f7fe facc 	bl	80012ac <HAL_GetTick>
 8002d14:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d16:	e008      	b.n	8002d2a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d18:	f7fe fac8 	bl	80012ac <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e007      	b.n	8002d3a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <RCC_SetFlashLatency+0xf4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1ef      	bne.n	8002d18 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	374c      	adds	r7, #76	; 0x4c
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd90      	pop	{r4, r7, pc}
 8002d42:	bf00      	nop
 8002d44:	08005f5c 	.word	0x08005f5c
 8002d48:	08005f6c 	.word	0x08005f6c
 8002d4c:	08005f78 	.word	0x08005f78
 8002d50:	58004000 	.word	0x58004000

08002d54 <LL_RCC_LSE_IsEnabled>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <LL_RCC_LSE_IsEnabled+0x18>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_RCC_LSE_IsEnabled+0x1a>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_RCC_LSE_IsReady>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d101      	bne.n	8002d90 <LL_RCC_LSE_IsReady+0x18>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <LL_RCC_LSE_IsReady+0x1a>
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_RCC_MSI_EnablePLLMode>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_RCC_SetRFWKPClockSource>:
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_RCC_SetSMPSClockSource>:
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f023 0203 	bic.w	r2, r3, #3
 8002df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_RCC_SetSMPSPrescaler>:
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_SetUSARTClockSource>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_RCC_SetLPUARTClockSource>:
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_RCC_SetI2CClockSource>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_SetLPTIMClockSource>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0c1b      	lsrs	r3, r3, #16
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <LL_RCC_SetSAIClockSource>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_RCC_SetRNGClockSource>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_RCC_SetCLK48ClockSource>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_SetUSBClockSource>:
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ffe3 	bl	8002f54 <LL_RCC_SetCLK48ClockSource>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <LL_RCC_SetADCClockSource>:
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_RCC_SetRTCClockSource>:
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_RCC_GetRTCClockSource>:
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_RCC_ForceBackupDomainReset>:
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800300c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <LL_RCC_ReleaseBackupDomainReset>:
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_RCC_PLLSAI1_Enable>:
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800305a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800305e:	6013      	str	r3, [r2, #0]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_RCC_PLLSAI1_Disable>:
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003078:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800307c:	6013      	str	r3, [r2, #0]
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_RCC_PLLSAI1_IsReady>:
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800309a:	d101      	bne.n	80030a0 <LL_RCC_PLLSAI1_IsReady+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80030b4:	2300      	movs	r3, #0
 80030b6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80030b8:	2300      	movs	r3, #0
 80030ba:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d034      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030d0:	d021      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80030d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030d6:	d81b      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030dc:	d01d      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80030de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e2:	d815      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80030e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ec:	d110      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80030fe:	e00d      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f94d 	bl	80033a4 <RCCEx_PLLSAI1_ConfigNP>
 800310a:	4603      	mov	r3, r0
 800310c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800310e:	e005      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	77fb      	strb	r3, [r7, #31]
        break;
 8003114:	e002      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800311a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311c:	7ffb      	ldrb	r3, [r7, #31]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fee8 	bl	8002efc <LL_RCC_SetSAIClockSource>
 800312c:	e001      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312e:	7ffb      	ldrb	r3, [r7, #31]
 8003130:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313a:	2b00      	cmp	r3, #0
 800313c:	d046      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800313e:	f7ff ff56 	bl	8002fee <LL_RCC_GetRTCClockSource>
 8003142:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	429a      	cmp	r2, r3
 800314c:	d03c      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800314e:	f7fe fc9d 	bl	8001a8c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff30 	bl	8002fc2 <LL_RCC_SetRTCClockSource>
 8003162:	e02e      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800316e:	f7ff ff4b 	bl	8003008 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003172:	f7ff ff5a 	bl	800302a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800318e:	f7ff fde1 	bl	8002d54 <LL_RCC_LSE_IsEnabled>
 8003192:	4603      	mov	r3, r0
 8003194:	2b01      	cmp	r3, #1
 8003196:	d114      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003198:	f7fe f888 	bl	80012ac <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800319e:	e00b      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fe f884 	bl	80012ac <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d902      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	77fb      	strb	r3, [r7, #31]
              break;
 80031b6:	e004      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80031b8:	f7ff fdde 	bl	8002d78 <LL_RCC_LSE_IsReady>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d1ee      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80031c2:	7ffb      	ldrb	r3, [r7, #31]
 80031c4:	77bb      	strb	r3, [r7, #30]
 80031c6:	e001      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	7ffb      	ldrb	r3, [r7, #31]
 80031ca:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fe2a 	bl	8002e36 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fe35 	bl	8002e62 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fe5d 	bl	8002ec8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fe52 	bl	8002ec8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fe2a 	bl	8002e8e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fe1f 	bl	8002e8e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d022      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fe8d 	bl	8002f80 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800326e:	d107      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003288:	d10b      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f8e3 	bl	800345a <RCCEx_PLLSAI1_ConfigNQ>
 8003294:	4603      	mov	r3, r0
 8003296:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800329e:	7ffb      	ldrb	r3, [r7, #31]
 80032a0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d02b      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d008      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032c0:	d003      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fe2a 	bl	8002f28 <LL_RCC_SetRNGClockSource>
 80032d4:	e00a      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x240>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7ff fe21 	bl	8002f28 <LL_RCC_SetRNGClockSource>
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff fe34 	bl	8002f54 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80032f4:	d107      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003304:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	2b00      	cmp	r3, #0
 8003310:	d022      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fe3d 	bl	8002f96 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003324:	d107      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800333e:	d10b      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f8e3 	bl	8003510 <RCCEx_PLLSAI1_ConfigNR>
 800334a:	4603      	mov	r3, r0
 800334c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800334e:	7ffb      	ldrb	r3, [r7, #31]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003354:	7ffb      	ldrb	r3, [r7, #31]
 8003356:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fd26 	bl	8002dba <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fd45 	bl	8002e0e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fd2c 	bl	8002de6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800338e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3720      	adds	r7, #32
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800339c:	f7ff fcfe 	bl	8002d9c <LL_RCC_MSI_EnablePLLMode>
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033b0:	f7ff fe5b 	bl	800306a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033b4:	f7fd ff7a 	bl	80012ac <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033ba:	e009      	b.n	80033d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033bc:	f7fd ff76 	bl	80012ac <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d902      	bls.n	80033d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	73fb      	strb	r3, [r7, #15]
      break;
 80033ce:	e004      	b.n	80033da <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033d0:	f7ff fe5a 	bl	8003088 <LL_RCC_PLLSAI1_IsReady>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d137      	bne.n	8003450 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f4:	4313      	orrs	r3, r2
 80033f6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80033f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800340a:	4313      	orrs	r3, r2
 800340c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800340e:	f7ff fe1d 	bl	800304c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003412:	f7fd ff4b 	bl	80012ac <HAL_GetTick>
 8003416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003418:	e009      	b.n	800342e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800341a:	f7fd ff47 	bl	80012ac <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d902      	bls.n	800342e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	73fb      	strb	r3, [r7, #15]
        break;
 800342c:	e004      	b.n	8003438 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800342e:	f7ff fe2b 	bl	8003088 <LL_RCC_PLLSAI1_IsReady>
 8003432:	4603      	mov	r3, r0
 8003434:	2b01      	cmp	r3, #1
 8003436:	d1f0      	bne.n	800341a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344c:	4313      	orrs	r3, r2
 800344e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003466:	f7ff fe00 	bl	800306a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800346a:	f7fd ff1f 	bl	80012ac <HAL_GetTick>
 800346e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003470:	e009      	b.n	8003486 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003472:	f7fd ff1b 	bl	80012ac <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d902      	bls.n	8003486 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	73fb      	strb	r3, [r7, #15]
      break;
 8003484:	e004      	b.n	8003490 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003486:	f7ff fdff 	bl	8003088 <LL_RCC_PLLSAI1_IsReady>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f0      	bne.n	8003472 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d137      	bne.n	8003506 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034aa:	4313      	orrs	r3, r2
 80034ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80034ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034c0:	4313      	orrs	r3, r2
 80034c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034c4:	f7ff fdc2 	bl	800304c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c8:	f7fd fef0 	bl	80012ac <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034ce:	e009      	b.n	80034e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d0:	f7fd feec 	bl	80012ac <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d902      	bls.n	80034e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	73fb      	strb	r3, [r7, #15]
        break;
 80034e2:	e004      	b.n	80034ee <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034e4:	f7ff fdd0 	bl	8003088 <LL_RCC_PLLSAI1_IsReady>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d1f0      	bne.n	80034d0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d108      	bne.n	8003506 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003502:	4313      	orrs	r3, r2
 8003504:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003506:	7bfb      	ldrb	r3, [r7, #15]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800351c:	f7ff fda5 	bl	800306a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003520:	f7fd fec4 	bl	80012ac <HAL_GetTick>
 8003524:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003526:	e009      	b.n	800353c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003528:	f7fd fec0 	bl	80012ac <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d902      	bls.n	800353c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	73fb      	strb	r3, [r7, #15]
      break;
 800353a:	e004      	b.n	8003546 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800353c:	f7ff fda4 	bl	8003088 <LL_RCC_PLLSAI1_IsReady>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d137      	bne.n	80035bc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003560:	4313      	orrs	r3, r2
 8003562:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800357a:	f7ff fd67 	bl	800304c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357e:	f7fd fe95 	bl	80012ac <HAL_GetTick>
 8003582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003584:	e009      	b.n	800359a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003586:	f7fd fe91 	bl	80012ac <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d902      	bls.n	800359a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	73fb      	strb	r3, [r7, #15]
        break;
 8003598:	e004      	b.n	80035a4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800359a:	f7ff fd75 	bl	8003088 <LL_RCC_PLLSAI1_IsReady>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d1f0      	bne.n	8003586 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d108      	bne.n	80035bc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b8:	4313      	orrs	r3, r2
 80035ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e09f      	b.n	800371a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd fbcc 	bl	8000d8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035fc:	4b49      	ldr	r3, [pc, #292]	; (8003724 <HAL_RTC_Init+0x15c>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b10      	cmp	r3, #16
 8003606:	d07e      	beq.n	8003706 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	22ca      	movs	r2, #202	; 0xca
 800360e:	625a      	str	r2, [r3, #36]	; 0x24
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2253      	movs	r2, #83	; 0x53
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fa1d 	bl	8003a58 <RTC_EnterInitMode>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	22ff      	movs	r2, #255	; 0xff
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2204      	movs	r2, #4
 8003630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e067      	b.n	800370a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6899      	ldr	r1, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68d2      	ldr	r2, [r2, #12]
 8003674:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6919      	ldr	r1, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003698:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0203 	bic.w	r2, r2, #3
 80036a8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d113      	bne.n	80036f8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f99b 	bl	8003a0c <HAL_RTC_WaitForSynchro>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	22ff      	movs	r2, #255	; 0xff
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2204      	movs	r2, #4
 80036e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e010      	b.n	800371a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	22ff      	movs	r2, #255	; 0xff
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e001      	b.n	800370a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d103      	bne.n	8003718 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40002800 	.word	0x40002800

08003728 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_RTC_SetTime+0x1a>
 800373e:	2302      	movs	r3, #2
 8003740:	e0b2      	b.n	80038a8 <HAL_RTC_SetTime+0x180>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d126      	bne.n	80037a6 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2200      	movs	r2, #0
 800376a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f99b 	bl	8003aac <RTC_ByteToBcd2>
 8003776:	4603      	mov	r3, r0
 8003778:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 f994 	bl	8003aac <RTC_ByteToBcd2>
 8003784:	4603      	mov	r3, r0
 8003786:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003788:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	789b      	ldrb	r3, [r3, #2]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f98c 	bl	8003aac <RTC_ByteToBcd2>
 8003794:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003796:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	78db      	ldrb	r3, [r3, #3]
 800379e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e018      	b.n	80037d8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2200      	movs	r2, #0
 80037b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037c6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037cc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	78db      	ldrb	r3, [r3, #3]
 80037d2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	22ca      	movs	r2, #202	; 0xca
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2253      	movs	r2, #83	; 0x53
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f935 	bl	8003a58 <RTC_EnterInitMode>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	22ff      	movs	r2, #255	; 0xff
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2204      	movs	r2, #4
 8003800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e04b      	b.n	80038a8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800381a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800381e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800382e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	431a      	orrs	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003856:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d113      	bne.n	800388e <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8d0 	bl	8003a0c <HAL_RTC_WaitForSynchro>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	22ff      	movs	r2, #255	; 0xff
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2204      	movs	r2, #4
 800387e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e00c      	b.n	80038a8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80038a6:	2300      	movs	r3, #0
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}

080038b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_RTC_SetDate+0x1a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e09c      	b.n	8003a04 <HAL_RTC_SetDate+0x154>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10e      	bne.n	80038fe <HAL_RTC_SetDate+0x4e>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	f023 0310 	bic.w	r3, r3, #16
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	330a      	adds	r3, #10
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d11c      	bne.n	800393e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	78db      	ldrb	r3, [r3, #3]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f8cf 	bl	8003aac <RTC_ByteToBcd2>
 800390e:	4603      	mov	r3, r0
 8003910:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f8c8 	bl	8003aac <RTC_ByteToBcd2>
 800391c:	4603      	mov	r3, r0
 800391e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003920:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	789b      	ldrb	r3, [r3, #2]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f8c0 	bl	8003aac <RTC_ByteToBcd2>
 800392c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800392e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e00e      	b.n	800395c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	78db      	ldrb	r3, [r3, #3]
 8003942:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800394a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003950:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	22ca      	movs	r2, #202	; 0xca
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2253      	movs	r2, #83	; 0x53
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f873 	bl	8003a58 <RTC_EnterInitMode>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00d      	beq.n	8003994 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	22ff      	movs	r2, #255	; 0xff
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2204      	movs	r2, #4
 8003984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e037      	b.n	8003a04 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800399e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039a2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d113      	bne.n	80039ea <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f822 	bl	8003a0c <HAL_RTC_WaitForSynchro>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	22ff      	movs	r2, #255	; 0xff
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2204      	movs	r2, #4
 80039da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00c      	b.n	8003a04 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	22ff      	movs	r2, #255	; 0xff
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd90      	pop	{r4, r7, pc}

08003a0c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a22:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003a24:	f7fd fc42 	bl	80012ac <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a2a:	e009      	b.n	8003a40 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a2c:	f7fd fc3e 	bl	80012ac <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a3a:	d901      	bls.n	8003a40 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e007      	b.n	8003a50 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ee      	beq.n	8003a2c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d119      	bne.n	8003aa2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a76:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003a78:	f7fd fc18 	bl	80012ac <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a7e:	e009      	b.n	8003a94 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003a80:	f7fd fc14 	bl	80012ac <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a8e:	d901      	bls.n	8003a94 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e007      	b.n	8003aa4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ee      	beq.n	8003a80 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003abe:	e005      	b.n	8003acc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	3b0a      	subs	r3, #10
 8003aca:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003acc:	7afb      	ldrb	r3, [r7, #11]
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d8f6      	bhi.n	8003ac0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	7afb      	ldrb	r3, [r7, #11]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	b2db      	uxtb	r3, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e095      	b.n	8003c2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0e:	d009      	beq.n	8003b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
 8003b16:	e005      	b.n	8003b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd f950 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b64:	d902      	bls.n	8003b6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e002      	b.n	8003b72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b7a:	d007      	beq.n	8003b8c <HAL_SPI_Init+0xa0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	ea42 0103 	orr.w	r1, r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	f003 0204 	and.w	r2, r3, #4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c08:	ea42 0103 	orr.w	r1, r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b088      	sub	sp, #32
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_SPI_Transmit+0x22>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e158      	b.n	8003f06 <HAL_SPI_Transmit+0x2d4>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c5c:	f7fd fb26 	bl	80012ac <HAL_GetTick>
 8003c60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d002      	beq.n	8003c78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
 8003c74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c76:	e13d      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_SPI_Transmit+0x52>
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c88:	e134      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd4:	d10f      	bne.n	8003cf6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d007      	beq.n	8003d14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d1c:	d94b      	bls.n	8003db6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_Transmit+0xfa>
 8003d26:	8afb      	ldrh	r3, [r7, #22]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d13e      	bne.n	8003daa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d50:	e02b      	b.n	8003daa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d112      	bne.n	8003d86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	881a      	ldrh	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	1c9a      	adds	r2, r3, #2
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d84:	e011      	b.n	8003daa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d86:	f7fd fa91 	bl	80012ac <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d803      	bhi.n	8003d9e <HAL_SPI_Transmit+0x16c>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d9c:	d102      	bne.n	8003da4 <HAL_SPI_Transmit+0x172>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003da8:	e0a4      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ce      	bne.n	8003d52 <HAL_SPI_Transmit+0x120>
 8003db4:	e07c      	b.n	8003eb0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_SPI_Transmit+0x192>
 8003dbe:	8afb      	ldrh	r3, [r7, #22]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d170      	bne.n	8003ea6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d912      	bls.n	8003df4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	881a      	ldrh	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	1c9a      	adds	r2, r3, #2
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b02      	subs	r3, #2
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003df2:	e058      	b.n	8003ea6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	7812      	ldrb	r2, [r2, #0]
 8003e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e1a:	e044      	b.n	8003ea6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d12b      	bne.n	8003e82 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d912      	bls.n	8003e5a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b02      	subs	r3, #2
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e58:	e025      	b.n	8003ea6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e80:	e011      	b.n	8003ea6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e82:	f7fd fa13 	bl	80012ac <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d803      	bhi.n	8003e9a <HAL_SPI_Transmit+0x268>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e98:	d102      	bne.n	8003ea0 <HAL_SPI_Transmit+0x26e>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ea4:	e026      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1b5      	bne.n	8003e1c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	6839      	ldr	r1, [r7, #0]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fce3 	bl	8004880 <SPI_EndRxTxTransaction>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e000      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003ef2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b088      	sub	sp, #32
 8003f12:	af02      	add	r7, sp, #8
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2a:	d112      	bne.n	8003f52 <HAL_SPI_Receive+0x44>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10e      	bne.n	8003f52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2204      	movs	r2, #4
 8003f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f910 	bl	800416e <HAL_SPI_TransmitReceive>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	e109      	b.n	8004166 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_SPI_Receive+0x52>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e102      	b.n	8004166 <HAL_SPI_Receive+0x258>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f68:	f7fd f9a0 	bl	80012ac <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d002      	beq.n	8003f80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f7e:	e0e9      	b.n	8004154 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Receive+0x7e>
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f90:	e0e0      	b.n	8004154 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2204      	movs	r2, #4
 8003f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	88fa      	ldrh	r2, [r7, #6]
 8003faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fdc:	d908      	bls.n	8003ff0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	e007      	b.n	8004000 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004008:	d10f      	bne.n	800402a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004028:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d007      	beq.n	8004048 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004046:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004050:	d867      	bhi.n	8004122 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004052:	e030      	b.n	80040b6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d117      	bne.n	8004092 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f103 020c 	add.w	r2, r3, #12
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	7812      	ldrb	r2, [r2, #0]
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004090:	e011      	b.n	80040b6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004092:	f7fd f90b 	bl	80012ac <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d803      	bhi.n	80040aa <HAL_SPI_Receive+0x19c>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a8:	d102      	bne.n	80040b0 <HAL_SPI_Receive+0x1a2>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040b4:	e04e      	b.n	8004154 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1c8      	bne.n	8004054 <HAL_SPI_Receive+0x146>
 80040c2:	e034      	b.n	800412e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d115      	bne.n	80040fe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	b292      	uxth	r2, r2
 80040de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040fc:	e011      	b.n	8004122 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040fe:	f7fd f8d5 	bl	80012ac <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d803      	bhi.n	8004116 <HAL_SPI_Receive+0x208>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004114:	d102      	bne.n	800411c <HAL_SPI_Receive+0x20e>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004120:	e018      	b.n	8004154 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1ca      	bne.n	80040c4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fb4c 	bl	80047d0 <SPI_EndRxTransaction>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
 8004150:	e000      	b.n	8004154 <HAL_SPI_Receive+0x246>
  }

error :
 8004152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b08a      	sub	sp, #40	; 0x28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800417c:	2301      	movs	r3, #1
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_SPI_TransmitReceive+0x26>
 8004190:	2302      	movs	r3, #2
 8004192:	e1fb      	b.n	800458c <HAL_SPI_TransmitReceive+0x41e>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800419c:	f7fd f886 	bl	80012ac <HAL_GetTick>
 80041a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041b4:	887b      	ldrh	r3, [r7, #2]
 80041b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041b8:	7efb      	ldrb	r3, [r7, #27]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d00e      	beq.n	80041dc <HAL_SPI_TransmitReceive+0x6e>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c4:	d106      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x66>
 80041ce:	7efb      	ldrb	r3, [r7, #27]
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d003      	beq.n	80041dc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80041da:	e1cd      	b.n	8004578 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_SPI_TransmitReceive+0x80>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_SPI_TransmitReceive+0x80>
 80041e8:	887b      	ldrh	r3, [r7, #2]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80041f4:	e1c0      	b.n	8004578 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d003      	beq.n	800420a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2205      	movs	r2, #5
 8004206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	887a      	ldrh	r2, [r7, #2]
 800421a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	887a      	ldrh	r2, [r7, #2]
 8004222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	887a      	ldrh	r2, [r7, #2]
 8004236:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800424c:	d802      	bhi.n	8004254 <HAL_SPI_TransmitReceive+0xe6>
 800424e:	8a3b      	ldrh	r3, [r7, #16]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d908      	bls.n	8004266 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	e007      	b.n	8004276 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004274:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d007      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800429c:	d97c      	bls.n	8004398 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_TransmitReceive+0x13e>
 80042a6:	8a7b      	ldrh	r3, [r7, #18]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d169      	bne.n	8004380 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	1c9a      	adds	r2, r3, #2
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d0:	e056      	b.n	8004380 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d11b      	bne.n	8004318 <HAL_SPI_TransmitReceive+0x1aa>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x1aa>
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d113      	bne.n	8004318 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	881a      	ldrh	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	1c9a      	adds	r2, r3, #2
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d11c      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x1f2>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	b292      	uxth	r2, r2
 800433e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	1c9a      	adds	r2, r3, #2
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800435c:	2301      	movs	r3, #1
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004360:	f7fc ffa4 	bl	80012ac <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436c:	429a      	cmp	r2, r3
 800436e:	d807      	bhi.n	8004380 <HAL_SPI_TransmitReceive+0x212>
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004376:	d003      	beq.n	8004380 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800437e:	e0fb      	b.n	8004578 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1a3      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x164>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d19d      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x164>
 8004396:	e0df      	b.n	8004558 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x23a>
 80043a0:	8a7b      	ldrh	r3, [r7, #18]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	f040 80cb 	bne.w	800453e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d912      	bls.n	80043d8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	881a      	ldrh	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	1c9a      	adds	r2, r3, #2
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b02      	subs	r3, #2
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d6:	e0b2      	b.n	800453e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	7812      	ldrb	r2, [r2, #0]
 80043e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043fe:	e09e      	b.n	800453e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d134      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x30a>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02f      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x30a>
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	2b01      	cmp	r3, #1
 800441c:	d12c      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d912      	bls.n	800444e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	881a      	ldrh	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	1c9a      	adds	r2, r3, #2
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b02      	subs	r3, #2
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800444c:	e012      	b.n	8004474 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	7812      	ldrb	r2, [r2, #0]
 800445a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	d148      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x3aa>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d042      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d923      	bls.n	80044e6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	b292      	uxth	r2, r2
 80044aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	1c9a      	adds	r2, r3, #2
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b02      	subs	r3, #2
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d81f      	bhi.n	8004514 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	e016      	b.n	8004514 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f103 020c 	add.w	r2, r3, #12
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004514:	2301      	movs	r3, #1
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004518:	f7fc fec8 	bl	80012ac <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004524:	429a      	cmp	r2, r3
 8004526:	d803      	bhi.n	8004530 <HAL_SPI_TransmitReceive+0x3c2>
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800452e:	d102      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x3c8>
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800453c:	e01c      	b.n	8004578 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f af5b 	bne.w	8004400 <HAL_SPI_TransmitReceive+0x292>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	f47f af54 	bne.w	8004400 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f98f 	bl	8004880 <SPI_EndRxTxTransaction>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d006      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	661a      	str	r2, [r3, #96]	; 0x60
 8004574:	e000      	b.n	8004578 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004576:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800458c:	4618      	mov	r0, r3
 800458e:	3728      	adds	r7, #40	; 0x28
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045a4:	f7fc fe82 	bl	80012ac <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045b4:	f7fc fe7a 	bl	80012ac <HAL_GetTick>
 80045b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	015b      	lsls	r3, r3, #5
 80045c0:	0d1b      	lsrs	r3, r3, #20
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ca:	e054      	b.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d2:	d050      	beq.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d4:	f7fc fe6a 	bl	80012ac <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d902      	bls.n	80045ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d13d      	bne.n	8004666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004602:	d111      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460c:	d004      	beq.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d107      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004630:	d10f      	bne.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e017      	b.n	8004696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3b01      	subs	r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	429a      	cmp	r2, r3
 8004692:	d19b      	bne.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000010 	.word	0x20000010

080046a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046b6:	f7fc fdf9 	bl	80012ac <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	4413      	add	r3, r2
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80046c6:	f7fc fdf1 	bl	80012ac <HAL_GetTick>
 80046ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046d4:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	00da      	lsls	r2, r3, #3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	0d1b      	lsrs	r3, r3, #20
 80046e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046ec:	e060      	b.n	80047b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046f4:	d107      	bne.n	8004706 <SPI_WaitFifoStateUntilTimeout+0x62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d104      	bne.n	8004706 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004704:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800470c:	d050      	beq.n	80047b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800470e:	f7fc fdcd 	bl	80012ac <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	429a      	cmp	r2, r3
 800471c:	d902      	bls.n	8004724 <SPI_WaitFifoStateUntilTimeout+0x80>
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d13d      	bne.n	80047a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004732:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473c:	d111      	bne.n	8004762 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004746:	d004      	beq.n	8004752 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004750:	d107      	bne.n	8004762 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004760:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476a:	d10f      	bne.n	800478c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800478a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e010      	b.n	80047c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4013      	ands	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d196      	bne.n	80046ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3728      	adds	r7, #40	; 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000010 	.word	0x20000010

080047d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e4:	d111      	bne.n	800480a <SPI_EndRxTransaction+0x3a>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ee:	d004      	beq.n	80047fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f8:	d107      	bne.n	800480a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004808:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2200      	movs	r2, #0
 8004812:	2180      	movs	r1, #128	; 0x80
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7ff febd 	bl	8004594 <SPI_WaitFlagStateUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004824:	f043 0220 	orr.w	r2, r3, #32
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e023      	b.n	8004878 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004838:	d11d      	bne.n	8004876 <SPI_EndRxTransaction+0xa6>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004842:	d004      	beq.n	800484e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d113      	bne.n	8004876 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2200      	movs	r2, #0
 8004856:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff ff22 	bl	80046a4 <SPI_WaitFifoStateUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486a:	f043 0220 	orr.w	r2, r3, #32
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e000      	b.n	8004878 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2200      	movs	r2, #0
 8004894:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff ff03 	bl	80046a4 <SPI_WaitFifoStateUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e027      	b.n	8004904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff fe68 	bl	8004594 <SPI_WaitFlagStateUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e014      	b.n	8004904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fedc 	bl	80046a4 <SPI_WaitFifoStateUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e000      	b.n	8004904 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e049      	b.n	80049b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fc fa86 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 f946 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e02e      	b.n	8004a32 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_TIM_Base_Start+0x84>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIM_Base_Start+0x34>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ee:	d115      	bne.n	8004a1c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <HAL_TIM_Base_Start+0x88>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d015      	beq.n	8004a2e <HAL_TIM_Base_Start+0x72>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a08:	d011      	beq.n	8004a2e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	e008      	b.n	8004a2e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e000      	b.n	8004a30 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	00010007 	.word	0x00010007

08004a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIM_ConfigClockSource+0x1c>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e0b6      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x18a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004a82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa0:	d03e      	beq.n	8004b20 <HAL_TIM_ConfigClockSource+0xd8>
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	f200 8087 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aae:	f000 8086 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x176>
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d87f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ab8:	2b70      	cmp	r3, #112	; 0x70
 8004aba:	d01a      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0xaa>
 8004abc:	2b70      	cmp	r3, #112	; 0x70
 8004abe:	d87b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ac0:	2b60      	cmp	r3, #96	; 0x60
 8004ac2:	d050      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x11e>
 8004ac4:	2b60      	cmp	r3, #96	; 0x60
 8004ac6:	d877      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ac8:	2b50      	cmp	r3, #80	; 0x50
 8004aca:	d03c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0xfe>
 8004acc:	2b50      	cmp	r3, #80	; 0x50
 8004ace:	d873      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d058      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x13e>
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d86f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ad8:	2b30      	cmp	r3, #48	; 0x30
 8004ada:	d064      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8004adc:	2b30      	cmp	r3, #48	; 0x30
 8004ade:	d86b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d060      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d867      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d05a      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8004af0:	e062      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f000 f94b 	bl	8004d9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	609a      	str	r2, [r3, #8]
      break;
 8004b1e:	e04f      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f000 f934 	bl	8004d9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b42:	609a      	str	r2, [r3, #8]
      break;
 8004b44:	e03c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 f8a6 	bl	8004ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2150      	movs	r1, #80	; 0x50
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f8ff 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 8004b64:	e02c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f000 f8c5 	bl	8004d02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2160      	movs	r1, #96	; 0x60
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f8ef 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 8004b84:	e01c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 f886 	bl	8004ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2140      	movs	r1, #64	; 0x40
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f8df 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 8004ba4:	e00c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 f8d6 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 8004bb6:	e003      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
      break;
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0x20>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfa:	d108      	bne.n	8004c0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <TIM_Base_SetConfig+0x52>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d007      	beq.n	8004c2e <TIM_Base_SetConfig+0x52>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <TIM_Base_SetConfig+0xc0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_Base_SetConfig+0x52>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <TIM_Base_SetConfig+0xc4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d108      	bne.n	8004c40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0xa0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <TIM_Base_SetConfig+0xc0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0xa0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <TIM_Base_SetConfig+0xc4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d103      	bne.n	8004c84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	615a      	str	r2, [r3, #20]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40014400 	.word	0x40014400
 8004ca0:	40014800 	.word	0x40014800

08004ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f023 0201 	bic.w	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 030a 	bic.w	r3, r3, #10
 8004ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f023 0210 	bic.w	r2, r3, #16
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	031b      	lsls	r3, r3, #12
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f043 0307 	orr.w	r3, r3, #7
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	021a      	lsls	r2, r3, #8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	609a      	str	r2, [r3, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e04a      	b.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d108      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40012c00 	.word	0x40012c00

08004e9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ea4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004ea8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	4013      	ands	r3, r2
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	f107 0014 	add.w	r0, r7, #20
 8004ee0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	b004      	add	sp, #16
 8004f12:	4770      	bx	lr

08004f14 <__errno>:
 8004f14:	4b01      	ldr	r3, [pc, #4]	; (8004f1c <__errno+0x8>)
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	2000001c 	.word	0x2000001c

08004f20 <__sflush_r>:
 8004f20:	898a      	ldrh	r2, [r1, #12]
 8004f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f26:	4605      	mov	r5, r0
 8004f28:	0710      	lsls	r0, r2, #28
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	d458      	bmi.n	8004fe0 <__sflush_r+0xc0>
 8004f2e:	684b      	ldr	r3, [r1, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	dc05      	bgt.n	8004f40 <__sflush_r+0x20>
 8004f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	dc02      	bgt.n	8004f40 <__sflush_r+0x20>
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	d0f9      	beq.n	8004f3a <__sflush_r+0x1a>
 8004f46:	2300      	movs	r3, #0
 8004f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f4c:	682f      	ldr	r7, [r5, #0]
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	d032      	beq.n	8004fb8 <__sflush_r+0x98>
 8004f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	075a      	lsls	r2, r3, #29
 8004f58:	d505      	bpl.n	8004f66 <__sflush_r+0x46>
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	1ac0      	subs	r0, r0, r3
 8004f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f60:	b10b      	cbz	r3, 8004f66 <__sflush_r+0x46>
 8004f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f64:	1ac0      	subs	r0, r0, r3
 8004f66:	2300      	movs	r3, #0
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f6c:	6a21      	ldr	r1, [r4, #32]
 8004f6e:	4628      	mov	r0, r5
 8004f70:	47b0      	blx	r6
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	d106      	bne.n	8004f86 <__sflush_r+0x66>
 8004f78:	6829      	ldr	r1, [r5, #0]
 8004f7a:	291d      	cmp	r1, #29
 8004f7c:	d82c      	bhi.n	8004fd8 <__sflush_r+0xb8>
 8004f7e:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <__sflush_r+0x108>)
 8004f80:	40ca      	lsrs	r2, r1
 8004f82:	07d6      	lsls	r6, r2, #31
 8004f84:	d528      	bpl.n	8004fd8 <__sflush_r+0xb8>
 8004f86:	2200      	movs	r2, #0
 8004f88:	6062      	str	r2, [r4, #4]
 8004f8a:	04d9      	lsls	r1, r3, #19
 8004f8c:	6922      	ldr	r2, [r4, #16]
 8004f8e:	6022      	str	r2, [r4, #0]
 8004f90:	d504      	bpl.n	8004f9c <__sflush_r+0x7c>
 8004f92:	1c42      	adds	r2, r0, #1
 8004f94:	d101      	bne.n	8004f9a <__sflush_r+0x7a>
 8004f96:	682b      	ldr	r3, [r5, #0]
 8004f98:	b903      	cbnz	r3, 8004f9c <__sflush_r+0x7c>
 8004f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8004f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f9e:	602f      	str	r7, [r5, #0]
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	d0ca      	beq.n	8004f3a <__sflush_r+0x1a>
 8004fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fa8:	4299      	cmp	r1, r3
 8004faa:	d002      	beq.n	8004fb2 <__sflush_r+0x92>
 8004fac:	4628      	mov	r0, r5
 8004fae:	f000 fa03 	bl	80053b8 <_free_r>
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8004fb6:	e7c1      	b.n	8004f3c <__sflush_r+0x1c>
 8004fb8:	6a21      	ldr	r1, [r4, #32]
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b0      	blx	r6
 8004fc0:	1c41      	adds	r1, r0, #1
 8004fc2:	d1c7      	bne.n	8004f54 <__sflush_r+0x34>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0c4      	beq.n	8004f54 <__sflush_r+0x34>
 8004fca:	2b1d      	cmp	r3, #29
 8004fcc:	d001      	beq.n	8004fd2 <__sflush_r+0xb2>
 8004fce:	2b16      	cmp	r3, #22
 8004fd0:	d101      	bne.n	8004fd6 <__sflush_r+0xb6>
 8004fd2:	602f      	str	r7, [r5, #0]
 8004fd4:	e7b1      	b.n	8004f3a <__sflush_r+0x1a>
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fdc:	81a3      	strh	r3, [r4, #12]
 8004fde:	e7ad      	b.n	8004f3c <__sflush_r+0x1c>
 8004fe0:	690f      	ldr	r7, [r1, #16]
 8004fe2:	2f00      	cmp	r7, #0
 8004fe4:	d0a9      	beq.n	8004f3a <__sflush_r+0x1a>
 8004fe6:	0793      	lsls	r3, r2, #30
 8004fe8:	680e      	ldr	r6, [r1, #0]
 8004fea:	bf08      	it	eq
 8004fec:	694b      	ldreq	r3, [r1, #20]
 8004fee:	600f      	str	r7, [r1, #0]
 8004ff0:	bf18      	it	ne
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	eba6 0807 	sub.w	r8, r6, r7
 8004ff8:	608b      	str	r3, [r1, #8]
 8004ffa:	f1b8 0f00 	cmp.w	r8, #0
 8004ffe:	dd9c      	ble.n	8004f3a <__sflush_r+0x1a>
 8005000:	6a21      	ldr	r1, [r4, #32]
 8005002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005004:	4643      	mov	r3, r8
 8005006:	463a      	mov	r2, r7
 8005008:	4628      	mov	r0, r5
 800500a:	47b0      	blx	r6
 800500c:	2800      	cmp	r0, #0
 800500e:	dc06      	bgt.n	800501e <__sflush_r+0xfe>
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800501c:	e78e      	b.n	8004f3c <__sflush_r+0x1c>
 800501e:	4407      	add	r7, r0
 8005020:	eba8 0800 	sub.w	r8, r8, r0
 8005024:	e7e9      	b.n	8004ffa <__sflush_r+0xda>
 8005026:	bf00      	nop
 8005028:	20400001 	.word	0x20400001

0800502c <_fflush_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	690b      	ldr	r3, [r1, #16]
 8005030:	4605      	mov	r5, r0
 8005032:	460c      	mov	r4, r1
 8005034:	b913      	cbnz	r3, 800503c <_fflush_r+0x10>
 8005036:	2500      	movs	r5, #0
 8005038:	4628      	mov	r0, r5
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	b118      	cbz	r0, 8005046 <_fflush_r+0x1a>
 800503e:	6983      	ldr	r3, [r0, #24]
 8005040:	b90b      	cbnz	r3, 8005046 <_fflush_r+0x1a>
 8005042:	f000 f887 	bl	8005154 <__sinit>
 8005046:	4b14      	ldr	r3, [pc, #80]	; (8005098 <_fflush_r+0x6c>)
 8005048:	429c      	cmp	r4, r3
 800504a:	d11b      	bne.n	8005084 <_fflush_r+0x58>
 800504c:	686c      	ldr	r4, [r5, #4]
 800504e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0ef      	beq.n	8005036 <_fflush_r+0xa>
 8005056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005058:	07d0      	lsls	r0, r2, #31
 800505a:	d404      	bmi.n	8005066 <_fflush_r+0x3a>
 800505c:	0599      	lsls	r1, r3, #22
 800505e:	d402      	bmi.n	8005066 <_fflush_r+0x3a>
 8005060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005062:	f000 f93a 	bl	80052da <__retarget_lock_acquire_recursive>
 8005066:	4628      	mov	r0, r5
 8005068:	4621      	mov	r1, r4
 800506a:	f7ff ff59 	bl	8004f20 <__sflush_r>
 800506e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005070:	07da      	lsls	r2, r3, #31
 8005072:	4605      	mov	r5, r0
 8005074:	d4e0      	bmi.n	8005038 <_fflush_r+0xc>
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	059b      	lsls	r3, r3, #22
 800507a:	d4dd      	bmi.n	8005038 <_fflush_r+0xc>
 800507c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800507e:	f000 f92d 	bl	80052dc <__retarget_lock_release_recursive>
 8005082:	e7d9      	b.n	8005038 <_fflush_r+0xc>
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <_fflush_r+0x70>)
 8005086:	429c      	cmp	r4, r3
 8005088:	d101      	bne.n	800508e <_fflush_r+0x62>
 800508a:	68ac      	ldr	r4, [r5, #8]
 800508c:	e7df      	b.n	800504e <_fflush_r+0x22>
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <_fflush_r+0x74>)
 8005090:	429c      	cmp	r4, r3
 8005092:	bf08      	it	eq
 8005094:	68ec      	ldreq	r4, [r5, #12]
 8005096:	e7da      	b.n	800504e <_fflush_r+0x22>
 8005098:	08006028 	.word	0x08006028
 800509c:	08006048 	.word	0x08006048
 80050a0:	08006008 	.word	0x08006008

080050a4 <std>:
 80050a4:	2300      	movs	r3, #0
 80050a6:	b510      	push	{r4, lr}
 80050a8:	4604      	mov	r4, r0
 80050aa:	e9c0 3300 	strd	r3, r3, [r0]
 80050ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050b2:	6083      	str	r3, [r0, #8]
 80050b4:	8181      	strh	r1, [r0, #12]
 80050b6:	6643      	str	r3, [r0, #100]	; 0x64
 80050b8:	81c2      	strh	r2, [r0, #14]
 80050ba:	6183      	str	r3, [r0, #24]
 80050bc:	4619      	mov	r1, r3
 80050be:	2208      	movs	r2, #8
 80050c0:	305c      	adds	r0, #92	; 0x5c
 80050c2:	f000 f971 	bl	80053a8 <memset>
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <std+0x38>)
 80050c8:	6263      	str	r3, [r4, #36]	; 0x24
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <std+0x3c>)
 80050cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <std+0x40>)
 80050d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <std+0x44>)
 80050d4:	6224      	str	r4, [r4, #32]
 80050d6:	6323      	str	r3, [r4, #48]	; 0x30
 80050d8:	bd10      	pop	{r4, pc}
 80050da:	bf00      	nop
 80050dc:	080055c9 	.word	0x080055c9
 80050e0:	080055eb 	.word	0x080055eb
 80050e4:	08005623 	.word	0x08005623
 80050e8:	08005647 	.word	0x08005647

080050ec <_cleanup_r>:
 80050ec:	4901      	ldr	r1, [pc, #4]	; (80050f4 <_cleanup_r+0x8>)
 80050ee:	f000 b8af 	b.w	8005250 <_fwalk_reent>
 80050f2:	bf00      	nop
 80050f4:	0800502d 	.word	0x0800502d

080050f8 <__sfmoreglue>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	2268      	movs	r2, #104	; 0x68
 80050fc:	1e4d      	subs	r5, r1, #1
 80050fe:	4355      	muls	r5, r2
 8005100:	460e      	mov	r6, r1
 8005102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005106:	f000 f9c3 	bl	8005490 <_malloc_r>
 800510a:	4604      	mov	r4, r0
 800510c:	b140      	cbz	r0, 8005120 <__sfmoreglue+0x28>
 800510e:	2100      	movs	r1, #0
 8005110:	e9c0 1600 	strd	r1, r6, [r0]
 8005114:	300c      	adds	r0, #12
 8005116:	60a0      	str	r0, [r4, #8]
 8005118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800511c:	f000 f944 	bl	80053a8 <memset>
 8005120:	4620      	mov	r0, r4
 8005122:	bd70      	pop	{r4, r5, r6, pc}

08005124 <__sfp_lock_acquire>:
 8005124:	4801      	ldr	r0, [pc, #4]	; (800512c <__sfp_lock_acquire+0x8>)
 8005126:	f000 b8d8 	b.w	80052da <__retarget_lock_acquire_recursive>
 800512a:	bf00      	nop
 800512c:	20000489 	.word	0x20000489

08005130 <__sfp_lock_release>:
 8005130:	4801      	ldr	r0, [pc, #4]	; (8005138 <__sfp_lock_release+0x8>)
 8005132:	f000 b8d3 	b.w	80052dc <__retarget_lock_release_recursive>
 8005136:	bf00      	nop
 8005138:	20000489 	.word	0x20000489

0800513c <__sinit_lock_acquire>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__sinit_lock_acquire+0x8>)
 800513e:	f000 b8cc 	b.w	80052da <__retarget_lock_acquire_recursive>
 8005142:	bf00      	nop
 8005144:	2000048a 	.word	0x2000048a

08005148 <__sinit_lock_release>:
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <__sinit_lock_release+0x8>)
 800514a:	f000 b8c7 	b.w	80052dc <__retarget_lock_release_recursive>
 800514e:	bf00      	nop
 8005150:	2000048a 	.word	0x2000048a

08005154 <__sinit>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4604      	mov	r4, r0
 8005158:	f7ff fff0 	bl	800513c <__sinit_lock_acquire>
 800515c:	69a3      	ldr	r3, [r4, #24]
 800515e:	b11b      	cbz	r3, 8005168 <__sinit+0x14>
 8005160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005164:	f7ff bff0 	b.w	8005148 <__sinit_lock_release>
 8005168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800516c:	6523      	str	r3, [r4, #80]	; 0x50
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <__sinit+0x68>)
 8005170:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <__sinit+0x6c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	62a2      	str	r2, [r4, #40]	; 0x28
 8005176:	42a3      	cmp	r3, r4
 8005178:	bf04      	itt	eq
 800517a:	2301      	moveq	r3, #1
 800517c:	61a3      	streq	r3, [r4, #24]
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f820 	bl	80051c4 <__sfp>
 8005184:	6060      	str	r0, [r4, #4]
 8005186:	4620      	mov	r0, r4
 8005188:	f000 f81c 	bl	80051c4 <__sfp>
 800518c:	60a0      	str	r0, [r4, #8]
 800518e:	4620      	mov	r0, r4
 8005190:	f000 f818 	bl	80051c4 <__sfp>
 8005194:	2200      	movs	r2, #0
 8005196:	60e0      	str	r0, [r4, #12]
 8005198:	2104      	movs	r1, #4
 800519a:	6860      	ldr	r0, [r4, #4]
 800519c:	f7ff ff82 	bl	80050a4 <std>
 80051a0:	68a0      	ldr	r0, [r4, #8]
 80051a2:	2201      	movs	r2, #1
 80051a4:	2109      	movs	r1, #9
 80051a6:	f7ff ff7d 	bl	80050a4 <std>
 80051aa:	68e0      	ldr	r0, [r4, #12]
 80051ac:	2202      	movs	r2, #2
 80051ae:	2112      	movs	r1, #18
 80051b0:	f7ff ff78 	bl	80050a4 <std>
 80051b4:	2301      	movs	r3, #1
 80051b6:	61a3      	str	r3, [r4, #24]
 80051b8:	e7d2      	b.n	8005160 <__sinit+0xc>
 80051ba:	bf00      	nop
 80051bc:	08006068 	.word	0x08006068
 80051c0:	080050ed 	.word	0x080050ed

080051c4 <__sfp>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	4607      	mov	r7, r0
 80051c8:	f7ff ffac 	bl	8005124 <__sfp_lock_acquire>
 80051cc:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <__sfp+0x84>)
 80051ce:	681e      	ldr	r6, [r3, #0]
 80051d0:	69b3      	ldr	r3, [r6, #24]
 80051d2:	b913      	cbnz	r3, 80051da <__sfp+0x16>
 80051d4:	4630      	mov	r0, r6
 80051d6:	f7ff ffbd 	bl	8005154 <__sinit>
 80051da:	3648      	adds	r6, #72	; 0x48
 80051dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	d503      	bpl.n	80051ec <__sfp+0x28>
 80051e4:	6833      	ldr	r3, [r6, #0]
 80051e6:	b30b      	cbz	r3, 800522c <__sfp+0x68>
 80051e8:	6836      	ldr	r6, [r6, #0]
 80051ea:	e7f7      	b.n	80051dc <__sfp+0x18>
 80051ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051f0:	b9d5      	cbnz	r5, 8005228 <__sfp+0x64>
 80051f2:	4b16      	ldr	r3, [pc, #88]	; (800524c <__sfp+0x88>)
 80051f4:	60e3      	str	r3, [r4, #12]
 80051f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051fa:	6665      	str	r5, [r4, #100]	; 0x64
 80051fc:	f000 f86c 	bl	80052d8 <__retarget_lock_init_recursive>
 8005200:	f7ff ff96 	bl	8005130 <__sfp_lock_release>
 8005204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800520c:	6025      	str	r5, [r4, #0]
 800520e:	61a5      	str	r5, [r4, #24]
 8005210:	2208      	movs	r2, #8
 8005212:	4629      	mov	r1, r5
 8005214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005218:	f000 f8c6 	bl	80053a8 <memset>
 800521c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005224:	4620      	mov	r0, r4
 8005226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005228:	3468      	adds	r4, #104	; 0x68
 800522a:	e7d9      	b.n	80051e0 <__sfp+0x1c>
 800522c:	2104      	movs	r1, #4
 800522e:	4638      	mov	r0, r7
 8005230:	f7ff ff62 	bl	80050f8 <__sfmoreglue>
 8005234:	4604      	mov	r4, r0
 8005236:	6030      	str	r0, [r6, #0]
 8005238:	2800      	cmp	r0, #0
 800523a:	d1d5      	bne.n	80051e8 <__sfp+0x24>
 800523c:	f7ff ff78 	bl	8005130 <__sfp_lock_release>
 8005240:	230c      	movs	r3, #12
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	e7ee      	b.n	8005224 <__sfp+0x60>
 8005246:	bf00      	nop
 8005248:	08006068 	.word	0x08006068
 800524c:	ffff0001 	.word	0xffff0001

08005250 <_fwalk_reent>:
 8005250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005254:	4606      	mov	r6, r0
 8005256:	4688      	mov	r8, r1
 8005258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800525c:	2700      	movs	r7, #0
 800525e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005262:	f1b9 0901 	subs.w	r9, r9, #1
 8005266:	d505      	bpl.n	8005274 <_fwalk_reent+0x24>
 8005268:	6824      	ldr	r4, [r4, #0]
 800526a:	2c00      	cmp	r4, #0
 800526c:	d1f7      	bne.n	800525e <_fwalk_reent+0xe>
 800526e:	4638      	mov	r0, r7
 8005270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005274:	89ab      	ldrh	r3, [r5, #12]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d907      	bls.n	800528a <_fwalk_reent+0x3a>
 800527a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800527e:	3301      	adds	r3, #1
 8005280:	d003      	beq.n	800528a <_fwalk_reent+0x3a>
 8005282:	4629      	mov	r1, r5
 8005284:	4630      	mov	r0, r6
 8005286:	47c0      	blx	r8
 8005288:	4307      	orrs	r7, r0
 800528a:	3568      	adds	r5, #104	; 0x68
 800528c:	e7e9      	b.n	8005262 <_fwalk_reent+0x12>
	...

08005290 <__libc_init_array>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	4d0d      	ldr	r5, [pc, #52]	; (80052c8 <__libc_init_array+0x38>)
 8005294:	4c0d      	ldr	r4, [pc, #52]	; (80052cc <__libc_init_array+0x3c>)
 8005296:	1b64      	subs	r4, r4, r5
 8005298:	10a4      	asrs	r4, r4, #2
 800529a:	2600      	movs	r6, #0
 800529c:	42a6      	cmp	r6, r4
 800529e:	d109      	bne.n	80052b4 <__libc_init_array+0x24>
 80052a0:	4d0b      	ldr	r5, [pc, #44]	; (80052d0 <__libc_init_array+0x40>)
 80052a2:	4c0c      	ldr	r4, [pc, #48]	; (80052d4 <__libc_init_array+0x44>)
 80052a4:	f000 fdf6 	bl	8005e94 <_init>
 80052a8:	1b64      	subs	r4, r4, r5
 80052aa:	10a4      	asrs	r4, r4, #2
 80052ac:	2600      	movs	r6, #0
 80052ae:	42a6      	cmp	r6, r4
 80052b0:	d105      	bne.n	80052be <__libc_init_array+0x2e>
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b8:	4798      	blx	r3
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7ee      	b.n	800529c <__libc_init_array+0xc>
 80052be:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c2:	4798      	blx	r3
 80052c4:	3601      	adds	r6, #1
 80052c6:	e7f2      	b.n	80052ae <__libc_init_array+0x1e>
 80052c8:	080060a0 	.word	0x080060a0
 80052cc:	080060a0 	.word	0x080060a0
 80052d0:	080060a0 	.word	0x080060a0
 80052d4:	080060a4 	.word	0x080060a4

080052d8 <__retarget_lock_init_recursive>:
 80052d8:	4770      	bx	lr

080052da <__retarget_lock_acquire_recursive>:
 80052da:	4770      	bx	lr

080052dc <__retarget_lock_release_recursive>:
 80052dc:	4770      	bx	lr

080052de <__swhatbuf_r>:
 80052de:	b570      	push	{r4, r5, r6, lr}
 80052e0:	460e      	mov	r6, r1
 80052e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e6:	2900      	cmp	r1, #0
 80052e8:	b096      	sub	sp, #88	; 0x58
 80052ea:	4614      	mov	r4, r2
 80052ec:	461d      	mov	r5, r3
 80052ee:	da08      	bge.n	8005302 <__swhatbuf_r+0x24>
 80052f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	602a      	str	r2, [r5, #0]
 80052f8:	061a      	lsls	r2, r3, #24
 80052fa:	d410      	bmi.n	800531e <__swhatbuf_r+0x40>
 80052fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005300:	e00e      	b.n	8005320 <__swhatbuf_r+0x42>
 8005302:	466a      	mov	r2, sp
 8005304:	f000 f9c6 	bl	8005694 <_fstat_r>
 8005308:	2800      	cmp	r0, #0
 800530a:	dbf1      	blt.n	80052f0 <__swhatbuf_r+0x12>
 800530c:	9a01      	ldr	r2, [sp, #4]
 800530e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005316:	425a      	negs	r2, r3
 8005318:	415a      	adcs	r2, r3
 800531a:	602a      	str	r2, [r5, #0]
 800531c:	e7ee      	b.n	80052fc <__swhatbuf_r+0x1e>
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	2000      	movs	r0, #0
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	b016      	add	sp, #88	; 0x58
 8005326:	bd70      	pop	{r4, r5, r6, pc}

08005328 <__smakebuf_r>:
 8005328:	898b      	ldrh	r3, [r1, #12]
 800532a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800532c:	079d      	lsls	r5, r3, #30
 800532e:	4606      	mov	r6, r0
 8005330:	460c      	mov	r4, r1
 8005332:	d507      	bpl.n	8005344 <__smakebuf_r+0x1c>
 8005334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	6123      	str	r3, [r4, #16]
 800533c:	2301      	movs	r3, #1
 800533e:	6163      	str	r3, [r4, #20]
 8005340:	b002      	add	sp, #8
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	ab01      	add	r3, sp, #4
 8005346:	466a      	mov	r2, sp
 8005348:	f7ff ffc9 	bl	80052de <__swhatbuf_r>
 800534c:	9900      	ldr	r1, [sp, #0]
 800534e:	4605      	mov	r5, r0
 8005350:	4630      	mov	r0, r6
 8005352:	f000 f89d 	bl	8005490 <_malloc_r>
 8005356:	b948      	cbnz	r0, 800536c <__smakebuf_r+0x44>
 8005358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535c:	059a      	lsls	r2, r3, #22
 800535e:	d4ef      	bmi.n	8005340 <__smakebuf_r+0x18>
 8005360:	f023 0303 	bic.w	r3, r3, #3
 8005364:	f043 0302 	orr.w	r3, r3, #2
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	e7e3      	b.n	8005334 <__smakebuf_r+0xc>
 800536c:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <__smakebuf_r+0x7c>)
 800536e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	6020      	str	r0, [r4, #0]
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	9b00      	ldr	r3, [sp, #0]
 800537c:	6163      	str	r3, [r4, #20]
 800537e:	9b01      	ldr	r3, [sp, #4]
 8005380:	6120      	str	r0, [r4, #16]
 8005382:	b15b      	cbz	r3, 800539c <__smakebuf_r+0x74>
 8005384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005388:	4630      	mov	r0, r6
 800538a:	f000 f995 	bl	80056b8 <_isatty_r>
 800538e:	b128      	cbz	r0, 800539c <__smakebuf_r+0x74>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	89a0      	ldrh	r0, [r4, #12]
 800539e:	4305      	orrs	r5, r0
 80053a0:	81a5      	strh	r5, [r4, #12]
 80053a2:	e7cd      	b.n	8005340 <__smakebuf_r+0x18>
 80053a4:	080050ed 	.word	0x080050ed

080053a8 <memset>:
 80053a8:	4402      	add	r2, r0
 80053aa:	4603      	mov	r3, r0
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d100      	bne.n	80053b2 <memset+0xa>
 80053b0:	4770      	bx	lr
 80053b2:	f803 1b01 	strb.w	r1, [r3], #1
 80053b6:	e7f9      	b.n	80053ac <memset+0x4>

080053b8 <_free_r>:
 80053b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ba:	2900      	cmp	r1, #0
 80053bc:	d044      	beq.n	8005448 <_free_r+0x90>
 80053be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c2:	9001      	str	r0, [sp, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f1a1 0404 	sub.w	r4, r1, #4
 80053ca:	bfb8      	it	lt
 80053cc:	18e4      	addlt	r4, r4, r3
 80053ce:	f000 f995 	bl	80056fc <__malloc_lock>
 80053d2:	4a1e      	ldr	r2, [pc, #120]	; (800544c <_free_r+0x94>)
 80053d4:	9801      	ldr	r0, [sp, #4]
 80053d6:	6813      	ldr	r3, [r2, #0]
 80053d8:	b933      	cbnz	r3, 80053e8 <_free_r+0x30>
 80053da:	6063      	str	r3, [r4, #4]
 80053dc:	6014      	str	r4, [r2, #0]
 80053de:	b003      	add	sp, #12
 80053e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053e4:	f000 b990 	b.w	8005708 <__malloc_unlock>
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	d908      	bls.n	80053fe <_free_r+0x46>
 80053ec:	6825      	ldr	r5, [r4, #0]
 80053ee:	1961      	adds	r1, r4, r5
 80053f0:	428b      	cmp	r3, r1
 80053f2:	bf01      	itttt	eq
 80053f4:	6819      	ldreq	r1, [r3, #0]
 80053f6:	685b      	ldreq	r3, [r3, #4]
 80053f8:	1949      	addeq	r1, r1, r5
 80053fa:	6021      	streq	r1, [r4, #0]
 80053fc:	e7ed      	b.n	80053da <_free_r+0x22>
 80053fe:	461a      	mov	r2, r3
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	b10b      	cbz	r3, 8005408 <_free_r+0x50>
 8005404:	42a3      	cmp	r3, r4
 8005406:	d9fa      	bls.n	80053fe <_free_r+0x46>
 8005408:	6811      	ldr	r1, [r2, #0]
 800540a:	1855      	adds	r5, r2, r1
 800540c:	42a5      	cmp	r5, r4
 800540e:	d10b      	bne.n	8005428 <_free_r+0x70>
 8005410:	6824      	ldr	r4, [r4, #0]
 8005412:	4421      	add	r1, r4
 8005414:	1854      	adds	r4, r2, r1
 8005416:	42a3      	cmp	r3, r4
 8005418:	6011      	str	r1, [r2, #0]
 800541a:	d1e0      	bne.n	80053de <_free_r+0x26>
 800541c:	681c      	ldr	r4, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	6053      	str	r3, [r2, #4]
 8005422:	4421      	add	r1, r4
 8005424:	6011      	str	r1, [r2, #0]
 8005426:	e7da      	b.n	80053de <_free_r+0x26>
 8005428:	d902      	bls.n	8005430 <_free_r+0x78>
 800542a:	230c      	movs	r3, #12
 800542c:	6003      	str	r3, [r0, #0]
 800542e:	e7d6      	b.n	80053de <_free_r+0x26>
 8005430:	6825      	ldr	r5, [r4, #0]
 8005432:	1961      	adds	r1, r4, r5
 8005434:	428b      	cmp	r3, r1
 8005436:	bf04      	itt	eq
 8005438:	6819      	ldreq	r1, [r3, #0]
 800543a:	685b      	ldreq	r3, [r3, #4]
 800543c:	6063      	str	r3, [r4, #4]
 800543e:	bf04      	itt	eq
 8005440:	1949      	addeq	r1, r1, r5
 8005442:	6021      	streq	r1, [r4, #0]
 8005444:	6054      	str	r4, [r2, #4]
 8005446:	e7ca      	b.n	80053de <_free_r+0x26>
 8005448:	b003      	add	sp, #12
 800544a:	bd30      	pop	{r4, r5, pc}
 800544c:	2000048c 	.word	0x2000048c

08005450 <sbrk_aligned>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	4e0e      	ldr	r6, [pc, #56]	; (800548c <sbrk_aligned+0x3c>)
 8005454:	460c      	mov	r4, r1
 8005456:	6831      	ldr	r1, [r6, #0]
 8005458:	4605      	mov	r5, r0
 800545a:	b911      	cbnz	r1, 8005462 <sbrk_aligned+0x12>
 800545c:	f000 f8a4 	bl	80055a8 <_sbrk_r>
 8005460:	6030      	str	r0, [r6, #0]
 8005462:	4621      	mov	r1, r4
 8005464:	4628      	mov	r0, r5
 8005466:	f000 f89f 	bl	80055a8 <_sbrk_r>
 800546a:	1c43      	adds	r3, r0, #1
 800546c:	d00a      	beq.n	8005484 <sbrk_aligned+0x34>
 800546e:	1cc4      	adds	r4, r0, #3
 8005470:	f024 0403 	bic.w	r4, r4, #3
 8005474:	42a0      	cmp	r0, r4
 8005476:	d007      	beq.n	8005488 <sbrk_aligned+0x38>
 8005478:	1a21      	subs	r1, r4, r0
 800547a:	4628      	mov	r0, r5
 800547c:	f000 f894 	bl	80055a8 <_sbrk_r>
 8005480:	3001      	adds	r0, #1
 8005482:	d101      	bne.n	8005488 <sbrk_aligned+0x38>
 8005484:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005488:	4620      	mov	r0, r4
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	20000490 	.word	0x20000490

08005490 <_malloc_r>:
 8005490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005494:	1ccd      	adds	r5, r1, #3
 8005496:	f025 0503 	bic.w	r5, r5, #3
 800549a:	3508      	adds	r5, #8
 800549c:	2d0c      	cmp	r5, #12
 800549e:	bf38      	it	cc
 80054a0:	250c      	movcc	r5, #12
 80054a2:	2d00      	cmp	r5, #0
 80054a4:	4607      	mov	r7, r0
 80054a6:	db01      	blt.n	80054ac <_malloc_r+0x1c>
 80054a8:	42a9      	cmp	r1, r5
 80054aa:	d905      	bls.n	80054b8 <_malloc_r+0x28>
 80054ac:	230c      	movs	r3, #12
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	2600      	movs	r6, #0
 80054b2:	4630      	mov	r0, r6
 80054b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b8:	4e2e      	ldr	r6, [pc, #184]	; (8005574 <_malloc_r+0xe4>)
 80054ba:	f000 f91f 	bl	80056fc <__malloc_lock>
 80054be:	6833      	ldr	r3, [r6, #0]
 80054c0:	461c      	mov	r4, r3
 80054c2:	bb34      	cbnz	r4, 8005512 <_malloc_r+0x82>
 80054c4:	4629      	mov	r1, r5
 80054c6:	4638      	mov	r0, r7
 80054c8:	f7ff ffc2 	bl	8005450 <sbrk_aligned>
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	4604      	mov	r4, r0
 80054d0:	d14d      	bne.n	800556e <_malloc_r+0xde>
 80054d2:	6834      	ldr	r4, [r6, #0]
 80054d4:	4626      	mov	r6, r4
 80054d6:	2e00      	cmp	r6, #0
 80054d8:	d140      	bne.n	800555c <_malloc_r+0xcc>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	4631      	mov	r1, r6
 80054de:	4638      	mov	r0, r7
 80054e0:	eb04 0803 	add.w	r8, r4, r3
 80054e4:	f000 f860 	bl	80055a8 <_sbrk_r>
 80054e8:	4580      	cmp	r8, r0
 80054ea:	d13a      	bne.n	8005562 <_malloc_r+0xd2>
 80054ec:	6821      	ldr	r1, [r4, #0]
 80054ee:	3503      	adds	r5, #3
 80054f0:	1a6d      	subs	r5, r5, r1
 80054f2:	f025 0503 	bic.w	r5, r5, #3
 80054f6:	3508      	adds	r5, #8
 80054f8:	2d0c      	cmp	r5, #12
 80054fa:	bf38      	it	cc
 80054fc:	250c      	movcc	r5, #12
 80054fe:	4629      	mov	r1, r5
 8005500:	4638      	mov	r0, r7
 8005502:	f7ff ffa5 	bl	8005450 <sbrk_aligned>
 8005506:	3001      	adds	r0, #1
 8005508:	d02b      	beq.n	8005562 <_malloc_r+0xd2>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	442b      	add	r3, r5
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	e00e      	b.n	8005530 <_malloc_r+0xa0>
 8005512:	6822      	ldr	r2, [r4, #0]
 8005514:	1b52      	subs	r2, r2, r5
 8005516:	d41e      	bmi.n	8005556 <_malloc_r+0xc6>
 8005518:	2a0b      	cmp	r2, #11
 800551a:	d916      	bls.n	800554a <_malloc_r+0xba>
 800551c:	1961      	adds	r1, r4, r5
 800551e:	42a3      	cmp	r3, r4
 8005520:	6025      	str	r5, [r4, #0]
 8005522:	bf18      	it	ne
 8005524:	6059      	strne	r1, [r3, #4]
 8005526:	6863      	ldr	r3, [r4, #4]
 8005528:	bf08      	it	eq
 800552a:	6031      	streq	r1, [r6, #0]
 800552c:	5162      	str	r2, [r4, r5]
 800552e:	604b      	str	r3, [r1, #4]
 8005530:	4638      	mov	r0, r7
 8005532:	f104 060b 	add.w	r6, r4, #11
 8005536:	f000 f8e7 	bl	8005708 <__malloc_unlock>
 800553a:	f026 0607 	bic.w	r6, r6, #7
 800553e:	1d23      	adds	r3, r4, #4
 8005540:	1af2      	subs	r2, r6, r3
 8005542:	d0b6      	beq.n	80054b2 <_malloc_r+0x22>
 8005544:	1b9b      	subs	r3, r3, r6
 8005546:	50a3      	str	r3, [r4, r2]
 8005548:	e7b3      	b.n	80054b2 <_malloc_r+0x22>
 800554a:	6862      	ldr	r2, [r4, #4]
 800554c:	42a3      	cmp	r3, r4
 800554e:	bf0c      	ite	eq
 8005550:	6032      	streq	r2, [r6, #0]
 8005552:	605a      	strne	r2, [r3, #4]
 8005554:	e7ec      	b.n	8005530 <_malloc_r+0xa0>
 8005556:	4623      	mov	r3, r4
 8005558:	6864      	ldr	r4, [r4, #4]
 800555a:	e7b2      	b.n	80054c2 <_malloc_r+0x32>
 800555c:	4634      	mov	r4, r6
 800555e:	6876      	ldr	r6, [r6, #4]
 8005560:	e7b9      	b.n	80054d6 <_malloc_r+0x46>
 8005562:	230c      	movs	r3, #12
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	4638      	mov	r0, r7
 8005568:	f000 f8ce 	bl	8005708 <__malloc_unlock>
 800556c:	e7a1      	b.n	80054b2 <_malloc_r+0x22>
 800556e:	6025      	str	r5, [r4, #0]
 8005570:	e7de      	b.n	8005530 <_malloc_r+0xa0>
 8005572:	bf00      	nop
 8005574:	2000048c 	.word	0x2000048c

08005578 <iprintf>:
 8005578:	b40f      	push	{r0, r1, r2, r3}
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <iprintf+0x2c>)
 800557c:	b513      	push	{r0, r1, r4, lr}
 800557e:	681c      	ldr	r4, [r3, #0]
 8005580:	b124      	cbz	r4, 800558c <iprintf+0x14>
 8005582:	69a3      	ldr	r3, [r4, #24]
 8005584:	b913      	cbnz	r3, 800558c <iprintf+0x14>
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff fde4 	bl	8005154 <__sinit>
 800558c:	ab05      	add	r3, sp, #20
 800558e:	9a04      	ldr	r2, [sp, #16]
 8005590:	68a1      	ldr	r1, [r4, #8]
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	4620      	mov	r0, r4
 8005596:	f000 f8e7 	bl	8005768 <_vfiprintf_r>
 800559a:	b002      	add	sp, #8
 800559c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a0:	b004      	add	sp, #16
 80055a2:	4770      	bx	lr
 80055a4:	2000001c 	.word	0x2000001c

080055a8 <_sbrk_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4d06      	ldr	r5, [pc, #24]	; (80055c4 <_sbrk_r+0x1c>)
 80055ac:	2300      	movs	r3, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	f7fb fd4a 	bl	800104c <_sbrk>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_sbrk_r+0x1a>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_sbrk_r+0x1a>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	20000494 	.word	0x20000494

080055c8 <__sread>:
 80055c8:	b510      	push	{r4, lr}
 80055ca:	460c      	mov	r4, r1
 80055cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d0:	f000 fb8e 	bl	8005cf0 <_read_r>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	bfab      	itete	ge
 80055d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055da:	89a3      	ldrhlt	r3, [r4, #12]
 80055dc:	181b      	addge	r3, r3, r0
 80055de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055e2:	bfac      	ite	ge
 80055e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80055e6:	81a3      	strhlt	r3, [r4, #12]
 80055e8:	bd10      	pop	{r4, pc}

080055ea <__swrite>:
 80055ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ee:	461f      	mov	r7, r3
 80055f0:	898b      	ldrh	r3, [r1, #12]
 80055f2:	05db      	lsls	r3, r3, #23
 80055f4:	4605      	mov	r5, r0
 80055f6:	460c      	mov	r4, r1
 80055f8:	4616      	mov	r6, r2
 80055fa:	d505      	bpl.n	8005608 <__swrite+0x1e>
 80055fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005600:	2302      	movs	r3, #2
 8005602:	2200      	movs	r2, #0
 8005604:	f000 f868 	bl	80056d8 <_lseek_r>
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800560e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	4628      	mov	r0, r5
 800561a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	f000 b817 	b.w	8005650 <_write_r>

08005622 <__sseek>:
 8005622:	b510      	push	{r4, lr}
 8005624:	460c      	mov	r4, r1
 8005626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562a:	f000 f855 	bl	80056d8 <_lseek_r>
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	bf15      	itete	ne
 8005634:	6560      	strne	r0, [r4, #84]	; 0x54
 8005636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800563a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800563e:	81a3      	strheq	r3, [r4, #12]
 8005640:	bf18      	it	ne
 8005642:	81a3      	strhne	r3, [r4, #12]
 8005644:	bd10      	pop	{r4, pc}

08005646 <__sclose>:
 8005646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564a:	f000 b813 	b.w	8005674 <_close_r>
	...

08005650 <_write_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4d07      	ldr	r5, [pc, #28]	; (8005670 <_write_r+0x20>)
 8005654:	4604      	mov	r4, r0
 8005656:	4608      	mov	r0, r1
 8005658:	4611      	mov	r1, r2
 800565a:	2200      	movs	r2, #0
 800565c:	602a      	str	r2, [r5, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	f7fb fca4 	bl	8000fac <_write>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_write_r+0x1e>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	b103      	cbz	r3, 800566e <_write_r+0x1e>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	20000494 	.word	0x20000494

08005674 <_close_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d06      	ldr	r5, [pc, #24]	; (8005690 <_close_r+0x1c>)
 8005678:	2300      	movs	r3, #0
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	f7fb fcb0 	bl	8000fe4 <_close>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_close_r+0x1a>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_close_r+0x1a>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	20000494 	.word	0x20000494

08005694 <_fstat_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d07      	ldr	r5, [pc, #28]	; (80056b4 <_fstat_r+0x20>)
 8005698:	2300      	movs	r3, #0
 800569a:	4604      	mov	r4, r0
 800569c:	4608      	mov	r0, r1
 800569e:	4611      	mov	r1, r2
 80056a0:	602b      	str	r3, [r5, #0]
 80056a2:	f7fb fcab 	bl	8000ffc <_fstat>
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	d102      	bne.n	80056b0 <_fstat_r+0x1c>
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	b103      	cbz	r3, 80056b0 <_fstat_r+0x1c>
 80056ae:	6023      	str	r3, [r4, #0]
 80056b0:	bd38      	pop	{r3, r4, r5, pc}
 80056b2:	bf00      	nop
 80056b4:	20000494 	.word	0x20000494

080056b8 <_isatty_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d06      	ldr	r5, [pc, #24]	; (80056d4 <_isatty_r+0x1c>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fb fcaa 	bl	800101c <_isatty>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_isatty_r+0x1a>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_isatty_r+0x1a>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	20000494 	.word	0x20000494

080056d8 <_lseek_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4d07      	ldr	r5, [pc, #28]	; (80056f8 <_lseek_r+0x20>)
 80056dc:	4604      	mov	r4, r0
 80056de:	4608      	mov	r0, r1
 80056e0:	4611      	mov	r1, r2
 80056e2:	2200      	movs	r2, #0
 80056e4:	602a      	str	r2, [r5, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f7fb fca3 	bl	8001032 <_lseek>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_lseek_r+0x1e>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_lseek_r+0x1e>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	20000494 	.word	0x20000494

080056fc <__malloc_lock>:
 80056fc:	4801      	ldr	r0, [pc, #4]	; (8005704 <__malloc_lock+0x8>)
 80056fe:	f7ff bdec 	b.w	80052da <__retarget_lock_acquire_recursive>
 8005702:	bf00      	nop
 8005704:	20000488 	.word	0x20000488

08005708 <__malloc_unlock>:
 8005708:	4801      	ldr	r0, [pc, #4]	; (8005710 <__malloc_unlock+0x8>)
 800570a:	f7ff bde7 	b.w	80052dc <__retarget_lock_release_recursive>
 800570e:	bf00      	nop
 8005710:	20000488 	.word	0x20000488

08005714 <__sfputc_r>:
 8005714:	6893      	ldr	r3, [r2, #8]
 8005716:	3b01      	subs	r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	b410      	push	{r4}
 800571c:	6093      	str	r3, [r2, #8]
 800571e:	da08      	bge.n	8005732 <__sfputc_r+0x1e>
 8005720:	6994      	ldr	r4, [r2, #24]
 8005722:	42a3      	cmp	r3, r4
 8005724:	db01      	blt.n	800572a <__sfputc_r+0x16>
 8005726:	290a      	cmp	r1, #10
 8005728:	d103      	bne.n	8005732 <__sfputc_r+0x1e>
 800572a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800572e:	f000 baf1 	b.w	8005d14 <__swbuf_r>
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	1c58      	adds	r0, r3, #1
 8005736:	6010      	str	r0, [r2, #0]
 8005738:	7019      	strb	r1, [r3, #0]
 800573a:	4608      	mov	r0, r1
 800573c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005740:	4770      	bx	lr

08005742 <__sfputs_r>:
 8005742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005744:	4606      	mov	r6, r0
 8005746:	460f      	mov	r7, r1
 8005748:	4614      	mov	r4, r2
 800574a:	18d5      	adds	r5, r2, r3
 800574c:	42ac      	cmp	r4, r5
 800574e:	d101      	bne.n	8005754 <__sfputs_r+0x12>
 8005750:	2000      	movs	r0, #0
 8005752:	e007      	b.n	8005764 <__sfputs_r+0x22>
 8005754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005758:	463a      	mov	r2, r7
 800575a:	4630      	mov	r0, r6
 800575c:	f7ff ffda 	bl	8005714 <__sfputc_r>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d1f3      	bne.n	800574c <__sfputs_r+0xa>
 8005764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005768 <_vfiprintf_r>:
 8005768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576c:	460d      	mov	r5, r1
 800576e:	b09d      	sub	sp, #116	; 0x74
 8005770:	4614      	mov	r4, r2
 8005772:	4698      	mov	r8, r3
 8005774:	4606      	mov	r6, r0
 8005776:	b118      	cbz	r0, 8005780 <_vfiprintf_r+0x18>
 8005778:	6983      	ldr	r3, [r0, #24]
 800577a:	b90b      	cbnz	r3, 8005780 <_vfiprintf_r+0x18>
 800577c:	f7ff fcea 	bl	8005154 <__sinit>
 8005780:	4b89      	ldr	r3, [pc, #548]	; (80059a8 <_vfiprintf_r+0x240>)
 8005782:	429d      	cmp	r5, r3
 8005784:	d11b      	bne.n	80057be <_vfiprintf_r+0x56>
 8005786:	6875      	ldr	r5, [r6, #4]
 8005788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800578a:	07d9      	lsls	r1, r3, #31
 800578c:	d405      	bmi.n	800579a <_vfiprintf_r+0x32>
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	059a      	lsls	r2, r3, #22
 8005792:	d402      	bmi.n	800579a <_vfiprintf_r+0x32>
 8005794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005796:	f7ff fda0 	bl	80052da <__retarget_lock_acquire_recursive>
 800579a:	89ab      	ldrh	r3, [r5, #12]
 800579c:	071b      	lsls	r3, r3, #28
 800579e:	d501      	bpl.n	80057a4 <_vfiprintf_r+0x3c>
 80057a0:	692b      	ldr	r3, [r5, #16]
 80057a2:	b9eb      	cbnz	r3, 80057e0 <_vfiprintf_r+0x78>
 80057a4:	4629      	mov	r1, r5
 80057a6:	4630      	mov	r0, r6
 80057a8:	f000 fb06 	bl	8005db8 <__swsetup_r>
 80057ac:	b1c0      	cbz	r0, 80057e0 <_vfiprintf_r+0x78>
 80057ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b0:	07dc      	lsls	r4, r3, #31
 80057b2:	d50e      	bpl.n	80057d2 <_vfiprintf_r+0x6a>
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b8:	b01d      	add	sp, #116	; 0x74
 80057ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057be:	4b7b      	ldr	r3, [pc, #492]	; (80059ac <_vfiprintf_r+0x244>)
 80057c0:	429d      	cmp	r5, r3
 80057c2:	d101      	bne.n	80057c8 <_vfiprintf_r+0x60>
 80057c4:	68b5      	ldr	r5, [r6, #8]
 80057c6:	e7df      	b.n	8005788 <_vfiprintf_r+0x20>
 80057c8:	4b79      	ldr	r3, [pc, #484]	; (80059b0 <_vfiprintf_r+0x248>)
 80057ca:	429d      	cmp	r5, r3
 80057cc:	bf08      	it	eq
 80057ce:	68f5      	ldreq	r5, [r6, #12]
 80057d0:	e7da      	b.n	8005788 <_vfiprintf_r+0x20>
 80057d2:	89ab      	ldrh	r3, [r5, #12]
 80057d4:	0598      	lsls	r0, r3, #22
 80057d6:	d4ed      	bmi.n	80057b4 <_vfiprintf_r+0x4c>
 80057d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057da:	f7ff fd7f 	bl	80052dc <__retarget_lock_release_recursive>
 80057de:	e7e9      	b.n	80057b4 <_vfiprintf_r+0x4c>
 80057e0:	2300      	movs	r3, #0
 80057e2:	9309      	str	r3, [sp, #36]	; 0x24
 80057e4:	2320      	movs	r3, #32
 80057e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80057ee:	2330      	movs	r3, #48	; 0x30
 80057f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059b4 <_vfiprintf_r+0x24c>
 80057f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057f8:	f04f 0901 	mov.w	r9, #1
 80057fc:	4623      	mov	r3, r4
 80057fe:	469a      	mov	sl, r3
 8005800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005804:	b10a      	cbz	r2, 800580a <_vfiprintf_r+0xa2>
 8005806:	2a25      	cmp	r2, #37	; 0x25
 8005808:	d1f9      	bne.n	80057fe <_vfiprintf_r+0x96>
 800580a:	ebba 0b04 	subs.w	fp, sl, r4
 800580e:	d00b      	beq.n	8005828 <_vfiprintf_r+0xc0>
 8005810:	465b      	mov	r3, fp
 8005812:	4622      	mov	r2, r4
 8005814:	4629      	mov	r1, r5
 8005816:	4630      	mov	r0, r6
 8005818:	f7ff ff93 	bl	8005742 <__sfputs_r>
 800581c:	3001      	adds	r0, #1
 800581e:	f000 80aa 	beq.w	8005976 <_vfiprintf_r+0x20e>
 8005822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005824:	445a      	add	r2, fp
 8005826:	9209      	str	r2, [sp, #36]	; 0x24
 8005828:	f89a 3000 	ldrb.w	r3, [sl]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80a2 	beq.w	8005976 <_vfiprintf_r+0x20e>
 8005832:	2300      	movs	r3, #0
 8005834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800583c:	f10a 0a01 	add.w	sl, sl, #1
 8005840:	9304      	str	r3, [sp, #16]
 8005842:	9307      	str	r3, [sp, #28]
 8005844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005848:	931a      	str	r3, [sp, #104]	; 0x68
 800584a:	4654      	mov	r4, sl
 800584c:	2205      	movs	r2, #5
 800584e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005852:	4858      	ldr	r0, [pc, #352]	; (80059b4 <_vfiprintf_r+0x24c>)
 8005854:	f7fa fc94 	bl	8000180 <memchr>
 8005858:	9a04      	ldr	r2, [sp, #16]
 800585a:	b9d8      	cbnz	r0, 8005894 <_vfiprintf_r+0x12c>
 800585c:	06d1      	lsls	r1, r2, #27
 800585e:	bf44      	itt	mi
 8005860:	2320      	movmi	r3, #32
 8005862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005866:	0713      	lsls	r3, r2, #28
 8005868:	bf44      	itt	mi
 800586a:	232b      	movmi	r3, #43	; 0x2b
 800586c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005870:	f89a 3000 	ldrb.w	r3, [sl]
 8005874:	2b2a      	cmp	r3, #42	; 0x2a
 8005876:	d015      	beq.n	80058a4 <_vfiprintf_r+0x13c>
 8005878:	9a07      	ldr	r2, [sp, #28]
 800587a:	4654      	mov	r4, sl
 800587c:	2000      	movs	r0, #0
 800587e:	f04f 0c0a 	mov.w	ip, #10
 8005882:	4621      	mov	r1, r4
 8005884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005888:	3b30      	subs	r3, #48	; 0x30
 800588a:	2b09      	cmp	r3, #9
 800588c:	d94e      	bls.n	800592c <_vfiprintf_r+0x1c4>
 800588e:	b1b0      	cbz	r0, 80058be <_vfiprintf_r+0x156>
 8005890:	9207      	str	r2, [sp, #28]
 8005892:	e014      	b.n	80058be <_vfiprintf_r+0x156>
 8005894:	eba0 0308 	sub.w	r3, r0, r8
 8005898:	fa09 f303 	lsl.w	r3, r9, r3
 800589c:	4313      	orrs	r3, r2
 800589e:	9304      	str	r3, [sp, #16]
 80058a0:	46a2      	mov	sl, r4
 80058a2:	e7d2      	b.n	800584a <_vfiprintf_r+0xe2>
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	1d19      	adds	r1, r3, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	9103      	str	r1, [sp, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bfbb      	ittet	lt
 80058b0:	425b      	neglt	r3, r3
 80058b2:	f042 0202 	orrlt.w	r2, r2, #2
 80058b6:	9307      	strge	r3, [sp, #28]
 80058b8:	9307      	strlt	r3, [sp, #28]
 80058ba:	bfb8      	it	lt
 80058bc:	9204      	strlt	r2, [sp, #16]
 80058be:	7823      	ldrb	r3, [r4, #0]
 80058c0:	2b2e      	cmp	r3, #46	; 0x2e
 80058c2:	d10c      	bne.n	80058de <_vfiprintf_r+0x176>
 80058c4:	7863      	ldrb	r3, [r4, #1]
 80058c6:	2b2a      	cmp	r3, #42	; 0x2a
 80058c8:	d135      	bne.n	8005936 <_vfiprintf_r+0x1ce>
 80058ca:	9b03      	ldr	r3, [sp, #12]
 80058cc:	1d1a      	adds	r2, r3, #4
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	9203      	str	r2, [sp, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bfb8      	it	lt
 80058d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058da:	3402      	adds	r4, #2
 80058dc:	9305      	str	r3, [sp, #20]
 80058de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059c4 <_vfiprintf_r+0x25c>
 80058e2:	7821      	ldrb	r1, [r4, #0]
 80058e4:	2203      	movs	r2, #3
 80058e6:	4650      	mov	r0, sl
 80058e8:	f7fa fc4a 	bl	8000180 <memchr>
 80058ec:	b140      	cbz	r0, 8005900 <_vfiprintf_r+0x198>
 80058ee:	2340      	movs	r3, #64	; 0x40
 80058f0:	eba0 000a 	sub.w	r0, r0, sl
 80058f4:	fa03 f000 	lsl.w	r0, r3, r0
 80058f8:	9b04      	ldr	r3, [sp, #16]
 80058fa:	4303      	orrs	r3, r0
 80058fc:	3401      	adds	r4, #1
 80058fe:	9304      	str	r3, [sp, #16]
 8005900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005904:	482c      	ldr	r0, [pc, #176]	; (80059b8 <_vfiprintf_r+0x250>)
 8005906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800590a:	2206      	movs	r2, #6
 800590c:	f7fa fc38 	bl	8000180 <memchr>
 8005910:	2800      	cmp	r0, #0
 8005912:	d03f      	beq.n	8005994 <_vfiprintf_r+0x22c>
 8005914:	4b29      	ldr	r3, [pc, #164]	; (80059bc <_vfiprintf_r+0x254>)
 8005916:	bb1b      	cbnz	r3, 8005960 <_vfiprintf_r+0x1f8>
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	3307      	adds	r3, #7
 800591c:	f023 0307 	bic.w	r3, r3, #7
 8005920:	3308      	adds	r3, #8
 8005922:	9303      	str	r3, [sp, #12]
 8005924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005926:	443b      	add	r3, r7
 8005928:	9309      	str	r3, [sp, #36]	; 0x24
 800592a:	e767      	b.n	80057fc <_vfiprintf_r+0x94>
 800592c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005930:	460c      	mov	r4, r1
 8005932:	2001      	movs	r0, #1
 8005934:	e7a5      	b.n	8005882 <_vfiprintf_r+0x11a>
 8005936:	2300      	movs	r3, #0
 8005938:	3401      	adds	r4, #1
 800593a:	9305      	str	r3, [sp, #20]
 800593c:	4619      	mov	r1, r3
 800593e:	f04f 0c0a 	mov.w	ip, #10
 8005942:	4620      	mov	r0, r4
 8005944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005948:	3a30      	subs	r2, #48	; 0x30
 800594a:	2a09      	cmp	r2, #9
 800594c:	d903      	bls.n	8005956 <_vfiprintf_r+0x1ee>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0c5      	beq.n	80058de <_vfiprintf_r+0x176>
 8005952:	9105      	str	r1, [sp, #20]
 8005954:	e7c3      	b.n	80058de <_vfiprintf_r+0x176>
 8005956:	fb0c 2101 	mla	r1, ip, r1, r2
 800595a:	4604      	mov	r4, r0
 800595c:	2301      	movs	r3, #1
 800595e:	e7f0      	b.n	8005942 <_vfiprintf_r+0x1da>
 8005960:	ab03      	add	r3, sp, #12
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	462a      	mov	r2, r5
 8005966:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <_vfiprintf_r+0x258>)
 8005968:	a904      	add	r1, sp, #16
 800596a:	4630      	mov	r0, r6
 800596c:	f3af 8000 	nop.w
 8005970:	4607      	mov	r7, r0
 8005972:	1c78      	adds	r0, r7, #1
 8005974:	d1d6      	bne.n	8005924 <_vfiprintf_r+0x1bc>
 8005976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005978:	07d9      	lsls	r1, r3, #31
 800597a:	d405      	bmi.n	8005988 <_vfiprintf_r+0x220>
 800597c:	89ab      	ldrh	r3, [r5, #12]
 800597e:	059a      	lsls	r2, r3, #22
 8005980:	d402      	bmi.n	8005988 <_vfiprintf_r+0x220>
 8005982:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005984:	f7ff fcaa 	bl	80052dc <__retarget_lock_release_recursive>
 8005988:	89ab      	ldrh	r3, [r5, #12]
 800598a:	065b      	lsls	r3, r3, #25
 800598c:	f53f af12 	bmi.w	80057b4 <_vfiprintf_r+0x4c>
 8005990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005992:	e711      	b.n	80057b8 <_vfiprintf_r+0x50>
 8005994:	ab03      	add	r3, sp, #12
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	462a      	mov	r2, r5
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <_vfiprintf_r+0x258>)
 800599c:	a904      	add	r1, sp, #16
 800599e:	4630      	mov	r0, r6
 80059a0:	f000 f880 	bl	8005aa4 <_printf_i>
 80059a4:	e7e4      	b.n	8005970 <_vfiprintf_r+0x208>
 80059a6:	bf00      	nop
 80059a8:	08006028 	.word	0x08006028
 80059ac:	08006048 	.word	0x08006048
 80059b0:	08006008 	.word	0x08006008
 80059b4:	0800606c 	.word	0x0800606c
 80059b8:	08006076 	.word	0x08006076
 80059bc:	00000000 	.word	0x00000000
 80059c0:	08005743 	.word	0x08005743
 80059c4:	08006072 	.word	0x08006072

080059c8 <_printf_common>:
 80059c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	4616      	mov	r6, r2
 80059ce:	4699      	mov	r9, r3
 80059d0:	688a      	ldr	r2, [r1, #8]
 80059d2:	690b      	ldr	r3, [r1, #16]
 80059d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d8:	4293      	cmp	r3, r2
 80059da:	bfb8      	it	lt
 80059dc:	4613      	movlt	r3, r2
 80059de:	6033      	str	r3, [r6, #0]
 80059e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e4:	4607      	mov	r7, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	b10a      	cbz	r2, 80059ee <_printf_common+0x26>
 80059ea:	3301      	adds	r3, #1
 80059ec:	6033      	str	r3, [r6, #0]
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	0699      	lsls	r1, r3, #26
 80059f2:	bf42      	ittt	mi
 80059f4:	6833      	ldrmi	r3, [r6, #0]
 80059f6:	3302      	addmi	r3, #2
 80059f8:	6033      	strmi	r3, [r6, #0]
 80059fa:	6825      	ldr	r5, [r4, #0]
 80059fc:	f015 0506 	ands.w	r5, r5, #6
 8005a00:	d106      	bne.n	8005a10 <_printf_common+0x48>
 8005a02:	f104 0a19 	add.w	sl, r4, #25
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	6832      	ldr	r2, [r6, #0]
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	42ab      	cmp	r3, r5
 8005a0e:	dc26      	bgt.n	8005a5e <_printf_common+0x96>
 8005a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a14:	1e13      	subs	r3, r2, #0
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	bf18      	it	ne
 8005a1a:	2301      	movne	r3, #1
 8005a1c:	0692      	lsls	r2, r2, #26
 8005a1e:	d42b      	bmi.n	8005a78 <_printf_common+0xb0>
 8005a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a24:	4649      	mov	r1, r9
 8005a26:	4638      	mov	r0, r7
 8005a28:	47c0      	blx	r8
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d01e      	beq.n	8005a6c <_printf_common+0xa4>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	68e5      	ldr	r5, [r4, #12]
 8005a32:	6832      	ldr	r2, [r6, #0]
 8005a34:	f003 0306 	and.w	r3, r3, #6
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	bf08      	it	eq
 8005a3c:	1aad      	subeq	r5, r5, r2
 8005a3e:	68a3      	ldr	r3, [r4, #8]
 8005a40:	6922      	ldr	r2, [r4, #16]
 8005a42:	bf0c      	ite	eq
 8005a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a48:	2500      	movne	r5, #0
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	bfc4      	itt	gt
 8005a4e:	1a9b      	subgt	r3, r3, r2
 8005a50:	18ed      	addgt	r5, r5, r3
 8005a52:	2600      	movs	r6, #0
 8005a54:	341a      	adds	r4, #26
 8005a56:	42b5      	cmp	r5, r6
 8005a58:	d11a      	bne.n	8005a90 <_printf_common+0xc8>
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	e008      	b.n	8005a70 <_printf_common+0xa8>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4652      	mov	r2, sl
 8005a62:	4649      	mov	r1, r9
 8005a64:	4638      	mov	r0, r7
 8005a66:	47c0      	blx	r8
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d103      	bne.n	8005a74 <_printf_common+0xac>
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a74:	3501      	adds	r5, #1
 8005a76:	e7c6      	b.n	8005a06 <_printf_common+0x3e>
 8005a78:	18e1      	adds	r1, r4, r3
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	2030      	movs	r0, #48	; 0x30
 8005a7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a82:	4422      	add	r2, r4
 8005a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	e7c7      	b.n	8005a20 <_printf_common+0x58>
 8005a90:	2301      	movs	r3, #1
 8005a92:	4622      	mov	r2, r4
 8005a94:	4649      	mov	r1, r9
 8005a96:	4638      	mov	r0, r7
 8005a98:	47c0      	blx	r8
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d0e6      	beq.n	8005a6c <_printf_common+0xa4>
 8005a9e:	3601      	adds	r6, #1
 8005aa0:	e7d9      	b.n	8005a56 <_printf_common+0x8e>
	...

08005aa4 <_printf_i>:
 8005aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	7e0f      	ldrb	r7, [r1, #24]
 8005aaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aac:	2f78      	cmp	r7, #120	; 0x78
 8005aae:	4691      	mov	r9, r2
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	469a      	mov	sl, r3
 8005ab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005aba:	d807      	bhi.n	8005acc <_printf_i+0x28>
 8005abc:	2f62      	cmp	r7, #98	; 0x62
 8005abe:	d80a      	bhi.n	8005ad6 <_printf_i+0x32>
 8005ac0:	2f00      	cmp	r7, #0
 8005ac2:	f000 80d8 	beq.w	8005c76 <_printf_i+0x1d2>
 8005ac6:	2f58      	cmp	r7, #88	; 0x58
 8005ac8:	f000 80a3 	beq.w	8005c12 <_printf_i+0x16e>
 8005acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad4:	e03a      	b.n	8005b4c <_printf_i+0xa8>
 8005ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ada:	2b15      	cmp	r3, #21
 8005adc:	d8f6      	bhi.n	8005acc <_printf_i+0x28>
 8005ade:	a101      	add	r1, pc, #4	; (adr r1, 8005ae4 <_printf_i+0x40>)
 8005ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae4:	08005b3d 	.word	0x08005b3d
 8005ae8:	08005b51 	.word	0x08005b51
 8005aec:	08005acd 	.word	0x08005acd
 8005af0:	08005acd 	.word	0x08005acd
 8005af4:	08005acd 	.word	0x08005acd
 8005af8:	08005acd 	.word	0x08005acd
 8005afc:	08005b51 	.word	0x08005b51
 8005b00:	08005acd 	.word	0x08005acd
 8005b04:	08005acd 	.word	0x08005acd
 8005b08:	08005acd 	.word	0x08005acd
 8005b0c:	08005acd 	.word	0x08005acd
 8005b10:	08005c5d 	.word	0x08005c5d
 8005b14:	08005b81 	.word	0x08005b81
 8005b18:	08005c3f 	.word	0x08005c3f
 8005b1c:	08005acd 	.word	0x08005acd
 8005b20:	08005acd 	.word	0x08005acd
 8005b24:	08005c7f 	.word	0x08005c7f
 8005b28:	08005acd 	.word	0x08005acd
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005acd 	.word	0x08005acd
 8005b34:	08005acd 	.word	0x08005acd
 8005b38:	08005c47 	.word	0x08005c47
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	1d1a      	adds	r2, r3, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	602a      	str	r2, [r5, #0]
 8005b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0a3      	b.n	8005c98 <_printf_i+0x1f4>
 8005b50:	6820      	ldr	r0, [r4, #0]
 8005b52:	6829      	ldr	r1, [r5, #0]
 8005b54:	0606      	lsls	r6, r0, #24
 8005b56:	f101 0304 	add.w	r3, r1, #4
 8005b5a:	d50a      	bpl.n	8005b72 <_printf_i+0xce>
 8005b5c:	680e      	ldr	r6, [r1, #0]
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	2e00      	cmp	r6, #0
 8005b62:	da03      	bge.n	8005b6c <_printf_i+0xc8>
 8005b64:	232d      	movs	r3, #45	; 0x2d
 8005b66:	4276      	negs	r6, r6
 8005b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b6c:	485e      	ldr	r0, [pc, #376]	; (8005ce8 <_printf_i+0x244>)
 8005b6e:	230a      	movs	r3, #10
 8005b70:	e019      	b.n	8005ba6 <_printf_i+0x102>
 8005b72:	680e      	ldr	r6, [r1, #0]
 8005b74:	602b      	str	r3, [r5, #0]
 8005b76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b7a:	bf18      	it	ne
 8005b7c:	b236      	sxthne	r6, r6
 8005b7e:	e7ef      	b.n	8005b60 <_printf_i+0xbc>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	6820      	ldr	r0, [r4, #0]
 8005b84:	1d19      	adds	r1, r3, #4
 8005b86:	6029      	str	r1, [r5, #0]
 8005b88:	0601      	lsls	r1, r0, #24
 8005b8a:	d501      	bpl.n	8005b90 <_printf_i+0xec>
 8005b8c:	681e      	ldr	r6, [r3, #0]
 8005b8e:	e002      	b.n	8005b96 <_printf_i+0xf2>
 8005b90:	0646      	lsls	r6, r0, #25
 8005b92:	d5fb      	bpl.n	8005b8c <_printf_i+0xe8>
 8005b94:	881e      	ldrh	r6, [r3, #0]
 8005b96:	4854      	ldr	r0, [pc, #336]	; (8005ce8 <_printf_i+0x244>)
 8005b98:	2f6f      	cmp	r7, #111	; 0x6f
 8005b9a:	bf0c      	ite	eq
 8005b9c:	2308      	moveq	r3, #8
 8005b9e:	230a      	movne	r3, #10
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ba6:	6865      	ldr	r5, [r4, #4]
 8005ba8:	60a5      	str	r5, [r4, #8]
 8005baa:	2d00      	cmp	r5, #0
 8005bac:	bfa2      	ittt	ge
 8005bae:	6821      	ldrge	r1, [r4, #0]
 8005bb0:	f021 0104 	bicge.w	r1, r1, #4
 8005bb4:	6021      	strge	r1, [r4, #0]
 8005bb6:	b90e      	cbnz	r6, 8005bbc <_printf_i+0x118>
 8005bb8:	2d00      	cmp	r5, #0
 8005bba:	d04d      	beq.n	8005c58 <_printf_i+0x1b4>
 8005bbc:	4615      	mov	r5, r2
 8005bbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bc2:	fb03 6711 	mls	r7, r3, r1, r6
 8005bc6:	5dc7      	ldrb	r7, [r0, r7]
 8005bc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bcc:	4637      	mov	r7, r6
 8005bce:	42bb      	cmp	r3, r7
 8005bd0:	460e      	mov	r6, r1
 8005bd2:	d9f4      	bls.n	8005bbe <_printf_i+0x11a>
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d10b      	bne.n	8005bf0 <_printf_i+0x14c>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	07de      	lsls	r6, r3, #31
 8005bdc:	d508      	bpl.n	8005bf0 <_printf_i+0x14c>
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	6861      	ldr	r1, [r4, #4]
 8005be2:	4299      	cmp	r1, r3
 8005be4:	bfde      	ittt	le
 8005be6:	2330      	movle	r3, #48	; 0x30
 8005be8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005bf0:	1b52      	subs	r2, r2, r5
 8005bf2:	6122      	str	r2, [r4, #16]
 8005bf4:	f8cd a000 	str.w	sl, [sp]
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	aa03      	add	r2, sp, #12
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4640      	mov	r0, r8
 8005c00:	f7ff fee2 	bl	80059c8 <_printf_common>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d14c      	bne.n	8005ca2 <_printf_i+0x1fe>
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c0c:	b004      	add	sp, #16
 8005c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c12:	4835      	ldr	r0, [pc, #212]	; (8005ce8 <_printf_i+0x244>)
 8005c14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c18:	6829      	ldr	r1, [r5, #0]
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c20:	6029      	str	r1, [r5, #0]
 8005c22:	061d      	lsls	r5, r3, #24
 8005c24:	d514      	bpl.n	8005c50 <_printf_i+0x1ac>
 8005c26:	07df      	lsls	r7, r3, #31
 8005c28:	bf44      	itt	mi
 8005c2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c2e:	6023      	strmi	r3, [r4, #0]
 8005c30:	b91e      	cbnz	r6, 8005c3a <_printf_i+0x196>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	f023 0320 	bic.w	r3, r3, #32
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	2310      	movs	r3, #16
 8005c3c:	e7b0      	b.n	8005ba0 <_printf_i+0xfc>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	f043 0320 	orr.w	r3, r3, #32
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	2378      	movs	r3, #120	; 0x78
 8005c48:	4828      	ldr	r0, [pc, #160]	; (8005cec <_printf_i+0x248>)
 8005c4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c4e:	e7e3      	b.n	8005c18 <_printf_i+0x174>
 8005c50:	0659      	lsls	r1, r3, #25
 8005c52:	bf48      	it	mi
 8005c54:	b2b6      	uxthmi	r6, r6
 8005c56:	e7e6      	b.n	8005c26 <_printf_i+0x182>
 8005c58:	4615      	mov	r5, r2
 8005c5a:	e7bb      	b.n	8005bd4 <_printf_i+0x130>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	6826      	ldr	r6, [r4, #0]
 8005c60:	6961      	ldr	r1, [r4, #20]
 8005c62:	1d18      	adds	r0, r3, #4
 8005c64:	6028      	str	r0, [r5, #0]
 8005c66:	0635      	lsls	r5, r6, #24
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	d501      	bpl.n	8005c70 <_printf_i+0x1cc>
 8005c6c:	6019      	str	r1, [r3, #0]
 8005c6e:	e002      	b.n	8005c76 <_printf_i+0x1d2>
 8005c70:	0670      	lsls	r0, r6, #25
 8005c72:	d5fb      	bpl.n	8005c6c <_printf_i+0x1c8>
 8005c74:	8019      	strh	r1, [r3, #0]
 8005c76:	2300      	movs	r3, #0
 8005c78:	6123      	str	r3, [r4, #16]
 8005c7a:	4615      	mov	r5, r2
 8005c7c:	e7ba      	b.n	8005bf4 <_printf_i+0x150>
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	1d1a      	adds	r2, r3, #4
 8005c82:	602a      	str	r2, [r5, #0]
 8005c84:	681d      	ldr	r5, [r3, #0]
 8005c86:	6862      	ldr	r2, [r4, #4]
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7fa fa78 	bl	8000180 <memchr>
 8005c90:	b108      	cbz	r0, 8005c96 <_printf_i+0x1f2>
 8005c92:	1b40      	subs	r0, r0, r5
 8005c94:	6060      	str	r0, [r4, #4]
 8005c96:	6863      	ldr	r3, [r4, #4]
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca0:	e7a8      	b.n	8005bf4 <_printf_i+0x150>
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	4640      	mov	r0, r8
 8005caa:	47d0      	blx	sl
 8005cac:	3001      	adds	r0, #1
 8005cae:	d0ab      	beq.n	8005c08 <_printf_i+0x164>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	079b      	lsls	r3, r3, #30
 8005cb4:	d413      	bmi.n	8005cde <_printf_i+0x23a>
 8005cb6:	68e0      	ldr	r0, [r4, #12]
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	4298      	cmp	r0, r3
 8005cbc:	bfb8      	it	lt
 8005cbe:	4618      	movlt	r0, r3
 8005cc0:	e7a4      	b.n	8005c0c <_printf_i+0x168>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	47d0      	blx	sl
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d09b      	beq.n	8005c08 <_printf_i+0x164>
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	68e3      	ldr	r3, [r4, #12]
 8005cd4:	9903      	ldr	r1, [sp, #12]
 8005cd6:	1a5b      	subs	r3, r3, r1
 8005cd8:	42ab      	cmp	r3, r5
 8005cda:	dcf2      	bgt.n	8005cc2 <_printf_i+0x21e>
 8005cdc:	e7eb      	b.n	8005cb6 <_printf_i+0x212>
 8005cde:	2500      	movs	r5, #0
 8005ce0:	f104 0619 	add.w	r6, r4, #25
 8005ce4:	e7f5      	b.n	8005cd2 <_printf_i+0x22e>
 8005ce6:	bf00      	nop
 8005ce8:	0800607d 	.word	0x0800607d
 8005cec:	0800608e 	.word	0x0800608e

08005cf0 <_read_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4d07      	ldr	r5, [pc, #28]	; (8005d10 <_read_r+0x20>)
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	4608      	mov	r0, r1
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	602a      	str	r2, [r5, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f7fb f937 	bl	8000f72 <_read>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_read_r+0x1e>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_read_r+0x1e>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	20000494 	.word	0x20000494

08005d14 <__swbuf_r>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	460e      	mov	r6, r1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	b118      	cbz	r0, 8005d26 <__swbuf_r+0x12>
 8005d1e:	6983      	ldr	r3, [r0, #24]
 8005d20:	b90b      	cbnz	r3, 8005d26 <__swbuf_r+0x12>
 8005d22:	f7ff fa17 	bl	8005154 <__sinit>
 8005d26:	4b21      	ldr	r3, [pc, #132]	; (8005dac <__swbuf_r+0x98>)
 8005d28:	429c      	cmp	r4, r3
 8005d2a:	d12b      	bne.n	8005d84 <__swbuf_r+0x70>
 8005d2c:	686c      	ldr	r4, [r5, #4]
 8005d2e:	69a3      	ldr	r3, [r4, #24]
 8005d30:	60a3      	str	r3, [r4, #8]
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	071a      	lsls	r2, r3, #28
 8005d36:	d52f      	bpl.n	8005d98 <__swbuf_r+0x84>
 8005d38:	6923      	ldr	r3, [r4, #16]
 8005d3a:	b36b      	cbz	r3, 8005d98 <__swbuf_r+0x84>
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	6820      	ldr	r0, [r4, #0]
 8005d40:	1ac0      	subs	r0, r0, r3
 8005d42:	6963      	ldr	r3, [r4, #20]
 8005d44:	b2f6      	uxtb	r6, r6
 8005d46:	4283      	cmp	r3, r0
 8005d48:	4637      	mov	r7, r6
 8005d4a:	dc04      	bgt.n	8005d56 <__swbuf_r+0x42>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f7ff f96c 	bl	800502c <_fflush_r>
 8005d54:	bb30      	cbnz	r0, 8005da4 <__swbuf_r+0x90>
 8005d56:	68a3      	ldr	r3, [r4, #8]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	60a3      	str	r3, [r4, #8]
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	6022      	str	r2, [r4, #0]
 8005d62:	701e      	strb	r6, [r3, #0]
 8005d64:	6963      	ldr	r3, [r4, #20]
 8005d66:	3001      	adds	r0, #1
 8005d68:	4283      	cmp	r3, r0
 8005d6a:	d004      	beq.n	8005d76 <__swbuf_r+0x62>
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	07db      	lsls	r3, r3, #31
 8005d70:	d506      	bpl.n	8005d80 <__swbuf_r+0x6c>
 8005d72:	2e0a      	cmp	r6, #10
 8005d74:	d104      	bne.n	8005d80 <__swbuf_r+0x6c>
 8005d76:	4621      	mov	r1, r4
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f7ff f957 	bl	800502c <_fflush_r>
 8005d7e:	b988      	cbnz	r0, 8005da4 <__swbuf_r+0x90>
 8005d80:	4638      	mov	r0, r7
 8005d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <__swbuf_r+0x9c>)
 8005d86:	429c      	cmp	r4, r3
 8005d88:	d101      	bne.n	8005d8e <__swbuf_r+0x7a>
 8005d8a:	68ac      	ldr	r4, [r5, #8]
 8005d8c:	e7cf      	b.n	8005d2e <__swbuf_r+0x1a>
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <__swbuf_r+0xa0>)
 8005d90:	429c      	cmp	r4, r3
 8005d92:	bf08      	it	eq
 8005d94:	68ec      	ldreq	r4, [r5, #12]
 8005d96:	e7ca      	b.n	8005d2e <__swbuf_r+0x1a>
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f000 f80c 	bl	8005db8 <__swsetup_r>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d0cb      	beq.n	8005d3c <__swbuf_r+0x28>
 8005da4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005da8:	e7ea      	b.n	8005d80 <__swbuf_r+0x6c>
 8005daa:	bf00      	nop
 8005dac:	08006028 	.word	0x08006028
 8005db0:	08006048 	.word	0x08006048
 8005db4:	08006008 	.word	0x08006008

08005db8 <__swsetup_r>:
 8005db8:	4b32      	ldr	r3, [pc, #200]	; (8005e84 <__swsetup_r+0xcc>)
 8005dba:	b570      	push	{r4, r5, r6, lr}
 8005dbc:	681d      	ldr	r5, [r3, #0]
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	b125      	cbz	r5, 8005dce <__swsetup_r+0x16>
 8005dc4:	69ab      	ldr	r3, [r5, #24]
 8005dc6:	b913      	cbnz	r3, 8005dce <__swsetup_r+0x16>
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f7ff f9c3 	bl	8005154 <__sinit>
 8005dce:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <__swsetup_r+0xd0>)
 8005dd0:	429c      	cmp	r4, r3
 8005dd2:	d10f      	bne.n	8005df4 <__swsetup_r+0x3c>
 8005dd4:	686c      	ldr	r4, [r5, #4]
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ddc:	0719      	lsls	r1, r3, #28
 8005dde:	d42c      	bmi.n	8005e3a <__swsetup_r+0x82>
 8005de0:	06dd      	lsls	r5, r3, #27
 8005de2:	d411      	bmi.n	8005e08 <__swsetup_r+0x50>
 8005de4:	2309      	movs	r3, #9
 8005de6:	6033      	str	r3, [r6, #0]
 8005de8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005dec:	81a3      	strh	r3, [r4, #12]
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005df2:	e03e      	b.n	8005e72 <__swsetup_r+0xba>
 8005df4:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <__swsetup_r+0xd4>)
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d101      	bne.n	8005dfe <__swsetup_r+0x46>
 8005dfa:	68ac      	ldr	r4, [r5, #8]
 8005dfc:	e7eb      	b.n	8005dd6 <__swsetup_r+0x1e>
 8005dfe:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <__swsetup_r+0xd8>)
 8005e00:	429c      	cmp	r4, r3
 8005e02:	bf08      	it	eq
 8005e04:	68ec      	ldreq	r4, [r5, #12]
 8005e06:	e7e6      	b.n	8005dd6 <__swsetup_r+0x1e>
 8005e08:	0758      	lsls	r0, r3, #29
 8005e0a:	d512      	bpl.n	8005e32 <__swsetup_r+0x7a>
 8005e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e0e:	b141      	cbz	r1, 8005e22 <__swsetup_r+0x6a>
 8005e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e14:	4299      	cmp	r1, r3
 8005e16:	d002      	beq.n	8005e1e <__swsetup_r+0x66>
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff facd 	bl	80053b8 <_free_r>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6363      	str	r3, [r4, #52]	; 0x34
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6063      	str	r3, [r4, #4]
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f043 0308 	orr.w	r3, r3, #8
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	b94b      	cbnz	r3, 8005e52 <__swsetup_r+0x9a>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e48:	d003      	beq.n	8005e52 <__swsetup_r+0x9a>
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7ff fa6b 	bl	8005328 <__smakebuf_r>
 8005e52:	89a0      	ldrh	r0, [r4, #12]
 8005e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e58:	f010 0301 	ands.w	r3, r0, #1
 8005e5c:	d00a      	beq.n	8005e74 <__swsetup_r+0xbc>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60a3      	str	r3, [r4, #8]
 8005e62:	6963      	ldr	r3, [r4, #20]
 8005e64:	425b      	negs	r3, r3
 8005e66:	61a3      	str	r3, [r4, #24]
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	b943      	cbnz	r3, 8005e7e <__swsetup_r+0xc6>
 8005e6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e70:	d1ba      	bne.n	8005de8 <__swsetup_r+0x30>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	0781      	lsls	r1, r0, #30
 8005e76:	bf58      	it	pl
 8005e78:	6963      	ldrpl	r3, [r4, #20]
 8005e7a:	60a3      	str	r3, [r4, #8]
 8005e7c:	e7f4      	b.n	8005e68 <__swsetup_r+0xb0>
 8005e7e:	2000      	movs	r0, #0
 8005e80:	e7f7      	b.n	8005e72 <__swsetup_r+0xba>
 8005e82:	bf00      	nop
 8005e84:	2000001c 	.word	0x2000001c
 8005e88:	08006028 	.word	0x08006028
 8005e8c:	08006048 	.word	0x08006048
 8005e90:	08006008 	.word	0x08006008

08005e94 <_init>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr

08005ea0 <_fini>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr
