
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005778  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000008  08005a8c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003f8  20000080  08005b04  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000478  08005b04  00020478  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015999  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002c1c  00000000  00000000  00035a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001990  00000000  00000000  00038668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001858  00000000  00000000  00039ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00023516  00000000  00000000  0003b850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001543c  00000000  00000000  0005ed66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e168e  00000000  00000000  000741a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00155830  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007434  00000000  00000000  00155880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	080058a0 	.word	0x080058a0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	080058a0 	.word	0x080058a0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000230:	f023 0218 	bic.w	r2, r3, #24
 8000234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000270:	68fb      	ldr	r3, [r7, #12]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <recieve16Bit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool recieve16Bit(uint16_t *read_to){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	if(HAL_SPI_Receive(&hspi1, (uint8_t*)read_to, 2, 10) == HAL_OK) {
 8000288:	230a      	movs	r3, #10
 800028a:	2202      	movs	r2, #2
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <recieve16Bit+0x28>)
 8000290:	f003 fb42 	bl	8003918 <HAL_SPI_Receive>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <recieve16Bit+0x1e>
		return true;
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <recieve16Bit+0x20>
	}

	return false;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000009c 	.word	0x2000009c

080002ac <send16Bit>:

_Bool send16Bit(uint16_t *send){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2,10) == HAL_OK){
 80002b4:	230a      	movs	r3, #10
 80002b6:	2202      	movs	r2, #2
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <send16Bit+0x28>)
 80002bc:	f003 f9be 	bl	800363c <HAL_SPI_Transmit>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <send16Bit+0x1e>
		return true;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <send16Bit+0x20>

	}
	return false;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000009c 	.word	0x2000009c

080002d8 <getStartInput>:

void getStartInput(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	uint8_t header;
		  HAL_StatusTypeDef receive_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80002de:	1db9      	adds	r1, r7, #6
 80002e0:	230a      	movs	r3, #10
 80002e2:	2201      	movs	r2, #1
 80002e4:	4825      	ldr	r0, [pc, #148]	; (800037c <getStartInput+0xa4>)
 80002e6:	f003 fb17 	bl	8003918 <HAL_SPI_Receive>
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
		  if(receive_status == HAL_OK) {
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d130      	bne.n	8000356 <getStartInput+0x7e>
			  switch((Header)header) {
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d020      	beq.n	800033c <getStartInput+0x64>
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	dc32      	bgt.n	8000364 <getStartInput+0x8c>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d002      	beq.n	8000308 <getStartInput+0x30>
 8000302:	2b02      	cmp	r3, #2
 8000304:	d00d      	beq.n	8000322 <getStartInput+0x4a>
 8000306:	e02d      	b.n	8000364 <getStartInput+0x8c>
			  	  case SLEEP_TIME:
			  		  if(!recieve16Bit(&sleep_time)) {
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <getStartInput+0xa8>)
 800030a:	f7ff ffb9 	bl	8000280 <recieve16Bit>
 800030e:	4603      	mov	r3, r0
 8000310:	f083 0301 	eor.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d01f      	beq.n	800035a <getStartInput+0x82>
			  			  printf("ERROR COULD NOT RECIEVE SLEEP TIME");
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <getStartInput+0xac>)
 800031c:	f004 fb32 	bl	8004984 <iprintf>
			  		  	  }
					  break;
 8000320:	e01b      	b.n	800035a <getStartInput+0x82>
				  case RUN_AMOUNT:
					  if(!recieve16Bit(&max_amount_of_runs)){
 8000322:	4819      	ldr	r0, [pc, #100]	; (8000388 <getStartInput+0xb0>)
 8000324:	f7ff ffac 	bl	8000280 <recieve16Bit>
 8000328:	4603      	mov	r3, r0
 800032a:	f083 0301 	eor.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d014      	beq.n	800035e <getStartInput+0x86>
						  printf("ERROR COULD NOT RECIEVE AMOUNT OF RUNS");
 8000334:	4815      	ldr	r0, [pc, #84]	; (800038c <getStartInput+0xb4>)
 8000336:	f004 fb25 	bl	8004984 <iprintf>
					  }

					  break;
 800033a:	e010      	b.n	800035e <getStartInput+0x86>
				  case TEST_MODE:
					  if(!recieve16Bit(&test_mode)){
 800033c:	4814      	ldr	r0, [pc, #80]	; (8000390 <getStartInput+0xb8>)
 800033e:	f7ff ff9f 	bl	8000280 <recieve16Bit>
 8000342:	4603      	mov	r3, r0
 8000344:	f083 0301 	eor.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d009      	beq.n	8000362 <getStartInput+0x8a>
						  printf("TEST MODE COULD NOT BE RECIEVED");
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <getStartInput+0xbc>)
 8000350:	f004 fb18 	bl	8004984 <iprintf>
					  }
					  break;
 8000354:	e005      	b.n	8000362 <getStartInput+0x8a>
				  }
		  }
 8000356:	bf00      	nop
 8000358:	e004      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <getStartInput+0x8c>
					  break;
 8000362:	bf00      	nop
		  if(test_mode != 2){
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <getStartInput+0xb8>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d002      	beq.n	8000372 <getStartInput+0x9a>
			  test_input_set = true;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <getStartInput+0xc0>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		  }
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000009c 	.word	0x2000009c
 8000380:	20000458 	.word	0x20000458
 8000384:	080058b8 	.word	0x080058b8
 8000388:	2000045a 	.word	0x2000045a
 800038c:	080058dc 	.word	0x080058dc
 8000390:	20000008 	.word	0x20000008
 8000394:	08005904 	.word	0x08005904
 8000398:	2000045c 	.word	0x2000045c

0800039c <sendTestData>:
void sendTestData(uint32_t *times){
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2110      	movs	r1, #16
 80003ac:	481e      	ldr	r0, [pc, #120]	; (8000428 <sendTestData+0x8c>)
 80003ae:	f001 f9d1 	bl	8001754 <HAL_GPIO_WritePin>
	while(index < max_amount_of_runs){
 80003b2:	e02b      	b.n	800040c <sendTestData+0x70>
		uint8_t header;
		uint32_t *ptr = &times[index];
 80003b4:	8afb      	ldrh	r3, [r7, #22]
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	4413      	add	r3, r2
 80003bc:	613b      	str	r3, [r7, #16]
		uint16_t value = *((uint16_t*)ptr);
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	81bb      	strh	r3, [r7, #12]
		HAL_StatusTypeDef recieve_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80003c4:	f107 010e 	add.w	r1, r7, #14
 80003c8:	230a      	movs	r3, #10
 80003ca:	2201      	movs	r2, #1
 80003cc:	4817      	ldr	r0, [pc, #92]	; (800042c <sendTestData+0x90>)
 80003ce:	f003 faa3 	bl	8003918 <HAL_SPI_Receive>
 80003d2:	4603      	mov	r3, r0
 80003d4:	73fb      	strb	r3, [r7, #15]
		if(recieve_status == HAL_OK){
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d117      	bne.n	800040c <sendTestData+0x70>
			if(header == 4){
 80003dc:	7bbb      	ldrb	r3, [r7, #14]
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d111      	bne.n	8000406 <sendTestData+0x6a>
				if(!send16Bit(&value)){
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff60 	bl	80002ac <send16Bit>
 80003ec:	4603      	mov	r3, r0
 80003ee:	f083 0301 	eor.w	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <sendTestData+0x62>
					printf("COULD NOT SEND DATA");
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <sendTestData+0x94>)
 80003fa:	f004 fac3 	bl	8004984 <iprintf>
				}
				index++;
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	3301      	adds	r3, #1
 8000402:	82fb      	strh	r3, [r7, #22]
 8000404:	e002      	b.n	800040c <sendTestData+0x70>
			}
			else{
				printf("STUB");
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <sendTestData+0x98>)
 8000408:	f004 fabc 	bl	8004984 <iprintf>
	while(index < max_amount_of_runs){
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <sendTestData+0x9c>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	8afa      	ldrh	r2, [r7, #22]
 8000412:	429a      	cmp	r2, r3
 8000414:	d3ce      	bcc.n	80003b4 <sendTestData+0x18>
			}
		}
	}
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2110      	movs	r1, #16
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <sendTestData+0x8c>)
 800041c:	f001 f99a 	bl	8001754 <HAL_GPIO_WritePin>
}
 8000420:	bf00      	nop
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	48000400 	.word	0x48000400
 800042c:	2000009c 	.word	0x2000009c
 8000430:	08005924 	.word	0x08005924
 8000434:	08005938 	.word	0x08005938
 8000438:	2000045a 	.word	0x2000045a

0800043c <sendData>:

void sendData(uint32_t *data){
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]

		for(int i = 0; i < max_amount_of_runs; i++){
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	e00f      	b.n	800046a <sendData+0x2e>
			uint32_t *ptr = &data[i];
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	613b      	str	r3, [r7, #16]
			uint16_t value = *((uint16_t*)ptr);
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	81fb      	strh	r3, [r7, #14]
			send16Bit(&value);
 800045a:	f107 030e 	add.w	r3, r7, #14
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff24 	bl	80002ac <send16Bit>
		for(int i = 0; i < max_amount_of_runs; i++){
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	3301      	adds	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <sendData+0x44>)
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	461a      	mov	r2, r3
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	4293      	cmp	r3, r2
 8000474:	dbe9      	blt.n	800044a <sendData+0xe>

	}
}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	2000045a 	.word	0x2000045a

08000484 <calculateTestTimes>:

void calculateTestTimes(struct TimeCapture *data, uint32_t *times){
 8000484:	b480      	push	{r7}
 8000486:	b08b      	sub	sp, #44	; 0x2c
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 800048e:	2300      	movs	r3, #0
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
 8000492:	e034      	b.n	80004fe <calculateTestTimes+0x7a>
		struct TimeCapture *time_ptr = &data[i];
 8000494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	61fb      	str	r3, [r7, #28]
		uint32_t *ptr = &times[i];
 800049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	683a      	ldr	r2, [r7, #0]
 80004a4:	4413      	add	r3, r2
 80004a6:	61bb      	str	r3, [r7, #24]
		uint32_t start_time = time_ptr->startTime;
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	617b      	str	r3, [r7, #20]
		uint32_t end_time = time_ptr->endTime;
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	613b      	str	r3, [r7, #16]
		uint32_t fullTime;
		if(end_time >= start_time){
 80004b4:	693a      	ldr	r2, [r7, #16]
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d304      	bcc.n	80004c6 <calculateTestTimes+0x42>
			fullTime = end_time - start_time;
 80004bc:	693a      	ldr	r2, [r7, #16]
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	623b      	str	r3, [r7, #32]
 80004c4:	e007      	b.n	80004d6 <calculateTestTimes+0x52>
		}
		else{
			fullTime = (TIM2->ARR - start_time) + end_time;
 80004c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	693a      	ldr	r2, [r7, #16]
 80004d2:	4413      	add	r3, r2
 80004d4:	623b      	str	r3, [r7, #32]
		}
		uint32_t wake_up_time = fullTime - (sleep_time * 1000);
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <calculateTestTimes+0x94>)
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e0:	fb02 f303 	mul.w	r3, r2, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	6a3b      	ldr	r3, [r7, #32]
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]
		debug_value = fullTime;
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <calculateTestTimes+0x98>)
 80004ee:	6a3b      	ldr	r3, [r7, #32]
 80004f0:	6013      	str	r3, [r2, #0]
		*ptr = wake_up_time;
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 80004f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fa:	3301      	adds	r3, #1
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <calculateTestTimes+0x9c>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000506:	4293      	cmp	r3, r2
 8000508:	dbc4      	blt.n	8000494 <calculateTestTimes+0x10>
	}
}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	372c      	adds	r7, #44	; 0x2c
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	20000458 	.word	0x20000458
 800051c:	2000000c 	.word	0x2000000c
 8000520:	2000045a 	.word	0x2000045a

08000524 <sendInterrupt>:

void sendInterrupt(){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2102      	movs	r1, #2
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <sendInterrupt+0x1c>)
 800052e:	f001 f911 	bl	8001754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	4802      	ldr	r0, [pc, #8]	; (8000540 <sendInterrupt+0x1c>)
 8000538:	f001 f90c 	bl	8001754 <HAL_GPIO_WritePin>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	48000800 	.word	0x48000800

08000544 <testUsingInterrupts>:

void testUsingInterrupts(struct TimeCapture *times){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
	while(run_test){
 8000550:	e030      	b.n	80005b4 <testUsingInterrupts+0x70>
		struct TimeCapture *time_ptr = &times[i];
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
		HAL_Delay(sleep_time);
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <testUsingInterrupts+0x84>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fe53 	bl	800120c <HAL_Delay>
		sendInterrupt();
 8000566:	f7ff ffdd 	bl	8000524 <sendInterrupt>
		while(!timeBuffReady);
 800056a:	bf00      	nop
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <testUsingInterrupts+0x88>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f083 0301 	eor.w	r3, r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <testUsingInterrupts+0x28>
		*time_ptr = timeBuff;
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <testUsingInterrupts+0x8c>)
 800057e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000582:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
		timeBuff.startTime = 0;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <testUsingInterrupts+0x8c>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <testUsingInterrupts+0x8c>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <testUsingInterrupts+0x88>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <testUsingInterrupts+0x90>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <testUsingInterrupts+0x94>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d102      	bne.n	80005b4 <testUsingInterrupts+0x70>
			run_test = false;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <testUsingInterrupts+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	while(run_test){
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <testUsingInterrupts+0x98>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1ca      	bne.n	8000552 <testUsingInterrupts+0xe>
		}
	}
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000458 	.word	0x20000458
 80005cc:	20000454 	.word	0x20000454
 80005d0:	20000444 	.word	0x20000444
 80005d4:	20000440 	.word	0x20000440
 80005d8:	2000045a 	.word	0x2000045a
 80005dc:	20000455 	.word	0x20000455

080005e0 <testUsingIntervals>:

void testUsingIntervals(struct TimeCapture *times){
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
	while(run_test){
 80005ec:	e02f      	b.n	800064e <testUsingIntervals+0x6e>
		struct TimeCapture *time_ptr = &times[i];
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
		while(!timeBuffReady);
 80005f8:	bf00      	nop
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <testUsingIntervals+0x84>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f083 0301 	eor.w	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1f8      	bne.n	80005fa <testUsingIntervals+0x1a>
		*time_ptr = timeBuff;
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	4a17      	ldr	r2, [pc, #92]	; (8000668 <testUsingIntervals+0x88>)
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
		lastBuff = timeBuff;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <testUsingIntervals+0x8c>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <testUsingIntervals+0x88>)
 800061e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000622:	e883 0003 	stmia.w	r3, {r0, r1}
		timeBuff.startTime = 0;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <testUsingIntervals+0x88>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <testUsingIntervals+0x88>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <testUsingIntervals+0x84>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <testUsingIntervals+0x90>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <testUsingIntervals+0x94>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	429a      	cmp	r2, r3
 8000646:	d102      	bne.n	800064e <testUsingIntervals+0x6e>
			run_test = false;
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <testUsingIntervals+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
	while(run_test){
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <testUsingIntervals+0x98>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1cb      	bne.n	80005ee <testUsingIntervals+0xe>
		}

	}
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000454 	.word	0x20000454
 8000668:	20000444 	.word	0x20000444
 800066c:	2000044c 	.word	0x2000044c
 8000670:	20000440 	.word	0x20000440
 8000674:	2000045a 	.word	0x2000045a
 8000678:	20000455 	.word	0x20000455

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000680:	b08f      	sub	sp, #60	; 0x3c
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fd3c 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f8e2 	bl	8000850 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800068c:	f000 f956 	bl	800093c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 fa20 	bl	8000ad4 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000694:	f000 f9f6 	bl	8000a84 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000698:	f000 f9a6 	bl	80009e8 <MX_TIM2_Init>
  MX_SPI1_Init();
 800069c:	f000 f96c 	bl	8000978 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80006a0:	4865      	ldr	r0, [pc, #404]	; (8000838 <main+0x1bc>)
 80006a2:	f003 fe91 	bl	80043c8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!finished){
 80006a6:	4b65      	ldr	r3, [pc, #404]	; (800083c <main+0x1c0>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f083 0301 	eor.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d0f8      	beq.n	80006a6 <main+0x2a>
	  if(!test_input_set){
 80006b4:	4b62      	ldr	r3, [pc, #392]	; (8000840 <main+0x1c4>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	f083 0301 	eor.w	r3, r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <main+0x4c>
	 	  	  getStartInput();
 80006c2:	f7ff fe09 	bl	80002d8 <getStartInput>
 80006c6:	e7ee      	b.n	80006a6 <main+0x2a>
	 	  }
	 	  else{
 80006c8:	466b      	mov	r3, sp
 80006ca:	607b      	str	r3, [r7, #4]
	 		  struct TimeCapture times[max_amount_of_runs];
 80006cc:	4b5d      	ldr	r3, [pc, #372]	; (8000844 <main+0x1c8>)
 80006ce:	8819      	ldrh	r1, [r3, #0]
 80006d0:	460b      	mov	r3, r1
 80006d2:	3b01      	subs	r3, #1
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
 80006d6:	b28b      	uxth	r3, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	461c      	mov	r4, r3
 80006dc:	4615      	mov	r5, r2
 80006de:	f04f 0200 	mov.w	r2, #0
 80006e2:	f04f 0300 	mov.w	r3, #0
 80006e6:	01ab      	lsls	r3, r5, #6
 80006e8:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80006ec:	01a2      	lsls	r2, r4, #6
 80006ee:	b28b      	uxth	r3, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	4698      	mov	r8, r3
 80006f4:	4691      	mov	r9, r2
 80006f6:	f04f 0200 	mov.w	r2, #0
 80006fa:	f04f 0300 	mov.w	r3, #0
 80006fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000702:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000706:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800070a:	460b      	mov	r3, r1
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	3307      	adds	r3, #7
 8000710:	08db      	lsrs	r3, r3, #3
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	ebad 0d03 	sub.w	sp, sp, r3
 8000718:	466b      	mov	r3, sp
 800071a:	3303      	adds	r3, #3
 800071c:	089b      	lsrs	r3, r3, #2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
	 		  if(test_mode == 1){
 8000722:	4b49      	ldr	r3, [pc, #292]	; (8000848 <main+0x1cc>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d141      	bne.n	80007ae <main+0x132>
 800072a:	466b      	mov	r3, sp
 800072c:	461e      	mov	r6, r3
	 			  // RUN TESTS USING ITERRUPTS
	 			  run_test = true;
 800072e:	4a47      	ldr	r2, [pc, #284]	; (800084c <main+0x1d0>)
 8000730:	2301      	movs	r3, #1
 8000732:	7013      	strb	r3, [r2, #0]
	 			  testUsingInterrupts(times);
 8000734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000736:	f7ff ff05 	bl	8000544 <testUsingInterrupts>
	 			  uint32_t test_times[max_amount_of_runs];
 800073a:	4b42      	ldr	r3, [pc, #264]	; (8000844 <main+0x1c8>)
 800073c:	8819      	ldrh	r1, [r3, #0]
 800073e:	460b      	mov	r3, r1
 8000740:	3b01      	subs	r3, #1
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
 8000744:	b28b      	uxth	r3, r1
 8000746:	2200      	movs	r2, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	61fa      	str	r2, [r7, #28]
 800074c:	f04f 0200 	mov.w	r2, #0
 8000750:	f04f 0300 	mov.w	r3, #0
 8000754:	69f8      	ldr	r0, [r7, #28]
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	69b8      	ldr	r0, [r7, #24]
 800075a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800075e:	69b8      	ldr	r0, [r7, #24]
 8000760:	0142      	lsls	r2, r0, #5
 8000762:	b28b      	uxth	r3, r1
 8000764:	2200      	movs	r2, #0
 8000766:	469a      	mov	sl, r3
 8000768:	4693      	mov	fp, r2
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000776:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800077a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800077e:	460b      	mov	r3, r1
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	3307      	adds	r3, #7
 8000784:	08db      	lsrs	r3, r3, #3
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	ebad 0d03 	sub.w	sp, sp, r3
 800078c:	466b      	mov	r3, sp
 800078e:	3303      	adds	r3, #3
 8000790:	089b      	lsrs	r3, r3, #2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	623b      	str	r3, [r7, #32]
	 			  calculateTestTimes(times,test_times);
 8000796:	6a39      	ldr	r1, [r7, #32]
 8000798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800079a:	f7ff fe73 	bl	8000484 <calculateTestTimes>
	 			  sendData(test_times);
 800079e:	6a38      	ldr	r0, [r7, #32]
 80007a0:	f7ff fe4c 	bl	800043c <sendData>
	 			  finished = true;
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <main+0x1c0>)
 80007a6:	2301      	movs	r3, #1
 80007a8:	7013      	strb	r3, [r2, #0]
 80007aa:	46b5      	mov	sp, r6
 80007ac:	e041      	b.n	8000832 <main+0x1b6>
	 		  }
	 		  else{
 80007ae:	466b      	mov	r3, sp
 80007b0:	461e      	mov	r6, r3
	 			  run_test = true;
 80007b2:	4a26      	ldr	r2, [pc, #152]	; (800084c <main+0x1d0>)
 80007b4:	2301      	movs	r3, #1
 80007b6:	7013      	strb	r3, [r2, #0]
	 			  testUsingIntervals(times);
 80007b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007ba:	f7ff ff11 	bl	80005e0 <testUsingIntervals>
	 			  uint32_t test_times[max_amount_of_runs];
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <main+0x1c8>)
 80007c0:	8819      	ldrh	r1, [r3, #0]
 80007c2:	460b      	mov	r3, r1
 80007c4:	3b01      	subs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c8:	b28b      	uxth	r3, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	617a      	str	r2, [r7, #20]
 80007d0:	f04f 0200 	mov.w	r2, #0
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	6978      	ldr	r0, [r7, #20]
 80007da:	0143      	lsls	r3, r0, #5
 80007dc:	6938      	ldr	r0, [r7, #16]
 80007de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007e2:	6938      	ldr	r0, [r7, #16]
 80007e4:	0142      	lsls	r2, r0, #5
 80007e6:	b28b      	uxth	r3, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	60fa      	str	r2, [r7, #12]
 80007ee:	f04f 0200 	mov.w	r2, #0
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	0143      	lsls	r3, r0, #5
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000800:	68b8      	ldr	r0, [r7, #8]
 8000802:	0142      	lsls	r2, r0, #5
 8000804:	460b      	mov	r3, r1
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	3307      	adds	r3, #7
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	ebad 0d03 	sub.w	sp, sp, r3
 8000812:	466b      	mov	r3, sp
 8000814:	3303      	adds	r3, #3
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
	 			  calculateTestTimes(times, test_times);
 800081c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800081e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000820:	f7ff fe30 	bl	8000484 <calculateTestTimes>
	 			  sendTestData(test_times);
 8000824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000826:	f7ff fdb9 	bl	800039c <sendTestData>
	 			  finished = true;
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <main+0x1c0>)
 800082c:	2301      	movs	r3, #1
 800082e:	7013      	strb	r3, [r2, #0]
 8000830:	46b5      	mov	sp, r6
 8000832:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  if(!finished){
 8000836:	e736      	b.n	80006a6 <main+0x2a>
 8000838:	20000100 	.word	0x20000100
 800083c:	20000456 	.word	0x20000456
 8000840:	2000045c 	.word	0x2000045c
 8000844:	2000045a 	.word	0x2000045a
 8000848:	20000008 	.word	0x20000008
 800084c:	20000455 	.word	0x20000455

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b09a      	sub	sp, #104	; 0x68
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2248      	movs	r2, #72	; 0x48
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f004 f888 	bl	8004974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000884:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	f023 0303 	bic.w	r3, r3, #3
 8000890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800089a:	f001 f88f 	bl	80019bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fcbe 	bl	8000220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <SystemClock_Config+0xe8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008ac:	4a22      	ldr	r2, [pc, #136]	; (8000938 <SystemClock_Config+0xe8>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <SystemClock_Config+0xe8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80008c0:	2327      	movs	r3, #39	; 0x27
 80008c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008ca:	2301      	movs	r3, #1
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008dc:	2300      	movs	r3, #0
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008e0:	2360      	movs	r3, #96	; 0x60
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fbe1 	bl	80020b4 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008f8:	f000 f9ac 	bl	8000c54 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008fc:	236f      	movs	r3, #111	; 0x6f
 80008fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000900:	2302      	movs	r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2101      	movs	r1, #1
 800091c:	4618      	mov	r0, r3
 800091e:	f001 ff3d 	bl	800279c <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000928:	f000 f994 	bl	8000c54 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800092c:	f002 fccc 	bl	80032c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000930:	bf00      	nop
 8000932:	3768      	adds	r7, #104	; 0x68
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	58000400 	.word	0x58000400

0800093c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2250      	movs	r2, #80	; 0x50
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f004 f813 	bl	8004974 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000958:	2300      	movs	r3, #0
 800095a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fb3c 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800096a:	f000 f973 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800096e:	bf00      	nop
 8000970:	3750      	adds	r7, #80	; 0x50
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_SPI1_Init+0x68>)
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <MX_SPI1_Init+0x6c>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SPI1_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_SPI1_Init+0x68>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SPI1_Init+0x68>)
 8000990:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000994:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_SPI1_Init+0x68>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_SPI1_Init+0x68>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009bc:	2207      	movs	r2, #7
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009ce:	f002 fd92 	bl	80034f6 <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80009d8:	f000 f93c 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000009c 	.word	0x2000009c
 80009e4:	40013000 	.word	0x40013000

080009e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a10:	221f      	movs	r2, #31
 8000a12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a30:	f003 fc72 	bl	8004318 <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a3a:	f000 f90b 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a4c:	f003 fd02 	bl	8004454 <HAL_TIM_ConfigClockSource>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a56:	f000 f8fd 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a68:	f003 febe 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a72:	f000 f8ef 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000100 	.word	0x20000100

08000a84 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_USB_PCD_Init+0x48>)
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <MX_USB_PCD_Init+0x4c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_USB_PCD_Init+0x48>)
 8000a90:	2208      	movs	r2, #8
 8000a92:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_USB_PCD_Init+0x48>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USB_PCD_Init+0x48>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_USB_PCD_Init+0x48>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USB_PCD_Init+0x48>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_USB_PCD_Init+0x48>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USB_PCD_Init+0x48>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_USB_PCD_Init+0x48>)
 8000aba:	f000 fe7b 	bl	80017b4 <HAL_PCD_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ac4:	f000 f8c6 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000014c 	.word	0x2000014c
 8000ad0:	40006800 	.word	0x40006800

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae8:	2004      	movs	r0, #4
 8000aea:	f7ff fbaf 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fbac 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff fba9 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	2008      	movs	r0, #8
 8000afc:	f7ff fba6 	bl	800024c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2102      	movs	r1, #2
 8000b04:	482c      	ldr	r0, [pc, #176]	; (8000bb8 <MX_GPIO_Init+0xe4>)
 8000b06:	f000 fe25 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2133      	movs	r1, #51	; 0x33
 8000b0e:	482b      	ldr	r0, [pc, #172]	; (8000bbc <MX_GPIO_Init+0xe8>)
 8000b10:	f000 fe20 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TestStartInput_Pin */
  GPIO_InitStruct.Pin = TestStartInput_Pin;
 8000b14:	2301      	movs	r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TestStartInput_GPIO_Port, &GPIO_InitStruct);
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4824      	ldr	r0, [pc, #144]	; (8000bb8 <MX_GPIO_Init+0xe4>)
 8000b28:	f000 fca4 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupter_Pin */
  GPIO_InitStruct.Pin = Interrupter_Pin;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b34:	2302      	movs	r3, #2
 8000b36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Interrupter_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	481d      	ldr	r0, [pc, #116]	; (8000bb8 <MX_GPIO_Init+0xe4>)
 8000b42:	f000 fc97 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : TestStopInput_Pin */
  GPIO_InitStruct.Pin = TestStopInput_Pin;
 8000b46:	2304      	movs	r3, #4
 8000b48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b50:	2302      	movs	r3, #2
 8000b52:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TestStopInput_GPIO_Port, &GPIO_InitStruct);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <MX_GPIO_Init+0xe4>)
 8000b5a:	f000 fc8b 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TransmitReady_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin;
 8000b5e:	2333      	movs	r3, #51	; 0x33
 8000b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	4812      	ldr	r0, [pc, #72]	; (8000bbc <MX_GPIO_Init+0xe8>)
 8000b74:	f000 fc7e 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_GPIO_Init+0xec>)
 8000b8a:	f000 fc73 	bl	8001474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2006      	movs	r0, #6
 8000b94:	f000 fc39 	bl	800140a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b98:	2006      	movs	r0, #6
 8000b9a:	f000 fc50 	bl	800143e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2008      	movs	r0, #8
 8000ba4:	f000 fc31 	bl	800140a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ba8:	2008      	movs	r0, #8
 8000baa:	f000 fc48 	bl	800143e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000c00 	.word	0x48000c00

08000bc4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == TestStartInput_Pin){
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d112      	bne.n	8000bfa <HAL_GPIO_EXTI_Callback+0x36>
		timeBuff.startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bdc:	6013      	str	r3, [r2, #0]

		if(captures < max_amount_of_runs*2){
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x84>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x88>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	429a      	cmp	r2, r3
 8000bec:	da05      	bge.n	8000bfa <HAL_GPIO_EXTI_Callback+0x36>
			captures++;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bf8:	801a      	strh	r2, [r3, #0]
		}

	}

	if(GPIO_Pin == TestStopInput_Pin){
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d119      	bne.n	8000c34 <HAL_GPIO_EXTI_Callback+0x70>
		timeBuff.endTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c08:	6053      	str	r3, [r2, #4]
		if(timeBuff.endTime != 0){
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <HAL_GPIO_EXTI_Callback+0x54>
		timeBuffReady = true;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
		}
		if(captures < max_amount_of_runs * 2){
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x88>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	429a      	cmp	r2, r3
 8000c26:	da05      	bge.n	8000c34 <HAL_GPIO_EXTI_Callback+0x70>
			captures++;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c32:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	20000100 	.word	0x20000100
 8000c44:	20000444 	.word	0x20000444
 8000c48:	20000440 	.word	0x20000440
 8000c4c:	2000045a 	.word	0x2000045a
 8000c50:	20000454 	.word	0x20000454

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>

08000c5e <LL_AHB2_GRP1_EnableClock>:
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b085      	sub	sp, #20
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b085      	sub	sp, #20
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_SPI_MspInit+0x5c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d117      	bne.n	8000d56 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d2a:	f7ff ffca 	bl	8000cc2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff ff95 	bl	8000c5e <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d34:	23f0      	movs	r3, #240	; 0xf0
 8000d36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d44:	2305      	movs	r3, #5
 8000d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f000 fb8f 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013000 	.word	0x40013000

08000d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d74:	d102      	bne.n	8000d7c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d76:	2001      	movs	r0, #1
 8000d78:	f7ff ff8a 	bl	8000c90 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b09c      	sub	sp, #112	; 0x70
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2250      	movs	r2, #80	; 0x50
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fde5 	bl	8004974 <memset>
  if(hpcd->Instance==USB)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <HAL_PCD_MspInit+0xa8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d136      	bne.n	8000e22 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000dba:	2318      	movs	r3, #24
 8000dbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000dca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dd4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000dd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dda:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 f8fb 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000dec:	f7ff ff32 	bl	8000c54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff ff34 	bl	8000c5e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000df6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e08:	230a      	movs	r3, #10
 8000e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f000 fb2d 	bl	8001474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e1a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e1e:	f7ff ff37 	bl	8000c90 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3770      	adds	r7, #112	; 0x70
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40006800 	.word	0x40006800

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f99a 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TestStartInput_Pin);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 fc7b 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TestStopInput_Pin);
 8000e96:	2004      	movs	r0, #4
 8000e98:	f000 fc74 	bl	8001784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf0      	blt.n	8000eb2 <_read+0x12>
  }

  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e009      	b.n	8000f00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	60ba      	str	r2, [r7, #8]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf1      	blt.n	8000eec <_write+0x12>
  }
  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_close>:

int _close(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f003 fcb8 	bl	8004920 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20030000 	.word	0x20030000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	20000460 	.word	0x20000460
 8000fe4:	20000478 	.word	0x20000478

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <SystemInit+0x98>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a23      	ldr	r2, [pc, #140]	; (8001080 <SystemInit+0x98>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001010:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001014:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <SystemInit+0x9c>)
 8001022:	4013      	ands	r3, r2
 8001024:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800102e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001032:	f023 0305 	bic.w	r3, r3, #5
 8001036:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800103a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001046:	f023 0301 	bic.w	r3, r3, #1
 800104a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800104e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001052:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <SystemInit+0xa0>)
 8001054:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <SystemInit+0xa0>)
 800105c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800105e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800106e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	faf6fefb 	.word	0xfaf6fefb
 8001088:	22041000 	.word	0x22041000

0800108c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800108c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001090:	3304      	adds	r3, #4

08001092 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001092:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001094:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001096:	d3f9      	bcc.n	800108c <CopyDataInit>
  bx lr
 8001098:	4770      	bx	lr

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800109a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800109c:	3004      	adds	r0, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800109e:	4288      	cmp	r0, r1
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>
  bx lr
 80010a2:	4770      	bx	lr

080010a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a8:	f7ff ff9e 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <LoopForever+0x6>)
 80010ae:	490c      	ldr	r1, [pc, #48]	; (80010e0 <LoopForever+0xa>)
 80010b0:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <LoopForever+0xe>)
 80010b2:	2300      	movs	r3, #0
 80010b4:	f7ff ffed 	bl	8001092 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <LoopForever+0x12>)
 80010ba:	490c      	ldr	r1, [pc, #48]	; (80010ec <LoopForever+0x16>)
 80010bc:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <LoopForever+0x1a>)
 80010be:	2300      	movs	r3, #0
 80010c0:	f7ff ffe7 	bl	8001092 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <LoopForever+0x1e>)
 80010c6:	490c      	ldr	r1, [pc, #48]	; (80010f8 <LoopForever+0x22>)
 80010c8:	2300      	movs	r3, #0
 80010ca:	f7ff ffe8 	bl	800109e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ce:	f003 fc2d 	bl	800492c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010d2:	f7ff fad3 	bl	800067c <main>

080010d6 <LoopForever>:

LoopForever:
  b LoopForever
 80010d6:	e7fe      	b.n	80010d6 <LoopForever>
  ldr   r0, =_estack
 80010d8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000080 	.word	0x20000080
 80010e4:	08005a8c 	.word	0x08005a8c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80010e8:	20030000 	.word	0x20030000
 80010ec:	20030000 	.word	0x20030000
 80010f0:	08005b04 	.word	0x08005b04
  INIT_BSS _sbss, _ebss
 80010f4:	20000080 	.word	0x20000080
 80010f8:	20000478 	.word	0x20000478

080010fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_Init+0x3c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_Init+0x3c>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
 8001118:	f000 f96c 	bl	80013f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f80f 	bl	8001140 <HAL_InitTick>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	e001      	b.n	8001132 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800112e:	f7ff fde1 	bl	8000cf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001132:	79fb      	ldrb	r3, [r7, #7]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	58004000 	.word	0x58004000

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_InitTick+0x6c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d024      	beq.n	800119e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001154:	f001 fcce 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8001158:	4602      	mov	r2, r0
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_InitTick+0x6c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	fbb3 f3f1 	udiv	r3, r3, r1
 8001168:	fbb2 f3f3 	udiv	r3, r2, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f974 	bl	800145a <HAL_SYSTICK_Config>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10f      	bne.n	8001198 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b0f      	cmp	r3, #15
 800117c:	d809      	bhi.n	8001192 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117e:	2200      	movs	r2, #0
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001186:	f000 f940 	bl	800140a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <HAL_InitTick+0x70>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e007      	b.n	80011a2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e004      	b.n	80011a2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e001      	b.n	80011a2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000018 	.word	0x20000018
 80011b0:	20000014 	.word	0x20000014

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000018 	.word	0x20000018
 80011d8:	20000464 	.word	0x20000464

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000464 	.word	0x20000464

080011f4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTickPrio+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000014 	.word	0x20000014

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffe2 	bl	80011dc <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffd2 	bl	80011dc <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000018 	.word	0x20000018

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4907      	ldr	r1, [pc, #28]	; (80012f0 <__NVIC_EnableIRQ+0x38>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	; (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	; (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43d9      	mvns	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	4313      	orrs	r3, r2
         );
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c0:	d301      	bcc.n	80013c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00f      	b.n	80013e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <SysTick_Config+0x40>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ce:	210f      	movs	r1, #15
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d4:	f7ff ff8e 	bl	80012f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <SysTick_Config+0x40>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <SysTick_Config+0x40>)
 80013e0:	2207      	movs	r2, #7
 80013e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff29 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff40 	bl	800129c <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff90 	bl	8001348 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5f 	bl	80012f4 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff33 	bl	80012b8 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa4 	bl	80013b0 <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e14c      	b.n	800171e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 813e 	beq.w	8001718 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d005      	beq.n	80014b4 <HAL_GPIO_Init+0x40>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d130      	bne.n	8001516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ea:	2201      	movs	r2, #1
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f003 0201 	and.w	r2, r3, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b03      	cmp	r3, #3
 8001520:	d017      	beq.n	8001552 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d123      	bne.n	80015a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	6939      	ldr	r1, [r7, #16]
 80015a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0203 	and.w	r2, r3, #3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8098 	beq.w	8001718 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015e8:	4a54      	ldr	r2, [pc, #336]	; (800173c <HAL_GPIO_Init+0x2c8>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001612:	d019      	beq.n	8001648 <HAL_GPIO_Init+0x1d4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a4a      	ldr	r2, [pc, #296]	; (8001740 <HAL_GPIO_Init+0x2cc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d013      	beq.n	8001644 <HAL_GPIO_Init+0x1d0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a49      	ldr	r2, [pc, #292]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00d      	beq.n	8001640 <HAL_GPIO_Init+0x1cc>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a48      	ldr	r2, [pc, #288]	; (8001748 <HAL_GPIO_Init+0x2d4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_Init+0x1c8>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_GPIO_Init+0x2d8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_GPIO_Init+0x1c4>
 8001634:	2304      	movs	r3, #4
 8001636:	e008      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001638:	2307      	movs	r3, #7
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 800163c:	2303      	movs	r3, #3
 800163e:	e004      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001640:	2302      	movs	r3, #2
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001648:	2300      	movs	r3, #0
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800165a:	4938      	ldr	r1, [pc, #224]	; (800173c <HAL_GPIO_Init+0x2c8>)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <HAL_GPIO_Init+0x2dc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800168c:	4a30      	ldr	r2, [pc, #192]	; (8001750 <HAL_GPIO_Init+0x2dc>)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_GPIO_Init+0x2dc>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b6:	4a26      	ldr	r2, [pc, #152]	; (8001750 <HAL_GPIO_Init+0x2dc>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_GPIO_Init+0x2dc>)
 80016be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016e2:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <HAL_GPIO_Init+0x2dc>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_GPIO_Init+0x2dc>)
 80016ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001710:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_GPIO_Init+0x2dc>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f aeab 	bne.w	8001484 <HAL_GPIO_Init+0x10>
  }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40010000 	.word	0x40010000
 8001740:	48000400 	.word	0x48000400
 8001744:	48000800 	.word	0x48000800
 8001748:	48000c00 	.word	0x48000c00
 800174c:	48001000 	.word	0x48001000
 8001750:	58000800 	.word	0x58000800

08001754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	4613      	mov	r3, r2
 8001762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001764:	787b      	ldrb	r3, [r7, #1]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001770:	e002      	b.n	8001778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fa0e 	bl	8000bc4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	58000800 	.word	0x58000800

080017b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	b08b      	sub	sp, #44	; 0x2c
 80017b8:	af06      	add	r7, sp, #24
 80017ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0cb      	b.n	800195e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fad2 	bl	8000d84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2203      	movs	r2, #3
 80017e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 f85b 	bl	80048a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e040      	b.n	800187a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	3301      	adds	r3, #1
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3303      	adds	r3, #3
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3338      	adds	r3, #56	; 0x38
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	333c      	adds	r3, #60	; 0x3c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3340      	adds	r3, #64	; 0x40
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	3301      	adds	r3, #1
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	d3b9      	bcc.n	80017f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e044      	b.n	8001914 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	f203 1369 	addw	r3, r3, #361	; 0x169
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	3301      	adds	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3b5      	bcc.n	800188a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	687e      	ldr	r6, [r7, #4]
 8001926:	466d      	mov	r5, sp
 8001928:	f106 0410 	add.w	r4, r6, #16
 800192c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	602b      	str	r3, [r5, #0]
 8001934:	1d33      	adds	r3, r6, #4
 8001936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f002 ffd0 	bl	80048de <USB_DevInit>

  hpcd->USB_Address = 0U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f805 	bl	8001966 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001966 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800198a:	b29b      	uxth	r3, r3
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800199e:	b29b      	uxth	r3, r3
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	58000400 	.word	0x58000400

080019dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	58000400 	.word	0x58000400

080019f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a0a:	d101      	bne.n	8001a10 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_RCC_HSE_Enable>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_RCC_HSE_Disable>:
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_RCC_HSE_IsReady>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a6a:	d101      	bne.n	8001a70 <LL_RCC_HSE_IsReady+0x18>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <LL_RCC_HSE_IsReady+0x1a>
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_RCC_HSI_Enable>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_RCC_HSI_Disable>:
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aac:	6013      	str	r3, [r2, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_RCC_HSI_IsReady>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aca:	d101      	bne.n	8001ad0 <LL_RCC_HSI_IsReady+0x18>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <LL_RCC_HSI_IsReady+0x1a>
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_HSI_SetCalibTrimming>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	061b      	lsls	r3, r3, #24
 8001af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_RCC_HSI48_Enable>:
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_RCC_HSI48_Disable>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_HSI48_IsReady>:
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d101      	bne.n	8001b62 <LL_RCC_HSI48_IsReady+0x18>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_RCC_HSI48_IsReady+0x1a>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_LSE_Enable>:
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_RCC_LSE_Disable>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_RCC_LSE_EnableBypass>:
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_LSE_DisableBypass>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d101      	bne.n	8001c0e <LL_RCC_LSE_IsReady+0x18>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_RCC_LSE_IsReady+0x1a>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d101      	bne.n	8001c76 <LL_RCC_LSI1_IsReady+0x18>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_RCC_LSI1_IsReady+0x1a>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d101      	bne.n	8001cde <LL_RCC_LSI2_IsReady+0x18>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_RCC_LSI2_IsReady+0x1a>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6013      	str	r3, [r2, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d101      	bne.n	8001d6a <LL_RCC_MSI_IsReady+0x16>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <LL_RCC_MSI_IsReady+0x18>
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2bb0      	cmp	r3, #176	; 0xb0
 8001db4:	d901      	bls.n	8001dba <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001db6:	23b0      	movs	r3, #176	; 0xb0
 8001db8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001dba:	687b      	ldr	r3, [r7, #4]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 0203 	bic.w	r2, r3, #3
 8001e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e96:	f023 020f 	bic.w	r2, r3, #15
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f68:	6013      	str	r3, [r2, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f86:	d101      	bne.n	8001f8c <LL_RCC_PLL_IsReady+0x18>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <LL_RCC_PLL_IsReady+0x1a>
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0303 	and.w	r3, r3, #3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d101      	bne.n	8002012 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002032:	d101      	bne.n	8002038 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002058:	d101      	bne.n	800205e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800207c:	d101      	bne.n	8002082 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020a0:	d101      	bne.n	80020a6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08d      	sub	sp, #52	; 0x34
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e363      	b.n	800278e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 808d 	beq.w	80021ee <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d4:	f7ff fea1 	bl	8001e1a <LL_RCC_GetSysClkSource>
 80020d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020da:	f7ff ff82 	bl	8001fe2 <LL_RCC_PLL_GetMainSource>
 80020de:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x3e>
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d147      	bne.n	800217c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d144      	bne.n	800217c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e347      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002102:	f7ff fe4c 	bl	8001d9e <LL_RCC_MSI_GetRange>
 8002106:	4603      	mov	r3, r0
 8002108:	429c      	cmp	r4, r3
 800210a:	d914      	bls.n	8002136 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fd03 	bl	8002b1c <RCC_SetFlashLatencyFromMSIRange>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e336      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fe26 	bl	8001d76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fe4a 	bl	8001dc8 <LL_RCC_MSI_SetCalibTrimming>
 8002134:	e013      	b.n	800215e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fe1b 	bl	8001d76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fe3f 	bl	8001dc8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fce4 	bl	8002b1c <RCC_SetFlashLatencyFromMSIRange>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e317      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800215e:	f000 fcc9 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002162:	4603      	mov	r3, r0
 8002164:	4aa4      	ldr	r2, [pc, #656]	; (80023f8 <HAL_RCC_OscConfig+0x344>)
 8002166:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002168:	4ba4      	ldr	r3, [pc, #656]	; (80023fc <HAL_RCC_OscConfig+0x348>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe ffe7 	bl	8001140 <HAL_InitTick>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d039      	beq.n	80021ec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e308      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01e      	beq.n	80021c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002184:	f7ff fdc8 	bl	8001d18 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002188:	f7ff f828 	bl	80011dc <HAL_GetTick>
 800218c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002190:	f7ff f824 	bl	80011dc <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e2f5      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80021a2:	f7ff fdd7 	bl	8001d54 <LL_RCC_MSI_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f1      	beq.n	8002190 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fde0 	bl	8001d76 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fe04 	bl	8001dc8 <LL_RCC_MSI_SetCalibTrimming>
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021c2:	f7ff fdb8 	bl	8001d36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c6:	f7ff f809 	bl	80011dc <HAL_GetTick>
 80021ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ce:	f7ff f805 	bl	80011dc <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e2d6      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80021e0:	f7ff fdb8 	bl	8001d54 <LL_RCC_MSI_IsReady>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f1      	bne.n	80021ce <HAL_RCC_OscConfig+0x11a>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021ec:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d047      	beq.n	800228a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fa:	f7ff fe0e 	bl	8001e1a <LL_RCC_GetSysClkSource>
 80021fe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002200:	f7ff feef 	bl	8001fe2 <LL_RCC_PLL_GetMainSource>
 8002204:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d005      	beq.n	8002218 <HAL_RCC_OscConfig+0x164>
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d108      	bne.n	8002224 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d134      	bne.n	800228a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e2b4      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d102      	bne.n	8002234 <HAL_RCC_OscConfig+0x180>
 800222e:	f7ff fbf5 	bl	8001a1c <LL_RCC_HSE_Enable>
 8002232:	e001      	b.n	8002238 <HAL_RCC_OscConfig+0x184>
 8002234:	f7ff fc01 	bl	8001a3a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe ffcc 	bl	80011dc <HAL_GetTick>
 8002244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe ffc8 	bl	80011dc <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e299      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800225a:	f7ff fbfd 	bl	8001a58 <LL_RCC_HSE_IsReady>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f1      	beq.n	8002248 <HAL_RCC_OscConfig+0x194>
 8002264:	e011      	b.n	800228a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7fe ffb9 	bl	80011dc <HAL_GetTick>
 800226a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226e:	f7fe ffb5 	bl	80011dc <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	; 0x64
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e286      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002280:	f7ff fbea 	bl	8001a58 <LL_RCC_HSE_IsReady>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f1      	bne.n	800226e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d04c      	beq.n	8002330 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002296:	f7ff fdc0 	bl	8001e1a <LL_RCC_GetSysClkSource>
 800229a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800229c:	f7ff fea1 	bl	8001fe2 <LL_RCC_PLL_GetMainSource>
 80022a0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_OscConfig+0x200>
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d10e      	bne.n	80022cc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d10b      	bne.n	80022cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e266      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fc09 	bl	8001adc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022ca:	e031      	b.n	8002330 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d019      	beq.n	8002308 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	f7ff fbd2 	bl	8001a7c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe ff80 	bl	80011dc <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe ff7c 	bl	80011dc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e24d      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022f2:	f7ff fbe1 	bl	8001ab8 <LL_RCC_HSI_IsReady>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f1      	beq.n	80022e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fbeb 	bl	8001adc <LL_RCC_HSI_SetCalibTrimming>
 8002306:	e013      	b.n	8002330 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002308:	f7ff fbc7 	bl	8001a9a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe ff66 	bl	80011dc <HAL_GetTick>
 8002310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002314:	f7fe ff62 	bl	80011dc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e233      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002326:	f7ff fbc7 	bl	8001ab8 <LL_RCC_HSI_IsReady>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f1      	bne.n	8002314 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a3 	beq.w	8002490 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d076      	beq.n	8002440 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d046      	beq.n	80023ec <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800235e:	f7ff fc7e 	bl	8001c5e <LL_RCC_LSI1_IsReady>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d113      	bne.n	8002390 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002368:	f7ff fc57 	bl	8001c1a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800236c:	f7fe ff36 	bl	80011dc <HAL_GetTick>
 8002370:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002374:	f7fe ff32 	bl	80011dc <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e203      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002386:	f7ff fc6a 	bl	8001c5e <LL_RCC_LSI1_IsReady>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f1      	beq.n	8002374 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002390:	f7ff fc77 	bl	8001c82 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe ff22 	bl	80011dc <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800239c:	f7fe ff1e 	bl	80011dc <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1ef      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80023ae:	f7ff fc8a 	bl	8001cc6 <LL_RCC_LSI2_IsReady>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f1      	beq.n	800239c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fc94 	bl	8001cea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80023c2:	f7ff fc3b 	bl	8001c3c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe ff09 	bl	80011dc <HAL_GetTick>
 80023ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023ce:	f7fe ff05 	bl	80011dc <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1d6      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023e0:	f7ff fc3d 	bl	8001c5e <LL_RCC_LSI1_IsReady>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f1      	bne.n	80023ce <HAL_RCC_OscConfig+0x31a>
 80023ea:	e051      	b.n	8002490 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023ec:	f7ff fc15 	bl	8001c1a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fef4 	bl	80011dc <HAL_GetTick>
 80023f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023f6:	e00c      	b.n	8002412 <HAL_RCC_OscConfig+0x35e>
 80023f8:	20000010 	.word	0x20000010
 80023fc:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002400:	f7fe feec 	bl	80011dc <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e1bd      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002412:	f7ff fc24 	bl	8001c5e <LL_RCC_LSI1_IsReady>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f1      	beq.n	8002400 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800241c:	f7ff fc42 	bl	8001ca4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002422:	f7fe fedb 	bl	80011dc <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b03      	cmp	r3, #3
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1ac      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002434:	f7ff fc47 	bl	8001cc6 <LL_RCC_LSI2_IsReady>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f1      	bne.n	8002422 <HAL_RCC_OscConfig+0x36e>
 800243e:	e027      	b.n	8002490 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002440:	f7ff fc30 	bl	8001ca4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7fe feca 	bl	80011dc <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800244c:	f7fe fec6 	bl	80011dc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b03      	cmp	r3, #3
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e197      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800245e:	f7ff fc32 	bl	8001cc6 <LL_RCC_LSI2_IsReady>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f1      	bne.n	800244c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002468:	f7ff fbe8 	bl	8001c3c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe feb6 	bl	80011dc <HAL_GetTick>
 8002470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002474:	f7fe feb2 	bl	80011dc <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e183      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002486:	f7ff fbea 	bl	8001c5e <LL_RCC_LSI1_IsReady>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f1      	bne.n	8002474 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d05b      	beq.n	8002554 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249c:	4ba7      	ldr	r3, [pc, #668]	; (800273c <HAL_RCC_OscConfig+0x688>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d114      	bne.n	80024d2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80024a8:	f7ff fa88 	bl	80019bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fe96 	bl	80011dc <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b4:	f7fe fe92 	bl	80011dc <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e163      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	4b9d      	ldr	r3, [pc, #628]	; (800273c <HAL_RCC_OscConfig+0x688>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_OscConfig+0x42c>
 80024da:	f7ff fb48 	bl	8001b6e <LL_RCC_LSE_Enable>
 80024de:	e00c      	b.n	80024fa <HAL_RCC_OscConfig+0x446>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d104      	bne.n	80024f2 <HAL_RCC_OscConfig+0x43e>
 80024e8:	f7ff fb63 	bl	8001bb2 <LL_RCC_LSE_EnableBypass>
 80024ec:	f7ff fb3f 	bl	8001b6e <LL_RCC_LSE_Enable>
 80024f0:	e003      	b.n	80024fa <HAL_RCC_OscConfig+0x446>
 80024f2:	f7ff fb4d 	bl	8001b90 <LL_RCC_LSE_Disable>
 80024f6:	f7ff fb6d 	bl	8001bd4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d014      	beq.n	800252c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7fe fe6b 	bl	80011dc <HAL_GetTick>
 8002506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fe fe67 	bl	80011dc <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	; 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e136      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002520:	f7ff fb69 	bl	8001bf6 <LL_RCC_LSE_IsReady>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0ef      	beq.n	800250a <HAL_RCC_OscConfig+0x456>
 800252a:	e013      	b.n	8002554 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe fe56 	bl	80011dc <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe fe52 	bl	80011dc <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e121      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800254a:	f7ff fb54 	bl	8001bf6 <LL_RCC_LSE_IsReady>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ef      	bne.n	8002534 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02c      	beq.n	80025ba <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d014      	beq.n	8002592 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002568:	f7ff facd 	bl	8001b06 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7fe fe36 	bl	80011dc <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002574:	f7fe fe32 	bl	80011dc <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e103      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002586:	f7ff fae0 	bl	8001b4a <LL_RCC_HSI48_IsReady>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f1      	beq.n	8002574 <HAL_RCC_OscConfig+0x4c0>
 8002590:	e013      	b.n	80025ba <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002592:	f7ff fac9 	bl	8001b28 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7fe fe21 	bl	80011dc <HAL_GetTick>
 800259a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800259e:	f7fe fe1d 	bl	80011dc <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0ee      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80025b0:	f7ff facb 	bl	8001b4a <LL_RCC_HSI48_IsReady>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f1      	bne.n	800259e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80e4 	beq.w	800278c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c4:	f7ff fc29 	bl	8001e1a <LL_RCC_GetSysClkSource>
 80025c8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	f040 80b4 	bne.w	8002744 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0203 	and.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d123      	bne.n	8002632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d11c      	bne.n	8002632 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d114      	bne.n	8002632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d10d      	bne.n	8002632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d05d      	beq.n	80026ee <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b0c      	cmp	r3, #12
 8002636:	d058      	beq.n	80026ea <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0a1      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800264a:	f7ff fc84 	bl	8001f56 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800264e:	f7fe fdc5 	bl	80011dc <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fdc1 	bl	80011dc <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e092      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ef      	bne.n	8002656 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_RCC_OscConfig+0x68c>)
 800267e:	4013      	ands	r3, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002688:	4311      	orrs	r1, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800268e:	0212      	lsls	r2, r2, #8
 8002690:	4311      	orrs	r1, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026a2:	430a      	orrs	r2, r1
 80026a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026ac:	f7ff fc44 	bl	8001f38 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026c0:	f7fe fd8c 	bl	80011dc <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fd88 	bl	80011dc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e059      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ef      	beq.n	80026c8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e8:	e050      	b.n	800278c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e04f      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d147      	bne.n	800278c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026fc:	f7ff fc1c 	bl	8001f38 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002710:	f7fe fd64 	bl	80011dc <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fd60 	bl	80011dc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e031      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ef      	beq.n	8002718 <HAL_RCC_OscConfig+0x664>
 8002738:	e028      	b.n	800278c <HAL_RCC_OscConfig+0x6d8>
 800273a:	bf00      	nop
 800273c:	58000400 	.word	0x58000400
 8002740:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d01e      	beq.n	8002788 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	f7ff fc04 	bl	8001f56 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe fd45 	bl	80011dc <HAL_GetTick>
 8002752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002756:	f7fe fd41 	bl	80011dc <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e012      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ef      	bne.n	8002756 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_OscConfig+0x6e4>)
 8002782:	4013      	ands	r3, r2
 8002784:	60cb      	str	r3, [r1, #12]
 8002786:	e001      	b.n	800278c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3734      	adds	r7, #52	; 0x34
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	bf00      	nop
 8002798:	eefefffc 	.word	0xeefefffc

0800279c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e12d      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b0:	4b98      	ldr	r3, [pc, #608]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d91b      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b95      	ldr	r3, [pc, #596]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	4993      	ldr	r1, [pc, #588]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ce:	f7fe fd05 	bl	80011dc <HAL_GetTick>
 80027d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027d6:	f7fe fd01 	bl	80011dc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e111      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e8:	4b8a      	ldr	r3, [pc, #552]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d1ef      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fb13 	bl	8001e32 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800280c:	f7fe fce6 	bl	80011dc <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002814:	f7fe fce2 	bl	80011dc <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0f2      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002826:	f7ff fbe8 	bl	8001ffa <LL_RCC_IsActiveFlag_HPRE>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f1      	beq.n	8002814 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fb0a 	bl	8001e5a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002846:	f7fe fcc9 	bl	80011dc <HAL_GetTick>
 800284a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800284e:	f7fe fcc5 	bl	80011dc <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0d5      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002860:	f7ff fbdd 	bl	800201e <LL_RCC_IsActiveFlag_C2HPRE>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f1      	beq.n	800284e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fb03 	bl	8001e86 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002880:	f7fe fcac 	bl	80011dc <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002888:	f7fe fca8 	bl	80011dc <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0b8      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800289a:	f7ff fbd3 	bl	8002044 <LL_RCC_IsActiveFlag_SHDHPRE>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f1      	beq.n	8002888 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d016      	beq.n	80028de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fafd 	bl	8001eb4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028ba:	f7fe fc8f 	bl	80011dc <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028c2:	f7fe fc8b 	bl	80011dc <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e09b      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028d4:	f7ff fbc9 	bl	800206a <LL_RCC_IsActiveFlag_PPRE1>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f1      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d017      	beq.n	800291a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff faf3 	bl	8001edc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028f6:	f7fe fc71 	bl	80011dc <HAL_GetTick>
 80028fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028fe:	f7fe fc6d 	bl	80011dc <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e07d      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002910:	f7ff fbbd 	bl	800208e <LL_RCC_IsActiveFlag_PPRE2>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f1      	beq.n	80028fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d043      	beq.n	80029ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d106      	bne.n	800293c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800292e:	f7ff f893 	bl	8001a58 <LL_RCC_HSE_IsReady>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11e      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e067      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d106      	bne.n	8002952 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002944:	f7ff fb16 	bl	8001f74 <LL_RCC_PLL_IsReady>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d113      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e05c      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800295a:	f7ff f9fb 	bl	8001d54 <LL_RCC_MSI_IsReady>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d108      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e051      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002968:	f7ff f8a6 	bl	8001ab8 <LL_RCC_HSI_IsReady>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e04a      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fa39 	bl	8001df2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fc2c 	bl	80011dc <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fe fc28 	bl	80011dc <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e036      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	f7ff fa3c 	bl	8001e1a <LL_RCC_GetSysClkSource>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d1ec      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d21b      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 0207 	bic.w	r2, r3, #7
 80029c4:	4913      	ldr	r1, [pc, #76]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe fc06 	bl	80011dc <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029d4:	f7fe fc02 	bl	80011dc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e012      	b.n	8002a0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1ef      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029f4:	f000 f87e 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_RCC_ClockConfig+0x27c>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80029fe:	f7fe fbf9 	bl	80011f4 <HAL_GetTickPrio>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fb9b 	bl	8001140 <HAL_InitTick>
 8002a0a:	4603      	mov	r3, r0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	58004000 	.word	0x58004000
 8002a18:	20000010 	.word	0x20000010

08002a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a22:	f7ff f9fa 	bl	8001e1a <LL_RCC_GetSysClkSource>
 8002a26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a2e:	f7ff f9b6 	bl	8001d9e <LL_RCC_MSI_GetRange>
 8002a32:	4603      	mov	r3, r0
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e04b      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d102      	bne.n	8002a50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e045      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d10a      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a56:	f7fe ffcf 	bl	80019f8 <LL_RCC_HSE_IsEnabledDiv2>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d102      	bne.n	8002a66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a60:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	e03a      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e037      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a6c:	f7ff fab9 	bl	8001fe2 <LL_RCC_PLL_GetMainSource>
 8002a70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d003      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x64>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCC_GetSysClockFreq+0x6a>
 8002a7e:	e00d      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a82:	60bb      	str	r3, [r7, #8]
        break;
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a86:	f7fe ffb7 	bl	80019f8 <LL_RCC_HSE_IsEnabledDiv2>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d102      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a92:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a94:	e00d      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a98:	60bb      	str	r3, [r7, #8]
        break;
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a9c:	f7ff f97f 	bl	8001d9e <LL_RCC_MSI_GetRange>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	60bb      	str	r3, [r7, #8]
        break;
 8002ab0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002ab2:	f7ff fa71 	bl	8001f98 <LL_RCC_PLL_GetN>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	fb03 f402 	mul.w	r4, r3, r2
 8002abe:	f7ff fa84 	bl	8001fca <LL_RCC_PLL_GetDivider>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	fbb4 f4f3 	udiv	r4, r4, r3
 8002acc:	f7ff fa71 	bl	8001fb2 <LL_RCC_PLL_GetR>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	0f5b      	lsrs	r3, r3, #29
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ada:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	080059ac 	.word	0x080059ac
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	01e84800 	.word	0x01e84800

08002af4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b598      	push	{r3, r4, r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002af8:	f7ff ff90 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8002afc:	4604      	mov	r4, r0
 8002afe:	f7ff fa01 	bl	8001f04 <LL_RCC_GetAHBPrescaler>
 8002b02:	4603      	mov	r3, r0
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4a03      	ldr	r2, [pc, #12]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x24>)
 8002b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd98      	pop	{r3, r4, r7, pc}
 8002b18:	0800596c 	.word	0x0800596c

08002b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2bb0      	cmp	r3, #176	; 0xb0
 8002b28:	d903      	bls.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e007      	b.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002b42:	f7ff f9eb 	bl	8001f1c <LL_RCC_GetAHB4Prescaler>
 8002b46:	4603      	mov	r3, r0
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	0c9c      	lsrs	r4, r3, #18
 8002b66:	f7fe ff39 	bl	80019dc <HAL_PWREx_GetVoltageRange>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f000 f80c 	bl	8002b8c <RCC_SetFlashLatency>
 8002b74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd90      	pop	{r4, r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	080059ac 	.word	0x080059ac
 8002b84:	0800596c 	.word	0x0800596c
 8002b88:	431bde83 	.word	0x431bde83

08002b8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b093      	sub	sp, #76	; 0x4c
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b96:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <RCC_SetFlashLatency+0xe8>)
 8002b98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002ba2:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <RCC_SetFlashLatency+0xec>)
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002bae:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <RCC_SetFlashLatency+0xf0>)
 8002bb0:	f107 040c 	add.w	r4, r7, #12
 8002bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002bba:	2300      	movs	r3, #0
 8002bbc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc4:	d11a      	bne.n	8002bfc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8002bca:	e013      	b.n	8002bf4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	3348      	adds	r3, #72	; 0x48
 8002bd2:	443b      	add	r3, r7
 8002bd4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d807      	bhi.n	8002bee <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	3348      	adds	r3, #72	; 0x48
 8002be4:	443b      	add	r3, r7
 8002be6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002bec:	e020      	b.n	8002c30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8002bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d9e8      	bls.n	8002bcc <RCC_SetFlashLatency+0x40>
 8002bfa:	e019      	b.n	8002c30 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c00:	e013      	b.n	8002c2a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	3348      	adds	r3, #72	; 0x48
 8002c08:	443b      	add	r3, r7
 8002c0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d807      	bhi.n	8002c24 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	3348      	adds	r3, #72	; 0x48
 8002c1a:	443b      	add	r3, r7
 8002c1c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c20:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c22:	e005      	b.n	8002c30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c26:	3301      	adds	r3, #1
 8002c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d9e8      	bls.n	8002c02 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <RCC_SetFlashLatency+0xf4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 0207 	bic.w	r2, r3, #7
 8002c38:	4911      	ldr	r1, [pc, #68]	; (8002c80 <RCC_SetFlashLatency+0xf4>)
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c40:	f7fe facc 	bl	80011dc <HAL_GetTick>
 8002c44:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c46:	e008      	b.n	8002c5a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c48:	f7fe fac8 	bl	80011dc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e007      	b.n	8002c6a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <RCC_SetFlashLatency+0xf4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1ef      	bne.n	8002c48 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	374c      	adds	r7, #76	; 0x4c
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd90      	pop	{r4, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	08005940 	.word	0x08005940
 8002c78:	08005950 	.word	0x08005950
 8002c7c:	0800595c 	.word	0x0800595c
 8002c80:	58004000 	.word	0x58004000

08002c84 <LL_RCC_LSE_IsEnabled>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <LL_RCC_LSE_IsEnabled+0x18>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <LL_RCC_LSE_IsEnabled+0x1a>
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_RCC_LSE_IsReady>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d101      	bne.n	8002cc0 <LL_RCC_LSE_IsReady+0x18>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <LL_RCC_LSE_IsReady+0x1a>
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_MSI_EnablePLLMode>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_RCC_SetRFWKPClockSource>:
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LL_RCC_SetSMPSClockSource>:
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	f023 0203 	bic.w	r2, r3, #3
 8002d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_RCC_SetSMPSPrescaler>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_RCC_SetUSARTClockSource>:
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_SetLPUARTClockSource>:
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_SetI2CClockSource>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	401a      	ands	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_RCC_SetLPTIMClockSource>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0c1b      	lsrs	r3, r3, #16
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	401a      	ands	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_RCC_SetSAIClockSource>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_SetRNGClockSource>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_SetCLK48ClockSource>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_SetUSBClockSource>:
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ffe3 	bl	8002e84 <LL_RCC_SetCLK48ClockSource>
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <LL_RCC_SetADCClockSource>:
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_RCC_SetRTCClockSource>:
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_RCC_GetRTCClockSource>:
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_ForceBackupDomainReset>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_RCC_PLLSAI1_Enable>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f8e:	6013      	str	r3, [r2, #0]
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_PLLSAI1_Disable>:
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fac:	6013      	str	r3, [r2, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_RCC_PLLSAI1_IsReady>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fca:	d101      	bne.n	8002fd0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d034      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003000:	d021      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003002:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003006:	d81b      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800300c:	d01d      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800300e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003012:	d815      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301c:	d110      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800302e:	e00d      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4618      	mov	r0, r3
 8003036:	f000 f94d 	bl	80032d4 <RCCEx_PLLSAI1_ConfigNP>
 800303a:	4603      	mov	r3, r0
 800303c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800303e:	e005      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]
        break;
 8003044:	e002      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800304a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304c:	7ffb      	ldrb	r3, [r7, #31]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fee8 	bl	8002e2c <LL_RCC_SetSAIClockSource>
 800305c:	e001      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305e:	7ffb      	ldrb	r3, [r7, #31]
 8003060:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306a:	2b00      	cmp	r3, #0
 800306c:	d046      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800306e:	f7ff ff56 	bl	8002f1e <LL_RCC_GetRTCClockSource>
 8003072:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	429a      	cmp	r2, r3
 800307c:	d03c      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800307e:	f7fe fc9d 	bl	80019bc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff30 	bl	8002ef2 <LL_RCC_SetRTCClockSource>
 8003092:	e02e      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800309e:	f7ff ff4b 	bl	8002f38 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80030a2:	f7ff ff5a 	bl	8002f5a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80030b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80030be:	f7ff fde1 	bl	8002c84 <LL_RCC_LSE_IsEnabled>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d114      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030c8:	f7fe f888 	bl	80011dc <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80030ce:	e00b      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe f884 	bl	80011dc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d902      	bls.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	77fb      	strb	r3, [r7, #31]
              break;
 80030e6:	e004      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80030e8:	f7ff fdde 	bl	8002ca8 <LL_RCC_LSE_IsReady>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d1ee      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	77bb      	strb	r3, [r7, #30]
 80030f6:	e001      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
 80030fa:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fe2a 	bl	8002d66 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fe35 	bl	8002d92 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fe5d 	bl	8002df8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d004      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fe52 	bl	8002df8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fe2a 	bl	8002dbe <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fe1f 	bl	8002dbe <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d022      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fe8d 	bl	8002eb0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319e:	d107      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b8:	d10b      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f8e3 	bl	800338a <RCCEx_PLLSAI1_ConfigNQ>
 80031c4:	4603      	mov	r3, r0
 80031c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80031c8:	7ffb      	ldrb	r3, [r7, #31]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80031ce:	7ffb      	ldrb	r3, [r7, #31]
 80031d0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02b      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e6:	d008      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031f0:	d003      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d105      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fe2a 	bl	8002e58 <LL_RCC_SetRNGClockSource>
 8003204:	e00a      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	2000      	movs	r0, #0
 8003212:	f7ff fe21 	bl	8002e58 <LL_RCC_SetRNGClockSource>
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff fe34 	bl	8002e84 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003224:	d107      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003234:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323e:	2b00      	cmp	r3, #0
 8003240:	d022      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fe3d 	bl	8002ec6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003254:	d107      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800326e:	d10b      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f8e3 	bl	8003440 <RCCEx_PLLSAI1_ConfigNR>
 800327a:	4603      	mov	r3, r0
 800327c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800327e:	7ffb      	ldrb	r3, [r7, #31]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003284:	7ffb      	ldrb	r3, [r7, #31]
 8003286:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fd26 	bl	8002cea <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fd45 	bl	8002d3e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fd2c 	bl	8002d16 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80032be:	7fbb      	ldrb	r3, [r7, #30]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80032cc:	f7ff fcfe 	bl	8002ccc <LL_RCC_MSI_EnablePLLMode>
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80032e0:	f7ff fe5b 	bl	8002f9a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032e4:	f7fd ff7a 	bl	80011dc <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032ea:	e009      	b.n	8003300 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ec:	f7fd ff76 	bl	80011dc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d902      	bls.n	8003300 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	73fb      	strb	r3, [r7, #15]
      break;
 80032fe:	e004      	b.n	800330a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003300:	f7ff fe5a 	bl	8002fb8 <LL_RCC_PLLSAI1_IsReady>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d137      	bne.n	8003380 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003324:	4313      	orrs	r3, r2
 8003326:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800333a:	4313      	orrs	r3, r2
 800333c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800333e:	f7ff fe1d 	bl	8002f7c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003342:	f7fd ff4b 	bl	80011dc <HAL_GetTick>
 8003346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003348:	e009      	b.n	800335e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800334a:	f7fd ff47 	bl	80011dc <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d902      	bls.n	800335e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	73fb      	strb	r3, [r7, #15]
        break;
 800335c:	e004      	b.n	8003368 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800335e:	f7ff fe2b 	bl	8002fb8 <LL_RCC_PLLSAI1_IsReady>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d1f0      	bne.n	800334a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d108      	bne.n	8003380 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800337c:	4313      	orrs	r3, r2
 800337e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003396:	f7ff fe00 	bl	8002f9a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800339a:	f7fd ff1f 	bl	80011dc <HAL_GetTick>
 800339e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033a0:	e009      	b.n	80033b6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a2:	f7fd ff1b 	bl	80011dc <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d902      	bls.n	80033b6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e004      	b.n	80033c0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033b6:	f7ff fdff 	bl	8002fb8 <LL_RCC_PLLSAI1_IsReady>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d137      	bne.n	8003436 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033da:	4313      	orrs	r3, r2
 80033dc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f0:	4313      	orrs	r3, r2
 80033f2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033f4:	f7ff fdc2 	bl	8002f7c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f8:	f7fd fef0 	bl	80011dc <HAL_GetTick>
 80033fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033fe:	e009      	b.n	8003414 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003400:	f7fd feec 	bl	80011dc <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d902      	bls.n	8003414 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	73fb      	strb	r3, [r7, #15]
        break;
 8003412:	e004      	b.n	800341e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003414:	f7ff fdd0 	bl	8002fb8 <LL_RCC_PLLSAI1_IsReady>
 8003418:	4603      	mov	r3, r0
 800341a:	2b01      	cmp	r3, #1
 800341c:	d1f0      	bne.n	8003400 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d108      	bne.n	8003436 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003432:	4313      	orrs	r3, r2
 8003434:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800344c:	f7ff fda5 	bl	8002f9a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003450:	f7fd fec4 	bl	80011dc <HAL_GetTick>
 8003454:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003456:	e009      	b.n	800346c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003458:	f7fd fec0 	bl	80011dc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d902      	bls.n	800346c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	73fb      	strb	r3, [r7, #15]
      break;
 800346a:	e004      	b.n	8003476 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800346c:	f7ff fda4 	bl	8002fb8 <LL_RCC_PLLSAI1_IsReady>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d137      	bne.n	80034ec <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003490:	4313      	orrs	r3, r2
 8003492:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034a6:	4313      	orrs	r3, r2
 80034a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034aa:	f7ff fd67 	bl	8002f7c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ae:	f7fd fe95 	bl	80011dc <HAL_GetTick>
 80034b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034b4:	e009      	b.n	80034ca <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b6:	f7fd fe91 	bl	80011dc <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d902      	bls.n	80034ca <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	73fb      	strb	r3, [r7, #15]
        break;
 80034c8:	e004      	b.n	80034d4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034ca:	f7ff fd75 	bl	8002fb8 <LL_RCC_PLLSAI1_IsReady>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d1f0      	bne.n	80034b6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d108      	bne.n	80034ec <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e8:	4313      	orrs	r3, r2
 80034ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e095      	b.n	8003634 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	d108      	bne.n	8003522 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003518:	d009      	beq.n	800352e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	61da      	str	r2, [r3, #28]
 8003520:	e005      	b.n	800352e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fd fbdb 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2202      	movs	r2, #2
 8003552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003564:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800356e:	d902      	bls.n	8003576 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e002      	b.n	800357c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003584:	d007      	beq.n	8003596 <HAL_SPI_Init+0xa0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800358e:	d002      	beq.n	8003596 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	ea42 0103 	orr.w	r1, r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	f003 0204 	and.w	r2, r3, #4
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003612:	ea42 0103 	orr.w	r1, r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_SPI_Transmit+0x22>
 800365a:	2302      	movs	r3, #2
 800365c:	e158      	b.n	8003910 <HAL_SPI_Transmit+0x2d4>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003666:	f7fd fdb9 	bl	80011dc <HAL_GetTick>
 800366a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d002      	beq.n	8003682 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800367c:	2302      	movs	r3, #2
 800367e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003680:	e13d      	b.n	80038fe <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_SPI_Transmit+0x52>
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003692:	e134      	b.n	80038fe <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2203      	movs	r2, #3
 8003698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	88fa      	ldrh	r2, [r7, #6]
 80036b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036de:	d10f      	bne.n	8003700 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	d007      	beq.n	800371e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800371c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003726:	d94b      	bls.n	80037c0 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_SPI_Transmit+0xfa>
 8003730:	8afb      	ldrh	r3, [r7, #22]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d13e      	bne.n	80037b4 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	881a      	ldrh	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	1c9a      	adds	r2, r3, #2
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800375a:	e02b      	b.n	80037b4 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b02      	cmp	r3, #2
 8003768:	d112      	bne.n	8003790 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	881a      	ldrh	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	1c9a      	adds	r2, r3, #2
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800378e:	e011      	b.n	80037b4 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003790:	f7fd fd24 	bl	80011dc <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d803      	bhi.n	80037a8 <HAL_SPI_Transmit+0x16c>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a6:	d102      	bne.n	80037ae <HAL_SPI_Transmit+0x172>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037b2:	e0a4      	b.n	80038fe <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1ce      	bne.n	800375c <HAL_SPI_Transmit+0x120>
 80037be:	e07c      	b.n	80038ba <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_SPI_Transmit+0x192>
 80037c8:	8afb      	ldrh	r3, [r7, #22]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d170      	bne.n	80038b0 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d912      	bls.n	80037fe <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	881a      	ldrh	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	1c9a      	adds	r2, r3, #2
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b02      	subs	r3, #2
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037fc:	e058      	b.n	80038b0 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	7812      	ldrb	r2, [r2, #0]
 800380a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003824:	e044      	b.n	80038b0 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d12b      	bne.n	800388c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d912      	bls.n	8003864 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	881a      	ldrh	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	1c9a      	adds	r2, r3, #2
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b02      	subs	r3, #2
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003862:	e025      	b.n	80038b0 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e
 800388a:	e011      	b.n	80038b0 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800388c:	f7fd fca6 	bl	80011dc <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d803      	bhi.n	80038a4 <HAL_SPI_Transmit+0x268>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a2:	d102      	bne.n	80038aa <HAL_SPI_Transmit+0x26e>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038ae:	e026      	b.n	80038fe <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1b5      	bne.n	8003826 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	6839      	ldr	r1, [r7, #0]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fce4 	bl	800428c <SPI_EndRxTxTransaction>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e000      	b.n	80038fe <HAL_SPI_Transmit+0x2c2>
  }

error:
 80038fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800390e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003934:	d112      	bne.n	800395c <HAL_SPI_Receive+0x44>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10e      	bne.n	800395c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2204      	movs	r2, #4
 8003942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f910 	bl	8003b78 <HAL_SPI_TransmitReceive>
 8003958:	4603      	mov	r3, r0
 800395a:	e109      	b.n	8003b70 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_SPI_Receive+0x52>
 8003966:	2302      	movs	r3, #2
 8003968:	e102      	b.n	8003b70 <HAL_SPI_Receive+0x258>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003972:	f7fd fc33 	bl	80011dc <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d002      	beq.n	800398a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003984:	2302      	movs	r3, #2
 8003986:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003988:	e0e9      	b.n	8003b5e <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SPI_Receive+0x7e>
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    goto error;
 800399a:	e0e0      	b.n	8003b5e <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2204      	movs	r2, #4
 80039a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e6:	d908      	bls.n	80039fa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	e007      	b.n	8003a0a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a08:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a12:	d10f      	bne.n	8003a34 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d007      	beq.n	8003a52 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a5a:	d867      	bhi.n	8003b2c <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a5c:	e030      	b.n	8003ac0 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d117      	bne.n	8003a9c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f103 020c 	add.w	r2, r3, #12
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a9a:	e011      	b.n	8003ac0 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9c:	f7fd fb9e 	bl	80011dc <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d803      	bhi.n	8003ab4 <HAL_SPI_Receive+0x19c>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab2:	d102      	bne.n	8003aba <HAL_SPI_Receive+0x1a2>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003abe:	e04e      	b.n	8003b5e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1c8      	bne.n	8003a5e <HAL_SPI_Receive+0x146>
 8003acc:	e034      	b.n	8003b38 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d115      	bne.n	8003b08 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	b292      	uxth	r2, r2
 8003ae8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	1c9a      	adds	r2, r3, #2
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003b06:	e011      	b.n	8003b2c <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b08:	f7fd fb68 	bl	80011dc <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d803      	bhi.n	8003b20 <HAL_SPI_Receive+0x208>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1e:	d102      	bne.n	8003b26 <HAL_SPI_Receive+0x20e>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b2a:	e018      	b.n	8003b5e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ca      	bne.n	8003ace <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fb4d 	bl	80041dc <SPI_EndRxTransaction>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
 8003b5a:	e000      	b.n	8003b5e <HAL_SPI_Receive+0x246>
  }

error :
 8003b5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b86:	2301      	movs	r3, #1
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_SPI_TransmitReceive+0x26>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e1fb      	b.n	8003f96 <HAL_SPI_TransmitReceive+0x41e>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ba6:	f7fd fb19 	bl	80011dc <HAL_GetTick>
 8003baa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bb2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003bba:	887b      	ldrh	r3, [r7, #2]
 8003bbc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bc2:	7efb      	ldrb	r3, [r7, #27]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d00e      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x6e>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bce:	d106      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x66>
 8003bd8:	7efb      	ldrb	r3, [r7, #27]
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d003      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003be4:	e1cd      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x80>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x80>
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bfe:	e1c0      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d003      	beq.n	8003c14 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2205      	movs	r2, #5
 8003c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	887a      	ldrh	r2, [r7, #2]
 8003c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	887a      	ldrh	r2, [r7, #2]
 8003c40:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c56:	d802      	bhi.n	8003c5e <HAL_SPI_TransmitReceive+0xe6>
 8003c58:	8a3b      	ldrh	r3, [r7, #16]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d908      	bls.n	8003c70 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	e007      	b.n	8003c80 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c7e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d007      	beq.n	8003c9e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ca6:	d97c      	bls.n	8003da2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_SPI_TransmitReceive+0x13e>
 8003cb0:	8a7b      	ldrh	r3, [r7, #18]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d169      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	1c9a      	adds	r2, r3, #2
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cda:	e056      	b.n	8003d8a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d11b      	bne.n	8003d22 <HAL_SPI_TransmitReceive+0x1aa>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d016      	beq.n	8003d22 <HAL_SPI_TransmitReceive+0x1aa>
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d113      	bne.n	8003d22 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	1c9a      	adds	r2, r3, #2
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d11c      	bne.n	8003d6a <HAL_SPI_TransmitReceive+0x1f2>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	b292      	uxth	r2, r2
 8003d48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d66:	2301      	movs	r3, #1
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d6a:	f7fd fa37 	bl	80011dc <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d807      	bhi.n	8003d8a <HAL_SPI_TransmitReceive+0x212>
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d80:	d003      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d88:	e0fb      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1a3      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x164>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d19d      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x164>
 8003da0:	e0df      	b.n	8003f62 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x23a>
 8003daa:	8a7b      	ldrh	r3, [r7, #18]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 80cb 	bne.w	8003f48 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d912      	bls.n	8003de2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	881a      	ldrh	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b02      	subs	r3, #2
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003de0:	e0b2      	b.n	8003f48 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e08:	e09e      	b.n	8003f48 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d134      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x30a>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02f      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x30a>
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d12c      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d912      	bls.n	8003e58 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	1c9a      	adds	r2, r3, #2
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b02      	subs	r3, #2
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e56:	e012      	b.n	8003e7e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d148      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x3aa>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d042      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d923      	bls.n	8003ef0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	b292      	uxth	r2, r2
 8003eb4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b02      	subs	r3, #2
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d81f      	bhi.n	8003f1e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	e016      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f103 020c 	add.w	r2, r3, #12
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f22:	f7fd f95b 	bl	80011dc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d803      	bhi.n	8003f3a <HAL_SPI_TransmitReceive+0x3c2>
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f38:	d102      	bne.n	8003f40 <HAL_SPI_TransmitReceive+0x3c8>
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d103      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f46:	e01c      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f47f af5b 	bne.w	8003e0a <HAL_SPI_TransmitReceive+0x292>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f47f af54 	bne.w	8003e0a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f990 	bl	800428c <SPI_EndRxTxTransaction>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d006      	beq.n	8003f80 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60
 8003f7e:	e000      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3728      	adds	r7, #40	; 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fb0:	f7fd f914 	bl	80011dc <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fc0:	f7fd f90c 	bl	80011dc <HAL_GetTick>
 8003fc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fc6:	4b39      	ldr	r3, [pc, #228]	; (80040ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	015b      	lsls	r3, r3, #5
 8003fcc:	0d1b      	lsrs	r3, r3, #20
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd6:	e054      	b.n	8004082 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fde:	d050      	beq.n	8004082 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fe0:	f7fd f8fc 	bl	80011dc <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d902      	bls.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d13d      	bne.n	8004072 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800400e:	d111      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004018:	d004      	beq.n	8004024 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004022:	d107      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403c:	d10f      	bne.n	800405e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800405c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e017      	b.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3b01      	subs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	429a      	cmp	r2, r3
 800409e:	d19b      	bne.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000010 	.word	0x20000010

080040b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040c2:	f7fd f88b 	bl	80011dc <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	4413      	add	r3, r2
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80040d2:	f7fd f883 	bl	80011dc <HAL_GetTick>
 80040d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040e0:	4b3d      	ldr	r3, [pc, #244]	; (80041d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	00da      	lsls	r2, r3, #3
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	0d1b      	lsrs	r3, r3, #20
 80040f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040f8:	e060      	b.n	80041bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004100:	d107      	bne.n	8004112 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d104      	bne.n	8004112 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004110:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004118:	d050      	beq.n	80041bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800411a:	f7fd f85f 	bl	80011dc <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004126:	429a      	cmp	r2, r3
 8004128:	d902      	bls.n	8004130 <SPI_WaitFifoStateUntilTimeout+0x80>
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d13d      	bne.n	80041ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800413e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004148:	d111      	bne.n	800416e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004152:	d004      	beq.n	800415e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415c:	d107      	bne.n	800416e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004176:	d10f      	bne.n	8004198 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004196:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e010      	b.n	80041ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d196      	bne.n	80040fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3728      	adds	r7, #40	; 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000010 	.word	0x20000010

080041dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f0:	d111      	bne.n	8004216 <SPI_EndRxTransaction+0x3a>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fa:	d004      	beq.n	8004206 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d107      	bne.n	8004216 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2200      	movs	r2, #0
 800421e:	2180      	movs	r1, #128	; 0x80
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff febd 	bl	8003fa0 <SPI_WaitFlagStateUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	f043 0220 	orr.w	r2, r3, #32
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e023      	b.n	8004284 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004244:	d11d      	bne.n	8004282 <SPI_EndRxTransaction+0xa6>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424e:	d004      	beq.n	800425a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004258:	d113      	bne.n	8004282 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff ff22 	bl	80040b0 <SPI_WaitFifoStateUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e000      	b.n	8004284 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2200      	movs	r2, #0
 80042a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff ff03 	bl	80040b0 <SPI_WaitFifoStateUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e027      	b.n	8004310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2200      	movs	r2, #0
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff fe68 	bl	8003fa0 <SPI_WaitFlagStateUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e014      	b.n	8004310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff fedc 	bl	80040b0 <SPI_WaitFifoStateUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e000      	b.n	8004310 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e049      	b.n	80043be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc fd10 	bl	8000d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 f946 	bl	80045e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d001      	beq.n	80043e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e02e      	b.n	800443e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_TIM_Base_Start+0x84>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_TIM_Base_Start+0x34>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d115      	bne.n	8004428 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <HAL_TIM_Base_Start+0x88>)
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b06      	cmp	r3, #6
 800440c:	d015      	beq.n	800443a <HAL_TIM_Base_Start+0x72>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004414:	d011      	beq.n	800443a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	e008      	b.n	800443a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e000      	b.n	800443c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40012c00 	.word	0x40012c00
 8004450:	00010007 	.word	0x00010007

08004454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_TIM_ConfigClockSource+0x1c>
 800446c:	2302      	movs	r3, #2
 800446e:	e0b6      	b.n	80045de <HAL_TIM_ConfigClockSource+0x18a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800448e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800449a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ac:	d03e      	beq.n	800452c <HAL_TIM_ConfigClockSource+0xd8>
 80044ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b2:	f200 8087 	bhi.w	80045c4 <HAL_TIM_ConfigClockSource+0x170>
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ba:	f000 8086 	beq.w	80045ca <HAL_TIM_ConfigClockSource+0x176>
 80044be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c2:	d87f      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x170>
 80044c4:	2b70      	cmp	r3, #112	; 0x70
 80044c6:	d01a      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0xaa>
 80044c8:	2b70      	cmp	r3, #112	; 0x70
 80044ca:	d87b      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x170>
 80044cc:	2b60      	cmp	r3, #96	; 0x60
 80044ce:	d050      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x11e>
 80044d0:	2b60      	cmp	r3, #96	; 0x60
 80044d2:	d877      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x170>
 80044d4:	2b50      	cmp	r3, #80	; 0x50
 80044d6:	d03c      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0xfe>
 80044d8:	2b50      	cmp	r3, #80	; 0x50
 80044da:	d873      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x170>
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d058      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x13e>
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d86f      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x170>
 80044e4:	2b30      	cmp	r3, #48	; 0x30
 80044e6:	d064      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x15e>
 80044e8:	2b30      	cmp	r3, #48	; 0x30
 80044ea:	d86b      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x170>
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d060      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x15e>
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d867      	bhi.n	80045c4 <HAL_TIM_ConfigClockSource+0x170>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05c      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x15e>
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d05a      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x15e>
 80044fc:	e062      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6899      	ldr	r1, [r3, #8]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f000 f94b 	bl	80047a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	609a      	str	r2, [r3, #8]
      break;
 800452a:	e04f      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6899      	ldr	r1, [r3, #8]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f000 f934 	bl	80047a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800454e:	609a      	str	r2, [r3, #8]
      break;
 8004550:	e03c      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	f000 f8a6 	bl	80046b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2150      	movs	r1, #80	; 0x50
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f8ff 	bl	800476e <TIM_ITRx_SetConfig>
      break;
 8004570:	e02c      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	461a      	mov	r2, r3
 8004580:	f000 f8c5 	bl	800470e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2160      	movs	r1, #96	; 0x60
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f8ef 	bl	800476e <TIM_ITRx_SetConfig>
      break;
 8004590:	e01c      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	461a      	mov	r2, r3
 80045a0:	f000 f886 	bl	80046b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2140      	movs	r1, #64	; 0x40
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f8df 	bl	800476e <TIM_ITRx_SetConfig>
      break;
 80045b0:	e00c      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f000 f8d6 	bl	800476e <TIM_ITRx_SetConfig>
      break;
 80045c2:	e003      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      break;
 80045c8:	e000      	b.n	80045cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <TIM_Base_SetConfig+0xbc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_Base_SetConfig+0x20>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	d108      	bne.n	800461a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a21      	ldr	r2, [pc, #132]	; (80046a4 <TIM_Base_SetConfig+0xbc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00b      	beq.n	800463a <TIM_Base_SetConfig+0x52>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004628:	d007      	beq.n	800463a <TIM_Base_SetConfig+0x52>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <TIM_Base_SetConfig+0xc0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_Base_SetConfig+0x52>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <TIM_Base_SetConfig+0xc4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d108      	bne.n	800464c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a0c      	ldr	r2, [pc, #48]	; (80046a4 <TIM_Base_SetConfig+0xbc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <TIM_Base_SetConfig+0xa0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a0b      	ldr	r2, [pc, #44]	; (80046a8 <TIM_Base_SetConfig+0xc0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_Base_SetConfig+0xa0>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <TIM_Base_SetConfig+0xc4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d103      	bne.n	8004690 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	615a      	str	r2, [r3, #20]
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40014400 	.word	0x40014400
 80046ac:	40014800 	.word	0x40014800

080046b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 0201 	bic.w	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f023 030a 	bic.w	r3, r3, #10
 80046ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	621a      	str	r2, [r3, #32]
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800470e:	b480      	push	{r7}
 8004710:	b087      	sub	sp, #28
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0210 	bic.w	r2, r3, #16
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	031b      	lsls	r3, r3, #12
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800474a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	f043 0307 	orr.w	r3, r3, #7
 8004794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	609a      	str	r2, [r3, #8]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	021a      	lsls	r2, r3, #8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e04a      	b.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d108      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004830:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d10c      	bne.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	4313      	orrs	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40012c00 	.word	0x40012c00

080048a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80048b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4013      	ands	r3, r2
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048de:	b084      	sub	sp, #16
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	f107 0014 	add.w	r0, r7, #20
 80048ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	b004      	add	sp, #16
 800491e:	4770      	bx	lr

08004920 <__errno>:
 8004920:	4b01      	ldr	r3, [pc, #4]	; (8004928 <__errno+0x8>)
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	2000001c 	.word	0x2000001c

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f000 ffae 	bl	80058a0 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	08005a84 	.word	0x08005a84
 8004968:	08005a84 	.word	0x08005a84
 800496c:	08005a84 	.word	0x08005a84
 8004970:	08005a88 	.word	0x08005a88

08004974 <memset>:
 8004974:	4402      	add	r2, r0
 8004976:	4603      	mov	r3, r0
 8004978:	4293      	cmp	r3, r2
 800497a:	d100      	bne.n	800497e <memset+0xa>
 800497c:	4770      	bx	lr
 800497e:	f803 1b01 	strb.w	r1, [r3], #1
 8004982:	e7f9      	b.n	8004978 <memset+0x4>

08004984 <iprintf>:
 8004984:	b40f      	push	{r0, r1, r2, r3}
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <iprintf+0x2c>)
 8004988:	b513      	push	{r0, r1, r4, lr}
 800498a:	681c      	ldr	r4, [r3, #0]
 800498c:	b124      	cbz	r4, 8004998 <iprintf+0x14>
 800498e:	69a3      	ldr	r3, [r4, #24]
 8004990:	b913      	cbnz	r3, 8004998 <iprintf+0x14>
 8004992:	4620      	mov	r0, r4
 8004994:	f000 f866 	bl	8004a64 <__sinit>
 8004998:	ab05      	add	r3, sp, #20
 800499a:	9a04      	ldr	r2, [sp, #16]
 800499c:	68a1      	ldr	r1, [r4, #8]
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 f9bd 	bl	8004d20 <_vfiprintf_r>
 80049a6:	b002      	add	sp, #8
 80049a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ac:	b004      	add	sp, #16
 80049ae:	4770      	bx	lr
 80049b0:	2000001c 	.word	0x2000001c

080049b4 <std>:
 80049b4:	2300      	movs	r3, #0
 80049b6:	b510      	push	{r4, lr}
 80049b8:	4604      	mov	r4, r0
 80049ba:	e9c0 3300 	strd	r3, r3, [r0]
 80049be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049c2:	6083      	str	r3, [r0, #8]
 80049c4:	8181      	strh	r1, [r0, #12]
 80049c6:	6643      	str	r3, [r0, #100]	; 0x64
 80049c8:	81c2      	strh	r2, [r0, #14]
 80049ca:	6183      	str	r3, [r0, #24]
 80049cc:	4619      	mov	r1, r3
 80049ce:	2208      	movs	r2, #8
 80049d0:	305c      	adds	r0, #92	; 0x5c
 80049d2:	f7ff ffcf 	bl	8004974 <memset>
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <std+0x38>)
 80049d8:	6263      	str	r3, [r4, #36]	; 0x24
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <std+0x3c>)
 80049dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <std+0x40>)
 80049e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <std+0x44>)
 80049e4:	6224      	str	r4, [r4, #32]
 80049e6:	6323      	str	r3, [r4, #48]	; 0x30
 80049e8:	bd10      	pop	{r4, pc}
 80049ea:	bf00      	nop
 80049ec:	080052c9 	.word	0x080052c9
 80049f0:	080052eb 	.word	0x080052eb
 80049f4:	08005323 	.word	0x08005323
 80049f8:	08005347 	.word	0x08005347

080049fc <_cleanup_r>:
 80049fc:	4901      	ldr	r1, [pc, #4]	; (8004a04 <_cleanup_r+0x8>)
 80049fe:	f000 b8af 	b.w	8004b60 <_fwalk_reent>
 8004a02:	bf00      	nop
 8004a04:	08005621 	.word	0x08005621

08004a08 <__sfmoreglue>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	2268      	movs	r2, #104	; 0x68
 8004a0c:	1e4d      	subs	r5, r1, #1
 8004a0e:	4355      	muls	r5, r2
 8004a10:	460e      	mov	r6, r1
 8004a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a16:	f000 f8e5 	bl	8004be4 <_malloc_r>
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	b140      	cbz	r0, 8004a30 <__sfmoreglue+0x28>
 8004a1e:	2100      	movs	r1, #0
 8004a20:	e9c0 1600 	strd	r1, r6, [r0]
 8004a24:	300c      	adds	r0, #12
 8004a26:	60a0      	str	r0, [r4, #8]
 8004a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a2c:	f7ff ffa2 	bl	8004974 <memset>
 8004a30:	4620      	mov	r0, r4
 8004a32:	bd70      	pop	{r4, r5, r6, pc}

08004a34 <__sfp_lock_acquire>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__sfp_lock_acquire+0x8>)
 8004a36:	f000 b8b3 	b.w	8004ba0 <__retarget_lock_acquire_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	20000469 	.word	0x20000469

08004a40 <__sfp_lock_release>:
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <__sfp_lock_release+0x8>)
 8004a42:	f000 b8ae 	b.w	8004ba2 <__retarget_lock_release_recursive>
 8004a46:	bf00      	nop
 8004a48:	20000469 	.word	0x20000469

08004a4c <__sinit_lock_acquire>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__sinit_lock_acquire+0x8>)
 8004a4e:	f000 b8a7 	b.w	8004ba0 <__retarget_lock_acquire_recursive>
 8004a52:	bf00      	nop
 8004a54:	2000046a 	.word	0x2000046a

08004a58 <__sinit_lock_release>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__sinit_lock_release+0x8>)
 8004a5a:	f000 b8a2 	b.w	8004ba2 <__retarget_lock_release_recursive>
 8004a5e:	bf00      	nop
 8004a60:	2000046a 	.word	0x2000046a

08004a64 <__sinit>:
 8004a64:	b510      	push	{r4, lr}
 8004a66:	4604      	mov	r4, r0
 8004a68:	f7ff fff0 	bl	8004a4c <__sinit_lock_acquire>
 8004a6c:	69a3      	ldr	r3, [r4, #24]
 8004a6e:	b11b      	cbz	r3, 8004a78 <__sinit+0x14>
 8004a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a74:	f7ff bff0 	b.w	8004a58 <__sinit_lock_release>
 8004a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <__sinit+0x68>)
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <__sinit+0x6c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a86:	42a3      	cmp	r3, r4
 8004a88:	bf04      	itt	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	61a3      	streq	r3, [r4, #24]
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f000 f820 	bl	8004ad4 <__sfp>
 8004a94:	6060      	str	r0, [r4, #4]
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 f81c 	bl	8004ad4 <__sfp>
 8004a9c:	60a0      	str	r0, [r4, #8]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 f818 	bl	8004ad4 <__sfp>
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	60e0      	str	r0, [r4, #12]
 8004aa8:	2104      	movs	r1, #4
 8004aaa:	6860      	ldr	r0, [r4, #4]
 8004aac:	f7ff ff82 	bl	80049b4 <std>
 8004ab0:	68a0      	ldr	r0, [r4, #8]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	2109      	movs	r1, #9
 8004ab6:	f7ff ff7d 	bl	80049b4 <std>
 8004aba:	68e0      	ldr	r0, [r4, #12]
 8004abc:	2202      	movs	r2, #2
 8004abe:	2112      	movs	r1, #18
 8004ac0:	f7ff ff78 	bl	80049b4 <std>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	61a3      	str	r3, [r4, #24]
 8004ac8:	e7d2      	b.n	8004a70 <__sinit+0xc>
 8004aca:	bf00      	nop
 8004acc:	080059ec 	.word	0x080059ec
 8004ad0:	080049fd 	.word	0x080049fd

08004ad4 <__sfp>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	4607      	mov	r7, r0
 8004ad8:	f7ff ffac 	bl	8004a34 <__sfp_lock_acquire>
 8004adc:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <__sfp+0x84>)
 8004ade:	681e      	ldr	r6, [r3, #0]
 8004ae0:	69b3      	ldr	r3, [r6, #24]
 8004ae2:	b913      	cbnz	r3, 8004aea <__sfp+0x16>
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f7ff ffbd 	bl	8004a64 <__sinit>
 8004aea:	3648      	adds	r6, #72	; 0x48
 8004aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	d503      	bpl.n	8004afc <__sfp+0x28>
 8004af4:	6833      	ldr	r3, [r6, #0]
 8004af6:	b30b      	cbz	r3, 8004b3c <__sfp+0x68>
 8004af8:	6836      	ldr	r6, [r6, #0]
 8004afa:	e7f7      	b.n	8004aec <__sfp+0x18>
 8004afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b00:	b9d5      	cbnz	r5, 8004b38 <__sfp+0x64>
 8004b02:	4b16      	ldr	r3, [pc, #88]	; (8004b5c <__sfp+0x88>)
 8004b04:	60e3      	str	r3, [r4, #12]
 8004b06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b0c:	f000 f847 	bl	8004b9e <__retarget_lock_init_recursive>
 8004b10:	f7ff ff96 	bl	8004a40 <__sfp_lock_release>
 8004b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b1c:	6025      	str	r5, [r4, #0]
 8004b1e:	61a5      	str	r5, [r4, #24]
 8004b20:	2208      	movs	r2, #8
 8004b22:	4629      	mov	r1, r5
 8004b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b28:	f7ff ff24 	bl	8004974 <memset>
 8004b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b34:	4620      	mov	r0, r4
 8004b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b38:	3468      	adds	r4, #104	; 0x68
 8004b3a:	e7d9      	b.n	8004af0 <__sfp+0x1c>
 8004b3c:	2104      	movs	r1, #4
 8004b3e:	4638      	mov	r0, r7
 8004b40:	f7ff ff62 	bl	8004a08 <__sfmoreglue>
 8004b44:	4604      	mov	r4, r0
 8004b46:	6030      	str	r0, [r6, #0]
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d1d5      	bne.n	8004af8 <__sfp+0x24>
 8004b4c:	f7ff ff78 	bl	8004a40 <__sfp_lock_release>
 8004b50:	230c      	movs	r3, #12
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	e7ee      	b.n	8004b34 <__sfp+0x60>
 8004b56:	bf00      	nop
 8004b58:	080059ec 	.word	0x080059ec
 8004b5c:	ffff0001 	.word	0xffff0001

08004b60 <_fwalk_reent>:
 8004b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b64:	4606      	mov	r6, r0
 8004b66:	4688      	mov	r8, r1
 8004b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b6c:	2700      	movs	r7, #0
 8004b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b72:	f1b9 0901 	subs.w	r9, r9, #1
 8004b76:	d505      	bpl.n	8004b84 <_fwalk_reent+0x24>
 8004b78:	6824      	ldr	r4, [r4, #0]
 8004b7a:	2c00      	cmp	r4, #0
 8004b7c:	d1f7      	bne.n	8004b6e <_fwalk_reent+0xe>
 8004b7e:	4638      	mov	r0, r7
 8004b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b84:	89ab      	ldrh	r3, [r5, #12]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d907      	bls.n	8004b9a <_fwalk_reent+0x3a>
 8004b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	d003      	beq.n	8004b9a <_fwalk_reent+0x3a>
 8004b92:	4629      	mov	r1, r5
 8004b94:	4630      	mov	r0, r6
 8004b96:	47c0      	blx	r8
 8004b98:	4307      	orrs	r7, r0
 8004b9a:	3568      	adds	r5, #104	; 0x68
 8004b9c:	e7e9      	b.n	8004b72 <_fwalk_reent+0x12>

08004b9e <__retarget_lock_init_recursive>:
 8004b9e:	4770      	bx	lr

08004ba0 <__retarget_lock_acquire_recursive>:
 8004ba0:	4770      	bx	lr

08004ba2 <__retarget_lock_release_recursive>:
 8004ba2:	4770      	bx	lr

08004ba4 <sbrk_aligned>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	4e0e      	ldr	r6, [pc, #56]	; (8004be0 <sbrk_aligned+0x3c>)
 8004ba8:	460c      	mov	r4, r1
 8004baa:	6831      	ldr	r1, [r6, #0]
 8004bac:	4605      	mov	r5, r0
 8004bae:	b911      	cbnz	r1, 8004bb6 <sbrk_aligned+0x12>
 8004bb0:	f000 fb7a 	bl	80052a8 <_sbrk_r>
 8004bb4:	6030      	str	r0, [r6, #0]
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 fb75 	bl	80052a8 <_sbrk_r>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	d00a      	beq.n	8004bd8 <sbrk_aligned+0x34>
 8004bc2:	1cc4      	adds	r4, r0, #3
 8004bc4:	f024 0403 	bic.w	r4, r4, #3
 8004bc8:	42a0      	cmp	r0, r4
 8004bca:	d007      	beq.n	8004bdc <sbrk_aligned+0x38>
 8004bcc:	1a21      	subs	r1, r4, r0
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 fb6a 	bl	80052a8 <_sbrk_r>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d101      	bne.n	8004bdc <sbrk_aligned+0x38>
 8004bd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004bdc:	4620      	mov	r0, r4
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	20000470 	.word	0x20000470

08004be4 <_malloc_r>:
 8004be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be8:	1ccd      	adds	r5, r1, #3
 8004bea:	f025 0503 	bic.w	r5, r5, #3
 8004bee:	3508      	adds	r5, #8
 8004bf0:	2d0c      	cmp	r5, #12
 8004bf2:	bf38      	it	cc
 8004bf4:	250c      	movcc	r5, #12
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	db01      	blt.n	8004c00 <_malloc_r+0x1c>
 8004bfc:	42a9      	cmp	r1, r5
 8004bfe:	d905      	bls.n	8004c0c <_malloc_r+0x28>
 8004c00:	230c      	movs	r3, #12
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	2600      	movs	r6, #0
 8004c06:	4630      	mov	r0, r6
 8004c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c0c:	4e2e      	ldr	r6, [pc, #184]	; (8004cc8 <_malloc_r+0xe4>)
 8004c0e:	f000 fdbb 	bl	8005788 <__malloc_lock>
 8004c12:	6833      	ldr	r3, [r6, #0]
 8004c14:	461c      	mov	r4, r3
 8004c16:	bb34      	cbnz	r4, 8004c66 <_malloc_r+0x82>
 8004c18:	4629      	mov	r1, r5
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	f7ff ffc2 	bl	8004ba4 <sbrk_aligned>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	4604      	mov	r4, r0
 8004c24:	d14d      	bne.n	8004cc2 <_malloc_r+0xde>
 8004c26:	6834      	ldr	r4, [r6, #0]
 8004c28:	4626      	mov	r6, r4
 8004c2a:	2e00      	cmp	r6, #0
 8004c2c:	d140      	bne.n	8004cb0 <_malloc_r+0xcc>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	4631      	mov	r1, r6
 8004c32:	4638      	mov	r0, r7
 8004c34:	eb04 0803 	add.w	r8, r4, r3
 8004c38:	f000 fb36 	bl	80052a8 <_sbrk_r>
 8004c3c:	4580      	cmp	r8, r0
 8004c3e:	d13a      	bne.n	8004cb6 <_malloc_r+0xd2>
 8004c40:	6821      	ldr	r1, [r4, #0]
 8004c42:	3503      	adds	r5, #3
 8004c44:	1a6d      	subs	r5, r5, r1
 8004c46:	f025 0503 	bic.w	r5, r5, #3
 8004c4a:	3508      	adds	r5, #8
 8004c4c:	2d0c      	cmp	r5, #12
 8004c4e:	bf38      	it	cc
 8004c50:	250c      	movcc	r5, #12
 8004c52:	4629      	mov	r1, r5
 8004c54:	4638      	mov	r0, r7
 8004c56:	f7ff ffa5 	bl	8004ba4 <sbrk_aligned>
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d02b      	beq.n	8004cb6 <_malloc_r+0xd2>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	442b      	add	r3, r5
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	e00e      	b.n	8004c84 <_malloc_r+0xa0>
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	1b52      	subs	r2, r2, r5
 8004c6a:	d41e      	bmi.n	8004caa <_malloc_r+0xc6>
 8004c6c:	2a0b      	cmp	r2, #11
 8004c6e:	d916      	bls.n	8004c9e <_malloc_r+0xba>
 8004c70:	1961      	adds	r1, r4, r5
 8004c72:	42a3      	cmp	r3, r4
 8004c74:	6025      	str	r5, [r4, #0]
 8004c76:	bf18      	it	ne
 8004c78:	6059      	strne	r1, [r3, #4]
 8004c7a:	6863      	ldr	r3, [r4, #4]
 8004c7c:	bf08      	it	eq
 8004c7e:	6031      	streq	r1, [r6, #0]
 8004c80:	5162      	str	r2, [r4, r5]
 8004c82:	604b      	str	r3, [r1, #4]
 8004c84:	4638      	mov	r0, r7
 8004c86:	f104 060b 	add.w	r6, r4, #11
 8004c8a:	f000 fd83 	bl	8005794 <__malloc_unlock>
 8004c8e:	f026 0607 	bic.w	r6, r6, #7
 8004c92:	1d23      	adds	r3, r4, #4
 8004c94:	1af2      	subs	r2, r6, r3
 8004c96:	d0b6      	beq.n	8004c06 <_malloc_r+0x22>
 8004c98:	1b9b      	subs	r3, r3, r6
 8004c9a:	50a3      	str	r3, [r4, r2]
 8004c9c:	e7b3      	b.n	8004c06 <_malloc_r+0x22>
 8004c9e:	6862      	ldr	r2, [r4, #4]
 8004ca0:	42a3      	cmp	r3, r4
 8004ca2:	bf0c      	ite	eq
 8004ca4:	6032      	streq	r2, [r6, #0]
 8004ca6:	605a      	strne	r2, [r3, #4]
 8004ca8:	e7ec      	b.n	8004c84 <_malloc_r+0xa0>
 8004caa:	4623      	mov	r3, r4
 8004cac:	6864      	ldr	r4, [r4, #4]
 8004cae:	e7b2      	b.n	8004c16 <_malloc_r+0x32>
 8004cb0:	4634      	mov	r4, r6
 8004cb2:	6876      	ldr	r6, [r6, #4]
 8004cb4:	e7b9      	b.n	8004c2a <_malloc_r+0x46>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f000 fd6a 	bl	8005794 <__malloc_unlock>
 8004cc0:	e7a1      	b.n	8004c06 <_malloc_r+0x22>
 8004cc2:	6025      	str	r5, [r4, #0]
 8004cc4:	e7de      	b.n	8004c84 <_malloc_r+0xa0>
 8004cc6:	bf00      	nop
 8004cc8:	2000046c 	.word	0x2000046c

08004ccc <__sfputc_r>:
 8004ccc:	6893      	ldr	r3, [r2, #8]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	b410      	push	{r4}
 8004cd4:	6093      	str	r3, [r2, #8]
 8004cd6:	da08      	bge.n	8004cea <__sfputc_r+0x1e>
 8004cd8:	6994      	ldr	r4, [r2, #24]
 8004cda:	42a3      	cmp	r3, r4
 8004cdc:	db01      	blt.n	8004ce2 <__sfputc_r+0x16>
 8004cde:	290a      	cmp	r1, #10
 8004ce0:	d103      	bne.n	8004cea <__sfputc_r+0x1e>
 8004ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ce6:	f000 bb33 	b.w	8005350 <__swbuf_r>
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	1c58      	adds	r0, r3, #1
 8004cee:	6010      	str	r0, [r2, #0]
 8004cf0:	7019      	strb	r1, [r3, #0]
 8004cf2:	4608      	mov	r0, r1
 8004cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <__sfputs_r>:
 8004cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	460f      	mov	r7, r1
 8004d00:	4614      	mov	r4, r2
 8004d02:	18d5      	adds	r5, r2, r3
 8004d04:	42ac      	cmp	r4, r5
 8004d06:	d101      	bne.n	8004d0c <__sfputs_r+0x12>
 8004d08:	2000      	movs	r0, #0
 8004d0a:	e007      	b.n	8004d1c <__sfputs_r+0x22>
 8004d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d10:	463a      	mov	r2, r7
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7ff ffda 	bl	8004ccc <__sfputc_r>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d1f3      	bne.n	8004d04 <__sfputs_r+0xa>
 8004d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d20 <_vfiprintf_r>:
 8004d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d24:	460d      	mov	r5, r1
 8004d26:	b09d      	sub	sp, #116	; 0x74
 8004d28:	4614      	mov	r4, r2
 8004d2a:	4698      	mov	r8, r3
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	b118      	cbz	r0, 8004d38 <_vfiprintf_r+0x18>
 8004d30:	6983      	ldr	r3, [r0, #24]
 8004d32:	b90b      	cbnz	r3, 8004d38 <_vfiprintf_r+0x18>
 8004d34:	f7ff fe96 	bl	8004a64 <__sinit>
 8004d38:	4b89      	ldr	r3, [pc, #548]	; (8004f60 <_vfiprintf_r+0x240>)
 8004d3a:	429d      	cmp	r5, r3
 8004d3c:	d11b      	bne.n	8004d76 <_vfiprintf_r+0x56>
 8004d3e:	6875      	ldr	r5, [r6, #4]
 8004d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d42:	07d9      	lsls	r1, r3, #31
 8004d44:	d405      	bmi.n	8004d52 <_vfiprintf_r+0x32>
 8004d46:	89ab      	ldrh	r3, [r5, #12]
 8004d48:	059a      	lsls	r2, r3, #22
 8004d4a:	d402      	bmi.n	8004d52 <_vfiprintf_r+0x32>
 8004d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d4e:	f7ff ff27 	bl	8004ba0 <__retarget_lock_acquire_recursive>
 8004d52:	89ab      	ldrh	r3, [r5, #12]
 8004d54:	071b      	lsls	r3, r3, #28
 8004d56:	d501      	bpl.n	8004d5c <_vfiprintf_r+0x3c>
 8004d58:	692b      	ldr	r3, [r5, #16]
 8004d5a:	b9eb      	cbnz	r3, 8004d98 <_vfiprintf_r+0x78>
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f000 fb5a 	bl	8005418 <__swsetup_r>
 8004d64:	b1c0      	cbz	r0, 8004d98 <_vfiprintf_r+0x78>
 8004d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d68:	07dc      	lsls	r4, r3, #31
 8004d6a:	d50e      	bpl.n	8004d8a <_vfiprintf_r+0x6a>
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d70:	b01d      	add	sp, #116	; 0x74
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d76:	4b7b      	ldr	r3, [pc, #492]	; (8004f64 <_vfiprintf_r+0x244>)
 8004d78:	429d      	cmp	r5, r3
 8004d7a:	d101      	bne.n	8004d80 <_vfiprintf_r+0x60>
 8004d7c:	68b5      	ldr	r5, [r6, #8]
 8004d7e:	e7df      	b.n	8004d40 <_vfiprintf_r+0x20>
 8004d80:	4b79      	ldr	r3, [pc, #484]	; (8004f68 <_vfiprintf_r+0x248>)
 8004d82:	429d      	cmp	r5, r3
 8004d84:	bf08      	it	eq
 8004d86:	68f5      	ldreq	r5, [r6, #12]
 8004d88:	e7da      	b.n	8004d40 <_vfiprintf_r+0x20>
 8004d8a:	89ab      	ldrh	r3, [r5, #12]
 8004d8c:	0598      	lsls	r0, r3, #22
 8004d8e:	d4ed      	bmi.n	8004d6c <_vfiprintf_r+0x4c>
 8004d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d92:	f7ff ff06 	bl	8004ba2 <__retarget_lock_release_recursive>
 8004d96:	e7e9      	b.n	8004d6c <_vfiprintf_r+0x4c>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004da6:	2330      	movs	r3, #48	; 0x30
 8004da8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f6c <_vfiprintf_r+0x24c>
 8004dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004db0:	f04f 0901 	mov.w	r9, #1
 8004db4:	4623      	mov	r3, r4
 8004db6:	469a      	mov	sl, r3
 8004db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dbc:	b10a      	cbz	r2, 8004dc2 <_vfiprintf_r+0xa2>
 8004dbe:	2a25      	cmp	r2, #37	; 0x25
 8004dc0:	d1f9      	bne.n	8004db6 <_vfiprintf_r+0x96>
 8004dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8004dc6:	d00b      	beq.n	8004de0 <_vfiprintf_r+0xc0>
 8004dc8:	465b      	mov	r3, fp
 8004dca:	4622      	mov	r2, r4
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f7ff ff93 	bl	8004cfa <__sfputs_r>
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f000 80aa 	beq.w	8004f2e <_vfiprintf_r+0x20e>
 8004dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ddc:	445a      	add	r2, fp
 8004dde:	9209      	str	r2, [sp, #36]	; 0x24
 8004de0:	f89a 3000 	ldrb.w	r3, [sl]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80a2 	beq.w	8004f2e <_vfiprintf_r+0x20e>
 8004dea:	2300      	movs	r3, #0
 8004dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004df4:	f10a 0a01 	add.w	sl, sl, #1
 8004df8:	9304      	str	r3, [sp, #16]
 8004dfa:	9307      	str	r3, [sp, #28]
 8004dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e00:	931a      	str	r3, [sp, #104]	; 0x68
 8004e02:	4654      	mov	r4, sl
 8004e04:	2205      	movs	r2, #5
 8004e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0a:	4858      	ldr	r0, [pc, #352]	; (8004f6c <_vfiprintf_r+0x24c>)
 8004e0c:	f7fb f9b8 	bl	8000180 <memchr>
 8004e10:	9a04      	ldr	r2, [sp, #16]
 8004e12:	b9d8      	cbnz	r0, 8004e4c <_vfiprintf_r+0x12c>
 8004e14:	06d1      	lsls	r1, r2, #27
 8004e16:	bf44      	itt	mi
 8004e18:	2320      	movmi	r3, #32
 8004e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e1e:	0713      	lsls	r3, r2, #28
 8004e20:	bf44      	itt	mi
 8004e22:	232b      	movmi	r3, #43	; 0x2b
 8004e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e28:	f89a 3000 	ldrb.w	r3, [sl]
 8004e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e2e:	d015      	beq.n	8004e5c <_vfiprintf_r+0x13c>
 8004e30:	9a07      	ldr	r2, [sp, #28]
 8004e32:	4654      	mov	r4, sl
 8004e34:	2000      	movs	r0, #0
 8004e36:	f04f 0c0a 	mov.w	ip, #10
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e40:	3b30      	subs	r3, #48	; 0x30
 8004e42:	2b09      	cmp	r3, #9
 8004e44:	d94e      	bls.n	8004ee4 <_vfiprintf_r+0x1c4>
 8004e46:	b1b0      	cbz	r0, 8004e76 <_vfiprintf_r+0x156>
 8004e48:	9207      	str	r2, [sp, #28]
 8004e4a:	e014      	b.n	8004e76 <_vfiprintf_r+0x156>
 8004e4c:	eba0 0308 	sub.w	r3, r0, r8
 8004e50:	fa09 f303 	lsl.w	r3, r9, r3
 8004e54:	4313      	orrs	r3, r2
 8004e56:	9304      	str	r3, [sp, #16]
 8004e58:	46a2      	mov	sl, r4
 8004e5a:	e7d2      	b.n	8004e02 <_vfiprintf_r+0xe2>
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	1d19      	adds	r1, r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	9103      	str	r1, [sp, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bfbb      	ittet	lt
 8004e68:	425b      	neglt	r3, r3
 8004e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e6e:	9307      	strge	r3, [sp, #28]
 8004e70:	9307      	strlt	r3, [sp, #28]
 8004e72:	bfb8      	it	lt
 8004e74:	9204      	strlt	r2, [sp, #16]
 8004e76:	7823      	ldrb	r3, [r4, #0]
 8004e78:	2b2e      	cmp	r3, #46	; 0x2e
 8004e7a:	d10c      	bne.n	8004e96 <_vfiprintf_r+0x176>
 8004e7c:	7863      	ldrb	r3, [r4, #1]
 8004e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e80:	d135      	bne.n	8004eee <_vfiprintf_r+0x1ce>
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	1d1a      	adds	r2, r3, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	9203      	str	r2, [sp, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bfb8      	it	lt
 8004e8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e92:	3402      	adds	r4, #2
 8004e94:	9305      	str	r3, [sp, #20]
 8004e96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f7c <_vfiprintf_r+0x25c>
 8004e9a:	7821      	ldrb	r1, [r4, #0]
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f7fb f96e 	bl	8000180 <memchr>
 8004ea4:	b140      	cbz	r0, 8004eb8 <_vfiprintf_r+0x198>
 8004ea6:	2340      	movs	r3, #64	; 0x40
 8004ea8:	eba0 000a 	sub.w	r0, r0, sl
 8004eac:	fa03 f000 	lsl.w	r0, r3, r0
 8004eb0:	9b04      	ldr	r3, [sp, #16]
 8004eb2:	4303      	orrs	r3, r0
 8004eb4:	3401      	adds	r4, #1
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebc:	482c      	ldr	r0, [pc, #176]	; (8004f70 <_vfiprintf_r+0x250>)
 8004ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ec2:	2206      	movs	r2, #6
 8004ec4:	f7fb f95c 	bl	8000180 <memchr>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d03f      	beq.n	8004f4c <_vfiprintf_r+0x22c>
 8004ecc:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <_vfiprintf_r+0x254>)
 8004ece:	bb1b      	cbnz	r3, 8004f18 <_vfiprintf_r+0x1f8>
 8004ed0:	9b03      	ldr	r3, [sp, #12]
 8004ed2:	3307      	adds	r3, #7
 8004ed4:	f023 0307 	bic.w	r3, r3, #7
 8004ed8:	3308      	adds	r3, #8
 8004eda:	9303      	str	r3, [sp, #12]
 8004edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ede:	443b      	add	r3, r7
 8004ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee2:	e767      	b.n	8004db4 <_vfiprintf_r+0x94>
 8004ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ee8:	460c      	mov	r4, r1
 8004eea:	2001      	movs	r0, #1
 8004eec:	e7a5      	b.n	8004e3a <_vfiprintf_r+0x11a>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	3401      	adds	r4, #1
 8004ef2:	9305      	str	r3, [sp, #20]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f04f 0c0a 	mov.w	ip, #10
 8004efa:	4620      	mov	r0, r4
 8004efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f00:	3a30      	subs	r2, #48	; 0x30
 8004f02:	2a09      	cmp	r2, #9
 8004f04:	d903      	bls.n	8004f0e <_vfiprintf_r+0x1ee>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0c5      	beq.n	8004e96 <_vfiprintf_r+0x176>
 8004f0a:	9105      	str	r1, [sp, #20]
 8004f0c:	e7c3      	b.n	8004e96 <_vfiprintf_r+0x176>
 8004f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f12:	4604      	mov	r4, r0
 8004f14:	2301      	movs	r3, #1
 8004f16:	e7f0      	b.n	8004efa <_vfiprintf_r+0x1da>
 8004f18:	ab03      	add	r3, sp, #12
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	462a      	mov	r2, r5
 8004f1e:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <_vfiprintf_r+0x258>)
 8004f20:	a904      	add	r1, sp, #16
 8004f22:	4630      	mov	r0, r6
 8004f24:	f3af 8000 	nop.w
 8004f28:	4607      	mov	r7, r0
 8004f2a:	1c78      	adds	r0, r7, #1
 8004f2c:	d1d6      	bne.n	8004edc <_vfiprintf_r+0x1bc>
 8004f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f30:	07d9      	lsls	r1, r3, #31
 8004f32:	d405      	bmi.n	8004f40 <_vfiprintf_r+0x220>
 8004f34:	89ab      	ldrh	r3, [r5, #12]
 8004f36:	059a      	lsls	r2, r3, #22
 8004f38:	d402      	bmi.n	8004f40 <_vfiprintf_r+0x220>
 8004f3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f3c:	f7ff fe31 	bl	8004ba2 <__retarget_lock_release_recursive>
 8004f40:	89ab      	ldrh	r3, [r5, #12]
 8004f42:	065b      	lsls	r3, r3, #25
 8004f44:	f53f af12 	bmi.w	8004d6c <_vfiprintf_r+0x4c>
 8004f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f4a:	e711      	b.n	8004d70 <_vfiprintf_r+0x50>
 8004f4c:	ab03      	add	r3, sp, #12
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	462a      	mov	r2, r5
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <_vfiprintf_r+0x258>)
 8004f54:	a904      	add	r1, sp, #16
 8004f56:	4630      	mov	r0, r6
 8004f58:	f000 f880 	bl	800505c <_printf_i>
 8004f5c:	e7e4      	b.n	8004f28 <_vfiprintf_r+0x208>
 8004f5e:	bf00      	nop
 8004f60:	08005a10 	.word	0x08005a10
 8004f64:	08005a30 	.word	0x08005a30
 8004f68:	080059f0 	.word	0x080059f0
 8004f6c:	08005a50 	.word	0x08005a50
 8004f70:	08005a5a 	.word	0x08005a5a
 8004f74:	00000000 	.word	0x00000000
 8004f78:	08004cfb 	.word	0x08004cfb
 8004f7c:	08005a56 	.word	0x08005a56

08004f80 <_printf_common>:
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	4616      	mov	r6, r2
 8004f86:	4699      	mov	r9, r3
 8004f88:	688a      	ldr	r2, [r1, #8]
 8004f8a:	690b      	ldr	r3, [r1, #16]
 8004f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bfb8      	it	lt
 8004f94:	4613      	movlt	r3, r2
 8004f96:	6033      	str	r3, [r6, #0]
 8004f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	b10a      	cbz	r2, 8004fa6 <_printf_common+0x26>
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	6033      	str	r3, [r6, #0]
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	0699      	lsls	r1, r3, #26
 8004faa:	bf42      	ittt	mi
 8004fac:	6833      	ldrmi	r3, [r6, #0]
 8004fae:	3302      	addmi	r3, #2
 8004fb0:	6033      	strmi	r3, [r6, #0]
 8004fb2:	6825      	ldr	r5, [r4, #0]
 8004fb4:	f015 0506 	ands.w	r5, r5, #6
 8004fb8:	d106      	bne.n	8004fc8 <_printf_common+0x48>
 8004fba:	f104 0a19 	add.w	sl, r4, #25
 8004fbe:	68e3      	ldr	r3, [r4, #12]
 8004fc0:	6832      	ldr	r2, [r6, #0]
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	42ab      	cmp	r3, r5
 8004fc6:	dc26      	bgt.n	8005016 <_printf_common+0x96>
 8004fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fcc:	1e13      	subs	r3, r2, #0
 8004fce:	6822      	ldr	r2, [r4, #0]
 8004fd0:	bf18      	it	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	0692      	lsls	r2, r2, #26
 8004fd6:	d42b      	bmi.n	8005030 <_printf_common+0xb0>
 8004fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fdc:	4649      	mov	r1, r9
 8004fde:	4638      	mov	r0, r7
 8004fe0:	47c0      	blx	r8
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d01e      	beq.n	8005024 <_printf_common+0xa4>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	68e5      	ldr	r5, [r4, #12]
 8004fea:	6832      	ldr	r2, [r6, #0]
 8004fec:	f003 0306 	and.w	r3, r3, #6
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	bf08      	it	eq
 8004ff4:	1aad      	subeq	r5, r5, r2
 8004ff6:	68a3      	ldr	r3, [r4, #8]
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	bf0c      	ite	eq
 8004ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005000:	2500      	movne	r5, #0
 8005002:	4293      	cmp	r3, r2
 8005004:	bfc4      	itt	gt
 8005006:	1a9b      	subgt	r3, r3, r2
 8005008:	18ed      	addgt	r5, r5, r3
 800500a:	2600      	movs	r6, #0
 800500c:	341a      	adds	r4, #26
 800500e:	42b5      	cmp	r5, r6
 8005010:	d11a      	bne.n	8005048 <_printf_common+0xc8>
 8005012:	2000      	movs	r0, #0
 8005014:	e008      	b.n	8005028 <_printf_common+0xa8>
 8005016:	2301      	movs	r3, #1
 8005018:	4652      	mov	r2, sl
 800501a:	4649      	mov	r1, r9
 800501c:	4638      	mov	r0, r7
 800501e:	47c0      	blx	r8
 8005020:	3001      	adds	r0, #1
 8005022:	d103      	bne.n	800502c <_printf_common+0xac>
 8005024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502c:	3501      	adds	r5, #1
 800502e:	e7c6      	b.n	8004fbe <_printf_common+0x3e>
 8005030:	18e1      	adds	r1, r4, r3
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	2030      	movs	r0, #48	; 0x30
 8005036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800503a:	4422      	add	r2, r4
 800503c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005044:	3302      	adds	r3, #2
 8005046:	e7c7      	b.n	8004fd8 <_printf_common+0x58>
 8005048:	2301      	movs	r3, #1
 800504a:	4622      	mov	r2, r4
 800504c:	4649      	mov	r1, r9
 800504e:	4638      	mov	r0, r7
 8005050:	47c0      	blx	r8
 8005052:	3001      	adds	r0, #1
 8005054:	d0e6      	beq.n	8005024 <_printf_common+0xa4>
 8005056:	3601      	adds	r6, #1
 8005058:	e7d9      	b.n	800500e <_printf_common+0x8e>
	...

0800505c <_printf_i>:
 800505c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	7e0f      	ldrb	r7, [r1, #24]
 8005062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005064:	2f78      	cmp	r7, #120	; 0x78
 8005066:	4691      	mov	r9, r2
 8005068:	4680      	mov	r8, r0
 800506a:	460c      	mov	r4, r1
 800506c:	469a      	mov	sl, r3
 800506e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005072:	d807      	bhi.n	8005084 <_printf_i+0x28>
 8005074:	2f62      	cmp	r7, #98	; 0x62
 8005076:	d80a      	bhi.n	800508e <_printf_i+0x32>
 8005078:	2f00      	cmp	r7, #0
 800507a:	f000 80d8 	beq.w	800522e <_printf_i+0x1d2>
 800507e:	2f58      	cmp	r7, #88	; 0x58
 8005080:	f000 80a3 	beq.w	80051ca <_printf_i+0x16e>
 8005084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800508c:	e03a      	b.n	8005104 <_printf_i+0xa8>
 800508e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005092:	2b15      	cmp	r3, #21
 8005094:	d8f6      	bhi.n	8005084 <_printf_i+0x28>
 8005096:	a101      	add	r1, pc, #4	; (adr r1, 800509c <_printf_i+0x40>)
 8005098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800509c:	080050f5 	.word	0x080050f5
 80050a0:	08005109 	.word	0x08005109
 80050a4:	08005085 	.word	0x08005085
 80050a8:	08005085 	.word	0x08005085
 80050ac:	08005085 	.word	0x08005085
 80050b0:	08005085 	.word	0x08005085
 80050b4:	08005109 	.word	0x08005109
 80050b8:	08005085 	.word	0x08005085
 80050bc:	08005085 	.word	0x08005085
 80050c0:	08005085 	.word	0x08005085
 80050c4:	08005085 	.word	0x08005085
 80050c8:	08005215 	.word	0x08005215
 80050cc:	08005139 	.word	0x08005139
 80050d0:	080051f7 	.word	0x080051f7
 80050d4:	08005085 	.word	0x08005085
 80050d8:	08005085 	.word	0x08005085
 80050dc:	08005237 	.word	0x08005237
 80050e0:	08005085 	.word	0x08005085
 80050e4:	08005139 	.word	0x08005139
 80050e8:	08005085 	.word	0x08005085
 80050ec:	08005085 	.word	0x08005085
 80050f0:	080051ff 	.word	0x080051ff
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	1d1a      	adds	r2, r3, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	602a      	str	r2, [r5, #0]
 80050fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005104:	2301      	movs	r3, #1
 8005106:	e0a3      	b.n	8005250 <_printf_i+0x1f4>
 8005108:	6820      	ldr	r0, [r4, #0]
 800510a:	6829      	ldr	r1, [r5, #0]
 800510c:	0606      	lsls	r6, r0, #24
 800510e:	f101 0304 	add.w	r3, r1, #4
 8005112:	d50a      	bpl.n	800512a <_printf_i+0xce>
 8005114:	680e      	ldr	r6, [r1, #0]
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	2e00      	cmp	r6, #0
 800511a:	da03      	bge.n	8005124 <_printf_i+0xc8>
 800511c:	232d      	movs	r3, #45	; 0x2d
 800511e:	4276      	negs	r6, r6
 8005120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005124:	485e      	ldr	r0, [pc, #376]	; (80052a0 <_printf_i+0x244>)
 8005126:	230a      	movs	r3, #10
 8005128:	e019      	b.n	800515e <_printf_i+0x102>
 800512a:	680e      	ldr	r6, [r1, #0]
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005132:	bf18      	it	ne
 8005134:	b236      	sxthne	r6, r6
 8005136:	e7ef      	b.n	8005118 <_printf_i+0xbc>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	1d19      	adds	r1, r3, #4
 800513e:	6029      	str	r1, [r5, #0]
 8005140:	0601      	lsls	r1, r0, #24
 8005142:	d501      	bpl.n	8005148 <_printf_i+0xec>
 8005144:	681e      	ldr	r6, [r3, #0]
 8005146:	e002      	b.n	800514e <_printf_i+0xf2>
 8005148:	0646      	lsls	r6, r0, #25
 800514a:	d5fb      	bpl.n	8005144 <_printf_i+0xe8>
 800514c:	881e      	ldrh	r6, [r3, #0]
 800514e:	4854      	ldr	r0, [pc, #336]	; (80052a0 <_printf_i+0x244>)
 8005150:	2f6f      	cmp	r7, #111	; 0x6f
 8005152:	bf0c      	ite	eq
 8005154:	2308      	moveq	r3, #8
 8005156:	230a      	movne	r3, #10
 8005158:	2100      	movs	r1, #0
 800515a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800515e:	6865      	ldr	r5, [r4, #4]
 8005160:	60a5      	str	r5, [r4, #8]
 8005162:	2d00      	cmp	r5, #0
 8005164:	bfa2      	ittt	ge
 8005166:	6821      	ldrge	r1, [r4, #0]
 8005168:	f021 0104 	bicge.w	r1, r1, #4
 800516c:	6021      	strge	r1, [r4, #0]
 800516e:	b90e      	cbnz	r6, 8005174 <_printf_i+0x118>
 8005170:	2d00      	cmp	r5, #0
 8005172:	d04d      	beq.n	8005210 <_printf_i+0x1b4>
 8005174:	4615      	mov	r5, r2
 8005176:	fbb6 f1f3 	udiv	r1, r6, r3
 800517a:	fb03 6711 	mls	r7, r3, r1, r6
 800517e:	5dc7      	ldrb	r7, [r0, r7]
 8005180:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005184:	4637      	mov	r7, r6
 8005186:	42bb      	cmp	r3, r7
 8005188:	460e      	mov	r6, r1
 800518a:	d9f4      	bls.n	8005176 <_printf_i+0x11a>
 800518c:	2b08      	cmp	r3, #8
 800518e:	d10b      	bne.n	80051a8 <_printf_i+0x14c>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	07de      	lsls	r6, r3, #31
 8005194:	d508      	bpl.n	80051a8 <_printf_i+0x14c>
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	6861      	ldr	r1, [r4, #4]
 800519a:	4299      	cmp	r1, r3
 800519c:	bfde      	ittt	le
 800519e:	2330      	movle	r3, #48	; 0x30
 80051a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80051a8:	1b52      	subs	r2, r2, r5
 80051aa:	6122      	str	r2, [r4, #16]
 80051ac:	f8cd a000 	str.w	sl, [sp]
 80051b0:	464b      	mov	r3, r9
 80051b2:	aa03      	add	r2, sp, #12
 80051b4:	4621      	mov	r1, r4
 80051b6:	4640      	mov	r0, r8
 80051b8:	f7ff fee2 	bl	8004f80 <_printf_common>
 80051bc:	3001      	adds	r0, #1
 80051be:	d14c      	bne.n	800525a <_printf_i+0x1fe>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c4:	b004      	add	sp, #16
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ca:	4835      	ldr	r0, [pc, #212]	; (80052a0 <_printf_i+0x244>)
 80051cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051d0:	6829      	ldr	r1, [r5, #0]
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80051d8:	6029      	str	r1, [r5, #0]
 80051da:	061d      	lsls	r5, r3, #24
 80051dc:	d514      	bpl.n	8005208 <_printf_i+0x1ac>
 80051de:	07df      	lsls	r7, r3, #31
 80051e0:	bf44      	itt	mi
 80051e2:	f043 0320 	orrmi.w	r3, r3, #32
 80051e6:	6023      	strmi	r3, [r4, #0]
 80051e8:	b91e      	cbnz	r6, 80051f2 <_printf_i+0x196>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f023 0320 	bic.w	r3, r3, #32
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	2310      	movs	r3, #16
 80051f4:	e7b0      	b.n	8005158 <_printf_i+0xfc>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	f043 0320 	orr.w	r3, r3, #32
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	2378      	movs	r3, #120	; 0x78
 8005200:	4828      	ldr	r0, [pc, #160]	; (80052a4 <_printf_i+0x248>)
 8005202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005206:	e7e3      	b.n	80051d0 <_printf_i+0x174>
 8005208:	0659      	lsls	r1, r3, #25
 800520a:	bf48      	it	mi
 800520c:	b2b6      	uxthmi	r6, r6
 800520e:	e7e6      	b.n	80051de <_printf_i+0x182>
 8005210:	4615      	mov	r5, r2
 8005212:	e7bb      	b.n	800518c <_printf_i+0x130>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	6826      	ldr	r6, [r4, #0]
 8005218:	6961      	ldr	r1, [r4, #20]
 800521a:	1d18      	adds	r0, r3, #4
 800521c:	6028      	str	r0, [r5, #0]
 800521e:	0635      	lsls	r5, r6, #24
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	d501      	bpl.n	8005228 <_printf_i+0x1cc>
 8005224:	6019      	str	r1, [r3, #0]
 8005226:	e002      	b.n	800522e <_printf_i+0x1d2>
 8005228:	0670      	lsls	r0, r6, #25
 800522a:	d5fb      	bpl.n	8005224 <_printf_i+0x1c8>
 800522c:	8019      	strh	r1, [r3, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	4615      	mov	r5, r2
 8005234:	e7ba      	b.n	80051ac <_printf_i+0x150>
 8005236:	682b      	ldr	r3, [r5, #0]
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	602a      	str	r2, [r5, #0]
 800523c:	681d      	ldr	r5, [r3, #0]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	2100      	movs	r1, #0
 8005242:	4628      	mov	r0, r5
 8005244:	f7fa ff9c 	bl	8000180 <memchr>
 8005248:	b108      	cbz	r0, 800524e <_printf_i+0x1f2>
 800524a:	1b40      	subs	r0, r0, r5
 800524c:	6060      	str	r0, [r4, #4]
 800524e:	6863      	ldr	r3, [r4, #4]
 8005250:	6123      	str	r3, [r4, #16]
 8005252:	2300      	movs	r3, #0
 8005254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005258:	e7a8      	b.n	80051ac <_printf_i+0x150>
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	462a      	mov	r2, r5
 800525e:	4649      	mov	r1, r9
 8005260:	4640      	mov	r0, r8
 8005262:	47d0      	blx	sl
 8005264:	3001      	adds	r0, #1
 8005266:	d0ab      	beq.n	80051c0 <_printf_i+0x164>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	079b      	lsls	r3, r3, #30
 800526c:	d413      	bmi.n	8005296 <_printf_i+0x23a>
 800526e:	68e0      	ldr	r0, [r4, #12]
 8005270:	9b03      	ldr	r3, [sp, #12]
 8005272:	4298      	cmp	r0, r3
 8005274:	bfb8      	it	lt
 8005276:	4618      	movlt	r0, r3
 8005278:	e7a4      	b.n	80051c4 <_printf_i+0x168>
 800527a:	2301      	movs	r3, #1
 800527c:	4632      	mov	r2, r6
 800527e:	4649      	mov	r1, r9
 8005280:	4640      	mov	r0, r8
 8005282:	47d0      	blx	sl
 8005284:	3001      	adds	r0, #1
 8005286:	d09b      	beq.n	80051c0 <_printf_i+0x164>
 8005288:	3501      	adds	r5, #1
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	9903      	ldr	r1, [sp, #12]
 800528e:	1a5b      	subs	r3, r3, r1
 8005290:	42ab      	cmp	r3, r5
 8005292:	dcf2      	bgt.n	800527a <_printf_i+0x21e>
 8005294:	e7eb      	b.n	800526e <_printf_i+0x212>
 8005296:	2500      	movs	r5, #0
 8005298:	f104 0619 	add.w	r6, r4, #25
 800529c:	e7f5      	b.n	800528a <_printf_i+0x22e>
 800529e:	bf00      	nop
 80052a0:	08005a61 	.word	0x08005a61
 80052a4:	08005a72 	.word	0x08005a72

080052a8 <_sbrk_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d06      	ldr	r5, [pc, #24]	; (80052c4 <_sbrk_r+0x1c>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4604      	mov	r4, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	602b      	str	r3, [r5, #0]
 80052b4:	f7fb fe62 	bl	8000f7c <_sbrk>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_sbrk_r+0x1a>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_sbrk_r+0x1a>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	20000474 	.word	0x20000474

080052c8 <__sread>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	460c      	mov	r4, r1
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	f000 fab2 	bl	8005838 <_read_r>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	bfab      	itete	ge
 80052d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052da:	89a3      	ldrhlt	r3, [r4, #12]
 80052dc:	181b      	addge	r3, r3, r0
 80052de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052e2:	bfac      	ite	ge
 80052e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052e6:	81a3      	strhlt	r3, [r4, #12]
 80052e8:	bd10      	pop	{r4, pc}

080052ea <__swrite>:
 80052ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ee:	461f      	mov	r7, r3
 80052f0:	898b      	ldrh	r3, [r1, #12]
 80052f2:	05db      	lsls	r3, r3, #23
 80052f4:	4605      	mov	r5, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	4616      	mov	r6, r2
 80052fa:	d505      	bpl.n	8005308 <__swrite+0x1e>
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	2302      	movs	r3, #2
 8005302:	2200      	movs	r2, #0
 8005304:	f000 f9c8 	bl	8005698 <_lseek_r>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	4632      	mov	r2, r6
 8005316:	463b      	mov	r3, r7
 8005318:	4628      	mov	r0, r5
 800531a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	f000 b869 	b.w	80053f4 <_write_r>

08005322 <__sseek>:
 8005322:	b510      	push	{r4, lr}
 8005324:	460c      	mov	r4, r1
 8005326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532a:	f000 f9b5 	bl	8005698 <_lseek_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	bf15      	itete	ne
 8005334:	6560      	strne	r0, [r4, #84]	; 0x54
 8005336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800533a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800533e:	81a3      	strheq	r3, [r4, #12]
 8005340:	bf18      	it	ne
 8005342:	81a3      	strhne	r3, [r4, #12]
 8005344:	bd10      	pop	{r4, pc}

08005346 <__sclose>:
 8005346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534a:	f000 b8d3 	b.w	80054f4 <_close_r>
	...

08005350 <__swbuf_r>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	460e      	mov	r6, r1
 8005354:	4614      	mov	r4, r2
 8005356:	4605      	mov	r5, r0
 8005358:	b118      	cbz	r0, 8005362 <__swbuf_r+0x12>
 800535a:	6983      	ldr	r3, [r0, #24]
 800535c:	b90b      	cbnz	r3, 8005362 <__swbuf_r+0x12>
 800535e:	f7ff fb81 	bl	8004a64 <__sinit>
 8005362:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <__swbuf_r+0x98>)
 8005364:	429c      	cmp	r4, r3
 8005366:	d12b      	bne.n	80053c0 <__swbuf_r+0x70>
 8005368:	686c      	ldr	r4, [r5, #4]
 800536a:	69a3      	ldr	r3, [r4, #24]
 800536c:	60a3      	str	r3, [r4, #8]
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	071a      	lsls	r2, r3, #28
 8005372:	d52f      	bpl.n	80053d4 <__swbuf_r+0x84>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	b36b      	cbz	r3, 80053d4 <__swbuf_r+0x84>
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	6820      	ldr	r0, [r4, #0]
 800537c:	1ac0      	subs	r0, r0, r3
 800537e:	6963      	ldr	r3, [r4, #20]
 8005380:	b2f6      	uxtb	r6, r6
 8005382:	4283      	cmp	r3, r0
 8005384:	4637      	mov	r7, r6
 8005386:	dc04      	bgt.n	8005392 <__swbuf_r+0x42>
 8005388:	4621      	mov	r1, r4
 800538a:	4628      	mov	r0, r5
 800538c:	f000 f948 	bl	8005620 <_fflush_r>
 8005390:	bb30      	cbnz	r0, 80053e0 <__swbuf_r+0x90>
 8005392:	68a3      	ldr	r3, [r4, #8]
 8005394:	3b01      	subs	r3, #1
 8005396:	60a3      	str	r3, [r4, #8]
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	6022      	str	r2, [r4, #0]
 800539e:	701e      	strb	r6, [r3, #0]
 80053a0:	6963      	ldr	r3, [r4, #20]
 80053a2:	3001      	adds	r0, #1
 80053a4:	4283      	cmp	r3, r0
 80053a6:	d004      	beq.n	80053b2 <__swbuf_r+0x62>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	07db      	lsls	r3, r3, #31
 80053ac:	d506      	bpl.n	80053bc <__swbuf_r+0x6c>
 80053ae:	2e0a      	cmp	r6, #10
 80053b0:	d104      	bne.n	80053bc <__swbuf_r+0x6c>
 80053b2:	4621      	mov	r1, r4
 80053b4:	4628      	mov	r0, r5
 80053b6:	f000 f933 	bl	8005620 <_fflush_r>
 80053ba:	b988      	cbnz	r0, 80053e0 <__swbuf_r+0x90>
 80053bc:	4638      	mov	r0, r7
 80053be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <__swbuf_r+0x9c>)
 80053c2:	429c      	cmp	r4, r3
 80053c4:	d101      	bne.n	80053ca <__swbuf_r+0x7a>
 80053c6:	68ac      	ldr	r4, [r5, #8]
 80053c8:	e7cf      	b.n	800536a <__swbuf_r+0x1a>
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <__swbuf_r+0xa0>)
 80053cc:	429c      	cmp	r4, r3
 80053ce:	bf08      	it	eq
 80053d0:	68ec      	ldreq	r4, [r5, #12]
 80053d2:	e7ca      	b.n	800536a <__swbuf_r+0x1a>
 80053d4:	4621      	mov	r1, r4
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 f81e 	bl	8005418 <__swsetup_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d0cb      	beq.n	8005378 <__swbuf_r+0x28>
 80053e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80053e4:	e7ea      	b.n	80053bc <__swbuf_r+0x6c>
 80053e6:	bf00      	nop
 80053e8:	08005a10 	.word	0x08005a10
 80053ec:	08005a30 	.word	0x08005a30
 80053f0:	080059f0 	.word	0x080059f0

080053f4 <_write_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4d07      	ldr	r5, [pc, #28]	; (8005414 <_write_r+0x20>)
 80053f8:	4604      	mov	r4, r0
 80053fa:	4608      	mov	r0, r1
 80053fc:	4611      	mov	r1, r2
 80053fe:	2200      	movs	r2, #0
 8005400:	602a      	str	r2, [r5, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	f7fb fd69 	bl	8000eda <_write>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d102      	bne.n	8005412 <_write_r+0x1e>
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	b103      	cbz	r3, 8005412 <_write_r+0x1e>
 8005410:	6023      	str	r3, [r4, #0]
 8005412:	bd38      	pop	{r3, r4, r5, pc}
 8005414:	20000474 	.word	0x20000474

08005418 <__swsetup_r>:
 8005418:	4b32      	ldr	r3, [pc, #200]	; (80054e4 <__swsetup_r+0xcc>)
 800541a:	b570      	push	{r4, r5, r6, lr}
 800541c:	681d      	ldr	r5, [r3, #0]
 800541e:	4606      	mov	r6, r0
 8005420:	460c      	mov	r4, r1
 8005422:	b125      	cbz	r5, 800542e <__swsetup_r+0x16>
 8005424:	69ab      	ldr	r3, [r5, #24]
 8005426:	b913      	cbnz	r3, 800542e <__swsetup_r+0x16>
 8005428:	4628      	mov	r0, r5
 800542a:	f7ff fb1b 	bl	8004a64 <__sinit>
 800542e:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <__swsetup_r+0xd0>)
 8005430:	429c      	cmp	r4, r3
 8005432:	d10f      	bne.n	8005454 <__swsetup_r+0x3c>
 8005434:	686c      	ldr	r4, [r5, #4]
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800543c:	0719      	lsls	r1, r3, #28
 800543e:	d42c      	bmi.n	800549a <__swsetup_r+0x82>
 8005440:	06dd      	lsls	r5, r3, #27
 8005442:	d411      	bmi.n	8005468 <__swsetup_r+0x50>
 8005444:	2309      	movs	r3, #9
 8005446:	6033      	str	r3, [r6, #0]
 8005448:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800544c:	81a3      	strh	r3, [r4, #12]
 800544e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005452:	e03e      	b.n	80054d2 <__swsetup_r+0xba>
 8005454:	4b25      	ldr	r3, [pc, #148]	; (80054ec <__swsetup_r+0xd4>)
 8005456:	429c      	cmp	r4, r3
 8005458:	d101      	bne.n	800545e <__swsetup_r+0x46>
 800545a:	68ac      	ldr	r4, [r5, #8]
 800545c:	e7eb      	b.n	8005436 <__swsetup_r+0x1e>
 800545e:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <__swsetup_r+0xd8>)
 8005460:	429c      	cmp	r4, r3
 8005462:	bf08      	it	eq
 8005464:	68ec      	ldreq	r4, [r5, #12]
 8005466:	e7e6      	b.n	8005436 <__swsetup_r+0x1e>
 8005468:	0758      	lsls	r0, r3, #29
 800546a:	d512      	bpl.n	8005492 <__swsetup_r+0x7a>
 800546c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800546e:	b141      	cbz	r1, 8005482 <__swsetup_r+0x6a>
 8005470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005474:	4299      	cmp	r1, r3
 8005476:	d002      	beq.n	800547e <__swsetup_r+0x66>
 8005478:	4630      	mov	r0, r6
 800547a:	f000 f991 	bl	80057a0 <_free_r>
 800547e:	2300      	movs	r3, #0
 8005480:	6363      	str	r3, [r4, #52]	; 0x34
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005488:	81a3      	strh	r3, [r4, #12]
 800548a:	2300      	movs	r3, #0
 800548c:	6063      	str	r3, [r4, #4]
 800548e:	6923      	ldr	r3, [r4, #16]
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	f043 0308 	orr.w	r3, r3, #8
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	b94b      	cbnz	r3, 80054b2 <__swsetup_r+0x9a>
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a8:	d003      	beq.n	80054b2 <__swsetup_r+0x9a>
 80054aa:	4621      	mov	r1, r4
 80054ac:	4630      	mov	r0, r6
 80054ae:	f000 f92b 	bl	8005708 <__smakebuf_r>
 80054b2:	89a0      	ldrh	r0, [r4, #12]
 80054b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054b8:	f010 0301 	ands.w	r3, r0, #1
 80054bc:	d00a      	beq.n	80054d4 <__swsetup_r+0xbc>
 80054be:	2300      	movs	r3, #0
 80054c0:	60a3      	str	r3, [r4, #8]
 80054c2:	6963      	ldr	r3, [r4, #20]
 80054c4:	425b      	negs	r3, r3
 80054c6:	61a3      	str	r3, [r4, #24]
 80054c8:	6923      	ldr	r3, [r4, #16]
 80054ca:	b943      	cbnz	r3, 80054de <__swsetup_r+0xc6>
 80054cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054d0:	d1ba      	bne.n	8005448 <__swsetup_r+0x30>
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	0781      	lsls	r1, r0, #30
 80054d6:	bf58      	it	pl
 80054d8:	6963      	ldrpl	r3, [r4, #20]
 80054da:	60a3      	str	r3, [r4, #8]
 80054dc:	e7f4      	b.n	80054c8 <__swsetup_r+0xb0>
 80054de:	2000      	movs	r0, #0
 80054e0:	e7f7      	b.n	80054d2 <__swsetup_r+0xba>
 80054e2:	bf00      	nop
 80054e4:	2000001c 	.word	0x2000001c
 80054e8:	08005a10 	.word	0x08005a10
 80054ec:	08005a30 	.word	0x08005a30
 80054f0:	080059f0 	.word	0x080059f0

080054f4 <_close_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4d06      	ldr	r5, [pc, #24]	; (8005510 <_close_r+0x1c>)
 80054f8:	2300      	movs	r3, #0
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	f7fb fd07 	bl	8000f12 <_close>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d102      	bne.n	800550e <_close_r+0x1a>
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	b103      	cbz	r3, 800550e <_close_r+0x1a>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	20000474 	.word	0x20000474

08005514 <__sflush_r>:
 8005514:	898a      	ldrh	r2, [r1, #12]
 8005516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551a:	4605      	mov	r5, r0
 800551c:	0710      	lsls	r0, r2, #28
 800551e:	460c      	mov	r4, r1
 8005520:	d458      	bmi.n	80055d4 <__sflush_r+0xc0>
 8005522:	684b      	ldr	r3, [r1, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	dc05      	bgt.n	8005534 <__sflush_r+0x20>
 8005528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	dc02      	bgt.n	8005534 <__sflush_r+0x20>
 800552e:	2000      	movs	r0, #0
 8005530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005536:	2e00      	cmp	r6, #0
 8005538:	d0f9      	beq.n	800552e <__sflush_r+0x1a>
 800553a:	2300      	movs	r3, #0
 800553c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005540:	682f      	ldr	r7, [r5, #0]
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	d032      	beq.n	80055ac <__sflush_r+0x98>
 8005546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	075a      	lsls	r2, r3, #29
 800554c:	d505      	bpl.n	800555a <__sflush_r+0x46>
 800554e:	6863      	ldr	r3, [r4, #4]
 8005550:	1ac0      	subs	r0, r0, r3
 8005552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005554:	b10b      	cbz	r3, 800555a <__sflush_r+0x46>
 8005556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005558:	1ac0      	subs	r0, r0, r3
 800555a:	2300      	movs	r3, #0
 800555c:	4602      	mov	r2, r0
 800555e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005560:	6a21      	ldr	r1, [r4, #32]
 8005562:	4628      	mov	r0, r5
 8005564:	47b0      	blx	r6
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	d106      	bne.n	800557a <__sflush_r+0x66>
 800556c:	6829      	ldr	r1, [r5, #0]
 800556e:	291d      	cmp	r1, #29
 8005570:	d82c      	bhi.n	80055cc <__sflush_r+0xb8>
 8005572:	4a2a      	ldr	r2, [pc, #168]	; (800561c <__sflush_r+0x108>)
 8005574:	40ca      	lsrs	r2, r1
 8005576:	07d6      	lsls	r6, r2, #31
 8005578:	d528      	bpl.n	80055cc <__sflush_r+0xb8>
 800557a:	2200      	movs	r2, #0
 800557c:	6062      	str	r2, [r4, #4]
 800557e:	04d9      	lsls	r1, r3, #19
 8005580:	6922      	ldr	r2, [r4, #16]
 8005582:	6022      	str	r2, [r4, #0]
 8005584:	d504      	bpl.n	8005590 <__sflush_r+0x7c>
 8005586:	1c42      	adds	r2, r0, #1
 8005588:	d101      	bne.n	800558e <__sflush_r+0x7a>
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	b903      	cbnz	r3, 8005590 <__sflush_r+0x7c>
 800558e:	6560      	str	r0, [r4, #84]	; 0x54
 8005590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005592:	602f      	str	r7, [r5, #0]
 8005594:	2900      	cmp	r1, #0
 8005596:	d0ca      	beq.n	800552e <__sflush_r+0x1a>
 8005598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800559c:	4299      	cmp	r1, r3
 800559e:	d002      	beq.n	80055a6 <__sflush_r+0x92>
 80055a0:	4628      	mov	r0, r5
 80055a2:	f000 f8fd 	bl	80057a0 <_free_r>
 80055a6:	2000      	movs	r0, #0
 80055a8:	6360      	str	r0, [r4, #52]	; 0x34
 80055aa:	e7c1      	b.n	8005530 <__sflush_r+0x1c>
 80055ac:	6a21      	ldr	r1, [r4, #32]
 80055ae:	2301      	movs	r3, #1
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b0      	blx	r6
 80055b4:	1c41      	adds	r1, r0, #1
 80055b6:	d1c7      	bne.n	8005548 <__sflush_r+0x34>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0c4      	beq.n	8005548 <__sflush_r+0x34>
 80055be:	2b1d      	cmp	r3, #29
 80055c0:	d001      	beq.n	80055c6 <__sflush_r+0xb2>
 80055c2:	2b16      	cmp	r3, #22
 80055c4:	d101      	bne.n	80055ca <__sflush_r+0xb6>
 80055c6:	602f      	str	r7, [r5, #0]
 80055c8:	e7b1      	b.n	800552e <__sflush_r+0x1a>
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d0:	81a3      	strh	r3, [r4, #12]
 80055d2:	e7ad      	b.n	8005530 <__sflush_r+0x1c>
 80055d4:	690f      	ldr	r7, [r1, #16]
 80055d6:	2f00      	cmp	r7, #0
 80055d8:	d0a9      	beq.n	800552e <__sflush_r+0x1a>
 80055da:	0793      	lsls	r3, r2, #30
 80055dc:	680e      	ldr	r6, [r1, #0]
 80055de:	bf08      	it	eq
 80055e0:	694b      	ldreq	r3, [r1, #20]
 80055e2:	600f      	str	r7, [r1, #0]
 80055e4:	bf18      	it	ne
 80055e6:	2300      	movne	r3, #0
 80055e8:	eba6 0807 	sub.w	r8, r6, r7
 80055ec:	608b      	str	r3, [r1, #8]
 80055ee:	f1b8 0f00 	cmp.w	r8, #0
 80055f2:	dd9c      	ble.n	800552e <__sflush_r+0x1a>
 80055f4:	6a21      	ldr	r1, [r4, #32]
 80055f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055f8:	4643      	mov	r3, r8
 80055fa:	463a      	mov	r2, r7
 80055fc:	4628      	mov	r0, r5
 80055fe:	47b0      	blx	r6
 8005600:	2800      	cmp	r0, #0
 8005602:	dc06      	bgt.n	8005612 <__sflush_r+0xfe>
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800560a:	81a3      	strh	r3, [r4, #12]
 800560c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005610:	e78e      	b.n	8005530 <__sflush_r+0x1c>
 8005612:	4407      	add	r7, r0
 8005614:	eba8 0800 	sub.w	r8, r8, r0
 8005618:	e7e9      	b.n	80055ee <__sflush_r+0xda>
 800561a:	bf00      	nop
 800561c:	20400001 	.word	0x20400001

08005620 <_fflush_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	690b      	ldr	r3, [r1, #16]
 8005624:	4605      	mov	r5, r0
 8005626:	460c      	mov	r4, r1
 8005628:	b913      	cbnz	r3, 8005630 <_fflush_r+0x10>
 800562a:	2500      	movs	r5, #0
 800562c:	4628      	mov	r0, r5
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	b118      	cbz	r0, 800563a <_fflush_r+0x1a>
 8005632:	6983      	ldr	r3, [r0, #24]
 8005634:	b90b      	cbnz	r3, 800563a <_fflush_r+0x1a>
 8005636:	f7ff fa15 	bl	8004a64 <__sinit>
 800563a:	4b14      	ldr	r3, [pc, #80]	; (800568c <_fflush_r+0x6c>)
 800563c:	429c      	cmp	r4, r3
 800563e:	d11b      	bne.n	8005678 <_fflush_r+0x58>
 8005640:	686c      	ldr	r4, [r5, #4]
 8005642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0ef      	beq.n	800562a <_fflush_r+0xa>
 800564a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800564c:	07d0      	lsls	r0, r2, #31
 800564e:	d404      	bmi.n	800565a <_fflush_r+0x3a>
 8005650:	0599      	lsls	r1, r3, #22
 8005652:	d402      	bmi.n	800565a <_fflush_r+0x3a>
 8005654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005656:	f7ff faa3 	bl	8004ba0 <__retarget_lock_acquire_recursive>
 800565a:	4628      	mov	r0, r5
 800565c:	4621      	mov	r1, r4
 800565e:	f7ff ff59 	bl	8005514 <__sflush_r>
 8005662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005664:	07da      	lsls	r2, r3, #31
 8005666:	4605      	mov	r5, r0
 8005668:	d4e0      	bmi.n	800562c <_fflush_r+0xc>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	059b      	lsls	r3, r3, #22
 800566e:	d4dd      	bmi.n	800562c <_fflush_r+0xc>
 8005670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005672:	f7ff fa96 	bl	8004ba2 <__retarget_lock_release_recursive>
 8005676:	e7d9      	b.n	800562c <_fflush_r+0xc>
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <_fflush_r+0x70>)
 800567a:	429c      	cmp	r4, r3
 800567c:	d101      	bne.n	8005682 <_fflush_r+0x62>
 800567e:	68ac      	ldr	r4, [r5, #8]
 8005680:	e7df      	b.n	8005642 <_fflush_r+0x22>
 8005682:	4b04      	ldr	r3, [pc, #16]	; (8005694 <_fflush_r+0x74>)
 8005684:	429c      	cmp	r4, r3
 8005686:	bf08      	it	eq
 8005688:	68ec      	ldreq	r4, [r5, #12]
 800568a:	e7da      	b.n	8005642 <_fflush_r+0x22>
 800568c:	08005a10 	.word	0x08005a10
 8005690:	08005a30 	.word	0x08005a30
 8005694:	080059f0 	.word	0x080059f0

08005698 <_lseek_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4d07      	ldr	r5, [pc, #28]	; (80056b8 <_lseek_r+0x20>)
 800569c:	4604      	mov	r4, r0
 800569e:	4608      	mov	r0, r1
 80056a0:	4611      	mov	r1, r2
 80056a2:	2200      	movs	r2, #0
 80056a4:	602a      	str	r2, [r5, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f7fb fc5a 	bl	8000f60 <_lseek>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_lseek_r+0x1e>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_lseek_r+0x1e>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	20000474 	.word	0x20000474

080056bc <__swhatbuf_r>:
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	460e      	mov	r6, r1
 80056c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c4:	2900      	cmp	r1, #0
 80056c6:	b096      	sub	sp, #88	; 0x58
 80056c8:	4614      	mov	r4, r2
 80056ca:	461d      	mov	r5, r3
 80056cc:	da08      	bge.n	80056e0 <__swhatbuf_r+0x24>
 80056ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	602a      	str	r2, [r5, #0]
 80056d6:	061a      	lsls	r2, r3, #24
 80056d8:	d410      	bmi.n	80056fc <__swhatbuf_r+0x40>
 80056da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056de:	e00e      	b.n	80056fe <__swhatbuf_r+0x42>
 80056e0:	466a      	mov	r2, sp
 80056e2:	f000 f8bb 	bl	800585c <_fstat_r>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	dbf1      	blt.n	80056ce <__swhatbuf_r+0x12>
 80056ea:	9a01      	ldr	r2, [sp, #4]
 80056ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056f4:	425a      	negs	r2, r3
 80056f6:	415a      	adcs	r2, r3
 80056f8:	602a      	str	r2, [r5, #0]
 80056fa:	e7ee      	b.n	80056da <__swhatbuf_r+0x1e>
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	2000      	movs	r0, #0
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	b016      	add	sp, #88	; 0x58
 8005704:	bd70      	pop	{r4, r5, r6, pc}
	...

08005708 <__smakebuf_r>:
 8005708:	898b      	ldrh	r3, [r1, #12]
 800570a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800570c:	079d      	lsls	r5, r3, #30
 800570e:	4606      	mov	r6, r0
 8005710:	460c      	mov	r4, r1
 8005712:	d507      	bpl.n	8005724 <__smakebuf_r+0x1c>
 8005714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	6123      	str	r3, [r4, #16]
 800571c:	2301      	movs	r3, #1
 800571e:	6163      	str	r3, [r4, #20]
 8005720:	b002      	add	sp, #8
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	ab01      	add	r3, sp, #4
 8005726:	466a      	mov	r2, sp
 8005728:	f7ff ffc8 	bl	80056bc <__swhatbuf_r>
 800572c:	9900      	ldr	r1, [sp, #0]
 800572e:	4605      	mov	r5, r0
 8005730:	4630      	mov	r0, r6
 8005732:	f7ff fa57 	bl	8004be4 <_malloc_r>
 8005736:	b948      	cbnz	r0, 800574c <__smakebuf_r+0x44>
 8005738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573c:	059a      	lsls	r2, r3, #22
 800573e:	d4ef      	bmi.n	8005720 <__smakebuf_r+0x18>
 8005740:	f023 0303 	bic.w	r3, r3, #3
 8005744:	f043 0302 	orr.w	r3, r3, #2
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	e7e3      	b.n	8005714 <__smakebuf_r+0xc>
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <__smakebuf_r+0x7c>)
 800574e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	6020      	str	r0, [r4, #0]
 8005754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	9b00      	ldr	r3, [sp, #0]
 800575c:	6163      	str	r3, [r4, #20]
 800575e:	9b01      	ldr	r3, [sp, #4]
 8005760:	6120      	str	r0, [r4, #16]
 8005762:	b15b      	cbz	r3, 800577c <__smakebuf_r+0x74>
 8005764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005768:	4630      	mov	r0, r6
 800576a:	f000 f889 	bl	8005880 <_isatty_r>
 800576e:	b128      	cbz	r0, 800577c <__smakebuf_r+0x74>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	81a3      	strh	r3, [r4, #12]
 800577c:	89a0      	ldrh	r0, [r4, #12]
 800577e:	4305      	orrs	r5, r0
 8005780:	81a5      	strh	r5, [r4, #12]
 8005782:	e7cd      	b.n	8005720 <__smakebuf_r+0x18>
 8005784:	080049fd 	.word	0x080049fd

08005788 <__malloc_lock>:
 8005788:	4801      	ldr	r0, [pc, #4]	; (8005790 <__malloc_lock+0x8>)
 800578a:	f7ff ba09 	b.w	8004ba0 <__retarget_lock_acquire_recursive>
 800578e:	bf00      	nop
 8005790:	20000468 	.word	0x20000468

08005794 <__malloc_unlock>:
 8005794:	4801      	ldr	r0, [pc, #4]	; (800579c <__malloc_unlock+0x8>)
 8005796:	f7ff ba04 	b.w	8004ba2 <__retarget_lock_release_recursive>
 800579a:	bf00      	nop
 800579c:	20000468 	.word	0x20000468

080057a0 <_free_r>:
 80057a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d044      	beq.n	8005830 <_free_r+0x90>
 80057a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057aa:	9001      	str	r0, [sp, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f1a1 0404 	sub.w	r4, r1, #4
 80057b2:	bfb8      	it	lt
 80057b4:	18e4      	addlt	r4, r4, r3
 80057b6:	f7ff ffe7 	bl	8005788 <__malloc_lock>
 80057ba:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <_free_r+0x94>)
 80057bc:	9801      	ldr	r0, [sp, #4]
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	b933      	cbnz	r3, 80057d0 <_free_r+0x30>
 80057c2:	6063      	str	r3, [r4, #4]
 80057c4:	6014      	str	r4, [r2, #0]
 80057c6:	b003      	add	sp, #12
 80057c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057cc:	f7ff bfe2 	b.w	8005794 <__malloc_unlock>
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	d908      	bls.n	80057e6 <_free_r+0x46>
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	1961      	adds	r1, r4, r5
 80057d8:	428b      	cmp	r3, r1
 80057da:	bf01      	itttt	eq
 80057dc:	6819      	ldreq	r1, [r3, #0]
 80057de:	685b      	ldreq	r3, [r3, #4]
 80057e0:	1949      	addeq	r1, r1, r5
 80057e2:	6021      	streq	r1, [r4, #0]
 80057e4:	e7ed      	b.n	80057c2 <_free_r+0x22>
 80057e6:	461a      	mov	r2, r3
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	b10b      	cbz	r3, 80057f0 <_free_r+0x50>
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d9fa      	bls.n	80057e6 <_free_r+0x46>
 80057f0:	6811      	ldr	r1, [r2, #0]
 80057f2:	1855      	adds	r5, r2, r1
 80057f4:	42a5      	cmp	r5, r4
 80057f6:	d10b      	bne.n	8005810 <_free_r+0x70>
 80057f8:	6824      	ldr	r4, [r4, #0]
 80057fa:	4421      	add	r1, r4
 80057fc:	1854      	adds	r4, r2, r1
 80057fe:	42a3      	cmp	r3, r4
 8005800:	6011      	str	r1, [r2, #0]
 8005802:	d1e0      	bne.n	80057c6 <_free_r+0x26>
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	6053      	str	r3, [r2, #4]
 800580a:	4421      	add	r1, r4
 800580c:	6011      	str	r1, [r2, #0]
 800580e:	e7da      	b.n	80057c6 <_free_r+0x26>
 8005810:	d902      	bls.n	8005818 <_free_r+0x78>
 8005812:	230c      	movs	r3, #12
 8005814:	6003      	str	r3, [r0, #0]
 8005816:	e7d6      	b.n	80057c6 <_free_r+0x26>
 8005818:	6825      	ldr	r5, [r4, #0]
 800581a:	1961      	adds	r1, r4, r5
 800581c:	428b      	cmp	r3, r1
 800581e:	bf04      	itt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	bf04      	itt	eq
 8005828:	1949      	addeq	r1, r1, r5
 800582a:	6021      	streq	r1, [r4, #0]
 800582c:	6054      	str	r4, [r2, #4]
 800582e:	e7ca      	b.n	80057c6 <_free_r+0x26>
 8005830:	b003      	add	sp, #12
 8005832:	bd30      	pop	{r4, r5, pc}
 8005834:	2000046c 	.word	0x2000046c

08005838 <_read_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d07      	ldr	r5, [pc, #28]	; (8005858 <_read_r+0x20>)
 800583c:	4604      	mov	r4, r0
 800583e:	4608      	mov	r0, r1
 8005840:	4611      	mov	r1, r2
 8005842:	2200      	movs	r2, #0
 8005844:	602a      	str	r2, [r5, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	f7fb fb2a 	bl	8000ea0 <_read>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_read_r+0x1e>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_read_r+0x1e>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20000474 	.word	0x20000474

0800585c <_fstat_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d07      	ldr	r5, [pc, #28]	; (800587c <_fstat_r+0x20>)
 8005860:	2300      	movs	r3, #0
 8005862:	4604      	mov	r4, r0
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	f7fb fb5e 	bl	8000f2a <_fstat>
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	d102      	bne.n	8005878 <_fstat_r+0x1c>
 8005872:	682b      	ldr	r3, [r5, #0]
 8005874:	b103      	cbz	r3, 8005878 <_fstat_r+0x1c>
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	bf00      	nop
 800587c:	20000474 	.word	0x20000474

08005880 <_isatty_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d06      	ldr	r5, [pc, #24]	; (800589c <_isatty_r+0x1c>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	602b      	str	r3, [r5, #0]
 800588c:	f7fb fb5d 	bl	8000f4a <_isatty>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_isatty_r+0x1a>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_isatty_r+0x1a>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	20000474 	.word	0x20000474

080058a0 <_init>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr

080058ac <_fini>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr
