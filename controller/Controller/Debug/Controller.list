
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000008  08005a6c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003f8  20000080  08005ae4  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000478  08005ae4  00020478  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015934  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002c1c  00000000  00000000  000359e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001988  00000000  00000000  00038600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001850  00000000  00000000  00039f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00023522  00000000  00000000  0003b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000153f8  00000000  00000000  0005ecfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e16c2  00000000  00000000  000740f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001557b4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007410  00000000  00000000  00155804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08005880 	.word	0x08005880

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08005880 	.word	0x08005880

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000230:	f023 0218 	bic.w	r2, r3, #24
 8000234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000270:	68fb      	ldr	r3, [r7, #12]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <recieve16Bit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool recieve16Bit(uint16_t *read_to){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	if(HAL_SPI_Receive(&hspi1, (uint8_t*)read_to, 2, 10) == HAL_OK) {
 8000288:	230a      	movs	r3, #10
 800028a:	2202      	movs	r2, #2
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <recieve16Bit+0x28>)
 8000290:	f003 fb32 	bl	80038f8 <HAL_SPI_Receive>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <recieve16Bit+0x1e>
		return true;
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <recieve16Bit+0x20>
	}

	return false;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000009c 	.word	0x2000009c

080002ac <send16Bit>:

_Bool send16Bit(uint16_t *send){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2,10) == HAL_OK){
 80002b4:	230a      	movs	r3, #10
 80002b6:	2202      	movs	r2, #2
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <send16Bit+0x28>)
 80002bc:	f003 f9ae 	bl	800361c <HAL_SPI_Transmit>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <send16Bit+0x1e>
		return true;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <send16Bit+0x20>

	}
	return false;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000009c 	.word	0x2000009c

080002d8 <getStartInput>:

void getStartInput(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	uint8_t header;
		  HAL_StatusTypeDef receive_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80002de:	1db9      	adds	r1, r7, #6
 80002e0:	230a      	movs	r3, #10
 80002e2:	2201      	movs	r2, #1
 80002e4:	4825      	ldr	r0, [pc, #148]	; (800037c <getStartInput+0xa4>)
 80002e6:	f003 fb07 	bl	80038f8 <HAL_SPI_Receive>
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
		  if(receive_status == HAL_OK) {
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d130      	bne.n	8000356 <getStartInput+0x7e>
			  switch((Header)header) {
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d020      	beq.n	800033c <getStartInput+0x64>
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	dc32      	bgt.n	8000364 <getStartInput+0x8c>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d002      	beq.n	8000308 <getStartInput+0x30>
 8000302:	2b02      	cmp	r3, #2
 8000304:	d00d      	beq.n	8000322 <getStartInput+0x4a>
 8000306:	e02d      	b.n	8000364 <getStartInput+0x8c>
			  	  case SLEEP_TIME:
			  		  if(!recieve16Bit(&sleep_time)) {
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <getStartInput+0xa8>)
 800030a:	f7ff ffb9 	bl	8000280 <recieve16Bit>
 800030e:	4603      	mov	r3, r0
 8000310:	f083 0301 	eor.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d01f      	beq.n	800035a <getStartInput+0x82>
			  			  printf("ERROR COULD NOT RECIEVE SLEEP TIME");
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <getStartInput+0xac>)
 800031c:	f004 fb22 	bl	8004964 <iprintf>
			  		  	  }
					  break;
 8000320:	e01b      	b.n	800035a <getStartInput+0x82>
				  case RUN_AMOUNT:
					  if(!recieve16Bit(&max_amount_of_runs)){
 8000322:	4819      	ldr	r0, [pc, #100]	; (8000388 <getStartInput+0xb0>)
 8000324:	f7ff ffac 	bl	8000280 <recieve16Bit>
 8000328:	4603      	mov	r3, r0
 800032a:	f083 0301 	eor.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d014      	beq.n	800035e <getStartInput+0x86>
						  printf("ERROR COULD NOT RECIEVE AMOUNT OF RUNS");
 8000334:	4815      	ldr	r0, [pc, #84]	; (800038c <getStartInput+0xb4>)
 8000336:	f004 fb15 	bl	8004964 <iprintf>
					  }

					  break;
 800033a:	e010      	b.n	800035e <getStartInput+0x86>
				  case TEST_MODE:
					  if(!recieve16Bit(&test_mode)){
 800033c:	4814      	ldr	r0, [pc, #80]	; (8000390 <getStartInput+0xb8>)
 800033e:	f7ff ff9f 	bl	8000280 <recieve16Bit>
 8000342:	4603      	mov	r3, r0
 8000344:	f083 0301 	eor.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d009      	beq.n	8000362 <getStartInput+0x8a>
						  printf("TEST MODE COULD NOT BE RECIEVED");
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <getStartInput+0xbc>)
 8000350:	f004 fb08 	bl	8004964 <iprintf>
					  }
					  break;
 8000354:	e005      	b.n	8000362 <getStartInput+0x8a>
				  }
		  }
 8000356:	bf00      	nop
 8000358:	e004      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <getStartInput+0x8c>
					  break;
 8000362:	bf00      	nop
		  if(test_mode != 2){
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <getStartInput+0xb8>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d002      	beq.n	8000372 <getStartInput+0x9a>
			  test_input_set = true;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <getStartInput+0xc0>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		  }
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000009c 	.word	0x2000009c
 8000380:	20000458 	.word	0x20000458
 8000384:	08005898 	.word	0x08005898
 8000388:	2000045a 	.word	0x2000045a
 800038c:	080058bc 	.word	0x080058bc
 8000390:	20000008 	.word	0x20000008
 8000394:	080058e4 	.word	0x080058e4
 8000398:	2000045c 	.word	0x2000045c

0800039c <sendTestData>:
void sendTestData(uint32_t *times){
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2110      	movs	r1, #16
 80003ac:	481e      	ldr	r0, [pc, #120]	; (8000428 <sendTestData+0x8c>)
 80003ae:	f001 f9c1 	bl	8001734 <HAL_GPIO_WritePin>
	while(index < max_amount_of_runs){
 80003b2:	e02b      	b.n	800040c <sendTestData+0x70>
		uint8_t header;
		uint32_t *ptr = &times[index];
 80003b4:	8afb      	ldrh	r3, [r7, #22]
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	4413      	add	r3, r2
 80003bc:	613b      	str	r3, [r7, #16]
		uint16_t value = *((uint16_t*)ptr);
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	81bb      	strh	r3, [r7, #12]
		HAL_StatusTypeDef recieve_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80003c4:	f107 010e 	add.w	r1, r7, #14
 80003c8:	230a      	movs	r3, #10
 80003ca:	2201      	movs	r2, #1
 80003cc:	4817      	ldr	r0, [pc, #92]	; (800042c <sendTestData+0x90>)
 80003ce:	f003 fa93 	bl	80038f8 <HAL_SPI_Receive>
 80003d2:	4603      	mov	r3, r0
 80003d4:	73fb      	strb	r3, [r7, #15]
		if(recieve_status == HAL_OK){
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d117      	bne.n	800040c <sendTestData+0x70>
			if(header == 4){
 80003dc:	7bbb      	ldrb	r3, [r7, #14]
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d111      	bne.n	8000406 <sendTestData+0x6a>
				if(!send16Bit(&value)){
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff60 	bl	80002ac <send16Bit>
 80003ec:	4603      	mov	r3, r0
 80003ee:	f083 0301 	eor.w	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <sendTestData+0x62>
					printf("COULD NOT SEND DATA");
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <sendTestData+0x94>)
 80003fa:	f004 fab3 	bl	8004964 <iprintf>
				}
				index++;
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	3301      	adds	r3, #1
 8000402:	82fb      	strh	r3, [r7, #22]
 8000404:	e002      	b.n	800040c <sendTestData+0x70>
			}
			else{
				printf("STUB");
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <sendTestData+0x98>)
 8000408:	f004 faac 	bl	8004964 <iprintf>
	while(index < max_amount_of_runs){
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <sendTestData+0x9c>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	8afa      	ldrh	r2, [r7, #22]
 8000412:	429a      	cmp	r2, r3
 8000414:	d3ce      	bcc.n	80003b4 <sendTestData+0x18>
			}
		}
	}
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2110      	movs	r1, #16
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <sendTestData+0x8c>)
 800041c:	f001 f98a 	bl	8001734 <HAL_GPIO_WritePin>
}
 8000420:	bf00      	nop
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	48000400 	.word	0x48000400
 800042c:	2000009c 	.word	0x2000009c
 8000430:	08005904 	.word	0x08005904
 8000434:	08005918 	.word	0x08005918
 8000438:	2000045a 	.word	0x2000045a

0800043c <calculateTestTimes>:


void calculateTestTimes(struct TimeCapture *data, uint32_t *times){
 800043c:	b480      	push	{r7}
 800043e:	b08b      	sub	sp, #44	; 0x2c
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 8000446:	2300      	movs	r3, #0
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
 800044a:	e034      	b.n	80004b6 <calculateTestTimes+0x7a>
		struct TimeCapture *time_ptr = &data[i];
 800044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044e:	00db      	lsls	r3, r3, #3
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	4413      	add	r3, r2
 8000454:	61fb      	str	r3, [r7, #28]
		uint32_t *ptr = &times[i];
 8000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	4413      	add	r3, r2
 800045e:	61bb      	str	r3, [r7, #24]
		uint32_t start_time = time_ptr->startTime;
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	617b      	str	r3, [r7, #20]
		uint32_t end_time = time_ptr->endTime;
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	613b      	str	r3, [r7, #16]
		uint32_t fullTime;
		if(end_time >= start_time){
 800046c:	693a      	ldr	r2, [r7, #16]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	429a      	cmp	r2, r3
 8000472:	d304      	bcc.n	800047e <calculateTestTimes+0x42>
			fullTime = end_time - start_time;
 8000474:	693a      	ldr	r2, [r7, #16]
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	623b      	str	r3, [r7, #32]
 800047c:	e007      	b.n	800048e <calculateTestTimes+0x52>
		}
		else{
			fullTime = (TIM2->ARR - start_time) + end_time;
 800047e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	4413      	add	r3, r2
 800048c:	623b      	str	r3, [r7, #32]
		}
		uint32_t wake_up_time = fullTime - (sleep_time * 1000);
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <calculateTestTimes+0x94>)
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	461a      	mov	r2, r3
 8000494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000498:	fb02 f303 	mul.w	r3, r2, r3
 800049c:	461a      	mov	r2, r3
 800049e:	6a3b      	ldr	r3, [r7, #32]
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]
		debug_value = fullTime;
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <calculateTestTimes+0x98>)
 80004a6:	6a3b      	ldr	r3, [r7, #32]
 80004a8:	6013      	str	r3, [r2, #0]
		*ptr = wake_up_time;
 80004aa:	69bb      	ldr	r3, [r7, #24]
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	3301      	adds	r3, #1
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <calculateTestTimes+0x9c>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004be:	4293      	cmp	r3, r2
 80004c0:	dbc4      	blt.n	800044c <calculateTestTimes+0x10>
	}
}
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	372c      	adds	r7, #44	; 0x2c
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	20000458 	.word	0x20000458
 80004d4:	2000000c 	.word	0x2000000c
 80004d8:	2000045a 	.word	0x2000045a

080004dc <sendInterrupt>:

void sendInterrupt(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2102      	movs	r1, #2
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <sendInterrupt+0x1c>)
 80004e6:	f001 f925 	bl	8001734 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2102      	movs	r1, #2
 80004ee:	4802      	ldr	r0, [pc, #8]	; (80004f8 <sendInterrupt+0x1c>)
 80004f0:	f001 f920 	bl	8001734 <HAL_GPIO_WritePin>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	48000800 	.word	0x48000800

080004fc <testUsingInterrupts>:

void testUsingInterrupts(struct TimeCapture *times){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
	while(run_test){
 8000508:	e032      	b.n	8000570 <testUsingInterrupts+0x74>
		struct TimeCapture *time_ptr = &times[i];
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
		HAL_Delay(sleep_time);
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <testUsingInterrupts+0x88>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fe67 	bl	80011ec <HAL_Delay>
		sendInterrupt();
 800051e:	f7ff ffdd 	bl	80004dc <sendInterrupt>
		while(!timeBuffReady);
 8000522:	bf00      	nop
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <testUsingInterrupts+0x8c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	f083 0301 	eor.w	r3, r3, #1
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1f8      	bne.n	8000524 <testUsingInterrupts+0x28>
		*time_ptr = timeBuff;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4a15      	ldr	r2, [pc, #84]	; (800058c <testUsingInterrupts+0x90>)
 8000536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053a:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
		timeBuff.startTime = 0;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <testUsingInterrupts+0x90>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <testUsingInterrupts+0x90>)
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <testUsingInterrupts+0x8c>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <testUsingInterrupts+0x94>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <testUsingInterrupts+0x98>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	429a      	cmp	r2, r3
 8000564:	d104      	bne.n	8000570 <testUsingInterrupts+0x74>
			//FINAL WAKE
			sendInterrupt();
 8000566:	f7ff ffb9 	bl	80004dc <sendInterrupt>
			run_test = false;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <testUsingInterrupts+0x9c>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	while(run_test){
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <testUsingInterrupts+0x9c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1c8      	bne.n	800050a <testUsingInterrupts+0xe>
		}
	}
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000458 	.word	0x20000458
 8000588:	20000454 	.word	0x20000454
 800058c:	20000444 	.word	0x20000444
 8000590:	20000440 	.word	0x20000440
 8000594:	2000045a 	.word	0x2000045a
 8000598:	20000455 	.word	0x20000455

0800059c <testUsingIntervals>:

void testUsingIntervals(struct TimeCapture *times){
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
	while(run_test){
 80005a8:	e02f      	b.n	800060a <testUsingIntervals+0x6e>
		struct TimeCapture *time_ptr = &times[i];
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
		while(!timeBuffReady);
 80005b4:	bf00      	nop
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <testUsingIntervals+0x84>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	f083 0301 	eor.w	r3, r3, #1
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f8      	bne.n	80005b6 <testUsingIntervals+0x1a>
		*time_ptr = timeBuff;
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <testUsingIntervals+0x88>)
 80005c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005cc:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
		lastBuff = timeBuff;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <testUsingIntervals+0x8c>)
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <testUsingIntervals+0x88>)
 80005da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005de:	e883 0003 	stmia.w	r3, {r0, r1}
		timeBuff.startTime = 0;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <testUsingIntervals+0x88>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <testUsingIntervals+0x88>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <testUsingIntervals+0x84>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <testUsingIntervals+0x90>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <testUsingIntervals+0x94>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	429a      	cmp	r2, r3
 8000602:	d102      	bne.n	800060a <testUsingIntervals+0x6e>
			run_test = false;
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <testUsingIntervals+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	while(run_test){
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <testUsingIntervals+0x98>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1cb      	bne.n	80005aa <testUsingIntervals+0xe>
		}

	}
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	20000454 	.word	0x20000454
 8000624:	20000444 	.word	0x20000444
 8000628:	2000044c 	.word	0x2000044c
 800062c:	20000440 	.word	0x20000440
 8000630:	2000045a 	.word	0x2000045a
 8000634:	20000455 	.word	0x20000455

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800063c:	b08f      	sub	sp, #60	; 0x3c
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fd4e 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f8e2 	bl	800080c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000648:	f000 f956 	bl	80008f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fa20 	bl	8000a90 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000650:	f000 f9f6 	bl	8000a40 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000654:	f000 f9a6 	bl	80009a4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000658:	f000 f96c 	bl	8000934 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800065c:	4865      	ldr	r0, [pc, #404]	; (80007f4 <main+0x1bc>)
 800065e:	f003 fea3 	bl	80043a8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!finished){
 8000662:	4b65      	ldr	r3, [pc, #404]	; (80007f8 <main+0x1c0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f083 0301 	eor.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f8      	beq.n	8000662 <main+0x2a>
	  if(!test_input_set){
 8000670:	4b62      	ldr	r3, [pc, #392]	; (80007fc <main+0x1c4>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f083 0301 	eor.w	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <main+0x4c>
	 	  	  getStartInput();
 800067e:	f7ff fe2b 	bl	80002d8 <getStartInput>
 8000682:	e7ee      	b.n	8000662 <main+0x2a>
	 	  }
	 	  else{
 8000684:	466b      	mov	r3, sp
 8000686:	607b      	str	r3, [r7, #4]
	 		  struct TimeCapture times[max_amount_of_runs];
 8000688:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <main+0x1c8>)
 800068a:	8819      	ldrh	r1, [r3, #0]
 800068c:	460b      	mov	r3, r1
 800068e:	3b01      	subs	r3, #1
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
 8000692:	b28b      	uxth	r3, r1
 8000694:	2200      	movs	r2, #0
 8000696:	461c      	mov	r4, r3
 8000698:	4615      	mov	r5, r2
 800069a:	f04f 0200 	mov.w	r2, #0
 800069e:	f04f 0300 	mov.w	r3, #0
 80006a2:	01ab      	lsls	r3, r5, #6
 80006a4:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80006a8:	01a2      	lsls	r2, r4, #6
 80006aa:	b28b      	uxth	r3, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	4698      	mov	r8, r3
 80006b0:	4691      	mov	r9, r2
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80006be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80006c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80006c6:	460b      	mov	r3, r1
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	3307      	adds	r3, #7
 80006cc:	08db      	lsrs	r3, r3, #3
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	ebad 0d03 	sub.w	sp, sp, r3
 80006d4:	466b      	mov	r3, sp
 80006d6:	3303      	adds	r3, #3
 80006d8:	089b      	lsrs	r3, r3, #2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	633b      	str	r3, [r7, #48]	; 0x30
	 		  if(test_mode == 1){
 80006de:	4b49      	ldr	r3, [pc, #292]	; (8000804 <main+0x1cc>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d141      	bne.n	800076a <main+0x132>
 80006e6:	466b      	mov	r3, sp
 80006e8:	461e      	mov	r6, r3
	 			  // RUN TESTS USING ITERRUPTS
	 			  run_test = true;
 80006ea:	4a47      	ldr	r2, [pc, #284]	; (8000808 <main+0x1d0>)
 80006ec:	2301      	movs	r3, #1
 80006ee:	7013      	strb	r3, [r2, #0]
	 			  testUsingInterrupts(times);
 80006f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006f2:	f7ff ff03 	bl	80004fc <testUsingInterrupts>
	 			  uint32_t test_times[max_amount_of_runs];
 80006f6:	4b42      	ldr	r3, [pc, #264]	; (8000800 <main+0x1c8>)
 80006f8:	8819      	ldrh	r1, [r3, #0]
 80006fa:	460b      	mov	r3, r1
 80006fc:	3b01      	subs	r3, #1
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000700:	b28b      	uxth	r3, r1
 8000702:	2200      	movs	r2, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	61fa      	str	r2, [r7, #28]
 8000708:	f04f 0200 	mov.w	r2, #0
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	69f8      	ldr	r0, [r7, #28]
 8000712:	0143      	lsls	r3, r0, #5
 8000714:	69b8      	ldr	r0, [r7, #24]
 8000716:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800071a:	69b8      	ldr	r0, [r7, #24]
 800071c:	0142      	lsls	r2, r0, #5
 800071e:	b28b      	uxth	r3, r1
 8000720:	2200      	movs	r2, #0
 8000722:	469a      	mov	sl, r3
 8000724:	4693      	mov	fp, r2
 8000726:	f04f 0200 	mov.w	r2, #0
 800072a:	f04f 0300 	mov.w	r3, #0
 800072e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000732:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000736:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800073a:	460b      	mov	r3, r1
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	3307      	adds	r3, #7
 8000740:	08db      	lsrs	r3, r3, #3
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	ebad 0d03 	sub.w	sp, sp, r3
 8000748:	466b      	mov	r3, sp
 800074a:	3303      	adds	r3, #3
 800074c:	089b      	lsrs	r3, r3, #2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	623b      	str	r3, [r7, #32]
	 			  calculateTestTimes(times,test_times);
 8000752:	6a39      	ldr	r1, [r7, #32]
 8000754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000756:	f7ff fe71 	bl	800043c <calculateTestTimes>
	 			  sendTestData(test_times);
 800075a:	6a38      	ldr	r0, [r7, #32]
 800075c:	f7ff fe1e 	bl	800039c <sendTestData>
	 			  finished = true;
 8000760:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <main+0x1c0>)
 8000762:	2301      	movs	r3, #1
 8000764:	7013      	strb	r3, [r2, #0]
 8000766:	46b5      	mov	sp, r6
 8000768:	e041      	b.n	80007ee <main+0x1b6>
	 		  }
	 		  else{
 800076a:	466b      	mov	r3, sp
 800076c:	461e      	mov	r6, r3
	 			  run_test = true;
 800076e:	4a26      	ldr	r2, [pc, #152]	; (8000808 <main+0x1d0>)
 8000770:	2301      	movs	r3, #1
 8000772:	7013      	strb	r3, [r2, #0]
	 			  testUsingIntervals(times);
 8000774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000776:	f7ff ff11 	bl	800059c <testUsingIntervals>
	 			  uint32_t test_times[max_amount_of_runs];
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <main+0x1c8>)
 800077c:	8819      	ldrh	r1, [r3, #0]
 800077e:	460b      	mov	r3, r1
 8000780:	3b01      	subs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000784:	b28b      	uxth	r3, r1
 8000786:	2200      	movs	r2, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	617a      	str	r2, [r7, #20]
 800078c:	f04f 0200 	mov.w	r2, #0
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	6978      	ldr	r0, [r7, #20]
 8000796:	0143      	lsls	r3, r0, #5
 8000798:	6938      	ldr	r0, [r7, #16]
 800079a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800079e:	6938      	ldr	r0, [r7, #16]
 80007a0:	0142      	lsls	r2, r0, #5
 80007a2:	b28b      	uxth	r3, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	60fa      	str	r2, [r7, #12]
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	0143      	lsls	r3, r0, #5
 80007b6:	68b8      	ldr	r0, [r7, #8]
 80007b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007bc:	68b8      	ldr	r0, [r7, #8]
 80007be:	0142      	lsls	r2, r0, #5
 80007c0:	460b      	mov	r3, r1
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	3307      	adds	r3, #7
 80007c6:	08db      	lsrs	r3, r3, #3
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	ebad 0d03 	sub.w	sp, sp, r3
 80007ce:	466b      	mov	r3, sp
 80007d0:	3303      	adds	r3, #3
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
	 			  calculateTestTimes(times, test_times);
 80007d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007dc:	f7ff fe2e 	bl	800043c <calculateTestTimes>
	 			  sendTestData(test_times);
 80007e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007e2:	f7ff fddb 	bl	800039c <sendTestData>
	 			  finished = true;
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <main+0x1c0>)
 80007e8:	2301      	movs	r3, #1
 80007ea:	7013      	strb	r3, [r2, #0]
 80007ec:	46b5      	mov	sp, r6
 80007ee:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  if(!finished){
 80007f2:	e736      	b.n	8000662 <main+0x2a>
 80007f4:	20000100 	.word	0x20000100
 80007f8:	20000456 	.word	0x20000456
 80007fc:	2000045c 	.word	0x2000045c
 8000800:	2000045a 	.word	0x2000045a
 8000804:	20000008 	.word	0x20000008
 8000808:	20000455 	.word	0x20000455

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09a      	sub	sp, #104	; 0x68
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2248      	movs	r2, #72	; 0x48
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f004 f89a 	bl	8004954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800083c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000840:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f023 0303 	bic.w	r3, r3, #3
 800084c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000856:	f001 f8a1 	bl	800199c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fce0 	bl	8000220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <SystemClock_Config+0xe8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <SystemClock_Config+0xe8>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <SystemClock_Config+0xe8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800087c:	2327      	movs	r3, #39	; 0x27
 800087e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000898:	2300      	movs	r3, #0
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fbf3 	bl	8002094 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008b4:	f000 f9be 	bl	8000c34 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008b8:	236f      	movs	r3, #111	; 0x6f
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 ff4f 	bl	800277c <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008e4:	f000 f9a6 	bl	8000c34 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008e8:	f002 fcde 	bl	80032a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008ec:	bf00      	nop
 80008ee:	3768      	adds	r7, #104	; 0x68
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58000400 	.word	0x58000400

080008f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2250      	movs	r2, #80	; 0x50
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f004 f825 	bl	8004954 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800090a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000914:	2300      	movs	r3, #0
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fb4e 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000926:	f000 f985 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI1_Init+0x68>)
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <MX_SPI1_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_SPI1_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0x68>)
 800094c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_SPI1_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x68>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_SPI1_Init+0x68>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0x68>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI1_Init+0x68>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0x68>)
 8000978:	2207      	movs	r2, #7
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI1_Init+0x68>)
 800097e:	2200      	movs	r2, #0
 8000980:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SPI1_Init+0x68>)
 800098a:	f002 fda4 	bl	80034d6 <HAL_SPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000994:	f000 f94e 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000009c 	.word	0x2000009c
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009cc:	221f      	movs	r2, #31
 80009ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009ec:	f003 fc84 	bl	80042f8 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009f6:	f000 f91d 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_TIM2_Init+0x98>)
 8000a08:	f003 fd14 	bl	8004434 <HAL_TIM_ConfigClockSource>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a12:	f000 f90f 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_TIM2_Init+0x98>)
 8000a24:	f003 fed0 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a2e:	f000 f901 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000100 	.word	0x20000100

08000a40 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <MX_USB_PCD_Init+0x4c>)
 8000a48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_USB_PCD_Init+0x48>)
 8000a76:	f000 fe8d 	bl	8001794 <HAL_PCD_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a80:	f000 f8d8 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000014c 	.word	0x2000014c
 8000a8c:	40006800 	.word	0x40006800

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f7ff fbd1 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff fbce 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff fbcb 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	2008      	movs	r0, #8
 8000ab8:	f7ff fbc8 	bl	800024c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4835      	ldr	r0, [pc, #212]	; (8000b98 <MX_GPIO_Init+0x108>)
 8000ac2:	f000 fe37 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DeepseepWakeup_GPIO_Port, DeepseepWakeup_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2108      	movs	r1, #8
 8000aca:	4833      	ldr	r0, [pc, #204]	; (8000b98 <MX_GPIO_Init+0x108>)
 8000acc:	f000 fe32 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2133      	movs	r1, #51	; 0x33
 8000ad4:	4831      	ldr	r0, [pc, #196]	; (8000b9c <MX_GPIO_Init+0x10c>)
 8000ad6:	f000 fe2d 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TestStartInput_Pin */
  GPIO_InitStruct.Pin = TestStartInput_Pin;
 8000ada:	2301      	movs	r3, #1
 8000adc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TestStartInput_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	482a      	ldr	r0, [pc, #168]	; (8000b98 <MX_GPIO_Init+0x108>)
 8000aee:	f000 fcb1 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupter_Pin */
  GPIO_InitStruct.Pin = Interrupter_Pin;
 8000af2:	2302      	movs	r3, #2
 8000af4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000afa:	2302      	movs	r3, #2
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Interrupter_GPIO_Port, &GPIO_InitStruct);
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4824      	ldr	r0, [pc, #144]	; (8000b98 <MX_GPIO_Init+0x108>)
 8000b08:	f000 fca4 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : TestStopInput_Pin */
  GPIO_InitStruct.Pin = TestStopInput_Pin;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b16:	2302      	movs	r3, #2
 8000b18:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TestStopInput_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481e      	ldr	r0, [pc, #120]	; (8000b98 <MX_GPIO_Init+0x108>)
 8000b20:	f000 fc98 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : DeepseepWakeup_Pin */
  GPIO_InitStruct.Pin = DeepseepWakeup_Pin;
 8000b24:	2308      	movs	r3, #8
 8000b26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DeepseepWakeup_GPIO_Port, &GPIO_InitStruct);
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4817      	ldr	r0, [pc, #92]	; (8000b98 <MX_GPIO_Init+0x108>)
 8000b3a:	f000 fc8b 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TransmitReady_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin;
 8000b3e:	2333      	movs	r3, #51	; 0x33
 8000b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4812      	ldr	r0, [pc, #72]	; (8000b9c <MX_GPIO_Init+0x10c>)
 8000b54:	f000 fc7e 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_GPIO_Init+0x110>)
 8000b6a:	f000 fc73 	bl	8001454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2006      	movs	r0, #6
 8000b74:	f000 fc39 	bl	80013ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b78:	2006      	movs	r0, #6
 8000b7a:	f000 fc50 	bl	800141e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2008      	movs	r0, #8
 8000b84:	f000 fc31 	bl	80013ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b88:	2008      	movs	r0, #8
 8000b8a:	f000 fc48 	bl	800141e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	48000400 	.word	0x48000400
 8000ba0:	48000c00 	.word	0x48000c00

08000ba4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == TestStartInput_Pin){
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d112      	bne.n	8000bda <HAL_GPIO_EXTI_Callback+0x36>
		timeBuff.startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	4a1a      	ldr	r2, [pc, #104]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bbc:	6013      	str	r3, [r2, #0]

		if(captures < max_amount_of_runs*2){
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x88>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	da05      	bge.n	8000bda <HAL_GPIO_EXTI_Callback+0x36>
			captures++;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bd8:	801a      	strh	r2, [r3, #0]
		}

	}

	if(GPIO_Pin == TestStopInput_Pin){
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d119      	bne.n	8000c14 <HAL_GPIO_EXTI_Callback+0x70>
		timeBuff.endTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x80>)
 8000be8:	6053      	str	r3, [r2, #4]
		if(timeBuff.endTime != 0){
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d002      	beq.n	8000bf8 <HAL_GPIO_EXTI_Callback+0x54>
		timeBuffReady = true;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
		}
		if(captures < max_amount_of_runs * 2){
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x88>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	429a      	cmp	r2, r3
 8000c06:	da05      	bge.n	8000c14 <HAL_GPIO_EXTI_Callback+0x70>
			captures++;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c12:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000100 	.word	0x20000100
 8000c24:	20000444 	.word	0x20000444
 8000c28:	20000440 	.word	0x20000440
 8000c2c:	2000045a 	.word	0x2000045a
 8000c30:	20000454 	.word	0x20000454

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>

08000c3e <LL_AHB2_GRP1_EnableClock>:
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c94:	68fb      	ldr	r3, [r7, #12]
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <HAL_SPI_MspInit+0x5c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d117      	bne.n	8000d36 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d0a:	f7ff ffca 	bl	8000ca2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff ff95 	bl	8000c3e <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d14:	23f0      	movs	r3, #240	; 0xf0
 8000d16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d24:	2305      	movs	r3, #5
 8000d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f000 fb8f 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3720      	adds	r7, #32
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40013000 	.word	0x40013000

08000d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d54:	d102      	bne.n	8000d5c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff ff8a 	bl	8000c70 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09c      	sub	sp, #112	; 0x70
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2250      	movs	r2, #80	; 0x50
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fde5 	bl	8004954 <memset>
  if(hpcd->Instance==USB)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_PCD_MspInit+0xa8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d136      	bne.n	8000e02 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d98:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000d9a:	2318      	movs	r3, #24
 8000d9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000da8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000daa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000db6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 f8fb 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000dcc:	f7ff ff32 	bl	8000c34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff ff34 	bl	8000c3e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dda:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000de8:	230a      	movs	r3, #10
 8000dea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000df0:	4619      	mov	r1, r3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f000 fb2d 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dfa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000dfe:	f7ff ff37 	bl	8000c70 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3770      	adds	r7, #112	; 0x70
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40006800 	.word	0x40006800

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f99a 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TestStartInput_Pin);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fc7b 	bl	8001764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TestStopInput_Pin);
 8000e76:	2004      	movs	r0, #4
 8000e78:	f000 fc74 	bl	8001764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e00a      	b.n	8000ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e92:	f3af 8000 	nop.w
 8000e96:	4601      	mov	r1, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf0      	blt.n	8000e92 <_read+0x12>
  }

  return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e009      	b.n	8000ee0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbf1      	blt.n	8000ecc <_write+0x12>
  }
  return len;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_close>:

int _close(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_isatty>:

int _isatty(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f003 fcb8 	bl	8004900 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20030000 	.word	0x20030000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20000460 	.word	0x20000460
 8000fc4:	20000478 	.word	0x20000478

08000fc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <SystemInit+0x98>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a23      	ldr	r2, [pc, #140]	; (8001060 <SystemInit+0x98>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ff4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <SystemInit+0x9c>)
 8001002:	4013      	ands	r3, r2
 8001004:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800100e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001012:	f023 0305 	bic.w	r3, r3, #5
 8001016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800101a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800102e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001032:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <SystemInit+0xa0>)
 8001034:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <SystemInit+0xa0>)
 800103c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800103e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800104e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	faf6fefb 	.word	0xfaf6fefb
 8001068:	22041000 	.word	0x22041000

0800106c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800106c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001070:	3304      	adds	r3, #4

08001072 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001072:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001074:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001076:	d3f9      	bcc.n	800106c <CopyDataInit>
  bx lr
 8001078:	4770      	bx	lr

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800107a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800107c:	3004      	adds	r0, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800107e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>
  bx lr
 8001082:	4770      	bx	lr

08001084 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001086:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001088:	f7ff ff9e 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <LoopForever+0x6>)
 800108e:	490c      	ldr	r1, [pc, #48]	; (80010c0 <LoopForever+0xa>)
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <LoopForever+0xe>)
 8001092:	2300      	movs	r3, #0
 8001094:	f7ff ffed 	bl	8001072 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <LoopForever+0x12>)
 800109a:	490c      	ldr	r1, [pc, #48]	; (80010cc <LoopForever+0x16>)
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <LoopForever+0x1a>)
 800109e:	2300      	movs	r3, #0
 80010a0:	f7ff ffe7 	bl	8001072 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <LoopForever+0x1e>)
 80010a6:	490c      	ldr	r1, [pc, #48]	; (80010d8 <LoopForever+0x22>)
 80010a8:	2300      	movs	r3, #0
 80010aa:	f7ff ffe8 	bl	800107e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ae:	f003 fc2d 	bl	800490c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010b2:	f7ff fac1 	bl	8000638 <main>

080010b6 <LoopForever>:

LoopForever:
  b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   r0, =_estack
 80010b8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000080 	.word	0x20000080
 80010c4:	08005a6c 	.word	0x08005a6c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80010c8:	20030000 	.word	0x20030000
 80010cc:	20030000 	.word	0x20030000
 80010d0:	08005ae4 	.word	0x08005ae4
  INIT_BSS _sbss, _ebss
 80010d4:	20000080 	.word	0x20000080
 80010d8:	20000478 	.word	0x20000478

080010dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_Init+0x3c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_Init+0x3c>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f6:	2003      	movs	r0, #3
 80010f8:	f000 f96c 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 f80f 	bl	8001120 <HAL_InitTick>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	e001      	b.n	8001112 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800110e:	f7ff fde1 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001112:	79fb      	ldrb	r3, [r7, #7]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58004000 	.word	0x58004000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_InitTick+0x6c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d024      	beq.n	800117e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001134:	f001 fcce 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8001138:	4602      	mov	r2, r0
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_InitTick+0x6c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4619      	mov	r1, r3
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	fbb3 f3f1 	udiv	r3, r3, r1
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f974 	bl	800143a <HAL_SYSTICK_Config>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10f      	bne.n	8001178 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	d809      	bhi.n	8001172 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115e:	2200      	movs	r2, #0
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001166:	f000 f940 	bl	80013ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_InitTick+0x70>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e007      	b.n	8001182 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e004      	b.n	8001182 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e001      	b.n	8001182 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000018 	.word	0x20000018
 8001190:	20000014 	.word	0x20000014

08001194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000018 	.word	0x20000018
 80011b8:	20000464 	.word	0x20000464

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000464 	.word	0x20000464

080011d4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_GetTickPrio+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000014 	.word	0x20000014

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff ffe2 	bl	80011bc <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffd2 	bl	80011bc <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000018 	.word	0x20000018

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff29 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff40 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff90 	bl	8001328 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5f 	bl	80012d4 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff33 	bl	8001298 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa4 	bl	8001390 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e14c      	b.n	80016fe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 813e 	beq.w	80016f8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d005      	beq.n	8001494 <HAL_GPIO_Init+0x40>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d130      	bne.n	80014f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	f003 0201 	and.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d017      	beq.n	8001532 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d123      	bne.n	8001586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	6939      	ldr	r1, [r7, #16]
 8001582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0203 	and.w	r2, r3, #3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8098 	beq.w	80016f8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015c8:	4a54      	ldr	r2, [pc, #336]	; (800171c <HAL_GPIO_Init+0x2c8>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1d4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4a      	ldr	r2, [pc, #296]	; (8001720 <HAL_GPIO_Init+0x2cc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1d0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a49      	ldr	r2, [pc, #292]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1cc>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a48      	ldr	r2, [pc, #288]	; (8001728 <HAL_GPIO_Init+0x2d4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1c8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a47      	ldr	r2, [pc, #284]	; (800172c <HAL_GPIO_Init+0x2d8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1c4>
 8001614:	2304      	movs	r3, #4
 8001616:	e008      	b.n	800162a <HAL_GPIO_Init+0x1d6>
 8001618:	2307      	movs	r3, #7
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x1d6>
 800161c:	2303      	movs	r3, #3
 800161e:	e004      	b.n	800162a <HAL_GPIO_Init+0x1d6>
 8001620:	2302      	movs	r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x1d6>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_GPIO_Init+0x1d6>
 8001628:	2300      	movs	r3, #0
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800163a:	4938      	ldr	r1, [pc, #224]	; (800171c <HAL_GPIO_Init+0x2c8>)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_GPIO_Init+0x2dc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800166c:	4a30      	ldr	r2, [pc, #192]	; (8001730 <HAL_GPIO_Init+0x2dc>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_GPIO_Init+0x2dc>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001696:	4a26      	ldr	r2, [pc, #152]	; (8001730 <HAL_GPIO_Init+0x2dc>)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_GPIO_Init+0x2dc>)
 800169e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c2:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <HAL_GPIO_Init+0x2dc>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_GPIO_Init+0x2dc>)
 80016cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_GPIO_Init+0x2dc>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f aeab 	bne.w	8001464 <HAL_GPIO_Init+0x10>
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	58000800 	.word	0x58000800

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001750:	e002      	b.n	8001758 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fa0e 	bl	8000ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	58000800 	.word	0x58000800

08001794 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001796:	b08b      	sub	sp, #44	; 0x2c
 8001798:	af06      	add	r7, sp, #24
 800179a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0cb      	b.n	800193e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fad2 	bl	8000d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 f85b 	bl	8004888 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e040      	b.n	800185a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3301      	adds	r3, #1
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	3303      	adds	r3, #3
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	3338      	adds	r3, #56	; 0x38
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	333c      	adds	r3, #60	; 0x3c
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3340      	adds	r3, #64	; 0x40
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	3301      	adds	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d3b9      	bcc.n	80017d8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e044      	b.n	80018f4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	f203 1369 	addw	r3, r3, #361	; 0x169
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	3301      	adds	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d3b5      	bcc.n	800186a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	687e      	ldr	r6, [r7, #4]
 8001906:	466d      	mov	r5, sp
 8001908:	f106 0410 	add.w	r4, r6, #16
 800190c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	602b      	str	r3, [r5, #0]
 8001914:	1d33      	adds	r3, r6, #4
 8001916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001918:	6838      	ldr	r0, [r7, #0]
 800191a:	f002 ffd0 	bl	80048be <USB_DevInit>

  hpcd->USB_Address = 0U;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d102      	bne.n	800193c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f805 	bl	8001946 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001946 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800196a:	b29b      	uxth	r3, r3
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800197e:	b29b      	uxth	r3, r3
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	58000400 	.word	0x58000400

080019bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	58000400 	.word	0x58000400

080019d8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ea:	d101      	bne.n	80019f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_RCC_HSE_Enable>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_HSE_Disable>:
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_RCC_HSE_IsReady>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a4a:	d101      	bne.n	8001a50 <LL_RCC_HSE_IsReady+0x18>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <LL_RCC_HSE_IsReady+0x1a>
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_RCC_HSI_Enable>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_RCC_HSI_Disable>:
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_RCC_HSI_IsReady>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aaa:	d101      	bne.n	8001ab0 <LL_RCC_HSI_IsReady+0x18>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <LL_RCC_HSI_IsReady+0x1a>
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_RCC_HSI_SetCalibTrimming>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_RCC_HSI48_Enable>:
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_RCC_HSI48_Disable>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_RCC_HSI48_IsReady>:
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d101      	bne.n	8001b42 <LL_RCC_HSI48_IsReady+0x18>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_RCC_HSI48_IsReady+0x1a>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_RCC_LSE_Enable>:
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_RCC_LSE_Disable>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_LSE_EnableBypass>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_RCC_LSE_DisableBypass>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d101      	bne.n	8001bee <LL_RCC_LSE_IsReady+0x18>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_RCC_LSE_IsReady+0x1a>
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d101      	bne.n	8001c56 <LL_RCC_LSI1_IsReady+0x18>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <LL_RCC_LSI1_IsReady+0x1a>
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d101      	bne.n	8001cbe <LL_RCC_LSI2_IsReady+0x18>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <LL_RCC_LSI2_IsReady+0x1a>
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d101      	bne.n	8001d4a <LL_RCC_MSI_IsReady+0x16>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <LL_RCC_MSI_IsReady+0x18>
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2bb0      	cmp	r3, #176	; 0xb0
 8001d94:	d901      	bls.n	8001d9a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001d96:	23b0      	movs	r3, #176	; 0xb0
 8001d98:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001d9a:	687b      	ldr	r3, [r7, #4]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f023 0203 	bic.w	r2, r3, #3
 8001de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e76:	f023 020f 	bic.w	r2, r3, #15
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f66:	d101      	bne.n	8001f6c <LL_RCC_PLL_IsReady+0x18>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <LL_RCC_PLL_IsReady+0x1a>
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d101      	bne.n	8001ff2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002012:	d101      	bne.n	8002018 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d101      	bne.n	800203e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800205c:	d101      	bne.n	8002062 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002080:	d101      	bne.n	8002086 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b08d      	sub	sp, #52	; 0x34
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e363      	b.n	800276e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 808d 	beq.w	80021ce <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b4:	f7ff fea1 	bl	8001dfa <LL_RCC_GetSysClkSource>
 80020b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ba:	f7ff ff82 	bl	8001fc2 <LL_RCC_PLL_GetMainSource>
 80020be:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x3e>
 80020c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d147      	bne.n	800215c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d144      	bne.n	800215c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e347      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020e2:	f7ff fe4c 	bl	8001d7e <LL_RCC_MSI_GetRange>
 80020e6:	4603      	mov	r3, r0
 80020e8:	429c      	cmp	r4, r3
 80020ea:	d914      	bls.n	8002116 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fd03 	bl	8002afc <RCC_SetFlashLatencyFromMSIRange>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e336      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fe26 	bl	8001d56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe4a 	bl	8001da8 <LL_RCC_MSI_SetCalibTrimming>
 8002114:	e013      	b.n	800213e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fe1b 	bl	8001d56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fe3f 	bl	8001da8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fce4 	bl	8002afc <RCC_SetFlashLatencyFromMSIRange>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e317      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800213e:	f000 fcc9 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002142:	4603      	mov	r3, r0
 8002144:	4aa4      	ldr	r2, [pc, #656]	; (80023d8 <HAL_RCC_OscConfig+0x344>)
 8002146:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002148:	4ba4      	ldr	r3, [pc, #656]	; (80023dc <HAL_RCC_OscConfig+0x348>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe ffe7 	bl	8001120 <HAL_InitTick>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d039      	beq.n	80021cc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e308      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01e      	beq.n	80021a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002164:	f7ff fdc8 	bl	8001cf8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002168:	f7ff f828 	bl	80011bc <HAL_GetTick>
 800216c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002170:	f7ff f824 	bl	80011bc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e2f5      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002182:	f7ff fdd7 	bl	8001d34 <LL_RCC_MSI_IsReady>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f1      	beq.n	8002170 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fde0 	bl	8001d56 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fe04 	bl	8001da8 <LL_RCC_MSI_SetCalibTrimming>
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021a2:	f7ff fdb8 	bl	8001d16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021a6:	f7ff f809 	bl	80011bc <HAL_GetTick>
 80021aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ae:	f7ff f805 	bl	80011bc <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e2d6      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80021c0:	f7ff fdb8 	bl	8001d34 <LL_RCC_MSI_IsReady>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f1      	bne.n	80021ae <HAL_RCC_OscConfig+0x11a>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021cc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d047      	beq.n	800226a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021da:	f7ff fe0e 	bl	8001dfa <LL_RCC_GetSysClkSource>
 80021de:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e0:	f7ff feef 	bl	8001fc2 <LL_RCC_PLL_GetMainSource>
 80021e4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_OscConfig+0x164>
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d108      	bne.n	8002204 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d134      	bne.n	800226a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e2b4      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d102      	bne.n	8002214 <HAL_RCC_OscConfig+0x180>
 800220e:	f7ff fbf5 	bl	80019fc <LL_RCC_HSE_Enable>
 8002212:	e001      	b.n	8002218 <HAL_RCC_OscConfig+0x184>
 8002214:	f7ff fc01 	bl	8001a1a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe ffcc 	bl	80011bc <HAL_GetTick>
 8002224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe ffc8 	bl	80011bc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e299      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800223a:	f7ff fbfd 	bl	8001a38 <LL_RCC_HSE_IsReady>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f1      	beq.n	8002228 <HAL_RCC_OscConfig+0x194>
 8002244:	e011      	b.n	800226a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe ffb9 	bl	80011bc <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224e:	f7fe ffb5 	bl	80011bc <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b64      	cmp	r3, #100	; 0x64
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e286      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002260:	f7ff fbea 	bl	8001a38 <LL_RCC_HSE_IsReady>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f1      	bne.n	800224e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d04c      	beq.n	8002310 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002276:	f7ff fdc0 	bl	8001dfa <LL_RCC_GetSysClkSource>
 800227a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800227c:	f7ff fea1 	bl	8001fc2 <LL_RCC_PLL_GetMainSource>
 8002280:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d005      	beq.n	8002294 <HAL_RCC_OscConfig+0x200>
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d10e      	bne.n	80022ac <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d10b      	bne.n	80022ac <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e266      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fc09 	bl	8001abc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022aa:	e031      	b.n	8002310 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d019      	beq.n	80022e8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b4:	f7ff fbd2 	bl	8001a5c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe ff80 	bl	80011bc <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe ff7c 	bl	80011bc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e24d      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022d2:	f7ff fbe1 	bl	8001a98 <LL_RCC_HSI_IsReady>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f1      	beq.n	80022c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fbeb 	bl	8001abc <LL_RCC_HSI_SetCalibTrimming>
 80022e6:	e013      	b.n	8002310 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e8:	f7ff fbc7 	bl	8001a7a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe ff66 	bl	80011bc <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f4:	f7fe ff62 	bl	80011bc <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e233      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002306:	f7ff fbc7 	bl	8001a98 <LL_RCC_HSI_IsReady>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f1      	bne.n	80022f4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80a3 	beq.w	8002470 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d076      	beq.n	8002420 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d046      	beq.n	80023cc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800233e:	f7ff fc7e 	bl	8001c3e <LL_RCC_LSI1_IsReady>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d113      	bne.n	8002370 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002348:	f7ff fc57 	bl	8001bfa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800234c:	f7fe ff36 	bl	80011bc <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002354:	f7fe ff32 	bl	80011bc <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e203      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002366:	f7ff fc6a 	bl	8001c3e <LL_RCC_LSI1_IsReady>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f1      	beq.n	8002354 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002370:	f7ff fc77 	bl	8001c62 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe ff22 	bl	80011bc <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800237c:	f7fe ff1e 	bl	80011bc <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b03      	cmp	r3, #3
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1ef      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800238e:	f7ff fc8a 	bl	8001ca6 <LL_RCC_LSI2_IsReady>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f1      	beq.n	800237c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fc94 	bl	8001cca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80023a2:	f7ff fc3b 	bl	8001c1c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe ff09 	bl	80011bc <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023ae:	f7fe ff05 	bl	80011bc <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1d6      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023c0:	f7ff fc3d 	bl	8001c3e <LL_RCC_LSI1_IsReady>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f1      	bne.n	80023ae <HAL_RCC_OscConfig+0x31a>
 80023ca:	e051      	b.n	8002470 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023cc:	f7ff fc15 	bl	8001bfa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fef4 	bl	80011bc <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023d6:	e00c      	b.n	80023f2 <HAL_RCC_OscConfig+0x35e>
 80023d8:	20000010 	.word	0x20000010
 80023dc:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023e0:	f7fe feec 	bl	80011bc <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1bd      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023f2:	f7ff fc24 	bl	8001c3e <LL_RCC_LSI1_IsReady>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f1      	beq.n	80023e0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80023fc:	f7ff fc42 	bl	8001c84 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002402:	f7fe fedb 	bl	80011bc <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b03      	cmp	r3, #3
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e1ac      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002414:	f7ff fc47 	bl	8001ca6 <LL_RCC_LSI2_IsReady>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f1      	bne.n	8002402 <HAL_RCC_OscConfig+0x36e>
 800241e:	e027      	b.n	8002470 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002420:	f7ff fc30 	bl	8001c84 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe feca 	bl	80011bc <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800242c:	f7fe fec6 	bl	80011bc <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b03      	cmp	r3, #3
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e197      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800243e:	f7ff fc32 	bl	8001ca6 <LL_RCC_LSI2_IsReady>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f1      	bne.n	800242c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002448:	f7ff fbe8 	bl	8001c1c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe feb6 	bl	80011bc <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002454:	f7fe feb2 	bl	80011bc <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e183      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002466:	f7ff fbea 	bl	8001c3e <LL_RCC_LSI1_IsReady>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f1      	bne.n	8002454 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05b      	beq.n	8002534 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247c:	4ba7      	ldr	r3, [pc, #668]	; (800271c <HAL_RCC_OscConfig+0x688>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d114      	bne.n	80024b2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002488:	f7ff fa88 	bl	800199c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248c:	f7fe fe96 	bl	80011bc <HAL_GetTick>
 8002490:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7fe fe92 	bl	80011bc <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e163      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a6:	4b9d      	ldr	r3, [pc, #628]	; (800271c <HAL_RCC_OscConfig+0x688>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0x42c>
 80024ba:	f7ff fb48 	bl	8001b4e <LL_RCC_LSE_Enable>
 80024be:	e00c      	b.n	80024da <HAL_RCC_OscConfig+0x446>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d104      	bne.n	80024d2 <HAL_RCC_OscConfig+0x43e>
 80024c8:	f7ff fb63 	bl	8001b92 <LL_RCC_LSE_EnableBypass>
 80024cc:	f7ff fb3f 	bl	8001b4e <LL_RCC_LSE_Enable>
 80024d0:	e003      	b.n	80024da <HAL_RCC_OscConfig+0x446>
 80024d2:	f7ff fb4d 	bl	8001b70 <LL_RCC_LSE_Disable>
 80024d6:	f7ff fb6d 	bl	8001bb4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d014      	beq.n	800250c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe fe6b 	bl	80011bc <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fe67 	bl	80011bc <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e136      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002500:	f7ff fb69 	bl	8001bd6 <LL_RCC_LSE_IsReady>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0ef      	beq.n	80024ea <HAL_RCC_OscConfig+0x456>
 800250a:	e013      	b.n	8002534 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe fe56 	bl	80011bc <HAL_GetTick>
 8002510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fe52 	bl	80011bc <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e121      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800252a:	f7ff fb54 	bl	8001bd6 <LL_RCC_LSE_IsReady>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ef      	bne.n	8002514 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d02c      	beq.n	800259a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d014      	beq.n	8002572 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002548:	f7ff facd 	bl	8001ae6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7fe fe36 	bl	80011bc <HAL_GetTick>
 8002550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002554:	f7fe fe32 	bl	80011bc <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e103      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002566:	f7ff fae0 	bl	8001b2a <LL_RCC_HSI48_IsReady>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f1      	beq.n	8002554 <HAL_RCC_OscConfig+0x4c0>
 8002570:	e013      	b.n	800259a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002572:	f7ff fac9 	bl	8001b08 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7fe fe21 	bl	80011bc <HAL_GetTick>
 800257a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800257e:	f7fe fe1d 	bl	80011bc <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0ee      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002590:	f7ff facb 	bl	8001b2a <LL_RCC_HSI48_IsReady>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f1      	bne.n	800257e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80e4 	beq.w	800276c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a4:	f7ff fc29 	bl	8001dfa <LL_RCC_GetSysClkSource>
 80025a8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80025aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	f040 80b4 	bne.w	8002724 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d123      	bne.n	8002612 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d11c      	bne.n	8002612 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d114      	bne.n	8002612 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10d      	bne.n	8002612 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d05d      	beq.n	80026ce <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b0c      	cmp	r3, #12
 8002616:	d058      	beq.n	80026ca <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0a1      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800262a:	f7ff fc84 	bl	8001f36 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800262e:	f7fe fdc5 	bl	80011bc <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fdc1 	bl	80011bc <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e092      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ef      	bne.n	8002636 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <HAL_RCC_OscConfig+0x68c>)
 800265e:	4013      	ands	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002668:	4311      	orrs	r1, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800266e:	0212      	lsls	r2, r2, #8
 8002670:	4311      	orrs	r1, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800267c:	4311      	orrs	r1, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002682:	430a      	orrs	r2, r1
 8002684:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002688:	4313      	orrs	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800268c:	f7ff fc44 	bl	8001f18 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026a0:	f7fe fd8c 	bl	80011bc <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fd88 	bl	80011bc <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e059      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ef      	beq.n	80026a8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c8:	e050      	b.n	800276c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e04f      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d147      	bne.n	800276c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026dc:	f7ff fc1c 	bl	8001f18 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026f0:	f7fe fd64 	bl	80011bc <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f8:	f7fe fd60 	bl	80011bc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e031      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ef      	beq.n	80026f8 <HAL_RCC_OscConfig+0x664>
 8002718:	e028      	b.n	800276c <HAL_RCC_OscConfig+0x6d8>
 800271a:	bf00      	nop
 800271c:	58000400 	.word	0x58000400
 8002720:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d01e      	beq.n	8002768 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	f7ff fc04 	bl	8001f36 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fd45 	bl	80011bc <HAL_GetTick>
 8002732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002736:	f7fe fd41 	bl	80011bc <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e012      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ef      	bne.n	8002736 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_OscConfig+0x6e4>)
 8002762:	4013      	ands	r3, r2
 8002764:	60cb      	str	r3, [r1, #12]
 8002766:	e001      	b.n	800276c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3734      	adds	r7, #52	; 0x34
 8002772:	46bd      	mov	sp, r7
 8002774:	bd90      	pop	{r4, r7, pc}
 8002776:	bf00      	nop
 8002778:	eefefffc 	.word	0xeefefffc

0800277c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e12d      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b98      	ldr	r3, [pc, #608]	; (80029f4 <HAL_RCC_ClockConfig+0x278>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d91b      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b95      	ldr	r3, [pc, #596]	; (80029f4 <HAL_RCC_ClockConfig+0x278>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	4993      	ldr	r1, [pc, #588]	; (80029f4 <HAL_RCC_ClockConfig+0x278>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ae:	f7fe fd05 	bl	80011bc <HAL_GetTick>
 80027b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027b6:	f7fe fd01 	bl	80011bc <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e111      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c8:	4b8a      	ldr	r3, [pc, #552]	; (80029f4 <HAL_RCC_ClockConfig+0x278>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d1ef      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fb13 	bl	8001e12 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fce6 	bl	80011bc <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027f4:	f7fe fce2 	bl	80011bc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0f2      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002806:	f7ff fbe8 	bl	8001fda <LL_RCC_IsActiveFlag_HPRE>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f1      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d016      	beq.n	800284a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fb0a 	bl	8001e3a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002826:	f7fe fcc9 	bl	80011bc <HAL_GetTick>
 800282a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800282e:	f7fe fcc5 	bl	80011bc <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0d5      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002840:	f7ff fbdd 	bl	8001ffe <LL_RCC_IsActiveFlag_C2HPRE>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f1      	beq.n	800282e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d016      	beq.n	8002884 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fb03 	bl	8001e66 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002860:	f7fe fcac 	bl	80011bc <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002868:	f7fe fca8 	bl	80011bc <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0b8      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800287a:	f7ff fbd3 	bl	8002024 <LL_RCC_IsActiveFlag_SHDHPRE>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f1      	beq.n	8002868 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d016      	beq.n	80028be <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fafd 	bl	8001e94 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800289a:	f7fe fc8f 	bl	80011bc <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028a2:	f7fe fc8b 	bl	80011bc <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e09b      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028b4:	f7ff fbc9 	bl	800204a <LL_RCC_IsActiveFlag_PPRE1>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f1      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d017      	beq.n	80028fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff faf3 	bl	8001ebc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028d6:	f7fe fc71 	bl	80011bc <HAL_GetTick>
 80028da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028de:	f7fe fc6d 	bl	80011bc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e07d      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028f0:	f7ff fbbd 	bl	800206e <LL_RCC_IsActiveFlag_PPRE2>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f1      	beq.n	80028de <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d043      	beq.n	800298e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d106      	bne.n	800291c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800290e:	f7ff f893 	bl	8001a38 <LL_RCC_HSE_IsReady>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11e      	bne.n	8002956 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e067      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d106      	bne.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002924:	f7ff fb16 	bl	8001f54 <LL_RCC_PLL_IsReady>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d113      	bne.n	8002956 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e05c      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800293a:	f7ff f9fb 	bl	8001d34 <LL_RCC_MSI_IsReady>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d108      	bne.n	8002956 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e051      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002948:	f7ff f8a6 	bl	8001a98 <LL_RCC_HSI_IsReady>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e04a      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fa39 	bl	8001dd2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002960:	f7fe fc2c 	bl	80011bc <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7fe fc28 	bl	80011bc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e036      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	f7ff fa3c 	bl	8001dfa <LL_RCC_GetSysClkSource>
 8002982:	4602      	mov	r2, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	429a      	cmp	r2, r3
 800298c:	d1ec      	bne.n	8002968 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_ClockConfig+0x278>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d21b      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299c:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_RCC_ClockConfig+0x278>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 0207 	bic.w	r2, r3, #7
 80029a4:	4913      	ldr	r1, [pc, #76]	; (80029f4 <HAL_RCC_ClockConfig+0x278>)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ac:	f7fe fc06 	bl	80011bc <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029b4:	f7fe fc02 	bl	80011bc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e012      	b.n	80029ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_ClockConfig+0x278>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1ef      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029d4:	f000 f87e 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_RCC_ClockConfig+0x27c>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80029de:	f7fe fbf9 	bl	80011d4 <HAL_GetTickPrio>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fb9b 	bl	8001120 <HAL_InitTick>
 80029ea:	4603      	mov	r3, r0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	58004000 	.word	0x58004000
 80029f8:	20000010 	.word	0x20000010

080029fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a02:	f7ff f9fa 	bl	8001dfa <LL_RCC_GetSysClkSource>
 8002a06:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a0e:	f7ff f9b6 	bl	8001d7e <LL_RCC_MSI_GetRange>
 8002a12:	4603      	mov	r3, r0
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e04b      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d102      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a2a:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e045      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d10a      	bne.n	8002a4c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a36:	f7fe ffcf 	bl	80019d8 <LL_RCC_HSE_IsEnabledDiv2>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d102      	bne.n	8002a46 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e03a      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	e037      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a4c:	f7ff fab9 	bl	8001fc2 <LL_RCC_PLL_GetMainSource>
 8002a50:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d003      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x64>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_GetSysClockFreq+0x6a>
 8002a5e:	e00d      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a62:	60bb      	str	r3, [r7, #8]
        break;
 8002a64:	e015      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a66:	f7fe ffb7 	bl	80019d8 <LL_RCC_HSE_IsEnabledDiv2>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d102      	bne.n	8002a76 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a72:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a74:	e00d      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a78:	60bb      	str	r3, [r7, #8]
        break;
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a7c:	f7ff f97f 	bl	8001d7e <LL_RCC_MSI_GetRange>
 8002a80:	4603      	mov	r3, r0
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8e:	60bb      	str	r3, [r7, #8]
        break;
 8002a90:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002a92:	f7ff fa71 	bl	8001f78 <LL_RCC_PLL_GetN>
 8002a96:	4602      	mov	r2, r0
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	fb03 f402 	mul.w	r4, r3, r2
 8002a9e:	f7ff fa84 	bl	8001faa <LL_RCC_PLL_GetDivider>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	fbb4 f4f3 	udiv	r4, r4, r3
 8002aac:	f7ff fa71 	bl	8001f92 <LL_RCC_PLL_GetR>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	0f5b      	lsrs	r3, r3, #29
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	fbb4 f3f3 	udiv	r3, r4, r3
 8002aba:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002abc:	68fb      	ldr	r3, [r7, #12]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	0800598c 	.word	0x0800598c
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	01e84800 	.word	0x01e84800

08002ad4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad4:	b598      	push	{r3, r4, r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ad8:	f7ff ff90 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 8002adc:	4604      	mov	r4, r0
 8002ade:	f7ff fa01 	bl	8001ee4 <LL_RCC_GetAHBPrescaler>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd98      	pop	{r3, r4, r7, pc}
 8002af8:	0800594c 	.word	0x0800594c

08002afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2bb0      	cmp	r3, #176	; 0xb0
 8002b08:	d903      	bls.n	8002b12 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e007      	b.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002b22:	f7ff f9eb 	bl	8001efc <LL_RCC_GetAHB4Prescaler>
 8002b26:	4603      	mov	r3, r0
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	0c9c      	lsrs	r4, r3, #18
 8002b46:	f7fe ff39 	bl	80019bc <HAL_PWREx_GetVoltageRange>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f000 f80c 	bl	8002b6c <RCC_SetFlashLatency>
 8002b54:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	0800598c 	.word	0x0800598c
 8002b64:	0800594c 	.word	0x0800594c
 8002b68:	431bde83 	.word	0x431bde83

08002b6c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b093      	sub	sp, #76	; 0x4c
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <RCC_SetFlashLatency+0xe8>)
 8002b78:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b82:	4a35      	ldr	r2, [pc, #212]	; (8002c58 <RCC_SetFlashLatency+0xec>)
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <RCC_SetFlashLatency+0xf0>)
 8002b90:	f107 040c 	add.w	r4, r7, #12
 8002b94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba4:	d11a      	bne.n	8002bdc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8002baa:	e013      	b.n	8002bd4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	3348      	adds	r3, #72	; 0x48
 8002bb2:	443b      	add	r3, r7
 8002bb4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d807      	bhi.n	8002bce <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3348      	adds	r3, #72	; 0x48
 8002bc4:	443b      	add	r3, r7
 8002bc6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002bca:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002bcc:	e020      	b.n	8002c10 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8002bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d9e8      	bls.n	8002bac <RCC_SetFlashLatency+0x40>
 8002bda:	e019      	b.n	8002c10 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be0:	e013      	b.n	8002c0a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	3348      	adds	r3, #72	; 0x48
 8002be8:	443b      	add	r3, r7
 8002bea:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d807      	bhi.n	8002c04 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	3348      	adds	r3, #72	; 0x48
 8002bfa:	443b      	add	r3, r7
 8002bfc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c00:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c02:	e005      	b.n	8002c10 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c06:	3301      	adds	r3, #1
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d9e8      	bls.n	8002be2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <RCC_SetFlashLatency+0xf4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 0207 	bic.w	r2, r3, #7
 8002c18:	4911      	ldr	r1, [pc, #68]	; (8002c60 <RCC_SetFlashLatency+0xf4>)
 8002c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c20:	f7fe facc 	bl	80011bc <HAL_GetTick>
 8002c24:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c26:	e008      	b.n	8002c3a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c28:	f7fe fac8 	bl	80011bc <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e007      	b.n	8002c4a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <RCC_SetFlashLatency+0xf4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1ef      	bne.n	8002c28 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	374c      	adds	r7, #76	; 0x4c
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd90      	pop	{r4, r7, pc}
 8002c52:	bf00      	nop
 8002c54:	08005920 	.word	0x08005920
 8002c58:	08005930 	.word	0x08005930
 8002c5c:	0800593c 	.word	0x0800593c
 8002c60:	58004000 	.word	0x58004000

08002c64 <LL_RCC_LSE_IsEnabled>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <LL_RCC_LSE_IsEnabled+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_RCC_LSE_IsEnabled+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_RCC_LSE_IsReady>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d101      	bne.n	8002ca0 <LL_RCC_LSE_IsReady+0x18>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <LL_RCC_LSE_IsReady+0x1a>
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_RCC_MSI_EnablePLLMode>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_RCC_SetRFWKPClockSource>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_RCC_SetSMPSClockSource>:
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f023 0203 	bic.w	r2, r3, #3
 8002d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_RCC_SetSMPSPrescaler>:
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_SetUSARTClockSource>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_SetLPUARTClockSource>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_RCC_SetI2CClockSource>:
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002db6:	43db      	mvns	r3, r3
 8002db8:	401a      	ands	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_RCC_SetLPTIMClockSource>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	43db      	mvns	r3, r3
 8002df0:	401a      	ands	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_SetSAIClockSource>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_RCC_SetRNGClockSource>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_RCC_SetCLK48ClockSource>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_RCC_SetUSBClockSource>:
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ffe3 	bl	8002e64 <LL_RCC_SetCLK48ClockSource>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <LL_RCC_SetADCClockSource>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_SetRTCClockSource>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_GetRTCClockSource>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_RCC_ForceBackupDomainReset>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_RCC_PLLSAI1_Enable>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_PLLSAI1_Disable>:
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8c:	6013      	str	r3, [r2, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_RCC_PLLSAI1_IsReady>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002faa:	d101      	bne.n	8002fb0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002fc8:	2300      	movs	r3, #0
 8002fca:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d034      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe0:	d021      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002fe2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe6:	d81b      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fe8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fec:	d01d      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002fee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff2:	d815      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffc:	d110      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800300e:	e00d      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f94d 	bl	80032b4 <RCCEx_PLLSAI1_ConfigNP>
 800301a:	4603      	mov	r3, r0
 800301c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800301e:	e005      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	77fb      	strb	r3, [r7, #31]
        break;
 8003024:	e002      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800302a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302c:	7ffb      	ldrb	r3, [r7, #31]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fee8 	bl	8002e0c <LL_RCC_SetSAIClockSource>
 800303c:	e001      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	7ffb      	ldrb	r3, [r7, #31]
 8003040:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304a:	2b00      	cmp	r3, #0
 800304c:	d046      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800304e:	f7ff ff56 	bl	8002efe <LL_RCC_GetRTCClockSource>
 8003052:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	429a      	cmp	r2, r3
 800305c:	d03c      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800305e:	f7fe fc9d 	bl	800199c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff30 	bl	8002ed2 <LL_RCC_SetRTCClockSource>
 8003072:	e02e      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800307e:	f7ff ff4b 	bl	8002f18 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003082:	f7ff ff5a 	bl	8002f3a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800309e:	f7ff fde1 	bl	8002c64 <LL_RCC_LSE_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d114      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030a8:	f7fe f888 	bl	80011bc <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80030ae:	e00b      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fe f884 	bl	80011bc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d902      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	77fb      	strb	r3, [r7, #31]
              break;
 80030c6:	e004      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80030c8:	f7ff fdde 	bl	8002c88 <LL_RCC_LSE_IsReady>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d1ee      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80030d2:	7ffb      	ldrb	r3, [r7, #31]
 80030d4:	77bb      	strb	r3, [r7, #30]
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	7ffb      	ldrb	r3, [r7, #31]
 80030da:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fe2a 	bl	8002d46 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fe35 	bl	8002d72 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fe5d 	bl	8002dd8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fe52 	bl	8002dd8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fe2a 	bl	8002d9e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fe1f 	bl	8002d9e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d022      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fe8d 	bl	8002e90 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800317e:	d107      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003198:	d10b      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f8e3 	bl	800336a <RCCEx_PLLSAI1_ConfigNQ>
 80031a4:	4603      	mov	r3, r0
 80031a6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80031a8:	7ffb      	ldrb	r3, [r7, #31]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
 80031b0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d02b      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c6:	d008      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031d0:	d003      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fe2a 	bl	8002e38 <LL_RCC_SetRNGClockSource>
 80031e4:	e00a      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7ff fe21 	bl	8002e38 <LL_RCC_SetRNGClockSource>
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff fe34 	bl	8002e64 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003204:	d107      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003214:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	2b00      	cmp	r3, #0
 8003220:	d022      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fe3d 	bl	8002ea6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003234:	d107      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800324e:	d10b      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3304      	adds	r3, #4
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f8e3 	bl	8003420 <RCCEx_PLLSAI1_ConfigNR>
 800325a:	4603      	mov	r3, r0
 800325c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800325e:	7ffb      	ldrb	r3, [r7, #31]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003264:	7ffb      	ldrb	r3, [r7, #31]
 8003266:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d004      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fd26 	bl	8002cca <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fd45 	bl	8002d1e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fd2c 	bl	8002cf6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800329e:	7fbb      	ldrb	r3, [r7, #30]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80032ac:	f7ff fcfe 	bl	8002cac <LL_RCC_MSI_EnablePLLMode>
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80032c0:	f7ff fe5b 	bl	8002f7a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032c4:	f7fd ff7a 	bl	80011bc <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032ca:	e009      	b.n	80032e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032cc:	f7fd ff76 	bl	80011bc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d902      	bls.n	80032e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	73fb      	strb	r3, [r7, #15]
      break;
 80032de:	e004      	b.n	80032ea <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032e0:	f7ff fe5a 	bl	8002f98 <LL_RCC_PLLSAI1_IsReady>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d137      	bne.n	8003360 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003304:	4313      	orrs	r3, r2
 8003306:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331a:	4313      	orrs	r3, r2
 800331c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800331e:	f7ff fe1d 	bl	8002f5c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003322:	f7fd ff4b 	bl	80011bc <HAL_GetTick>
 8003326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003328:	e009      	b.n	800333e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800332a:	f7fd ff47 	bl	80011bc <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d902      	bls.n	800333e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	73fb      	strb	r3, [r7, #15]
        break;
 800333c:	e004      	b.n	8003348 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800333e:	f7ff fe2b 	bl	8002f98 <LL_RCC_PLLSAI1_IsReady>
 8003342:	4603      	mov	r3, r0
 8003344:	2b01      	cmp	r3, #1
 8003346:	d1f0      	bne.n	800332a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335c:	4313      	orrs	r3, r2
 800335e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003360:	7bfb      	ldrb	r3, [r7, #15]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003376:	f7ff fe00 	bl	8002f7a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800337a:	f7fd ff1f 	bl	80011bc <HAL_GetTick>
 800337e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003380:	e009      	b.n	8003396 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003382:	f7fd ff1b 	bl	80011bc <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d902      	bls.n	8003396 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	73fb      	strb	r3, [r7, #15]
      break;
 8003394:	e004      	b.n	80033a0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003396:	f7ff fdff 	bl	8002f98 <LL_RCC_PLLSAI1_IsReady>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d137      	bne.n	8003416 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ba:	4313      	orrs	r3, r2
 80033bc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80033be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d0:	4313      	orrs	r3, r2
 80033d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033d4:	f7ff fdc2 	bl	8002f5c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d8:	f7fd fef0 	bl	80011bc <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033de:	e009      	b.n	80033f4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e0:	f7fd feec 	bl	80011bc <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d902      	bls.n	80033f4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	73fb      	strb	r3, [r7, #15]
        break;
 80033f2:	e004      	b.n	80033fe <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033f4:	f7ff fdd0 	bl	8002f98 <LL_RCC_PLLSAI1_IsReady>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d1f0      	bne.n	80033e0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d108      	bne.n	8003416 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003412:	4313      	orrs	r3, r2
 8003414:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003416:	7bfb      	ldrb	r3, [r7, #15]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800342c:	f7ff fda5 	bl	8002f7a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003430:	f7fd fec4 	bl	80011bc <HAL_GetTick>
 8003434:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003436:	e009      	b.n	800344c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003438:	f7fd fec0 	bl	80011bc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d902      	bls.n	800344c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	73fb      	strb	r3, [r7, #15]
      break;
 800344a:	e004      	b.n	8003456 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800344c:	f7ff fda4 	bl	8002f98 <LL_RCC_PLLSAI1_IsReady>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d137      	bne.n	80034cc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800345c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003470:	4313      	orrs	r3, r2
 8003472:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003486:	4313      	orrs	r3, r2
 8003488:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800348a:	f7ff fd67 	bl	8002f5c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348e:	f7fd fe95 	bl	80011bc <HAL_GetTick>
 8003492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003494:	e009      	b.n	80034aa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003496:	f7fd fe91 	bl	80011bc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d902      	bls.n	80034aa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	73fb      	strb	r3, [r7, #15]
        break;
 80034a8:	e004      	b.n	80034b4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034aa:	f7ff fd75 	bl	8002f98 <LL_RCC_PLLSAI1_IsReady>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d1f0      	bne.n	8003496 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034c8:	4313      	orrs	r3, r2
 80034ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e095      	b.n	8003614 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d108      	bne.n	8003502 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f8:	d009      	beq.n	800350e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	61da      	str	r2, [r3, #28]
 8003500:	e005      	b.n	800350e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd fbdb 	bl	8000ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003544:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800354e:	d902      	bls.n	8003556 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e002      	b.n	800355c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800355a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003564:	d007      	beq.n	8003576 <HAL_SPI_Init+0xa0>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800356e:	d002      	beq.n	8003576 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	ea42 0103 	orr.w	r1, r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	f003 0204 	and.w	r2, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035f2:	ea42 0103 	orr.w	r1, r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_SPI_Transmit+0x22>
 800363a:	2302      	movs	r3, #2
 800363c:	e158      	b.n	80038f0 <HAL_SPI_Transmit+0x2d4>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003646:	f7fd fdb9 	bl	80011bc <HAL_GetTick>
 800364a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d002      	beq.n	8003662 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800365c:	2302      	movs	r3, #2
 800365e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003660:	e13d      	b.n	80038de <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_SPI_Transmit+0x52>
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003672:	e134      	b.n	80038de <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2203      	movs	r2, #3
 8003678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	88fa      	ldrh	r2, [r7, #6]
 800368c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	88fa      	ldrh	r2, [r7, #6]
 8003692:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036be:	d10f      	bne.n	80036e0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d007      	beq.n	80036fe <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003706:	d94b      	bls.n	80037a0 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_SPI_Transmit+0xfa>
 8003710:	8afb      	ldrh	r3, [r7, #22]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d13e      	bne.n	8003794 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	881a      	ldrh	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	1c9a      	adds	r2, r3, #2
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800373a:	e02b      	b.n	8003794 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d112      	bne.n	8003770 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800376e:	e011      	b.n	8003794 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003770:	f7fd fd24 	bl	80011bc <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d803      	bhi.n	8003788 <HAL_SPI_Transmit+0x16c>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003786:	d102      	bne.n	800378e <HAL_SPI_Transmit+0x172>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003792:	e0a4      	b.n	80038de <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ce      	bne.n	800373c <HAL_SPI_Transmit+0x120>
 800379e:	e07c      	b.n	800389a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_SPI_Transmit+0x192>
 80037a8:	8afb      	ldrh	r3, [r7, #22]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d170      	bne.n	8003890 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d912      	bls.n	80037de <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	881a      	ldrh	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	1c9a      	adds	r2, r3, #2
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b02      	subs	r3, #2
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037dc:	e058      	b.n	8003890 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	7812      	ldrb	r2, [r2, #0]
 80037ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003804:	e044      	b.n	8003890 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b02      	cmp	r3, #2
 8003812:	d12b      	bne.n	800386c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d912      	bls.n	8003844 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b02      	subs	r3, #2
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003842:	e025      	b.n	8003890 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	87da      	strh	r2, [r3, #62]	; 0x3e
 800386a:	e011      	b.n	8003890 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800386c:	f7fd fca6 	bl	80011bc <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d803      	bhi.n	8003884 <HAL_SPI_Transmit+0x268>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003882:	d102      	bne.n	800388a <HAL_SPI_Transmit+0x26e>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800388e:	e026      	b.n	80038de <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1b5      	bne.n	8003806 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	6839      	ldr	r1, [r7, #0]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fce4 	bl	800426c <SPI_EndRxTxTransaction>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e000      	b.n	80038de <HAL_SPI_Transmit+0x2c2>
  }

error:
 80038dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3720      	adds	r7, #32
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003914:	d112      	bne.n	800393c <HAL_SPI_Receive+0x44>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10e      	bne.n	800393c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2204      	movs	r2, #4
 8003922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f910 	bl	8003b58 <HAL_SPI_TransmitReceive>
 8003938:	4603      	mov	r3, r0
 800393a:	e109      	b.n	8003b50 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_SPI_Receive+0x52>
 8003946:	2302      	movs	r3, #2
 8003948:	e102      	b.n	8003b50 <HAL_SPI_Receive+0x258>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003952:	f7fd fc33 	bl	80011bc <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d002      	beq.n	800396a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003964:	2302      	movs	r3, #2
 8003966:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003968:	e0e9      	b.n	8003b3e <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_SPI_Receive+0x7e>
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
    goto error;
 800397a:	e0e0      	b.n	8003b3e <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2204      	movs	r2, #4
 8003980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c6:	d908      	bls.n	80039da <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	e007      	b.n	80039ea <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039e8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f2:	d10f      	bne.n	8003a14 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d007      	beq.n	8003a32 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a3a:	d867      	bhi.n	8003b0c <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a3c:	e030      	b.n	8003aa0 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d117      	bne.n	8003a7c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f103 020c 	add.w	r2, r3, #12
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	7812      	ldrb	r2, [r2, #0]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a7a:	e011      	b.n	8003aa0 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a7c:	f7fd fb9e 	bl	80011bc <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d803      	bhi.n	8003a94 <HAL_SPI_Receive+0x19c>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a92:	d102      	bne.n	8003a9a <HAL_SPI_Receive+0x1a2>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a9e:	e04e      	b.n	8003b3e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1c8      	bne.n	8003a3e <HAL_SPI_Receive+0x146>
 8003aac:	e034      	b.n	8003b18 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d115      	bne.n	8003ae8 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	1c9a      	adds	r2, r3, #2
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ae6:	e011      	b.n	8003b0c <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae8:	f7fd fb68 	bl	80011bc <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d803      	bhi.n	8003b00 <HAL_SPI_Receive+0x208>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afe:	d102      	bne.n	8003b06 <HAL_SPI_Receive+0x20e>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b0a:	e018      	b.n	8003b3e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ca      	bne.n	8003aae <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fb4d 	bl	80041bc <SPI_EndRxTransaction>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
 8003b3a:	e000      	b.n	8003b3e <HAL_SPI_Receive+0x246>
  }

error :
 8003b3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b66:	2301      	movs	r3, #1
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x26>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e1fb      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x41e>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b86:	f7fd fb19 	bl	80011bc <HAL_GetTick>
 8003b8a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b92:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b9a:	887b      	ldrh	r3, [r7, #2]
 8003b9c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b9e:	887b      	ldrh	r3, [r7, #2]
 8003ba0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ba2:	7efb      	ldrb	r3, [r7, #27]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x6e>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bae:	d106      	bne.n	8003bbe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <HAL_SPI_TransmitReceive+0x66>
 8003bb8:	7efb      	ldrb	r3, [r7, #27]
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d003      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bc4:	e1cd      	b.n	8003f62 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x80>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x80>
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bde:	e1c0      	b.n	8003f62 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d003      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2205      	movs	r2, #5
 8003bf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	887a      	ldrh	r2, [r7, #2]
 8003c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	887a      	ldrh	r2, [r7, #2]
 8003c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c36:	d802      	bhi.n	8003c3e <HAL_SPI_TransmitReceive+0xe6>
 8003c38:	8a3b      	ldrh	r3, [r7, #16]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d908      	bls.n	8003c50 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	e007      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d007      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c86:	d97c      	bls.n	8003d82 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_SPI_TransmitReceive+0x13e>
 8003c90:	8a7b      	ldrh	r3, [r7, #18]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d169      	bne.n	8003d6a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cba:	e056      	b.n	8003d6a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d11b      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x1aa>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d016      	beq.n	8003d02 <HAL_SPI_TransmitReceive+0x1aa>
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d113      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	881a      	ldrh	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	1c9a      	adds	r2, r3, #2
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d11c      	bne.n	8003d4a <HAL_SPI_TransmitReceive+0x1f2>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	b292      	uxth	r2, r2
 8003d28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d46:	2301      	movs	r3, #1
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d4a:	f7fd fa37 	bl	80011bc <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d807      	bhi.n	8003d6a <HAL_SPI_TransmitReceive+0x212>
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d60:	d003      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d68:	e0fb      	b.n	8003f62 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1a3      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x164>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d19d      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x164>
 8003d80:	e0df      	b.n	8003f42 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x23a>
 8003d8a:	8a7b      	ldrh	r3, [r7, #18]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 80cb 	bne.w	8003f28 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d912      	bls.n	8003dc2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	881a      	ldrh	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	1c9a      	adds	r2, r3, #2
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b02      	subs	r3, #2
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc0:	e0b2      	b.n	8003f28 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	7812      	ldrb	r2, [r2, #0]
 8003dce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de8:	e09e      	b.n	8003f28 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d134      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x30a>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d02f      	beq.n	8003e62 <HAL_SPI_TransmitReceive+0x30a>
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d12c      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d912      	bls.n	8003e38 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	881a      	ldrh	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b02      	subs	r3, #2
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e36:	e012      	b.n	8003e5e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	7812      	ldrb	r2, [r2, #0]
 8003e44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d148      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x3aa>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d042      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d923      	bls.n	8003ed0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	b292      	uxth	r2, r2
 8003e94:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b02      	subs	r3, #2
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d81f      	bhi.n	8003efe <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	e016      	b.n	8003efe <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f103 020c 	add.w	r2, r3, #12
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003efe:	2301      	movs	r3, #1
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f02:	f7fd f95b 	bl	80011bc <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d803      	bhi.n	8003f1a <HAL_SPI_TransmitReceive+0x3c2>
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f18:	d102      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x3c8>
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f26:	e01c      	b.n	8003f62 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f47f af5b 	bne.w	8003dea <HAL_SPI_TransmitReceive+0x292>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f af54 	bne.w	8003dea <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f990 	bl	800426c <SPI_EndRxTxTransaction>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	661a      	str	r2, [r3, #96]	; 0x60
 8003f5e:	e000      	b.n	8003f62 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f90:	f7fd f914 	bl	80011bc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fa0:	f7fd f90c 	bl	80011bc <HAL_GetTick>
 8003fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fa6:	4b39      	ldr	r3, [pc, #228]	; (800408c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	015b      	lsls	r3, r3, #5
 8003fac:	0d1b      	lsrs	r3, r3, #20
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb6:	e054      	b.n	8004062 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fbe:	d050      	beq.n	8004062 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fc0:	f7fd f8fc 	bl	80011bc <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d902      	bls.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d13d      	bne.n	8004052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fee:	d111      	bne.n	8004014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d004      	beq.n	8004004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d107      	bne.n	8004014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401c:	d10f      	bne.n	800403e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800403c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e017      	b.n	8004082 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3b01      	subs	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d19b      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000010 	.word	0x20000010

08004090 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040a2:	f7fd f88b 	bl	80011bc <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	4413      	add	r3, r2
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80040b2:	f7fd f883 	bl	80011bc <HAL_GetTick>
 80040b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040c0:	4b3d      	ldr	r3, [pc, #244]	; (80041b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	00da      	lsls	r2, r3, #3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	0d1b      	lsrs	r3, r3, #20
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040d8:	e060      	b.n	800419c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040e0:	d107      	bne.n	80040f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f8:	d050      	beq.n	800419c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040fa:	f7fd f85f 	bl	80011bc <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004106:	429a      	cmp	r2, r3
 8004108:	d902      	bls.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x80>
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d13d      	bne.n	800418c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800411e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004128:	d111      	bne.n	800414e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004132:	d004      	beq.n	800413e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d107      	bne.n	800414e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004156:	d10f      	bne.n	8004178 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004176:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e010      	b.n	80041ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	3b01      	subs	r3, #1
 800419a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d196      	bne.n	80040da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3728      	adds	r7, #40	; 0x28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000010 	.word	0x20000010

080041bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d0:	d111      	bne.n	80041f6 <SPI_EndRxTransaction+0x3a>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041da:	d004      	beq.n	80041e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e4:	d107      	bne.n	80041f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2200      	movs	r2, #0
 80041fe:	2180      	movs	r1, #128	; 0x80
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff febd 	bl	8003f80 <SPI_WaitFlagStateUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e023      	b.n	8004264 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004224:	d11d      	bne.n	8004262 <SPI_EndRxTransaction+0xa6>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422e:	d004      	beq.n	800423a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004238:	d113      	bne.n	8004262 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff ff22 	bl	8004090 <SPI_WaitFifoStateUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e000      	b.n	8004264 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2200      	movs	r2, #0
 8004280:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff ff03 	bl	8004090 <SPI_WaitFifoStateUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e027      	b.n	80042f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2200      	movs	r2, #0
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fe68 	bl	8003f80 <SPI_WaitFlagStateUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e014      	b.n	80042f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fedc 	bl	8004090 <SPI_WaitFifoStateUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e000      	b.n	80042f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e049      	b.n	800439e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc fd10 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f000 f946 	bl	80045c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e02e      	b.n	800441e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_TIM_Base_Start+0x84>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_TIM_Base_Start+0x34>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d115      	bne.n	8004408 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	4b13      	ldr	r3, [pc, #76]	; (8004430 <HAL_TIM_Base_Start+0x88>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d015      	beq.n	800441a <HAL_TIM_Base_Start+0x72>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d011      	beq.n	800441a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004406:	e008      	b.n	800441a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e000      	b.n	800441c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40012c00 	.word	0x40012c00
 8004430:	00010007 	.word	0x00010007

08004434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_TIM_ConfigClockSource+0x1c>
 800444c:	2302      	movs	r3, #2
 800444e:	e0b6      	b.n	80045be <HAL_TIM_ConfigClockSource+0x18a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800446e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800447a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448c:	d03e      	beq.n	800450c <HAL_TIM_ConfigClockSource+0xd8>
 800448e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004492:	f200 8087 	bhi.w	80045a4 <HAL_TIM_ConfigClockSource+0x170>
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449a:	f000 8086 	beq.w	80045aa <HAL_TIM_ConfigClockSource+0x176>
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a2:	d87f      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x170>
 80044a4:	2b70      	cmp	r3, #112	; 0x70
 80044a6:	d01a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0xaa>
 80044a8:	2b70      	cmp	r3, #112	; 0x70
 80044aa:	d87b      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x170>
 80044ac:	2b60      	cmp	r3, #96	; 0x60
 80044ae:	d050      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0x11e>
 80044b0:	2b60      	cmp	r3, #96	; 0x60
 80044b2:	d877      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x170>
 80044b4:	2b50      	cmp	r3, #80	; 0x50
 80044b6:	d03c      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0xfe>
 80044b8:	2b50      	cmp	r3, #80	; 0x50
 80044ba:	d873      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x170>
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d058      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x13e>
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d86f      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x170>
 80044c4:	2b30      	cmp	r3, #48	; 0x30
 80044c6:	d064      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15e>
 80044c8:	2b30      	cmp	r3, #48	; 0x30
 80044ca:	d86b      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x170>
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d060      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15e>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d867      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x170>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d05c      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15e>
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d05a      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15e>
 80044dc:	e062      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f000 f94b 	bl	8004788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	609a      	str	r2, [r3, #8]
      break;
 800450a:	e04f      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f000 f934 	bl	8004788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800452e:	609a      	str	r2, [r3, #8]
      break;
 8004530:	e03c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6859      	ldr	r1, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	f000 f8a6 	bl	8004690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2150      	movs	r1, #80	; 0x50
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f8ff 	bl	800474e <TIM_ITRx_SetConfig>
      break;
 8004550:	e02c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	f000 f8c5 	bl	80046ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2160      	movs	r1, #96	; 0x60
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f8ef 	bl	800474e <TIM_ITRx_SetConfig>
      break;
 8004570:	e01c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	461a      	mov	r2, r3
 8004580:	f000 f886 	bl	8004690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2140      	movs	r1, #64	; 0x40
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f8df 	bl	800474e <TIM_ITRx_SetConfig>
      break;
 8004590:	e00c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f000 f8d6 	bl	800474e <TIM_ITRx_SetConfig>
      break;
 80045a2:	e003      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
      break;
 80045a8:	e000      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a2a      	ldr	r2, [pc, #168]	; (8004684 <TIM_Base_SetConfig+0xbc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <TIM_Base_SetConfig+0x20>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e6:	d108      	bne.n	80045fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a21      	ldr	r2, [pc, #132]	; (8004684 <TIM_Base_SetConfig+0xbc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00b      	beq.n	800461a <TIM_Base_SetConfig+0x52>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004608:	d007      	beq.n	800461a <TIM_Base_SetConfig+0x52>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <TIM_Base_SetConfig+0xc0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d003      	beq.n	800461a <TIM_Base_SetConfig+0x52>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1d      	ldr	r2, [pc, #116]	; (800468c <TIM_Base_SetConfig+0xc4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d108      	bne.n	800462c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <TIM_Base_SetConfig+0xbc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <TIM_Base_SetConfig+0xa0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a0b      	ldr	r2, [pc, #44]	; (8004688 <TIM_Base_SetConfig+0xc0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_Base_SetConfig+0xa0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <TIM_Base_SetConfig+0xc4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d103      	bne.n	8004670 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	615a      	str	r2, [r3, #20]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f023 0201 	bic.w	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f023 030a 	bic.w	r3, r3, #10
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b087      	sub	sp, #28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f023 0210 	bic.w	r2, r3, #16
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	031b      	lsls	r3, r3, #12
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800472a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	f043 0307 	orr.w	r3, r3, #7
 8004774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	609a      	str	r2, [r3, #8]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	021a      	lsls	r2, r3, #8
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047dc:	2302      	movs	r3, #2
 80047de:	e04a      	b.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004810:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d10c      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4313      	orrs	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40012c00 	.word	0x40012c00

08004888 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004890:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004894:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	43db      	mvns	r3, r3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048be:	b084      	sub	sp, #16
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	f107 0014 	add.w	r0, r7, #20
 80048cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	b004      	add	sp, #16
 80048fe:	4770      	bx	lr

08004900 <__errno>:
 8004900:	4b01      	ldr	r3, [pc, #4]	; (8004908 <__errno+0x8>)
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	2000001c 	.word	0x2000001c

0800490c <__libc_init_array>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4d0d      	ldr	r5, [pc, #52]	; (8004944 <__libc_init_array+0x38>)
 8004910:	4c0d      	ldr	r4, [pc, #52]	; (8004948 <__libc_init_array+0x3c>)
 8004912:	1b64      	subs	r4, r4, r5
 8004914:	10a4      	asrs	r4, r4, #2
 8004916:	2600      	movs	r6, #0
 8004918:	42a6      	cmp	r6, r4
 800491a:	d109      	bne.n	8004930 <__libc_init_array+0x24>
 800491c:	4d0b      	ldr	r5, [pc, #44]	; (800494c <__libc_init_array+0x40>)
 800491e:	4c0c      	ldr	r4, [pc, #48]	; (8004950 <__libc_init_array+0x44>)
 8004920:	f000 ffae 	bl	8005880 <_init>
 8004924:	1b64      	subs	r4, r4, r5
 8004926:	10a4      	asrs	r4, r4, #2
 8004928:	2600      	movs	r6, #0
 800492a:	42a6      	cmp	r6, r4
 800492c:	d105      	bne.n	800493a <__libc_init_array+0x2e>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	f855 3b04 	ldr.w	r3, [r5], #4
 8004934:	4798      	blx	r3
 8004936:	3601      	adds	r6, #1
 8004938:	e7ee      	b.n	8004918 <__libc_init_array+0xc>
 800493a:	f855 3b04 	ldr.w	r3, [r5], #4
 800493e:	4798      	blx	r3
 8004940:	3601      	adds	r6, #1
 8004942:	e7f2      	b.n	800492a <__libc_init_array+0x1e>
 8004944:	08005a64 	.word	0x08005a64
 8004948:	08005a64 	.word	0x08005a64
 800494c:	08005a64 	.word	0x08005a64
 8004950:	08005a68 	.word	0x08005a68

08004954 <memset>:
 8004954:	4402      	add	r2, r0
 8004956:	4603      	mov	r3, r0
 8004958:	4293      	cmp	r3, r2
 800495a:	d100      	bne.n	800495e <memset+0xa>
 800495c:	4770      	bx	lr
 800495e:	f803 1b01 	strb.w	r1, [r3], #1
 8004962:	e7f9      	b.n	8004958 <memset+0x4>

08004964 <iprintf>:
 8004964:	b40f      	push	{r0, r1, r2, r3}
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <iprintf+0x2c>)
 8004968:	b513      	push	{r0, r1, r4, lr}
 800496a:	681c      	ldr	r4, [r3, #0]
 800496c:	b124      	cbz	r4, 8004978 <iprintf+0x14>
 800496e:	69a3      	ldr	r3, [r4, #24]
 8004970:	b913      	cbnz	r3, 8004978 <iprintf+0x14>
 8004972:	4620      	mov	r0, r4
 8004974:	f000 f866 	bl	8004a44 <__sinit>
 8004978:	ab05      	add	r3, sp, #20
 800497a:	9a04      	ldr	r2, [sp, #16]
 800497c:	68a1      	ldr	r1, [r4, #8]
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	4620      	mov	r0, r4
 8004982:	f000 f9bd 	bl	8004d00 <_vfiprintf_r>
 8004986:	b002      	add	sp, #8
 8004988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800498c:	b004      	add	sp, #16
 800498e:	4770      	bx	lr
 8004990:	2000001c 	.word	0x2000001c

08004994 <std>:
 8004994:	2300      	movs	r3, #0
 8004996:	b510      	push	{r4, lr}
 8004998:	4604      	mov	r4, r0
 800499a:	e9c0 3300 	strd	r3, r3, [r0]
 800499e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049a2:	6083      	str	r3, [r0, #8]
 80049a4:	8181      	strh	r1, [r0, #12]
 80049a6:	6643      	str	r3, [r0, #100]	; 0x64
 80049a8:	81c2      	strh	r2, [r0, #14]
 80049aa:	6183      	str	r3, [r0, #24]
 80049ac:	4619      	mov	r1, r3
 80049ae:	2208      	movs	r2, #8
 80049b0:	305c      	adds	r0, #92	; 0x5c
 80049b2:	f7ff ffcf 	bl	8004954 <memset>
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <std+0x38>)
 80049b8:	6263      	str	r3, [r4, #36]	; 0x24
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <std+0x3c>)
 80049bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <std+0x40>)
 80049c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <std+0x44>)
 80049c4:	6224      	str	r4, [r4, #32]
 80049c6:	6323      	str	r3, [r4, #48]	; 0x30
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	bf00      	nop
 80049cc:	080052a9 	.word	0x080052a9
 80049d0:	080052cb 	.word	0x080052cb
 80049d4:	08005303 	.word	0x08005303
 80049d8:	08005327 	.word	0x08005327

080049dc <_cleanup_r>:
 80049dc:	4901      	ldr	r1, [pc, #4]	; (80049e4 <_cleanup_r+0x8>)
 80049de:	f000 b8af 	b.w	8004b40 <_fwalk_reent>
 80049e2:	bf00      	nop
 80049e4:	08005601 	.word	0x08005601

080049e8 <__sfmoreglue>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	2268      	movs	r2, #104	; 0x68
 80049ec:	1e4d      	subs	r5, r1, #1
 80049ee:	4355      	muls	r5, r2
 80049f0:	460e      	mov	r6, r1
 80049f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049f6:	f000 f8e5 	bl	8004bc4 <_malloc_r>
 80049fa:	4604      	mov	r4, r0
 80049fc:	b140      	cbz	r0, 8004a10 <__sfmoreglue+0x28>
 80049fe:	2100      	movs	r1, #0
 8004a00:	e9c0 1600 	strd	r1, r6, [r0]
 8004a04:	300c      	adds	r0, #12
 8004a06:	60a0      	str	r0, [r4, #8]
 8004a08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a0c:	f7ff ffa2 	bl	8004954 <memset>
 8004a10:	4620      	mov	r0, r4
 8004a12:	bd70      	pop	{r4, r5, r6, pc}

08004a14 <__sfp_lock_acquire>:
 8004a14:	4801      	ldr	r0, [pc, #4]	; (8004a1c <__sfp_lock_acquire+0x8>)
 8004a16:	f000 b8b3 	b.w	8004b80 <__retarget_lock_acquire_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	20000469 	.word	0x20000469

08004a20 <__sfp_lock_release>:
 8004a20:	4801      	ldr	r0, [pc, #4]	; (8004a28 <__sfp_lock_release+0x8>)
 8004a22:	f000 b8ae 	b.w	8004b82 <__retarget_lock_release_recursive>
 8004a26:	bf00      	nop
 8004a28:	20000469 	.word	0x20000469

08004a2c <__sinit_lock_acquire>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	; (8004a34 <__sinit_lock_acquire+0x8>)
 8004a2e:	f000 b8a7 	b.w	8004b80 <__retarget_lock_acquire_recursive>
 8004a32:	bf00      	nop
 8004a34:	2000046a 	.word	0x2000046a

08004a38 <__sinit_lock_release>:
 8004a38:	4801      	ldr	r0, [pc, #4]	; (8004a40 <__sinit_lock_release+0x8>)
 8004a3a:	f000 b8a2 	b.w	8004b82 <__retarget_lock_release_recursive>
 8004a3e:	bf00      	nop
 8004a40:	2000046a 	.word	0x2000046a

08004a44 <__sinit>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	4604      	mov	r4, r0
 8004a48:	f7ff fff0 	bl	8004a2c <__sinit_lock_acquire>
 8004a4c:	69a3      	ldr	r3, [r4, #24]
 8004a4e:	b11b      	cbz	r3, 8004a58 <__sinit+0x14>
 8004a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a54:	f7ff bff0 	b.w	8004a38 <__sinit_lock_release>
 8004a58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a5c:	6523      	str	r3, [r4, #80]	; 0x50
 8004a5e:	4b13      	ldr	r3, [pc, #76]	; (8004aac <__sinit+0x68>)
 8004a60:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <__sinit+0x6c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	bf04      	itt	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	61a3      	streq	r3, [r4, #24]
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f000 f820 	bl	8004ab4 <__sfp>
 8004a74:	6060      	str	r0, [r4, #4]
 8004a76:	4620      	mov	r0, r4
 8004a78:	f000 f81c 	bl	8004ab4 <__sfp>
 8004a7c:	60a0      	str	r0, [r4, #8]
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f000 f818 	bl	8004ab4 <__sfp>
 8004a84:	2200      	movs	r2, #0
 8004a86:	60e0      	str	r0, [r4, #12]
 8004a88:	2104      	movs	r1, #4
 8004a8a:	6860      	ldr	r0, [r4, #4]
 8004a8c:	f7ff ff82 	bl	8004994 <std>
 8004a90:	68a0      	ldr	r0, [r4, #8]
 8004a92:	2201      	movs	r2, #1
 8004a94:	2109      	movs	r1, #9
 8004a96:	f7ff ff7d 	bl	8004994 <std>
 8004a9a:	68e0      	ldr	r0, [r4, #12]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	2112      	movs	r1, #18
 8004aa0:	f7ff ff78 	bl	8004994 <std>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	61a3      	str	r3, [r4, #24]
 8004aa8:	e7d2      	b.n	8004a50 <__sinit+0xc>
 8004aaa:	bf00      	nop
 8004aac:	080059cc 	.word	0x080059cc
 8004ab0:	080049dd 	.word	0x080049dd

08004ab4 <__sfp>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	4607      	mov	r7, r0
 8004ab8:	f7ff ffac 	bl	8004a14 <__sfp_lock_acquire>
 8004abc:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <__sfp+0x84>)
 8004abe:	681e      	ldr	r6, [r3, #0]
 8004ac0:	69b3      	ldr	r3, [r6, #24]
 8004ac2:	b913      	cbnz	r3, 8004aca <__sfp+0x16>
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f7ff ffbd 	bl	8004a44 <__sinit>
 8004aca:	3648      	adds	r6, #72	; 0x48
 8004acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	d503      	bpl.n	8004adc <__sfp+0x28>
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	b30b      	cbz	r3, 8004b1c <__sfp+0x68>
 8004ad8:	6836      	ldr	r6, [r6, #0]
 8004ada:	e7f7      	b.n	8004acc <__sfp+0x18>
 8004adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ae0:	b9d5      	cbnz	r5, 8004b18 <__sfp+0x64>
 8004ae2:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <__sfp+0x88>)
 8004ae4:	60e3      	str	r3, [r4, #12]
 8004ae6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004aea:	6665      	str	r5, [r4, #100]	; 0x64
 8004aec:	f000 f847 	bl	8004b7e <__retarget_lock_init_recursive>
 8004af0:	f7ff ff96 	bl	8004a20 <__sfp_lock_release>
 8004af4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004af8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004afc:	6025      	str	r5, [r4, #0]
 8004afe:	61a5      	str	r5, [r4, #24]
 8004b00:	2208      	movs	r2, #8
 8004b02:	4629      	mov	r1, r5
 8004b04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b08:	f7ff ff24 	bl	8004954 <memset>
 8004b0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b14:	4620      	mov	r0, r4
 8004b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b18:	3468      	adds	r4, #104	; 0x68
 8004b1a:	e7d9      	b.n	8004ad0 <__sfp+0x1c>
 8004b1c:	2104      	movs	r1, #4
 8004b1e:	4638      	mov	r0, r7
 8004b20:	f7ff ff62 	bl	80049e8 <__sfmoreglue>
 8004b24:	4604      	mov	r4, r0
 8004b26:	6030      	str	r0, [r6, #0]
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d1d5      	bne.n	8004ad8 <__sfp+0x24>
 8004b2c:	f7ff ff78 	bl	8004a20 <__sfp_lock_release>
 8004b30:	230c      	movs	r3, #12
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	e7ee      	b.n	8004b14 <__sfp+0x60>
 8004b36:	bf00      	nop
 8004b38:	080059cc 	.word	0x080059cc
 8004b3c:	ffff0001 	.word	0xffff0001

08004b40 <_fwalk_reent>:
 8004b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b44:	4606      	mov	r6, r0
 8004b46:	4688      	mov	r8, r1
 8004b48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b4c:	2700      	movs	r7, #0
 8004b4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b52:	f1b9 0901 	subs.w	r9, r9, #1
 8004b56:	d505      	bpl.n	8004b64 <_fwalk_reent+0x24>
 8004b58:	6824      	ldr	r4, [r4, #0]
 8004b5a:	2c00      	cmp	r4, #0
 8004b5c:	d1f7      	bne.n	8004b4e <_fwalk_reent+0xe>
 8004b5e:	4638      	mov	r0, r7
 8004b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b64:	89ab      	ldrh	r3, [r5, #12]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d907      	bls.n	8004b7a <_fwalk_reent+0x3a>
 8004b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	d003      	beq.n	8004b7a <_fwalk_reent+0x3a>
 8004b72:	4629      	mov	r1, r5
 8004b74:	4630      	mov	r0, r6
 8004b76:	47c0      	blx	r8
 8004b78:	4307      	orrs	r7, r0
 8004b7a:	3568      	adds	r5, #104	; 0x68
 8004b7c:	e7e9      	b.n	8004b52 <_fwalk_reent+0x12>

08004b7e <__retarget_lock_init_recursive>:
 8004b7e:	4770      	bx	lr

08004b80 <__retarget_lock_acquire_recursive>:
 8004b80:	4770      	bx	lr

08004b82 <__retarget_lock_release_recursive>:
 8004b82:	4770      	bx	lr

08004b84 <sbrk_aligned>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	4e0e      	ldr	r6, [pc, #56]	; (8004bc0 <sbrk_aligned+0x3c>)
 8004b88:	460c      	mov	r4, r1
 8004b8a:	6831      	ldr	r1, [r6, #0]
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	b911      	cbnz	r1, 8004b96 <sbrk_aligned+0x12>
 8004b90:	f000 fb7a 	bl	8005288 <_sbrk_r>
 8004b94:	6030      	str	r0, [r6, #0]
 8004b96:	4621      	mov	r1, r4
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f000 fb75 	bl	8005288 <_sbrk_r>
 8004b9e:	1c43      	adds	r3, r0, #1
 8004ba0:	d00a      	beq.n	8004bb8 <sbrk_aligned+0x34>
 8004ba2:	1cc4      	adds	r4, r0, #3
 8004ba4:	f024 0403 	bic.w	r4, r4, #3
 8004ba8:	42a0      	cmp	r0, r4
 8004baa:	d007      	beq.n	8004bbc <sbrk_aligned+0x38>
 8004bac:	1a21      	subs	r1, r4, r0
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f000 fb6a 	bl	8005288 <_sbrk_r>
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d101      	bne.n	8004bbc <sbrk_aligned+0x38>
 8004bb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
 8004bc0:	20000470 	.word	0x20000470

08004bc4 <_malloc_r>:
 8004bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc8:	1ccd      	adds	r5, r1, #3
 8004bca:	f025 0503 	bic.w	r5, r5, #3
 8004bce:	3508      	adds	r5, #8
 8004bd0:	2d0c      	cmp	r5, #12
 8004bd2:	bf38      	it	cc
 8004bd4:	250c      	movcc	r5, #12
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	4607      	mov	r7, r0
 8004bda:	db01      	blt.n	8004be0 <_malloc_r+0x1c>
 8004bdc:	42a9      	cmp	r1, r5
 8004bde:	d905      	bls.n	8004bec <_malloc_r+0x28>
 8004be0:	230c      	movs	r3, #12
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	2600      	movs	r6, #0
 8004be6:	4630      	mov	r0, r6
 8004be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bec:	4e2e      	ldr	r6, [pc, #184]	; (8004ca8 <_malloc_r+0xe4>)
 8004bee:	f000 fdbb 	bl	8005768 <__malloc_lock>
 8004bf2:	6833      	ldr	r3, [r6, #0]
 8004bf4:	461c      	mov	r4, r3
 8004bf6:	bb34      	cbnz	r4, 8004c46 <_malloc_r+0x82>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f7ff ffc2 	bl	8004b84 <sbrk_aligned>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	4604      	mov	r4, r0
 8004c04:	d14d      	bne.n	8004ca2 <_malloc_r+0xde>
 8004c06:	6834      	ldr	r4, [r6, #0]
 8004c08:	4626      	mov	r6, r4
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	d140      	bne.n	8004c90 <_malloc_r+0xcc>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	4631      	mov	r1, r6
 8004c12:	4638      	mov	r0, r7
 8004c14:	eb04 0803 	add.w	r8, r4, r3
 8004c18:	f000 fb36 	bl	8005288 <_sbrk_r>
 8004c1c:	4580      	cmp	r8, r0
 8004c1e:	d13a      	bne.n	8004c96 <_malloc_r+0xd2>
 8004c20:	6821      	ldr	r1, [r4, #0]
 8004c22:	3503      	adds	r5, #3
 8004c24:	1a6d      	subs	r5, r5, r1
 8004c26:	f025 0503 	bic.w	r5, r5, #3
 8004c2a:	3508      	adds	r5, #8
 8004c2c:	2d0c      	cmp	r5, #12
 8004c2e:	bf38      	it	cc
 8004c30:	250c      	movcc	r5, #12
 8004c32:	4629      	mov	r1, r5
 8004c34:	4638      	mov	r0, r7
 8004c36:	f7ff ffa5 	bl	8004b84 <sbrk_aligned>
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d02b      	beq.n	8004c96 <_malloc_r+0xd2>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	442b      	add	r3, r5
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	e00e      	b.n	8004c64 <_malloc_r+0xa0>
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	1b52      	subs	r2, r2, r5
 8004c4a:	d41e      	bmi.n	8004c8a <_malloc_r+0xc6>
 8004c4c:	2a0b      	cmp	r2, #11
 8004c4e:	d916      	bls.n	8004c7e <_malloc_r+0xba>
 8004c50:	1961      	adds	r1, r4, r5
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	6025      	str	r5, [r4, #0]
 8004c56:	bf18      	it	ne
 8004c58:	6059      	strne	r1, [r3, #4]
 8004c5a:	6863      	ldr	r3, [r4, #4]
 8004c5c:	bf08      	it	eq
 8004c5e:	6031      	streq	r1, [r6, #0]
 8004c60:	5162      	str	r2, [r4, r5]
 8004c62:	604b      	str	r3, [r1, #4]
 8004c64:	4638      	mov	r0, r7
 8004c66:	f104 060b 	add.w	r6, r4, #11
 8004c6a:	f000 fd83 	bl	8005774 <__malloc_unlock>
 8004c6e:	f026 0607 	bic.w	r6, r6, #7
 8004c72:	1d23      	adds	r3, r4, #4
 8004c74:	1af2      	subs	r2, r6, r3
 8004c76:	d0b6      	beq.n	8004be6 <_malloc_r+0x22>
 8004c78:	1b9b      	subs	r3, r3, r6
 8004c7a:	50a3      	str	r3, [r4, r2]
 8004c7c:	e7b3      	b.n	8004be6 <_malloc_r+0x22>
 8004c7e:	6862      	ldr	r2, [r4, #4]
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	bf0c      	ite	eq
 8004c84:	6032      	streq	r2, [r6, #0]
 8004c86:	605a      	strne	r2, [r3, #4]
 8004c88:	e7ec      	b.n	8004c64 <_malloc_r+0xa0>
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	6864      	ldr	r4, [r4, #4]
 8004c8e:	e7b2      	b.n	8004bf6 <_malloc_r+0x32>
 8004c90:	4634      	mov	r4, r6
 8004c92:	6876      	ldr	r6, [r6, #4]
 8004c94:	e7b9      	b.n	8004c0a <_malloc_r+0x46>
 8004c96:	230c      	movs	r3, #12
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	f000 fd6a 	bl	8005774 <__malloc_unlock>
 8004ca0:	e7a1      	b.n	8004be6 <_malloc_r+0x22>
 8004ca2:	6025      	str	r5, [r4, #0]
 8004ca4:	e7de      	b.n	8004c64 <_malloc_r+0xa0>
 8004ca6:	bf00      	nop
 8004ca8:	2000046c 	.word	0x2000046c

08004cac <__sfputc_r>:
 8004cac:	6893      	ldr	r3, [r2, #8]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	b410      	push	{r4}
 8004cb4:	6093      	str	r3, [r2, #8]
 8004cb6:	da08      	bge.n	8004cca <__sfputc_r+0x1e>
 8004cb8:	6994      	ldr	r4, [r2, #24]
 8004cba:	42a3      	cmp	r3, r4
 8004cbc:	db01      	blt.n	8004cc2 <__sfputc_r+0x16>
 8004cbe:	290a      	cmp	r1, #10
 8004cc0:	d103      	bne.n	8004cca <__sfputc_r+0x1e>
 8004cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cc6:	f000 bb33 	b.w	8005330 <__swbuf_r>
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	1c58      	adds	r0, r3, #1
 8004cce:	6010      	str	r0, [r2, #0]
 8004cd0:	7019      	strb	r1, [r3, #0]
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <__sfputs_r>:
 8004cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cdc:	4606      	mov	r6, r0
 8004cde:	460f      	mov	r7, r1
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	18d5      	adds	r5, r2, r3
 8004ce4:	42ac      	cmp	r4, r5
 8004ce6:	d101      	bne.n	8004cec <__sfputs_r+0x12>
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e007      	b.n	8004cfc <__sfputs_r+0x22>
 8004cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf0:	463a      	mov	r2, r7
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f7ff ffda 	bl	8004cac <__sfputc_r>
 8004cf8:	1c43      	adds	r3, r0, #1
 8004cfa:	d1f3      	bne.n	8004ce4 <__sfputs_r+0xa>
 8004cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d00 <_vfiprintf_r>:
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	460d      	mov	r5, r1
 8004d06:	b09d      	sub	sp, #116	; 0x74
 8004d08:	4614      	mov	r4, r2
 8004d0a:	4698      	mov	r8, r3
 8004d0c:	4606      	mov	r6, r0
 8004d0e:	b118      	cbz	r0, 8004d18 <_vfiprintf_r+0x18>
 8004d10:	6983      	ldr	r3, [r0, #24]
 8004d12:	b90b      	cbnz	r3, 8004d18 <_vfiprintf_r+0x18>
 8004d14:	f7ff fe96 	bl	8004a44 <__sinit>
 8004d18:	4b89      	ldr	r3, [pc, #548]	; (8004f40 <_vfiprintf_r+0x240>)
 8004d1a:	429d      	cmp	r5, r3
 8004d1c:	d11b      	bne.n	8004d56 <_vfiprintf_r+0x56>
 8004d1e:	6875      	ldr	r5, [r6, #4]
 8004d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d22:	07d9      	lsls	r1, r3, #31
 8004d24:	d405      	bmi.n	8004d32 <_vfiprintf_r+0x32>
 8004d26:	89ab      	ldrh	r3, [r5, #12]
 8004d28:	059a      	lsls	r2, r3, #22
 8004d2a:	d402      	bmi.n	8004d32 <_vfiprintf_r+0x32>
 8004d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d2e:	f7ff ff27 	bl	8004b80 <__retarget_lock_acquire_recursive>
 8004d32:	89ab      	ldrh	r3, [r5, #12]
 8004d34:	071b      	lsls	r3, r3, #28
 8004d36:	d501      	bpl.n	8004d3c <_vfiprintf_r+0x3c>
 8004d38:	692b      	ldr	r3, [r5, #16]
 8004d3a:	b9eb      	cbnz	r3, 8004d78 <_vfiprintf_r+0x78>
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f000 fb5a 	bl	80053f8 <__swsetup_r>
 8004d44:	b1c0      	cbz	r0, 8004d78 <_vfiprintf_r+0x78>
 8004d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d48:	07dc      	lsls	r4, r3, #31
 8004d4a:	d50e      	bpl.n	8004d6a <_vfiprintf_r+0x6a>
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d50:	b01d      	add	sp, #116	; 0x74
 8004d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d56:	4b7b      	ldr	r3, [pc, #492]	; (8004f44 <_vfiprintf_r+0x244>)
 8004d58:	429d      	cmp	r5, r3
 8004d5a:	d101      	bne.n	8004d60 <_vfiprintf_r+0x60>
 8004d5c:	68b5      	ldr	r5, [r6, #8]
 8004d5e:	e7df      	b.n	8004d20 <_vfiprintf_r+0x20>
 8004d60:	4b79      	ldr	r3, [pc, #484]	; (8004f48 <_vfiprintf_r+0x248>)
 8004d62:	429d      	cmp	r5, r3
 8004d64:	bf08      	it	eq
 8004d66:	68f5      	ldreq	r5, [r6, #12]
 8004d68:	e7da      	b.n	8004d20 <_vfiprintf_r+0x20>
 8004d6a:	89ab      	ldrh	r3, [r5, #12]
 8004d6c:	0598      	lsls	r0, r3, #22
 8004d6e:	d4ed      	bmi.n	8004d4c <_vfiprintf_r+0x4c>
 8004d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d72:	f7ff ff06 	bl	8004b82 <__retarget_lock_release_recursive>
 8004d76:	e7e9      	b.n	8004d4c <_vfiprintf_r+0x4c>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d7c:	2320      	movs	r3, #32
 8004d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d86:	2330      	movs	r3, #48	; 0x30
 8004d88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f4c <_vfiprintf_r+0x24c>
 8004d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d90:	f04f 0901 	mov.w	r9, #1
 8004d94:	4623      	mov	r3, r4
 8004d96:	469a      	mov	sl, r3
 8004d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d9c:	b10a      	cbz	r2, 8004da2 <_vfiprintf_r+0xa2>
 8004d9e:	2a25      	cmp	r2, #37	; 0x25
 8004da0:	d1f9      	bne.n	8004d96 <_vfiprintf_r+0x96>
 8004da2:	ebba 0b04 	subs.w	fp, sl, r4
 8004da6:	d00b      	beq.n	8004dc0 <_vfiprintf_r+0xc0>
 8004da8:	465b      	mov	r3, fp
 8004daa:	4622      	mov	r2, r4
 8004dac:	4629      	mov	r1, r5
 8004dae:	4630      	mov	r0, r6
 8004db0:	f7ff ff93 	bl	8004cda <__sfputs_r>
 8004db4:	3001      	adds	r0, #1
 8004db6:	f000 80aa 	beq.w	8004f0e <_vfiprintf_r+0x20e>
 8004dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dbc:	445a      	add	r2, fp
 8004dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8004dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80a2 	beq.w	8004f0e <_vfiprintf_r+0x20e>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dd4:	f10a 0a01 	add.w	sl, sl, #1
 8004dd8:	9304      	str	r3, [sp, #16]
 8004dda:	9307      	str	r3, [sp, #28]
 8004ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004de0:	931a      	str	r3, [sp, #104]	; 0x68
 8004de2:	4654      	mov	r4, sl
 8004de4:	2205      	movs	r2, #5
 8004de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dea:	4858      	ldr	r0, [pc, #352]	; (8004f4c <_vfiprintf_r+0x24c>)
 8004dec:	f7fb f9c8 	bl	8000180 <memchr>
 8004df0:	9a04      	ldr	r2, [sp, #16]
 8004df2:	b9d8      	cbnz	r0, 8004e2c <_vfiprintf_r+0x12c>
 8004df4:	06d1      	lsls	r1, r2, #27
 8004df6:	bf44      	itt	mi
 8004df8:	2320      	movmi	r3, #32
 8004dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dfe:	0713      	lsls	r3, r2, #28
 8004e00:	bf44      	itt	mi
 8004e02:	232b      	movmi	r3, #43	; 0x2b
 8004e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e08:	f89a 3000 	ldrb.w	r3, [sl]
 8004e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e0e:	d015      	beq.n	8004e3c <_vfiprintf_r+0x13c>
 8004e10:	9a07      	ldr	r2, [sp, #28]
 8004e12:	4654      	mov	r4, sl
 8004e14:	2000      	movs	r0, #0
 8004e16:	f04f 0c0a 	mov.w	ip, #10
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e20:	3b30      	subs	r3, #48	; 0x30
 8004e22:	2b09      	cmp	r3, #9
 8004e24:	d94e      	bls.n	8004ec4 <_vfiprintf_r+0x1c4>
 8004e26:	b1b0      	cbz	r0, 8004e56 <_vfiprintf_r+0x156>
 8004e28:	9207      	str	r2, [sp, #28]
 8004e2a:	e014      	b.n	8004e56 <_vfiprintf_r+0x156>
 8004e2c:	eba0 0308 	sub.w	r3, r0, r8
 8004e30:	fa09 f303 	lsl.w	r3, r9, r3
 8004e34:	4313      	orrs	r3, r2
 8004e36:	9304      	str	r3, [sp, #16]
 8004e38:	46a2      	mov	sl, r4
 8004e3a:	e7d2      	b.n	8004de2 <_vfiprintf_r+0xe2>
 8004e3c:	9b03      	ldr	r3, [sp, #12]
 8004e3e:	1d19      	adds	r1, r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	9103      	str	r1, [sp, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bfbb      	ittet	lt
 8004e48:	425b      	neglt	r3, r3
 8004e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e4e:	9307      	strge	r3, [sp, #28]
 8004e50:	9307      	strlt	r3, [sp, #28]
 8004e52:	bfb8      	it	lt
 8004e54:	9204      	strlt	r2, [sp, #16]
 8004e56:	7823      	ldrb	r3, [r4, #0]
 8004e58:	2b2e      	cmp	r3, #46	; 0x2e
 8004e5a:	d10c      	bne.n	8004e76 <_vfiprintf_r+0x176>
 8004e5c:	7863      	ldrb	r3, [r4, #1]
 8004e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e60:	d135      	bne.n	8004ece <_vfiprintf_r+0x1ce>
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	1d1a      	adds	r2, r3, #4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	9203      	str	r2, [sp, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfb8      	it	lt
 8004e6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e72:	3402      	adds	r4, #2
 8004e74:	9305      	str	r3, [sp, #20]
 8004e76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f5c <_vfiprintf_r+0x25c>
 8004e7a:	7821      	ldrb	r1, [r4, #0]
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	4650      	mov	r0, sl
 8004e80:	f7fb f97e 	bl	8000180 <memchr>
 8004e84:	b140      	cbz	r0, 8004e98 <_vfiprintf_r+0x198>
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	eba0 000a 	sub.w	r0, r0, sl
 8004e8c:	fa03 f000 	lsl.w	r0, r3, r0
 8004e90:	9b04      	ldr	r3, [sp, #16]
 8004e92:	4303      	orrs	r3, r0
 8004e94:	3401      	adds	r4, #1
 8004e96:	9304      	str	r3, [sp, #16]
 8004e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e9c:	482c      	ldr	r0, [pc, #176]	; (8004f50 <_vfiprintf_r+0x250>)
 8004e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ea2:	2206      	movs	r2, #6
 8004ea4:	f7fb f96c 	bl	8000180 <memchr>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d03f      	beq.n	8004f2c <_vfiprintf_r+0x22c>
 8004eac:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <_vfiprintf_r+0x254>)
 8004eae:	bb1b      	cbnz	r3, 8004ef8 <_vfiprintf_r+0x1f8>
 8004eb0:	9b03      	ldr	r3, [sp, #12]
 8004eb2:	3307      	adds	r3, #7
 8004eb4:	f023 0307 	bic.w	r3, r3, #7
 8004eb8:	3308      	adds	r3, #8
 8004eba:	9303      	str	r3, [sp, #12]
 8004ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ebe:	443b      	add	r3, r7
 8004ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec2:	e767      	b.n	8004d94 <_vfiprintf_r+0x94>
 8004ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ec8:	460c      	mov	r4, r1
 8004eca:	2001      	movs	r0, #1
 8004ecc:	e7a5      	b.n	8004e1a <_vfiprintf_r+0x11a>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	3401      	adds	r4, #1
 8004ed2:	9305      	str	r3, [sp, #20]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f04f 0c0a 	mov.w	ip, #10
 8004eda:	4620      	mov	r0, r4
 8004edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ee0:	3a30      	subs	r2, #48	; 0x30
 8004ee2:	2a09      	cmp	r2, #9
 8004ee4:	d903      	bls.n	8004eee <_vfiprintf_r+0x1ee>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0c5      	beq.n	8004e76 <_vfiprintf_r+0x176>
 8004eea:	9105      	str	r1, [sp, #20]
 8004eec:	e7c3      	b.n	8004e76 <_vfiprintf_r+0x176>
 8004eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e7f0      	b.n	8004eda <_vfiprintf_r+0x1da>
 8004ef8:	ab03      	add	r3, sp, #12
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	462a      	mov	r2, r5
 8004efe:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <_vfiprintf_r+0x258>)
 8004f00:	a904      	add	r1, sp, #16
 8004f02:	4630      	mov	r0, r6
 8004f04:	f3af 8000 	nop.w
 8004f08:	4607      	mov	r7, r0
 8004f0a:	1c78      	adds	r0, r7, #1
 8004f0c:	d1d6      	bne.n	8004ebc <_vfiprintf_r+0x1bc>
 8004f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f10:	07d9      	lsls	r1, r3, #31
 8004f12:	d405      	bmi.n	8004f20 <_vfiprintf_r+0x220>
 8004f14:	89ab      	ldrh	r3, [r5, #12]
 8004f16:	059a      	lsls	r2, r3, #22
 8004f18:	d402      	bmi.n	8004f20 <_vfiprintf_r+0x220>
 8004f1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f1c:	f7ff fe31 	bl	8004b82 <__retarget_lock_release_recursive>
 8004f20:	89ab      	ldrh	r3, [r5, #12]
 8004f22:	065b      	lsls	r3, r3, #25
 8004f24:	f53f af12 	bmi.w	8004d4c <_vfiprintf_r+0x4c>
 8004f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f2a:	e711      	b.n	8004d50 <_vfiprintf_r+0x50>
 8004f2c:	ab03      	add	r3, sp, #12
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	462a      	mov	r2, r5
 8004f32:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <_vfiprintf_r+0x258>)
 8004f34:	a904      	add	r1, sp, #16
 8004f36:	4630      	mov	r0, r6
 8004f38:	f000 f880 	bl	800503c <_printf_i>
 8004f3c:	e7e4      	b.n	8004f08 <_vfiprintf_r+0x208>
 8004f3e:	bf00      	nop
 8004f40:	080059f0 	.word	0x080059f0
 8004f44:	08005a10 	.word	0x08005a10
 8004f48:	080059d0 	.word	0x080059d0
 8004f4c:	08005a30 	.word	0x08005a30
 8004f50:	08005a3a 	.word	0x08005a3a
 8004f54:	00000000 	.word	0x00000000
 8004f58:	08004cdb 	.word	0x08004cdb
 8004f5c:	08005a36 	.word	0x08005a36

08004f60 <_printf_common>:
 8004f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	4616      	mov	r6, r2
 8004f66:	4699      	mov	r9, r3
 8004f68:	688a      	ldr	r2, [r1, #8]
 8004f6a:	690b      	ldr	r3, [r1, #16]
 8004f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f70:	4293      	cmp	r3, r2
 8004f72:	bfb8      	it	lt
 8004f74:	4613      	movlt	r3, r2
 8004f76:	6033      	str	r3, [r6, #0]
 8004f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	b10a      	cbz	r2, 8004f86 <_printf_common+0x26>
 8004f82:	3301      	adds	r3, #1
 8004f84:	6033      	str	r3, [r6, #0]
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	0699      	lsls	r1, r3, #26
 8004f8a:	bf42      	ittt	mi
 8004f8c:	6833      	ldrmi	r3, [r6, #0]
 8004f8e:	3302      	addmi	r3, #2
 8004f90:	6033      	strmi	r3, [r6, #0]
 8004f92:	6825      	ldr	r5, [r4, #0]
 8004f94:	f015 0506 	ands.w	r5, r5, #6
 8004f98:	d106      	bne.n	8004fa8 <_printf_common+0x48>
 8004f9a:	f104 0a19 	add.w	sl, r4, #25
 8004f9e:	68e3      	ldr	r3, [r4, #12]
 8004fa0:	6832      	ldr	r2, [r6, #0]
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	dc26      	bgt.n	8004ff6 <_printf_common+0x96>
 8004fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fac:	1e13      	subs	r3, r2, #0
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	bf18      	it	ne
 8004fb2:	2301      	movne	r3, #1
 8004fb4:	0692      	lsls	r2, r2, #26
 8004fb6:	d42b      	bmi.n	8005010 <_printf_common+0xb0>
 8004fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	47c0      	blx	r8
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d01e      	beq.n	8005004 <_printf_common+0xa4>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	68e5      	ldr	r5, [r4, #12]
 8004fca:	6832      	ldr	r2, [r6, #0]
 8004fcc:	f003 0306 	and.w	r3, r3, #6
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	bf08      	it	eq
 8004fd4:	1aad      	subeq	r5, r5, r2
 8004fd6:	68a3      	ldr	r3, [r4, #8]
 8004fd8:	6922      	ldr	r2, [r4, #16]
 8004fda:	bf0c      	ite	eq
 8004fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe0:	2500      	movne	r5, #0
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	bfc4      	itt	gt
 8004fe6:	1a9b      	subgt	r3, r3, r2
 8004fe8:	18ed      	addgt	r5, r5, r3
 8004fea:	2600      	movs	r6, #0
 8004fec:	341a      	adds	r4, #26
 8004fee:	42b5      	cmp	r5, r6
 8004ff0:	d11a      	bne.n	8005028 <_printf_common+0xc8>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e008      	b.n	8005008 <_printf_common+0xa8>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4652      	mov	r2, sl
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	47c0      	blx	r8
 8005000:	3001      	adds	r0, #1
 8005002:	d103      	bne.n	800500c <_printf_common+0xac>
 8005004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500c:	3501      	adds	r5, #1
 800500e:	e7c6      	b.n	8004f9e <_printf_common+0x3e>
 8005010:	18e1      	adds	r1, r4, r3
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	2030      	movs	r0, #48	; 0x30
 8005016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800501a:	4422      	add	r2, r4
 800501c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005024:	3302      	adds	r3, #2
 8005026:	e7c7      	b.n	8004fb8 <_printf_common+0x58>
 8005028:	2301      	movs	r3, #1
 800502a:	4622      	mov	r2, r4
 800502c:	4649      	mov	r1, r9
 800502e:	4638      	mov	r0, r7
 8005030:	47c0      	blx	r8
 8005032:	3001      	adds	r0, #1
 8005034:	d0e6      	beq.n	8005004 <_printf_common+0xa4>
 8005036:	3601      	adds	r6, #1
 8005038:	e7d9      	b.n	8004fee <_printf_common+0x8e>
	...

0800503c <_printf_i>:
 800503c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005040:	7e0f      	ldrb	r7, [r1, #24]
 8005042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005044:	2f78      	cmp	r7, #120	; 0x78
 8005046:	4691      	mov	r9, r2
 8005048:	4680      	mov	r8, r0
 800504a:	460c      	mov	r4, r1
 800504c:	469a      	mov	sl, r3
 800504e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005052:	d807      	bhi.n	8005064 <_printf_i+0x28>
 8005054:	2f62      	cmp	r7, #98	; 0x62
 8005056:	d80a      	bhi.n	800506e <_printf_i+0x32>
 8005058:	2f00      	cmp	r7, #0
 800505a:	f000 80d8 	beq.w	800520e <_printf_i+0x1d2>
 800505e:	2f58      	cmp	r7, #88	; 0x58
 8005060:	f000 80a3 	beq.w	80051aa <_printf_i+0x16e>
 8005064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800506c:	e03a      	b.n	80050e4 <_printf_i+0xa8>
 800506e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005072:	2b15      	cmp	r3, #21
 8005074:	d8f6      	bhi.n	8005064 <_printf_i+0x28>
 8005076:	a101      	add	r1, pc, #4	; (adr r1, 800507c <_printf_i+0x40>)
 8005078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800507c:	080050d5 	.word	0x080050d5
 8005080:	080050e9 	.word	0x080050e9
 8005084:	08005065 	.word	0x08005065
 8005088:	08005065 	.word	0x08005065
 800508c:	08005065 	.word	0x08005065
 8005090:	08005065 	.word	0x08005065
 8005094:	080050e9 	.word	0x080050e9
 8005098:	08005065 	.word	0x08005065
 800509c:	08005065 	.word	0x08005065
 80050a0:	08005065 	.word	0x08005065
 80050a4:	08005065 	.word	0x08005065
 80050a8:	080051f5 	.word	0x080051f5
 80050ac:	08005119 	.word	0x08005119
 80050b0:	080051d7 	.word	0x080051d7
 80050b4:	08005065 	.word	0x08005065
 80050b8:	08005065 	.word	0x08005065
 80050bc:	08005217 	.word	0x08005217
 80050c0:	08005065 	.word	0x08005065
 80050c4:	08005119 	.word	0x08005119
 80050c8:	08005065 	.word	0x08005065
 80050cc:	08005065 	.word	0x08005065
 80050d0:	080051df 	.word	0x080051df
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	1d1a      	adds	r2, r3, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	602a      	str	r2, [r5, #0]
 80050dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0a3      	b.n	8005230 <_printf_i+0x1f4>
 80050e8:	6820      	ldr	r0, [r4, #0]
 80050ea:	6829      	ldr	r1, [r5, #0]
 80050ec:	0606      	lsls	r6, r0, #24
 80050ee:	f101 0304 	add.w	r3, r1, #4
 80050f2:	d50a      	bpl.n	800510a <_printf_i+0xce>
 80050f4:	680e      	ldr	r6, [r1, #0]
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	2e00      	cmp	r6, #0
 80050fa:	da03      	bge.n	8005104 <_printf_i+0xc8>
 80050fc:	232d      	movs	r3, #45	; 0x2d
 80050fe:	4276      	negs	r6, r6
 8005100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005104:	485e      	ldr	r0, [pc, #376]	; (8005280 <_printf_i+0x244>)
 8005106:	230a      	movs	r3, #10
 8005108:	e019      	b.n	800513e <_printf_i+0x102>
 800510a:	680e      	ldr	r6, [r1, #0]
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005112:	bf18      	it	ne
 8005114:	b236      	sxthne	r6, r6
 8005116:	e7ef      	b.n	80050f8 <_printf_i+0xbc>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	6820      	ldr	r0, [r4, #0]
 800511c:	1d19      	adds	r1, r3, #4
 800511e:	6029      	str	r1, [r5, #0]
 8005120:	0601      	lsls	r1, r0, #24
 8005122:	d501      	bpl.n	8005128 <_printf_i+0xec>
 8005124:	681e      	ldr	r6, [r3, #0]
 8005126:	e002      	b.n	800512e <_printf_i+0xf2>
 8005128:	0646      	lsls	r6, r0, #25
 800512a:	d5fb      	bpl.n	8005124 <_printf_i+0xe8>
 800512c:	881e      	ldrh	r6, [r3, #0]
 800512e:	4854      	ldr	r0, [pc, #336]	; (8005280 <_printf_i+0x244>)
 8005130:	2f6f      	cmp	r7, #111	; 0x6f
 8005132:	bf0c      	ite	eq
 8005134:	2308      	moveq	r3, #8
 8005136:	230a      	movne	r3, #10
 8005138:	2100      	movs	r1, #0
 800513a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800513e:	6865      	ldr	r5, [r4, #4]
 8005140:	60a5      	str	r5, [r4, #8]
 8005142:	2d00      	cmp	r5, #0
 8005144:	bfa2      	ittt	ge
 8005146:	6821      	ldrge	r1, [r4, #0]
 8005148:	f021 0104 	bicge.w	r1, r1, #4
 800514c:	6021      	strge	r1, [r4, #0]
 800514e:	b90e      	cbnz	r6, 8005154 <_printf_i+0x118>
 8005150:	2d00      	cmp	r5, #0
 8005152:	d04d      	beq.n	80051f0 <_printf_i+0x1b4>
 8005154:	4615      	mov	r5, r2
 8005156:	fbb6 f1f3 	udiv	r1, r6, r3
 800515a:	fb03 6711 	mls	r7, r3, r1, r6
 800515e:	5dc7      	ldrb	r7, [r0, r7]
 8005160:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005164:	4637      	mov	r7, r6
 8005166:	42bb      	cmp	r3, r7
 8005168:	460e      	mov	r6, r1
 800516a:	d9f4      	bls.n	8005156 <_printf_i+0x11a>
 800516c:	2b08      	cmp	r3, #8
 800516e:	d10b      	bne.n	8005188 <_printf_i+0x14c>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	07de      	lsls	r6, r3, #31
 8005174:	d508      	bpl.n	8005188 <_printf_i+0x14c>
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	6861      	ldr	r1, [r4, #4]
 800517a:	4299      	cmp	r1, r3
 800517c:	bfde      	ittt	le
 800517e:	2330      	movle	r3, #48	; 0x30
 8005180:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005184:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005188:	1b52      	subs	r2, r2, r5
 800518a:	6122      	str	r2, [r4, #16]
 800518c:	f8cd a000 	str.w	sl, [sp]
 8005190:	464b      	mov	r3, r9
 8005192:	aa03      	add	r2, sp, #12
 8005194:	4621      	mov	r1, r4
 8005196:	4640      	mov	r0, r8
 8005198:	f7ff fee2 	bl	8004f60 <_printf_common>
 800519c:	3001      	adds	r0, #1
 800519e:	d14c      	bne.n	800523a <_printf_i+0x1fe>
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051a4:	b004      	add	sp, #16
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051aa:	4835      	ldr	r0, [pc, #212]	; (8005280 <_printf_i+0x244>)
 80051ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051b0:	6829      	ldr	r1, [r5, #0]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80051b8:	6029      	str	r1, [r5, #0]
 80051ba:	061d      	lsls	r5, r3, #24
 80051bc:	d514      	bpl.n	80051e8 <_printf_i+0x1ac>
 80051be:	07df      	lsls	r7, r3, #31
 80051c0:	bf44      	itt	mi
 80051c2:	f043 0320 	orrmi.w	r3, r3, #32
 80051c6:	6023      	strmi	r3, [r4, #0]
 80051c8:	b91e      	cbnz	r6, 80051d2 <_printf_i+0x196>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	f023 0320 	bic.w	r3, r3, #32
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	2310      	movs	r3, #16
 80051d4:	e7b0      	b.n	8005138 <_printf_i+0xfc>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	f043 0320 	orr.w	r3, r3, #32
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	2378      	movs	r3, #120	; 0x78
 80051e0:	4828      	ldr	r0, [pc, #160]	; (8005284 <_printf_i+0x248>)
 80051e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051e6:	e7e3      	b.n	80051b0 <_printf_i+0x174>
 80051e8:	0659      	lsls	r1, r3, #25
 80051ea:	bf48      	it	mi
 80051ec:	b2b6      	uxthmi	r6, r6
 80051ee:	e7e6      	b.n	80051be <_printf_i+0x182>
 80051f0:	4615      	mov	r5, r2
 80051f2:	e7bb      	b.n	800516c <_printf_i+0x130>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	6826      	ldr	r6, [r4, #0]
 80051f8:	6961      	ldr	r1, [r4, #20]
 80051fa:	1d18      	adds	r0, r3, #4
 80051fc:	6028      	str	r0, [r5, #0]
 80051fe:	0635      	lsls	r5, r6, #24
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	d501      	bpl.n	8005208 <_printf_i+0x1cc>
 8005204:	6019      	str	r1, [r3, #0]
 8005206:	e002      	b.n	800520e <_printf_i+0x1d2>
 8005208:	0670      	lsls	r0, r6, #25
 800520a:	d5fb      	bpl.n	8005204 <_printf_i+0x1c8>
 800520c:	8019      	strh	r1, [r3, #0]
 800520e:	2300      	movs	r3, #0
 8005210:	6123      	str	r3, [r4, #16]
 8005212:	4615      	mov	r5, r2
 8005214:	e7ba      	b.n	800518c <_printf_i+0x150>
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	1d1a      	adds	r2, r3, #4
 800521a:	602a      	str	r2, [r5, #0]
 800521c:	681d      	ldr	r5, [r3, #0]
 800521e:	6862      	ldr	r2, [r4, #4]
 8005220:	2100      	movs	r1, #0
 8005222:	4628      	mov	r0, r5
 8005224:	f7fa ffac 	bl	8000180 <memchr>
 8005228:	b108      	cbz	r0, 800522e <_printf_i+0x1f2>
 800522a:	1b40      	subs	r0, r0, r5
 800522c:	6060      	str	r0, [r4, #4]
 800522e:	6863      	ldr	r3, [r4, #4]
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	2300      	movs	r3, #0
 8005234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005238:	e7a8      	b.n	800518c <_printf_i+0x150>
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	462a      	mov	r2, r5
 800523e:	4649      	mov	r1, r9
 8005240:	4640      	mov	r0, r8
 8005242:	47d0      	blx	sl
 8005244:	3001      	adds	r0, #1
 8005246:	d0ab      	beq.n	80051a0 <_printf_i+0x164>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	079b      	lsls	r3, r3, #30
 800524c:	d413      	bmi.n	8005276 <_printf_i+0x23a>
 800524e:	68e0      	ldr	r0, [r4, #12]
 8005250:	9b03      	ldr	r3, [sp, #12]
 8005252:	4298      	cmp	r0, r3
 8005254:	bfb8      	it	lt
 8005256:	4618      	movlt	r0, r3
 8005258:	e7a4      	b.n	80051a4 <_printf_i+0x168>
 800525a:	2301      	movs	r3, #1
 800525c:	4632      	mov	r2, r6
 800525e:	4649      	mov	r1, r9
 8005260:	4640      	mov	r0, r8
 8005262:	47d0      	blx	sl
 8005264:	3001      	adds	r0, #1
 8005266:	d09b      	beq.n	80051a0 <_printf_i+0x164>
 8005268:	3501      	adds	r5, #1
 800526a:	68e3      	ldr	r3, [r4, #12]
 800526c:	9903      	ldr	r1, [sp, #12]
 800526e:	1a5b      	subs	r3, r3, r1
 8005270:	42ab      	cmp	r3, r5
 8005272:	dcf2      	bgt.n	800525a <_printf_i+0x21e>
 8005274:	e7eb      	b.n	800524e <_printf_i+0x212>
 8005276:	2500      	movs	r5, #0
 8005278:	f104 0619 	add.w	r6, r4, #25
 800527c:	e7f5      	b.n	800526a <_printf_i+0x22e>
 800527e:	bf00      	nop
 8005280:	08005a41 	.word	0x08005a41
 8005284:	08005a52 	.word	0x08005a52

08005288 <_sbrk_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4d06      	ldr	r5, [pc, #24]	; (80052a4 <_sbrk_r+0x1c>)
 800528c:	2300      	movs	r3, #0
 800528e:	4604      	mov	r4, r0
 8005290:	4608      	mov	r0, r1
 8005292:	602b      	str	r3, [r5, #0]
 8005294:	f7fb fe62 	bl	8000f5c <_sbrk>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_sbrk_r+0x1a>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_sbrk_r+0x1a>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20000474 	.word	0x20000474

080052a8 <__sread>:
 80052a8:	b510      	push	{r4, lr}
 80052aa:	460c      	mov	r4, r1
 80052ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b0:	f000 fab2 	bl	8005818 <_read_r>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	bfab      	itete	ge
 80052b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052ba:	89a3      	ldrhlt	r3, [r4, #12]
 80052bc:	181b      	addge	r3, r3, r0
 80052be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052c2:	bfac      	ite	ge
 80052c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052c6:	81a3      	strhlt	r3, [r4, #12]
 80052c8:	bd10      	pop	{r4, pc}

080052ca <__swrite>:
 80052ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ce:	461f      	mov	r7, r3
 80052d0:	898b      	ldrh	r3, [r1, #12]
 80052d2:	05db      	lsls	r3, r3, #23
 80052d4:	4605      	mov	r5, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	4616      	mov	r6, r2
 80052da:	d505      	bpl.n	80052e8 <__swrite+0x1e>
 80052dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e0:	2302      	movs	r3, #2
 80052e2:	2200      	movs	r2, #0
 80052e4:	f000 f9c8 	bl	8005678 <_lseek_r>
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052f2:	81a3      	strh	r3, [r4, #12]
 80052f4:	4632      	mov	r2, r6
 80052f6:	463b      	mov	r3, r7
 80052f8:	4628      	mov	r0, r5
 80052fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052fe:	f000 b869 	b.w	80053d4 <_write_r>

08005302 <__sseek>:
 8005302:	b510      	push	{r4, lr}
 8005304:	460c      	mov	r4, r1
 8005306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530a:	f000 f9b5 	bl	8005678 <_lseek_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	bf15      	itete	ne
 8005314:	6560      	strne	r0, [r4, #84]	; 0x54
 8005316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800531a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800531e:	81a3      	strheq	r3, [r4, #12]
 8005320:	bf18      	it	ne
 8005322:	81a3      	strhne	r3, [r4, #12]
 8005324:	bd10      	pop	{r4, pc}

08005326 <__sclose>:
 8005326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532a:	f000 b8d3 	b.w	80054d4 <_close_r>
	...

08005330 <__swbuf_r>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	460e      	mov	r6, r1
 8005334:	4614      	mov	r4, r2
 8005336:	4605      	mov	r5, r0
 8005338:	b118      	cbz	r0, 8005342 <__swbuf_r+0x12>
 800533a:	6983      	ldr	r3, [r0, #24]
 800533c:	b90b      	cbnz	r3, 8005342 <__swbuf_r+0x12>
 800533e:	f7ff fb81 	bl	8004a44 <__sinit>
 8005342:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <__swbuf_r+0x98>)
 8005344:	429c      	cmp	r4, r3
 8005346:	d12b      	bne.n	80053a0 <__swbuf_r+0x70>
 8005348:	686c      	ldr	r4, [r5, #4]
 800534a:	69a3      	ldr	r3, [r4, #24]
 800534c:	60a3      	str	r3, [r4, #8]
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	071a      	lsls	r2, r3, #28
 8005352:	d52f      	bpl.n	80053b4 <__swbuf_r+0x84>
 8005354:	6923      	ldr	r3, [r4, #16]
 8005356:	b36b      	cbz	r3, 80053b4 <__swbuf_r+0x84>
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	6820      	ldr	r0, [r4, #0]
 800535c:	1ac0      	subs	r0, r0, r3
 800535e:	6963      	ldr	r3, [r4, #20]
 8005360:	b2f6      	uxtb	r6, r6
 8005362:	4283      	cmp	r3, r0
 8005364:	4637      	mov	r7, r6
 8005366:	dc04      	bgt.n	8005372 <__swbuf_r+0x42>
 8005368:	4621      	mov	r1, r4
 800536a:	4628      	mov	r0, r5
 800536c:	f000 f948 	bl	8005600 <_fflush_r>
 8005370:	bb30      	cbnz	r0, 80053c0 <__swbuf_r+0x90>
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	3b01      	subs	r3, #1
 8005376:	60a3      	str	r3, [r4, #8]
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	6022      	str	r2, [r4, #0]
 800537e:	701e      	strb	r6, [r3, #0]
 8005380:	6963      	ldr	r3, [r4, #20]
 8005382:	3001      	adds	r0, #1
 8005384:	4283      	cmp	r3, r0
 8005386:	d004      	beq.n	8005392 <__swbuf_r+0x62>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	07db      	lsls	r3, r3, #31
 800538c:	d506      	bpl.n	800539c <__swbuf_r+0x6c>
 800538e:	2e0a      	cmp	r6, #10
 8005390:	d104      	bne.n	800539c <__swbuf_r+0x6c>
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 f933 	bl	8005600 <_fflush_r>
 800539a:	b988      	cbnz	r0, 80053c0 <__swbuf_r+0x90>
 800539c:	4638      	mov	r0, r7
 800539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <__swbuf_r+0x9c>)
 80053a2:	429c      	cmp	r4, r3
 80053a4:	d101      	bne.n	80053aa <__swbuf_r+0x7a>
 80053a6:	68ac      	ldr	r4, [r5, #8]
 80053a8:	e7cf      	b.n	800534a <__swbuf_r+0x1a>
 80053aa:	4b09      	ldr	r3, [pc, #36]	; (80053d0 <__swbuf_r+0xa0>)
 80053ac:	429c      	cmp	r4, r3
 80053ae:	bf08      	it	eq
 80053b0:	68ec      	ldreq	r4, [r5, #12]
 80053b2:	e7ca      	b.n	800534a <__swbuf_r+0x1a>
 80053b4:	4621      	mov	r1, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 f81e 	bl	80053f8 <__swsetup_r>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d0cb      	beq.n	8005358 <__swbuf_r+0x28>
 80053c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80053c4:	e7ea      	b.n	800539c <__swbuf_r+0x6c>
 80053c6:	bf00      	nop
 80053c8:	080059f0 	.word	0x080059f0
 80053cc:	08005a10 	.word	0x08005a10
 80053d0:	080059d0 	.word	0x080059d0

080053d4 <_write_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d07      	ldr	r5, [pc, #28]	; (80053f4 <_write_r+0x20>)
 80053d8:	4604      	mov	r4, r0
 80053da:	4608      	mov	r0, r1
 80053dc:	4611      	mov	r1, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	602a      	str	r2, [r5, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f7fb fd69 	bl	8000eba <_write>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_write_r+0x1e>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_write_r+0x1e>
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	20000474 	.word	0x20000474

080053f8 <__swsetup_r>:
 80053f8:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <__swsetup_r+0xcc>)
 80053fa:	b570      	push	{r4, r5, r6, lr}
 80053fc:	681d      	ldr	r5, [r3, #0]
 80053fe:	4606      	mov	r6, r0
 8005400:	460c      	mov	r4, r1
 8005402:	b125      	cbz	r5, 800540e <__swsetup_r+0x16>
 8005404:	69ab      	ldr	r3, [r5, #24]
 8005406:	b913      	cbnz	r3, 800540e <__swsetup_r+0x16>
 8005408:	4628      	mov	r0, r5
 800540a:	f7ff fb1b 	bl	8004a44 <__sinit>
 800540e:	4b2e      	ldr	r3, [pc, #184]	; (80054c8 <__swsetup_r+0xd0>)
 8005410:	429c      	cmp	r4, r3
 8005412:	d10f      	bne.n	8005434 <__swsetup_r+0x3c>
 8005414:	686c      	ldr	r4, [r5, #4]
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800541c:	0719      	lsls	r1, r3, #28
 800541e:	d42c      	bmi.n	800547a <__swsetup_r+0x82>
 8005420:	06dd      	lsls	r5, r3, #27
 8005422:	d411      	bmi.n	8005448 <__swsetup_r+0x50>
 8005424:	2309      	movs	r3, #9
 8005426:	6033      	str	r3, [r6, #0]
 8005428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005432:	e03e      	b.n	80054b2 <__swsetup_r+0xba>
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <__swsetup_r+0xd4>)
 8005436:	429c      	cmp	r4, r3
 8005438:	d101      	bne.n	800543e <__swsetup_r+0x46>
 800543a:	68ac      	ldr	r4, [r5, #8]
 800543c:	e7eb      	b.n	8005416 <__swsetup_r+0x1e>
 800543e:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <__swsetup_r+0xd8>)
 8005440:	429c      	cmp	r4, r3
 8005442:	bf08      	it	eq
 8005444:	68ec      	ldreq	r4, [r5, #12]
 8005446:	e7e6      	b.n	8005416 <__swsetup_r+0x1e>
 8005448:	0758      	lsls	r0, r3, #29
 800544a:	d512      	bpl.n	8005472 <__swsetup_r+0x7a>
 800544c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800544e:	b141      	cbz	r1, 8005462 <__swsetup_r+0x6a>
 8005450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005454:	4299      	cmp	r1, r3
 8005456:	d002      	beq.n	800545e <__swsetup_r+0x66>
 8005458:	4630      	mov	r0, r6
 800545a:	f000 f991 	bl	8005780 <_free_r>
 800545e:	2300      	movs	r3, #0
 8005460:	6363      	str	r3, [r4, #52]	; 0x34
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	2300      	movs	r3, #0
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f043 0308 	orr.w	r3, r3, #8
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	b94b      	cbnz	r3, 8005492 <__swsetup_r+0x9a>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005488:	d003      	beq.n	8005492 <__swsetup_r+0x9a>
 800548a:	4621      	mov	r1, r4
 800548c:	4630      	mov	r0, r6
 800548e:	f000 f92b 	bl	80056e8 <__smakebuf_r>
 8005492:	89a0      	ldrh	r0, [r4, #12]
 8005494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005498:	f010 0301 	ands.w	r3, r0, #1
 800549c:	d00a      	beq.n	80054b4 <__swsetup_r+0xbc>
 800549e:	2300      	movs	r3, #0
 80054a0:	60a3      	str	r3, [r4, #8]
 80054a2:	6963      	ldr	r3, [r4, #20]
 80054a4:	425b      	negs	r3, r3
 80054a6:	61a3      	str	r3, [r4, #24]
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	b943      	cbnz	r3, 80054be <__swsetup_r+0xc6>
 80054ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054b0:	d1ba      	bne.n	8005428 <__swsetup_r+0x30>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	0781      	lsls	r1, r0, #30
 80054b6:	bf58      	it	pl
 80054b8:	6963      	ldrpl	r3, [r4, #20]
 80054ba:	60a3      	str	r3, [r4, #8]
 80054bc:	e7f4      	b.n	80054a8 <__swsetup_r+0xb0>
 80054be:	2000      	movs	r0, #0
 80054c0:	e7f7      	b.n	80054b2 <__swsetup_r+0xba>
 80054c2:	bf00      	nop
 80054c4:	2000001c 	.word	0x2000001c
 80054c8:	080059f0 	.word	0x080059f0
 80054cc:	08005a10 	.word	0x08005a10
 80054d0:	080059d0 	.word	0x080059d0

080054d4 <_close_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d06      	ldr	r5, [pc, #24]	; (80054f0 <_close_r+0x1c>)
 80054d8:	2300      	movs	r3, #0
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	f7fb fd07 	bl	8000ef2 <_close>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_close_r+0x1a>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_close_r+0x1a>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20000474 	.word	0x20000474

080054f4 <__sflush_r>:
 80054f4:	898a      	ldrh	r2, [r1, #12]
 80054f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	4605      	mov	r5, r0
 80054fc:	0710      	lsls	r0, r2, #28
 80054fe:	460c      	mov	r4, r1
 8005500:	d458      	bmi.n	80055b4 <__sflush_r+0xc0>
 8005502:	684b      	ldr	r3, [r1, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	dc05      	bgt.n	8005514 <__sflush_r+0x20>
 8005508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	dc02      	bgt.n	8005514 <__sflush_r+0x20>
 800550e:	2000      	movs	r0, #0
 8005510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005516:	2e00      	cmp	r6, #0
 8005518:	d0f9      	beq.n	800550e <__sflush_r+0x1a>
 800551a:	2300      	movs	r3, #0
 800551c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005520:	682f      	ldr	r7, [r5, #0]
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	d032      	beq.n	800558c <__sflush_r+0x98>
 8005526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	075a      	lsls	r2, r3, #29
 800552c:	d505      	bpl.n	800553a <__sflush_r+0x46>
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	1ac0      	subs	r0, r0, r3
 8005532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005534:	b10b      	cbz	r3, 800553a <__sflush_r+0x46>
 8005536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005538:	1ac0      	subs	r0, r0, r3
 800553a:	2300      	movs	r3, #0
 800553c:	4602      	mov	r2, r0
 800553e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005540:	6a21      	ldr	r1, [r4, #32]
 8005542:	4628      	mov	r0, r5
 8005544:	47b0      	blx	r6
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	d106      	bne.n	800555a <__sflush_r+0x66>
 800554c:	6829      	ldr	r1, [r5, #0]
 800554e:	291d      	cmp	r1, #29
 8005550:	d82c      	bhi.n	80055ac <__sflush_r+0xb8>
 8005552:	4a2a      	ldr	r2, [pc, #168]	; (80055fc <__sflush_r+0x108>)
 8005554:	40ca      	lsrs	r2, r1
 8005556:	07d6      	lsls	r6, r2, #31
 8005558:	d528      	bpl.n	80055ac <__sflush_r+0xb8>
 800555a:	2200      	movs	r2, #0
 800555c:	6062      	str	r2, [r4, #4]
 800555e:	04d9      	lsls	r1, r3, #19
 8005560:	6922      	ldr	r2, [r4, #16]
 8005562:	6022      	str	r2, [r4, #0]
 8005564:	d504      	bpl.n	8005570 <__sflush_r+0x7c>
 8005566:	1c42      	adds	r2, r0, #1
 8005568:	d101      	bne.n	800556e <__sflush_r+0x7a>
 800556a:	682b      	ldr	r3, [r5, #0]
 800556c:	b903      	cbnz	r3, 8005570 <__sflush_r+0x7c>
 800556e:	6560      	str	r0, [r4, #84]	; 0x54
 8005570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005572:	602f      	str	r7, [r5, #0]
 8005574:	2900      	cmp	r1, #0
 8005576:	d0ca      	beq.n	800550e <__sflush_r+0x1a>
 8005578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800557c:	4299      	cmp	r1, r3
 800557e:	d002      	beq.n	8005586 <__sflush_r+0x92>
 8005580:	4628      	mov	r0, r5
 8005582:	f000 f8fd 	bl	8005780 <_free_r>
 8005586:	2000      	movs	r0, #0
 8005588:	6360      	str	r0, [r4, #52]	; 0x34
 800558a:	e7c1      	b.n	8005510 <__sflush_r+0x1c>
 800558c:	6a21      	ldr	r1, [r4, #32]
 800558e:	2301      	movs	r3, #1
 8005590:	4628      	mov	r0, r5
 8005592:	47b0      	blx	r6
 8005594:	1c41      	adds	r1, r0, #1
 8005596:	d1c7      	bne.n	8005528 <__sflush_r+0x34>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0c4      	beq.n	8005528 <__sflush_r+0x34>
 800559e:	2b1d      	cmp	r3, #29
 80055a0:	d001      	beq.n	80055a6 <__sflush_r+0xb2>
 80055a2:	2b16      	cmp	r3, #22
 80055a4:	d101      	bne.n	80055aa <__sflush_r+0xb6>
 80055a6:	602f      	str	r7, [r5, #0]
 80055a8:	e7b1      	b.n	800550e <__sflush_r+0x1a>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	e7ad      	b.n	8005510 <__sflush_r+0x1c>
 80055b4:	690f      	ldr	r7, [r1, #16]
 80055b6:	2f00      	cmp	r7, #0
 80055b8:	d0a9      	beq.n	800550e <__sflush_r+0x1a>
 80055ba:	0793      	lsls	r3, r2, #30
 80055bc:	680e      	ldr	r6, [r1, #0]
 80055be:	bf08      	it	eq
 80055c0:	694b      	ldreq	r3, [r1, #20]
 80055c2:	600f      	str	r7, [r1, #0]
 80055c4:	bf18      	it	ne
 80055c6:	2300      	movne	r3, #0
 80055c8:	eba6 0807 	sub.w	r8, r6, r7
 80055cc:	608b      	str	r3, [r1, #8]
 80055ce:	f1b8 0f00 	cmp.w	r8, #0
 80055d2:	dd9c      	ble.n	800550e <__sflush_r+0x1a>
 80055d4:	6a21      	ldr	r1, [r4, #32]
 80055d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055d8:	4643      	mov	r3, r8
 80055da:	463a      	mov	r2, r7
 80055dc:	4628      	mov	r0, r5
 80055de:	47b0      	blx	r6
 80055e0:	2800      	cmp	r0, #0
 80055e2:	dc06      	bgt.n	80055f2 <__sflush_r+0xfe>
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055f0:	e78e      	b.n	8005510 <__sflush_r+0x1c>
 80055f2:	4407      	add	r7, r0
 80055f4:	eba8 0800 	sub.w	r8, r8, r0
 80055f8:	e7e9      	b.n	80055ce <__sflush_r+0xda>
 80055fa:	bf00      	nop
 80055fc:	20400001 	.word	0x20400001

08005600 <_fflush_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	690b      	ldr	r3, [r1, #16]
 8005604:	4605      	mov	r5, r0
 8005606:	460c      	mov	r4, r1
 8005608:	b913      	cbnz	r3, 8005610 <_fflush_r+0x10>
 800560a:	2500      	movs	r5, #0
 800560c:	4628      	mov	r0, r5
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	b118      	cbz	r0, 800561a <_fflush_r+0x1a>
 8005612:	6983      	ldr	r3, [r0, #24]
 8005614:	b90b      	cbnz	r3, 800561a <_fflush_r+0x1a>
 8005616:	f7ff fa15 	bl	8004a44 <__sinit>
 800561a:	4b14      	ldr	r3, [pc, #80]	; (800566c <_fflush_r+0x6c>)
 800561c:	429c      	cmp	r4, r3
 800561e:	d11b      	bne.n	8005658 <_fflush_r+0x58>
 8005620:	686c      	ldr	r4, [r5, #4]
 8005622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0ef      	beq.n	800560a <_fflush_r+0xa>
 800562a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800562c:	07d0      	lsls	r0, r2, #31
 800562e:	d404      	bmi.n	800563a <_fflush_r+0x3a>
 8005630:	0599      	lsls	r1, r3, #22
 8005632:	d402      	bmi.n	800563a <_fflush_r+0x3a>
 8005634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005636:	f7ff faa3 	bl	8004b80 <__retarget_lock_acquire_recursive>
 800563a:	4628      	mov	r0, r5
 800563c:	4621      	mov	r1, r4
 800563e:	f7ff ff59 	bl	80054f4 <__sflush_r>
 8005642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005644:	07da      	lsls	r2, r3, #31
 8005646:	4605      	mov	r5, r0
 8005648:	d4e0      	bmi.n	800560c <_fflush_r+0xc>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	059b      	lsls	r3, r3, #22
 800564e:	d4dd      	bmi.n	800560c <_fflush_r+0xc>
 8005650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005652:	f7ff fa96 	bl	8004b82 <__retarget_lock_release_recursive>
 8005656:	e7d9      	b.n	800560c <_fflush_r+0xc>
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <_fflush_r+0x70>)
 800565a:	429c      	cmp	r4, r3
 800565c:	d101      	bne.n	8005662 <_fflush_r+0x62>
 800565e:	68ac      	ldr	r4, [r5, #8]
 8005660:	e7df      	b.n	8005622 <_fflush_r+0x22>
 8005662:	4b04      	ldr	r3, [pc, #16]	; (8005674 <_fflush_r+0x74>)
 8005664:	429c      	cmp	r4, r3
 8005666:	bf08      	it	eq
 8005668:	68ec      	ldreq	r4, [r5, #12]
 800566a:	e7da      	b.n	8005622 <_fflush_r+0x22>
 800566c:	080059f0 	.word	0x080059f0
 8005670:	08005a10 	.word	0x08005a10
 8005674:	080059d0 	.word	0x080059d0

08005678 <_lseek_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	; (8005698 <_lseek_r+0x20>)
 800567c:	4604      	mov	r4, r0
 800567e:	4608      	mov	r0, r1
 8005680:	4611      	mov	r1, r2
 8005682:	2200      	movs	r2, #0
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f7fb fc5a 	bl	8000f40 <_lseek>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_lseek_r+0x1e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_lseek_r+0x1e>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	20000474 	.word	0x20000474

0800569c <__swhatbuf_r>:
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	460e      	mov	r6, r1
 80056a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a4:	2900      	cmp	r1, #0
 80056a6:	b096      	sub	sp, #88	; 0x58
 80056a8:	4614      	mov	r4, r2
 80056aa:	461d      	mov	r5, r3
 80056ac:	da08      	bge.n	80056c0 <__swhatbuf_r+0x24>
 80056ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	602a      	str	r2, [r5, #0]
 80056b6:	061a      	lsls	r2, r3, #24
 80056b8:	d410      	bmi.n	80056dc <__swhatbuf_r+0x40>
 80056ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056be:	e00e      	b.n	80056de <__swhatbuf_r+0x42>
 80056c0:	466a      	mov	r2, sp
 80056c2:	f000 f8bb 	bl	800583c <_fstat_r>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	dbf1      	blt.n	80056ae <__swhatbuf_r+0x12>
 80056ca:	9a01      	ldr	r2, [sp, #4]
 80056cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056d4:	425a      	negs	r2, r3
 80056d6:	415a      	adcs	r2, r3
 80056d8:	602a      	str	r2, [r5, #0]
 80056da:	e7ee      	b.n	80056ba <__swhatbuf_r+0x1e>
 80056dc:	2340      	movs	r3, #64	; 0x40
 80056de:	2000      	movs	r0, #0
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	b016      	add	sp, #88	; 0x58
 80056e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080056e8 <__smakebuf_r>:
 80056e8:	898b      	ldrh	r3, [r1, #12]
 80056ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056ec:	079d      	lsls	r5, r3, #30
 80056ee:	4606      	mov	r6, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	d507      	bpl.n	8005704 <__smakebuf_r+0x1c>
 80056f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	6123      	str	r3, [r4, #16]
 80056fc:	2301      	movs	r3, #1
 80056fe:	6163      	str	r3, [r4, #20]
 8005700:	b002      	add	sp, #8
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	ab01      	add	r3, sp, #4
 8005706:	466a      	mov	r2, sp
 8005708:	f7ff ffc8 	bl	800569c <__swhatbuf_r>
 800570c:	9900      	ldr	r1, [sp, #0]
 800570e:	4605      	mov	r5, r0
 8005710:	4630      	mov	r0, r6
 8005712:	f7ff fa57 	bl	8004bc4 <_malloc_r>
 8005716:	b948      	cbnz	r0, 800572c <__smakebuf_r+0x44>
 8005718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800571c:	059a      	lsls	r2, r3, #22
 800571e:	d4ef      	bmi.n	8005700 <__smakebuf_r+0x18>
 8005720:	f023 0303 	bic.w	r3, r3, #3
 8005724:	f043 0302 	orr.w	r3, r3, #2
 8005728:	81a3      	strh	r3, [r4, #12]
 800572a:	e7e3      	b.n	80056f4 <__smakebuf_r+0xc>
 800572c:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <__smakebuf_r+0x7c>)
 800572e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	6020      	str	r0, [r4, #0]
 8005734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	9b00      	ldr	r3, [sp, #0]
 800573c:	6163      	str	r3, [r4, #20]
 800573e:	9b01      	ldr	r3, [sp, #4]
 8005740:	6120      	str	r0, [r4, #16]
 8005742:	b15b      	cbz	r3, 800575c <__smakebuf_r+0x74>
 8005744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005748:	4630      	mov	r0, r6
 800574a:	f000 f889 	bl	8005860 <_isatty_r>
 800574e:	b128      	cbz	r0, 800575c <__smakebuf_r+0x74>
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	89a0      	ldrh	r0, [r4, #12]
 800575e:	4305      	orrs	r5, r0
 8005760:	81a5      	strh	r5, [r4, #12]
 8005762:	e7cd      	b.n	8005700 <__smakebuf_r+0x18>
 8005764:	080049dd 	.word	0x080049dd

08005768 <__malloc_lock>:
 8005768:	4801      	ldr	r0, [pc, #4]	; (8005770 <__malloc_lock+0x8>)
 800576a:	f7ff ba09 	b.w	8004b80 <__retarget_lock_acquire_recursive>
 800576e:	bf00      	nop
 8005770:	20000468 	.word	0x20000468

08005774 <__malloc_unlock>:
 8005774:	4801      	ldr	r0, [pc, #4]	; (800577c <__malloc_unlock+0x8>)
 8005776:	f7ff ba04 	b.w	8004b82 <__retarget_lock_release_recursive>
 800577a:	bf00      	nop
 800577c:	20000468 	.word	0x20000468

08005780 <_free_r>:
 8005780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005782:	2900      	cmp	r1, #0
 8005784:	d044      	beq.n	8005810 <_free_r+0x90>
 8005786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578a:	9001      	str	r0, [sp, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f1a1 0404 	sub.w	r4, r1, #4
 8005792:	bfb8      	it	lt
 8005794:	18e4      	addlt	r4, r4, r3
 8005796:	f7ff ffe7 	bl	8005768 <__malloc_lock>
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <_free_r+0x94>)
 800579c:	9801      	ldr	r0, [sp, #4]
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	b933      	cbnz	r3, 80057b0 <_free_r+0x30>
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	6014      	str	r4, [r2, #0]
 80057a6:	b003      	add	sp, #12
 80057a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ac:	f7ff bfe2 	b.w	8005774 <__malloc_unlock>
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d908      	bls.n	80057c6 <_free_r+0x46>
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	1961      	adds	r1, r4, r5
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf01      	itttt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	1949      	addeq	r1, r1, r5
 80057c2:	6021      	streq	r1, [r4, #0]
 80057c4:	e7ed      	b.n	80057a2 <_free_r+0x22>
 80057c6:	461a      	mov	r2, r3
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b10b      	cbz	r3, 80057d0 <_free_r+0x50>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d9fa      	bls.n	80057c6 <_free_r+0x46>
 80057d0:	6811      	ldr	r1, [r2, #0]
 80057d2:	1855      	adds	r5, r2, r1
 80057d4:	42a5      	cmp	r5, r4
 80057d6:	d10b      	bne.n	80057f0 <_free_r+0x70>
 80057d8:	6824      	ldr	r4, [r4, #0]
 80057da:	4421      	add	r1, r4
 80057dc:	1854      	adds	r4, r2, r1
 80057de:	42a3      	cmp	r3, r4
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	d1e0      	bne.n	80057a6 <_free_r+0x26>
 80057e4:	681c      	ldr	r4, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	6053      	str	r3, [r2, #4]
 80057ea:	4421      	add	r1, r4
 80057ec:	6011      	str	r1, [r2, #0]
 80057ee:	e7da      	b.n	80057a6 <_free_r+0x26>
 80057f0:	d902      	bls.n	80057f8 <_free_r+0x78>
 80057f2:	230c      	movs	r3, #12
 80057f4:	6003      	str	r3, [r0, #0]
 80057f6:	e7d6      	b.n	80057a6 <_free_r+0x26>
 80057f8:	6825      	ldr	r5, [r4, #0]
 80057fa:	1961      	adds	r1, r4, r5
 80057fc:	428b      	cmp	r3, r1
 80057fe:	bf04      	itt	eq
 8005800:	6819      	ldreq	r1, [r3, #0]
 8005802:	685b      	ldreq	r3, [r3, #4]
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	bf04      	itt	eq
 8005808:	1949      	addeq	r1, r1, r5
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	6054      	str	r4, [r2, #4]
 800580e:	e7ca      	b.n	80057a6 <_free_r+0x26>
 8005810:	b003      	add	sp, #12
 8005812:	bd30      	pop	{r4, r5, pc}
 8005814:	2000046c 	.word	0x2000046c

08005818 <_read_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	; (8005838 <_read_r+0x20>)
 800581c:	4604      	mov	r4, r0
 800581e:	4608      	mov	r0, r1
 8005820:	4611      	mov	r1, r2
 8005822:	2200      	movs	r2, #0
 8005824:	602a      	str	r2, [r5, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	f7fb fb2a 	bl	8000e80 <_read>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_read_r+0x1e>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_read_r+0x1e>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000474 	.word	0x20000474

0800583c <_fstat_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4d07      	ldr	r5, [pc, #28]	; (800585c <_fstat_r+0x20>)
 8005840:	2300      	movs	r3, #0
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	4611      	mov	r1, r2
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	f7fb fb5e 	bl	8000f0a <_fstat>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	d102      	bne.n	8005858 <_fstat_r+0x1c>
 8005852:	682b      	ldr	r3, [r5, #0]
 8005854:	b103      	cbz	r3, 8005858 <_fstat_r+0x1c>
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	bd38      	pop	{r3, r4, r5, pc}
 800585a:	bf00      	nop
 800585c:	20000474 	.word	0x20000474

08005860 <_isatty_r>:
 8005860:	b538      	push	{r3, r4, r5, lr}
 8005862:	4d06      	ldr	r5, [pc, #24]	; (800587c <_isatty_r+0x1c>)
 8005864:	2300      	movs	r3, #0
 8005866:	4604      	mov	r4, r0
 8005868:	4608      	mov	r0, r1
 800586a:	602b      	str	r3, [r5, #0]
 800586c:	f7fb fb5d 	bl	8000f2a <_isatty>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d102      	bne.n	800587a <_isatty_r+0x1a>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	b103      	cbz	r3, 800587a <_isatty_r+0x1a>
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	20000474 	.word	0x20000474

08005880 <_init>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	bf00      	nop
 8005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005886:	bc08      	pop	{r3}
 8005888:	469e      	mov	lr, r3
 800588a:	4770      	bx	lr

0800588c <_fini>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	bf00      	nop
 8005890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005892:	bc08      	pop	{r3}
 8005894:	469e      	mov	lr, r3
 8005896:	4770      	bx	lr
