
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057bc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000008  08005ad0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003f8  20000080  08005b48  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000478  08005b48  00020478  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015946  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002c1c  00000000  00000000  000359f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001988  00000000  00000000  00038618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001850  00000000  00000000  00039fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002352e  00000000  00000000  0003b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000156dc  00000000  00000000  0005ed1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e1722  00000000  00000000  000743fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00155b1c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007410  00000000  00000000  00155b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	080058e4 	.word	0x080058e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	080058e4 	.word	0x080058e4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000230:	f023 0218 	bic.w	r2, r3, #24
 8000234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000268:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000270:	68fb      	ldr	r3, [r7, #12]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <recieve16Bit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_Bool recieve16Bit(uint16_t *read_to){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	if(HAL_SPI_Receive(&hspi1, (uint8_t*)read_to, 2, 10) == HAL_OK) {
 8000288:	230a      	movs	r3, #10
 800028a:	2202      	movs	r2, #2
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <recieve16Bit+0x28>)
 8000290:	f003 fb64 	bl	800395c <HAL_SPI_Receive>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <recieve16Bit+0x1e>
		return true;
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <recieve16Bit+0x20>
	}

	return false;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000009c 	.word	0x2000009c

080002ac <send16Bit>:

_Bool send16Bit(uint16_t *send){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)send, 2,10) == HAL_OK){
 80002b4:	230a      	movs	r3, #10
 80002b6:	2202      	movs	r2, #2
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <send16Bit+0x28>)
 80002bc:	f003 f9e0 	bl	8003680 <HAL_SPI_Transmit>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <send16Bit+0x1e>
		return true;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <send16Bit+0x20>

	}
	return false;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000009c 	.word	0x2000009c

080002d8 <getStartInput>:

void getStartInput(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	uint8_t header;
		  HAL_StatusTypeDef receive_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80002de:	1db9      	adds	r1, r7, #6
 80002e0:	230a      	movs	r3, #10
 80002e2:	2201      	movs	r2, #1
 80002e4:	4825      	ldr	r0, [pc, #148]	; (800037c <getStartInput+0xa4>)
 80002e6:	f003 fb39 	bl	800395c <HAL_SPI_Receive>
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
		  if(receive_status == HAL_OK) {
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d130      	bne.n	8000356 <getStartInput+0x7e>
			  switch((Header)header) {
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d020      	beq.n	800033c <getStartInput+0x64>
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	dc32      	bgt.n	8000364 <getStartInput+0x8c>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d002      	beq.n	8000308 <getStartInput+0x30>
 8000302:	2b02      	cmp	r3, #2
 8000304:	d00d      	beq.n	8000322 <getStartInput+0x4a>
 8000306:	e02d      	b.n	8000364 <getStartInput+0x8c>
			  	  case SLEEP_TIME:
			  		  if(!recieve16Bit(&sleep_time)) {
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <getStartInput+0xa8>)
 800030a:	f7ff ffb9 	bl	8000280 <recieve16Bit>
 800030e:	4603      	mov	r3, r0
 8000310:	f083 0301 	eor.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d01f      	beq.n	800035a <getStartInput+0x82>
			  			  printf("ERROR COULD NOT RECIEVE SLEEP TIME");
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <getStartInput+0xac>)
 800031c:	f004 fb54 	bl	80049c8 <iprintf>
			  		  	  }
					  break;
 8000320:	e01b      	b.n	800035a <getStartInput+0x82>
				  case RUN_AMOUNT:
					  if(!recieve16Bit(&max_amount_of_runs)){
 8000322:	4819      	ldr	r0, [pc, #100]	; (8000388 <getStartInput+0xb0>)
 8000324:	f7ff ffac 	bl	8000280 <recieve16Bit>
 8000328:	4603      	mov	r3, r0
 800032a:	f083 0301 	eor.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d014      	beq.n	800035e <getStartInput+0x86>
						  printf("ERROR COULD NOT RECIEVE AMOUNT OF RUNS");
 8000334:	4815      	ldr	r0, [pc, #84]	; (800038c <getStartInput+0xb4>)
 8000336:	f004 fb47 	bl	80049c8 <iprintf>
					  }

					  break;
 800033a:	e010      	b.n	800035e <getStartInput+0x86>
				  case TEST_MODE:
					  if(!recieve16Bit(&test_mode)){
 800033c:	4814      	ldr	r0, [pc, #80]	; (8000390 <getStartInput+0xb8>)
 800033e:	f7ff ff9f 	bl	8000280 <recieve16Bit>
 8000342:	4603      	mov	r3, r0
 8000344:	f083 0301 	eor.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d009      	beq.n	8000362 <getStartInput+0x8a>
						  printf("TEST MODE COULD NOT BE RECIEVED");
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <getStartInput+0xbc>)
 8000350:	f004 fb3a 	bl	80049c8 <iprintf>
					  }
					  break;
 8000354:	e005      	b.n	8000362 <getStartInput+0x8a>
				  }
		  }
 8000356:	bf00      	nop
 8000358:	e004      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <getStartInput+0x8c>
					  break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <getStartInput+0x8c>
					  break;
 8000362:	bf00      	nop
		  if(test_mode != 2){
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <getStartInput+0xb8>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d002      	beq.n	8000372 <getStartInput+0x9a>
			  test_input_set = true;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <getStartInput+0xc0>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		  }
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000009c 	.word	0x2000009c
 8000380:	20000458 	.word	0x20000458
 8000384:	080058fc 	.word	0x080058fc
 8000388:	2000045a 	.word	0x2000045a
 800038c:	08005920 	.word	0x08005920
 8000390:	2000000a 	.word	0x2000000a
 8000394:	08005948 	.word	0x08005948
 8000398:	2000045c 	.word	0x2000045c

0800039c <sendTestData>:
void sendTestData(uint32_t *times){
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	82fb      	strh	r3, [r7, #22]
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2110      	movs	r1, #16
 80003ac:	481e      	ldr	r0, [pc, #120]	; (8000428 <sendTestData+0x8c>)
 80003ae:	f001 f9f3 	bl	8001798 <HAL_GPIO_WritePin>
	while(index < max_amount_of_runs){
 80003b2:	e02b      	b.n	800040c <sendTestData+0x70>
		uint8_t header;
		uint32_t *ptr = &times[index];
 80003b4:	8afb      	ldrh	r3, [r7, #22]
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	4413      	add	r3, r2
 80003bc:	613b      	str	r3, [r7, #16]
		uint16_t value = *((uint16_t*)ptr);
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	81bb      	strh	r3, [r7, #12]
		HAL_StatusTypeDef recieve_status = HAL_SPI_Receive(&hspi1, &header, 1, 10);
 80003c4:	f107 010e 	add.w	r1, r7, #14
 80003c8:	230a      	movs	r3, #10
 80003ca:	2201      	movs	r2, #1
 80003cc:	4817      	ldr	r0, [pc, #92]	; (800042c <sendTestData+0x90>)
 80003ce:	f003 fac5 	bl	800395c <HAL_SPI_Receive>
 80003d2:	4603      	mov	r3, r0
 80003d4:	73fb      	strb	r3, [r7, #15]
		if(recieve_status == HAL_OK){
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d117      	bne.n	800040c <sendTestData+0x70>
			if(header == 4){
 80003dc:	7bbb      	ldrb	r3, [r7, #14]
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d111      	bne.n	8000406 <sendTestData+0x6a>
				if(!send16Bit(&value)){
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff60 	bl	80002ac <send16Bit>
 80003ec:	4603      	mov	r3, r0
 80003ee:	f083 0301 	eor.w	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <sendTestData+0x62>
					printf("COULD NOT SEND DATA");
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <sendTestData+0x94>)
 80003fa:	f004 fae5 	bl	80049c8 <iprintf>
				}
				index++;
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	3301      	adds	r3, #1
 8000402:	82fb      	strh	r3, [r7, #22]
 8000404:	e002      	b.n	800040c <sendTestData+0x70>
			}
			else{
				printf("STUB");
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <sendTestData+0x98>)
 8000408:	f004 fade 	bl	80049c8 <iprintf>
	while(index < max_amount_of_runs){
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <sendTestData+0x9c>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	8afa      	ldrh	r2, [r7, #22]
 8000412:	429a      	cmp	r2, r3
 8000414:	d3ce      	bcc.n	80003b4 <sendTestData+0x18>
			}
		}
	}
	HAL_GPIO_WritePin(TransmitReady_GPIO_Port, TransmitReady_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2110      	movs	r1, #16
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <sendTestData+0x8c>)
 800041c:	f001 f9bc 	bl	8001798 <HAL_GPIO_WritePin>
}
 8000420:	bf00      	nop
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	48000400 	.word	0x48000400
 800042c:	2000009c 	.word	0x2000009c
 8000430:	08005968 	.word	0x08005968
 8000434:	0800597c 	.word	0x0800597c
 8000438:	2000045a 	.word	0x2000045a

0800043c <calculateTestTimes>:


void calculateTestTimes(struct TimeCapture *data, uint32_t *times){
 800043c:	b480      	push	{r7}
 800043e:	b08b      	sub	sp, #44	; 0x2c
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 8000446:	2300      	movs	r3, #0
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
 800044a:	e034      	b.n	80004b6 <calculateTestTimes+0x7a>
		struct TimeCapture *time_ptr = &data[i];
 800044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044e:	00db      	lsls	r3, r3, #3
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	4413      	add	r3, r2
 8000454:	61fb      	str	r3, [r7, #28]
		uint32_t *ptr = &times[i];
 8000456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	4413      	add	r3, r2
 800045e:	61bb      	str	r3, [r7, #24]
		uint32_t start_time = time_ptr->startTime;
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	617b      	str	r3, [r7, #20]
		uint32_t end_time = time_ptr->endTime;
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	613b      	str	r3, [r7, #16]
		uint32_t fullTime;
		if(end_time >= start_time){
 800046c:	693a      	ldr	r2, [r7, #16]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	429a      	cmp	r2, r3
 8000472:	d304      	bcc.n	800047e <calculateTestTimes+0x42>
			fullTime = end_time - start_time;
 8000474:	693a      	ldr	r2, [r7, #16]
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	623b      	str	r3, [r7, #32]
 800047c:	e007      	b.n	800048e <calculateTestTimes+0x52>
		}
		else{
			fullTime = (TIM2->ARR - start_time) + end_time;
 800047e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	4413      	add	r3, r2
 800048c:	623b      	str	r3, [r7, #32]
		}
		uint32_t wake_up_time = fullTime - (sleep_time * 1000);
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <calculateTestTimes+0x94>)
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	461a      	mov	r2, r3
 8000494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000498:	fb02 f303 	mul.w	r3, r2, r3
 800049c:	461a      	mov	r2, r3
 800049e:	6a3b      	ldr	r3, [r7, #32]
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]
		debug_value = fullTime;
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <calculateTestTimes+0x98>)
 80004a6:	6a3b      	ldr	r3, [r7, #32]
 80004a8:	6013      	str	r3, [r2, #0]
		*ptr = wake_up_time;
 80004aa:	69bb      	ldr	r3, [r7, #24]
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < max_amount_of_runs; i++){
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	3301      	adds	r3, #1
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <calculateTestTimes+0x9c>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004be:	4293      	cmp	r3, r2
 80004c0:	dbc4      	blt.n	800044c <calculateTestTimes+0x10>
	}
}
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	372c      	adds	r7, #44	; 0x2c
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	20000458 	.word	0x20000458
 80004d4:	2000000c 	.word	0x2000000c
 80004d8:	2000045a 	.word	0x2000045a

080004dc <sendInterrupt>:

void sendInterrupt(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	if(!interruptInDeepsleep){
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <sendInterrupt+0x48>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	f083 0301 	eor.w	r3, r3, #1
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d00a      	beq.n	8000504 <sendInterrupt+0x28>
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	2102      	movs	r1, #2
 80004f2:	480d      	ldr	r0, [pc, #52]	; (8000528 <sendInterrupt+0x4c>)
 80004f4:	f001 f950 	bl	8001798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2102      	movs	r1, #2
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <sendInterrupt+0x4c>)
 80004fe:	f001 f94b 	bl	8001798 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(DeepseepWakeup_GPIO_Port,DeepseepWakeup_Pin, GPIO_PIN_RESET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(DeepseepWakeup_GPIO_Port, DeepseepWakeup_Pin, GPIO_PIN_SET);
	}
}
 8000502:	e00c      	b.n	800051e <sendInterrupt+0x42>
		HAL_GPIO_WritePin(DeepseepWakeup_GPIO_Port,DeepseepWakeup_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2108      	movs	r1, #8
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <sendInterrupt+0x4c>)
 800050a:	f001 f945 	bl	8001798 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f000 fe9e 	bl	8001250 <HAL_Delay>
		HAL_GPIO_WritePin(DeepseepWakeup_GPIO_Port, DeepseepWakeup_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2108      	movs	r1, #8
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <sendInterrupt+0x4c>)
 800051a:	f001 f93d 	bl	8001798 <HAL_GPIO_WritePin>
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000008 	.word	0x20000008
 8000528:	48000800 	.word	0x48000800

0800052c <testUsingInterrupts>:

void testUsingInterrupts(struct TimeCapture *times){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
	while(run_test){
 8000538:	e038      	b.n	80005ac <testUsingInterrupts+0x80>
		struct TimeCapture *time_ptr = &times[i];
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
		HAL_Delay(sleep_time);
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <testUsingInterrupts+0x94>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fe81 	bl	8001250 <HAL_Delay>
		sendInterrupt();
 800054e:	f7ff ffc5 	bl	80004dc <sendInterrupt>
		HAL_GPIO_WritePin(FirstRunControl_GPIO_Port, FirstRunControl_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2101      	movs	r1, #1
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f001 f91d 	bl	8001798 <HAL_GPIO_WritePin>
		while(!timeBuffReady);
 800055e:	bf00      	nop
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <testUsingInterrupts+0x98>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	f083 0301 	eor.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1f8      	bne.n	8000560 <testUsingInterrupts+0x34>
		*time_ptr = timeBuff;
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <testUsingInterrupts+0x9c>)
 8000572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000576:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3301      	adds	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
		timeBuff.startTime = 0;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <testUsingInterrupts+0x9c>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <testUsingInterrupts+0x9c>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <testUsingInterrupts+0x98>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <testUsingInterrupts+0xa0>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <testUsingInterrupts+0xa4>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	429a      	cmp	r2, r3
 80005a0:	d104      	bne.n	80005ac <testUsingInterrupts+0x80>
			//FINAL WAKE
			sendInterrupt();
 80005a2:	f7ff ff9b 	bl	80004dc <sendInterrupt>
			run_test = false;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <testUsingInterrupts+0xa8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
	while(run_test){
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <testUsingInterrupts+0xa8>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1c2      	bne.n	800053a <testUsingInterrupts+0xe>
		}
	}
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000458 	.word	0x20000458
 80005c4:	20000454 	.word	0x20000454
 80005c8:	20000444 	.word	0x20000444
 80005cc:	20000440 	.word	0x20000440
 80005d0:	2000045a 	.word	0x2000045a
 80005d4:	20000455 	.word	0x20000455

080005d8 <testUsingIntervals>:

void testUsingIntervals(struct TimeCapture *times){
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
	while(run_test){
 80005e4:	e02f      	b.n	8000646 <testUsingIntervals+0x6e>
		struct TimeCapture *time_ptr = &times[i];
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	00db      	lsls	r3, r3, #3
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
		while(!timeBuffReady);
 80005f0:	bf00      	nop
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <testUsingIntervals+0x84>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	f083 0301 	eor.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f8      	bne.n	80005f2 <testUsingIntervals+0x1a>
		*time_ptr = timeBuff;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4a17      	ldr	r2, [pc, #92]	; (8000660 <testUsingIntervals+0x88>)
 8000604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000608:	e883 0003 	stmia.w	r3, {r0, r1}
		i++;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3301      	adds	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
		lastBuff = timeBuff;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <testUsingIntervals+0x8c>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <testUsingIntervals+0x88>)
 8000616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061a:	e883 0003 	stmia.w	r3, {r0, r1}
		timeBuff.startTime = 0;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <testUsingIntervals+0x88>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
		timeBuff.endTime = 0;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <testUsingIntervals+0x88>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
		timeBuffReady = false;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <testUsingIntervals+0x84>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
		if(captures == max_amount_of_runs * 2){
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <testUsingIntervals+0x90>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <testUsingIntervals+0x94>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	429a      	cmp	r2, r3
 800063e:	d102      	bne.n	8000646 <testUsingIntervals+0x6e>
			run_test = false;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <testUsingIntervals+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	while(run_test){
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <testUsingIntervals+0x98>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1cb      	bne.n	80005e6 <testUsingIntervals+0xe>
		}

	}
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	20000454 	.word	0x20000454
 8000660:	20000444 	.word	0x20000444
 8000664:	2000044c 	.word	0x2000044c
 8000668:	20000440 	.word	0x20000440
 800066c:	2000045a 	.word	0x2000045a
 8000670:	20000455 	.word	0x20000455

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000678:	b08f      	sub	sp, #60	; 0x3c
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fd62 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f8e2 	bl	8000848 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000684:	f000 f956 	bl	8000934 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 fa20 	bl	8000acc <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800068c:	f000 f9f6 	bl	8000a7c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000690:	f000 f9a6 	bl	80009e0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000694:	f000 f96c 	bl	8000970 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000698:	4865      	ldr	r0, [pc, #404]	; (8000830 <main+0x1bc>)
 800069a:	f003 feb7 	bl	800440c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!finished){
 800069e:	4b65      	ldr	r3, [pc, #404]	; (8000834 <main+0x1c0>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f8      	beq.n	800069e <main+0x2a>
	  if(!test_input_set){
 80006ac:	4b62      	ldr	r3, [pc, #392]	; (8000838 <main+0x1c4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <main+0x4c>
	 	  	  getStartInput();
 80006ba:	f7ff fe0d 	bl	80002d8 <getStartInput>
 80006be:	e7ee      	b.n	800069e <main+0x2a>
	 	  }
	 	  else{
 80006c0:	466b      	mov	r3, sp
 80006c2:	607b      	str	r3, [r7, #4]
	 		  struct TimeCapture times[max_amount_of_runs];
 80006c4:	4b5d      	ldr	r3, [pc, #372]	; (800083c <main+0x1c8>)
 80006c6:	8819      	ldrh	r1, [r3, #0]
 80006c8:	460b      	mov	r3, r1
 80006ca:	3b01      	subs	r3, #1
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
 80006ce:	b28b      	uxth	r3, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	461c      	mov	r4, r3
 80006d4:	4615      	mov	r5, r2
 80006d6:	f04f 0200 	mov.w	r2, #0
 80006da:	f04f 0300 	mov.w	r3, #0
 80006de:	01ab      	lsls	r3, r5, #6
 80006e0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80006e4:	01a2      	lsls	r2, r4, #6
 80006e6:	b28b      	uxth	r3, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	4698      	mov	r8, r3
 80006ec:	4691      	mov	r9, r2
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80006fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80006fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000702:	460b      	mov	r3, r1
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	3307      	adds	r3, #7
 8000708:	08db      	lsrs	r3, r3, #3
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	ebad 0d03 	sub.w	sp, sp, r3
 8000710:	466b      	mov	r3, sp
 8000712:	3303      	adds	r3, #3
 8000714:	089b      	lsrs	r3, r3, #2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
	 		  if(test_mode == 1){
 800071a:	4b49      	ldr	r3, [pc, #292]	; (8000840 <main+0x1cc>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d141      	bne.n	80007a6 <main+0x132>
 8000722:	466b      	mov	r3, sp
 8000724:	461e      	mov	r6, r3
	 			  // RUN TESTS USING ITERRUPTS
	 			  run_test = true;
 8000726:	4a47      	ldr	r2, [pc, #284]	; (8000844 <main+0x1d0>)
 8000728:	2301      	movs	r3, #1
 800072a:	7013      	strb	r3, [r2, #0]
	 			  testUsingInterrupts(times);
 800072c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800072e:	f7ff fefd 	bl	800052c <testUsingInterrupts>
	 			  uint32_t test_times[max_amount_of_runs];
 8000732:	4b42      	ldr	r3, [pc, #264]	; (800083c <main+0x1c8>)
 8000734:	8819      	ldrh	r1, [r3, #0]
 8000736:	460b      	mov	r3, r1
 8000738:	3b01      	subs	r3, #1
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
 800073c:	b28b      	uxth	r3, r1
 800073e:	2200      	movs	r2, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	61fa      	str	r2, [r7, #28]
 8000744:	f04f 0200 	mov.w	r2, #0
 8000748:	f04f 0300 	mov.w	r3, #0
 800074c:	69f8      	ldr	r0, [r7, #28]
 800074e:	0143      	lsls	r3, r0, #5
 8000750:	69b8      	ldr	r0, [r7, #24]
 8000752:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000756:	69b8      	ldr	r0, [r7, #24]
 8000758:	0142      	lsls	r2, r0, #5
 800075a:	b28b      	uxth	r3, r1
 800075c:	2200      	movs	r2, #0
 800075e:	469a      	mov	sl, r3
 8000760:	4693      	mov	fp, r2
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	f04f 0300 	mov.w	r3, #0
 800076a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800076e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000772:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000776:	460b      	mov	r3, r1
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	3307      	adds	r3, #7
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	ebad 0d03 	sub.w	sp, sp, r3
 8000784:	466b      	mov	r3, sp
 8000786:	3303      	adds	r3, #3
 8000788:	089b      	lsrs	r3, r3, #2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	623b      	str	r3, [r7, #32]
	 			  calculateTestTimes(times,test_times);
 800078e:	6a39      	ldr	r1, [r7, #32]
 8000790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000792:	f7ff fe53 	bl	800043c <calculateTestTimes>
	 			  sendTestData(test_times);
 8000796:	6a38      	ldr	r0, [r7, #32]
 8000798:	f7ff fe00 	bl	800039c <sendTestData>
	 			  finished = true;
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <main+0x1c0>)
 800079e:	2301      	movs	r3, #1
 80007a0:	7013      	strb	r3, [r2, #0]
 80007a2:	46b5      	mov	sp, r6
 80007a4:	e041      	b.n	800082a <main+0x1b6>
	 		  }
	 		  else{
 80007a6:	466b      	mov	r3, sp
 80007a8:	461e      	mov	r6, r3
	 			  run_test = true;
 80007aa:	4a26      	ldr	r2, [pc, #152]	; (8000844 <main+0x1d0>)
 80007ac:	2301      	movs	r3, #1
 80007ae:	7013      	strb	r3, [r2, #0]
	 			  testUsingIntervals(times);
 80007b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007b2:	f7ff ff11 	bl	80005d8 <testUsingIntervals>
	 			  uint32_t test_times[max_amount_of_runs];
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <main+0x1c8>)
 80007b8:	8819      	ldrh	r1, [r3, #0]
 80007ba:	460b      	mov	r3, r1
 80007bc:	3b01      	subs	r3, #1
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c0:	b28b      	uxth	r3, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	617a      	str	r2, [r7, #20]
 80007c8:	f04f 0200 	mov.w	r2, #0
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	6978      	ldr	r0, [r7, #20]
 80007d2:	0143      	lsls	r3, r0, #5
 80007d4:	6938      	ldr	r0, [r7, #16]
 80007d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007da:	6938      	ldr	r0, [r7, #16]
 80007dc:	0142      	lsls	r2, r0, #5
 80007de:	b28b      	uxth	r3, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	60fa      	str	r2, [r7, #12]
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	0143      	lsls	r3, r0, #5
 80007f2:	68b8      	ldr	r0, [r7, #8]
 80007f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	0142      	lsls	r2, r0, #5
 80007fc:	460b      	mov	r3, r1
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	3307      	adds	r3, #7
 8000802:	08db      	lsrs	r3, r3, #3
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	ebad 0d03 	sub.w	sp, sp, r3
 800080a:	466b      	mov	r3, sp
 800080c:	3303      	adds	r3, #3
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
	 			  calculateTestTimes(times, test_times);
 8000814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000818:	f7ff fe10 	bl	800043c <calculateTestTimes>
	 			  sendTestData(test_times);
 800081c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800081e:	f7ff fdbd 	bl	800039c <sendTestData>
	 			  finished = true;
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <main+0x1c0>)
 8000824:	2301      	movs	r3, #1
 8000826:	7013      	strb	r3, [r2, #0]
 8000828:	46b5      	mov	sp, r6
 800082a:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  if(!finished){
 800082e:	e736      	b.n	800069e <main+0x2a>
 8000830:	20000100 	.word	0x20000100
 8000834:	20000456 	.word	0x20000456
 8000838:	2000045c 	.word	0x2000045c
 800083c:	2000045a 	.word	0x2000045a
 8000840:	2000000a 	.word	0x2000000a
 8000844:	20000455 	.word	0x20000455

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09a      	sub	sp, #104	; 0x68
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2248      	movs	r2, #72	; 0x48
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 f8ae 	bl	80049b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800086e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800087c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800087e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	f023 0303 	bic.w	r3, r3, #3
 8000888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000892:	f001 f8b5 	bl	8001a00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fcc2 	bl	8000220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <SystemClock_Config+0xe8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008a4:	4a22      	ldr	r2, [pc, #136]	; (8000930 <SystemClock_Config+0xe8>)
 80008a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <SystemClock_Config+0xe8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80008b8:	2327      	movs	r3, #39	; 0x27
 80008ba:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008d8:	2360      	movs	r3, #96	; 0x60
 80008da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008dc:	2300      	movs	r3, #0
 80008de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fc07 	bl	80020f8 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008f0:	f000 f9d2 	bl	8000c98 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008f4:	236f      	movs	r3, #111	; 0x6f
 80008f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008f8:	2302      	movs	r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2101      	movs	r1, #1
 8000914:	4618      	mov	r0, r3
 8000916:	f001 ff63 	bl	80027e0 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000920:	f000 f9ba 	bl	8000c98 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000924:	f002 fcf2 	bl	800330c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000928:	bf00      	nop
 800092a:	3768      	adds	r7, #104	; 0x68
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	58000400 	.word	0x58000400

08000934 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	; 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2250      	movs	r2, #80	; 0x50
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f004 f839 	bl	80049b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800094c:	2300      	movs	r3, #0
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000950:	2300      	movs	r3, #0
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4618      	mov	r0, r3
 8000958:	f002 fb62 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000962:	f000 f999 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000966:	bf00      	nop
 8000968:	3750      	adds	r7, #80	; 0x50
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_SPI1_Init+0x68>)
 8000976:	4a19      	ldr	r2, [pc, #100]	; (80009dc <MX_SPI1_Init+0x6c>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_SPI1_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_SPI1_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_SPI1_Init+0x68>)
 8000988:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800098c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_SPI1_Init+0x68>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_SPI1_Init+0x68>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_SPI1_Init+0x68>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_SPI1_Init+0x68>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_SPI1_Init+0x68>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_SPI1_Init+0x68>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_SPI1_Init+0x68>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_SPI1_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_SPI1_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_SPI1_Init+0x68>)
 80009c6:	f002 fdb8 	bl	800353a <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80009d0:	f000 f962 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000009c 	.word	0x2000009c
 80009dc:	40013000 	.word	0x40013000

080009e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a08:	221f      	movs	r2, #31
 8000a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a26:	4814      	ldr	r0, [pc, #80]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a28:	f003 fc98 	bl	800435c <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a32:	f000 f931 	bl	8000c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a44:	f003 fd28 	bl	8004498 <HAL_TIM_ConfigClockSource>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a4e:	f000 f923 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_TIM2_Init+0x98>)
 8000a60:	f003 fee4 	bl	800482c <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a6a:	f000 f915 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000100 	.word	0x20000100

08000a7c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a82:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <MX_USB_PCD_Init+0x4c>)
 8000a84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_USB_PCD_Init+0x48>)
 8000ab2:	f000 fea1 	bl	80017f8 <HAL_PCD_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000abc:	f000 f8ec 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000014c 	.word	0x2000014c
 8000ac8:	40006800 	.word	0x40006800

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	2004      	movs	r0, #4
 8000ae2:	f7ff fbb3 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fbb0 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff fbad 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2008      	movs	r0, #8
 8000af4:	f7ff fbaa 	bl	800024c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2102      	movs	r1, #2
 8000afc:	483f      	ldr	r0, [pc, #252]	; (8000bfc <MX_GPIO_Init+0x130>)
 8000afe:	f000 fe4b 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DeepseepWakeup_GPIO_Port, DeepseepWakeup_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2108      	movs	r1, #8
 8000b06:	483d      	ldr	r0, [pc, #244]	; (8000bfc <MX_GPIO_Init+0x130>)
 8000b08:	f000 fe46 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FirstRunControl_GPIO_Port, FirstRunControl_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2101      	movs	r1, #1
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fe40 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2133      	movs	r1, #51	; 0x33
 8000b1c:	4838      	ldr	r0, [pc, #224]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000b1e:	f000 fe3b 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TestStartInput_Pin */
  GPIO_InitStruct.Pin = TestStartInput_Pin;
 8000b22:	2301      	movs	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TestStartInput_GPIO_Port, &GPIO_InitStruct);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4831      	ldr	r0, [pc, #196]	; (8000bfc <MX_GPIO_Init+0x130>)
 8000b36:	f000 fcbf 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupter_Pin */
  GPIO_InitStruct.Pin = Interrupter_Pin;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b42:	2302      	movs	r3, #2
 8000b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Interrupter_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482b      	ldr	r0, [pc, #172]	; (8000bfc <MX_GPIO_Init+0x130>)
 8000b50:	f000 fcb2 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TestStopInput_Pin */
  GPIO_InitStruct.Pin = TestStopInput_Pin;
 8000b54:	2304      	movs	r3, #4
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TestStopInput_GPIO_Port, &GPIO_InitStruct);
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4825      	ldr	r0, [pc, #148]	; (8000bfc <MX_GPIO_Init+0x130>)
 8000b68:	f000 fca6 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DeepseepWakeup_Pin */
  GPIO_InitStruct.Pin = DeepseepWakeup_Pin;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DeepseepWakeup_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481e      	ldr	r0, [pc, #120]	; (8000bfc <MX_GPIO_Init+0x130>)
 8000b82:	f000 fc99 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FirstRunControl_Pin */
  GPIO_InitStruct.Pin = FirstRunControl_Pin;
 8000b86:	2301      	movs	r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FirstRunControl_GPIO_Port, &GPIO_InitStruct);
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f000 fc8b 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TransmitReady_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TransmitReady_Pin|LD1_Pin;
 8000ba2:	2333      	movs	r3, #51	; 0x33
 8000ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4812      	ldr	r0, [pc, #72]	; (8000c00 <MX_GPIO_Init+0x134>)
 8000bb8:	f000 fc7e 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_GPIO_Init+0x138>)
 8000bce:	f000 fc73 	bl	80014b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2006      	movs	r0, #6
 8000bd8:	f000 fc39 	bl	800144e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bdc:	2006      	movs	r0, #6
 8000bde:	f000 fc50 	bl	8001482 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2008      	movs	r0, #8
 8000be8:	f000 fc31 	bl	800144e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000bec:	2008      	movs	r0, #8
 8000bee:	f000 fc48 	bl	8001482 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000c00 	.word	0x48000c00

08000c08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == TestStartInput_Pin){
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d112      	bne.n	8000c3e <HAL_GPIO_EXTI_Callback+0x36>
		timeBuff.startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c20:	6013      	str	r3, [r2, #0]

		if(captures < max_amount_of_runs*2){
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	da05      	bge.n	8000c3e <HAL_GPIO_EXTI_Callback+0x36>
			captures++;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000c3c:	801a      	strh	r2, [r3, #0]
		}

	}

	if(GPIO_Pin == TestStopInput_Pin){
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d119      	bne.n	8000c78 <HAL_GPIO_EXTI_Callback+0x70>
		timeBuff.endTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c4c:	6053      	str	r3, [r2, #4]
		if(timeBuff.endTime != 0){
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0x54>
		timeBuffReady = true;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
		}
		if(captures < max_amount_of_runs * 2){
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	da05      	bge.n	8000c78 <HAL_GPIO_EXTI_Callback+0x70>
			captures++;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000c76:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000100 	.word	0x20000100
 8000c88:	20000444 	.word	0x20000444
 8000c8c:	20000440 	.word	0x20000440
 8000c90:	2000045a 	.word	0x2000045a
 8000c94:	20000454 	.word	0x20000454

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>

08000ca2 <LL_AHB2_GRP1_EnableClock>:
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4013      	ands	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_SPI_MspInit+0x5c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d117      	bne.n	8000d9a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d6e:	f7ff ffca 	bl	8000d06 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff95 	bl	8000ca2 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d78:	23f0      	movs	r3, #240	; 0xf0
 8000d7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d88:	2305      	movs	r3, #5
 8000d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f000 fb8f 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013000 	.word	0x40013000

08000da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d102      	bne.n	8000dc0 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ff8a 	bl	8000cd4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09c      	sub	sp, #112	; 0x70
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2250      	movs	r2, #80	; 0x50
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 fde5 	bl	80049b8 <memset>
  if(hpcd->Instance==USB)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_PCD_MspInit+0xa8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d136      	bne.n	8000e66 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000dfe:	2318      	movs	r3, #24
 8000e00:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e06:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000e0e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e12:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e18:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e1e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 f8fb 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000e30:	f7ff ff32 	bl	8000c98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff ff34 	bl	8000ca2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f000 fb2d 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e5e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e62:	f7ff ff37 	bl	8000cd4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3770      	adds	r7, #112	; 0x70
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40006800 	.word	0x40006800

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f99a 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TestStartInput_Pin);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 fc7b 	bl	80017c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TestStopInput_Pin);
 8000eda:	2004      	movs	r0, #4
 8000edc:	f000 fc74 	bl	80017c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e00a      	b.n	8000f0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef6:	f3af 8000 	nop.w
 8000efa:	4601      	mov	r1, r0
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	60ba      	str	r2, [r7, #8]
 8000f02:	b2ca      	uxtb	r2, r1
 8000f04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbf0      	blt.n	8000ef6 <_read+0x12>
  }

  return len;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e009      	b.n	8000f44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	60ba      	str	r2, [r7, #8]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf1      	blt.n	8000f30 <_write+0x12>
  }
  return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_close>:

int _close(int file)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_isatty>:

int _isatty(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f003 fcb8 	bl	8004964 <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20030000 	.word	0x20030000
 8001020:	00000400 	.word	0x00000400
 8001024:	20000460 	.word	0x20000460
 8001028:	20000478 	.word	0x20000478

0800102c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <SystemInit+0x98>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <SystemInit+0x98>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001054:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001058:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800105a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <SystemInit+0x9c>)
 8001066:	4013      	ands	r3, r2
 8001068:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800106a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001076:	f023 0305 	bic.w	r3, r3, #5
 800107a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800107e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001096:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <SystemInit+0xa0>)
 8001098:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800109a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <SystemInit+0xa0>)
 80010a0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00
 80010c8:	faf6fefb 	.word	0xfaf6fefb
 80010cc:	22041000 	.word	0x22041000

080010d0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80010d0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d4:	3304      	adds	r3, #4

080010d6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80010da:	d3f9      	bcc.n	80010d0 <CopyDataInit>
  bx lr
 80010dc:	4770      	bx	lr

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80010de:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80010e0:	3004      	adds	r0, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80010e2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>
  bx lr
 80010e6:	4770      	bx	lr

080010e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ec:	f7ff ff9e 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <LoopForever+0x6>)
 80010f2:	490c      	ldr	r1, [pc, #48]	; (8001124 <LoopForever+0xa>)
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <LoopForever+0xe>)
 80010f6:	2300      	movs	r3, #0
 80010f8:	f7ff ffed 	bl	80010d6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <LoopForever+0x12>)
 80010fe:	490c      	ldr	r1, [pc, #48]	; (8001130 <LoopForever+0x16>)
 8001100:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <LoopForever+0x1a>)
 8001102:	2300      	movs	r3, #0
 8001104:	f7ff ffe7 	bl	80010d6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <LoopForever+0x1e>)
 800110a:	490c      	ldr	r1, [pc, #48]	; (800113c <LoopForever+0x22>)
 800110c:	2300      	movs	r3, #0
 800110e:	f7ff ffe8 	bl	80010e2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001112:	f003 fc2d 	bl	8004970 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001116:	f7ff faad 	bl	8000674 <main>

0800111a <LoopForever>:

LoopForever:
  b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   r0, =_estack
 800111c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001120:	20000008 	.word	0x20000008
 8001124:	20000080 	.word	0x20000080
 8001128:	08005ad0 	.word	0x08005ad0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800112c:	20030000 	.word	0x20030000
 8001130:	20030000 	.word	0x20030000
 8001134:	08005b48 	.word	0x08005b48
  INIT_BSS _sbss, _ebss
 8001138:	20000080 	.word	0x20000080
 800113c:	20000478 	.word	0x20000478

08001140 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_Init+0x3c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_Init+0x3c>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115a:	2003      	movs	r0, #3
 800115c:	f000 f96c 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001160:	2000      	movs	r0, #0
 8001162:	f000 f80f 	bl	8001184 <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	e001      	b.n	8001176 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001172:	f7ff fde1 	bl	8000d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001176:	79fb      	ldrb	r3, [r7, #7]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	58004000 	.word	0x58004000

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_InitTick+0x6c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d024      	beq.n	80011e2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001198:	f001 fcce 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 800119c:	4602      	mov	r2, r0
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_InitTick+0x6c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f974 	bl	800149e <HAL_SYSTICK_Config>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10f      	bne.n	80011dc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	d809      	bhi.n	80011d6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c2:	2200      	movs	r2, #0
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ca:	f000 f940 	bl	800144e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_InitTick+0x70>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e007      	b.n	80011e6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e004      	b.n	80011e6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e001      	b.n	80011e6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000018 	.word	0x20000018
 80011f4:	20000014 	.word	0x20000014

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000018 	.word	0x20000018
 800121c:	20000464 	.word	0x20000464

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000464 	.word	0x20000464

08001238 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTickPrio+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000014 	.word	0x20000014

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffe2 	bl	8001220 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffd2 	bl	8001220 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000018 	.word	0x20000018

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff40 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff90 	bl	800138c <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5f 	bl	8001338 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff33 	bl	80012fc <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa4 	bl	80013f4 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e14c      	b.n	8001762 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 813e 	beq.w	800175c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d005      	beq.n	80014f8 <HAL_GPIO_Init+0x40>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d130      	bne.n	800155a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152e:	2201      	movs	r2, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 0201 	and.w	r2, r3, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b03      	cmp	r3, #3
 8001564:	d017      	beq.n	8001596 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d123      	bne.n	80015ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	6939      	ldr	r1, [r7, #16]
 80015e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0203 	and.w	r2, r3, #3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8098 	beq.w	800175c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800162c:	4a54      	ldr	r2, [pc, #336]	; (8001780 <HAL_GPIO_Init+0x2c8>)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	220f      	movs	r2, #15
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001656:	d019      	beq.n	800168c <HAL_GPIO_Init+0x1d4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4a      	ldr	r2, [pc, #296]	; (8001784 <HAL_GPIO_Init+0x2cc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_GPIO_Init+0x1d0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a49      	ldr	r2, [pc, #292]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00d      	beq.n	8001684 <HAL_GPIO_Init+0x1cc>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2d4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0x1c8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a47      	ldr	r2, [pc, #284]	; (8001790 <HAL_GPIO_Init+0x2d8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <HAL_GPIO_Init+0x1c4>
 8001678:	2304      	movs	r3, #4
 800167a:	e008      	b.n	800168e <HAL_GPIO_Init+0x1d6>
 800167c:	2307      	movs	r3, #7
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x1d6>
 8001680:	2303      	movs	r3, #3
 8001682:	e004      	b.n	800168e <HAL_GPIO_Init+0x1d6>
 8001684:	2302      	movs	r3, #2
 8001686:	e002      	b.n	800168e <HAL_GPIO_Init+0x1d6>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_GPIO_Init+0x1d6>
 800168c:	2300      	movs	r3, #0
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	f002 0203 	and.w	r2, r2, #3
 8001694:	0092      	lsls	r2, r2, #2
 8001696:	4093      	lsls	r3, r2
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800169e:	4938      	ldr	r1, [pc, #224]	; (8001780 <HAL_GPIO_Init+0x2c8>)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ac:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016d0:	4a30      	ldr	r2, [pc, #192]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001726:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 8001730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001754:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	fa22 f303 	lsr.w	r3, r2, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	f47f aeab 	bne.w	80014c8 <HAL_GPIO_Init+0x10>
  }
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40010000 	.word	0x40010000
 8001784:	48000400 	.word	0x48000400
 8001788:	48000800 	.word	0x48000800
 800178c:	48000c00 	.word	0x48000c00
 8001790:	48001000 	.word	0x48001000
 8001794:	58000800 	.word	0x58000800

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fa0e 	bl	8000c08 <HAL_GPIO_EXTI_Callback>
  }
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	58000800 	.word	0x58000800

080017f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b08b      	sub	sp, #44	; 0x2c
 80017fc:	af06      	add	r7, sp, #24
 80017fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0cb      	b.n	80019a2 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fad2 	bl	8000dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 f85b 	bl	80048ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	e040      	b.n	80018be <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	3301      	adds	r3, #1
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	3303      	adds	r3, #3
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3338      	adds	r3, #56	; 0x38
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	333c      	adds	r3, #60	; 0x3c
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3340      	adds	r3, #64	; 0x40
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	3301      	adds	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3b9      	bcc.n	800183c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e044      	b.n	8001958 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	3301      	adds	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3b5      	bcc.n	80018ce <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	687e      	ldr	r6, [r7, #4]
 800196a:	466d      	mov	r5, sp
 800196c:	f106 0410 	add.w	r4, r6, #16
 8001970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	602b      	str	r3, [r5, #0]
 8001978:	1d33      	adds	r3, r6, #4
 800197a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f002 ffd0 	bl	8004922 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d102      	bne.n	80019a0 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f805 	bl	80019aa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	58000400 	.word	0x58000400

08001a20 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	58000400 	.word	0x58000400

08001a3c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a4e:	d101      	bne.n	8001a54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_HSE_Enable>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_RCC_HSE_Disable>:
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_RCC_HSE_IsReady>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aae:	d101      	bne.n	8001ab4 <LL_RCC_HSE_IsReady+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_RCC_HSE_IsReady+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_RCC_HSI_Enable>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_RCC_HSI_Disable>:
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af0:	6013      	str	r3, [r2, #0]
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_RCC_HSI_IsReady>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0e:	d101      	bne.n	8001b14 <LL_RCC_HSI_IsReady+0x18>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <LL_RCC_HSI_IsReady+0x1a>
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_HSI48_Enable>:
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_RCC_HSI48_Disable>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_HSI48_IsReady>:
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d101      	bne.n	8001ba6 <LL_RCC_HSI48_IsReady+0x18>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_RCC_HSI48_IsReady+0x1a>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_RCC_LSE_Enable>:
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_LSE_Disable>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_RCC_LSE_EnableBypass>:
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_LSE_DisableBypass>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d101      	bne.n	8001c52 <LL_RCC_LSE_IsReady+0x18>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_RCC_LSE_IsReady+0x1a>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d101      	bne.n	8001cba <LL_RCC_LSI1_IsReady+0x18>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <LL_RCC_LSI1_IsReady+0x1a>
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf8:	f023 0304 	bic.w	r3, r3, #4
 8001cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d101      	bne.n	8001d22 <LL_RCC_LSI2_IsReady+0x18>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <LL_RCC_LSI2_IsReady+0x1a>
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6013      	str	r3, [r2, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d101      	bne.n	8001dae <LL_RCC_MSI_IsReady+0x16>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <LL_RCC_MSI_IsReady+0x18>
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2bb0      	cmp	r3, #176	; 0xb0
 8001df8:	d901      	bls.n	8001dfe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001dfa:	23b0      	movs	r3, #176	; 0xb0
 8001dfc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 0203 	bic.w	r2, r3, #3
 8001e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030c 	and.w	r3, r3, #12
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eda:	f023 020f 	bic.w	r2, r3, #15
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fac:	6013      	str	r3, [r2, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fca:	d101      	bne.n	8001fd0 <LL_RCC_PLL_IsReady+0x18>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <LL_RCC_PLL_IsReady+0x1a>
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0303 	and.w	r3, r3, #3
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d101      	bne.n	8002056 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002076:	d101      	bne.n	800207c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d101      	bne.n	80020a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020c0:	d101      	bne.n	80020c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020e4:	d101      	bne.n	80020ea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b08d      	sub	sp, #52	; 0x34
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e363      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 808d 	beq.w	8002232 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002118:	f7ff fea1 	bl	8001e5e <LL_RCC_GetSysClkSource>
 800211c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800211e:	f7ff ff82 	bl	8002026 <LL_RCC_PLL_GetMainSource>
 8002122:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x3e>
 800212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212c:	2b0c      	cmp	r3, #12
 800212e:	d147      	bne.n	80021c0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	2b01      	cmp	r3, #1
 8002134:	d144      	bne.n	80021c0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e347      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002146:	f7ff fe4c 	bl	8001de2 <LL_RCC_MSI_GetRange>
 800214a:	4603      	mov	r3, r0
 800214c:	429c      	cmp	r4, r3
 800214e:	d914      	bls.n	800217a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fd03 	bl	8002b60 <RCC_SetFlashLatencyFromMSIRange>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e336      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fe26 	bl	8001dba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fe4a 	bl	8001e0c <LL_RCC_MSI_SetCalibTrimming>
 8002178:	e013      	b.n	80021a2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fe1b 	bl	8001dba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fe3f 	bl	8001e0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fce4 	bl	8002b60 <RCC_SetFlashLatencyFromMSIRange>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e317      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021a2:	f000 fcc9 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4aa4      	ldr	r2, [pc, #656]	; (800243c <HAL_RCC_OscConfig+0x344>)
 80021aa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021ac:	4ba4      	ldr	r3, [pc, #656]	; (8002440 <HAL_RCC_OscConfig+0x348>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe ffe7 	bl	8001184 <HAL_InitTick>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d039      	beq.n	8002230 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e308      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01e      	beq.n	8002206 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021c8:	f7ff fdc8 	bl	8001d5c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021cc:	f7ff f828 	bl	8001220 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d4:	f7ff f824 	bl	8001220 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e2f5      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80021e6:	f7ff fdd7 	bl	8001d98 <LL_RCC_MSI_IsReady>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f1      	beq.n	80021d4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fde0 	bl	8001dba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fe04 	bl	8001e0c <LL_RCC_MSI_SetCalibTrimming>
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002206:	f7ff fdb8 	bl	8001d7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800220a:	f7ff f809 	bl	8001220 <HAL_GetTick>
 800220e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002212:	f7ff f805 	bl	8001220 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e2d6      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002224:	f7ff fdb8 	bl	8001d98 <LL_RCC_MSI_IsReady>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f1      	bne.n	8002212 <HAL_RCC_OscConfig+0x11a>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002230:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d047      	beq.n	80022ce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223e:	f7ff fe0e 	bl	8001e5e <LL_RCC_GetSysClkSource>
 8002242:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002244:	f7ff feef 	bl	8002026 <LL_RCC_PLL_GetMainSource>
 8002248:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x164>
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d134      	bne.n	80022ce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e2b4      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	d102      	bne.n	8002278 <HAL_RCC_OscConfig+0x180>
 8002272:	f7ff fbf5 	bl	8001a60 <LL_RCC_HSE_Enable>
 8002276:	e001      	b.n	800227c <HAL_RCC_OscConfig+0x184>
 8002278:	f7ff fc01 	bl	8001a7e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d012      	beq.n	80022aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe ffcc 	bl	8001220 <HAL_GetTick>
 8002288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7fe ffc8 	bl	8001220 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e299      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800229e:	f7ff fbfd 	bl	8001a9c <LL_RCC_HSE_IsReady>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f1      	beq.n	800228c <HAL_RCC_OscConfig+0x194>
 80022a8:	e011      	b.n	80022ce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7fe ffb9 	bl	8001220 <HAL_GetTick>
 80022ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b2:	f7fe ffb5 	bl	8001220 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e286      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80022c4:	f7ff fbea 	bl	8001a9c <LL_RCC_HSE_IsReady>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f1      	bne.n	80022b2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d04c      	beq.n	8002374 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022da:	f7ff fdc0 	bl	8001e5e <LL_RCC_GetSysClkSource>
 80022de:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e0:	f7ff fea1 	bl	8002026 <LL_RCC_PLL_GetMainSource>
 80022e4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_OscConfig+0x200>
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d10e      	bne.n	8002310 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d10b      	bne.n	8002310 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e266      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fc09 	bl	8001b20 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800230e:	e031      	b.n	8002374 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d019      	beq.n	800234c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	f7ff fbd2 	bl	8001ac0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe ff80 	bl	8001220 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7fe ff7c 	bl	8001220 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e24d      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002336:	f7ff fbe1 	bl	8001afc <LL_RCC_HSI_IsReady>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f1      	beq.n	8002324 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fbeb 	bl	8001b20 <LL_RCC_HSI_SetCalibTrimming>
 800234a:	e013      	b.n	8002374 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234c:	f7ff fbc7 	bl	8001ade <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe ff66 	bl	8001220 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002358:	f7fe ff62 	bl	8001220 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e233      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800236a:	f7ff fbc7 	bl	8001afc <LL_RCC_HSI_IsReady>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f1      	bne.n	8002358 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a3 	beq.w	80024d4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d076      	beq.n	8002484 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d046      	beq.n	8002430 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80023a2:	f7ff fc7e 	bl	8001ca2 <LL_RCC_LSI1_IsReady>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d113      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80023ac:	f7ff fc57 	bl	8001c5e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023b0:	f7fe ff36 	bl	8001220 <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023b8:	f7fe ff32 	bl	8001220 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e203      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80023ca:	f7ff fc6a 	bl	8001ca2 <LL_RCC_LSI1_IsReady>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f1      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80023d4:	f7ff fc77 	bl	8001cc6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe ff22 	bl	8001220 <HAL_GetTick>
 80023dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023e0:	f7fe ff1e 	bl	8001220 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1ef      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80023f2:	f7ff fc8a 	bl	8001d0a <LL_RCC_LSI2_IsReady>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f1      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fc94 	bl	8001d2e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002406:	f7ff fc3b 	bl	8001c80 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7fe ff09 	bl	8001220 <HAL_GetTick>
 800240e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002412:	f7fe ff05 	bl	8001220 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1d6      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002424:	f7ff fc3d 	bl	8001ca2 <LL_RCC_LSI1_IsReady>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f1      	bne.n	8002412 <HAL_RCC_OscConfig+0x31a>
 800242e:	e051      	b.n	80024d4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002430:	f7ff fc15 	bl	8001c5e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fef4 	bl	8001220 <HAL_GetTick>
 8002438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800243a:	e00c      	b.n	8002456 <HAL_RCC_OscConfig+0x35e>
 800243c:	20000010 	.word	0x20000010
 8002440:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002444:	f7fe feec 	bl	8001220 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1bd      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002456:	f7ff fc24 	bl	8001ca2 <LL_RCC_LSI1_IsReady>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f1      	beq.n	8002444 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002460:	f7ff fc42 	bl	8001ce8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002466:	f7fe fedb 	bl	8001220 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b03      	cmp	r3, #3
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1ac      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002478:	f7ff fc47 	bl	8001d0a <LL_RCC_LSI2_IsReady>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f1      	bne.n	8002466 <HAL_RCC_OscConfig+0x36e>
 8002482:	e027      	b.n	80024d4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002484:	f7ff fc30 	bl	8001ce8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe feca 	bl	8001220 <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002490:	f7fe fec6 	bl	8001220 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b03      	cmp	r3, #3
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e197      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80024a2:	f7ff fc32 	bl	8001d0a <LL_RCC_LSI2_IsReady>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f1      	bne.n	8002490 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80024ac:	f7ff fbe8 	bl	8001c80 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7fe feb6 	bl	8001220 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80024b8:	f7fe feb2 	bl	8001220 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e183      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80024ca:	f7ff fbea 	bl	8001ca2 <LL_RCC_LSI1_IsReady>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f1      	bne.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05b      	beq.n	8002598 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e0:	4ba7      	ldr	r3, [pc, #668]	; (8002780 <HAL_RCC_OscConfig+0x688>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d114      	bne.n	8002516 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80024ec:	f7ff fa88 	bl	8001a00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f0:	f7fe fe96 	bl	8001220 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f8:	f7fe fe92 	bl	8001220 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e163      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250a:	4b9d      	ldr	r3, [pc, #628]	; (8002780 <HAL_RCC_OscConfig+0x688>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_RCC_OscConfig+0x42c>
 800251e:	f7ff fb48 	bl	8001bb2 <LL_RCC_LSE_Enable>
 8002522:	e00c      	b.n	800253e <HAL_RCC_OscConfig+0x446>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d104      	bne.n	8002536 <HAL_RCC_OscConfig+0x43e>
 800252c:	f7ff fb63 	bl	8001bf6 <LL_RCC_LSE_EnableBypass>
 8002530:	f7ff fb3f 	bl	8001bb2 <LL_RCC_LSE_Enable>
 8002534:	e003      	b.n	800253e <HAL_RCC_OscConfig+0x446>
 8002536:	f7ff fb4d 	bl	8001bd4 <LL_RCC_LSE_Disable>
 800253a:	f7ff fb6d 	bl	8001c18 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d014      	beq.n	8002570 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7fe fe6b 	bl	8001220 <HAL_GetTick>
 800254a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe fe67 	bl	8001220 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e136      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002564:	f7ff fb69 	bl	8001c3a <LL_RCC_LSE_IsReady>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0ef      	beq.n	800254e <HAL_RCC_OscConfig+0x456>
 800256e:	e013      	b.n	8002598 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fe56 	bl	8001220 <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7fe fe52 	bl	8001220 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e121      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800258e:	f7ff fb54 	bl	8001c3a <LL_RCC_LSE_IsReady>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ef      	bne.n	8002578 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02c      	beq.n	80025fe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d014      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025ac:	f7ff facd 	bl	8001b4a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe fe36 	bl	8001220 <HAL_GetTick>
 80025b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025b8:	f7fe fe32 	bl	8001220 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e103      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80025ca:	f7ff fae0 	bl	8001b8e <LL_RCC_HSI48_IsReady>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f1      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4c0>
 80025d4:	e013      	b.n	80025fe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025d6:	f7ff fac9 	bl	8001b6c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7fe fe21 	bl	8001220 <HAL_GetTick>
 80025de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025e2:	f7fe fe1d 	bl	8001220 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0ee      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80025f4:	f7ff facb 	bl	8001b8e <LL_RCC_HSI48_IsReady>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f1      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80e4 	beq.w	80027d0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002608:	f7ff fc29 	bl	8001e5e <LL_RCC_GetSysClkSource>
 800260c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800260e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	2b02      	cmp	r3, #2
 800261c:	f040 80b4 	bne.w	8002788 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0203 	and.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	429a      	cmp	r2, r3
 800262c:	d123      	bne.n	8002676 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d11c      	bne.n	8002676 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d114      	bne.n	8002676 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d10d      	bne.n	8002676 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d05d      	beq.n	8002732 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d058      	beq.n	800272e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800267c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0a1      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800268e:	f7ff fc84 	bl	8001f9a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002692:	f7fe fdc5 	bl	8001220 <HAL_GetTick>
 8002696:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269a:	f7fe fdc1 	bl	8001220 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e092      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ef      	bne.n	800269a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	4b30      	ldr	r3, [pc, #192]	; (8002784 <HAL_RCC_OscConfig+0x68c>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026cc:	4311      	orrs	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d2:	0212      	lsls	r2, r2, #8
 80026d4:	4311      	orrs	r1, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026e0:	4311      	orrs	r1, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026e6:	430a      	orrs	r2, r1
 80026e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026f0:	f7ff fc44 	bl	8001f7c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002704:	f7fe fd8c 	bl	8001220 <HAL_GetTick>
 8002708:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe fd88 	bl	8001220 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e059      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800272c:	e050      	b.n	80027d0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e04f      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d147      	bne.n	80027d0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002740:	f7ff fc1c 	bl	8001f7c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002754:	f7fe fd64 	bl	8001220 <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fd60 	bl	8001220 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e031      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <HAL_RCC_OscConfig+0x664>
 800277c:	e028      	b.n	80027d0 <HAL_RCC_OscConfig+0x6d8>
 800277e:	bf00      	nop
 8002780:	58000400 	.word	0x58000400
 8002784:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b0c      	cmp	r3, #12
 800278c:	d01e      	beq.n	80027cc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	f7ff fc04 	bl	8001f9a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fd45 	bl	8001220 <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fd41 	bl	8001220 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e012      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ef      	bne.n	800279a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_OscConfig+0x6e4>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	60cb      	str	r3, [r1, #12]
 80027ca:	e001      	b.n	80027d0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3734      	adds	r7, #52	; 0x34
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd90      	pop	{r4, r7, pc}
 80027da:	bf00      	nop
 80027dc:	eefefffc 	.word	0xeefefffc

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e12d      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b98      	ldr	r3, [pc, #608]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d91b      	bls.n	800283a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b95      	ldr	r3, [pc, #596]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0207 	bic.w	r2, r3, #7
 800280a:	4993      	ldr	r1, [pc, #588]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002812:	f7fe fd05 	bl	8001220 <HAL_GetTick>
 8002816:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002818:	e008      	b.n	800282c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800281a:	f7fe fd01 	bl	8001220 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e111      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282c:	4b8a      	ldr	r3, [pc, #552]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d1ef      	bne.n	800281a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d016      	beq.n	8002874 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fb13 	bl	8001e76 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002850:	f7fe fce6 	bl	8001220 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002858:	f7fe fce2 	bl	8001220 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0f2      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800286a:	f7ff fbe8 	bl	800203e <LL_RCC_IsActiveFlag_HPRE>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f1      	beq.n	8002858 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d016      	beq.n	80028ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fb0a 	bl	8001e9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800288a:	f7fe fcc9 	bl	8001220 <HAL_GetTick>
 800288e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002892:	f7fe fcc5 	bl	8001220 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e0d5      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80028a4:	f7ff fbdd 	bl	8002062 <LL_RCC_IsActiveFlag_C2HPRE>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f1      	beq.n	8002892 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fb03 	bl	8001eca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fcac 	bl	8001220 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028cc:	f7fe fca8 	bl	8001220 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0b8      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028de:	f7ff fbd3 	bl	8002088 <LL_RCC_IsActiveFlag_SHDHPRE>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f1      	beq.n	80028cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d016      	beq.n	8002922 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fafd 	bl	8001ef8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028fe:	f7fe fc8f 	bl	8001220 <HAL_GetTick>
 8002902:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002906:	f7fe fc8b 	bl	8001220 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e09b      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002918:	f7ff fbc9 	bl	80020ae <LL_RCC_IsActiveFlag_PPRE1>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f1      	beq.n	8002906 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d017      	beq.n	800295e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff faf3 	bl	8001f20 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800293a:	f7fe fc71 	bl	8001220 <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002942:	f7fe fc6d 	bl	8001220 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e07d      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002954:	f7ff fbbd 	bl	80020d2 <LL_RCC_IsActiveFlag_PPRE2>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f1      	beq.n	8002942 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d043      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d106      	bne.n	8002980 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002972:	f7ff f893 	bl	8001a9c <LL_RCC_HSE_IsReady>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11e      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e067      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d106      	bne.n	8002996 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002988:	f7ff fb16 	bl	8001fb8 <LL_RCC_PLL_IsReady>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d113      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e05c      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800299e:	f7ff f9fb 	bl	8001d98 <LL_RCC_MSI_IsReady>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d108      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e051      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80029ac:	f7ff f8a6 	bl	8001afc <LL_RCC_HSI_IsReady>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e04a      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fa39 	bl	8001e36 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c4:	f7fe fc2c 	bl	8001220 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe fc28 	bl	8001220 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e036      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	f7ff fa3c 	bl	8001e5e <LL_RCC_GetSysClkSource>
 80029e6:	4602      	mov	r2, r0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d1ec      	bne.n	80029cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d21b      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 0207 	bic.w	r2, r3, #7
 8002a08:	4913      	ldr	r1, [pc, #76]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a10:	f7fe fc06 	bl	8001220 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a18:	f7fe fc02 	bl	8001220 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e012      	b.n	8002a50 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_ClockConfig+0x278>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d1ef      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a38:	f000 f87e 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <HAL_RCC_ClockConfig+0x27c>)
 8002a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002a42:	f7fe fbf9 	bl	8001238 <HAL_GetTickPrio>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe fb9b 	bl	8001184 <HAL_InitTick>
 8002a4e:	4603      	mov	r3, r0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	58004000 	.word	0x58004000
 8002a5c:	20000010 	.word	0x20000010

08002a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a66:	f7ff f9fa 	bl	8001e5e <LL_RCC_GetSysClkSource>
 8002a6a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a72:	f7ff f9b6 	bl	8001de2 <LL_RCC_MSI_GetRange>
 8002a76:	4603      	mov	r3, r0
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	4a2b      	ldr	r2, [pc, #172]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e04b      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d102      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a8e:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e045      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d10a      	bne.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a9a:	f7fe ffcf 	bl	8001a3c <LL_RCC_HSE_IsEnabledDiv2>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002aa4:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e03a      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e037      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002ab0:	f7ff fab9 	bl	8002026 <LL_RCC_PLL_GetMainSource>
 8002ab4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d003      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x64>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x6a>
 8002ac2:	e00d      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ac6:	60bb      	str	r3, [r7, #8]
        break;
 8002ac8:	e015      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002aca:	f7fe ffb7 	bl	8001a3c <LL_RCC_HSE_IsEnabledDiv2>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ad6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002ad8:	e00d      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002adc:	60bb      	str	r3, [r7, #8]
        break;
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ae0:	f7ff f97f 	bl	8001de2 <LL_RCC_MSI_GetRange>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	60bb      	str	r3, [r7, #8]
        break;
 8002af4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002af6:	f7ff fa71 	bl	8001fdc <LL_RCC_PLL_GetN>
 8002afa:	4602      	mov	r2, r0
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	fb03 f402 	mul.w	r4, r3, r2
 8002b02:	f7ff fa84 	bl	800200e <LL_RCC_PLL_GetDivider>
 8002b06:	4603      	mov	r3, r0
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002b10:	f7ff fa71 	bl	8001ff6 <LL_RCC_PLL_GetR>
 8002b14:	4603      	mov	r3, r0
 8002b16:	0f5b      	lsrs	r3, r3, #29
 8002b18:	3301      	adds	r3, #1
 8002b1a:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b1e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002b20:	68fb      	ldr	r3, [r7, #12]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	080059f0 	.word	0x080059f0
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	01e84800 	.word	0x01e84800

08002b38 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b598      	push	{r3, r4, r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b3c:	f7ff ff90 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002b40:	4604      	mov	r4, r0
 8002b42:	f7ff fa01 	bl	8001f48 <LL_RCC_GetAHBPrescaler>
 8002b46:	4603      	mov	r3, r0
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	4a03      	ldr	r2, [pc, #12]	; (8002b5c <HAL_RCC_GetHCLKFreq+0x24>)
 8002b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b54:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd98      	pop	{r3, r4, r7, pc}
 8002b5c:	080059b0 	.word	0x080059b0

08002b60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2bb0      	cmp	r3, #176	; 0xb0
 8002b6c:	d903      	bls.n	8002b76 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e007      	b.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002b86:	f7ff f9eb 	bl	8001f60 <LL_RCC_GetAHB4Prescaler>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9c      	lsrs	r4, r3, #18
 8002baa:	f7fe ff39 	bl	8001a20 <HAL_PWREx_GetVoltageRange>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f000 f80c 	bl	8002bd0 <RCC_SetFlashLatency>
 8002bb8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	080059f0 	.word	0x080059f0
 8002bc8:	080059b0 	.word	0x080059b0
 8002bcc:	431bde83 	.word	0x431bde83

08002bd0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b093      	sub	sp, #76	; 0x4c
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <RCC_SetFlashLatency+0xe8>)
 8002bdc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002be6:	4a35      	ldr	r2, [pc, #212]	; (8002cbc <RCC_SetFlashLatency+0xec>)
 8002be8:	f107 031c 	add.w	r3, r7, #28
 8002bec:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002bf2:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <RCC_SetFlashLatency+0xf0>)
 8002bf4:	f107 040c 	add.w	r4, r7, #12
 8002bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002bfe:	2300      	movs	r3, #0
 8002c00:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c08:	d11a      	bne.n	8002c40 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c0e:	e013      	b.n	8002c38 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	3348      	adds	r3, #72	; 0x48
 8002c16:	443b      	add	r3, r7
 8002c18:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d807      	bhi.n	8002c32 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	3348      	adds	r3, #72	; 0x48
 8002c28:	443b      	add	r3, r7
 8002c2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c2e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c30:	e020      	b.n	8002c74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c34:	3301      	adds	r3, #1
 8002c36:	643b      	str	r3, [r7, #64]	; 0x40
 8002c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d9e8      	bls.n	8002c10 <RCC_SetFlashLatency+0x40>
 8002c3e:	e019      	b.n	8002c74 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c44:	e013      	b.n	8002c6e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	3348      	adds	r3, #72	; 0x48
 8002c4c:	443b      	add	r3, r7
 8002c4e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d807      	bhi.n	8002c68 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	3348      	adds	r3, #72	; 0x48
 8002c5e:	443b      	add	r3, r7
 8002c60:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c66:	e005      	b.n	8002c74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d9e8      	bls.n	8002c46 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <RCC_SetFlashLatency+0xf4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 0207 	bic.w	r2, r3, #7
 8002c7c:	4911      	ldr	r1, [pc, #68]	; (8002cc4 <RCC_SetFlashLatency+0xf4>)
 8002c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c84:	f7fe facc 	bl	8001220 <HAL_GetTick>
 8002c88:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c8a:	e008      	b.n	8002c9e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c8c:	f7fe fac8 	bl	8001220 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e007      	b.n	8002cae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <RCC_SetFlashLatency+0xf4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d1ef      	bne.n	8002c8c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	374c      	adds	r7, #76	; 0x4c
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd90      	pop	{r4, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	08005984 	.word	0x08005984
 8002cbc:	08005994 	.word	0x08005994
 8002cc0:	080059a0 	.word	0x080059a0
 8002cc4:	58004000 	.word	0x58004000

08002cc8 <LL_RCC_LSE_IsEnabled>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <LL_RCC_LSE_IsEnabled+0x18>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <LL_RCC_LSE_IsEnabled+0x1a>
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_RCC_LSE_IsReady>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d101      	bne.n	8002d04 <LL_RCC_LSE_IsReady+0x18>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <LL_RCC_LSE_IsReady+0x1a>
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_RCC_MSI_EnablePLLMode>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	6013      	str	r3, [r2, #0]
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_SetRFWKPClockSource>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_SetSMPSClockSource>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	f023 0203 	bic.w	r2, r3, #3
 8002d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_RCC_SetSMPSPrescaler>:
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_RCC_SetUSARTClockSource>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 0203 	bic.w	r2, r3, #3
 8002dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_SetLPUARTClockSource>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_SetI2CClockSource>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_RCC_SetLPTIMClockSource>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0c1b      	lsrs	r3, r3, #16
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	43db      	mvns	r3, r3
 8002e54:	401a      	ands	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <LL_RCC_SetSAIClockSource>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_SetRNGClockSource>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_SetCLK48ClockSource>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002edc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_SetUSBClockSource>:
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ffe3 	bl	8002ec8 <LL_RCC_SetCLK48ClockSource>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <LL_RCC_SetADCClockSource>:
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_RCC_SetRTCClockSource>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <LL_RCC_GetRTCClockSource>:
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_RCC_ForceBackupDomainReset>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_RCC_PLLSAI1_Enable>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fd2:	6013      	str	r3, [r2, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_PLLSAI1_Disable>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_RCC_PLLSAI1_IsReady>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800300a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800300e:	d101      	bne.n	8003014 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003028:	2300      	movs	r3, #0
 800302a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800302c:	2300      	movs	r3, #0
 800302e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d034      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003044:	d021      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003046:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800304a:	d81b      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800304c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003050:	d01d      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003056:	d815      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800305c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003060:	d110      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003072:	e00d      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3304      	adds	r3, #4
 8003078:	4618      	mov	r0, r3
 800307a:	f000 f94d 	bl	8003318 <RCCEx_PLLSAI1_ConfigNP>
 800307e:	4603      	mov	r3, r0
 8003080:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003082:	e005      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	77fb      	strb	r3, [r7, #31]
        break;
 8003088:	e002      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800308a:	bf00      	nop
 800308c:	e000      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800308e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003090:	7ffb      	ldrb	r3, [r7, #31]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fee8 	bl	8002e70 <LL_RCC_SetSAIClockSource>
 80030a0:	e001      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d046      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80030b2:	f7ff ff56 	bl	8002f62 <LL_RCC_GetRTCClockSource>
 80030b6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d03c      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030c2:	f7fe fc9d 	bl	8001a00 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff30 	bl	8002f36 <LL_RCC_SetRTCClockSource>
 80030d6:	e02e      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80030e2:	f7ff ff4b 	bl	8002f7c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80030e6:	f7ff ff5a 	bl	8002f9e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80030f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003102:	f7ff fde1 	bl	8002cc8 <LL_RCC_LSE_IsEnabled>
 8003106:	4603      	mov	r3, r0
 8003108:	2b01      	cmp	r3, #1
 800310a:	d114      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800310c:	f7fe f888 	bl	8001220 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003112:	e00b      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003114:	f7fe f884 	bl	8001220 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d902      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	77fb      	strb	r3, [r7, #31]
              break;
 800312a:	e004      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800312c:	f7ff fdde 	bl	8002cec <LL_RCC_LSE_IsReady>
 8003130:	4603      	mov	r3, r0
 8003132:	2b01      	cmp	r3, #1
 8003134:	d1ee      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	77bb      	strb	r3, [r7, #30]
 800313a:	e001      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	7ffb      	ldrb	r3, [r7, #31]
 800313e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fe2a 	bl	8002daa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fe35 	bl	8002dd6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fe5d 	bl	8002e3c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d004      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe52 	bl	8002e3c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fe2a 	bl	8002e02 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fe1f 	bl	8002e02 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d022      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fe8d 	bl	8002ef4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e2:	d107      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031fc:	d10b      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f8e3 	bl	80033ce <RCCEx_PLLSAI1_ConfigNQ>
 8003208:	4603      	mov	r3, r0
 800320a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800320c:	7ffb      	ldrb	r3, [r7, #31]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003212:	7ffb      	ldrb	r3, [r7, #31]
 8003214:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02b      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003234:	d003      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fe2a 	bl	8002e9c <LL_RCC_SetRNGClockSource>
 8003248:	e00a      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	2000      	movs	r0, #0
 8003256:	f7ff fe21 	bl	8002e9c <LL_RCC_SetRNGClockSource>
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff fe34 	bl	8002ec8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003268:	d107      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003278:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d022      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fe3d 	bl	8002f0a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003298:	d107      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032b2:	d10b      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f8e3 	bl	8003484 <RCCEx_PLLSAI1_ConfigNR>
 80032be:	4603      	mov	r3, r0
 80032c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80032c8:	7ffb      	ldrb	r3, [r7, #31]
 80032ca:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fd26 	bl	8002d2e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fd45 	bl	8002d82 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fd2c 	bl	8002d5a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003302:	7fbb      	ldrb	r3, [r7, #30]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003310:	f7ff fcfe 	bl	8002d10 <LL_RCC_MSI_EnablePLLMode>
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}

08003318 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003324:	f7ff fe5b 	bl	8002fde <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003328:	f7fd ff7a 	bl	8001220 <HAL_GetTick>
 800332c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800332e:	e009      	b.n	8003344 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003330:	f7fd ff76 	bl	8001220 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d902      	bls.n	8003344 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	73fb      	strb	r3, [r7, #15]
      break;
 8003342:	e004      	b.n	800334e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003344:	f7ff fe5a 	bl	8002ffc <LL_RCC_PLLSAI1_IsReady>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d137      	bne.n	80033c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003368:	4313      	orrs	r3, r2
 800336a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800337e:	4313      	orrs	r3, r2
 8003380:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003382:	f7ff fe1d 	bl	8002fc0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003386:	f7fd ff4b 	bl	8001220 <HAL_GetTick>
 800338a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800338c:	e009      	b.n	80033a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800338e:	f7fd ff47 	bl	8001220 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d902      	bls.n	80033a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	73fb      	strb	r3, [r7, #15]
        break;
 80033a0:	e004      	b.n	80033ac <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033a2:	f7ff fe2b 	bl	8002ffc <LL_RCC_PLLSAI1_IsReady>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d1f0      	bne.n	800338e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d108      	bne.n	80033c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c0:	4313      	orrs	r3, r2
 80033c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033da:	f7ff fe00 	bl	8002fde <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033de:	f7fd ff1f 	bl	8001220 <HAL_GetTick>
 80033e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033e4:	e009      	b.n	80033fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e6:	f7fd ff1b 	bl	8001220 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d902      	bls.n	80033fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e004      	b.n	8003404 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033fa:	f7ff fdff 	bl	8002ffc <LL_RCC_PLLSAI1_IsReady>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f0      	bne.n	80033e6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d137      	bne.n	800347a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341e:	4313      	orrs	r3, r2
 8003420:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003434:	4313      	orrs	r3, r2
 8003436:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003438:	f7ff fdc2 	bl	8002fc0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343c:	f7fd fef0 	bl	8001220 <HAL_GetTick>
 8003440:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003442:	e009      	b.n	8003458 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003444:	f7fd feec 	bl	8001220 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d902      	bls.n	8003458 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	73fb      	strb	r3, [r7, #15]
        break;
 8003456:	e004      	b.n	8003462 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003458:	f7ff fdd0 	bl	8002ffc <LL_RCC_PLLSAI1_IsReady>
 800345c:	4603      	mov	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d1f0      	bne.n	8003444 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003476:	4313      	orrs	r3, r2
 8003478:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003490:	f7ff fda5 	bl	8002fde <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003494:	f7fd fec4 	bl	8001220 <HAL_GetTick>
 8003498:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800349a:	e009      	b.n	80034b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800349c:	f7fd fec0 	bl	8001220 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	73fb      	strb	r3, [r7, #15]
      break;
 80034ae:	e004      	b.n	80034ba <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034b0:	f7ff fda4 	bl	8002ffc <LL_RCC_PLLSAI1_IsReady>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d137      	bne.n	8003530 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d4:	4313      	orrs	r3, r2
 80034d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80034d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ea:	4313      	orrs	r3, r2
 80034ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034ee:	f7ff fd67 	bl	8002fc0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f2:	f7fd fe95 	bl	8001220 <HAL_GetTick>
 80034f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034f8:	e009      	b.n	800350e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034fa:	f7fd fe91 	bl	8001220 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d902      	bls.n	800350e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	73fb      	strb	r3, [r7, #15]
        break;
 800350c:	e004      	b.n	8003518 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800350e:	f7ff fd75 	bl	8002ffc <LL_RCC_PLLSAI1_IsReady>
 8003512:	4603      	mov	r3, r0
 8003514:	2b01      	cmp	r3, #1
 8003516:	d1f0      	bne.n	80034fa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d108      	bne.n	8003530 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800352c:	4313      	orrs	r3, r2
 800352e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e095      	b.n	8003678 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	2b00      	cmp	r3, #0
 8003552:	d108      	bne.n	8003566 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355c:	d009      	beq.n	8003572 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	61da      	str	r2, [r3, #28]
 8003564:	e005      	b.n	8003572 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd fbdb 	bl	8000d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035b2:	d902      	bls.n	80035ba <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	e002      	b.n	80035c0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035c8:	d007      	beq.n	80035da <HAL_SPI_Init+0xa0>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035d2:	d002      	beq.n	80035da <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	ea42 0103 	orr.w	r1, r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0204 	and.w	r2, r3, #4
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003656:	ea42 0103 	orr.w	r1, r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_SPI_Transmit+0x22>
 800369e:	2302      	movs	r3, #2
 80036a0:	e158      	b.n	8003954 <HAL_SPI_Transmit+0x2d4>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036aa:	f7fd fdb9 	bl	8001220 <HAL_GetTick>
 80036ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d002      	beq.n	80036c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
 80036c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036c4:	e13d      	b.n	8003942 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_SPI_Transmit+0x52>
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036d6:	e134      	b.n	8003942 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2203      	movs	r2, #3
 80036dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003722:	d10f      	bne.n	8003744 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003732:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003742:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d007      	beq.n	8003762 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800376a:	d94b      	bls.n	8003804 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_SPI_Transmit+0xfa>
 8003774:	8afb      	ldrh	r3, [r7, #22]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d13e      	bne.n	80037f8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	881a      	ldrh	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	1c9a      	adds	r2, r3, #2
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800379e:	e02b      	b.n	80037f8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d112      	bne.n	80037d4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	881a      	ldrh	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	1c9a      	adds	r2, r3, #2
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037d2:	e011      	b.n	80037f8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037d4:	f7fd fd24 	bl	8001220 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d803      	bhi.n	80037ec <HAL_SPI_Transmit+0x16c>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d102      	bne.n	80037f2 <HAL_SPI_Transmit+0x172>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037f6:	e0a4      	b.n	8003942 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ce      	bne.n	80037a0 <HAL_SPI_Transmit+0x120>
 8003802:	e07c      	b.n	80038fe <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_SPI_Transmit+0x192>
 800380c:	8afb      	ldrh	r3, [r7, #22]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d170      	bne.n	80038f4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d912      	bls.n	8003842 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	881a      	ldrh	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	1c9a      	adds	r2, r3, #2
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b02      	subs	r3, #2
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003840:	e058      	b.n	80038f4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003868:	e044      	b.n	80038f4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b02      	cmp	r3, #2
 8003876:	d12b      	bne.n	80038d0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d912      	bls.n	80038a8 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	881a      	ldrh	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	1c9a      	adds	r2, r3, #2
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b02      	subs	r3, #2
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038a6:	e025      	b.n	80038f4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	7812      	ldrb	r2, [r2, #0]
 80038b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038ce:	e011      	b.n	80038f4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d0:	f7fd fca6 	bl	8001220 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d803      	bhi.n	80038e8 <HAL_SPI_Transmit+0x268>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d102      	bne.n	80038ee <HAL_SPI_Transmit+0x26e>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038f2:	e026      	b.n	8003942 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1b5      	bne.n	800386a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fce4 	bl	80042d0 <SPI_EndRxTxTransaction>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e000      	b.n	8003942 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003940:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003952:	7ffb      	ldrb	r3, [r7, #31]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003978:	d112      	bne.n	80039a0 <HAL_SPI_Receive+0x44>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10e      	bne.n	80039a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2204      	movs	r2, #4
 8003986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f910 	bl	8003bbc <HAL_SPI_TransmitReceive>
 800399c:	4603      	mov	r3, r0
 800399e:	e109      	b.n	8003bb4 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_SPI_Receive+0x52>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e102      	b.n	8003bb4 <HAL_SPI_Receive+0x258>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b6:	f7fd fc33 	bl	8001220 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d002      	beq.n	80039ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
 80039ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039cc:	e0e9      	b.n	8003ba2 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_SPI_Receive+0x7e>
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039de:	e0e0      	b.n	8003ba2 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2204      	movs	r2, #4
 80039e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a2a:	d908      	bls.n	8003a3e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	e007      	b.n	8003a4e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a4c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a56:	d10f      	bne.n	8003a78 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d007      	beq.n	8003a96 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a9e:	d867      	bhi.n	8003b70 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003aa0:	e030      	b.n	8003b04 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d117      	bne.n	8003ae0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f103 020c 	add.w	r2, r3, #12
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ade:	e011      	b.n	8003b04 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae0:	f7fd fb9e 	bl	8001220 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d803      	bhi.n	8003af8 <HAL_SPI_Receive+0x19c>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	d102      	bne.n	8003afe <HAL_SPI_Receive+0x1a2>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b02:	e04e      	b.n	8003ba2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1c8      	bne.n	8003aa2 <HAL_SPI_Receive+0x146>
 8003b10:	e034      	b.n	8003b7c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d115      	bne.n	8003b4c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	b292      	uxth	r2, r2
 8003b2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	1c9a      	adds	r2, r3, #2
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003b4a:	e011      	b.n	8003b70 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b4c:	f7fd fb68 	bl	8001220 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d803      	bhi.n	8003b64 <HAL_SPI_Receive+0x208>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d102      	bne.n	8003b6a <HAL_SPI_Receive+0x20e>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b6e:	e018      	b.n	8003ba2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ca      	bne.n	8003b12 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	6839      	ldr	r1, [r7, #0]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb4d 	bl	8004220 <SPI_EndRxTransaction>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
 8003b9e:	e000      	b.n	8003ba2 <HAL_SPI_Receive+0x246>
  }

error :
 8003ba0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_SPI_TransmitReceive+0x26>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e1fb      	b.n	8003fda <HAL_SPI_TransmitReceive+0x41e>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bea:	f7fd fb19 	bl	8001220 <HAL_GetTick>
 8003bee:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bf6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003c02:	887b      	ldrh	r3, [r7, #2]
 8003c04:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c06:	7efb      	ldrb	r3, [r7, #27]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d00e      	beq.n	8003c2a <HAL_SPI_TransmitReceive+0x6e>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c12:	d106      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x66>
 8003c1c:	7efb      	ldrb	r3, [r7, #27]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d003      	beq.n	8003c2a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
 8003c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c28:	e1cd      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x80>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x80>
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d103      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c42:	e1c0      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d003      	beq.n	8003c58 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2205      	movs	r2, #5
 8003c54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	887a      	ldrh	r2, [r7, #2]
 8003c68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	887a      	ldrh	r2, [r7, #2]
 8003c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	887a      	ldrh	r2, [r7, #2]
 8003c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	887a      	ldrh	r2, [r7, #2]
 8003c84:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c9a:	d802      	bhi.n	8003ca2 <HAL_SPI_TransmitReceive+0xe6>
 8003c9c:	8a3b      	ldrh	r3, [r7, #16]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d908      	bls.n	8003cb4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	e007      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d007      	beq.n	8003ce2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cea:	d97c      	bls.n	8003de6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x13e>
 8003cf4:	8a7b      	ldrh	r3, [r7, #18]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d169      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	1c9a      	adds	r2, r3, #2
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1e:	e056      	b.n	8003dce <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d11b      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x1aa>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d016      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x1aa>
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d113      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	881a      	ldrh	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d11c      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x1f2>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d016      	beq.n	8003dae <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003daa:	2301      	movs	r3, #1
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dae:	f7fd fa37 	bl	8001220 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d807      	bhi.n	8003dce <HAL_SPI_TransmitReceive+0x212>
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d003      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003dcc:	e0fb      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1a3      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x164>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d19d      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x164>
 8003de4:	e0df      	b.n	8003fa6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_SPI_TransmitReceive+0x23a>
 8003dee:	8a7b      	ldrh	r3, [r7, #18]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 80cb 	bne.w	8003f8c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d912      	bls.n	8003e26 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	881a      	ldrh	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b02      	subs	r3, #2
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e24:	e0b2      	b.n	8003f8c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e4c:	e09e      	b.n	8003f8c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d134      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x30a>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02f      	beq.n	8003ec6 <HAL_SPI_TransmitReceive+0x30a>
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d12c      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d912      	bls.n	8003e9c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	881a      	ldrh	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	1c9a      	adds	r2, r3, #2
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b02      	subs	r3, #2
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e9a:	e012      	b.n	8003ec2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d148      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x3aa>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d042      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d923      	bls.n	8003f34 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	1c9a      	adds	r2, r3, #2
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b02      	subs	r3, #2
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d81f      	bhi.n	8003f62 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	e016      	b.n	8003f62 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f103 020c 	add.w	r2, r3, #12
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f62:	2301      	movs	r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f66:	f7fd f95b 	bl	8001220 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d803      	bhi.n	8003f7e <HAL_SPI_TransmitReceive+0x3c2>
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d102      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x3c8>
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d103      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f8a:	e01c      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f47f af5b 	bne.w	8003e4e <HAL_SPI_TransmitReceive+0x292>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f47f af54 	bne.w	8003e4e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f990 	bl	80042d0 <SPI_EndRxTxTransaction>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	661a      	str	r2, [r3, #96]	; 0x60
 8003fc2:	e000      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003fc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3728      	adds	r7, #40	; 0x28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ff4:	f7fd f914 	bl	8001220 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	4413      	add	r3, r2
 8004002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004004:	f7fd f90c 	bl	8001220 <HAL_GetTick>
 8004008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800400a:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	015b      	lsls	r3, r3, #5
 8004010:	0d1b      	lsrs	r3, r3, #20
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800401a:	e054      	b.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d050      	beq.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004024:	f7fd f8fc 	bl	8001220 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	429a      	cmp	r2, r3
 8004032:	d902      	bls.n	800403a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d13d      	bne.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004052:	d111      	bne.n	8004078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405c:	d004      	beq.n	8004068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d107      	bne.n	8004078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004080:	d10f      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e017      	b.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4013      	ands	r3, r2
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	bf0c      	ite	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	2300      	movne	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d19b      	bne.n	800401c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000010 	.word	0x20000010

080040f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	; 0x28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004106:	f7fd f88b 	bl	8001220 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	4413      	add	r3, r2
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004116:	f7fd f883 	bl	8001220 <HAL_GetTick>
 800411a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004124:	4b3d      	ldr	r3, [pc, #244]	; (800421c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	00da      	lsls	r2, r3, #3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	0d1b      	lsrs	r3, r3, #20
 8004134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800413c:	e060      	b.n	8004200 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004144:	d107      	bne.n	8004156 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004154:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d050      	beq.n	8004200 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800415e:	f7fd f85f 	bl	8001220 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	429a      	cmp	r2, r3
 800416c:	d902      	bls.n	8004174 <SPI_WaitFifoStateUntilTimeout+0x80>
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d13d      	bne.n	80041f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004182:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418c:	d111      	bne.n	80041b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004196:	d004      	beq.n	80041a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d107      	bne.n	80041b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ba:	d10f      	bne.n	80041dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e010      	b.n	8004212 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d196      	bne.n	800413e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3728      	adds	r7, #40	; 0x28
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000010 	.word	0x20000010

08004220 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004234:	d111      	bne.n	800425a <SPI_EndRxTransaction+0x3a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423e:	d004      	beq.n	800424a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004248:	d107      	bne.n	800425a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004258:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f7ff febd 	bl	8003fe4 <SPI_WaitFlagStateUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e023      	b.n	80042c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004288:	d11d      	bne.n	80042c6 <SPI_EndRxTransaction+0xa6>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004292:	d004      	beq.n	800429e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d113      	bne.n	80042c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff ff22 	bl	80040f4 <SPI_WaitFifoStateUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e000      	b.n	80042c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff ff03 	bl	80040f4 <SPI_WaitFifoStateUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e027      	b.n	8004354 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2200      	movs	r2, #0
 800430c:	2180      	movs	r1, #128	; 0x80
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff fe68 	bl	8003fe4 <SPI_WaitFlagStateUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e014      	b.n	8004354 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2200      	movs	r2, #0
 8004332:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff fedc 	bl	80040f4 <SPI_WaitFifoStateUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e000      	b.n	8004354 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e049      	b.n	8004402 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fc fd10 	bl	8000da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f000 f946 	bl	800462c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d001      	beq.n	8004424 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e02e      	b.n	8004482 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <HAL_TIM_Base_Start+0x84>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_TIM_Base_Start+0x34>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443e:	d115      	bne.n	800446c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	4b13      	ldr	r3, [pc, #76]	; (8004494 <HAL_TIM_Base_Start+0x88>)
 8004448:	4013      	ands	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b06      	cmp	r3, #6
 8004450:	d015      	beq.n	800447e <HAL_TIM_Base_Start+0x72>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d011      	beq.n	800447e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446a:	e008      	b.n	800447e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e000      	b.n	8004480 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40012c00 	.word	0x40012c00
 8004494:	00010007 	.word	0x00010007

08004498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e0b6      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x18a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80044d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f0:	d03e      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0xd8>
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f6:	f200 8087 	bhi.w	8004608 <HAL_TIM_ConfigClockSource+0x170>
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fe:	f000 8086 	beq.w	800460e <HAL_TIM_ConfigClockSource+0x176>
 8004502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004506:	d87f      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x170>
 8004508:	2b70      	cmp	r3, #112	; 0x70
 800450a:	d01a      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0xaa>
 800450c:	2b70      	cmp	r3, #112	; 0x70
 800450e:	d87b      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x170>
 8004510:	2b60      	cmp	r3, #96	; 0x60
 8004512:	d050      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x11e>
 8004514:	2b60      	cmp	r3, #96	; 0x60
 8004516:	d877      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x170>
 8004518:	2b50      	cmp	r3, #80	; 0x50
 800451a:	d03c      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xfe>
 800451c:	2b50      	cmp	r3, #80	; 0x50
 800451e:	d873      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x170>
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d058      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0x13e>
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d86f      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x170>
 8004528:	2b30      	cmp	r3, #48	; 0x30
 800452a:	d064      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x15e>
 800452c:	2b30      	cmp	r3, #48	; 0x30
 800452e:	d86b      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x170>
 8004530:	2b20      	cmp	r3, #32
 8004532:	d060      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x15e>
 8004534:	2b20      	cmp	r3, #32
 8004536:	d867      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x170>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d05c      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x15e>
 800453c:	2b10      	cmp	r3, #16
 800453e:	d05a      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x15e>
 8004540:	e062      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6899      	ldr	r1, [r3, #8]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f000 f94b 	bl	80047ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	609a      	str	r2, [r3, #8]
      break;
 800456e:	e04f      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6899      	ldr	r1, [r3, #8]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f000 f934 	bl	80047ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004592:	609a      	str	r2, [r3, #8]
      break;
 8004594:	e03c      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6859      	ldr	r1, [r3, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f000 f8a6 	bl	80046f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2150      	movs	r1, #80	; 0x50
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 f8ff 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 80045b4:	e02c      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f000 f8c5 	bl	8004752 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2160      	movs	r1, #96	; 0x60
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f8ef 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 80045d4:	e01c      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6859      	ldr	r1, [r3, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f000 f886 	bl	80046f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2140      	movs	r1, #64	; 0x40
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f8df 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 80045f4:	e00c      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f000 f8d6 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 8004606:	e003      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
      break;
 800460c:	e000      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800460e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004620:	7bfb      	ldrb	r3, [r7, #15]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a2a      	ldr	r2, [pc, #168]	; (80046e8 <TIM_Base_SetConfig+0xbc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_Base_SetConfig+0x20>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d108      	bne.n	800465e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <TIM_Base_SetConfig+0xbc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_Base_SetConfig+0x52>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466c:	d007      	beq.n	800467e <TIM_Base_SetConfig+0x52>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <TIM_Base_SetConfig+0xc0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_Base_SetConfig+0x52>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <TIM_Base_SetConfig+0xc4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <TIM_Base_SetConfig+0xbc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d007      	beq.n	80046cc <TIM_Base_SetConfig+0xa0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <TIM_Base_SetConfig+0xc0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_Base_SetConfig+0xa0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <TIM_Base_SetConfig+0xc4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d103      	bne.n	80046d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	615a      	str	r2, [r3, #20]
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40014400 	.word	0x40014400
 80046f0:	40014800 	.word	0x40014800

080046f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 030a 	bic.w	r3, r3, #10
 8004730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	621a      	str	r2, [r3, #32]
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004752:	b480      	push	{r7}
 8004754:	b087      	sub	sp, #28
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0210 	bic.w	r2, r3, #16
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800477c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	031b      	lsls	r3, r3, #12
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800478e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80047c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f043 0307 	orr.w	r3, r3, #7
 80047d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	021a      	lsls	r2, r3, #8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	431a      	orrs	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4313      	orrs	r3, r2
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004840:	2302      	movs	r3, #2
 8004842:	e04a      	b.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004874:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d10c      	bne.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40012c00 	.word	0x40012c00

080048ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80048f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	b29b      	uxth	r3, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	b29b      	uxth	r3, r3
 800490a:	4013      	ands	r3, r2
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004922:	b084      	sub	sp, #16
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	f107 0014 	add.w	r0, r7, #20
 8004930:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	b004      	add	sp, #16
 8004962:	4770      	bx	lr

08004964 <__errno>:
 8004964:	4b01      	ldr	r3, [pc, #4]	; (800496c <__errno+0x8>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	2000001c 	.word	0x2000001c

08004970 <__libc_init_array>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	4d0d      	ldr	r5, [pc, #52]	; (80049a8 <__libc_init_array+0x38>)
 8004974:	4c0d      	ldr	r4, [pc, #52]	; (80049ac <__libc_init_array+0x3c>)
 8004976:	1b64      	subs	r4, r4, r5
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	2600      	movs	r6, #0
 800497c:	42a6      	cmp	r6, r4
 800497e:	d109      	bne.n	8004994 <__libc_init_array+0x24>
 8004980:	4d0b      	ldr	r5, [pc, #44]	; (80049b0 <__libc_init_array+0x40>)
 8004982:	4c0c      	ldr	r4, [pc, #48]	; (80049b4 <__libc_init_array+0x44>)
 8004984:	f000 ffae 	bl	80058e4 <_init>
 8004988:	1b64      	subs	r4, r4, r5
 800498a:	10a4      	asrs	r4, r4, #2
 800498c:	2600      	movs	r6, #0
 800498e:	42a6      	cmp	r6, r4
 8004990:	d105      	bne.n	800499e <__libc_init_array+0x2e>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	f855 3b04 	ldr.w	r3, [r5], #4
 8004998:	4798      	blx	r3
 800499a:	3601      	adds	r6, #1
 800499c:	e7ee      	b.n	800497c <__libc_init_array+0xc>
 800499e:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a2:	4798      	blx	r3
 80049a4:	3601      	adds	r6, #1
 80049a6:	e7f2      	b.n	800498e <__libc_init_array+0x1e>
 80049a8:	08005ac8 	.word	0x08005ac8
 80049ac:	08005ac8 	.word	0x08005ac8
 80049b0:	08005ac8 	.word	0x08005ac8
 80049b4:	08005acc 	.word	0x08005acc

080049b8 <memset>:
 80049b8:	4402      	add	r2, r0
 80049ba:	4603      	mov	r3, r0
 80049bc:	4293      	cmp	r3, r2
 80049be:	d100      	bne.n	80049c2 <memset+0xa>
 80049c0:	4770      	bx	lr
 80049c2:	f803 1b01 	strb.w	r1, [r3], #1
 80049c6:	e7f9      	b.n	80049bc <memset+0x4>

080049c8 <iprintf>:
 80049c8:	b40f      	push	{r0, r1, r2, r3}
 80049ca:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <iprintf+0x2c>)
 80049cc:	b513      	push	{r0, r1, r4, lr}
 80049ce:	681c      	ldr	r4, [r3, #0]
 80049d0:	b124      	cbz	r4, 80049dc <iprintf+0x14>
 80049d2:	69a3      	ldr	r3, [r4, #24]
 80049d4:	b913      	cbnz	r3, 80049dc <iprintf+0x14>
 80049d6:	4620      	mov	r0, r4
 80049d8:	f000 f866 	bl	8004aa8 <__sinit>
 80049dc:	ab05      	add	r3, sp, #20
 80049de:	9a04      	ldr	r2, [sp, #16]
 80049e0:	68a1      	ldr	r1, [r4, #8]
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	4620      	mov	r0, r4
 80049e6:	f000 f9bd 	bl	8004d64 <_vfiprintf_r>
 80049ea:	b002      	add	sp, #8
 80049ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049f0:	b004      	add	sp, #16
 80049f2:	4770      	bx	lr
 80049f4:	2000001c 	.word	0x2000001c

080049f8 <std>:
 80049f8:	2300      	movs	r3, #0
 80049fa:	b510      	push	{r4, lr}
 80049fc:	4604      	mov	r4, r0
 80049fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a06:	6083      	str	r3, [r0, #8]
 8004a08:	8181      	strh	r1, [r0, #12]
 8004a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a0c:	81c2      	strh	r2, [r0, #14]
 8004a0e:	6183      	str	r3, [r0, #24]
 8004a10:	4619      	mov	r1, r3
 8004a12:	2208      	movs	r2, #8
 8004a14:	305c      	adds	r0, #92	; 0x5c
 8004a16:	f7ff ffcf 	bl	80049b8 <memset>
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <std+0x38>)
 8004a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <std+0x3c>)
 8004a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <std+0x40>)
 8004a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <std+0x44>)
 8004a28:	6224      	str	r4, [r4, #32]
 8004a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a2c:	bd10      	pop	{r4, pc}
 8004a2e:	bf00      	nop
 8004a30:	0800530d 	.word	0x0800530d
 8004a34:	0800532f 	.word	0x0800532f
 8004a38:	08005367 	.word	0x08005367
 8004a3c:	0800538b 	.word	0x0800538b

08004a40 <_cleanup_r>:
 8004a40:	4901      	ldr	r1, [pc, #4]	; (8004a48 <_cleanup_r+0x8>)
 8004a42:	f000 b8af 	b.w	8004ba4 <_fwalk_reent>
 8004a46:	bf00      	nop
 8004a48:	08005665 	.word	0x08005665

08004a4c <__sfmoreglue>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	2268      	movs	r2, #104	; 0x68
 8004a50:	1e4d      	subs	r5, r1, #1
 8004a52:	4355      	muls	r5, r2
 8004a54:	460e      	mov	r6, r1
 8004a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a5a:	f000 f8e5 	bl	8004c28 <_malloc_r>
 8004a5e:	4604      	mov	r4, r0
 8004a60:	b140      	cbz	r0, 8004a74 <__sfmoreglue+0x28>
 8004a62:	2100      	movs	r1, #0
 8004a64:	e9c0 1600 	strd	r1, r6, [r0]
 8004a68:	300c      	adds	r0, #12
 8004a6a:	60a0      	str	r0, [r4, #8]
 8004a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a70:	f7ff ffa2 	bl	80049b8 <memset>
 8004a74:	4620      	mov	r0, r4
 8004a76:	bd70      	pop	{r4, r5, r6, pc}

08004a78 <__sfp_lock_acquire>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__sfp_lock_acquire+0x8>)
 8004a7a:	f000 b8b3 	b.w	8004be4 <__retarget_lock_acquire_recursive>
 8004a7e:	bf00      	nop
 8004a80:	20000469 	.word	0x20000469

08004a84 <__sfp_lock_release>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__sfp_lock_release+0x8>)
 8004a86:	f000 b8ae 	b.w	8004be6 <__retarget_lock_release_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	20000469 	.word	0x20000469

08004a90 <__sinit_lock_acquire>:
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <__sinit_lock_acquire+0x8>)
 8004a92:	f000 b8a7 	b.w	8004be4 <__retarget_lock_acquire_recursive>
 8004a96:	bf00      	nop
 8004a98:	2000046a 	.word	0x2000046a

08004a9c <__sinit_lock_release>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__sinit_lock_release+0x8>)
 8004a9e:	f000 b8a2 	b.w	8004be6 <__retarget_lock_release_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	2000046a 	.word	0x2000046a

08004aa8 <__sinit>:
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	4604      	mov	r4, r0
 8004aac:	f7ff fff0 	bl	8004a90 <__sinit_lock_acquire>
 8004ab0:	69a3      	ldr	r3, [r4, #24]
 8004ab2:	b11b      	cbz	r3, 8004abc <__sinit+0x14>
 8004ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab8:	f7ff bff0 	b.w	8004a9c <__sinit_lock_release>
 8004abc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ac0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ac2:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <__sinit+0x68>)
 8004ac4:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <__sinit+0x6c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004aca:	42a3      	cmp	r3, r4
 8004acc:	bf04      	itt	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	61a3      	streq	r3, [r4, #24]
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 f820 	bl	8004b18 <__sfp>
 8004ad8:	6060      	str	r0, [r4, #4]
 8004ada:	4620      	mov	r0, r4
 8004adc:	f000 f81c 	bl	8004b18 <__sfp>
 8004ae0:	60a0      	str	r0, [r4, #8]
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f000 f818 	bl	8004b18 <__sfp>
 8004ae8:	2200      	movs	r2, #0
 8004aea:	60e0      	str	r0, [r4, #12]
 8004aec:	2104      	movs	r1, #4
 8004aee:	6860      	ldr	r0, [r4, #4]
 8004af0:	f7ff ff82 	bl	80049f8 <std>
 8004af4:	68a0      	ldr	r0, [r4, #8]
 8004af6:	2201      	movs	r2, #1
 8004af8:	2109      	movs	r1, #9
 8004afa:	f7ff ff7d 	bl	80049f8 <std>
 8004afe:	68e0      	ldr	r0, [r4, #12]
 8004b00:	2202      	movs	r2, #2
 8004b02:	2112      	movs	r1, #18
 8004b04:	f7ff ff78 	bl	80049f8 <std>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	61a3      	str	r3, [r4, #24]
 8004b0c:	e7d2      	b.n	8004ab4 <__sinit+0xc>
 8004b0e:	bf00      	nop
 8004b10:	08005a30 	.word	0x08005a30
 8004b14:	08004a41 	.word	0x08004a41

08004b18 <__sfp>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	f7ff ffac 	bl	8004a78 <__sfp_lock_acquire>
 8004b20:	4b1e      	ldr	r3, [pc, #120]	; (8004b9c <__sfp+0x84>)
 8004b22:	681e      	ldr	r6, [r3, #0]
 8004b24:	69b3      	ldr	r3, [r6, #24]
 8004b26:	b913      	cbnz	r3, 8004b2e <__sfp+0x16>
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f7ff ffbd 	bl	8004aa8 <__sinit>
 8004b2e:	3648      	adds	r6, #72	; 0x48
 8004b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	d503      	bpl.n	8004b40 <__sfp+0x28>
 8004b38:	6833      	ldr	r3, [r6, #0]
 8004b3a:	b30b      	cbz	r3, 8004b80 <__sfp+0x68>
 8004b3c:	6836      	ldr	r6, [r6, #0]
 8004b3e:	e7f7      	b.n	8004b30 <__sfp+0x18>
 8004b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b44:	b9d5      	cbnz	r5, 8004b7c <__sfp+0x64>
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <__sfp+0x88>)
 8004b48:	60e3      	str	r3, [r4, #12]
 8004b4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b4e:	6665      	str	r5, [r4, #100]	; 0x64
 8004b50:	f000 f847 	bl	8004be2 <__retarget_lock_init_recursive>
 8004b54:	f7ff ff96 	bl	8004a84 <__sfp_lock_release>
 8004b58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b60:	6025      	str	r5, [r4, #0]
 8004b62:	61a5      	str	r5, [r4, #24]
 8004b64:	2208      	movs	r2, #8
 8004b66:	4629      	mov	r1, r5
 8004b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b6c:	f7ff ff24 	bl	80049b8 <memset>
 8004b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b78:	4620      	mov	r0, r4
 8004b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b7c:	3468      	adds	r4, #104	; 0x68
 8004b7e:	e7d9      	b.n	8004b34 <__sfp+0x1c>
 8004b80:	2104      	movs	r1, #4
 8004b82:	4638      	mov	r0, r7
 8004b84:	f7ff ff62 	bl	8004a4c <__sfmoreglue>
 8004b88:	4604      	mov	r4, r0
 8004b8a:	6030      	str	r0, [r6, #0]
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d1d5      	bne.n	8004b3c <__sfp+0x24>
 8004b90:	f7ff ff78 	bl	8004a84 <__sfp_lock_release>
 8004b94:	230c      	movs	r3, #12
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	e7ee      	b.n	8004b78 <__sfp+0x60>
 8004b9a:	bf00      	nop
 8004b9c:	08005a30 	.word	0x08005a30
 8004ba0:	ffff0001 	.word	0xffff0001

08004ba4 <_fwalk_reent>:
 8004ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba8:	4606      	mov	r6, r0
 8004baa:	4688      	mov	r8, r1
 8004bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bb0:	2700      	movs	r7, #0
 8004bb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bb6:	f1b9 0901 	subs.w	r9, r9, #1
 8004bba:	d505      	bpl.n	8004bc8 <_fwalk_reent+0x24>
 8004bbc:	6824      	ldr	r4, [r4, #0]
 8004bbe:	2c00      	cmp	r4, #0
 8004bc0:	d1f7      	bne.n	8004bb2 <_fwalk_reent+0xe>
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bc8:	89ab      	ldrh	r3, [r5, #12]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d907      	bls.n	8004bde <_fwalk_reent+0x3a>
 8004bce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	d003      	beq.n	8004bde <_fwalk_reent+0x3a>
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4630      	mov	r0, r6
 8004bda:	47c0      	blx	r8
 8004bdc:	4307      	orrs	r7, r0
 8004bde:	3568      	adds	r5, #104	; 0x68
 8004be0:	e7e9      	b.n	8004bb6 <_fwalk_reent+0x12>

08004be2 <__retarget_lock_init_recursive>:
 8004be2:	4770      	bx	lr

08004be4 <__retarget_lock_acquire_recursive>:
 8004be4:	4770      	bx	lr

08004be6 <__retarget_lock_release_recursive>:
 8004be6:	4770      	bx	lr

08004be8 <sbrk_aligned>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	4e0e      	ldr	r6, [pc, #56]	; (8004c24 <sbrk_aligned+0x3c>)
 8004bec:	460c      	mov	r4, r1
 8004bee:	6831      	ldr	r1, [r6, #0]
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	b911      	cbnz	r1, 8004bfa <sbrk_aligned+0x12>
 8004bf4:	f000 fb7a 	bl	80052ec <_sbrk_r>
 8004bf8:	6030      	str	r0, [r6, #0]
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 fb75 	bl	80052ec <_sbrk_r>
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	d00a      	beq.n	8004c1c <sbrk_aligned+0x34>
 8004c06:	1cc4      	adds	r4, r0, #3
 8004c08:	f024 0403 	bic.w	r4, r4, #3
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d007      	beq.n	8004c20 <sbrk_aligned+0x38>
 8004c10:	1a21      	subs	r1, r4, r0
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 fb6a 	bl	80052ec <_sbrk_r>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d101      	bne.n	8004c20 <sbrk_aligned+0x38>
 8004c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c20:	4620      	mov	r0, r4
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	20000470 	.word	0x20000470

08004c28 <_malloc_r>:
 8004c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2c:	1ccd      	adds	r5, r1, #3
 8004c2e:	f025 0503 	bic.w	r5, r5, #3
 8004c32:	3508      	adds	r5, #8
 8004c34:	2d0c      	cmp	r5, #12
 8004c36:	bf38      	it	cc
 8004c38:	250c      	movcc	r5, #12
 8004c3a:	2d00      	cmp	r5, #0
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	db01      	blt.n	8004c44 <_malloc_r+0x1c>
 8004c40:	42a9      	cmp	r1, r5
 8004c42:	d905      	bls.n	8004c50 <_malloc_r+0x28>
 8004c44:	230c      	movs	r3, #12
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	2600      	movs	r6, #0
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c50:	4e2e      	ldr	r6, [pc, #184]	; (8004d0c <_malloc_r+0xe4>)
 8004c52:	f000 fdbb 	bl	80057cc <__malloc_lock>
 8004c56:	6833      	ldr	r3, [r6, #0]
 8004c58:	461c      	mov	r4, r3
 8004c5a:	bb34      	cbnz	r4, 8004caa <_malloc_r+0x82>
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f7ff ffc2 	bl	8004be8 <sbrk_aligned>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	4604      	mov	r4, r0
 8004c68:	d14d      	bne.n	8004d06 <_malloc_r+0xde>
 8004c6a:	6834      	ldr	r4, [r6, #0]
 8004c6c:	4626      	mov	r6, r4
 8004c6e:	2e00      	cmp	r6, #0
 8004c70:	d140      	bne.n	8004cf4 <_malloc_r+0xcc>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	4631      	mov	r1, r6
 8004c76:	4638      	mov	r0, r7
 8004c78:	eb04 0803 	add.w	r8, r4, r3
 8004c7c:	f000 fb36 	bl	80052ec <_sbrk_r>
 8004c80:	4580      	cmp	r8, r0
 8004c82:	d13a      	bne.n	8004cfa <_malloc_r+0xd2>
 8004c84:	6821      	ldr	r1, [r4, #0]
 8004c86:	3503      	adds	r5, #3
 8004c88:	1a6d      	subs	r5, r5, r1
 8004c8a:	f025 0503 	bic.w	r5, r5, #3
 8004c8e:	3508      	adds	r5, #8
 8004c90:	2d0c      	cmp	r5, #12
 8004c92:	bf38      	it	cc
 8004c94:	250c      	movcc	r5, #12
 8004c96:	4629      	mov	r1, r5
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f7ff ffa5 	bl	8004be8 <sbrk_aligned>
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d02b      	beq.n	8004cfa <_malloc_r+0xd2>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	442b      	add	r3, r5
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	e00e      	b.n	8004cc8 <_malloc_r+0xa0>
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	1b52      	subs	r2, r2, r5
 8004cae:	d41e      	bmi.n	8004cee <_malloc_r+0xc6>
 8004cb0:	2a0b      	cmp	r2, #11
 8004cb2:	d916      	bls.n	8004ce2 <_malloc_r+0xba>
 8004cb4:	1961      	adds	r1, r4, r5
 8004cb6:	42a3      	cmp	r3, r4
 8004cb8:	6025      	str	r5, [r4, #0]
 8004cba:	bf18      	it	ne
 8004cbc:	6059      	strne	r1, [r3, #4]
 8004cbe:	6863      	ldr	r3, [r4, #4]
 8004cc0:	bf08      	it	eq
 8004cc2:	6031      	streq	r1, [r6, #0]
 8004cc4:	5162      	str	r2, [r4, r5]
 8004cc6:	604b      	str	r3, [r1, #4]
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f104 060b 	add.w	r6, r4, #11
 8004cce:	f000 fd83 	bl	80057d8 <__malloc_unlock>
 8004cd2:	f026 0607 	bic.w	r6, r6, #7
 8004cd6:	1d23      	adds	r3, r4, #4
 8004cd8:	1af2      	subs	r2, r6, r3
 8004cda:	d0b6      	beq.n	8004c4a <_malloc_r+0x22>
 8004cdc:	1b9b      	subs	r3, r3, r6
 8004cde:	50a3      	str	r3, [r4, r2]
 8004ce0:	e7b3      	b.n	8004c4a <_malloc_r+0x22>
 8004ce2:	6862      	ldr	r2, [r4, #4]
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	bf0c      	ite	eq
 8004ce8:	6032      	streq	r2, [r6, #0]
 8004cea:	605a      	strne	r2, [r3, #4]
 8004cec:	e7ec      	b.n	8004cc8 <_malloc_r+0xa0>
 8004cee:	4623      	mov	r3, r4
 8004cf0:	6864      	ldr	r4, [r4, #4]
 8004cf2:	e7b2      	b.n	8004c5a <_malloc_r+0x32>
 8004cf4:	4634      	mov	r4, r6
 8004cf6:	6876      	ldr	r6, [r6, #4]
 8004cf8:	e7b9      	b.n	8004c6e <_malloc_r+0x46>
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f000 fd6a 	bl	80057d8 <__malloc_unlock>
 8004d04:	e7a1      	b.n	8004c4a <_malloc_r+0x22>
 8004d06:	6025      	str	r5, [r4, #0]
 8004d08:	e7de      	b.n	8004cc8 <_malloc_r+0xa0>
 8004d0a:	bf00      	nop
 8004d0c:	2000046c 	.word	0x2000046c

08004d10 <__sfputc_r>:
 8004d10:	6893      	ldr	r3, [r2, #8]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	b410      	push	{r4}
 8004d18:	6093      	str	r3, [r2, #8]
 8004d1a:	da08      	bge.n	8004d2e <__sfputc_r+0x1e>
 8004d1c:	6994      	ldr	r4, [r2, #24]
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	db01      	blt.n	8004d26 <__sfputc_r+0x16>
 8004d22:	290a      	cmp	r1, #10
 8004d24:	d103      	bne.n	8004d2e <__sfputc_r+0x1e>
 8004d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d2a:	f000 bb33 	b.w	8005394 <__swbuf_r>
 8004d2e:	6813      	ldr	r3, [r2, #0]
 8004d30:	1c58      	adds	r0, r3, #1
 8004d32:	6010      	str	r0, [r2, #0]
 8004d34:	7019      	strb	r1, [r3, #0]
 8004d36:	4608      	mov	r0, r1
 8004d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <__sfputs_r>:
 8004d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d40:	4606      	mov	r6, r0
 8004d42:	460f      	mov	r7, r1
 8004d44:	4614      	mov	r4, r2
 8004d46:	18d5      	adds	r5, r2, r3
 8004d48:	42ac      	cmp	r4, r5
 8004d4a:	d101      	bne.n	8004d50 <__sfputs_r+0x12>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	e007      	b.n	8004d60 <__sfputs_r+0x22>
 8004d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d54:	463a      	mov	r2, r7
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7ff ffda 	bl	8004d10 <__sfputc_r>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d1f3      	bne.n	8004d48 <__sfputs_r+0xa>
 8004d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d64 <_vfiprintf_r>:
 8004d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d68:	460d      	mov	r5, r1
 8004d6a:	b09d      	sub	sp, #116	; 0x74
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	4698      	mov	r8, r3
 8004d70:	4606      	mov	r6, r0
 8004d72:	b118      	cbz	r0, 8004d7c <_vfiprintf_r+0x18>
 8004d74:	6983      	ldr	r3, [r0, #24]
 8004d76:	b90b      	cbnz	r3, 8004d7c <_vfiprintf_r+0x18>
 8004d78:	f7ff fe96 	bl	8004aa8 <__sinit>
 8004d7c:	4b89      	ldr	r3, [pc, #548]	; (8004fa4 <_vfiprintf_r+0x240>)
 8004d7e:	429d      	cmp	r5, r3
 8004d80:	d11b      	bne.n	8004dba <_vfiprintf_r+0x56>
 8004d82:	6875      	ldr	r5, [r6, #4]
 8004d84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d86:	07d9      	lsls	r1, r3, #31
 8004d88:	d405      	bmi.n	8004d96 <_vfiprintf_r+0x32>
 8004d8a:	89ab      	ldrh	r3, [r5, #12]
 8004d8c:	059a      	lsls	r2, r3, #22
 8004d8e:	d402      	bmi.n	8004d96 <_vfiprintf_r+0x32>
 8004d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d92:	f7ff ff27 	bl	8004be4 <__retarget_lock_acquire_recursive>
 8004d96:	89ab      	ldrh	r3, [r5, #12]
 8004d98:	071b      	lsls	r3, r3, #28
 8004d9a:	d501      	bpl.n	8004da0 <_vfiprintf_r+0x3c>
 8004d9c:	692b      	ldr	r3, [r5, #16]
 8004d9e:	b9eb      	cbnz	r3, 8004ddc <_vfiprintf_r+0x78>
 8004da0:	4629      	mov	r1, r5
 8004da2:	4630      	mov	r0, r6
 8004da4:	f000 fb5a 	bl	800545c <__swsetup_r>
 8004da8:	b1c0      	cbz	r0, 8004ddc <_vfiprintf_r+0x78>
 8004daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dac:	07dc      	lsls	r4, r3, #31
 8004dae:	d50e      	bpl.n	8004dce <_vfiprintf_r+0x6a>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	b01d      	add	sp, #116	; 0x74
 8004db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dba:	4b7b      	ldr	r3, [pc, #492]	; (8004fa8 <_vfiprintf_r+0x244>)
 8004dbc:	429d      	cmp	r5, r3
 8004dbe:	d101      	bne.n	8004dc4 <_vfiprintf_r+0x60>
 8004dc0:	68b5      	ldr	r5, [r6, #8]
 8004dc2:	e7df      	b.n	8004d84 <_vfiprintf_r+0x20>
 8004dc4:	4b79      	ldr	r3, [pc, #484]	; (8004fac <_vfiprintf_r+0x248>)
 8004dc6:	429d      	cmp	r5, r3
 8004dc8:	bf08      	it	eq
 8004dca:	68f5      	ldreq	r5, [r6, #12]
 8004dcc:	e7da      	b.n	8004d84 <_vfiprintf_r+0x20>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	0598      	lsls	r0, r3, #22
 8004dd2:	d4ed      	bmi.n	8004db0 <_vfiprintf_r+0x4c>
 8004dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dd6:	f7ff ff06 	bl	8004be6 <__retarget_lock_release_recursive>
 8004dda:	e7e9      	b.n	8004db0 <_vfiprintf_r+0x4c>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9309      	str	r3, [sp, #36]	; 0x24
 8004de0:	2320      	movs	r3, #32
 8004de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dea:	2330      	movs	r3, #48	; 0x30
 8004dec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004fb0 <_vfiprintf_r+0x24c>
 8004df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004df4:	f04f 0901 	mov.w	r9, #1
 8004df8:	4623      	mov	r3, r4
 8004dfa:	469a      	mov	sl, r3
 8004dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e00:	b10a      	cbz	r2, 8004e06 <_vfiprintf_r+0xa2>
 8004e02:	2a25      	cmp	r2, #37	; 0x25
 8004e04:	d1f9      	bne.n	8004dfa <_vfiprintf_r+0x96>
 8004e06:	ebba 0b04 	subs.w	fp, sl, r4
 8004e0a:	d00b      	beq.n	8004e24 <_vfiprintf_r+0xc0>
 8004e0c:	465b      	mov	r3, fp
 8004e0e:	4622      	mov	r2, r4
 8004e10:	4629      	mov	r1, r5
 8004e12:	4630      	mov	r0, r6
 8004e14:	f7ff ff93 	bl	8004d3e <__sfputs_r>
 8004e18:	3001      	adds	r0, #1
 8004e1a:	f000 80aa 	beq.w	8004f72 <_vfiprintf_r+0x20e>
 8004e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e20:	445a      	add	r2, fp
 8004e22:	9209      	str	r2, [sp, #36]	; 0x24
 8004e24:	f89a 3000 	ldrb.w	r3, [sl]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80a2 	beq.w	8004f72 <_vfiprintf_r+0x20e>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f04f 32ff 	mov.w	r2, #4294967295
 8004e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e38:	f10a 0a01 	add.w	sl, sl, #1
 8004e3c:	9304      	str	r3, [sp, #16]
 8004e3e:	9307      	str	r3, [sp, #28]
 8004e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e44:	931a      	str	r3, [sp, #104]	; 0x68
 8004e46:	4654      	mov	r4, sl
 8004e48:	2205      	movs	r2, #5
 8004e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e4e:	4858      	ldr	r0, [pc, #352]	; (8004fb0 <_vfiprintf_r+0x24c>)
 8004e50:	f7fb f996 	bl	8000180 <memchr>
 8004e54:	9a04      	ldr	r2, [sp, #16]
 8004e56:	b9d8      	cbnz	r0, 8004e90 <_vfiprintf_r+0x12c>
 8004e58:	06d1      	lsls	r1, r2, #27
 8004e5a:	bf44      	itt	mi
 8004e5c:	2320      	movmi	r3, #32
 8004e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e62:	0713      	lsls	r3, r2, #28
 8004e64:	bf44      	itt	mi
 8004e66:	232b      	movmi	r3, #43	; 0x2b
 8004e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e70:	2b2a      	cmp	r3, #42	; 0x2a
 8004e72:	d015      	beq.n	8004ea0 <_vfiprintf_r+0x13c>
 8004e74:	9a07      	ldr	r2, [sp, #28]
 8004e76:	4654      	mov	r4, sl
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f04f 0c0a 	mov.w	ip, #10
 8004e7e:	4621      	mov	r1, r4
 8004e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e84:	3b30      	subs	r3, #48	; 0x30
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	d94e      	bls.n	8004f28 <_vfiprintf_r+0x1c4>
 8004e8a:	b1b0      	cbz	r0, 8004eba <_vfiprintf_r+0x156>
 8004e8c:	9207      	str	r2, [sp, #28]
 8004e8e:	e014      	b.n	8004eba <_vfiprintf_r+0x156>
 8004e90:	eba0 0308 	sub.w	r3, r0, r8
 8004e94:	fa09 f303 	lsl.w	r3, r9, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	46a2      	mov	sl, r4
 8004e9e:	e7d2      	b.n	8004e46 <_vfiprintf_r+0xe2>
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	1d19      	adds	r1, r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	9103      	str	r1, [sp, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bfbb      	ittet	lt
 8004eac:	425b      	neglt	r3, r3
 8004eae:	f042 0202 	orrlt.w	r2, r2, #2
 8004eb2:	9307      	strge	r3, [sp, #28]
 8004eb4:	9307      	strlt	r3, [sp, #28]
 8004eb6:	bfb8      	it	lt
 8004eb8:	9204      	strlt	r2, [sp, #16]
 8004eba:	7823      	ldrb	r3, [r4, #0]
 8004ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8004ebe:	d10c      	bne.n	8004eda <_vfiprintf_r+0x176>
 8004ec0:	7863      	ldrb	r3, [r4, #1]
 8004ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec4:	d135      	bne.n	8004f32 <_vfiprintf_r+0x1ce>
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	1d1a      	adds	r2, r3, #4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	9203      	str	r2, [sp, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bfb8      	it	lt
 8004ed2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ed6:	3402      	adds	r4, #2
 8004ed8:	9305      	str	r3, [sp, #20]
 8004eda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fc0 <_vfiprintf_r+0x25c>
 8004ede:	7821      	ldrb	r1, [r4, #0]
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	4650      	mov	r0, sl
 8004ee4:	f7fb f94c 	bl	8000180 <memchr>
 8004ee8:	b140      	cbz	r0, 8004efc <_vfiprintf_r+0x198>
 8004eea:	2340      	movs	r3, #64	; 0x40
 8004eec:	eba0 000a 	sub.w	r0, r0, sl
 8004ef0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ef4:	9b04      	ldr	r3, [sp, #16]
 8004ef6:	4303      	orrs	r3, r0
 8004ef8:	3401      	adds	r4, #1
 8004efa:	9304      	str	r3, [sp, #16]
 8004efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f00:	482c      	ldr	r0, [pc, #176]	; (8004fb4 <_vfiprintf_r+0x250>)
 8004f02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f06:	2206      	movs	r2, #6
 8004f08:	f7fb f93a 	bl	8000180 <memchr>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d03f      	beq.n	8004f90 <_vfiprintf_r+0x22c>
 8004f10:	4b29      	ldr	r3, [pc, #164]	; (8004fb8 <_vfiprintf_r+0x254>)
 8004f12:	bb1b      	cbnz	r3, 8004f5c <_vfiprintf_r+0x1f8>
 8004f14:	9b03      	ldr	r3, [sp, #12]
 8004f16:	3307      	adds	r3, #7
 8004f18:	f023 0307 	bic.w	r3, r3, #7
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	9303      	str	r3, [sp, #12]
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	443b      	add	r3, r7
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	e767      	b.n	8004df8 <_vfiprintf_r+0x94>
 8004f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	2001      	movs	r0, #1
 8004f30:	e7a5      	b.n	8004e7e <_vfiprintf_r+0x11a>
 8004f32:	2300      	movs	r3, #0
 8004f34:	3401      	adds	r4, #1
 8004f36:	9305      	str	r3, [sp, #20]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f04f 0c0a 	mov.w	ip, #10
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f44:	3a30      	subs	r2, #48	; 0x30
 8004f46:	2a09      	cmp	r2, #9
 8004f48:	d903      	bls.n	8004f52 <_vfiprintf_r+0x1ee>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0c5      	beq.n	8004eda <_vfiprintf_r+0x176>
 8004f4e:	9105      	str	r1, [sp, #20]
 8004f50:	e7c3      	b.n	8004eda <_vfiprintf_r+0x176>
 8004f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f56:	4604      	mov	r4, r0
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e7f0      	b.n	8004f3e <_vfiprintf_r+0x1da>
 8004f5c:	ab03      	add	r3, sp, #12
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	462a      	mov	r2, r5
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <_vfiprintf_r+0x258>)
 8004f64:	a904      	add	r1, sp, #16
 8004f66:	4630      	mov	r0, r6
 8004f68:	f3af 8000 	nop.w
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	1c78      	adds	r0, r7, #1
 8004f70:	d1d6      	bne.n	8004f20 <_vfiprintf_r+0x1bc>
 8004f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f74:	07d9      	lsls	r1, r3, #31
 8004f76:	d405      	bmi.n	8004f84 <_vfiprintf_r+0x220>
 8004f78:	89ab      	ldrh	r3, [r5, #12]
 8004f7a:	059a      	lsls	r2, r3, #22
 8004f7c:	d402      	bmi.n	8004f84 <_vfiprintf_r+0x220>
 8004f7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f80:	f7ff fe31 	bl	8004be6 <__retarget_lock_release_recursive>
 8004f84:	89ab      	ldrh	r3, [r5, #12]
 8004f86:	065b      	lsls	r3, r3, #25
 8004f88:	f53f af12 	bmi.w	8004db0 <_vfiprintf_r+0x4c>
 8004f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f8e:	e711      	b.n	8004db4 <_vfiprintf_r+0x50>
 8004f90:	ab03      	add	r3, sp, #12
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	462a      	mov	r2, r5
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <_vfiprintf_r+0x258>)
 8004f98:	a904      	add	r1, sp, #16
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f000 f880 	bl	80050a0 <_printf_i>
 8004fa0:	e7e4      	b.n	8004f6c <_vfiprintf_r+0x208>
 8004fa2:	bf00      	nop
 8004fa4:	08005a54 	.word	0x08005a54
 8004fa8:	08005a74 	.word	0x08005a74
 8004fac:	08005a34 	.word	0x08005a34
 8004fb0:	08005a94 	.word	0x08005a94
 8004fb4:	08005a9e 	.word	0x08005a9e
 8004fb8:	00000000 	.word	0x00000000
 8004fbc:	08004d3f 	.word	0x08004d3f
 8004fc0:	08005a9a 	.word	0x08005a9a

08004fc4 <_printf_common>:
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	4616      	mov	r6, r2
 8004fca:	4699      	mov	r9, r3
 8004fcc:	688a      	ldr	r2, [r1, #8]
 8004fce:	690b      	ldr	r3, [r1, #16]
 8004fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	bfb8      	it	lt
 8004fd8:	4613      	movlt	r3, r2
 8004fda:	6033      	str	r3, [r6, #0]
 8004fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	b10a      	cbz	r2, 8004fea <_printf_common+0x26>
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	6033      	str	r3, [r6, #0]
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	0699      	lsls	r1, r3, #26
 8004fee:	bf42      	ittt	mi
 8004ff0:	6833      	ldrmi	r3, [r6, #0]
 8004ff2:	3302      	addmi	r3, #2
 8004ff4:	6033      	strmi	r3, [r6, #0]
 8004ff6:	6825      	ldr	r5, [r4, #0]
 8004ff8:	f015 0506 	ands.w	r5, r5, #6
 8004ffc:	d106      	bne.n	800500c <_printf_common+0x48>
 8004ffe:	f104 0a19 	add.w	sl, r4, #25
 8005002:	68e3      	ldr	r3, [r4, #12]
 8005004:	6832      	ldr	r2, [r6, #0]
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	42ab      	cmp	r3, r5
 800500a:	dc26      	bgt.n	800505a <_printf_common+0x96>
 800500c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005010:	1e13      	subs	r3, r2, #0
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	bf18      	it	ne
 8005016:	2301      	movne	r3, #1
 8005018:	0692      	lsls	r2, r2, #26
 800501a:	d42b      	bmi.n	8005074 <_printf_common+0xb0>
 800501c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005020:	4649      	mov	r1, r9
 8005022:	4638      	mov	r0, r7
 8005024:	47c0      	blx	r8
 8005026:	3001      	adds	r0, #1
 8005028:	d01e      	beq.n	8005068 <_printf_common+0xa4>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	68e5      	ldr	r5, [r4, #12]
 800502e:	6832      	ldr	r2, [r6, #0]
 8005030:	f003 0306 	and.w	r3, r3, #6
 8005034:	2b04      	cmp	r3, #4
 8005036:	bf08      	it	eq
 8005038:	1aad      	subeq	r5, r5, r2
 800503a:	68a3      	ldr	r3, [r4, #8]
 800503c:	6922      	ldr	r2, [r4, #16]
 800503e:	bf0c      	ite	eq
 8005040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005044:	2500      	movne	r5, #0
 8005046:	4293      	cmp	r3, r2
 8005048:	bfc4      	itt	gt
 800504a:	1a9b      	subgt	r3, r3, r2
 800504c:	18ed      	addgt	r5, r5, r3
 800504e:	2600      	movs	r6, #0
 8005050:	341a      	adds	r4, #26
 8005052:	42b5      	cmp	r5, r6
 8005054:	d11a      	bne.n	800508c <_printf_common+0xc8>
 8005056:	2000      	movs	r0, #0
 8005058:	e008      	b.n	800506c <_printf_common+0xa8>
 800505a:	2301      	movs	r3, #1
 800505c:	4652      	mov	r2, sl
 800505e:	4649      	mov	r1, r9
 8005060:	4638      	mov	r0, r7
 8005062:	47c0      	blx	r8
 8005064:	3001      	adds	r0, #1
 8005066:	d103      	bne.n	8005070 <_printf_common+0xac>
 8005068:	f04f 30ff 	mov.w	r0, #4294967295
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	3501      	adds	r5, #1
 8005072:	e7c6      	b.n	8005002 <_printf_common+0x3e>
 8005074:	18e1      	adds	r1, r4, r3
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	2030      	movs	r0, #48	; 0x30
 800507a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800507e:	4422      	add	r2, r4
 8005080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005088:	3302      	adds	r3, #2
 800508a:	e7c7      	b.n	800501c <_printf_common+0x58>
 800508c:	2301      	movs	r3, #1
 800508e:	4622      	mov	r2, r4
 8005090:	4649      	mov	r1, r9
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	3001      	adds	r0, #1
 8005098:	d0e6      	beq.n	8005068 <_printf_common+0xa4>
 800509a:	3601      	adds	r6, #1
 800509c:	e7d9      	b.n	8005052 <_printf_common+0x8e>
	...

080050a0 <_printf_i>:
 80050a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	7e0f      	ldrb	r7, [r1, #24]
 80050a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050a8:	2f78      	cmp	r7, #120	; 0x78
 80050aa:	4691      	mov	r9, r2
 80050ac:	4680      	mov	r8, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	469a      	mov	sl, r3
 80050b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050b6:	d807      	bhi.n	80050c8 <_printf_i+0x28>
 80050b8:	2f62      	cmp	r7, #98	; 0x62
 80050ba:	d80a      	bhi.n	80050d2 <_printf_i+0x32>
 80050bc:	2f00      	cmp	r7, #0
 80050be:	f000 80d8 	beq.w	8005272 <_printf_i+0x1d2>
 80050c2:	2f58      	cmp	r7, #88	; 0x58
 80050c4:	f000 80a3 	beq.w	800520e <_printf_i+0x16e>
 80050c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050d0:	e03a      	b.n	8005148 <_printf_i+0xa8>
 80050d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050d6:	2b15      	cmp	r3, #21
 80050d8:	d8f6      	bhi.n	80050c8 <_printf_i+0x28>
 80050da:	a101      	add	r1, pc, #4	; (adr r1, 80050e0 <_printf_i+0x40>)
 80050dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050e0:	08005139 	.word	0x08005139
 80050e4:	0800514d 	.word	0x0800514d
 80050e8:	080050c9 	.word	0x080050c9
 80050ec:	080050c9 	.word	0x080050c9
 80050f0:	080050c9 	.word	0x080050c9
 80050f4:	080050c9 	.word	0x080050c9
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	080050c9 	.word	0x080050c9
 8005100:	080050c9 	.word	0x080050c9
 8005104:	080050c9 	.word	0x080050c9
 8005108:	080050c9 	.word	0x080050c9
 800510c:	08005259 	.word	0x08005259
 8005110:	0800517d 	.word	0x0800517d
 8005114:	0800523b 	.word	0x0800523b
 8005118:	080050c9 	.word	0x080050c9
 800511c:	080050c9 	.word	0x080050c9
 8005120:	0800527b 	.word	0x0800527b
 8005124:	080050c9 	.word	0x080050c9
 8005128:	0800517d 	.word	0x0800517d
 800512c:	080050c9 	.word	0x080050c9
 8005130:	080050c9 	.word	0x080050c9
 8005134:	08005243 	.word	0x08005243
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	1d1a      	adds	r2, r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	602a      	str	r2, [r5, #0]
 8005140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005148:	2301      	movs	r3, #1
 800514a:	e0a3      	b.n	8005294 <_printf_i+0x1f4>
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	6829      	ldr	r1, [r5, #0]
 8005150:	0606      	lsls	r6, r0, #24
 8005152:	f101 0304 	add.w	r3, r1, #4
 8005156:	d50a      	bpl.n	800516e <_printf_i+0xce>
 8005158:	680e      	ldr	r6, [r1, #0]
 800515a:	602b      	str	r3, [r5, #0]
 800515c:	2e00      	cmp	r6, #0
 800515e:	da03      	bge.n	8005168 <_printf_i+0xc8>
 8005160:	232d      	movs	r3, #45	; 0x2d
 8005162:	4276      	negs	r6, r6
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005168:	485e      	ldr	r0, [pc, #376]	; (80052e4 <_printf_i+0x244>)
 800516a:	230a      	movs	r3, #10
 800516c:	e019      	b.n	80051a2 <_printf_i+0x102>
 800516e:	680e      	ldr	r6, [r1, #0]
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005176:	bf18      	it	ne
 8005178:	b236      	sxthne	r6, r6
 800517a:	e7ef      	b.n	800515c <_printf_i+0xbc>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	6029      	str	r1, [r5, #0]
 8005184:	0601      	lsls	r1, r0, #24
 8005186:	d501      	bpl.n	800518c <_printf_i+0xec>
 8005188:	681e      	ldr	r6, [r3, #0]
 800518a:	e002      	b.n	8005192 <_printf_i+0xf2>
 800518c:	0646      	lsls	r6, r0, #25
 800518e:	d5fb      	bpl.n	8005188 <_printf_i+0xe8>
 8005190:	881e      	ldrh	r6, [r3, #0]
 8005192:	4854      	ldr	r0, [pc, #336]	; (80052e4 <_printf_i+0x244>)
 8005194:	2f6f      	cmp	r7, #111	; 0x6f
 8005196:	bf0c      	ite	eq
 8005198:	2308      	moveq	r3, #8
 800519a:	230a      	movne	r3, #10
 800519c:	2100      	movs	r1, #0
 800519e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051a2:	6865      	ldr	r5, [r4, #4]
 80051a4:	60a5      	str	r5, [r4, #8]
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	bfa2      	ittt	ge
 80051aa:	6821      	ldrge	r1, [r4, #0]
 80051ac:	f021 0104 	bicge.w	r1, r1, #4
 80051b0:	6021      	strge	r1, [r4, #0]
 80051b2:	b90e      	cbnz	r6, 80051b8 <_printf_i+0x118>
 80051b4:	2d00      	cmp	r5, #0
 80051b6:	d04d      	beq.n	8005254 <_printf_i+0x1b4>
 80051b8:	4615      	mov	r5, r2
 80051ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80051be:	fb03 6711 	mls	r7, r3, r1, r6
 80051c2:	5dc7      	ldrb	r7, [r0, r7]
 80051c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051c8:	4637      	mov	r7, r6
 80051ca:	42bb      	cmp	r3, r7
 80051cc:	460e      	mov	r6, r1
 80051ce:	d9f4      	bls.n	80051ba <_printf_i+0x11a>
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d10b      	bne.n	80051ec <_printf_i+0x14c>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	07de      	lsls	r6, r3, #31
 80051d8:	d508      	bpl.n	80051ec <_printf_i+0x14c>
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	6861      	ldr	r1, [r4, #4]
 80051de:	4299      	cmp	r1, r3
 80051e0:	bfde      	ittt	le
 80051e2:	2330      	movle	r3, #48	; 0x30
 80051e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051ec:	1b52      	subs	r2, r2, r5
 80051ee:	6122      	str	r2, [r4, #16]
 80051f0:	f8cd a000 	str.w	sl, [sp]
 80051f4:	464b      	mov	r3, r9
 80051f6:	aa03      	add	r2, sp, #12
 80051f8:	4621      	mov	r1, r4
 80051fa:	4640      	mov	r0, r8
 80051fc:	f7ff fee2 	bl	8004fc4 <_printf_common>
 8005200:	3001      	adds	r0, #1
 8005202:	d14c      	bne.n	800529e <_printf_i+0x1fe>
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	b004      	add	sp, #16
 800520a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520e:	4835      	ldr	r0, [pc, #212]	; (80052e4 <_printf_i+0x244>)
 8005210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005214:	6829      	ldr	r1, [r5, #0]
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	f851 6b04 	ldr.w	r6, [r1], #4
 800521c:	6029      	str	r1, [r5, #0]
 800521e:	061d      	lsls	r5, r3, #24
 8005220:	d514      	bpl.n	800524c <_printf_i+0x1ac>
 8005222:	07df      	lsls	r7, r3, #31
 8005224:	bf44      	itt	mi
 8005226:	f043 0320 	orrmi.w	r3, r3, #32
 800522a:	6023      	strmi	r3, [r4, #0]
 800522c:	b91e      	cbnz	r6, 8005236 <_printf_i+0x196>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	f023 0320 	bic.w	r3, r3, #32
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	2310      	movs	r3, #16
 8005238:	e7b0      	b.n	800519c <_printf_i+0xfc>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f043 0320 	orr.w	r3, r3, #32
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	2378      	movs	r3, #120	; 0x78
 8005244:	4828      	ldr	r0, [pc, #160]	; (80052e8 <_printf_i+0x248>)
 8005246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800524a:	e7e3      	b.n	8005214 <_printf_i+0x174>
 800524c:	0659      	lsls	r1, r3, #25
 800524e:	bf48      	it	mi
 8005250:	b2b6      	uxthmi	r6, r6
 8005252:	e7e6      	b.n	8005222 <_printf_i+0x182>
 8005254:	4615      	mov	r5, r2
 8005256:	e7bb      	b.n	80051d0 <_printf_i+0x130>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	6826      	ldr	r6, [r4, #0]
 800525c:	6961      	ldr	r1, [r4, #20]
 800525e:	1d18      	adds	r0, r3, #4
 8005260:	6028      	str	r0, [r5, #0]
 8005262:	0635      	lsls	r5, r6, #24
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	d501      	bpl.n	800526c <_printf_i+0x1cc>
 8005268:	6019      	str	r1, [r3, #0]
 800526a:	e002      	b.n	8005272 <_printf_i+0x1d2>
 800526c:	0670      	lsls	r0, r6, #25
 800526e:	d5fb      	bpl.n	8005268 <_printf_i+0x1c8>
 8005270:	8019      	strh	r1, [r3, #0]
 8005272:	2300      	movs	r3, #0
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	4615      	mov	r5, r2
 8005278:	e7ba      	b.n	80051f0 <_printf_i+0x150>
 800527a:	682b      	ldr	r3, [r5, #0]
 800527c:	1d1a      	adds	r2, r3, #4
 800527e:	602a      	str	r2, [r5, #0]
 8005280:	681d      	ldr	r5, [r3, #0]
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	2100      	movs	r1, #0
 8005286:	4628      	mov	r0, r5
 8005288:	f7fa ff7a 	bl	8000180 <memchr>
 800528c:	b108      	cbz	r0, 8005292 <_printf_i+0x1f2>
 800528e:	1b40      	subs	r0, r0, r5
 8005290:	6060      	str	r0, [r4, #4]
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	6123      	str	r3, [r4, #16]
 8005296:	2300      	movs	r3, #0
 8005298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529c:	e7a8      	b.n	80051f0 <_printf_i+0x150>
 800529e:	6923      	ldr	r3, [r4, #16]
 80052a0:	462a      	mov	r2, r5
 80052a2:	4649      	mov	r1, r9
 80052a4:	4640      	mov	r0, r8
 80052a6:	47d0      	blx	sl
 80052a8:	3001      	adds	r0, #1
 80052aa:	d0ab      	beq.n	8005204 <_printf_i+0x164>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	079b      	lsls	r3, r3, #30
 80052b0:	d413      	bmi.n	80052da <_printf_i+0x23a>
 80052b2:	68e0      	ldr	r0, [r4, #12]
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	4298      	cmp	r0, r3
 80052b8:	bfb8      	it	lt
 80052ba:	4618      	movlt	r0, r3
 80052bc:	e7a4      	b.n	8005208 <_printf_i+0x168>
 80052be:	2301      	movs	r3, #1
 80052c0:	4632      	mov	r2, r6
 80052c2:	4649      	mov	r1, r9
 80052c4:	4640      	mov	r0, r8
 80052c6:	47d0      	blx	sl
 80052c8:	3001      	adds	r0, #1
 80052ca:	d09b      	beq.n	8005204 <_printf_i+0x164>
 80052cc:	3501      	adds	r5, #1
 80052ce:	68e3      	ldr	r3, [r4, #12]
 80052d0:	9903      	ldr	r1, [sp, #12]
 80052d2:	1a5b      	subs	r3, r3, r1
 80052d4:	42ab      	cmp	r3, r5
 80052d6:	dcf2      	bgt.n	80052be <_printf_i+0x21e>
 80052d8:	e7eb      	b.n	80052b2 <_printf_i+0x212>
 80052da:	2500      	movs	r5, #0
 80052dc:	f104 0619 	add.w	r6, r4, #25
 80052e0:	e7f5      	b.n	80052ce <_printf_i+0x22e>
 80052e2:	bf00      	nop
 80052e4:	08005aa5 	.word	0x08005aa5
 80052e8:	08005ab6 	.word	0x08005ab6

080052ec <_sbrk_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d06      	ldr	r5, [pc, #24]	; (8005308 <_sbrk_r+0x1c>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	f7fb fe62 	bl	8000fc0 <_sbrk>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_sbrk_r+0x1a>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_sbrk_r+0x1a>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	20000474 	.word	0x20000474

0800530c <__sread>:
 800530c:	b510      	push	{r4, lr}
 800530e:	460c      	mov	r4, r1
 8005310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005314:	f000 fab2 	bl	800587c <_read_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	bfab      	itete	ge
 800531c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800531e:	89a3      	ldrhlt	r3, [r4, #12]
 8005320:	181b      	addge	r3, r3, r0
 8005322:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005326:	bfac      	ite	ge
 8005328:	6563      	strge	r3, [r4, #84]	; 0x54
 800532a:	81a3      	strhlt	r3, [r4, #12]
 800532c:	bd10      	pop	{r4, pc}

0800532e <__swrite>:
 800532e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005332:	461f      	mov	r7, r3
 8005334:	898b      	ldrh	r3, [r1, #12]
 8005336:	05db      	lsls	r3, r3, #23
 8005338:	4605      	mov	r5, r0
 800533a:	460c      	mov	r4, r1
 800533c:	4616      	mov	r6, r2
 800533e:	d505      	bpl.n	800534c <__swrite+0x1e>
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	2302      	movs	r3, #2
 8005346:	2200      	movs	r2, #0
 8005348:	f000 f9c8 	bl	80056dc <_lseek_r>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005356:	81a3      	strh	r3, [r4, #12]
 8005358:	4632      	mov	r2, r6
 800535a:	463b      	mov	r3, r7
 800535c:	4628      	mov	r0, r5
 800535e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	f000 b869 	b.w	8005438 <_write_r>

08005366 <__sseek>:
 8005366:	b510      	push	{r4, lr}
 8005368:	460c      	mov	r4, r1
 800536a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536e:	f000 f9b5 	bl	80056dc <_lseek_r>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	bf15      	itete	ne
 8005378:	6560      	strne	r0, [r4, #84]	; 0x54
 800537a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800537e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005382:	81a3      	strheq	r3, [r4, #12]
 8005384:	bf18      	it	ne
 8005386:	81a3      	strhne	r3, [r4, #12]
 8005388:	bd10      	pop	{r4, pc}

0800538a <__sclose>:
 800538a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538e:	f000 b8d3 	b.w	8005538 <_close_r>
	...

08005394 <__swbuf_r>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	460e      	mov	r6, r1
 8005398:	4614      	mov	r4, r2
 800539a:	4605      	mov	r5, r0
 800539c:	b118      	cbz	r0, 80053a6 <__swbuf_r+0x12>
 800539e:	6983      	ldr	r3, [r0, #24]
 80053a0:	b90b      	cbnz	r3, 80053a6 <__swbuf_r+0x12>
 80053a2:	f7ff fb81 	bl	8004aa8 <__sinit>
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <__swbuf_r+0x98>)
 80053a8:	429c      	cmp	r4, r3
 80053aa:	d12b      	bne.n	8005404 <__swbuf_r+0x70>
 80053ac:	686c      	ldr	r4, [r5, #4]
 80053ae:	69a3      	ldr	r3, [r4, #24]
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	071a      	lsls	r2, r3, #28
 80053b6:	d52f      	bpl.n	8005418 <__swbuf_r+0x84>
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	b36b      	cbz	r3, 8005418 <__swbuf_r+0x84>
 80053bc:	6923      	ldr	r3, [r4, #16]
 80053be:	6820      	ldr	r0, [r4, #0]
 80053c0:	1ac0      	subs	r0, r0, r3
 80053c2:	6963      	ldr	r3, [r4, #20]
 80053c4:	b2f6      	uxtb	r6, r6
 80053c6:	4283      	cmp	r3, r0
 80053c8:	4637      	mov	r7, r6
 80053ca:	dc04      	bgt.n	80053d6 <__swbuf_r+0x42>
 80053cc:	4621      	mov	r1, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 f948 	bl	8005664 <_fflush_r>
 80053d4:	bb30      	cbnz	r0, 8005424 <__swbuf_r+0x90>
 80053d6:	68a3      	ldr	r3, [r4, #8]
 80053d8:	3b01      	subs	r3, #1
 80053da:	60a3      	str	r3, [r4, #8]
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	6022      	str	r2, [r4, #0]
 80053e2:	701e      	strb	r6, [r3, #0]
 80053e4:	6963      	ldr	r3, [r4, #20]
 80053e6:	3001      	adds	r0, #1
 80053e8:	4283      	cmp	r3, r0
 80053ea:	d004      	beq.n	80053f6 <__swbuf_r+0x62>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	07db      	lsls	r3, r3, #31
 80053f0:	d506      	bpl.n	8005400 <__swbuf_r+0x6c>
 80053f2:	2e0a      	cmp	r6, #10
 80053f4:	d104      	bne.n	8005400 <__swbuf_r+0x6c>
 80053f6:	4621      	mov	r1, r4
 80053f8:	4628      	mov	r0, r5
 80053fa:	f000 f933 	bl	8005664 <_fflush_r>
 80053fe:	b988      	cbnz	r0, 8005424 <__swbuf_r+0x90>
 8005400:	4638      	mov	r0, r7
 8005402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <__swbuf_r+0x9c>)
 8005406:	429c      	cmp	r4, r3
 8005408:	d101      	bne.n	800540e <__swbuf_r+0x7a>
 800540a:	68ac      	ldr	r4, [r5, #8]
 800540c:	e7cf      	b.n	80053ae <__swbuf_r+0x1a>
 800540e:	4b09      	ldr	r3, [pc, #36]	; (8005434 <__swbuf_r+0xa0>)
 8005410:	429c      	cmp	r4, r3
 8005412:	bf08      	it	eq
 8005414:	68ec      	ldreq	r4, [r5, #12]
 8005416:	e7ca      	b.n	80053ae <__swbuf_r+0x1a>
 8005418:	4621      	mov	r1, r4
 800541a:	4628      	mov	r0, r5
 800541c:	f000 f81e 	bl	800545c <__swsetup_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	d0cb      	beq.n	80053bc <__swbuf_r+0x28>
 8005424:	f04f 37ff 	mov.w	r7, #4294967295
 8005428:	e7ea      	b.n	8005400 <__swbuf_r+0x6c>
 800542a:	bf00      	nop
 800542c:	08005a54 	.word	0x08005a54
 8005430:	08005a74 	.word	0x08005a74
 8005434:	08005a34 	.word	0x08005a34

08005438 <_write_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d07      	ldr	r5, [pc, #28]	; (8005458 <_write_r+0x20>)
 800543c:	4604      	mov	r4, r0
 800543e:	4608      	mov	r0, r1
 8005440:	4611      	mov	r1, r2
 8005442:	2200      	movs	r2, #0
 8005444:	602a      	str	r2, [r5, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	f7fb fd69 	bl	8000f1e <_write>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d102      	bne.n	8005456 <_write_r+0x1e>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	b103      	cbz	r3, 8005456 <_write_r+0x1e>
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	20000474 	.word	0x20000474

0800545c <__swsetup_r>:
 800545c:	4b32      	ldr	r3, [pc, #200]	; (8005528 <__swsetup_r+0xcc>)
 800545e:	b570      	push	{r4, r5, r6, lr}
 8005460:	681d      	ldr	r5, [r3, #0]
 8005462:	4606      	mov	r6, r0
 8005464:	460c      	mov	r4, r1
 8005466:	b125      	cbz	r5, 8005472 <__swsetup_r+0x16>
 8005468:	69ab      	ldr	r3, [r5, #24]
 800546a:	b913      	cbnz	r3, 8005472 <__swsetup_r+0x16>
 800546c:	4628      	mov	r0, r5
 800546e:	f7ff fb1b 	bl	8004aa8 <__sinit>
 8005472:	4b2e      	ldr	r3, [pc, #184]	; (800552c <__swsetup_r+0xd0>)
 8005474:	429c      	cmp	r4, r3
 8005476:	d10f      	bne.n	8005498 <__swsetup_r+0x3c>
 8005478:	686c      	ldr	r4, [r5, #4]
 800547a:	89a3      	ldrh	r3, [r4, #12]
 800547c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005480:	0719      	lsls	r1, r3, #28
 8005482:	d42c      	bmi.n	80054de <__swsetup_r+0x82>
 8005484:	06dd      	lsls	r5, r3, #27
 8005486:	d411      	bmi.n	80054ac <__swsetup_r+0x50>
 8005488:	2309      	movs	r3, #9
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005490:	81a3      	strh	r3, [r4, #12]
 8005492:	f04f 30ff 	mov.w	r0, #4294967295
 8005496:	e03e      	b.n	8005516 <__swsetup_r+0xba>
 8005498:	4b25      	ldr	r3, [pc, #148]	; (8005530 <__swsetup_r+0xd4>)
 800549a:	429c      	cmp	r4, r3
 800549c:	d101      	bne.n	80054a2 <__swsetup_r+0x46>
 800549e:	68ac      	ldr	r4, [r5, #8]
 80054a0:	e7eb      	b.n	800547a <__swsetup_r+0x1e>
 80054a2:	4b24      	ldr	r3, [pc, #144]	; (8005534 <__swsetup_r+0xd8>)
 80054a4:	429c      	cmp	r4, r3
 80054a6:	bf08      	it	eq
 80054a8:	68ec      	ldreq	r4, [r5, #12]
 80054aa:	e7e6      	b.n	800547a <__swsetup_r+0x1e>
 80054ac:	0758      	lsls	r0, r3, #29
 80054ae:	d512      	bpl.n	80054d6 <__swsetup_r+0x7a>
 80054b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054b2:	b141      	cbz	r1, 80054c6 <__swsetup_r+0x6a>
 80054b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054b8:	4299      	cmp	r1, r3
 80054ba:	d002      	beq.n	80054c2 <__swsetup_r+0x66>
 80054bc:	4630      	mov	r0, r6
 80054be:	f000 f991 	bl	80057e4 <_free_r>
 80054c2:	2300      	movs	r3, #0
 80054c4:	6363      	str	r3, [r4, #52]	; 0x34
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054cc:	81a3      	strh	r3, [r4, #12]
 80054ce:	2300      	movs	r3, #0
 80054d0:	6063      	str	r3, [r4, #4]
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f043 0308 	orr.w	r3, r3, #8
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	b94b      	cbnz	r3, 80054f6 <__swsetup_r+0x9a>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ec:	d003      	beq.n	80054f6 <__swsetup_r+0x9a>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4630      	mov	r0, r6
 80054f2:	f000 f92b 	bl	800574c <__smakebuf_r>
 80054f6:	89a0      	ldrh	r0, [r4, #12]
 80054f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054fc:	f010 0301 	ands.w	r3, r0, #1
 8005500:	d00a      	beq.n	8005518 <__swsetup_r+0xbc>
 8005502:	2300      	movs	r3, #0
 8005504:	60a3      	str	r3, [r4, #8]
 8005506:	6963      	ldr	r3, [r4, #20]
 8005508:	425b      	negs	r3, r3
 800550a:	61a3      	str	r3, [r4, #24]
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	b943      	cbnz	r3, 8005522 <__swsetup_r+0xc6>
 8005510:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005514:	d1ba      	bne.n	800548c <__swsetup_r+0x30>
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	0781      	lsls	r1, r0, #30
 800551a:	bf58      	it	pl
 800551c:	6963      	ldrpl	r3, [r4, #20]
 800551e:	60a3      	str	r3, [r4, #8]
 8005520:	e7f4      	b.n	800550c <__swsetup_r+0xb0>
 8005522:	2000      	movs	r0, #0
 8005524:	e7f7      	b.n	8005516 <__swsetup_r+0xba>
 8005526:	bf00      	nop
 8005528:	2000001c 	.word	0x2000001c
 800552c:	08005a54 	.word	0x08005a54
 8005530:	08005a74 	.word	0x08005a74
 8005534:	08005a34 	.word	0x08005a34

08005538 <_close_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	; (8005554 <_close_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb fd07 	bl	8000f56 <_close>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_close_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_close_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000474 	.word	0x20000474

08005558 <__sflush_r>:
 8005558:	898a      	ldrh	r2, [r1, #12]
 800555a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555e:	4605      	mov	r5, r0
 8005560:	0710      	lsls	r0, r2, #28
 8005562:	460c      	mov	r4, r1
 8005564:	d458      	bmi.n	8005618 <__sflush_r+0xc0>
 8005566:	684b      	ldr	r3, [r1, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dc05      	bgt.n	8005578 <__sflush_r+0x20>
 800556c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	dc02      	bgt.n	8005578 <__sflush_r+0x20>
 8005572:	2000      	movs	r0, #0
 8005574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800557a:	2e00      	cmp	r6, #0
 800557c:	d0f9      	beq.n	8005572 <__sflush_r+0x1a>
 800557e:	2300      	movs	r3, #0
 8005580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005584:	682f      	ldr	r7, [r5, #0]
 8005586:	602b      	str	r3, [r5, #0]
 8005588:	d032      	beq.n	80055f0 <__sflush_r+0x98>
 800558a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	075a      	lsls	r2, r3, #29
 8005590:	d505      	bpl.n	800559e <__sflush_r+0x46>
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	1ac0      	subs	r0, r0, r3
 8005596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005598:	b10b      	cbz	r3, 800559e <__sflush_r+0x46>
 800559a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800559c:	1ac0      	subs	r0, r0, r3
 800559e:	2300      	movs	r3, #0
 80055a0:	4602      	mov	r2, r0
 80055a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055a4:	6a21      	ldr	r1, [r4, #32]
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b0      	blx	r6
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	d106      	bne.n	80055be <__sflush_r+0x66>
 80055b0:	6829      	ldr	r1, [r5, #0]
 80055b2:	291d      	cmp	r1, #29
 80055b4:	d82c      	bhi.n	8005610 <__sflush_r+0xb8>
 80055b6:	4a2a      	ldr	r2, [pc, #168]	; (8005660 <__sflush_r+0x108>)
 80055b8:	40ca      	lsrs	r2, r1
 80055ba:	07d6      	lsls	r6, r2, #31
 80055bc:	d528      	bpl.n	8005610 <__sflush_r+0xb8>
 80055be:	2200      	movs	r2, #0
 80055c0:	6062      	str	r2, [r4, #4]
 80055c2:	04d9      	lsls	r1, r3, #19
 80055c4:	6922      	ldr	r2, [r4, #16]
 80055c6:	6022      	str	r2, [r4, #0]
 80055c8:	d504      	bpl.n	80055d4 <__sflush_r+0x7c>
 80055ca:	1c42      	adds	r2, r0, #1
 80055cc:	d101      	bne.n	80055d2 <__sflush_r+0x7a>
 80055ce:	682b      	ldr	r3, [r5, #0]
 80055d0:	b903      	cbnz	r3, 80055d4 <__sflush_r+0x7c>
 80055d2:	6560      	str	r0, [r4, #84]	; 0x54
 80055d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055d6:	602f      	str	r7, [r5, #0]
 80055d8:	2900      	cmp	r1, #0
 80055da:	d0ca      	beq.n	8005572 <__sflush_r+0x1a>
 80055dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055e0:	4299      	cmp	r1, r3
 80055e2:	d002      	beq.n	80055ea <__sflush_r+0x92>
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 f8fd 	bl	80057e4 <_free_r>
 80055ea:	2000      	movs	r0, #0
 80055ec:	6360      	str	r0, [r4, #52]	; 0x34
 80055ee:	e7c1      	b.n	8005574 <__sflush_r+0x1c>
 80055f0:	6a21      	ldr	r1, [r4, #32]
 80055f2:	2301      	movs	r3, #1
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b0      	blx	r6
 80055f8:	1c41      	adds	r1, r0, #1
 80055fa:	d1c7      	bne.n	800558c <__sflush_r+0x34>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0c4      	beq.n	800558c <__sflush_r+0x34>
 8005602:	2b1d      	cmp	r3, #29
 8005604:	d001      	beq.n	800560a <__sflush_r+0xb2>
 8005606:	2b16      	cmp	r3, #22
 8005608:	d101      	bne.n	800560e <__sflush_r+0xb6>
 800560a:	602f      	str	r7, [r5, #0]
 800560c:	e7b1      	b.n	8005572 <__sflush_r+0x1a>
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005614:	81a3      	strh	r3, [r4, #12]
 8005616:	e7ad      	b.n	8005574 <__sflush_r+0x1c>
 8005618:	690f      	ldr	r7, [r1, #16]
 800561a:	2f00      	cmp	r7, #0
 800561c:	d0a9      	beq.n	8005572 <__sflush_r+0x1a>
 800561e:	0793      	lsls	r3, r2, #30
 8005620:	680e      	ldr	r6, [r1, #0]
 8005622:	bf08      	it	eq
 8005624:	694b      	ldreq	r3, [r1, #20]
 8005626:	600f      	str	r7, [r1, #0]
 8005628:	bf18      	it	ne
 800562a:	2300      	movne	r3, #0
 800562c:	eba6 0807 	sub.w	r8, r6, r7
 8005630:	608b      	str	r3, [r1, #8]
 8005632:	f1b8 0f00 	cmp.w	r8, #0
 8005636:	dd9c      	ble.n	8005572 <__sflush_r+0x1a>
 8005638:	6a21      	ldr	r1, [r4, #32]
 800563a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800563c:	4643      	mov	r3, r8
 800563e:	463a      	mov	r2, r7
 8005640:	4628      	mov	r0, r5
 8005642:	47b0      	blx	r6
 8005644:	2800      	cmp	r0, #0
 8005646:	dc06      	bgt.n	8005656 <__sflush_r+0xfe>
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	e78e      	b.n	8005574 <__sflush_r+0x1c>
 8005656:	4407      	add	r7, r0
 8005658:	eba8 0800 	sub.w	r8, r8, r0
 800565c:	e7e9      	b.n	8005632 <__sflush_r+0xda>
 800565e:	bf00      	nop
 8005660:	20400001 	.word	0x20400001

08005664 <_fflush_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	690b      	ldr	r3, [r1, #16]
 8005668:	4605      	mov	r5, r0
 800566a:	460c      	mov	r4, r1
 800566c:	b913      	cbnz	r3, 8005674 <_fflush_r+0x10>
 800566e:	2500      	movs	r5, #0
 8005670:	4628      	mov	r0, r5
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	b118      	cbz	r0, 800567e <_fflush_r+0x1a>
 8005676:	6983      	ldr	r3, [r0, #24]
 8005678:	b90b      	cbnz	r3, 800567e <_fflush_r+0x1a>
 800567a:	f7ff fa15 	bl	8004aa8 <__sinit>
 800567e:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <_fflush_r+0x6c>)
 8005680:	429c      	cmp	r4, r3
 8005682:	d11b      	bne.n	80056bc <_fflush_r+0x58>
 8005684:	686c      	ldr	r4, [r5, #4]
 8005686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0ef      	beq.n	800566e <_fflush_r+0xa>
 800568e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005690:	07d0      	lsls	r0, r2, #31
 8005692:	d404      	bmi.n	800569e <_fflush_r+0x3a>
 8005694:	0599      	lsls	r1, r3, #22
 8005696:	d402      	bmi.n	800569e <_fflush_r+0x3a>
 8005698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800569a:	f7ff faa3 	bl	8004be4 <__retarget_lock_acquire_recursive>
 800569e:	4628      	mov	r0, r5
 80056a0:	4621      	mov	r1, r4
 80056a2:	f7ff ff59 	bl	8005558 <__sflush_r>
 80056a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056a8:	07da      	lsls	r2, r3, #31
 80056aa:	4605      	mov	r5, r0
 80056ac:	d4e0      	bmi.n	8005670 <_fflush_r+0xc>
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	059b      	lsls	r3, r3, #22
 80056b2:	d4dd      	bmi.n	8005670 <_fflush_r+0xc>
 80056b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056b6:	f7ff fa96 	bl	8004be6 <__retarget_lock_release_recursive>
 80056ba:	e7d9      	b.n	8005670 <_fflush_r+0xc>
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <_fflush_r+0x70>)
 80056be:	429c      	cmp	r4, r3
 80056c0:	d101      	bne.n	80056c6 <_fflush_r+0x62>
 80056c2:	68ac      	ldr	r4, [r5, #8]
 80056c4:	e7df      	b.n	8005686 <_fflush_r+0x22>
 80056c6:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <_fflush_r+0x74>)
 80056c8:	429c      	cmp	r4, r3
 80056ca:	bf08      	it	eq
 80056cc:	68ec      	ldreq	r4, [r5, #12]
 80056ce:	e7da      	b.n	8005686 <_fflush_r+0x22>
 80056d0:	08005a54 	.word	0x08005a54
 80056d4:	08005a74 	.word	0x08005a74
 80056d8:	08005a34 	.word	0x08005a34

080056dc <_lseek_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d07      	ldr	r5, [pc, #28]	; (80056fc <_lseek_r+0x20>)
 80056e0:	4604      	mov	r4, r0
 80056e2:	4608      	mov	r0, r1
 80056e4:	4611      	mov	r1, r2
 80056e6:	2200      	movs	r2, #0
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f7fb fc5a 	bl	8000fa4 <_lseek>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_lseek_r+0x1e>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_lseek_r+0x1e>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20000474 	.word	0x20000474

08005700 <__swhatbuf_r>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	460e      	mov	r6, r1
 8005704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005708:	2900      	cmp	r1, #0
 800570a:	b096      	sub	sp, #88	; 0x58
 800570c:	4614      	mov	r4, r2
 800570e:	461d      	mov	r5, r3
 8005710:	da08      	bge.n	8005724 <__swhatbuf_r+0x24>
 8005712:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	602a      	str	r2, [r5, #0]
 800571a:	061a      	lsls	r2, r3, #24
 800571c:	d410      	bmi.n	8005740 <__swhatbuf_r+0x40>
 800571e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005722:	e00e      	b.n	8005742 <__swhatbuf_r+0x42>
 8005724:	466a      	mov	r2, sp
 8005726:	f000 f8bb 	bl	80058a0 <_fstat_r>
 800572a:	2800      	cmp	r0, #0
 800572c:	dbf1      	blt.n	8005712 <__swhatbuf_r+0x12>
 800572e:	9a01      	ldr	r2, [sp, #4]
 8005730:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005734:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005738:	425a      	negs	r2, r3
 800573a:	415a      	adcs	r2, r3
 800573c:	602a      	str	r2, [r5, #0]
 800573e:	e7ee      	b.n	800571e <__swhatbuf_r+0x1e>
 8005740:	2340      	movs	r3, #64	; 0x40
 8005742:	2000      	movs	r0, #0
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	b016      	add	sp, #88	; 0x58
 8005748:	bd70      	pop	{r4, r5, r6, pc}
	...

0800574c <__smakebuf_r>:
 800574c:	898b      	ldrh	r3, [r1, #12]
 800574e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005750:	079d      	lsls	r5, r3, #30
 8005752:	4606      	mov	r6, r0
 8005754:	460c      	mov	r4, r1
 8005756:	d507      	bpl.n	8005768 <__smakebuf_r+0x1c>
 8005758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800575c:	6023      	str	r3, [r4, #0]
 800575e:	6123      	str	r3, [r4, #16]
 8005760:	2301      	movs	r3, #1
 8005762:	6163      	str	r3, [r4, #20]
 8005764:	b002      	add	sp, #8
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	ab01      	add	r3, sp, #4
 800576a:	466a      	mov	r2, sp
 800576c:	f7ff ffc8 	bl	8005700 <__swhatbuf_r>
 8005770:	9900      	ldr	r1, [sp, #0]
 8005772:	4605      	mov	r5, r0
 8005774:	4630      	mov	r0, r6
 8005776:	f7ff fa57 	bl	8004c28 <_malloc_r>
 800577a:	b948      	cbnz	r0, 8005790 <__smakebuf_r+0x44>
 800577c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005780:	059a      	lsls	r2, r3, #22
 8005782:	d4ef      	bmi.n	8005764 <__smakebuf_r+0x18>
 8005784:	f023 0303 	bic.w	r3, r3, #3
 8005788:	f043 0302 	orr.w	r3, r3, #2
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	e7e3      	b.n	8005758 <__smakebuf_r+0xc>
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <__smakebuf_r+0x7c>)
 8005792:	62b3      	str	r3, [r6, #40]	; 0x28
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	6020      	str	r0, [r4, #0]
 8005798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579c:	81a3      	strh	r3, [r4, #12]
 800579e:	9b00      	ldr	r3, [sp, #0]
 80057a0:	6163      	str	r3, [r4, #20]
 80057a2:	9b01      	ldr	r3, [sp, #4]
 80057a4:	6120      	str	r0, [r4, #16]
 80057a6:	b15b      	cbz	r3, 80057c0 <__smakebuf_r+0x74>
 80057a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 f889 	bl	80058c4 <_isatty_r>
 80057b2:	b128      	cbz	r0, 80057c0 <__smakebuf_r+0x74>
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	81a3      	strh	r3, [r4, #12]
 80057c0:	89a0      	ldrh	r0, [r4, #12]
 80057c2:	4305      	orrs	r5, r0
 80057c4:	81a5      	strh	r5, [r4, #12]
 80057c6:	e7cd      	b.n	8005764 <__smakebuf_r+0x18>
 80057c8:	08004a41 	.word	0x08004a41

080057cc <__malloc_lock>:
 80057cc:	4801      	ldr	r0, [pc, #4]	; (80057d4 <__malloc_lock+0x8>)
 80057ce:	f7ff ba09 	b.w	8004be4 <__retarget_lock_acquire_recursive>
 80057d2:	bf00      	nop
 80057d4:	20000468 	.word	0x20000468

080057d8 <__malloc_unlock>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__malloc_unlock+0x8>)
 80057da:	f7ff ba04 	b.w	8004be6 <__retarget_lock_release_recursive>
 80057de:	bf00      	nop
 80057e0:	20000468 	.word	0x20000468

080057e4 <_free_r>:
 80057e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057e6:	2900      	cmp	r1, #0
 80057e8:	d044      	beq.n	8005874 <_free_r+0x90>
 80057ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ee:	9001      	str	r0, [sp, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f1a1 0404 	sub.w	r4, r1, #4
 80057f6:	bfb8      	it	lt
 80057f8:	18e4      	addlt	r4, r4, r3
 80057fa:	f7ff ffe7 	bl	80057cc <__malloc_lock>
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <_free_r+0x94>)
 8005800:	9801      	ldr	r0, [sp, #4]
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	b933      	cbnz	r3, 8005814 <_free_r+0x30>
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	6014      	str	r4, [r2, #0]
 800580a:	b003      	add	sp, #12
 800580c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005810:	f7ff bfe2 	b.w	80057d8 <__malloc_unlock>
 8005814:	42a3      	cmp	r3, r4
 8005816:	d908      	bls.n	800582a <_free_r+0x46>
 8005818:	6825      	ldr	r5, [r4, #0]
 800581a:	1961      	adds	r1, r4, r5
 800581c:	428b      	cmp	r3, r1
 800581e:	bf01      	itttt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	1949      	addeq	r1, r1, r5
 8005826:	6021      	streq	r1, [r4, #0]
 8005828:	e7ed      	b.n	8005806 <_free_r+0x22>
 800582a:	461a      	mov	r2, r3
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	b10b      	cbz	r3, 8005834 <_free_r+0x50>
 8005830:	42a3      	cmp	r3, r4
 8005832:	d9fa      	bls.n	800582a <_free_r+0x46>
 8005834:	6811      	ldr	r1, [r2, #0]
 8005836:	1855      	adds	r5, r2, r1
 8005838:	42a5      	cmp	r5, r4
 800583a:	d10b      	bne.n	8005854 <_free_r+0x70>
 800583c:	6824      	ldr	r4, [r4, #0]
 800583e:	4421      	add	r1, r4
 8005840:	1854      	adds	r4, r2, r1
 8005842:	42a3      	cmp	r3, r4
 8005844:	6011      	str	r1, [r2, #0]
 8005846:	d1e0      	bne.n	800580a <_free_r+0x26>
 8005848:	681c      	ldr	r4, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	6053      	str	r3, [r2, #4]
 800584e:	4421      	add	r1, r4
 8005850:	6011      	str	r1, [r2, #0]
 8005852:	e7da      	b.n	800580a <_free_r+0x26>
 8005854:	d902      	bls.n	800585c <_free_r+0x78>
 8005856:	230c      	movs	r3, #12
 8005858:	6003      	str	r3, [r0, #0]
 800585a:	e7d6      	b.n	800580a <_free_r+0x26>
 800585c:	6825      	ldr	r5, [r4, #0]
 800585e:	1961      	adds	r1, r4, r5
 8005860:	428b      	cmp	r3, r1
 8005862:	bf04      	itt	eq
 8005864:	6819      	ldreq	r1, [r3, #0]
 8005866:	685b      	ldreq	r3, [r3, #4]
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	bf04      	itt	eq
 800586c:	1949      	addeq	r1, r1, r5
 800586e:	6021      	streq	r1, [r4, #0]
 8005870:	6054      	str	r4, [r2, #4]
 8005872:	e7ca      	b.n	800580a <_free_r+0x26>
 8005874:	b003      	add	sp, #12
 8005876:	bd30      	pop	{r4, r5, pc}
 8005878:	2000046c 	.word	0x2000046c

0800587c <_read_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d07      	ldr	r5, [pc, #28]	; (800589c <_read_r+0x20>)
 8005880:	4604      	mov	r4, r0
 8005882:	4608      	mov	r0, r1
 8005884:	4611      	mov	r1, r2
 8005886:	2200      	movs	r2, #0
 8005888:	602a      	str	r2, [r5, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	f7fb fb2a 	bl	8000ee4 <_read>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_read_r+0x1e>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_read_r+0x1e>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	20000474 	.word	0x20000474

080058a0 <_fstat_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d07      	ldr	r5, [pc, #28]	; (80058c0 <_fstat_r+0x20>)
 80058a4:	2300      	movs	r3, #0
 80058a6:	4604      	mov	r4, r0
 80058a8:	4608      	mov	r0, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	602b      	str	r3, [r5, #0]
 80058ae:	f7fb fb5e 	bl	8000f6e <_fstat>
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	d102      	bne.n	80058bc <_fstat_r+0x1c>
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	b103      	cbz	r3, 80058bc <_fstat_r+0x1c>
 80058ba:	6023      	str	r3, [r4, #0]
 80058bc:	bd38      	pop	{r3, r4, r5, pc}
 80058be:	bf00      	nop
 80058c0:	20000474 	.word	0x20000474

080058c4 <_isatty_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d06      	ldr	r5, [pc, #24]	; (80058e0 <_isatty_r+0x1c>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	4604      	mov	r4, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	f7fb fb5d 	bl	8000f8e <_isatty>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_isatty_r+0x1a>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_isatty_r+0x1a>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	20000474 	.word	0x20000474

080058e4 <_init>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	bf00      	nop
 80058e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ea:	bc08      	pop	{r3}
 80058ec:	469e      	mov	lr, r3
 80058ee:	4770      	bx	lr

080058f0 <_fini>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr
