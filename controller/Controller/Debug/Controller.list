
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004220  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  08004460  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000400  20000014  0800446c  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000414  0800446c  00020414  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000192c2  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ca8  00000000  00000000  00039306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019a0  00000000  00000000  0003bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018a8  00000000  00000000  0003d950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000221a7  00000000  00000000  0003f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016cba  00000000  00000000  0006139f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000df860  00000000  00000000  00078059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001578b9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006dac  00000000  00000000  0015790c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08004344 	.word	0x08004344

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08004344 	.word	0x08004344

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468e      	mov	lr, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14d      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4694      	mov	ip, r2
 80001be:	d969      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b152      	cbz	r2, 80001dc <__udivmoddi4+0x30>
 80001c6:	fa01 f302 	lsl.w	r3, r1, r2
 80001ca:	f1c2 0120 	rsb	r1, r2, #32
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d6:	ea41 0e03 	orr.w	lr, r1, r3
 80001da:	4094      	lsls	r4, r2
 80001dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e0:	0c21      	lsrs	r1, r4, #16
 80001e2:	fbbe f6f8 	udiv	r6, lr, r8
 80001e6:	fa1f f78c 	uxth.w	r7, ip
 80001ea:	fb08 e316 	mls	r3, r8, r6, lr
 80001ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f2:	fb06 f107 	mul.w	r1, r6, r7
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000202:	f080 811f 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 811c 	bls.w	8000444 <__udivmoddi4+0x298>
 800020c:	3e02      	subs	r6, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f8 	udiv	r0, r3, r8
 8000218:	fb08 3310 	mls	r3, r8, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x92>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 810a 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8107 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000242:	1be4      	subs	r4, r4, r7
 8000244:	2600      	movs	r6, #0
 8000246:	b11d      	cbz	r5, 8000250 <__udivmoddi4+0xa4>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c5 4300 	strd	r4, r3, [r5]
 8000250:	4631      	mov	r1, r6
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xc2>
 800025a:	2d00      	cmp	r5, #0
 800025c:	f000 80ef 	beq.w	800043e <__udivmoddi4+0x292>
 8000260:	2600      	movs	r6, #0
 8000262:	e9c5 0100 	strd	r0, r1, [r5]
 8000266:	4630      	mov	r0, r6
 8000268:	4631      	mov	r1, r6
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f683 	clz	r6, r3
 8000272:	2e00      	cmp	r6, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80f9 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	469e      	mov	lr, r3
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa4>
 800028e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa4>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8092 	bne.w	80003c6 <__udivmoddi4+0x21a>
 80002a2:	eba1 010c 	sub.w	r1, r1, ip
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	2601      	movs	r6, #1
 80002b0:	0c20      	lsrs	r0, r4, #16
 80002b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80002b6:	fb07 1113 	mls	r1, r7, r3, r1
 80002ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	4288      	cmp	r0, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0101 	adds.w	r1, ip, r1
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	4288      	cmp	r0, r1
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2c0>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a09      	subs	r1, r1, r0
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e0:	fb07 1110 	mls	r1, r7, r0, r1
 80002e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002e8:	fb0e fe00 	mul.w	lr, lr, r0
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80bb 	bhi.w	8000476 <__udivmoddi4+0x2ca>
 8000300:	4608      	mov	r0, r1
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79c      	b.n	8000246 <__udivmoddi4+0x9a>
 800030c:	f1c6 0720 	rsb	r7, r6, #32
 8000310:	40b3      	lsls	r3, r6
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa20 f407 	lsr.w	r4, r0, r7
 800031e:	fa01 f306 	lsl.w	r3, r1, r6
 8000322:	431c      	orrs	r4, r3
 8000324:	40f9      	lsrs	r1, r7
 8000326:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032a:	fa00 f306 	lsl.w	r3, r0, r6
 800032e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000332:	0c20      	lsrs	r0, r4, #16
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	fb09 1118 	mls	r1, r9, r8, r1
 800033c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000340:	fb08 f00e 	mul.w	r0, r8, lr
 8000344:	4288      	cmp	r0, r1
 8000346:	fa02 f206 	lsl.w	r2, r2, r6
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0101 	adds.w	r1, ip, r1
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	4288      	cmp	r0, r1
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4461      	add	r1, ip
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f9 	udiv	r0, r1, r9
 800036c:	fb09 1110 	mls	r1, r9, r0, r1
 8000370:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000374:	fb00 fe0e 	mul.w	lr, r0, lr
 8000378:	458e      	cmp	lr, r1
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0101 	adds.w	r1, ip, r1
 8000380:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	458e      	cmp	lr, r1
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4461      	add	r1, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9402 	umull	r9, r4, r0, r2
 8000396:	eba1 010e 	sub.w	r1, r1, lr
 800039a:	42a1      	cmp	r1, r4
 800039c:	46c8      	mov	r8, r9
 800039e:	46a6      	mov	lr, r4
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	b15d      	cbz	r5, 80003be <__udivmoddi4+0x212>
 80003a6:	ebb3 0208 	subs.w	r2, r3, r8
 80003aa:	eb61 010e 	sbc.w	r1, r1, lr
 80003ae:	fa01 f707 	lsl.w	r7, r1, r7
 80003b2:	fa22 f306 	lsr.w	r3, r2, r6
 80003b6:	40f1      	lsrs	r1, r6
 80003b8:	431f      	orrs	r7, r3
 80003ba:	e9c5 7100 	strd	r7, r1, [r5]
 80003be:	2600      	movs	r6, #0
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c2 0320 	rsb	r3, r2, #32
 80003ca:	40d8      	lsrs	r0, r3
 80003cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d0:	fa21 f303 	lsr.w	r3, r1, r3
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4301      	orrs	r1, r0
 80003d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e4:	fb07 3610 	mls	r6, r7, r0, r3
 80003e8:	0c0b      	lsrs	r3, r1, #16
 80003ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003ee:	fb00 f60e 	mul.w	r6, r0, lr
 80003f2:	429e      	cmp	r6, r3
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	429e      	cmp	r6, r3
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3802      	subs	r0, #2
 800040a:	4463      	add	r3, ip
 800040c:	1b9b      	subs	r3, r3, r6
 800040e:	b289      	uxth	r1, r1
 8000410:	fbb3 f6f7 	udiv	r6, r3, r7
 8000414:	fb07 3316 	mls	r3, r7, r6, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb06 f30e 	mul.w	r3, r6, lr
 8000420:	428b      	cmp	r3, r1
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0101 	adds.w	r1, ip, r1
 8000428:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	428b      	cmp	r3, r1
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3e02      	subs	r6, #2
 8000434:	4461      	add	r1, ip
 8000436:	1ac9      	subs	r1, r1, r3
 8000438:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e705      	b.n	8000250 <__udivmoddi4+0xa4>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e3      	b.n	8000210 <__udivmoddi4+0x64>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f8      	b.n	800023e <__udivmoddi4+0x92>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4646      	mov	r6, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4620      	mov	r0, r4
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4640      	mov	r0, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	3b02      	subs	r3, #2
 800046e:	4461      	add	r1, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000472:	4630      	mov	r0, r6
 8000474:	e709      	b.n	800028a <__udivmoddi4+0xde>
 8000476:	4464      	add	r4, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e742      	b.n	8000302 <__udivmoddi4+0x156>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f023 0218 	bic.w	r2, r3, #24
 8000494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fbae 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f81c 	bl	8000524 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004ec:	f000 f890 	bl	8000610 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f96e 	bl	80007d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f8f8 	bl	80006e8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004f8:	f000 f942 	bl	8000780 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80004fc:	f000 f8a6 	bl	800064c <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_UART_Receive(&huart1,rx_buff, 10, 1000) == HAL_OK){
 8000500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000504:	220a      	movs	r2, #10
 8000506:	4905      	ldr	r1, [pc, #20]	; (800051c <main+0x3c>)
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <main+0x40>)
 800050a:	f003 f8a7 	bl	800365c <HAL_UART_Receive>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d100      	bne.n	8000516 <main+0x36>
		  __NOP();
 8000514:	bf00      	nop
	  }
	  __NOP();
 8000516:	bf00      	nop
	  if(HAL_UART_Receive(&huart1,rx_buff, 10, 1000) == HAL_OK){
 8000518:	e7f2      	b.n	8000500 <main+0x20>
 800051a:	bf00      	nop
 800051c:	20000404 	.word	0x20000404
 8000520:	2000007c 	.word	0x2000007c

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b09a      	sub	sp, #104	; 0x68
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2248      	movs	r2, #72	; 0x48
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fefe 	bl	8004334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800054a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000558:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800055a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	f023 0303 	bic.w	r3, r3, #3
 8000564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800056e:	f000 ffa3 	bl	80014b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ff84 	bl	8000480 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <SystemClock_Config+0xe8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000580:	4a22      	ldr	r2, [pc, #136]	; (800060c <SystemClock_Config+0xe8>)
 8000582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <SystemClock_Config+0xe8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000594:	2327      	movs	r3, #39	; 0x27
 8000596:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800059e:	2301      	movs	r3, #1
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2340      	movs	r3, #64	; 0x40
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b4:	2360      	movs	r3, #96	; 0x60
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fb0d 	bl	8001be0 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005cc:	f000 f979 	bl	80008c2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005d0:	236f      	movs	r3, #111	; 0x6f
 80005d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005d4:	2302      	movs	r3, #2
 80005d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fe69 	bl	80022c8 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005fc:	f000 f961 	bl	80008c2 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000600:	f002 fc24 	bl	8002e4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000604:	bf00      	nop
 8000606:	3768      	adds	r7, #104	; 0x68
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	58000400 	.word	0x58000400

08000610 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2250      	movs	r2, #80	; 0x50
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fe89 	bl	8004334 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000626:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800062c:	2300      	movs	r3, #0
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fa94 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800063e:	f000 f940 	bl	80008c2 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_TIM2_Init+0x98>)
 800066c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000670:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_TIM2_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_TIM2_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_TIM2_Init+0x98>)
 8000680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_TIM2_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_TIM2_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000692:	4814      	ldr	r0, [pc, #80]	; (80006e4 <MX_TIM2_Init+0x98>)
 8000694:	f002 fcf1 	bl	800307a <HAL_TIM_Base_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800069e:	f000 f910 	bl	80008c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	480d      	ldr	r0, [pc, #52]	; (80006e4 <MX_TIM2_Init+0x98>)
 80006b0:	f002 fd3a 	bl	8003128 <HAL_TIM_ConfigClockSource>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006ba:	f000 f902 	bl	80008c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <MX_TIM2_Init+0x98>)
 80006cc:	f002 fef6 	bl	80034bc <HAL_TIMEx_MasterConfigSynchronization>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006d6:	f000 f8f4 	bl	80008c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000030 	.word	0x20000030

080006e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <MX_USART1_UART_Init+0x90>)
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <MX_USART1_UART_Init+0x94>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_USART1_UART_Init+0x90>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_USART1_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_USART1_UART_Init+0x90>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_USART1_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_USART1_UART_Init+0x90>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_USART1_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_USART1_UART_Init+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_USART1_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_USART1_UART_Init+0x90>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_USART1_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000730:	4811      	ldr	r0, [pc, #68]	; (8000778 <MX_USART1_UART_Init+0x90>)
 8000732:	f002 ff43 	bl	80035bc <HAL_UART_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800073c:	f000 f8c1 	bl	80008c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_USART1_UART_Init+0x90>)
 8000744:	f003 fccc 	bl	80040e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800074e:	f000 f8b8 	bl	80008c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4808      	ldr	r0, [pc, #32]	; (8000778 <MX_USART1_UART_Init+0x90>)
 8000756:	f003 fd01 	bl	800415c <HAL_UARTEx_SetRxFifoThreshold>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000760:	f000 f8af 	bl	80008c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_USART1_UART_Init+0x90>)
 8000766:	f003 fc82 	bl	800406e <HAL_UARTEx_DisableFifoMode>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000770:	f000 f8a7 	bl	80008c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000007c 	.word	0x2000007c
 800077c:	40013800 	.word	0x40013800

08000780 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USB_PCD_Init+0x48>)
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <MX_USB_PCD_Init+0x4c>)
 8000788:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USB_PCD_Init+0x48>)
 800078c:	2208      	movs	r2, #8
 800078e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_USB_PCD_Init+0x48>)
 8000792:	2202      	movs	r2, #2
 8000794:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USB_PCD_Init+0x48>)
 8000798:	2202      	movs	r2, #2
 800079a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_USB_PCD_Init+0x48>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USB_PCD_Init+0x48>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_USB_PCD_Init+0x48>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USB_PCD_Init+0x48>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_USB_PCD_Init+0x48>)
 80007b6:	f000 fd7b 	bl	80012b0 <HAL_PCD_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007c0:	f000 f87f 	bl	80008c2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000110 	.word	0x20000110
 80007cc:	40006800 	.word	0x40006800

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e4:	2004      	movs	r0, #4
 80007e6:	f7ff fe61 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff fe5e 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	2002      	movs	r0, #2
 80007f2:	f7ff fe5b 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2008      	movs	r0, #8
 80007f8:	f7ff fe58 	bl	80004ac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupter_GPIO_Port, Interrupter_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2102      	movs	r1, #2
 8000800:	4827      	ldr	r0, [pc, #156]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000802:	f000 fd25 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2123      	movs	r1, #35	; 0x23
 800080a:	4826      	ldr	r0, [pc, #152]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800080c:	f000 fd20 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_INPUT_Pin */
  GPIO_InitStruct.Pin = TEST_INPUT_Pin;
 8000810:	2301      	movs	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000814:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800081a:	2302      	movs	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEST_INPUT_GPIO_Port, &GPIO_InitStruct);
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	481f      	ldr	r0, [pc, #124]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000824:	f000 fba4 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupter_Pin */
  GPIO_InitStruct.Pin = Interrupter_Pin;
 8000828:	2302      	movs	r3, #2
 800082a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000830:	2302      	movs	r3, #2
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Interrupter_GPIO_Port, &GPIO_InitStruct);
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_GPIO_Init+0xd0>)
 800083e:	f000 fb97 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	2310      	movs	r3, #16
 8000844:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000854:	f000 fb8c 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000858:	2323      	movs	r3, #35	; 0x23
 800085a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800086e:	f000 fb7f 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000872:	2303      	movs	r3, #3
 8000874:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_GPIO_Init+0xd8>)
 8000884:	f000 fb74 	bl	8000f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2006      	movs	r0, #6
 800088e:	f000 fb3a 	bl	8000f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000892:	2006      	movs	r0, #6
 8000894:	f000 fb51 	bl	8000f3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	48000800 	.word	0x48000800
 80008a4:	48000400 	.word	0x48000400
 80008a8:	48000c00 	.word	0x48000c00

080008ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	80fb      	strh	r3, [r7, #6]
		//SEND THE TIME TO HANDLER


	}

}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c6:	b672      	cpsid	i
}
 80008c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ca:	e7fe      	b.n	80008ca <Error_Handler+0x8>

080008cc <LL_AHB2_GRP1_EnableClock>:
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f0:	68fb      	ldr	r3, [r7, #12]
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008fe:	b480      	push	{r7}
 8000900:	b085      	sub	sp, #20
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800090c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4313      	orrs	r3, r2
 8000914:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800091a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4013      	ands	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800093e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4313      	orrs	r3, r2
 8000946:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800094c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000954:	68fb      	ldr	r3, [r7, #12]
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000980:	d102      	bne.n	8000988 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff ffbb 	bl	80008fe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09c      	sub	sp, #112	; 0x70
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2250      	movs	r2, #80	; 0x50
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 fcbf 	bl	8004334 <memset>
  if(huart->Instance==USART1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_UART_MspInit+0x88>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d126      	bne.n	8000a0e <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 f8c7 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d8:	f7ff ff73 	bl	80008c2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009e0:	f7ff ffa6 	bl	8000930 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff ff71 	bl	80008cc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f8:	2302      	movs	r3, #2
 80009fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fc:	2307      	movs	r3, #7
 80009fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f000 fab1 	bl	8000f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3770      	adds	r7, #112	; 0x70
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40013800 	.word	0x40013800

08000a1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09c      	sub	sp, #112	; 0x70
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2250      	movs	r2, #80	; 0x50
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 fc79 	bl	8004334 <memset>
  if(hpcd->Instance==USB)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <HAL_PCD_MspInit+0xa8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d136      	bne.n	8000aba <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a50:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000a52:	2318      	movs	r3, #24
 8000a54:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000a62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a66:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a6c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000a6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 f871 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000a84:	f7ff ff1d 	bl	80008c2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff ff1f 	bl	80008cc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a92:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000aa0:	230a      	movs	r3, #10
 8000aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f000 fa5f 	bl	8000f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ab2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ab6:	f7ff ff22 	bl	80008fe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3770      	adds	r7, #112	; 0x70
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40006800 	.word	0x40006800

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f8f0 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEST_INPUT_Pin);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 fbad 	bl	8001280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <SystemInit+0x98>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <SystemInit+0x98>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b54:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000b58:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <SystemInit+0x9c>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b76:	f023 0305 	bic.w	r3, r3, #5
 8000b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b96:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <SystemInit+0xa0>)
 8000b98:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <SystemInit+0xa0>)
 8000ba0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00
 8000bc8:	faf6fefb 	.word	0xfaf6fefb
 8000bcc:	22041000 	.word	0x22041000

08000bd0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000bd0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd4:	3304      	adds	r3, #4

08000bd6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000bda:	d3f9      	bcc.n	8000bd0 <CopyDataInit>
  bx lr
 8000bdc:	4770      	bx	lr

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000bde:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000be0:	3004      	adds	r0, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000be2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>
  bx lr
 8000be6:	4770      	bx	lr

08000be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bec:	f7ff ff9e 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <LoopForever+0x6>)
 8000bf2:	490c      	ldr	r1, [pc, #48]	; (8000c24 <LoopForever+0xa>)
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <LoopForever+0xe>)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f7ff ffed 	bl	8000bd6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <LoopForever+0x12>)
 8000bfe:	490c      	ldr	r1, [pc, #48]	; (8000c30 <LoopForever+0x16>)
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <LoopForever+0x1a>)
 8000c02:	2300      	movs	r3, #0
 8000c04:	f7ff ffe7 	bl	8000bd6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <LoopForever+0x1e>)
 8000c0a:	490c      	ldr	r1, [pc, #48]	; (8000c3c <LoopForever+0x22>)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f7ff ffe8 	bl	8000be2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c12:	f003 fb6b 	bl	80042ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c16:	f7ff fc63 	bl	80004e0 <main>

08000c1a <LoopForever>:

LoopForever:
  b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
  ldr   r0, =_estack
 8000c1c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000014 	.word	0x20000014
 8000c28:	08004460 	.word	0x08004460
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c2c:	20030000 	.word	0x20030000
 8000c30:	20030000 	.word	0x20030000
 8000c34:	0800446c 	.word	0x0800446c
  INIT_BSS _sbss, _ebss
 8000c38:	20000014 	.word	0x20000014
 8000c3c:	20000414 	.word	0x20000414

08000c40 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_Init+0x3c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <HAL_Init+0x3c>)
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 f948 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f80f 	bl	8000c84 <HAL_InitTick>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	e001      	b.n	8000c76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c72:	f7ff fe76 	bl	8000962 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58004000 	.word	0x58004000

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_InitTick+0x6c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d024      	beq.n	8000ce2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c98:	f001 fcc2 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_InitTick+0x6c>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f950 	bl	8000f56 <HAL_SYSTICK_Config>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10f      	bne.n	8000cdc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	d809      	bhi.n	8000cd6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cca:	f000 f91c 	bl	8000f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_InitTick+0x70>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e007      	b.n	8000ce6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e004      	b.n	8000ce6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e001      	b.n	8000ce6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000010 	.word	0x20000010
 8000cf4:	2000000c 	.word	0x2000000c

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000010 	.word	0x20000010
 8000d1c:	20000410 	.word	0x20000410

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000410 	.word	0x20000410

08000d38 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTickPrio+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	2000000c 	.word	0x2000000c

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff29 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff40 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff90 	bl	8000e44 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5f 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff33 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffa4 	bl	8000eac <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	e14c      	b.n	800121a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 813e 	beq.w	8001214 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d005      	beq.n	8000fb0 <HAL_GPIO_Init+0x40>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 0201 	and.w	r2, r3, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b03      	cmp	r3, #3
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	6939      	ldr	r1, [r7, #16]
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0203 	and.w	r2, r3, #3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8098 	beq.w	8001214 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80010e4:	4a54      	ldr	r2, [pc, #336]	; (8001238 <HAL_GPIO_Init+0x2c8>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800110e:	d019      	beq.n	8001144 <HAL_GPIO_Init+0x1d4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4a      	ldr	r2, [pc, #296]	; (800123c <HAL_GPIO_Init+0x2cc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d013      	beq.n	8001140 <HAL_GPIO_Init+0x1d0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a49      	ldr	r2, [pc, #292]	; (8001240 <HAL_GPIO_Init+0x2d0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00d      	beq.n	800113c <HAL_GPIO_Init+0x1cc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a48      	ldr	r2, [pc, #288]	; (8001244 <HAL_GPIO_Init+0x2d4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d007      	beq.n	8001138 <HAL_GPIO_Init+0x1c8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a47      	ldr	r2, [pc, #284]	; (8001248 <HAL_GPIO_Init+0x2d8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <HAL_GPIO_Init+0x1c4>
 8001130:	2304      	movs	r3, #4
 8001132:	e008      	b.n	8001146 <HAL_GPIO_Init+0x1d6>
 8001134:	2307      	movs	r3, #7
 8001136:	e006      	b.n	8001146 <HAL_GPIO_Init+0x1d6>
 8001138:	2303      	movs	r3, #3
 800113a:	e004      	b.n	8001146 <HAL_GPIO_Init+0x1d6>
 800113c:	2302      	movs	r3, #2
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x1d6>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_GPIO_Init+0x1d6>
 8001144:	2300      	movs	r3, #0
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	f002 0203 	and.w	r2, r2, #3
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	4093      	lsls	r3, r2
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001156:	4938      	ldr	r1, [pc, #224]	; (8001238 <HAL_GPIO_Init+0x2c8>)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001164:	4b39      	ldr	r3, [pc, #228]	; (800124c <HAL_GPIO_Init+0x2dc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001188:	4a30      	ldr	r2, [pc, #192]	; (800124c <HAL_GPIO_Init+0x2dc>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_GPIO_Init+0x2dc>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011b2:	4a26      	ldr	r2, [pc, #152]	; (800124c <HAL_GPIO_Init+0x2dc>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_GPIO_Init+0x2dc>)
 80011ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_GPIO_Init+0x2dc>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_GPIO_Init+0x2dc>)
 80011e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <HAL_GPIO_Init+0x2dc>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	f47f aeab 	bne.w	8000f80 <HAL_GPIO_Init+0x10>
  }
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	371c      	adds	r7, #28
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	40010000 	.word	0x40010000
 800123c:	48000400 	.word	0x48000400
 8001240:	48000800 	.word	0x48000800
 8001244:	48000c00 	.word	0x48000c00
 8001248:	48001000 	.word	0x48001000
 800124c:	58000800 	.word	0x58000800

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800126c:	e002      	b.n	8001274 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fb04 	bl	80008ac <HAL_GPIO_EXTI_Callback>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58000800 	.word	0x58000800

080012b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	b08b      	sub	sp, #44	; 0x2c
 80012b4:	af06      	add	r7, sp, #24
 80012b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0cb      	b.n	800145a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fba0 	bl	8000a1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2203      	movs	r2, #3
 80012e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 ffc3 	bl	8004274 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e040      	b.n	8001376 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	3301      	adds	r3, #1
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3303      	adds	r3, #3
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	3338      	adds	r3, #56	; 0x38
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	333c      	adds	r3, #60	; 0x3c
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	440b      	add	r3, r1
 800136a:	3340      	adds	r3, #64	; 0x40
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	3301      	adds	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3b9      	bcc.n	80012f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e044      	b.n	8001410 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	440b      	add	r3, r1
 8001394:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	3301      	adds	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3b5      	bcc.n	8001386 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	687e      	ldr	r6, [r7, #4]
 8001422:	466d      	mov	r5, sp
 8001424:	f106 0410 	add.w	r4, r6, #16
 8001428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	602b      	str	r3, [r5, #0]
 8001430:	1d33      	adds	r3, r6, #4
 8001432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f002 ff38 	bl	80042aa <USB_DevInit>

  hpcd->USB_Address = 0U;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d102      	bne.n	8001458 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f805 	bl	8001462 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001462 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001486:	b29b      	uxth	r3, r3
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800149a:	b29b      	uxth	r3, r3
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	58000400 	.word	0x58000400

080014d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	58000400 	.word	0x58000400

080014f4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001506:	d101      	bne.n	800150c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_RCC_HSE_Enable>:
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_RCC_HSE_Disable>:
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800153a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_RCC_HSE_IsReady>:
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001566:	d101      	bne.n	800156c <LL_RCC_HSE_IsReady+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_RCC_HSE_IsReady+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_RCC_HSI_Enable>:
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <LL_RCC_HSI_Disable>:
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_RCC_HSI_IsReady>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80015b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c6:	d101      	bne.n	80015cc <LL_RCC_HSI_IsReady+0x18>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <LL_RCC_HSI_IsReady+0x1a>
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80015e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_RCC_HSI48_Enable>:
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800160e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_RCC_HSI48_Disable>:
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_RCC_HSI48_IsReady>:
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b02      	cmp	r3, #2
 8001658:	d101      	bne.n	800165e <LL_RCC_HSI48_IsReady+0x18>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <LL_RCC_HSI48_IsReady+0x1a>
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_RCC_LSE_Enable>:
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_RCC_LSE_Disable>:
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_RCC_LSE_EnableBypass>:
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_RCC_LSE_DisableBypass>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b02      	cmp	r3, #2
 8001704:	d101      	bne.n	800170a <LL_RCC_LSE_IsReady+0x18>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <LL_RCC_LSE_IsReady+0x1a>
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b02      	cmp	r3, #2
 800176c:	d101      	bne.n	8001772 <LL_RCC_LSI1_IsReady+0x18>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <LL_RCC_LSI1_IsReady+0x1a>
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b0:	f023 0304 	bic.w	r3, r3, #4
 80017b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d101      	bne.n	80017da <LL_RCC_LSI2_IsReady+0x18>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <LL_RCC_LSI2_IsReady+0x1a>
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001802:	4313      	orrs	r3, r2
 8001804:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6013      	str	r3, [r2, #0]
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d101      	bne.n	8001866 <LL_RCC_MSI_IsReady+0x16>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <LL_RCC_MSI_IsReady+0x18>
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800187a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018aa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2bb0      	cmp	r3, #176	; 0xb0
 80018b0:	d901      	bls.n	80018b6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80018b2:	23b0      	movs	r3, #176	; 0xb0
 80018b4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80018b6:	687b      	ldr	r3, [r7, #4]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f023 0203 	bic.w	r2, r3, #3
 8001900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4313      	orrs	r3, r2
 8001972:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001992:	f023 020f 	bic.w	r2, r3, #15
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800199e:	4313      	orrs	r3, r2
 80019a0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ab2:	d101      	bne.n	8001ab8 <LL_RCC_PLL_IsReady+0x18>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <LL_RCC_PLL_IsReady+0x1a>
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0303 	and.w	r3, r3, #3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d101      	bne.n	8001b3e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b5e:	d101      	bne.n	8001b64 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d101      	bne.n	8001b8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ba8:	d101      	bne.n	8001bae <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bcc:	d101      	bne.n	8001bd2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b08d      	sub	sp, #52	; 0x34
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e363      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 808d 	beq.w	8001d1a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c00:	f7ff fe89 	bl	8001916 <LL_RCC_GetSysClkSource>
 8001c04:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c06:	f7ff ff82 	bl	8001b0e <LL_RCC_PLL_GetMainSource>
 8001c0a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_RCC_OscConfig+0x3e>
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d147      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d144      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e347      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c2e:	f7ff fe34 	bl	800189a <LL_RCC_MSI_GetRange>
 8001c32:	4603      	mov	r3, r0
 8001c34:	429c      	cmp	r4, r3
 8001c36:	d914      	bls.n	8001c62 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fd2f 	bl	80026a0 <RCC_SetFlashLatencyFromMSIRange>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e336      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fe0e 	bl	8001872 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fe32 	bl	80018c4 <LL_RCC_MSI_SetCalibTrimming>
 8001c60:	e013      	b.n	8001c8a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe03 	bl	8001872 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fe27 	bl	80018c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fd10 	bl	80026a0 <RCC_SetFlashLatencyFromMSIRange>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e317      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c8a:	f000 fcc9 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4aa4      	ldr	r2, [pc, #656]	; (8001f24 <HAL_RCC_OscConfig+0x344>)
 8001c92:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c94:	4ba4      	ldr	r3, [pc, #656]	; (8001f28 <HAL_RCC_OscConfig+0x348>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fff3 	bl	8000c84 <HAL_InitTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d039      	beq.n	8001d18 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e308      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01e      	beq.n	8001cee <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cb0:	f7ff fdb0 	bl	8001814 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f834 	bl	8000d20 <HAL_GetTick>
 8001cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f830 	bl	8000d20 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e2f5      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cce:	f7ff fdbf 	bl	8001850 <LL_RCC_MSI_IsReady>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f1      	beq.n	8001cbc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fdc8 	bl	8001872 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fdec 	bl	80018c4 <LL_RCC_MSI_SetCalibTrimming>
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cee:	f7ff fda0 	bl	8001832 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f815 	bl	8000d20 <HAL_GetTick>
 8001cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f811 	bl	8000d20 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e2d6      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d0c:	f7ff fda0 	bl	8001850 <LL_RCC_MSI_IsReady>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f1      	bne.n	8001cfa <HAL_RCC_OscConfig+0x11a>
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d18:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d047      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d26:	f7ff fdf6 	bl	8001916 <LL_RCC_GetSysClkSource>
 8001d2a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d2c:	f7ff feef 	bl	8001b0e <LL_RCC_PLL_GetMainSource>
 8001d30:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x164>
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d108      	bne.n	8001d50 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d134      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e2b4      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_OscConfig+0x180>
 8001d5a:	f7ff fbdd 	bl	8001518 <LL_RCC_HSE_Enable>
 8001d5e:	e001      	b.n	8001d64 <HAL_RCC_OscConfig+0x184>
 8001d60:	f7ff fbe9 	bl	8001536 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d012      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe ffd8 	bl	8000d20 <HAL_GetTick>
 8001d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe ffd4 	bl	8000d20 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e299      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d86:	f7ff fbe5 	bl	8001554 <LL_RCC_HSE_IsReady>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f1      	beq.n	8001d74 <HAL_RCC_OscConfig+0x194>
 8001d90:	e011      	b.n	8001db6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7fe ffc5 	bl	8000d20 <HAL_GetTick>
 8001d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9a:	f7fe ffc1 	bl	8000d20 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	; 0x64
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e286      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dac:	f7ff fbd2 	bl	8001554 <LL_RCC_HSE_IsReady>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f1      	bne.n	8001d9a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d04c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc2:	f7ff fda8 	bl	8001916 <LL_RCC_GetSysClkSource>
 8001dc6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc8:	f7ff fea1 	bl	8001b0e <LL_RCC_PLL_GetMainSource>
 8001dcc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_OscConfig+0x200>
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d10e      	bne.n	8001df8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e266      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fbf1 	bl	80015d8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001df6:	e031      	b.n	8001e5c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d019      	beq.n	8001e34 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	f7ff fbba 	bl	8001578 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe ff8c 	bl	8000d20 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7fe ff88 	bl	8000d20 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e24d      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e1e:	f7ff fbc9 	bl	80015b4 <LL_RCC_HSI_IsReady>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f1      	beq.n	8001e0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fbd3 	bl	80015d8 <LL_RCC_HSI_SetCalibTrimming>
 8001e32:	e013      	b.n	8001e5c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e34:	f7ff fbaf 	bl	8001596 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7fe ff72 	bl	8000d20 <HAL_GetTick>
 8001e3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e40:	f7fe ff6e 	bl	8000d20 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e233      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e52:	f7ff fbaf 	bl	80015b4 <LL_RCC_HSI_IsReady>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f1      	bne.n	8001e40 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a3 	beq.w	8001fbc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d076      	beq.n	8001f6c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d046      	beq.n	8001f18 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001e8a:	f7ff fc66 	bl	800175a <LL_RCC_LSI1_IsReady>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d113      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001e94:	f7ff fc3f 	bl	8001716 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e98:	f7fe ff42 	bl	8000d20 <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ea0:	f7fe ff3e 	bl	8000d20 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e203      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001eb2:	f7ff fc52 	bl	800175a <LL_RCC_LSI1_IsReady>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f1      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001ebc:	f7ff fc5f 	bl	800177e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7fe ff2e 	bl	8000d20 <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ec8:	f7fe ff2a 	bl	8000d20 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1ef      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001eda:	f7ff fc72 	bl	80017c2 <LL_RCC_LSI2_IsReady>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f1      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fc7c 	bl	80017e6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001eee:	f7ff fc23 	bl	8001738 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7fe ff15 	bl	8000d20 <HAL_GetTick>
 8001ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001efa:	f7fe ff11 	bl	8000d20 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e1d6      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f0c:	f7ff fc25 	bl	800175a <LL_RCC_LSI1_IsReady>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f1      	bne.n	8001efa <HAL_RCC_OscConfig+0x31a>
 8001f16:	e051      	b.n	8001fbc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001f18:	f7ff fbfd 	bl	8001716 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7fe ff00 	bl	8000d20 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f22:	e00c      	b.n	8001f3e <HAL_RCC_OscConfig+0x35e>
 8001f24:	20000008 	.word	0x20000008
 8001f28:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f2c:	f7fe fef8 	bl	8000d20 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1bd      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f3e:	f7ff fc0c 	bl	800175a <LL_RCC_LSI1_IsReady>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f1      	beq.n	8001f2c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001f48:	f7ff fc2a 	bl	80017a0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f4e:	f7fe fee7 	bl	8000d20 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1ac      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f60:	f7ff fc2f 	bl	80017c2 <LL_RCC_LSI2_IsReady>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f1      	bne.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f6a:	e027      	b.n	8001fbc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001f6c:	f7ff fc18 	bl	80017a0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7fe fed6 	bl	8000d20 <HAL_GetTick>
 8001f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f78:	f7fe fed2 	bl	8000d20 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e197      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f8a:	f7ff fc1a 	bl	80017c2 <LL_RCC_LSI2_IsReady>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f1      	bne.n	8001f78 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001f94:	f7ff fbd0 	bl	8001738 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7fe fec2 	bl	8000d20 <HAL_GetTick>
 8001f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001fa0:	f7fe febe 	bl	8000d20 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e183      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001fb2:	f7ff fbd2 	bl	800175a <LL_RCC_LSI1_IsReady>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f1      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05b      	beq.n	8002080 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc8:	4ba7      	ldr	r3, [pc, #668]	; (8002268 <HAL_RCC_OscConfig+0x688>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d114      	bne.n	8001ffe <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001fd4:	f7ff fa70 	bl	80014b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fea2 	bl	8000d20 <HAL_GetTick>
 8001fdc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe0:	f7fe fe9e 	bl	8000d20 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e163      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff2:	4b9d      	ldr	r3, [pc, #628]	; (8002268 <HAL_RCC_OscConfig+0x688>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_RCC_OscConfig+0x42c>
 8002006:	f7ff fb30 	bl	800166a <LL_RCC_LSE_Enable>
 800200a:	e00c      	b.n	8002026 <HAL_RCC_OscConfig+0x446>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b05      	cmp	r3, #5
 8002012:	d104      	bne.n	800201e <HAL_RCC_OscConfig+0x43e>
 8002014:	f7ff fb4b 	bl	80016ae <LL_RCC_LSE_EnableBypass>
 8002018:	f7ff fb27 	bl	800166a <LL_RCC_LSE_Enable>
 800201c:	e003      	b.n	8002026 <HAL_RCC_OscConfig+0x446>
 800201e:	f7ff fb35 	bl	800168c <LL_RCC_LSE_Disable>
 8002022:	f7ff fb55 	bl	80016d0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d014      	beq.n	8002058 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202e:	f7fe fe77 	bl	8000d20 <HAL_GetTick>
 8002032:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7fe fe73 	bl	8000d20 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e136      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800204c:	f7ff fb51 	bl	80016f2 <LL_RCC_LSE_IsReady>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ef      	beq.n	8002036 <HAL_RCC_OscConfig+0x456>
 8002056:	e013      	b.n	8002080 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002058:	f7fe fe62 	bl	8000d20 <HAL_GetTick>
 800205c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7fe fe5e 	bl	8000d20 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e121      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002076:	f7ff fb3c 	bl	80016f2 <LL_RCC_LSE_IsReady>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ef      	bne.n	8002060 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d02c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d014      	beq.n	80020be <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002094:	f7ff fab5 	bl	8001602 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7fe fe42 	bl	8000d20 <HAL_GetTick>
 800209c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a0:	f7fe fe3e 	bl	8000d20 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e103      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80020b2:	f7ff fac8 	bl	8001646 <LL_RCC_HSI48_IsReady>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f1      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4c0>
 80020bc:	e013      	b.n	80020e6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020be:	f7ff fab1 	bl	8001624 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7fe fe2d 	bl	8000d20 <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ca:	f7fe fe29 	bl	8000d20 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0ee      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80020dc:	f7ff fab3 	bl	8001646 <LL_RCC_HSI48_IsReady>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f1      	bne.n	80020ca <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80e4 	beq.w	80022b8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f0:	f7ff fc11 	bl	8001916 <LL_RCC_GetSysClkSource>
 80020f4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	2b02      	cmp	r3, #2
 8002104:	f040 80b4 	bne.w	8002270 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0203 	and.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	429a      	cmp	r2, r3
 8002114:	d123      	bne.n	800215e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d11c      	bne.n	800215e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d114      	bne.n	800215e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d10d      	bne.n	800215e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d05d      	beq.n	800221a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d058      	beq.n	8002216 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0a1      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002176:	f7ff fc84 	bl	8001a82 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800217a:	f7fe fdd1 	bl	8000d20 <HAL_GetTick>
 800217e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe fdcd 	bl	8000d20 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e092      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ef      	bne.n	8002182 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCC_OscConfig+0x68c>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021b4:	4311      	orrs	r1, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021ba:	0212      	lsls	r2, r2, #8
 80021bc:	4311      	orrs	r1, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021c2:	4311      	orrs	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021ce:	430a      	orrs	r2, r1
 80021d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021d8:	f7ff fc44 	bl	8001a64 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ec:	f7fe fd98 	bl	8000d20 <HAL_GetTick>
 80021f0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fd94 	bl	8000d20 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e059      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ef      	beq.n	80021f4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	e050      	b.n	80022b8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e04f      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d147      	bne.n	80022b8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002228:	f7ff fc1c 	bl	8001a64 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800222c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800223c:	f7fe fd70 	bl	8000d20 <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe fd6c 	bl	8000d20 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e031      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ef      	beq.n	8002244 <HAL_RCC_OscConfig+0x664>
 8002264:	e028      	b.n	80022b8 <HAL_RCC_OscConfig+0x6d8>
 8002266:	bf00      	nop
 8002268:	58000400 	.word	0x58000400
 800226c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d01e      	beq.n	80022b4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	f7ff fc04 	bl	8001a82 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fd51 	bl	8000d20 <HAL_GetTick>
 800227e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7fe fd4d 	bl	8000d20 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e012      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ef      	bne.n	8002282 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_OscConfig+0x6e4>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	60cb      	str	r3, [r1, #12]
 80022b2:	e001      	b.n	80022b8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3734      	adds	r7, #52	; 0x34
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	eefefffc 	.word	0xeefefffc

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e12d      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b98      	ldr	r3, [pc, #608]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d91b      	bls.n	8002322 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b95      	ldr	r3, [pc, #596]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0207 	bic.w	r2, r3, #7
 80022f2:	4993      	ldr	r1, [pc, #588]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022fa:	f7fe fd11 	bl	8000d20 <HAL_GetTick>
 80022fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002300:	e008      	b.n	8002314 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002302:	f7fe fd0d 	bl	8000d20 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e111      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002314:	4b8a      	ldr	r3, [pc, #552]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d1ef      	bne.n	8002302 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fafb 	bl	800192e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002338:	f7fe fcf2 	bl	8000d20 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002340:	f7fe fcee 	bl	8000d20 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0f2      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002352:	f7ff fbe8 	bl	8001b26 <LL_RCC_IsActiveFlag_HPRE>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f1      	beq.n	8002340 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d016      	beq.n	8002396 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff faf2 	bl	8001956 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002372:	f7fe fcd5 	bl	8000d20 <HAL_GetTick>
 8002376:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800237a:	f7fe fcd1 	bl	8000d20 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0d5      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800238c:	f7ff fbdd 	bl	8001b4a <LL_RCC_IsActiveFlag_C2HPRE>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f1      	beq.n	800237a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d016      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff faeb 	bl	8001982 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fcb8 	bl	8000d20 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023b4:	f7fe fcb4 	bl	8000d20 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0b8      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023c6:	f7ff fbd3 	bl	8001b70 <LL_RCC_IsActiveFlag_SHDHPRE>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f1      	beq.n	80023b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fae5 	bl	80019b0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023e6:	f7fe fc9b 	bl	8000d20 <HAL_GetTick>
 80023ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ee:	f7fe fc97 	bl	8000d20 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e09b      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002400:	f7ff fbc9 	bl	8001b96 <LL_RCC_IsActiveFlag_PPRE1>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f1      	beq.n	80023ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d017      	beq.n	8002446 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fadb 	bl	80019d8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002422:	f7fe fc7d 	bl	8000d20 <HAL_GetTick>
 8002426:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800242a:	f7fe fc79 	bl	8000d20 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e07d      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800243c:	f7ff fbbd 	bl	8001bba <LL_RCC_IsActiveFlag_PPRE2>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f1      	beq.n	800242a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d043      	beq.n	80024da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d106      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800245a:	f7ff f87b 	bl	8001554 <LL_RCC_HSE_IsReady>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11e      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e067      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d106      	bne.n	800247e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002470:	f7ff fb16 	bl	8001aa0 <LL_RCC_PLL_IsReady>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d113      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e05c      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002486:	f7ff f9e3 	bl	8001850 <LL_RCC_MSI_IsReady>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d108      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e051      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002494:	f7ff f88e 	bl	80015b4 <LL_RCC_HSI_IsReady>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e04a      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fa21 	bl	80018ee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ac:	f7fe fc38 	bl	8000d20 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7fe fc34 	bl	8000d20 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e036      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	f7ff fa24 	bl	8001916 <LL_RCC_GetSysClkSource>
 80024ce:	4602      	mov	r2, r0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d1ec      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d21b      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 0207 	bic.w	r2, r3, #7
 80024f0:	4913      	ldr	r1, [pc, #76]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7fe fc12 	bl	8000d20 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002500:	f7fe fc0e 	bl	8000d20 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e012      	b.n	8002538 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x278>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d1ef      	bne.n	8002500 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002520:	f000 f87e 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002524:	4603      	mov	r3, r0
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_RCC_ClockConfig+0x27c>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800252a:	f7fe fc05 	bl	8000d38 <HAL_GetTickPrio>
 800252e:	4603      	mov	r3, r0
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fba7 	bl	8000c84 <HAL_InitTick>
 8002536:	4603      	mov	r3, r0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	58004000 	.word	0x58004000
 8002544:	20000008 	.word	0x20000008

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254e:	f7ff f9e2 	bl	8001916 <LL_RCC_GetSysClkSource>
 8002552:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800255a:	f7ff f99e 	bl	800189a <LL_RCC_MSI_GetRange>
 800255e:	4603      	mov	r3, r0
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e04b      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b04      	cmp	r3, #4
 8002574:	d102      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e045      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d10a      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002582:	f7fe ffb7 	bl	80014f4 <LL_RCC_HSE_IsEnabledDiv2>
 8002586:	4603      	mov	r3, r0
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_RCC_GetSysClockFreq+0xd0>)
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e03a      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e037      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002598:	f7ff fab9 	bl	8001b0e <LL_RCC_PLL_GetMainSource>
 800259c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d003      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x64>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x6a>
 80025aa:	e00d      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025ae:	60bb      	str	r3, [r7, #8]
        break;
 80025b0:	e015      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025b2:	f7fe ff9f 	bl	80014f4 <LL_RCC_HSE_IsEnabledDiv2>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d102      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025be:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025c0:	e00d      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_RCC_GetSysClockFreq+0xd4>)
 80025c4:	60bb      	str	r3, [r7, #8]
        break;
 80025c6:	e00a      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025c8:	f7ff f967 	bl	800189a <LL_RCC_MSI_GetRange>
 80025cc:	4603      	mov	r3, r0
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	60bb      	str	r3, [r7, #8]
        break;
 80025dc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80025de:	f7ff fa71 	bl	8001ac4 <LL_RCC_PLL_GetN>
 80025e2:	4602      	mov	r2, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	fb03 f402 	mul.w	r4, r3, r2
 80025ea:	f7ff fa84 	bl	8001af6 <LL_RCC_PLL_GetDivider>
 80025ee:	4603      	mov	r3, r0
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	3301      	adds	r3, #1
 80025f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80025f8:	f7ff fa71 	bl	8001ade <LL_RCC_PLL_GetR>
 80025fc:	4603      	mov	r3, r0
 80025fe:	0f5b      	lsrs	r3, r3, #29
 8002600:	3301      	adds	r3, #1
 8002602:	fbb4 f3f3 	udiv	r3, r4, r3
 8002606:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bd90      	pop	{r4, r7, pc}
 8002612:	bf00      	nop
 8002614:	080043e8 	.word	0x080043e8
 8002618:	00f42400 	.word	0x00f42400
 800261c:	01e84800 	.word	0x01e84800

08002620 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b598      	push	{r3, r4, r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002624:	f7ff ff90 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002628:	4604      	mov	r4, r0
 800262a:	f7ff f9e9 	bl	8001a00 <LL_RCC_GetAHBPrescaler>
 800262e:	4603      	mov	r3, r0
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	4a03      	ldr	r2, [pc, #12]	; (8002644 <HAL_RCC_GetHCLKFreq+0x24>)
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd98      	pop	{r3, r4, r7, pc}
 8002644:	08004388 	.word	0x08004388

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b598      	push	{r3, r4, r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800264c:	f7ff ffe8 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002650:	4604      	mov	r4, r0
 8002652:	f7ff f9ef 	bl	8001a34 <LL_RCC_GetAPB1Prescaler>
 8002656:	4603      	mov	r3, r0
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa24 f303 	lsr.w	r3, r4, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd98      	pop	{r3, r4, r7, pc}
 8002670:	080043c8 	.word	0x080043c8

08002674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002674:	b598      	push	{r3, r4, r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002678:	f7ff ffd2 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 800267c:	4604      	mov	r4, r0
 800267e:	f7ff f9e5 	bl	8001a4c <LL_RCC_GetAPB2Prescaler>
 8002682:	4603      	mov	r3, r0
 8002684:	0adb      	lsrs	r3, r3, #11
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_RCC_GetPCLK2Freq+0x28>)
 800268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd98      	pop	{r3, r4, r7, pc}
 800269c:	080043c8 	.word	0x080043c8

080026a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2bb0      	cmp	r3, #176	; 0xb0
 80026ac:	d903      	bls.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e007      	b.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	4a11      	ldr	r2, [pc, #68]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80026c6:	f7ff f9a7 	bl	8001a18 <LL_RCC_GetAHB4Prescaler>
 80026ca:	4603      	mov	r3, r0
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	4a0d      	ldr	r2, [pc, #52]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	0c9c      	lsrs	r4, r3, #18
 80026ea:	f7fe fef5 	bl	80014d8 <HAL_PWREx_GetVoltageRange>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4619      	mov	r1, r3
 80026f2:	4620      	mov	r0, r4
 80026f4:	f000 f80c 	bl	8002710 <RCC_SetFlashLatency>
 80026f8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	080043e8 	.word	0x080043e8
 8002708:	08004388 	.word	0x08004388
 800270c:	431bde83 	.word	0x431bde83

08002710 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b093      	sub	sp, #76	; 0x4c
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800271a:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <RCC_SetFlashLatency+0xe8>)
 800271c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002726:	4a35      	ldr	r2, [pc, #212]	; (80027fc <RCC_SetFlashLatency+0xec>)
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	ca07      	ldmia	r2, {r0, r1, r2}
 800272e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <RCC_SetFlashLatency+0xf0>)
 8002734:	f107 040c 	add.w	r4, r7, #12
 8002738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800273e:	2300      	movs	r3, #0
 8002740:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d11a      	bne.n	8002780 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800274a:	2300      	movs	r3, #0
 800274c:	643b      	str	r3, [r7, #64]	; 0x40
 800274e:	e013      	b.n	8002778 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	3348      	adds	r3, #72	; 0x48
 8002756:	443b      	add	r3, r7
 8002758:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d807      	bhi.n	8002772 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	3348      	adds	r3, #72	; 0x48
 8002768:	443b      	add	r3, r7
 800276a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800276e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002770:	e020      	b.n	80027b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002774:	3301      	adds	r3, #1
 8002776:	643b      	str	r3, [r7, #64]	; 0x40
 8002778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800277a:	2b03      	cmp	r3, #3
 800277c:	d9e8      	bls.n	8002750 <RCC_SetFlashLatency+0x40>
 800277e:	e019      	b.n	80027b4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002780:	2300      	movs	r3, #0
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002784:	e013      	b.n	80027ae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	3348      	adds	r3, #72	; 0x48
 800278c:	443b      	add	r3, r7
 800278e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d807      	bhi.n	80027a8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	3348      	adds	r3, #72	; 0x48
 800279e:	443b      	add	r3, r7
 80027a0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80027a6:	e005      	b.n	80027b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027aa:	3301      	adds	r3, #1
 80027ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d9e8      	bls.n	8002786 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <RCC_SetFlashLatency+0xf4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 0207 	bic.w	r2, r3, #7
 80027bc:	4911      	ldr	r1, [pc, #68]	; (8002804 <RCC_SetFlashLatency+0xf4>)
 80027be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027c4:	f7fe faac 	bl	8000d20 <HAL_GetTick>
 80027c8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027ca:	e008      	b.n	80027de <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027cc:	f7fe faa8 	bl	8000d20 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e007      	b.n	80027ee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <RCC_SetFlashLatency+0xf4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1ef      	bne.n	80027cc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	374c      	adds	r7, #76	; 0x4c
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	0800435c 	.word	0x0800435c
 80027fc:	0800436c 	.word	0x0800436c
 8002800:	08004378 	.word	0x08004378
 8002804:	58004000 	.word	0x58004000

08002808 <LL_RCC_LSE_IsEnabled>:
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <LL_RCC_LSE_IsEnabled+0x18>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <LL_RCC_LSE_IsEnabled+0x1a>
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_RCC_LSE_IsReady>:
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d101      	bne.n	8002844 <LL_RCC_LSE_IsReady+0x18>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_RCC_LSE_IsReady+0x1a>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_RCC_MSI_EnablePLLMode>:
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_RCC_SetRFWKPClockSource>:
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_RCC_SetSMPSClockSource>:
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	f023 0203 	bic.w	r2, r3, #3
 80028ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_RCC_SetSMPSPrescaler>:
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4313      	orrs	r3, r2
 80028dc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_SetUSARTClockSource>:
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_RCC_SetLPUARTClockSource>:
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <LL_RCC_SetI2CClockSource>:
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800294a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800295a:	43db      	mvns	r3, r3
 800295c:	401a      	ands	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_RCC_SetLPTIMClockSource>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0c1b      	lsrs	r3, r3, #16
 8002990:	041b      	lsls	r3, r3, #16
 8002992:	43db      	mvns	r3, r3
 8002994:	401a      	ands	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_RCC_SetSAIClockSource>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80029b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_RCC_SetRNGClockSource>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80029f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_SetCLK48ClockSource>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_RCC_SetUSBClockSource>:
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ffe3 	bl	8002a08 <LL_RCC_SetCLK48ClockSource>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <LL_RCC_SetADCClockSource>:
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_RCC_SetRTCClockSource>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_GetRTCClockSource>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_RCC_ForceBackupDomainReset>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002af6:	bf00      	nop
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_PLLSAI1_Enable>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_PLLSAI1_Disable>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b30:	6013      	str	r3, [r2, #0]
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_PLLSAI1_IsReady>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b4e:	d101      	bne.n	8002b54 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002b68:	2300      	movs	r3, #0
 8002b6a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d034      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b84:	d021      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002b86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b8a:	d81b      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b90:	d01d      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b96:	d815      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba0:	d110      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002bb2:	e00d      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f94d 	bl	8002e58 <RCCEx_PLLSAI1_ConfigNP>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]
        break;
 8002bc8:	e002      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd0:	7ffb      	ldrb	r3, [r7, #31]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fee8 	bl	80029b0 <LL_RCC_SetSAIClockSource>
 8002be0:	e001      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be2:	7ffb      	ldrb	r3, [r7, #31]
 8002be4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d046      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002bf2:	f7ff ff56 	bl	8002aa2 <LL_RCC_GetRTCClockSource>
 8002bf6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d03c      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c02:	f7fe fc59 	bl	80014b8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff30 	bl	8002a76 <LL_RCC_SetRTCClockSource>
 8002c16:	e02e      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c20:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002c22:	f7ff ff4b 	bl	8002abc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002c26:	f7ff ff5a 	bl	8002ade <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002c42:	f7ff fde1 	bl	8002808 <LL_RCC_LSE_IsEnabled>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d114      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c4c:	f7fe f868 	bl	8000d20 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c52:	e00b      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe f864 	bl	8000d20 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d902      	bls.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	77fb      	strb	r3, [r7, #31]
              break;
 8002c6a:	e004      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c6c:	f7ff fdde 	bl	800282c <LL_RCC_LSE_IsReady>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d1ee      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002c76:	7ffb      	ldrb	r3, [r7, #31]
 8002c78:	77bb      	strb	r3, [r7, #30]
 8002c7a:	e001      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7c:	7ffb      	ldrb	r3, [r7, #31]
 8002c7e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fe2a 	bl	80028ea <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fe35 	bl	8002916 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fe5d 	bl	800297c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fe52 	bl	800297c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fe2a 	bl	8002942 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fe1f 	bl	8002942 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d022      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fe8d 	bl	8002a34 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d22:	d107      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d32:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d3c:	d10b      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3304      	adds	r3, #4
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f8e3 	bl	8002f0e <RCCEx_PLLSAI1_ConfigNQ>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002d4c:	7ffb      	ldrb	r3, [r7, #31]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
 8002d54:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d02b      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d74:	d003      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fe2a 	bl	80029dc <LL_RCC_SetRNGClockSource>
 8002d88:	e00a      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff fe21 	bl	80029dc <LL_RCC_SetRNGClockSource>
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff fe34 	bl	8002a08 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002da8:	d107      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d022      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fe3d 	bl	8002a4a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd8:	d107      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df2:	d10b      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f8e3 	bl	8002fc4 <RCCEx_PLLSAI1_ConfigNR>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e02:	7ffb      	ldrb	r3, [r7, #31]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fd26 	bl	800286e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fd45 	bl	80028c2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fd2c 	bl	800289a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002e42:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002e50:	f7ff fcfe 	bl	8002850 <LL_RCC_MSI_EnablePLLMode>
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e64:	f7ff fe5b 	bl	8002b1e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e68:	f7fd ff5a 	bl	8000d20 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e6e:	e009      	b.n	8002e84 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e70:	f7fd ff56 	bl	8000d20 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d902      	bls.n	8002e84 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	73fb      	strb	r3, [r7, #15]
      break;
 8002e82:	e004      	b.n	8002e8e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e84:	f7ff fe5a 	bl	8002b3c <LL_RCC_PLLSAI1_IsReady>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d137      	bne.n	8002f04 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002ec2:	f7ff fe1d 	bl	8002b00 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec6:	f7fd ff2b 	bl	8000d20 <HAL_GetTick>
 8002eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ecc:	e009      	b.n	8002ee2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ece:	f7fd ff27 	bl	8000d20 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d902      	bls.n	8002ee2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	73fb      	strb	r3, [r7, #15]
        break;
 8002ee0:	e004      	b.n	8002eec <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ee2:	f7ff fe2b 	bl	8002b3c <LL_RCC_PLLSAI1_IsReady>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d1f0      	bne.n	8002ece <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d108      	bne.n	8002f04 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f00:	4313      	orrs	r3, r2
 8002f02:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f1a:	f7ff fe00 	bl	8002b1e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f1e:	f7fd feff 	bl	8000d20 <HAL_GetTick>
 8002f22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f24:	e009      	b.n	8002f3a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f26:	f7fd fefb 	bl	8000d20 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d902      	bls.n	8002f3a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e004      	b.n	8002f44 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f3a:	f7ff fdff 	bl	8002b3c <LL_RCC_PLLSAI1_IsReady>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d137      	bne.n	8002fba <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f74:	4313      	orrs	r3, r2
 8002f76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f78:	f7ff fdc2 	bl	8002b00 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fd fed0 	bl	8000d20 <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f82:	e009      	b.n	8002f98 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f84:	f7fd fecc 	bl	8000d20 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d902      	bls.n	8002f98 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	73fb      	strb	r3, [r7, #15]
        break;
 8002f96:	e004      	b.n	8002fa2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f98:	f7ff fdd0 	bl	8002b3c <LL_RCC_PLLSAI1_IsReady>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d1f0      	bne.n	8002f84 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d108      	bne.n	8002fba <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fd0:	f7ff fda5 	bl	8002b1e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fd4:	f7fd fea4 	bl	8000d20 <HAL_GetTick>
 8002fd8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fda:	e009      	b.n	8002ff0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fdc:	f7fd fea0 	bl	8000d20 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d902      	bls.n	8002ff0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	73fb      	strb	r3, [r7, #15]
      break;
 8002fee:	e004      	b.n	8002ffa <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ff0:	f7ff fda4 	bl	8002b3c <LL_RCC_PLLSAI1_IsReady>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d137      	bne.n	8003070 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003014:	4313      	orrs	r3, r2
 8003016:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302a:	4313      	orrs	r3, r2
 800302c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800302e:	f7ff fd67 	bl	8002b00 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003032:	f7fd fe75 	bl	8000d20 <HAL_GetTick>
 8003036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003038:	e009      	b.n	800304e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800303a:	f7fd fe71 	bl	8000d20 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d902      	bls.n	800304e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	73fb      	strb	r3, [r7, #15]
        break;
 800304c:	e004      	b.n	8003058 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800304e:	f7ff fd75 	bl	8002b3c <LL_RCC_PLLSAI1_IsReady>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d1f0      	bne.n	800303a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306c:	4313      	orrs	r3, r2
 800306e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e049      	b.n	8003120 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7fd fc65 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f000 f8ff 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIM_ConfigClockSource+0x1c>
 8003140:	2302      	movs	r3, #2
 8003142:	e0b6      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x18a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003180:	d03e      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0xd8>
 8003182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003186:	f200 8087 	bhi.w	8003298 <HAL_TIM_ConfigClockSource+0x170>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318e:	f000 8086 	beq.w	800329e <HAL_TIM_ConfigClockSource+0x176>
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	d87f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d01a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0xaa>
 800319c:	2b70      	cmp	r3, #112	; 0x70
 800319e:	d87b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d050      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x11e>
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d877      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031a8:	2b50      	cmp	r3, #80	; 0x50
 80031aa:	d03c      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0xfe>
 80031ac:	2b50      	cmp	r3, #80	; 0x50
 80031ae:	d873      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d058      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x13e>
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d86f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d064      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031bc:	2b30      	cmp	r3, #48	; 0x30
 80031be:	d86b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d060      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d867      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05c      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d05a      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031d0:	e062      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f000 f94b 	bl	800347c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	609a      	str	r2, [r3, #8]
      break;
 80031fe:	e04f      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f000 f934 	bl	800347c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003222:	609a      	str	r2, [r3, #8]
      break;
 8003224:	e03c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6859      	ldr	r1, [r3, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	461a      	mov	r2, r3
 8003234:	f000 f8a6 	bl	8003384 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2150      	movs	r1, #80	; 0x50
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f8ff 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 8003244:	e02c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	461a      	mov	r2, r3
 8003254:	f000 f8c5 	bl	80033e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2160      	movs	r1, #96	; 0x60
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f8ef 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 8003264:	e01c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	461a      	mov	r2, r3
 8003274:	f000 f886 	bl	8003384 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2140      	movs	r1, #64	; 0x40
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f8df 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 8003284:	e00c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f000 f8d6 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 8003296:	e003      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e000      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800329e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a2a      	ldr	r2, [pc, #168]	; (8003378 <TIM_Base_SetConfig+0xbc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x20>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a21      	ldr	r2, [pc, #132]	; (8003378 <TIM_Base_SetConfig+0xbc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00b      	beq.n	800330e <TIM_Base_SetConfig+0x52>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fc:	d007      	beq.n	800330e <TIM_Base_SetConfig+0x52>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1e      	ldr	r2, [pc, #120]	; (800337c <TIM_Base_SetConfig+0xc0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_Base_SetConfig+0x52>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <TIM_Base_SetConfig+0xc4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a0c      	ldr	r2, [pc, #48]	; (8003378 <TIM_Base_SetConfig+0xbc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <TIM_Base_SetConfig+0xa0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0b      	ldr	r2, [pc, #44]	; (800337c <TIM_Base_SetConfig+0xc0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_Base_SetConfig+0xa0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <TIM_Base_SetConfig+0xc4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	615a      	str	r2, [r3, #20]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40014400 	.word	0x40014400
 8003380:	40014800 	.word	0x40014800

08003384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0201 	bic.w	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 030a 	bic.w	r3, r3, #10
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	621a      	str	r2, [r3, #32]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b087      	sub	sp, #28
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	f023 0210 	bic.w	r2, r3, #16
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800340c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	031b      	lsls	r3, r3, #12
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800341e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	f043 0307 	orr.w	r3, r3, #7
 8003468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	021a      	lsls	r2, r3, #8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	431a      	orrs	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	609a      	str	r2, [r3, #8]
}
 80034b0:	bf00      	nop
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e04a      	b.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003504:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353c:	d10c      	bne.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	4313      	orrs	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40012c00 	.word	0x40012c00

0800357c <LL_RCC_GetUSARTClockSource>:
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003588:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4013      	ands	r3, r2
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_RCC_GetLPUARTClockSource>:
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80035a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4013      	ands	r3, r2
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e042      	b.n	8003654 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fd f9d5 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2224      	movs	r2, #36	; 0x24
 80035ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8f4 	bl	80037ec <UART_SetConfig>
 8003604:	4603      	mov	r3, r0
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e022      	b.n	8003654 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fb10 	bl	8003c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fb97 	bl	8003d80 <UART_CheckIdleState>
 8003652:	4603      	mov	r3, r0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003672:	2b20      	cmp	r3, #32
 8003674:	f040 80b5 	bne.w	80037e2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_UART_Receive+0x28>
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0ad      	b.n	80037e4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2222      	movs	r2, #34	; 0x22
 8003694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800369e:	f7fd fb3f 	bl	8000d20 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	88fa      	ldrh	r2, [r7, #6]
 80036a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	88fa      	ldrh	r2, [r7, #6]
 80036b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	d10e      	bne.n	80036dc <HAL_UART_Receive+0x80>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <HAL_UART_Receive+0x76>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036d0:	e02d      	b.n	800372e <HAL_UART_Receive+0xd2>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036da:	e028      	b.n	800372e <HAL_UART_Receive+0xd2>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10d      	bne.n	8003700 <HAL_UART_Receive+0xa4>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_UART_Receive+0x9a>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	22ff      	movs	r2, #255	; 0xff
 80036f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036f4:	e01b      	b.n	800372e <HAL_UART_Receive+0xd2>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	227f      	movs	r2, #127	; 0x7f
 80036fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036fe:	e016      	b.n	800372e <HAL_UART_Receive+0xd2>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003708:	d10d      	bne.n	8003726 <HAL_UART_Receive+0xca>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <HAL_UART_Receive+0xc0>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	227f      	movs	r2, #127	; 0x7f
 8003716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800371a:	e008      	b.n	800372e <HAL_UART_Receive+0xd2>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	223f      	movs	r2, #63	; 0x3f
 8003720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003724:	e003      	b.n	800372e <HAL_UART_Receive+0xd2>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003734:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373e:	d108      	bne.n	8003752 <HAL_UART_Receive+0xf6>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	e003      	b.n	800375a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800375a:	e036      	b.n	80037ca <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2200      	movs	r2, #0
 8003764:	2120      	movs	r1, #32
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fbb4 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e032      	b.n	80037e4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10c      	bne.n	800379e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b29a      	uxth	r2, r3
 800378c:	8a7b      	ldrh	r3, [r7, #18]
 800378e:	4013      	ands	r3, r2
 8003790:	b29a      	uxth	r2, r3
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3302      	adds	r3, #2
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e00c      	b.n	80037b8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	8a7b      	ldrh	r3, [r7, #18]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4013      	ands	r3, r2
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1c2      	bne.n	800375c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f0:	b08c      	sub	sp, #48	; 0x30
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	431a      	orrs	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	431a      	orrs	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4313      	orrs	r3, r2
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4baf      	ldr	r3, [pc, #700]	; (8003ad8 <UART_SetConfig+0x2ec>)
 800381c:	4013      	ands	r3, r2
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003824:	430b      	orrs	r3, r1
 8003826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4aa4      	ldr	r2, [pc, #656]	; (8003adc <UART_SetConfig+0x2f0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003854:	4313      	orrs	r3, r2
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003862:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800386c:	430b      	orrs	r3, r1
 800386e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	f023 010f 	bic.w	r1, r3, #15
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a95      	ldr	r2, [pc, #596]	; (8003ae0 <UART_SetConfig+0x2f4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d125      	bne.n	80038dc <UART_SetConfig+0xf0>
 8003890:	2003      	movs	r0, #3
 8003892:	f7ff fe73 	bl	800357c <LL_RCC_GetUSARTClockSource>
 8003896:	4603      	mov	r3, r0
 8003898:	2b03      	cmp	r3, #3
 800389a:	d81b      	bhi.n	80038d4 <UART_SetConfig+0xe8>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <UART_SetConfig+0xb8>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	080038b5 	.word	0x080038b5
 80038a8:	080038c5 	.word	0x080038c5
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038cd 	.word	0x080038cd
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ba:	e042      	b.n	8003942 <UART_SetConfig+0x156>
 80038bc:	2302      	movs	r3, #2
 80038be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038c2:	e03e      	b.n	8003942 <UART_SetConfig+0x156>
 80038c4:	2304      	movs	r3, #4
 80038c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ca:	e03a      	b.n	8003942 <UART_SetConfig+0x156>
 80038cc:	2308      	movs	r3, #8
 80038ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d2:	e036      	b.n	8003942 <UART_SetConfig+0x156>
 80038d4:	2310      	movs	r3, #16
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038da:	e032      	b.n	8003942 <UART_SetConfig+0x156>
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a7e      	ldr	r2, [pc, #504]	; (8003adc <UART_SetConfig+0x2f0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d12a      	bne.n	800393c <UART_SetConfig+0x150>
 80038e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80038ea:	f7ff fe57 	bl	800359c <LL_RCC_GetLPUARTClockSource>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038f4:	d01a      	beq.n	800392c <UART_SetConfig+0x140>
 80038f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038fa:	d81b      	bhi.n	8003934 <UART_SetConfig+0x148>
 80038fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003900:	d00c      	beq.n	800391c <UART_SetConfig+0x130>
 8003902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003906:	d815      	bhi.n	8003934 <UART_SetConfig+0x148>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <UART_SetConfig+0x128>
 800390c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003910:	d008      	beq.n	8003924 <UART_SetConfig+0x138>
 8003912:	e00f      	b.n	8003934 <UART_SetConfig+0x148>
 8003914:	2300      	movs	r3, #0
 8003916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800391a:	e012      	b.n	8003942 <UART_SetConfig+0x156>
 800391c:	2302      	movs	r3, #2
 800391e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003922:	e00e      	b.n	8003942 <UART_SetConfig+0x156>
 8003924:	2304      	movs	r3, #4
 8003926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800392a:	e00a      	b.n	8003942 <UART_SetConfig+0x156>
 800392c:	2308      	movs	r3, #8
 800392e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003932:	e006      	b.n	8003942 <UART_SetConfig+0x156>
 8003934:	2310      	movs	r3, #16
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393a:	e002      	b.n	8003942 <UART_SetConfig+0x156>
 800393c:	2310      	movs	r3, #16
 800393e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a65      	ldr	r2, [pc, #404]	; (8003adc <UART_SetConfig+0x2f0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	f040 8097 	bne.w	8003a7c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800394e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003952:	2b08      	cmp	r3, #8
 8003954:	d823      	bhi.n	800399e <UART_SetConfig+0x1b2>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <UART_SetConfig+0x170>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	08003981 	.word	0x08003981
 8003960:	0800399f 	.word	0x0800399f
 8003964:	08003989 	.word	0x08003989
 8003968:	0800399f 	.word	0x0800399f
 800396c:	0800398f 	.word	0x0800398f
 8003970:	0800399f 	.word	0x0800399f
 8003974:	0800399f 	.word	0x0800399f
 8003978:	0800399f 	.word	0x0800399f
 800397c:	08003997 	.word	0x08003997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003980:	f7fe fe62 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8003984:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003986:	e010      	b.n	80039aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003988:	4b56      	ldr	r3, [pc, #344]	; (8003ae4 <UART_SetConfig+0x2f8>)
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800398c:	e00d      	b.n	80039aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800398e:	f7fe fddb 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003992:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003994:	e009      	b.n	80039aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800399c:	e005      	b.n	80039aa <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 812b 	beq.w	8003c08 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	4a4c      	ldr	r2, [pc, #304]	; (8003ae8 <UART_SetConfig+0x2fc>)
 80039b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039bc:	461a      	mov	r2, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d305      	bcc.n	80039e2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d903      	bls.n	80039ea <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80039e8:	e10e      	b.n	8003c08 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	2200      	movs	r2, #0
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	60fa      	str	r2, [r7, #12]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	4a3c      	ldr	r2, [pc, #240]	; (8003ae8 <UART_SetConfig+0x2fc>)
 80039f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2200      	movs	r2, #0
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a0c:	f7fc fbb6 	bl	800017c <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	020b      	lsls	r3, r1, #8
 8003a22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a26:	0202      	lsls	r2, r0, #8
 8003a28:	6979      	ldr	r1, [r7, #20]
 8003a2a:	6849      	ldr	r1, [r1, #4]
 8003a2c:	0849      	lsrs	r1, r1, #1
 8003a2e:	2000      	movs	r0, #0
 8003a30:	460c      	mov	r4, r1
 8003a32:	4605      	mov	r5, r0
 8003a34:	eb12 0804 	adds.w	r8, r2, r4
 8003a38:	eb43 0905 	adc.w	r9, r3, r5
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	469a      	mov	sl, r3
 8003a44:	4693      	mov	fp, r2
 8003a46:	4652      	mov	r2, sl
 8003a48:	465b      	mov	r3, fp
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	f7fc fb95 	bl	800017c <__aeabi_uldivmod>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4613      	mov	r3, r2
 8003a58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a60:	d308      	bcc.n	8003a74 <UART_SetConfig+0x288>
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a68:	d204      	bcs.n	8003a74 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a3a      	ldr	r2, [r7, #32]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	e0c9      	b.n	8003c08 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a7a:	e0c5      	b.n	8003c08 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a84:	d16d      	bne.n	8003b62 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003a86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	d82d      	bhi.n	8003aec <UART_SetConfig+0x300>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <UART_SetConfig+0x2ac>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003ab9 	.word	0x08003ab9
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003aed 	.word	0x08003aed
 8003aa4:	08003ac7 	.word	0x08003ac7
 8003aa8:	08003aed 	.word	0x08003aed
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003aed 	.word	0x08003aed
 8003ab4:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fddc 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003abe:	e01b      	b.n	8003af8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <UART_SetConfig+0x2f8>)
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ac4:	e018      	b.n	8003af8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe fd3f 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003acc:	e014      	b.n	8003af8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ad4:	e010      	b.n	8003af8 <UART_SetConfig+0x30c>
 8003ad6:	bf00      	nop
 8003ad8:	cfff69f3 	.word	0xcfff69f3
 8003adc:	40008000 	.word	0x40008000
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	08004428 	.word	0x08004428
      default:
        pclk = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003af6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8084 	beq.w	8003c08 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	4a4b      	ldr	r2, [pc, #300]	; (8003c34 <UART_SetConfig+0x448>)
 8003b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b12:	005a      	lsls	r2, r3, #1
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	441a      	add	r2, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	2b0f      	cmp	r3, #15
 8003b2a:	d916      	bls.n	8003b5a <UART_SetConfig+0x36e>
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b32:	d212      	bcs.n	8003b5a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f023 030f 	bic.w	r3, r3, #15
 8003b3c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	8bfb      	ldrh	r3, [r7, #30]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	8bfa      	ldrh	r2, [r7, #30]
 8003b56:	60da      	str	r2, [r3, #12]
 8003b58:	e056      	b.n	8003c08 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b60:	e052      	b.n	8003c08 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b66:	3b01      	subs	r3, #1
 8003b68:	2b07      	cmp	r3, #7
 8003b6a:	d822      	bhi.n	8003bb2 <UART_SetConfig+0x3c6>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <UART_SetConfig+0x388>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003b95 	.word	0x08003b95
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003bb3 	.word	0x08003bb3
 8003b80:	08003ba3 	.word	0x08003ba3
 8003b84:	08003bb3 	.word	0x08003bb3
 8003b88:	08003bb3 	.word	0x08003bb3
 8003b8c:	08003bb3 	.word	0x08003bb3
 8003b90:	08003bab 	.word	0x08003bab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b94:	f7fe fd6e 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 8003b98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b9a:	e010      	b.n	8003bbe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b9c:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <UART_SetConfig+0x44c>)
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ba0:	e00d      	b.n	8003bbe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba2:	f7fe fcd1 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003ba6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ba8:	e009      	b.n	8003bbe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bb0:	e005      	b.n	8003bbe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bbc:	bf00      	nop
    }

    if (pclk != 0U)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d021      	beq.n	8003c08 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	4a1a      	ldr	r2, [pc, #104]	; (8003c34 <UART_SetConfig+0x448>)
 8003bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	441a      	add	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	2b0f      	cmp	r3, #15
 8003bec:	d909      	bls.n	8003c02 <UART_SetConfig+0x416>
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d205      	bcs.n	8003c02 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	e002      	b.n	8003c08 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2200      	movs	r2, #0
 8003c22:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003c24:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3730      	adds	r7, #48	; 0x30
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c32:	bf00      	nop
 8003c34:	08004428 	.word	0x08004428
 8003c38:	00f42400 	.word	0x00f42400

08003c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01a      	beq.n	8003d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3a:	d10a      	bne.n	8003d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b098      	sub	sp, #96	; 0x60
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d90:	f7fc ffc6 	bl	8000d20 <HAL_GetTick>
 8003d94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d12f      	bne.n	8003e04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dac:	2200      	movs	r2, #0
 8003dae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f88e 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d022      	beq.n	8003e04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dde:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e6      	bne.n	8003dbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e063      	b.n	8003ecc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d149      	bne.n	8003ea6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f857 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d03c      	beq.n	8003ea6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	623b      	str	r3, [r7, #32]
   return(result);
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e4c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e6      	bne.n	8003e2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3308      	adds	r3, #8
 8003e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e7e:	61fa      	str	r2, [r7, #28]
 8003e80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	69b9      	ldr	r1, [r7, #24]
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	617b      	str	r3, [r7, #20]
   return(result);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e5      	bne.n	8003e5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e012      	b.n	8003ecc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3758      	adds	r7, #88	; 0x58
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee4:	e049      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eec:	d045      	beq.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fc ff17 	bl	8000d20 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e048      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d031      	beq.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d110      	bne.n	8003f46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f838 	bl	8003fa2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2208      	movs	r2, #8
 8003f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e029      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f54:	d111      	bne.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f81e 	bl	8003fa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e00f      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d0a6      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b095      	sub	sp, #84	; 0x54
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003fca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e6      	bne.n	8003faa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e3      	bne.n	8003fdc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d118      	bne.n	800404e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	60bb      	str	r3, [r7, #8]
   return(result);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f023 0310 	bic.w	r3, r3, #16
 8004030:	647b      	str	r3, [r7, #68]	; 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6979      	ldr	r1, [r7, #20]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	613b      	str	r3, [r7, #16]
   return(result);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e6      	bne.n	800401c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004062:	bf00      	nop
 8004064:	3754      	adds	r7, #84	; 0x54
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_UARTEx_DisableFifoMode+0x16>
 8004080:	2302      	movs	r3, #2
 8004082:	e027      	b.n	80040d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	; 0x24
 8004090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80040b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e02d      	b.n	8004154 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2224      	movs	r2, #36	; 0x24
 8004104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f84f 	bl	80041d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004170:	2302      	movs	r3, #2
 8004172:	e02d      	b.n	80041d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f811 	bl	80041d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d108      	bne.n	80041fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041f8:	e031      	b.n	800425e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041fa:	2308      	movs	r3, #8
 80041fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041fe:	2308      	movs	r3, #8
 8004200:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	0e5b      	lsrs	r3, r3, #25
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	0f5b      	lsrs	r3, r3, #29
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004222:	7bbb      	ldrb	r3, [r7, #14]
 8004224:	7b3a      	ldrb	r2, [r7, #12]
 8004226:	4911      	ldr	r1, [pc, #68]	; (800426c <UARTEx_SetNbDataToProcess+0x94>)
 8004228:	5c8a      	ldrb	r2, [r1, r2]
 800422a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800422e:	7b3a      	ldrb	r2, [r7, #12]
 8004230:	490f      	ldr	r1, [pc, #60]	; (8004270 <UARTEx_SetNbDataToProcess+0x98>)
 8004232:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004234:	fb93 f3f2 	sdiv	r3, r3, r2
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	7b7a      	ldrb	r2, [r7, #13]
 8004244:	4909      	ldr	r1, [pc, #36]	; (800426c <UARTEx_SetNbDataToProcess+0x94>)
 8004246:	5c8a      	ldrb	r2, [r1, r2]
 8004248:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800424c:	7b7a      	ldrb	r2, [r7, #13]
 800424e:	4908      	ldr	r1, [pc, #32]	; (8004270 <UARTEx_SetNbDataToProcess+0x98>)
 8004250:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004252:	fb93 f3f2 	sdiv	r3, r3, r2
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	08004440 	.word	0x08004440
 8004270:	08004448 	.word	0x08004448

08004274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800427c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004280:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	b29b      	uxth	r3, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	b29b      	uxth	r3, r3
 8004292:	4013      	ands	r3, r2
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042aa:	b084      	sub	sp, #16
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	f107 0014 	add.w	r0, r7, #20
 80042b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	b004      	add	sp, #16
 80042ea:	4770      	bx	lr

080042ec <__libc_init_array>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4d0d      	ldr	r5, [pc, #52]	; (8004324 <__libc_init_array+0x38>)
 80042f0:	4c0d      	ldr	r4, [pc, #52]	; (8004328 <__libc_init_array+0x3c>)
 80042f2:	1b64      	subs	r4, r4, r5
 80042f4:	10a4      	asrs	r4, r4, #2
 80042f6:	2600      	movs	r6, #0
 80042f8:	42a6      	cmp	r6, r4
 80042fa:	d109      	bne.n	8004310 <__libc_init_array+0x24>
 80042fc:	4d0b      	ldr	r5, [pc, #44]	; (800432c <__libc_init_array+0x40>)
 80042fe:	4c0c      	ldr	r4, [pc, #48]	; (8004330 <__libc_init_array+0x44>)
 8004300:	f000 f820 	bl	8004344 <_init>
 8004304:	1b64      	subs	r4, r4, r5
 8004306:	10a4      	asrs	r4, r4, #2
 8004308:	2600      	movs	r6, #0
 800430a:	42a6      	cmp	r6, r4
 800430c:	d105      	bne.n	800431a <__libc_init_array+0x2e>
 800430e:	bd70      	pop	{r4, r5, r6, pc}
 8004310:	f855 3b04 	ldr.w	r3, [r5], #4
 8004314:	4798      	blx	r3
 8004316:	3601      	adds	r6, #1
 8004318:	e7ee      	b.n	80042f8 <__libc_init_array+0xc>
 800431a:	f855 3b04 	ldr.w	r3, [r5], #4
 800431e:	4798      	blx	r3
 8004320:	3601      	adds	r6, #1
 8004322:	e7f2      	b.n	800430a <__libc_init_array+0x1e>
 8004324:	08004458 	.word	0x08004458
 8004328:	08004458 	.word	0x08004458
 800432c:	08004458 	.word	0x08004458
 8004330:	0800445c 	.word	0x0800445c

08004334 <memset>:
 8004334:	4402      	add	r2, r0
 8004336:	4603      	mov	r3, r0
 8004338:	4293      	cmp	r3, r2
 800433a:	d100      	bne.n	800433e <memset+0xa>
 800433c:	4770      	bx	lr
 800433e:	f803 1b01 	strb.w	r1, [r3], #1
 8004342:	e7f9      	b.n	8004338 <memset+0x4>

08004344 <_init>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr

08004350 <_fini>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	bf00      	nop
 8004354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004356:	bc08      	pop	{r3}
 8004358:	469e      	mov	lr, r3
 800435a:	4770      	bx	lr
